{"sha": "8f51ad2420776925c12be67a7bf38ac28343fd1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNTFhZDI0MjA3NzY5MjVjMTJiZTY3YTdiZjM4YWMyODM0M2ZkMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-20T08:10:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-20T08:10:23Z"}, "message": "auto merge of #19511 : eddyb/rust/no-shadow, r=alexcrichton\n\nr? @erickt", "tree": {"sha": "e90fecd9367de5eed1462043cf64c0553ae7d55a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e90fecd9367de5eed1462043cf64c0553ae7d55a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f51ad2420776925c12be67a7bf38ac28343fd1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f51ad2420776925c12be67a7bf38ac28343fd1f", "html_url": "https://github.com/rust-lang/rust/commit/8f51ad2420776925c12be67a7bf38ac28343fd1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f51ad2420776925c12be67a7bf38ac28343fd1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8443b09e361b96d1f9b7f45a65ed0d31c0e86e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/8443b09e361b96d1f9b7f45a65ed0d31c0e86e70", "html_url": "https://github.com/rust-lang/rust/commit/8443b09e361b96d1f9b7f45a65ed0d31c0e86e70"}, {"sha": "b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "html_url": "https://github.com/rust-lang/rust/commit/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01"}], "stats": {"total": 456, "additions": 212, "deletions": 244}, "files": [{"sha": "fbaebd0125d0d3e9e1def4d2573c33ab0958a486", "filename": "src/libcollections/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbench.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::prelude::*;\n+use prelude::*;\n use std::rand;\n use std::rand::Rng;\n use test::Bencher;"}, {"sha": "e1c06736b369619a2e8602f201346696aaf65d4d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -617,10 +617,9 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::BinaryHeap;\n-    use vec::Vec;\n \n     #[test]\n     fn test_iterator() {"}, {"sha": "f59fb1c5d3daa6e2e8088434dda29277b929cbe2", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -1686,16 +1686,15 @@ impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n-    use std::iter::range_step;\n+    use prelude::*;\n+    use core::iter::range_step;\n+    use core::u32;\n     use std::rand;\n     use std::rand::Rng;\n-    use std::u32;\n     use test::{Bencher, black_box};\n \n     use super::{Bitv, BitvSet, from_fn, from_bytes};\n     use bitv;\n-    use vec::Vec;\n \n     static BENCH_BITS : uint = 1 << 14;\n \n@@ -2038,7 +2037,7 @@ mod tests {\n     #[test]\n     fn test_from_bytes() {\n         let bitv = from_bytes(&[0b10110110, 0b00000000, 0b11111111]);\n-        let str = format!(\"{}{}{}\", \"10110110\", \"00000000\", \"11111111\");\n+        let str = concat!(\"10110110\", \"00000000\", \"11111111\");\n         assert_eq!(bitv.to_string(), str);\n     }\n "}, {"sha": "01096c1fd4e9617a8481a511291be1673104c5d4", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -131,12 +131,12 @@ pub enum Entry<'a, K:'a, V:'a> {\n /// A vacant Entry.\n pub struct VacantEntry<'a, K:'a, V:'a> {\n     key: K,\n-    stack: stack::SearchStack<'a, K, V, node::Edge, node::Leaf>,\n+    stack: stack::SearchStack<'a, K, V, node::handle::Edge, node::handle::Leaf>,\n }\n \n /// An occupied Entry.\n pub struct OccupiedEntry<'a, K:'a, V:'a> {\n-    stack: stack::SearchStack<'a, K, V, node::KV, node::LeafOrInternal>,\n+    stack: stack::SearchStack<'a, K, V, node::handle::KV, node::handle::LeafOrInternal>,\n }\n \n impl<K: Ord, V> BTreeMap<K, V> {\n@@ -496,7 +496,8 @@ mod stack {\n     use core::kinds::marker;\n     use core::mem;\n     use super::BTreeMap;\n-    use super::super::node::{mod, Node, Fit, Split, KV, Edge, Internal, Leaf, LeafOrInternal};\n+    use super::super::node::{mod, Node, Fit, Split, Internal, Leaf};\n+    use super::super::node::handle;\n     use vec::Vec;\n \n     /// A generic mutable reference, identical to `&mut` except for the fact that its lifetime\n@@ -520,7 +521,7 @@ mod stack {\n         }\n     }\n \n-    type StackItem<K, V> = node::Handle<*mut Node<K, V>, Edge, Internal>;\n+    type StackItem<K, V> = node::Handle<*mut Node<K, V>, handle::Edge, handle::Internal>;\n     type Stack<K, V> = Vec<StackItem<K, V>>;\n \n     /// A `PartialSearchStack` handles the construction of a search stack.\n@@ -595,7 +596,9 @@ mod stack {\n         /// Pushes the requested child of the stack's current top on top of the stack. If the child\n         /// exists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\n         /// yielded.\n-        pub fn push(mut self, mut edge: node::Handle<IdRef<'id, Node<K, V>>, Edge, Internal>)\n+        pub fn push(mut self, mut edge: node::Handle<IdRef<'id, Node<K, V>>,\n+                                                     handle::Edge,\n+                                                     handle::Internal>)\n                     -> PartialSearchStack<'a, K, V> {\n             self.stack.push(edge.as_raw());\n             PartialSearchStack {\n@@ -617,7 +620,7 @@ mod stack {\n         }\n     }\n \n-    impl<'a, K, V, NodeType> SearchStack<'a, K, V, KV, NodeType> {\n+    impl<'a, K, V, NodeType> SearchStack<'a, K, V, handle::KV, NodeType> {\n         /// Gets a reference to the value the stack points to.\n         pub fn peek(&self) -> &V {\n             unsafe { self.top.from_raw().into_kv().1 }\n@@ -640,7 +643,7 @@ mod stack {\n         }\n     }\n \n-    impl<'a, K, V> SearchStack<'a, K, V, KV, Leaf> {\n+    impl<'a, K, V> SearchStack<'a, K, V, handle::KV, handle::Leaf> {\n         /// Removes the key and value in the top element of the stack, then handles underflows as\n         /// described in BTree's pop function.\n         fn remove_leaf(mut self) -> V {\n@@ -686,7 +689,7 @@ mod stack {\n         }\n     }\n \n-    impl<'a, K, V> SearchStack<'a, K, V, KV, LeafOrInternal> {\n+    impl<'a, K, V> SearchStack<'a, K, V, handle::KV, handle::LeafOrInternal> {\n         /// Removes the key and value in the top element of the stack, then handles underflows as\n         /// described in BTree's pop function.\n         pub fn remove(self) -> V {\n@@ -703,7 +706,7 @@ mod stack {\n         /// leaves the tree in an inconsistent state that must be repaired by the caller by\n         /// removing the entry in question. Specifically the key-value pair and its successor will\n         /// become swapped.\n-        fn into_leaf(mut self) -> SearchStack<'a, K, V, KV, Leaf> {\n+        fn into_leaf(mut self) -> SearchStack<'a, K, V, handle::KV, handle::Leaf> {\n             unsafe {\n                 let mut top_raw = self.top;\n                 let mut top = top_raw.from_raw_mut();\n@@ -757,7 +760,7 @@ mod stack {\n         }\n     }\n \n-    impl<'a, K, V> SearchStack<'a, K, V, Edge, Leaf> {\n+    impl<'a, K, V> SearchStack<'a, K, V, handle::Edge, handle::Leaf> {\n         /// Inserts the key and value into the top element in the stack, and if that node has to\n         /// split recursively inserts the split contents into the next element stack until\n         /// splits stop.\n@@ -1332,7 +1335,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::{BTreeMap, Occupied, Vacant};\n \n@@ -1534,7 +1537,7 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use std::prelude::*;\n+    use prelude::*;\n     use std::rand::{weak_rng, Rng};\n     use test::{Bencher, black_box};\n "}, {"sha": "1666f42d82bb5384fb0f88abfab936c594d9064f", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -34,9 +34,9 @@ pub enum InsertionResult<K, V> {\n /// Represents the result of a search for a key in a single node\n pub enum SearchResult<NodeRef> {\n     /// The element was found at the given index\n-    Found(Handle<NodeRef, KV, LeafOrInternal>),\n+    Found(Handle<NodeRef, handle::KV, handle::LeafOrInternal>),\n     /// The element wasn't found, but if it's anywhere, it must be beyond this edge\n-    GoDown(Handle<NodeRef, Edge, LeafOrInternal>),\n+    GoDown(Handle<NodeRef, handle::Edge, handle::LeafOrInternal>),\n }\n \n /// A B-Tree Node. We keep keys/edges/values separate to optimize searching for keys.\n@@ -494,12 +494,16 @@ pub struct Handle<NodeRef, Type, NodeType> {\n     index: uint\n }\n \n-pub enum KV {}\n-pub enum Edge {}\n+pub mod handle {\n+    // Handle types.\n+    pub enum KV {}\n+    pub enum Edge {}\n \n-pub enum LeafOrInternal {}\n-pub enum Leaf {}\n-pub enum Internal {}\n+    // Handle node types.\n+    pub enum LeafOrInternal {}\n+    pub enum Leaf {}\n+    pub enum Internal {}\n+}\n \n impl<K: Ord, V> Node<K, V> {\n     /// Searches for the given key in the node. If it finds an exact match,\n@@ -625,7 +629,7 @@ impl<K, V, Type, NodeType> Handle<*mut Node<K, V>, Type, NodeType> {\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> Handle<&'a Node<K, V>, Edge, Internal> {\n+impl<'a, K: 'a, V: 'a> Handle<&'a Node<K, V>, handle::Edge, handle::Internal> {\n     /// Turns the handle into a reference to the edge it points at. This is necessary because the\n     /// returned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\n     /// making it more suitable for moving down a chain of nodes.\n@@ -636,7 +640,7 @@ impl<'a, K: 'a, V: 'a> Handle<&'a Node<K, V>, Edge, Internal> {\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> Handle<&'a mut Node<K, V>, Edge, Internal> {\n+impl<'a, K: 'a, V: 'a> Handle<&'a mut Node<K, V>, handle::Edge, handle::Internal> {\n     /// Turns the handle into a mutable reference to the edge it points at. This is necessary\n     /// because the returned pointer has a larger lifetime than what would be returned by\n     /// `edge_mut`, making it more suitable for moving down a chain of nodes.\n@@ -647,7 +651,7 @@ impl<'a, K: 'a, V: 'a> Handle<&'a mut Node<K, V>, Edge, Internal> {\n     }\n }\n \n-impl<K, V, NodeRef: Deref<Node<K, V>>> Handle<NodeRef, Edge, Internal> {\n+impl<K, V, NodeRef: Deref<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n     // This doesn't exist because there are no uses for it,\n     // but is fine to add, analagous to edge_mut.\n     //\n@@ -657,11 +661,11 @@ impl<K, V, NodeRef: Deref<Node<K, V>>> Handle<NodeRef, Edge, Internal> {\n }\n \n pub enum ForceResult<NodeRef, Type> {\n-    Leaf(Handle<NodeRef, Type, Leaf>),\n-    Internal(Handle<NodeRef, Type, Internal>)\n+    Leaf(Handle<NodeRef, Type, handle::Leaf>),\n+    Internal(Handle<NodeRef, Type, handle::Internal>)\n }\n \n-impl<K, V, NodeRef: Deref<Node<K, V>>, Type> Handle<NodeRef, Type, LeafOrInternal> {\n+impl<K, V, NodeRef: Deref<Node<K, V>>, Type> Handle<NodeRef, Type, handle::LeafOrInternal> {\n     /// Figure out whether this handle is pointing to something in a leaf node or to something in\n     /// an internal node, clarifying the type according to the result.\n     pub fn force(self) -> ForceResult<NodeRef, Type> {\n@@ -679,7 +683,7 @@ impl<K, V, NodeRef: Deref<Node<K, V>>, Type> Handle<NodeRef, Type, LeafOrInterna\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, Edge, Leaf> {\n+impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Leaf> {\n     /// Tries to insert this key-value pair at the given index in this leaf node\n     /// If the node is full, we have to split it.\n     ///\n@@ -711,7 +715,7 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, Edge, Leaf> {\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, Edge, Internal> {\n+impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n     /// Returns a mutable reference to the edge pointed-to by this handle. This should not be\n     /// confused with `node`, which references the parent node of what is returned here.\n     pub fn edge_mut(&mut self) -> &mut Node<K, V> {\n@@ -794,11 +798,11 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, Edge, Internal> {\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, Edge, NodeType> {\n+impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, handle::Edge, NodeType> {\n     /// Gets the handle pointing to the key/value pair just to the left of the pointed-to edge.\n     /// This is unsafe because the handle might point to the first edge in the node, which has no\n     /// pair to its left.\n-    unsafe fn left_kv<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, KV, NodeType> {\n+    unsafe fn left_kv<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::KV, NodeType> {\n         Handle {\n             node: &mut *self.node,\n             index: self.index - 1\n@@ -808,15 +812,15 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, Edge, NodeTy\n     /// Gets the handle pointing to the key/value pair just to the right of the pointed-to edge.\n     /// This is unsafe because the handle might point to the last edge in the node, which has no\n     /// pair to its right.\n-    unsafe fn right_kv<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, KV, NodeType> {\n+    unsafe fn right_kv<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::KV, NodeType> {\n         Handle {\n             node: &mut *self.node,\n             index: self.index\n         }\n     }\n }\n \n-impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a Node<K, V>, KV, NodeType> {\n+impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a Node<K, V>, handle::KV, NodeType> {\n     /// Turns the handle into references to the key and value it points at. This is necessary\n     /// because the returned pointers have larger lifetimes than what would be returned by `key`\n     /// or `val`.\n@@ -831,7 +835,7 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a Node<K, V>, KV, NodeType> {\n     }\n }\n \n-impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a mut Node<K, V>, KV, NodeType> {\n+impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a mut Node<K, V>, handle::KV, NodeType> {\n     /// Turns the handle into mutable references to the key and value it points at. This is\n     /// necessary because the returned pointers have larger lifetimes than what would be returned\n     /// by `key_mut` or `val_mut`.\n@@ -848,15 +852,16 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a mut Node<K, V>, KV, NodeType> {\n     /// Convert this handle into one pointing at the edge immediately to the left of the key/value\n     /// pair pointed-to by this handle. This is useful because it returns a reference with larger\n     /// lifetime than `left_edge`.\n-    pub fn into_left_edge(self) -> Handle<&'a mut Node<K, V>, Edge, NodeType> {\n+    pub fn into_left_edge(self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> {\n         Handle {\n             node: &mut *self.node,\n             index: self.index\n         }\n     }\n }\n \n-impl<'a, K: 'a, V: 'a, NodeRef: Deref<Node<K, V>> + 'a, NodeType> Handle<NodeRef, KV, NodeType> {\n+impl<'a, K: 'a, V: 'a, NodeRef: Deref<Node<K, V>> + 'a, NodeType> Handle<NodeRef, handle::KV,\n+                                                                         NodeType> {\n     // These are fine to include, but are currently unneeded.\n     //\n     // /// Returns a reference to the key pointed-to by this handle. This doesn't return a\n@@ -874,7 +879,8 @@ impl<'a, K: 'a, V: 'a, NodeRef: Deref<Node<K, V>> + 'a, NodeType> Handle<NodeRef\n     // }\n }\n \n-impl<'a, K: 'a, V: 'a, NodeRef: DerefMut<Node<K, V>> + 'a, NodeType> Handle<NodeRef, KV, NodeType> {\n+impl<'a, K: 'a, V: 'a, NodeRef: DerefMut<Node<K, V>> + 'a, NodeType> Handle<NodeRef, handle::KV,\n+                                                                            NodeType> {\n     /// Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\n     /// reference with a lifetime as large as `into_kv_mut`, but it also does not consume the\n     /// handle.\n@@ -890,10 +896,10 @@ impl<'a, K: 'a, V: 'a, NodeRef: DerefMut<Node<K, V>> + 'a, NodeType> Handle<Node\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, KV, NodeType> {\n+impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, handle::KV, NodeType> {\n     /// Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\n     /// to by this handle.\n-    pub fn left_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, Edge, NodeType> {\n+    pub fn left_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> {\n         Handle {\n             node: &mut *self.node,\n             index: self.index\n@@ -902,15 +908,15 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>, NodeType> Handle<NodeRef, KV, NodeType\n \n     /// Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\n     /// to by this handle.\n-    pub fn right_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, Edge, NodeType> {\n+    pub fn right_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> {\n         Handle {\n             node: &mut *self.node,\n             index: self.index + 1\n         }\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, KV, Leaf> {\n+impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::KV, handle::Leaf> {\n     /// Removes the key/value pair at the handle's location.\n     ///\n     /// # Panics (in debug build)\n@@ -921,7 +927,7 @@ impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, KV, Leaf> {\n     }\n }\n \n-impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, KV, Internal> {\n+impl<K, V, NodeRef: DerefMut<Node<K, V>>> Handle<NodeRef, handle::KV, handle::Internal> {\n     /// Steal! Stealing is roughly analogous to a binary tree rotation.\n     /// In this case, we're \"rotating\" right.\n     unsafe fn steal_rightward(&mut self) {\n@@ -1004,7 +1010,8 @@ impl<K, V> Node<K, V> {\n     /// # Panics (in debug build)\n     ///\n     /// Panics if the given index is out of bounds.\n-    pub fn kv_handle(&mut self, index: uint) -> Handle<&mut Node<K, V>, KV, LeafOrInternal> {\n+    pub fn kv_handle(&mut self, index: uint) -> Handle<&mut Node<K, V>, handle::KV,\n+                                                       handle::LeafOrInternal> {\n         // Necessary for correctness, but in a private module\n         debug_assert!(index < self.len(), \"kv_handle index out of bounds\");\n         Handle {"}, {"sha": "890d9be39f985a1c23fe87b4444a11b99ddab283", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -726,7 +726,7 @@ impl<'a, T: Ord> Iterator<&'a T> for UnionItems<'a, T> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::BTreeSet;\n     use std::hash;"}, {"sha": "4d7ce92b5491e88b03dfe4497ebc222a08637b89", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -788,14 +788,14 @@ impl<S: Writer, A: Hash<S>> Hash<S> for DList<A> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n     use std::rand;\n     use std::hash;\n+    use std::task::spawn;\n     use test::Bencher;\n     use test;\n \n     use super::{DList, Node, ListInsertion};\n-    use vec::Vec;\n \n     pub fn check_links<T>(list: &DList<T>) {\n         let mut len = 0u;"}, {"sha": "ed7516fec16a946c4ed8cd1039dd3c8b266ed735", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -295,9 +295,9 @@ impl<E:CLike> Extend<E> for EnumSet<E> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n     use self::Foo::*;\n-    use std::mem;\n+    use prelude::*;\n+    use core::mem;\n \n     use super::{EnumSet, CLike};\n "}, {"sha": "75d179319f7c03e999dc28341c561e1c4fc8b690", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -23,7 +23,7 @@\n \n #![allow(unknown_features)]\n #![feature(macro_rules, default_type_params, phase, globs)]\n-#![feature(unsafe_destructor, import_shadowing, slicing_syntax)]\n+#![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n #![no_std]\n \n@@ -95,3 +95,41 @@ mod std {\n     pub use core::kinds;    // deriving(Copy)\n     pub use core::hash;     // deriving(Hash)\n }\n+\n+#[cfg(test)]\n+mod prelude {\n+    // from core.\n+    pub use core::borrow::IntoCow;\n+    pub use core::char::Char;\n+    pub use core::clone::Clone;\n+    pub use core::cmp::{PartialEq, Eq, Equiv, PartialOrd, Ord};\n+    pub use core::cmp::Ordering::{Less, Equal, Greater};\n+    pub use core::iter::range;\n+    pub use core::iter::{FromIterator, Extend, IteratorExt};\n+    pub use core::iter::{Iterator, DoubleEndedIterator, RandomAccessIterator};\n+    pub use core::iter::{IteratorCloneExt, CloneIteratorExt, DoubleEndedIteratorExt};\n+    pub use core::iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n+    pub use core::kinds::{Copy, Send, Sized, Sync};\n+    pub use core::mem::drop;\n+    pub use core::ops::{Drop, Fn, FnMut, FnOnce};\n+    pub use core::option::Option;\n+    pub use core::option::Option::{Some, None};\n+    pub use core::ptr::RawPtr;\n+    pub use core::result::Result;\n+    pub use core::result::Result::{Ok, Err};\n+\n+    // in core and collections (may differ).\n+    pub use slice::{PartialEqSliceExt, OrdSliceExt};\n+    pub use slice::{AsSlice, SliceExt};\n+    pub use str::{from_str, Str, StrPrelude};\n+\n+    // from other crates.\n+    pub use alloc::boxed::Box;\n+    pub use unicode::char::UnicodeChar;\n+\n+    // from collections.\n+    pub use slice::{CloneSliceExt, VectorVector};\n+    pub use str::{IntoMaybeOwned, UnicodeStrPrelude, StrAllocating, StrVector};\n+    pub use string::{String, ToString};\n+    pub use vec::Vec;\n+}"}, {"sha": "b02285939230b6628066c472ac75a90a644809bb", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -1260,18 +1260,17 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::iter;\n     use self::Taggy::*;\n     use self::Taggypar::*;\n-    use std::cmp;\n+    use prelude::*;\n+    use core::cmp;\n+    use core::iter;\n     use std::fmt::Show;\n-    use std::prelude::*;\n     use std::hash;\n     use test::Bencher;\n     use test;\n \n     use super::RingBuf;\n-    use vec::Vec;\n \n     #[test]\n     #[allow(deprecated)]\n@@ -1791,7 +1790,7 @@ mod tests {\n \n     #[test]\n     fn test_from_iter() {\n-        use std::iter;\n+        use core::iter;\n         let v = vec!(1i,2,3,4,5,6,7);\n         let deq: RingBuf<int> = v.iter().map(|&x| x).collect();\n         let u: Vec<int> = deq.iter().map(|&x| x).collect();"}, {"sha": "16adf6fa224b449cdfe5d1b9e41a7a064b4cafec", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -1343,16 +1343,13 @@ pub mod raw {\n #[cfg(test)]\n mod tests {\n     use std::boxed::Box;\n-    use std::cell::Cell;\n-    use std::default::Default;\n-    use std::mem;\n-    use std::prelude::*;\n+    use prelude::*;\n+    use core::cell::Cell;\n+    use core::default::Default;\n+    use core::mem;\n     use std::rand::{Rng, task_rng};\n     use std::rc::Rc;\n-    use std::rt;\n-    use slice::*;\n-\n-    use vec::Vec;\n+    use super::ElementSwaps;\n \n     fn square(n: uint) -> uint { n * n }\n \n@@ -2764,14 +2761,12 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use std::prelude::*;\n+    use prelude::*;\n+    use core::mem;\n+    use core::ptr;\n     use std::rand::{weak_rng, Rng};\n-    use std::mem;\n-    use std::ptr;\n     use test::{Bencher, black_box};\n \n-    use vec::Vec;\n-\n     #[bench]\n     fn iterator(b: &mut Bencher) {\n         // peculiar numbers to stop LLVM from optimising the summation"}, {"sha": "feec2a216c7036c3a2e03e81888c384c1bceefa1", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -51,18 +51,21 @@\n \n #![doc(primitive = \"str\")]\n \n-use core::prelude::*;\n-\n pub use self::MaybeOwned::*;\n use self::RecompositionState::*;\n use self::DecompositionType::*;\n \n use core::borrow::{BorrowFrom, Cow, ToOwned};\n+use core::clone::Clone;\n use core::default::Default;\n use core::fmt;\n use core::hash;\n-use core::cmp;\n-use core::iter::AdditiveIterator;\n+use core::char::Char;\n+use core::cmp::{mod, Eq, Equiv, Ord, Ordering, PartialEq, PartialOrd};\n+use core::iter::{range, AdditiveIterator, Iterator, IteratorExt};\n+use core::kinds::Sized;\n+use core::option::Option::{mod, Some, None};\n+use core::slice::{AsSlice, SliceExt};\n \n use ring_buf::RingBuf;\n use string::String;\n@@ -834,25 +837,12 @@ impl<'a> StrAllocating for &'a str {\n \n #[cfg(test)]\n mod tests {\n-    use std::iter::AdditiveIterator;\n-    use std::iter::range;\n-    use std::default::Default;\n-    use std::char::Char;\n-    use std::clone::Clone;\n-    use std::cmp::{Ord, PartialOrd, Equiv};\n-    use std::cmp::Ordering::{Equal, Greater, Less};\n-    use std::option::Option;\n-    use std::option::Option::{Some, None};\n-    use std::ptr::RawPtr;\n-    use std::iter::{Iterator, IteratorExt, DoubleEndedIteratorExt};\n-\n-    use super::*;\n-    use std::slice::{AsSlice, SliceExt};\n-    use string::String;\n-    use vec::Vec;\n-    use slice::CloneSliceExt;\n-\n-    use unicode::char::UnicodeChar;\n+    use prelude::*;\n+    use core::default::Default;\n+    use core::iter::AdditiveIterator;\n+    use super::{eq_slice, from_utf8, is_utf8, is_utf16, raw};\n+    use super::truncate_utf16_at_nul;\n+    use super::{Owned, Slice};\n \n     #[test]\n     fn test_eq_slice() {\n@@ -1826,7 +1816,7 @@ mod tests {\n \n     #[test]\n     fn test_lev_distance() {\n-        use std::char::{ from_u32, MAX };\n+        use core::char::{ from_u32, MAX };\n         // Test bytelength agnosticity\n         for c in range(0u32, MAX as u32)\n                  .filter_map(|i| from_u32(i))\n@@ -1936,7 +1926,7 @@ mod tests {\n \n     #[test]\n     fn test_graphemes() {\n-        use std::iter::order;\n+        use core::iter::order;\n         // official Unicode test data\n         // from http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n         let test_same: [(_, &[_]), .. 325] = [\n@@ -2367,7 +2357,7 @@ mod tests {\n \n     #[test]\n     fn test_str_default() {\n-        use std::default::Default;\n+        use core::default::Default;\n         fn t<S: Default + Str>() {\n             let s: S = Default::default();\n             assert_eq!(s.as_slice(), \"\");\n@@ -2467,12 +2457,10 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n+    use prelude::*;\n     use test::Bencher;\n     use test::black_box;\n     use super::*;\n-    use std::iter::{IteratorExt, DoubleEndedIteratorExt};\n-    use std::str::StrPrelude;\n-    use std::slice::SliceExt;\n \n     #[bench]\n     fn char_iterator(b: &mut Bencher) {"}, {"sha": "bcd1e3b36809a079d162fce3aef955d155eb96c4", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -1040,14 +1040,11 @@ pub mod raw {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n     use test::Bencher;\n \n-    use slice::CloneSliceExt;\n-    use str::{Str, StrPrelude};\n     use str;\n-    use super::{as_string, String, ToString};\n-    use vec::Vec;\n+    use super::as_string;\n \n     #[test]\n     fn test_as_string() {"}, {"sha": "e0745a86d71dee559e5fcb8d25f589a05d9ae36b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -54,7 +54,6 @@ use core::default::Default;\n use core::fmt;\n use core::hash::{mod, Hash};\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n-use core::kinds::Sized;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops;\n@@ -1806,12 +1805,10 @@ impl<'a> fmt::FormatWriter for Vec<u8> {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-\n-    use std::prelude::*;\n-    use std::mem::size_of;\n+    use prelude::*;\n+    use core::mem::size_of;\n     use test::Bencher;\n-    use super::{as_vec, unzip, raw, Vec};\n+    use super::{as_vec, unzip, raw};\n \n     struct DropCounter<'a> {\n         count: &'a mut int"}, {"sha": "1babde6066d0622693b8cce2b9df0b451c51c0d3", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -21,7 +21,6 @@ use core::hash::{Hash, Writer};\n use core::iter;\n use core::iter::{Enumerate, FilterMap, Map};\n use core::mem::replace;\n-use core::ops::FnOnce;\n \n use {vec, slice};\n use vec::Vec;\n@@ -673,8 +672,7 @@ impl<V> DoubleEndedIterator<(uint, V)> for MoveItems<V> {\n \n #[cfg(test)]\n mod test_map {\n-    use std::prelude::*;\n-    use vec::Vec;\n+    use prelude::*;\n     use core::hash::hash;\n \n     use super::VecMap;\n@@ -1047,8 +1045,7 @@ mod test_map {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n     use super::VecMap;\n     use bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n "}, {"sha": "bdc210f0d8e6e0ace0fe7e9d249d35b92cc569e7", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -271,14 +271,9 @@ pub fn hash_with_keys<Sized? T: Hash<SipState>>(k0: u64, k1: u64, value: &T) ->\n #[cfg(test)]\n mod tests {\n     use test::Bencher;\n-    use std::prelude::*;\n+    use prelude::*;\n     use std::fmt;\n \n-    use str::Str;\n-    use string::String;\n-    use slice::{AsSlice, SliceExt};\n-    use vec::Vec;\n-\n     use super::super::{Hash, Writer};\n     use super::{SipState, hash, hash_with_keys};\n "}, {"sha": "106e467c1691a4af79a3b15953e8a759d8dc48f9", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -23,7 +23,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![feature(macro_rules, globs, import_shadowing)]\n+#![feature(macro_rules, globs)]\n pub use self::Piece::*;\n pub use self::Position::*;\n pub use self::Alignment::*;"}, {"sha": "e362c67cc50974d207beb63e591acc4eaafe2a8c", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -86,7 +86,6 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(globs, phase)]\n-#![feature(import_shadowing)]\n #![feature(unboxed_closures)]\n #![deny(missing_docs)]\n "}, {"sha": "463dcddaf94f2c2a2473020d77e1d8d0428dbe82", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]"}, {"sha": "2dc0d87c5469bd7c0fd8fc7a1298e04a426bc2b6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -22,7 +22,7 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization::cmt;\n use middle::pat_util::*;\n use middle::ty::*;\n-use middle::ty::{mod, Ty};\n+use middle::ty;\n use std::fmt;\n use std::iter::AdditiveIterator;\n use std::iter::range_inclusive;"}, {"sha": "5d2faa52f1ad0f288b33031a1a8039decaf2df24", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -14,8 +14,6 @@\n pub use self::MoveKind::*;\n \n use borrowck::*;\n-use borrowck::LoanPathKind::{LpVar, LpUpvar, LpDowncast, LpExtend};\n-use borrowck::LoanPathElem::{LpInterior};\n use rustc::middle::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;"}, {"sha": "e71e9e5dfea1b87728a9bd6170044e5849471207", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -16,7 +16,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]"}, {"sha": "7c8ed7335f11c69cb1bc1c69bc1b6adced3ffe81", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]"}, {"sha": "784002287b7502ee2c99e87bf7785675eced0e63", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]"}, {"sha": "1a753901f7ea4ca01133168aa7dd0168fe9bd71e", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -487,7 +487,7 @@ pub fn trans_fn_ref_with_substs<'blk, 'tcx>(\n \n         let opt_ref_id = match node {\n             ExprId(id) => if id != 0 { Some(id) } else { None },\n-            MethodCall(_) => None,\n+            MethodCallKey(_) => None,\n         };\n \n         let (val, must_cast) =\n@@ -498,7 +498,7 @@ pub fn trans_fn_ref_with_substs<'blk, 'tcx>(\n             // are subst'd)\n             let ref_ty = match node {\n                 ExprId(id) => node_id_type(bcx, id),\n-                MethodCall(method_call) => {\n+                MethodCallKey(method_call) => {\n                     let t = (*bcx.tcx().method_map.borrow())[method_call].ty;\n                     monomorphize_type(bcx, t)\n                 }"}, {"sha": "09a4bdcefc54a97f240fb1a00703b56a8f50197f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -867,7 +867,7 @@ pub enum ExprOrMethodCall {\n     ExprId(ast::NodeId),\n \n     // Type parameters for a method call like `a.foo::<int>()`\n-    MethodCall(ty::MethodCall)\n+    MethodCallKey(ty::MethodCall)\n }\n \n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n@@ -879,7 +879,7 @@ pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ExprId(id) => {\n             ty::node_id_item_substs(tcx, id).substs\n         }\n-        MethodCall(method_call) => {\n+        MethodCallKey(method_call) => {\n             (*tcx.method_map.borrow())[method_call].substs.clone()\n         }\n     };"}, {"sha": "211f8a1f4208fc663d81c8c76cf22b987c693eaf", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::*;\n+use llvm::ValueRef;\n use middle::def;\n use middle::lang_items::{PanicFnLangItem, PanicBoundsCheckFnLangItem};\n use trans::_match;"}, {"sha": "15f6d7bc3f42d7d11b7ffe7b5b24cd9dc4480886", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -124,7 +124,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 bcx: bcx,\n                 data: Fn(callee::trans_fn_ref(bcx,\n                                               did,\n-                                              MethodCall(method_call))),\n+                                              MethodCallKey(method_call))),\n             }\n         }\n \n@@ -344,12 +344,12 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // those from the impl and those from the method:\n             let callee_substs =\n                 combine_impl_and_methods_tps(\n-                    bcx, MethodCall(method_call), vtable_impl.substs);\n+                    bcx, MethodCallKey(method_call), vtable_impl.substs);\n \n             // translate the function\n             let llfn = trans_fn_ref_with_substs(bcx,\n                                                 mth_id,\n-                                                MethodCall(method_call),\n+                                                MethodCallKey(method_call),\n                                                 callee_substs);\n \n             Callee { bcx: bcx, data: Fn(llfn) }\n@@ -359,7 +359,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // after passing through fulfill_obligation\n             let llfn = trans_fn_ref_with_substs(bcx,\n                                                 closure_def_id,\n-                                                MethodCall(method_call),\n+                                                MethodCallKey(method_call),\n                                                 substs);\n \n             Callee {"}, {"sha": "49c5f13fa73972a80393b046e4cdd93a55237ec1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -71,7 +71,7 @@ This API is completely unstable and subject to change.\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]"}, {"sha": "08b17f25e29d97e4a231dfd27555942dd6ec8bb9", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -633,7 +633,6 @@ mod tests {\n     use prelude::*;\n     use super::*;\n     use char::from_u32;\n-    use str::StrPrelude;\n \n     macro_rules! v2ascii {\n         ( [$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);"}, {"sha": "c7cf0b5bc8e66b90388570aed237158dedc9f3ed", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -315,7 +315,6 @@ macro_rules! bitflags {\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {\n-    use kinds::Copy;\n     use hash;\n     use option::Option::{Some, None};\n     use ops::{BitOr, BitAnd, BitXor, Sub, Not};"}, {"sha": "f1c8e8950a22eed6915218d39004924fa008dcd6", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -67,18 +67,18 @@\n //! }\n //! ```\n \n-use string::String;\n-use hash;\n+use core::prelude::*;\n+use libc;\n+\n use fmt;\n+use hash;\n use kinds::marker;\n use mem;\n-use core::prelude::*;\n-\n use ptr;\n-use raw::Slice;\n-use slice;\n+use slice::{mod, ImmutableIntSlice};\n use str;\n-use libc;\n+use string::String;\n+\n \n /// The representation of a C String.\n ///\n@@ -210,7 +210,7 @@ impl CString {\n     #[inline]\n     pub fn as_bytes<'a>(&'a self) -> &'a [u8] {\n         unsafe {\n-            mem::transmute(Slice { data: self.buf, len: self.len() + 1 })\n+            slice::from_raw_buf(&self.buf, self.len() + 1).as_unsigned()\n         }\n     }\n \n@@ -219,7 +219,7 @@ impl CString {\n     #[inline]\n     pub fn as_bytes_no_nul<'a>(&'a self) -> &'a [u8] {\n         unsafe {\n-            mem::transmute(Slice { data: self.buf, len: self.len() })\n+            slice::from_raw_buf(&self.buf, self.len()).as_unsigned()\n         }\n     }\n "}, {"sha": "d068c4610be7c5c92b0ba6361ed608cbceafca27", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -1428,9 +1428,8 @@ mod test_map {\n \n     use super::HashMap;\n     use super::{Occupied, Vacant};\n-    use cmp::Equiv;\n     use hash;\n-    use iter::{Iterator,range_inclusive,range_step_inclusive};\n+    use iter::{range_inclusive, range_step_inclusive};\n     use cell::RefCell;\n     use rand::{weak_rng, Rng};\n "}, {"sha": "71cc4a1e5a6509d3f9615c03723a8fb1028ee5aa", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -678,7 +678,6 @@ mod test_set {\n     use prelude::*;\n \n     use super::HashSet;\n-    use slice::PartialEqSliceExt;\n \n     #[test]\n     fn test_disjoint() {"}, {"sha": "e520c70824e16c089da0053ea2a03ae5c9889bc3", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -15,21 +15,10 @@\n #![experimental]\n #![allow(missing_docs)]\n \n-use clone::Clone;\n-use c_str::ToCStr;\n-use iter::IteratorExt;\n+use prelude::*;\n use mem;\n-use ops::*;\n-use option::*;\n-use option::Option::{None, Some};\n use os;\n-use path::{Path,GenericPath};\n-use result::*;\n-use result::Result::{Err, Ok};\n-use slice::{AsSlice,SliceExt};\n use str;\n-use string::String;\n-use vec::Vec;\n \n #[allow(missing_copy_implementations)]\n pub struct DynamicLibrary {\n@@ -213,13 +202,10 @@ mod test {\n pub mod dl {\n     pub use self::Rtld::*;\n \n-    use c_str::{CString, ToCStr};\n+    use prelude::*;\n+    use c_str::CString;\n     use libc;\n-    use ops::FnOnce;\n     use ptr;\n-    use result::*;\n-    use result::Result::{Err, Ok};\n-    use string::String;\n \n     pub unsafe fn open_external<T: ToCStr>(filename: T) -> *mut u8 {\n         filename.with_c_str(|raw_name| {"}, {"sha": "9d9e882757147f33226f424035833ad32030148a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -409,7 +409,6 @@ mod test {\n     use super::super::{IoResult, EndOfFile};\n     use super::super::mem::MemReader;\n     use self::test::Bencher;\n-    use str::StrPrelude;\n \n     /// A type, free to create, primarily intended for benchmarking creation of\n     /// wrappers that, just for construction, don't need a Reader/Writer that"}, {"sha": "4e736908c3720c15d443cc71b5da191affebba0f", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -823,10 +823,6 @@ mod test {\n     use io;\n     use str;\n     use io::fs::*;\n-    use path::Path;\n-    use io;\n-    use ops::Drop;\n-    use str::StrPrelude;\n \n     macro_rules! check { ($e:expr) => (\n         match $e {"}, {"sha": "431e11cf9cacaf59b57ac8fd36235688d95d2434", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -398,13 +398,12 @@ impl<'a> Buffer for BufReader<'a> {\n \n #[cfg(test)]\n mod test {\n-    extern crate test;\n+    extern crate \"test\" as test_crate;\n     use prelude::*;\n     use super::*;\n     use io::*;\n     use io;\n-    use self::test::Bencher;\n-    use str::StrPrelude;\n+    use self::test_crate::Bencher;\n \n     #[test]\n     fn test_vec_writer() {"}, {"sha": "953effe4345ceb18bac732b07d45b4fa7224f10d", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -225,11 +225,11 @@ fn in_ms_u64(d: Duration) -> u64 {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use time::Duration;\n-    use task::spawn;\n     use prelude::*;\n \n+    use super::Timer;\n+    use time::Duration;\n+\n     #[test]\n     fn test_io_timer_sleep_simple() {\n         let mut timer = Timer::new().unwrap();"}, {"sha": "7de3e1c961a8c09cf7b2ef78a039402a1279c74d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -106,8 +106,7 @@\n #![allow(unknown_features)]\n #![feature(macro_rules, globs, linkage, thread_local, asm)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n-#![feature(import_shadowing, slicing_syntax, tuple_indexing)]\n-#![feature(unboxed_closures)]\n+#![feature(slicing_syntax, unboxed_closures)]\n \n // Don't link to std. We are std.\n #![no_std]\n@@ -158,7 +157,7 @@ pub use core::unit;\n pub use core::result;\n pub use core::option;\n \n-pub use alloc::boxed;\n+#[cfg(not(test))] pub use alloc::boxed;\n pub use alloc::rc;\n \n pub use core_collections::slice;"}, {"sha": "d307e1f7415678b9d36e4857abf57feca3022276", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -349,7 +349,6 @@ pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n mod tests {\n     use f32::*;\n     use num::*;\n-    use num;\n \n     #[test]\n     fn test_min_nan() {\n@@ -364,8 +363,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_num() {\n-        num::test_num(10f32, 2f32);\n+    fn test_num_f32() {\n+        test_num(10f32, 2f32);\n     }\n \n     #[test]"}, {"sha": "dfe20d59c82ce958de064ba2678a31d50c90ef1c", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -357,7 +357,6 @@ pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n mod tests {\n     use f64::*;\n     use num::*;\n-    use num;\n \n     #[test]\n     fn test_min_nan() {\n@@ -372,8 +371,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_num() {\n-        num::test_num(10f64, 2f64);\n+    fn test_num_f64() {\n+        test_num(10f64, 2f64);\n     }\n \n     #[test]"}, {"sha": "20a72f45fbf9b105237d74bb2f155d6de0f6857d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -1425,7 +1425,6 @@ mod arch_consts {\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n-    use c_str::ToCStr;\n     use option;\n     use os::{env, getcwd, getenv, make_absolute};\n     use os::{split_paths, join_paths, setenv, unsetenv};"}, {"sha": "ed4bb6ee08116ece668c1d80bf4d99c9055d440b", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -931,8 +931,6 @@ fn contains_nul<T: BytesContainer>(v: &T) -> bool {\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n-    use super::{GenericPath, PosixPath, WindowsPath};\n-    use c_str::ToCStr;\n \n     #[test]\n     fn test_cstring() {"}, {"sha": "88907951673d1ce2f8b3a9b8e479952cfbc36e28", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -445,7 +445,6 @@ mod tests {\n     use prelude::*;\n     use super::*;\n     use str;\n-    use str::StrPrelude;\n \n     macro_rules! t {\n         (s: $path:expr, $exp:expr) => ("}, {"sha": "77500ca74d092c628296e8f07557b241028adc73", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -20,7 +20,6 @@ use core::str;\n \n use libc::{mod, uintptr_t};\n use os;\n-use str::{FromStr, from_str, Str};\n use sync::atomic;\n \n /// Dynamically inquire about whether we're running under V.\n@@ -66,7 +65,7 @@ pub fn min_stack() -> uint {\n pub fn default_sched_threads() -> uint {\n     match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => {\n-            let opt_n: Option<uint> = FromStr::from_str(nstr.as_slice());\n+            let opt_n: Option<uint> = from_str(nstr.as_slice());\n             match opt_n {\n                 Some(n) if n > 0 => n,\n                 _ => panic!(\"`RUST_THREADS` is `{}`, should be a positive integer\", nstr)"}, {"sha": "51899a87a325d72d05aff960e81f20817b041aec", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -153,7 +153,6 @@ mod test {\n     use prelude::*;\n     use sync::Future;\n     use task;\n-    use comm::channel;\n \n     #[test]\n     fn test_from_value() {"}, {"sha": "366e4b7d35b01eb67acd50643dc9a0ed8e44395a", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -131,10 +131,8 @@ fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n+    use prelude::*;\n     use super::*;\n-    use comm::channel;\n-    use iter::range;\n \n     const TEST_TASKS: uint = 4u;\n "}, {"sha": "1a8a92a105a777d9e055be230611c31146d48b59", "filename": "src/libstd/sys/common/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use sys::mutex::raw;\n-\n use sys::mutex as imp;\n \n /// An OS-based mutual exclusion lock."}, {"sha": "98d860f964649bed70b2ec478abd401e0b3c0f0c", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -18,14 +18,11 @@ use io;\n use prelude::*;\n \n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n-use io::{IoResult, FileStat, SeekStyle, Reader};\n+use io::{IoResult, FileStat, SeekStyle};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n-use result::Result::{Ok, Err};\n use sys::retry;\n use sys_common::{keep_going, eof, mkerr_libc};\n \n-pub use path::PosixPath as Path;\n-\n pub type fd_t = libc::c_int;\n \n pub struct FileDesc {"}, {"sha": "6c909d7562d9aa213f1e50cb57bd468f69cfab74", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -16,8 +16,8 @@ use error::{FromError, Error};\n use fmt;\n use io::{IoError, IoResult};\n use libc::{mod, c_int, c_char, c_void};\n-use path::{Path, GenericPath, BytesContainer};\n-use ptr::{mod, RawPtr};\n+use path::BytesContainer;\n+use ptr;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use sys::fs::FileDesc;\n use os;"}, {"sha": "dacd754582ba77f64546c16ce7d5f422454bd456", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -20,7 +20,7 @@ use sys::fs::FileDesc;\n use sys::{set_nonblocking, wouldblock};\n use sys;\n use sys_common;\n-use sys_common::net::*;\n+use sys_common::net;\n \n pub use sys_common::net::TcpStream;\n \n@@ -34,17 +34,19 @@ pub struct TcpListener {\n \n impl TcpListener {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<TcpListener> {\n-        let fd = try!(socket(addr, libc::SOCK_STREAM));\n+        let fd = try!(net::socket(addr, libc::SOCK_STREAM));\n         let ret = TcpListener { inner: FileDesc::new(fd, true) };\n \n         let mut storage = unsafe { mem::zeroed() };\n-        let len = addr_to_sockaddr(addr, &mut storage);\n+        let len = net::addr_to_sockaddr(addr, &mut storage);\n         let addrp = &storage as *const _ as *const libc::sockaddr;\n \n         // On platforms with Berkeley-derived sockets, this allows\n         // to quickly rebind a socket, without needing to wait for\n         // the OS to clean up the previous one.\n-        try!(setsockopt(fd, libc::SOL_SOCKET, libc::SO_REUSEADDR, 1 as libc::c_int));\n+        try!(net::setsockopt(fd, libc::SOL_SOCKET,\n+                             libc::SO_REUSEADDR,\n+                             1 as libc::c_int));\n \n \n         match unsafe { libc::bind(fd, addrp, len) } {\n@@ -77,7 +79,7 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.fd(), libc::getsockname)\n+        net::sockname(self.fd(), libc::getsockname)\n     }\n }\n \n@@ -121,15 +123,15 @@ impl TcpAcceptor {\n                 -1 => return Err(last_net_error()),\n                 fd => return Ok(TcpStream::new(fd as sock_t)),\n             }\n-            try!(await(&[self.fd(), self.inner.reader.fd()],\n-                       deadline, Readable));\n+            try!(net::await(&[self.fd(), self.inner.reader.fd()],\n+                       deadline, net::Readable));\n         }\n \n         Err(sys_common::eof())\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.fd(), libc::getsockname)\n+        net::sockname(self.fd(), libc::getsockname)\n     }\n \n     pub fn set_timeout(&mut self, timeout: Option<u64>) {"}, {"sha": "7f9d669c44748ec5cacb2649a040c67f634f92f2", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -10,7 +10,6 @@\n \n use cell::UnsafeCell;\n use libc::{mod, DWORD};\n-use libc;\n use os;\n use sys::mutex::{mod, Mutex};\n use sys::sync as ffi;"}, {"sha": "d5bf8c5b62916e581388fad172799c21e8edfa44", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -26,10 +26,9 @@ use sys;\n use sys_common::{keep_going, eof, mkerr_libc};\n \n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n-use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};\n+use io::{IoResult, IoError, FileStat, SeekStyle};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n \n-pub use path::WindowsPath as Path;\n pub type fd_t = libc::c_int;\n \n pub struct FileDesc {"}, {"sha": "e2220b7b67bbd6e5dbb5f50c78901c27a731f454", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -20,12 +20,10 @@ use io::{IoResult, IoError};\n use libc::{c_int, c_char, c_void};\n use libc;\n use os;\n-use path::{Path, GenericPath, BytesContainer};\n-use ptr::{mod, RawPtr};\n+use path::BytesContainer;\n+use ptr;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use sys::fs::FileDesc;\n-use option::Option;\n-use option::Option::{Some, None};\n use slice;\n \n use os::TMPBUF_SZ;"}, {"sha": "8945c155e66cedeb6816cb7c652a38d345195d6d", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -29,7 +29,6 @@ use sys_common::helper_thread::Helper;\n use sys_common::{AsInner, mkerr_libc, timeout};\n \n use io::fs::PathExtensions;\n-use string::String;\n \n pub use sys_common::ProcessConfig;\n "}, {"sha": "505e6137bf9047162416ccaa277497642224b030", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -18,8 +18,7 @@ use super::{last_error, last_net_error, retry, sock_t};\n use sync::{Arc, atomic};\n use sys::fs::FileDesc;\n use sys::{mod, c, set_nonblocking, wouldblock, timer};\n-use sys_common::{mod, timeout, eof};\n-use sys_common::net::*;\n+use sys_common::{mod, timeout, eof, net};\n \n pub use sys_common::net::TcpStream;\n \n@@ -54,11 +53,11 @@ impl TcpListener {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<TcpListener> {\n         sys::init_net();\n \n-        let sock = try!(socket(addr, libc::SOCK_STREAM));\n+        let sock = try!(net::socket(addr, libc::SOCK_STREAM));\n         let ret = TcpListener { sock: sock };\n \n         let mut storage = unsafe { mem::zeroed() };\n-        let len = addr_to_sockaddr(addr, &mut storage);\n+        let len = net::addr_to_sockaddr(addr, &mut storage);\n         let addrp = &storage as *const _ as *const libc::sockaddr;\n \n         match unsafe { libc::bind(sock, addrp, len) } {\n@@ -95,7 +94,7 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.socket(), libc::getsockname)\n+        net::sockname(self.socket(), libc::getsockname)\n     }\n }\n \n@@ -195,7 +194,7 @@ impl TcpAcceptor {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.socket(), libc::getsockname)\n+        net::sockname(self.socket(), libc::getsockname)\n     }\n \n     pub fn set_timeout(&mut self, timeout: Option<u64>) {"}, {"sha": "89773207347d548e0d8fafd7f7dbbd38066a2dae", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -124,13 +124,17 @@\n //!\n //! * It can be implemented highly efficiently on many platforms.\n \n-use core::prelude::*;\n-\n use any::Any;\n use borrow::IntoCow;\n use boxed::Box;\n use cell::UnsafeCell;\n+use clone::Clone;\n+use kinds::Send;\n+use ops::{Drop, FnOnce};\n+use option::Option::{mod, Some, None};\n+use result::Result::{Err, Ok};\n use sync::{Mutex, Condvar, Arc};\n+use str::Str;\n use string::String;\n use rt::{mod, unwind};\n use io::{Writer, stdio};\n@@ -424,13 +428,11 @@ impl<T: Send> Drop for JoinGuard<T> {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use any::{Any, AnyRefExt};\n     use boxed::BoxAny;\n-    use prelude::*;\n-    use result::Result::{Ok, Err};\n     use result;\n     use std::io::{ChanReader, ChanWriter};\n-    use string::String;\n     use thunk::Thunk;\n     use super::{Thread, Builder};\n "}, {"sha": "5f62c74ef0742814e524db0b63c3dd64fa006cbc", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -24,7 +24,7 @@\n \n #![allow(unknown_features)]\n #![feature(macro_rules, globs, default_type_params, phase, slicing_syntax)]\n-#![feature(quote, unsafe_destructor, import_shadowing)]\n+#![feature(quote, unsafe_destructor)]\n #![feature(unboxed_closures)]\n \n extern crate arena;"}, {"sha": "3d0877dd4327311f4ee3505e07f65a9a30fd0818", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f51ad2420776925c12be67a7bf38ac28343fd1f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8f51ad2420776925c12be67a7bf38ac28343fd1f", "patch": "@@ -745,8 +745,7 @@ mod test {\n     use owned_slice::OwnedSlice;\n     use ast;\n     use abi;\n-    use attr;\n-    use attr::AttrMetaMethods;\n+    use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};\n     use print::pprust::view_item_to_string;\n@@ -1195,7 +1194,7 @@ mod test {\n         let name = \"<source>\".to_string();\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name.clone(), source, Vec::new(), &sess).unwrap();\n-        let doc = attr::first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n+        let doc = first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n         assert_eq!(doc.get(), \"/// doc comment\");\n \n         let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n@@ -1207,7 +1206,7 @@ mod test {\n \n         let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name, source, Vec::new(), &sess).unwrap();\n-        let doc = attr::first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n+        let doc = first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n         assert_eq!(doc.get(), \"/** doc comment\\n *  with CRLF */\");\n     }\n }"}]}