{"sha": "422b8a6be4aab120685f450db0a520fcb5a8aa6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmI4YTZiZTRhYWIxMjA2ODVmNDUwZGIwYTUyMGZjYjVhOGFhNmI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T18:48:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T18:48:17Z"}, "message": "Unlink (doubly) gc chain on free.", "tree": {"sha": "0aeeeac79b4996287de46df4c996b86eed628e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aeeeac79b4996287de46df4c996b86eed628e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422b8a6be4aab120685f450db0a520fcb5a8aa6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422b8a6be4aab120685f450db0a520fcb5a8aa6b", "html_url": "https://github.com/rust-lang/rust/commit/422b8a6be4aab120685f450db0a520fcb5a8aa6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422b8a6be4aab120685f450db0a520fcb5a8aa6b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8759934711c70c50b5d616be22104e649abff58", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8759934711c70c50b5d616be22104e649abff58", "html_url": "https://github.com/rust-lang/rust/commit/e8759934711c70c50b5d616be22104e649abff58"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "4d2a90cd32e90391b1ba5ef329db768dd61bbcb3", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/422b8a6be4aab120685f450db0a520fcb5a8aa6b/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/422b8a6be4aab120685f450db0a520fcb5a8aa6b/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=422b8a6be4aab120685f450db0a520fcb5a8aa6b", "patch": "@@ -29,6 +29,7 @@ let frame_glue_fns_field_reloc = 2;;\n let exterior_rc_slot_field_refcnt = 0;;\n let exterior_rc_slot_field_body = 1;;\n \n+let exterior_gc_slot_alloc_base = (-3);;\n let exterior_gc_slot_field_prev = (-3);;\n let exterior_gc_slot_field_next = (-2);;\n let exterior_gc_slot_field_ctrl = (-1);;"}, {"sha": "af9a849b1400a41d27e9b7c2dad0de3c83a399dc", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/422b8a6be4aab120685f450db0a520fcb5a8aa6b/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/422b8a6be4aab120685f450db0a520fcb5a8aa6b/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=422b8a6be4aab120685f450db0a520fcb5a8aa6b", "patch": "@@ -88,6 +88,7 @@ let trans_visitor\n   let imm_true = imm_of_ty 1L TY_u8 in\n   let imm_false = imm_of_ty 0L TY_u8 in\n   let nil_ptr = Il.Mem ((Il.Abs (Asm.IMM 0L)), Il.NilTy) in\n+  let wordptr_ty = Il.AddrTy (Il.ScalarTy word_ty) in\n \n   let crate_rel fix =\n     Asm.SUB (Asm.M_POS fix, Asm.M_POS cx.ctxt_crate_fixup)\n@@ -1295,7 +1296,6 @@ let trans_visitor\n       mov (word_at (fp_imm frame_fns_disp)) frame_fns\n \n   and check_interrupt_flag _ =\n-    let wordptr_ty = Il.AddrTy (Il.ScalarTy word_ty) in\n     let dom = next_vreg_cell wordptr_ty in\n     let flag = next_vreg_cell word_ty in\n       mov dom (Il.Cell (tp_imm (word_n Abi.task_field_dom)));\n@@ -1607,12 +1607,35 @@ let trans_visitor\n         if mctrl = MEM_gc\n         then\n           begin\n-            note_drop_step ty \"MEM_gc, adjusting pointer\";\n-            lea vr (fst (need_mem_cell (deref cell)));\n-            emit (Il.binary Il.SUB vr (Il.Cell vr)\n-                    (imm\n-                       (word_n Abi.exterior_gc_malloc_return_adjustment)));\n-            trans_free vr\n+            note_drop_step ty \"MEM_gc, unlinking from GC chain\";\n+            let pcast c =\n+              rty_ptr_at (fst (need_mem_cell c)) (Il.ScalarTy wordptr_ty)\n+            in\n+            let next = pcast (exterior_gc_next_cell cell) in\n+            let prev = pcast (exterior_gc_prev_cell cell) in\n+\n+              note_drop_step ty \"MEM_gc, next->prev = prev\";\n+              let skip_null_next_jmp = null_check next in\n+                mov (exterior_gc_prev_cell next) (Il.Cell prev);\n+                patch skip_null_next_jmp;\n+\n+                let skip_null_prev_jmp = null_check prev in\n+                  note_drop_step ty \"MEM_gc, prev->next = next\";\n+                  mov (exterior_gc_next_cell prev) (Il.Cell next);\n+                  let skip_set_task_chain_jmp = mark () in\n+                    emit (Il.jmp Il.JMP Il.CodeNone);\n+                    patch skip_null_prev_jmp;\n+                    note_drop_step ty \"MEM_gc, task->chain = next\";\n+                    let chain =\n+                      tp_imm (word_n Abi.task_field_gc_alloc_chain)\n+                    in\n+                      mov chain (Il.Cell next);\n+                      patch skip_set_task_chain_jmp;\n+\n+                      note_drop_step ty \"MEM_gc, freeing\";\n+                      lea vr (fst (need_mem_cell\n+                                     (exterior_gc_alloc_base cell)));\n+                      trans_free vr;\n           end\n         else\n           begin\n@@ -2215,6 +2238,9 @@ let trans_visitor\n   and exterior_gc_prev_cell (cell:Il.cell) : Il.cell =\n     exterior_ctrl_cell cell Abi.exterior_gc_slot_field_prev\n \n+  and exterior_gc_alloc_base (cell:Il.cell) : Il.cell =\n+    exterior_ctrl_cell cell Abi.exterior_gc_slot_alloc_base\n+\n   and exterior_allocation_size\n       (slot:Ast.slot)\n       : Il.operand ="}]}