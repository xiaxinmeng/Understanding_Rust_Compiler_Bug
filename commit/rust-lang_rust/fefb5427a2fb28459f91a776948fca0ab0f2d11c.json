{"sha": "fefb5427a2fb28459f91a776948fca0ab0f2d11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZmI1NDI3YTJmYjI4NDU5ZjkxYTc3Njk0OGZjYTBhYjBmMmQxMWM=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-08-07T02:26:27Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-08-07T03:03:40Z"}, "message": "fix: handle GAT types in impls with self bounds", "tree": {"sha": "d7e7214d197347d9299333dd3f5330e2244065ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e7214d197347d9299333dd3f5330e2244065ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fefb5427a2fb28459f91a776948fca0ab0f2d11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fefb5427a2fb28459f91a776948fca0ab0f2d11c", "html_url": "https://github.com/rust-lang/rust/commit/fefb5427a2fb28459f91a776948fca0ab0f2d11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fefb5427a2fb28459f91a776948fca0ab0f2d11c/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cbee5604a069bf8426f0848fd4fd2c86cfff0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbee5604a069bf8426f0848fd4fd2c86cfff0fa", "html_url": "https://github.com/rust-lang/rust/commit/8cbee5604a069bf8426f0848fd4fd2c86cfff0fa"}], "stats": {"total": 146, "additions": 59, "deletions": 87}, "files": [{"sha": "1a56acc7de1b51e24e8413a1ad93b6aa03de76a8", "filename": "src/items.rs", "status": "modified", "additions": 26, "deletions": 56, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fefb5427a2fb28459f91a776948fca0ab0f2d11c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefb5427a2fb28459f91a776948fca0ab0f2d11c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fefb5427a2fb28459f91a776948fca0ab0f2d11c", "patch": "@@ -1497,7 +1497,7 @@ fn format_tuple_struct(\n     Some(result)\n }\n \n-fn rewrite_type<R: Rewrite>(\n+pub(crate) fn rewrite_type<R: Rewrite>(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n     ident: symbol::Ident,\n@@ -1841,29 +1841,6 @@ fn rewrite_static(\n         Some(format!(\"{}{};\", prefix, ty_str))\n     }\n }\n-\n-pub(crate) fn rewrite_type_alias(\n-    ident: symbol::Ident,\n-    ty_opt: Option<&ptr::P<ast::Ty>>,\n-    generics: &ast::Generics,\n-    generic_bounds_opt: Option<&ast::GenericBounds>,\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    vis: &ast::Visibility,\n-    span: Span,\n-) -> Option<String> {\n-    rewrite_type(\n-        context,\n-        indent,\n-        ident,\n-        vis,\n-        generics,\n-        generic_bounds_opt,\n-        ty_opt,\n-        span,\n-    )\n-}\n-\n struct OpaqueType<'a> {\n     bounds: &'a ast::GenericBounds,\n }\n@@ -1877,32 +1854,7 @@ impl<'a> Rewrite for OpaqueType<'a> {\n     }\n }\n \n-pub(crate) fn rewrite_opaque_impl_type(\n-    context: &RewriteContext<'_>,\n-    ident: symbol::Ident,\n-    generics: &ast::Generics,\n-    generic_bounds: &ast::GenericBounds,\n-    indent: Indent,\n-) -> Option<String> {\n-    let ident_str = rewrite_ident(context, ident);\n-    // 5 = \"type \"\n-    let generics_shape = Shape::indented(indent, context.config).offset_left(5)?;\n-    let generics_str = rewrite_generics(context, ident_str, generics, generics_shape)?;\n-    let prefix = format!(\"type {} =\", generics_str);\n-    let rhs = OpaqueType {\n-        bounds: generic_bounds,\n-    };\n-\n-    rewrite_assign_rhs(\n-        context,\n-        &prefix,\n-        &rhs,\n-        Shape::indented(indent, context.config).sub_width(1)?,\n-    )\n-    .map(|s| s + \";\")\n-}\n-\n-pub(crate) fn rewrite_associated_impl_type(\n+pub(crate) fn rewrite_impl_type(\n     ident: symbol::Ident,\n     vis: &ast::Visibility,\n     defaultness: ast::Defaultness,\n@@ -1912,7 +1864,25 @@ pub(crate) fn rewrite_associated_impl_type(\n     indent: Indent,\n     span: Span,\n ) -> Option<String> {\n-    let result = rewrite_type_alias(ident, ty_opt, generics, None, context, indent, vis, span)?;\n+    // Opaque type\n+    let result = if let Some(rustc_ast::ast::Ty {\n+        kind: ast::TyKind::ImplTrait(_, ref bounds),\n+        ..\n+    }) = ty_opt.map(|t| &**t)\n+    {\n+        rewrite_type(\n+            context,\n+            indent,\n+            ident,\n+            &DEFAULT_VISIBILITY,\n+            generics,\n+            None,\n+            Some(&OpaqueType { bounds }),\n+            span,\n+        )\n+    } else {\n+        rewrite_type(context, indent, ident, vis, generics, None, ty_opt, span)\n+    }?;\n \n     match defaultness {\n         ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n@@ -3164,14 +3134,14 @@ impl Rewrite for ast::ForeignItem {\n             ast::ForeignItemKind::TyAlias(ref ty_alias_kind) => {\n                 let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n                     **ty_alias_kind;\n-                rewrite_type_alias(\n-                    self.ident,\n-                    type_default.as_ref(),\n-                    generics,\n-                    Some(generic_bounds),\n+                rewrite_type(\n                     &context,\n                     shape.indent,\n+                    self.ident,\n                     &self.vis,\n+                    generics,\n+                    Some(generic_bounds),\n+                    type_default.as_ref(),\n                     self.span,\n                 )\n             }"}, {"sha": "12a3281eda5516f70884951cda21660ef532f304", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fefb5427a2fb28459f91a776948fca0ab0f2d11c/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefb5427a2fb28459f91a776948fca0ab0f2d11c/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fefb5427a2fb28459f91a776948fca0ab0f2d11c", "patch": "@@ -11,9 +11,9 @@ use crate::config::Version;\n use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n-    format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n-    rewrite_associated_impl_type, rewrite_extern_crate, rewrite_opaque_impl_type,\n-    rewrite_opaque_type, rewrite_type_alias, FnBraceStyle, FnSig, StaticParts, StructParts,\n+    format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item, rewrite_extern_crate,\n+    rewrite_impl_type, rewrite_opaque_type, rewrite_type, FnBraceStyle, FnSig, StaticParts,\n+    StructParts,\n };\n use crate::macros::{macro_style, rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::modules::Module;\n@@ -579,14 +579,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         **alias_kind;\n                     match ty {\n                         Some(ty) => {\n-                            let rewrite = rewrite_type_alias(\n-                                item.ident,\n-                                Some(&*ty),\n-                                generics,\n-                                Some(generic_bounds),\n+                            let rewrite = rewrite_type(\n                                 &self.get_context(),\n                                 self.block_indent,\n+                                item.ident,\n                                 &item.vis,\n+                                generics,\n+                                Some(generic_bounds),\n+                                Some(&*ty),\n                                 item.span,\n                             );\n                             self.push_rewrite(item.span, rewrite);\n@@ -665,14 +665,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n                 let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n                     **ty_alias_kind;\n-                let rewrite = rewrite_type_alias(\n-                    ti.ident,\n-                    type_default.as_ref(),\n-                    generics,\n-                    Some(generic_bounds),\n+                let rewrite = rewrite_type(\n                     &self.get_context(),\n                     self.block_indent,\n+                    ti.ident,\n                     &ti.vis,\n+                    generics,\n+                    Some(generic_bounds),\n+                    type_default.as_ref(),\n                     ti.span,\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n@@ -715,8 +715,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n                 let ast::TyAliasKind(defaultness, ref generics, _, ref ty) = **ty_alias_kind;\n-                let rewrite_associated = || {\n-                    rewrite_associated_impl_type(\n+                self.push_rewrite(\n+                    ii.span,\n+                    rewrite_impl_type(\n                         ii.ident,\n                         &ii.vis,\n                         defaultness,\n@@ -725,22 +726,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         &self.get_context(),\n                         self.block_indent,\n                         ii.span,\n-                    )\n-                };\n-                let rewrite = match ty {\n-                    None => rewrite_associated(),\n-                    Some(ty) => match ty.kind {\n-                        ast::TyKind::ImplTrait(_, ref bounds) => rewrite_opaque_impl_type(\n-                            &self.get_context(),\n-                            ii.ident,\n-                            generics,\n-                            bounds,\n-                            self.block_indent,\n-                        ),\n-                        _ => rewrite_associated(),\n-                    },\n-                };\n-                self.push_rewrite(ii.span, rewrite);\n+                    ),\n+                );\n             }\n             ast::AssocItemKind::MacCall(ref mac) => {\n                 self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);"}, {"sha": "21ef6c6c491ac0296f15187f6c49176c2ae053c3", "filename": "tests/source/issue_4911.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fefb5427a2fb28459f91a776948fca0ab0f2d11c/tests%2Fsource%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefb5427a2fb28459f91a776948fca0ab0f2d11c/tests%2Fsource%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4911.rs?ref=fefb5427a2fb28459f91a776948fca0ab0f2d11c", "patch": "@@ -0,0 +1,6 @@\n+#![feature(generic_associated_types)]\n+#![feature(min_type_alias_impl_trait)]\n+\n+impl SomeTrait for SomeType {\n+    type SomeGAT<'a> where Self: 'a = impl SomeOtherTrait;\n+}\n\\ No newline at end of file"}, {"sha": "890a62267ce6456a015eab74bb5d27bbb5675a7f", "filename": "tests/target/issue_4911.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fefb5427a2fb28459f91a776948fca0ab0f2d11c/tests%2Ftarget%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fefb5427a2fb28459f91a776948fca0ab0f2d11c/tests%2Ftarget%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4911.rs?ref=fefb5427a2fb28459f91a776948fca0ab0f2d11c", "patch": "@@ -0,0 +1,9 @@\n+#![feature(generic_associated_types)]\n+#![feature(min_type_alias_impl_trait)]\n+\n+impl SomeTrait for SomeType {\n+    type SomeGAT<'a>\n+    where\n+        Self: 'a,\n+    = impl SomeOtherTrait;\n+}"}]}