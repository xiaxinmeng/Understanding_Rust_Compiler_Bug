{"sha": "a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjc0ODVlMjc5YmU4YTExYzljMDlkMGRkZGFmMWQ3YzU3MjRmMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T17:35:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T17:35:46Z"}, "message": "Auto merge of #75960 - camelid:patch-6, r=jyn514\n\nImprove docs for the `const` keyword\n\n@rustbot modify labels: T-doc", "tree": {"sha": "81c43ebb2236e6465e9992b7b4714a9dbb1f18f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c43ebb2236e6465e9992b7b4714a9dbb1f18f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "html_url": "https://github.com/rust-lang/rust/commit/a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a167485e279be8a11c9c09d0dddaf1d7c5724f1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95815c9b2b222d865c227d717b1c152072ddf25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/95815c9b2b222d865c227d717b1c152072ddf25a", "html_url": "https://github.com/rust-lang/rust/commit/95815c9b2b222d865c227d717b1c152072ddf25a"}, {"sha": "ce904783d0b030d9f8e2a683bfef488c2f830c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce904783d0b030d9f8e2a683bfef488c2f830c75", "html_url": "https://github.com/rust-lang/rust/commit/ce904783d0b030d9f8e2a683bfef488c2f830c75"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "54ce0e7b831f4f28a77309fc9f64d3f104d4c7e9", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a167485e279be8a11c9c09d0dddaf1d7c5724f1c/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167485e279be8a11c9c09d0dddaf1d7c5724f1c/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=a167485e279be8a11c9c09d0dddaf1d7c5724f1c", "patch": "@@ -107,18 +107,20 @@ mod break_keyword {}\n /// Sometimes a certain value is used many times throughout a program, and it can become\n /// inconvenient to copy it over and over. What's more, it's not always possible or desirable to\n /// make it a variable that gets carried around to each function that needs it. In these cases, the\n-/// `const` keyword provides a convenient alternative to code duplication.\n+/// `const` keyword provides a convenient alternative to code duplication:\n ///\n /// ```rust\n /// const THING: u32 = 0xABAD1DEA;\n ///\n /// let foo = 123 + THING;\n /// ```\n ///\n-/// Constants must be explicitly typed, unlike with `let` you can't ignore its type and let the\n-/// compiler figure it out. Any constant value can be defined in a const, which in practice happens\n-/// to be most things that would be reasonable to have a constant (barring `const fn`s). For\n-/// example, you can't have a File as a `const`.\n+/// Constants must be explicitly typed; unlike with `let`, you can't ignore their type and let the\n+/// compiler figure it out. Any constant value can be defined in a `const`, which in practice happens\n+/// to be most things that would be reasonable to have in a constant (barring `const fn`s). For\n+/// example, you can't have a [`File`] as a `const`.\n+///\n+/// [`File`]: crate::fs::File\n ///\n /// The only lifetime allowed in a constant is `'static`, which is the lifetime that encompasses\n /// all others in a Rust program. For example, if you wanted to define a constant string, it would\n@@ -128,27 +130,27 @@ mod break_keyword {}\n /// const WORDS: &'static str = \"hello rust!\";\n /// ```\n ///\n-/// Thanks to static lifetime elision, you usually don't have to explicitly use 'static:\n+/// Thanks to static lifetime elision, you usually don't have to explicitly use `'static`:\n ///\n /// ```rust\n /// const WORDS: &str = \"hello convenience!\";\n /// ```\n ///\n /// `const` items looks remarkably similar to `static` items, which introduces some confusion as\n /// to which one should be used at which times. To put it simply, constants are inlined wherever\n-/// they're used, making using them identical to simply replacing the name of the const with its\n-/// value. Static variables on the other hand point to a single location in memory, which all\n+/// they're used, making using them identical to simply replacing the name of the `const` with its\n+/// value. Static variables, on the other hand, point to a single location in memory, which all\n /// accesses share. This means that, unlike with constants, they can't have destructors, and act as\n /// a single value across the entire codebase.\n ///\n-/// Constants, as with statics, should always be in SCREAMING_SNAKE_CASE.\n+/// Constants, like statics, should always be in `SCREAMING_SNAKE_CASE`.\n ///\n /// The `const` keyword is also used in raw pointers in combination with `mut`, as seen in `*const\n-/// T` and `*mut T`. More about that can be read at the [pointer] primitive part of the Rust docs.\n+/// T` and `*mut T`. More about `const` as used in raw pointers can be read at the Rust docs for the [pointer primitive].\n ///\n-/// For more detail on `const`, see the [Rust Book] or the [Reference]\n+/// For more detail on `const`, see the [Rust Book] or the [Reference].\n ///\n-/// [pointer]: primitive.pointer.html\n+/// [pointer primitive]: primitive.pointer.html\n /// [Rust Book]:\n /// ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n /// [Reference]: ../reference/items/constant-items.html"}]}