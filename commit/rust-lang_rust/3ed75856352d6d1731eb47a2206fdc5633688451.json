{"sha": "3ed75856352d6d1731eb47a2206fdc5633688451", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDc1ODU2MzUyZDZkMTczMWViNDdhMjIwNmZkYzU2MzM2ODg0NTE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T07:41:26Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T10:47:26Z"}, "message": "make hir::def_kind work with HirId", "tree": {"sha": "f57a1c7f52fa4eb6522056b759163b193853bd01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57a1c7f52fa4eb6522056b759163b193853bd01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed75856352d6d1731eb47a2206fdc5633688451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed75856352d6d1731eb47a2206fdc5633688451", "html_url": "https://github.com/rust-lang/rust/commit/3ed75856352d6d1731eb47a2206fdc5633688451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed75856352d6d1731eb47a2206fdc5633688451/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98cc18a5db11c7833a93d7d28d7045569395f835", "url": "https://api.github.com/repos/rust-lang/rust/commits/98cc18a5db11c7833a93d7d28d7045569395f835", "html_url": "https://github.com/rust-lang/rust/commit/98cc18a5db11c7833a93d7d28d7045569395f835"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "572f94d3382e17b55e5b45f13bbd31d6d521bd6e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ed75856352d6d1731eb47a2206fdc5633688451/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed75856352d6d1731eb47a2206fdc5633688451/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=3ed75856352d6d1731eb47a2206fdc5633688451", "patch": "@@ -291,8 +291,8 @@ impl<'hir> Map<'hir> {\n         self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n     }\n \n-    fn def_kind(&self, node_id: NodeId) -> Option<DefKind> {\n-        let node = if let Some(node) = self.find(node_id) {\n+    fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n+        let node = if let Some(node) = self.find_by_hir_id(hir_id) {\n             node\n         } else {\n             return None\n@@ -347,7 +347,7 @@ impl<'hir> Map<'hir> {\n                 if variant_data.ctor_hir_id().is_none() {\n                     return None;\n                 }\n-                let ctor_of = match self.find(self.get_parent_node(node_id)) {\n+                let ctor_of = match self.find_by_hir_id(self.get_parent_node_by_hir_id(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -1400,8 +1400,8 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n \n pub fn provide(providers: &mut Providers<'_>) {\n     providers.def_kind = |tcx, def_id| {\n-        if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n-            tcx.hir().def_kind(node_id)\n+        if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n+            tcx.hir().def_kind(hir_id)\n         } else {\n             bug!(\"calling local def_kind query provider for upstream DefId: {:?}\",\n                 def_id"}]}