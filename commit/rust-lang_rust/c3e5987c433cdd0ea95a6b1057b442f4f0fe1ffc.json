{"sha": "c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZTU5ODdjNDMzY2RkMGVhOTVhNmIxMDU3YjQ0MmY0ZjBmZTFmZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T11:45:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T11:45:17Z"}, "message": "incremental reparse", "tree": {"sha": "1ef2814a3ddc800ef6976aa0459c6b5cf0c3b621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef2814a3ddc800ef6976aa0459c6b5cf0c3b621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "html_url": "https://github.com/rust-lang/rust/commit/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "url": "https://api.github.com/repos/rust-lang/rust/commits/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627", "html_url": "https://github.com/rust-lang/rust/commit/5211e7d97771aa7f8d7cc99e5131fb3cc71a1627"}], "stats": {"total": 117, "additions": 104, "deletions": 13}, "files": [{"sha": "496d283496480b2f2911431269f89488347e1d49", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "patch": "@@ -40,11 +40,11 @@ pub(crate) use self::{\n     items::named_field_def_list,\n };\n \n-pub(crate) fn file(p: &mut Parser) {\n-    let file = p.start();\n+pub(crate) fn root(p: &mut Parser) {\n+    let m = p.start();\n     p.eat(SHEBANG);\n     items::mod_contents(p, false);\n-    file.complete(p, ROOT);\n+    m.complete(p, ROOT);\n }\n \n "}, {"sha": "d43d26c4c5d3db82f18b1eb637bbc0fcec22a049", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "patch": "@@ -70,13 +70,15 @@ impl File {\n     }\n     pub fn parse(text: &str) -> File {\n         let tokens = tokenize(&text);\n-        let (green, errors) = parser_impl::parse::<yellow::GreenBuilder>(text, &tokens);\n+        let (green, errors) = parser_impl::parse_with::<yellow::GreenBuilder>(\n+            text, &tokens, grammar::root,\n+        );\n         File::new(green, errors)\n     }\n     pub fn reparse(&self, edit: &AtomEdit) -> File {\n         self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n     }\n-    fn incremental_reparse(&self, edit: &AtomEdit) -> Option<File> {\n+    pub fn incremental_reparse(&self, edit: &AtomEdit) -> Option<File> {\n         let (node, reparser) = find_reparsable_node(self.syntax(), edit.delete)?;\n         let text = replace_range(\n             node.text(),\n@@ -87,7 +89,12 @@ impl File {\n         if !is_balanced(&tokens) {\n             return None;\n         }\n-        None\n+        let (green, new_errors) = parser_impl::parse_with::<yellow::GreenBuilder>(\n+            &text, &tokens, reparser,\n+        );\n+        let green_root = node.replace_with(green);\n+        let errors = merge_errors(self.errors(), new_errors, edit, node.range().start());\n+        Some(File::new(green_root, errors))\n     }\n     fn full_reparse(&self, edit: &AtomEdit) -> File {\n         let text = replace_range(self.syntax().text(), edit.delete, &edit.insert);\n@@ -173,7 +180,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n     }\n }\n \n-fn replace_range(mut text: String, range: TextRange, replace_with: &str) -> String {\n+pub /*(meh)*/ fn replace_range(mut text: String, range: TextRange, replace_with: &str) -> String {\n     let start = u32::from(range.start()) as usize;\n     let end = u32::from(range.end()) as usize;\n     text.replace_range(start..end, replace_with);\n@@ -199,3 +206,29 @@ fn is_balanced(tokens: &[Token]) -> bool {\n     }\n     balance == 0\n }\n+\n+fn merge_errors(\n+    old_errors: Vec<SyntaxError>,\n+    new_errors: Vec<SyntaxError>,\n+    edit: &AtomEdit,\n+    node_offset: TextUnit,\n+) -> Vec<SyntaxError> {\n+    let mut res = Vec::new();\n+    for e in old_errors {\n+        if e.offset < edit.delete.start() {\n+            res.push(e)\n+        } else if e.offset > edit.delete.end() {\n+            res.push(SyntaxError {\n+                msg: e.msg,\n+                offset: e.offset + TextUnit::of_str(&edit.insert) - edit.delete.len(),\n+            })\n+        }\n+    }\n+    for e in new_errors {\n+        res.push(SyntaxError {\n+            msg: e.msg,\n+            offset: e.offset + node_offset,\n+        })\n+    }\n+    res\n+}"}, {"sha": "f60ef80f093f55cead9d890ae54529ccce3ccfb7", "filename": "crates/libsyntax2/src/parser_impl/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Fparser_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Fparser_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fparser_impl%2Fmod.rs?ref=c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "patch": "@@ -2,7 +2,6 @@ mod event;\n mod input;\n \n use {\n-    grammar,\n     lexer::Token,\n     parser_api::Parser,\n     parser_impl::{\n@@ -27,12 +26,16 @@ pub(crate) trait Sink<'a> {\n }\n \n /// Parse a sequence of tokens into the representative node tree\n-pub(crate) fn parse<'a, S: Sink<'a>>(text: &'a str, tokens: &[Token]) -> S::Tree {\n+pub(crate) fn parse_with<'a, S: Sink<'a>>(\n+    text: &'a str,\n+    tokens: &[Token],\n+    parser: fn(&mut Parser),\n+) -> S::Tree {\n     let events = {\n         let input = input::ParserInput::new(text, tokens);\n         let parser_impl = ParserImpl::new(&input);\n         let mut parser_api = Parser(parser_impl);\n-        grammar::file(&mut parser_api);\n+        parser(&mut parser_api);\n         parser_api.0.into_events()\n     };\n     let mut sink = S::new(text);"}, {"sha": "0045598d44704f2c3ce6164b3a0bd999a2680771", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "patch": "@@ -3,7 +3,7 @@ use std::{fmt, sync::Arc};\n use smol_str::SmolStr;\n \n use {\n-    yellow::{RedNode, TreeRoot, SyntaxRoot, RedPtr, RefRoot, OwnedRoot},\n+    yellow::{GreenNode, RedNode, TreeRoot, SyntaxRoot, RedPtr, RefRoot, OwnedRoot},\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n };\n@@ -141,6 +141,27 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         self.red().green().leaf_text()\n     }\n \n+    pub(crate) fn replace_with(&self, green: GreenNode) -> GreenNode {\n+        assert_eq!(self.kind(), green.kind());\n+        match self.parent() {\n+            None => green,\n+            Some(parent) => {\n+                let children: Vec<_> = parent.children().map(|child| {\n+                    if child == *self {\n+                        green.clone()\n+                    } else {\n+                        child.red().green().clone()\n+                    }\n+                }).collect();\n+                let new_parent = GreenNode::new_branch(\n+                    parent.kind(),\n+                    children.into_boxed_slice(),\n+                );\n+                parent.replace_with(new_parent)\n+            },\n+        }\n+    }\n+\n     fn red(&self) -> &RedNode {\n         unsafe { self.red.get(&self.root) }\n     }"}, {"sha": "e7ae4d601a319dc14bbf00e103466b50c15478c9", "filename": "crates/libsyntax2/tests/test/main.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs?ref=c3e5987c433cdd0ea95a6b1057b442f4f0fe1ffc", "patch": "@@ -9,7 +9,11 @@ use std::{\n     fmt::Write,\n };\n \n-use libsyntax2::File;\n+use test_utils::extract_range;\n+use libsyntax2::{\n+    File, AtomEdit,\n+    utils::dump_tree,\n+};\n \n #[test]\n fn lexer_tests() {\n@@ -23,10 +27,40 @@ fn lexer_tests() {\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n         let file = File::parse(text);\n-        libsyntax2::utils::dump_tree(file.syntax())\n+        dump_tree(file.syntax())\n     })\n }\n \n+#[test]\n+fn reparse_test() {\n+    fn do_check(before: &str, replace_with: &str) {\n+        let (range, before) = extract_range(before);\n+        let after = libsyntax2::replace_range(before.clone(), range, replace_with);\n+\n+        let fully_reparsed = File::parse(&after);\n+        let incrementally_reparsed = {\n+            let f = File::parse(&before);\n+            let edit = AtomEdit { delete: range, insert: replace_with.to_string() };\n+            f.incremental_reparse(&edit).unwrap()\n+        };\n+        assert_eq_text!(\n+            &dump_tree(fully_reparsed.syntax()),\n+            &dump_tree(incrementally_reparsed.syntax()),\n+        )\n+    }\n+\n+    do_check(r\"\n+fn foo() {\n+    let x = foo + <|>bar<|>\n+}\n+\", \"baz\");\n+    do_check(r\"\n+struct Foo {\n+    f: foo<|><|>\n+}\n+\", \",\\n    g: (),\");\n+}\n+\n \n /// Read file and normalize newlines.\n ///"}]}