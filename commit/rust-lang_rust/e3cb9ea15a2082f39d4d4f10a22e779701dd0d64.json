{"sha": "e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2I5ZWExNWEyMDgyZjM5ZDRkNGYxMGEyMmU3Nzk3MDFkZDBkNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-07T09:21:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-07T09:21:30Z"}, "message": "Auto merge of #65178 - Centril:rollup-ep1zztj, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #63948 (Add feature gate for raw_dylib.)\n - #65137 (remove event that causes panics in measureme tools)\n - #65164 (Add long error explanation for E0566)\n - #65173 (Update reference)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a5aec59e5cfcd213687e6e281995e4727a5a81d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5aec59e5cfcd213687e6e281995e4727a5a81d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "html_url": "https://github.com/rust-lang/rust/commit/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92f3c4bc67c003fe66afaf5d772731c074d7459", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92f3c4bc67c003fe66afaf5d772731c074d7459", "html_url": "https://github.com/rust-lang/rust/commit/f92f3c4bc67c003fe66afaf5d772731c074d7459"}, {"sha": "68a4cfc242ef542e18bafe6046eb6e3c9cbd71dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a4cfc242ef542e18bafe6046eb6e3c9cbd71dd", "html_url": "https://github.com/rust-lang/rust/commit/68a4cfc242ef542e18bafe6046eb6e3c9cbd71dd"}], "stats": {"total": 257, "additions": 246, "deletions": 11}, "files": [{"sha": "5b9d2fcefadfc32fceafacfc0dd9441d9b57dd94", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -1 +1 @@\n-Subproject commit 320d232b206edecb67489316f71a14e31dbc6c08\n+Subproject commit 5b9d2fcefadfc32fceafacfc0dd9441d9b57dd94"}, {"sha": "502172db91c9bf1a09597a2e03c5c15b5f746188", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -1700,6 +1700,27 @@ To understand better how closures work in Rust, read:\n https://doc.rust-lang.org/book/ch13-01-closures.html\n \"##,\n \n+E0566: r##\"\n+Conflicting representation hints have been used on a same item.\n+\n+Erroneous code example:\n+\n+```\n+#[repr(u32, u64)] // warning!\n+enum Repr { A }\n+```\n+\n+In most cases (if not all), using just one representation hint is more than\n+enough. If you want to have a representation hint depending on the current\n+architecture, use `cfg_attr`. Example:\n+\n+```\n+#[cfg_attr(linux, repr(u32))]\n+#[cfg_attr(not(linux), repr(u64))]\n+enum Repr { A }\n+```\n+\"##,\n+\n E0580: r##\"\n The `main` function was incorrectly declared.\n \n@@ -2097,7 +2118,6 @@ rejected in your own crates.\n     E0490, // a value of type `..` is borrowed for too long\n     E0495, // cannot infer an appropriate lifetime due to conflicting\n            // requirements\n-    E0566, // conflicting representation hints\n     E0623, // lifetime mismatch where both parameters are anonymous regions\n     E0628, // generators cannot have explicit parameters\n     E0631, // type mismatch in closure arguments"}, {"sha": "30b050366887766b8b8844235d9f02e966a1821e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -2669,6 +2669,11 @@ pub struct CodegenFnAttrs {\n     /// probably isn't set when this is set, this is for foreign items while\n     /// `#[export_name]` is for Rust-defined functions.\n     pub link_name: Option<Symbol>,\n+    /// The `#[link_ordinal = \"...\"]` attribute, indicating an ordinal an\n+    /// imported function has in the dynamic library. Note that this must not\n+    /// be set when `link_name` is set. This is for foreign items with the\n+    /// \"raw-dylib\" kind.\n+    pub link_ordinal: Option<usize>,\n     /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n     /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,\n@@ -2728,6 +2733,7 @@ impl CodegenFnAttrs {\n             optimize: OptimizeAttr::None,\n             export_name: None,\n             link_name: None,\n+            link_ordinal: None,\n             target_features: vec![],\n             linkage: None,\n             link_section: None,"}, {"sha": "065959ed09fd1da00ab9385ed7ae4f1785d5ffef", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -96,6 +96,8 @@ pub enum NativeLibraryKind {\n     NativeStaticNobundle,\n     /// macOS-specific\n     NativeFramework,\n+    /// Windows dynamic library without import library.\n+    NativeRawDylib,\n     /// default way to specify a dynamic library\n     NativeUnknown,\n }"}, {"sha": "50d9c088a85e975fbd0e724eb4c8ee208803aba7", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -323,6 +323,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             NativeLibraryKind::NativeStatic => {}\n             NativeLibraryKind::NativeStaticNobundle |\n             NativeLibraryKind::NativeFramework |\n+            NativeLibraryKind::NativeRawDylib |\n             NativeLibraryKind::NativeUnknown => continue,\n         }\n         if let Some(name) = lib.name {\n@@ -883,7 +884,8 @@ pub fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary\n                     Some(format!(\"-framework {}\", name))\n                 },\n                 // These are included, no need to print them\n-                NativeLibraryKind::NativeStatic => None,\n+                NativeLibraryKind::NativeStatic |\n+                NativeLibraryKind::NativeRawDylib => None,\n             }\n         })\n         .collect();\n@@ -1293,7 +1295,11 @@ pub fn add_local_native_libraries(cmd: &mut dyn Linker,\n             NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n             NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n             NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(name),\n-            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path)\n+            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path),\n+            NativeLibraryKind::NativeRawDylib => {\n+                // FIXME(#58713): Proper handling for raw dylibs.\n+                bug!(\"raw_dylib feature not yet implemented\");\n+            },\n         }\n     }\n }\n@@ -1678,7 +1684,11 @@ pub fn add_upstream_native_libraries(\n                 // ignore statically included native libraries here as we've\n                 // already included them when we included the rust library\n                 // previously\n-                NativeLibraryKind::NativeStatic => {}\n+                NativeLibraryKind::NativeStatic => {},\n+                NativeLibraryKind::NativeRawDylib => {\n+                    // FIXME(#58713): Proper handling for raw dylibs.\n+                    bug!(\"raw_dylib feature not yet implemented\");\n+                },\n             }\n         }\n     }"}, {"sha": "481db26e1a84d09cdcf3686d528b36880c6572f1", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -324,8 +324,6 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let (coordinator_send, coordinator_receive) = channel();\n     let sess = tcx.sess;\n \n-    sess.prof.generic_activity_start(\"codegen_and_optimize_crate\");\n-\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let no_builtins = attr::contains_name(&tcx.hir().krate().attrs, sym::no_builtins);\n@@ -1777,8 +1775,6 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n             self.backend.print_pass_timings()\n         }\n \n-        sess.prof.generic_activity_end(\"codegen_and_optimize_crate\");\n-\n         (CodegenResults {\n             crate_name: self.crate_name,\n             crate_hash: self.crate_hash,"}, {"sha": "cce0900bef3dde658af98a6113cfcb74ae5402cb", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -270,7 +270,11 @@ pub fn provide(providers: &mut Providers<'_>) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         is_dllimport_foreign_item: |tcx, id| {\n-            tcx.native_library_kind(id) == Some(NativeLibraryKind::NativeUnknown)\n+            match tcx.native_library_kind(id) {\n+                Some(NativeLibraryKind::NativeUnknown) |\n+                Some(NativeLibraryKind::NativeRawDylib) => true,\n+                _ => false,\n+            }\n         },\n         is_statically_included_foreign_item: |tcx, id| {\n             match tcx.native_library_kind(id) {"}, {"sha": "24ed8fcd8dd09c11d5bba67b6d533c8c8b8a9106", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -73,6 +73,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         \"static-nobundle\" => cstore::NativeStaticNobundle,\n                         \"dylib\" => cstore::NativeUnknown,\n                         \"framework\" => cstore::NativeFramework,\n+                        \"raw-dylib\" => cstore::NativeRawDylib,\n                         k => {\n                             struct_span_err!(self.tcx.sess, item.span(), E0458,\n                                       \"unknown kind: `{}`\", k)\n@@ -169,6 +170,14 @@ impl Collector<'tcx> {\n                                            GateIssue::Language,\n                                            \"kind=\\\"static-nobundle\\\" is unstable\");\n         }\n+        if lib.kind == cstore::NativeRawDylib &&\n+           !self.tcx.features().raw_dylib {\n+            feature_gate::emit_feature_err(&self.tcx.sess.parse_sess,\n+                                           sym::raw_dylib,\n+                                           span.unwrap_or_else(|| syntax_pos::DUMMY_SP),\n+                                           GateIssue::Language,\n+                                           \"kind=\\\"raw-dylib\\\" is unstable\");\n+        }\n         self.libs.push(lib);\n     }\n "}, {"sha": "64eca1371447b2519cd6d14630ac812569f9adef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -2560,6 +2560,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let whitelist = tcx.target_features_whitelist(LOCAL_CRATE);\n \n     let mut inline_span = None;\n+    let mut link_ordinal_span = None;\n     for attr in attrs.iter() {\n         if attr.check_name(sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n@@ -2641,6 +2642,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.check_name(sym::link_name) {\n             codegen_fn_attrs.link_name = attr.value_str();\n+        } else if attr.check_name(sym::link_ordinal) {\n+            link_ordinal_span = Some(attr.span);\n+            if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n+                codegen_fn_attrs.link_ordinal = ordinal;\n+            }\n         }\n     }\n \n@@ -2718,6 +2724,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     // purpose functions as they wouldn't have the right target features\n     // enabled. For that reason we also forbid #[inline(always)] as it can't be\n     // respected.\n+\n     if codegen_fn_attrs.target_features.len() > 0 {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let Some(span) = inline_span {\n@@ -2742,6 +2749,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }\n+    check_link_name_xor_ordinal(tcx, &codegen_fn_attrs, link_ordinal_span);\n \n     // Internal symbols to the standard library all have no_mangle semantics in\n     // that they have defined symbol names present in the function name. This\n@@ -2752,3 +2760,48 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n \n     codegen_fn_attrs\n }\n+\n+fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n+    use syntax::ast::{Lit, LitIntType, LitKind};\n+    let meta_item_list = attr.meta_item_list();\n+    let meta_item_list: Option<&[ast::NestedMetaItem]> = meta_item_list.as_ref().map(Vec::as_ref);\n+    let sole_meta_list = match meta_item_list {\n+        Some([item]) => item.literal(),\n+        _ => None,\n+    };\n+    if let Some(Lit { kind: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) = sole_meta_list {\n+        if *ordinal <= std::usize::MAX as u128 {\n+            Some(*ordinal as usize)\n+        } else {\n+            let msg = format!(\n+                \"ordinal value in `link_ordinal` is too large: `{}`\",\n+                &ordinal\n+            );\n+            tcx.sess.struct_span_err(attr.span, &msg)\n+                .note(\"the value may not exceed `std::usize::MAX`\")\n+                .emit();\n+            None\n+        }\n+    } else {\n+        tcx.sess.struct_span_err(attr.span, \"illegal ordinal format in `link_ordinal`\")\n+            .note(\"an unsuffixed integer value, e.g., `1`, is expected\")\n+            .emit();\n+        None\n+    }\n+}\n+\n+fn check_link_name_xor_ordinal(\n+    tcx: TyCtxt<'_>,\n+    codegen_fn_attrs: &CodegenFnAttrs,\n+    inline_span: Option<Span>,\n+) {\n+    if codegen_fn_attrs.link_name.is_none() || codegen_fn_attrs.link_ordinal.is_none() {\n+        return;\n+    }\n+    let msg = \"cannot use `#[link_name]` with `#[link_ordinal]`\";\n+    if let Some(span) = inline_span {\n+        tcx.sess.span_err(span, msg);\n+    } else {\n+        tcx.sess.err(msg);\n+    }\n+}"}, {"sha": "19ef430318d3ed1466080eb762fb2a8c16a7610a", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -522,6 +522,9 @@ declare_features! (\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n \n+    // Allows the use of raw-dylibs (RFC 2627).\n+    (active, raw_dylib, \"1.40.0\", Some(58713), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -536,4 +539,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_generics,\n     sym::or_patterns,\n     sym::let_chains,\n+    sym::raw_dylib,\n ];"}, {"sha": "c12d0ce06ffefd5d37acd4b843422299e7d664ef", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -276,6 +276,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"the `link_args` attribute is experimental and not portable across platforms, \\\n         it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n     ),\n+    gated!(\n+        link_ordinal, Whitelisted, template!(List: \"ordinal\"), raw_dylib,\n+        experimental!(link_ordinal)\n+    ),\n \n     // Plugins:\n     ("}, {"sha": "c7230d5ca15224e5276b6deb2c6edf1623f0de51", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -389,6 +389,7 @@ symbols! {\n         link_cfg,\n         link_llvm_intrinsics,\n         link_name,\n+        link_ordinal,\n         link_section,\n         LintPass,\n         lint_reasons,\n@@ -531,6 +532,7 @@ symbols! {\n         RangeInclusive,\n         RangeTo,\n         RangeToInclusive,\n+        raw_dylib,\n         raw_identifiers,\n         Ready,\n         reason,"}, {"sha": "832f5c3ac2bb7ec3f57cba28eec4b48fdfb67bc8", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -66,3 +66,4 @@ LL | | }\n \n error: aborting due to 8 previous errors\n \n+For more information about this error, try `rustc --explain E0566`."}, {"sha": "02c8400e03e8202258163d9d2cbfbd1fcd176394", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -26,4 +26,5 @@ LL | #[repr(simd)]\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0566, E0658.\n+For more information about an error, try `rustc --explain E0566`."}, {"sha": "14345bad6e5b9b8127b671900819146ec9cf7674", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,8 @@\n+#[link(name=\"foo\")]\n+extern {\n+    #[link_ordinal(42)]\n+    //~^ ERROR: the `#[link_ordinal]` attribute is an experimental feature\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "0869d7ad48a8c4b43858c3e596cc908ac083733f", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[link_ordinal]` attribute is an experimental feature\n+  --> $DIR/feature-gate-raw-dylib-2.rs:3:5\n+   |\n+LL |     #[link_ordinal(42)]\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f0f83e0426dd683f1e6aa04f1503af4dc50cde76", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,5 @@\n+#[link(name=\"foo\", kind=\"raw-dylib\")]\n+//~^ ERROR: kind=\"raw-dylib\" is unstable\n+extern {}\n+\n+fn main() {}"}, {"sha": "0ca9de28be1ac00d2d5d54768c6e8b199c978226", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: kind=\"raw-dylib\" is unstable\n+  --> $DIR/feature-gate-raw-dylib.rs:1:1\n+   |\n+LL | #[link(name=\"foo\", kind=\"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5769366fb45a49ef5811a594904c77966f7e1bf7", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-and-name.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,12 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+\n+#[link(name=\"foo\")]\n+extern {\n+    #[link_name=\"foo\"]\n+    #[link_ordinal(42)]\n+    //~^ ERROR cannot use `#[link_name]` with `#[link_ordinal]`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "303a1c02eb85facda66d59be53eec0264d5dc649", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-and-name.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,16 @@\n+warning: the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+  --> $DIR/link-ordinal-and-name.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: cannot use `#[link_name]` with `#[link_ordinal]`\n+  --> $DIR/link-ordinal-and-name.rs:7:5\n+   |\n+LL |     #[link_ordinal(42)]\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "82fb1151c23df9d7db661d94003a923ec2bc18a0", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,11 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+\n+#[link(name=\"foo\")]\n+extern {\n+    #[link_ordinal(\"JustMonika\")]\n+    //~^ ERROR illegal ordinal format in `link_ordinal`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "14556a7262b1ca863d9762fcbdfae3bf52336ebb", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+  --> $DIR/link-ordinal-invalid-format.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: illegal ordinal format in `link_ordinal`\n+  --> $DIR/link-ordinal-invalid-format.rs:6:5\n+   |\n+LL |     #[link_ordinal(\"JustMonika\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: an unsuffixed integer value, e.g., `1`, is expected\n+\n+error: aborting due to previous error\n+"}, {"sha": "69596ad04fff3cbe7816704d94b41838c28f26fb", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,11 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+\n+#[link(name=\"foo\")]\n+extern {\n+    #[link_ordinal(18446744073709551616)]\n+    //~^ ERROR ordinal value in `link_ordinal` is too large: `18446744073709551616`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "b3b22f9776df74b4258e7667f97c3a999210802b", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+  --> $DIR/link-ordinal-too-large.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: ordinal value in `link_ordinal` is too large: `18446744073709551616`\n+  --> $DIR/link-ordinal-too-large.rs:6:5\n+   |\n+LL |     #[link_ordinal(18446744073709551616)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the value may not exceed `std::usize::MAX`\n+\n+error: aborting due to previous error\n+"}]}