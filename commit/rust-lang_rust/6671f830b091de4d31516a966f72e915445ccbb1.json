{"sha": "6671f830b091de4d31516a966f72e915445ccbb1", "node_id": "C_kwDOAAsO6NoAKDY2NzFmODMwYjA5MWRlNGQzMTUxNmE5NjZmNzJlOTE1NDQ1Y2NiYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T18:38:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T18:38:20Z"}, "message": "Auto merge of #2558 - RalfJung:tag-gc, r=saethlin\n\nreadme: tag-gc tweaks\n\nr? `@saethlin`\n\nIs this option truly needed often enough that it should be in the 'common' section? If not I vote for moving it to the 2nd section. Also `10,000` is a confusing way to write numbers in an international context (in many languages, `,` in a number plays the role of the point in English number notation, so using a space or underscore is less likely to lead to confusion).", "tree": {"sha": "9f178eea3fa9ee6937cdaf1195af3cc9b4d3ded5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f178eea3fa9ee6937cdaf1195af3cc9b4d3ded5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6671f830b091de4d31516a966f72e915445ccbb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6671f830b091de4d31516a966f72e915445ccbb1", "html_url": "https://github.com/rust-lang/rust/commit/6671f830b091de4d31516a966f72e915445ccbb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6671f830b091de4d31516a966f72e915445ccbb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e3b9bca65d7d79a3b0e9c33fed8d8c93dd66041", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3b9bca65d7d79a3b0e9c33fed8d8c93dd66041", "html_url": "https://github.com/rust-lang/rust/commit/8e3b9bca65d7d79a3b0e9c33fed8d8c93dd66041"}, {"sha": "bef2bd8cc251167f5722ba9d3e1aa0f6361df69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2bd8cc251167f5722ba9d3e1aa0f6361df69a", "html_url": "https://github.com/rust-lang/rust/commit/bef2bd8cc251167f5722ba9d3e1aa0f6361df69a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2e27bb39afd0fd598b8c5083ab2fccb6ca9dd1d3", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6671f830b091de4d31516a966f72e915445ccbb1/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6671f830b091de4d31516a966f72e915445ccbb1/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=6671f830b091de4d31516a966f72e915445ccbb1", "patch": "@@ -324,10 +324,6 @@ environment variable. We first document the most relevant and most commonly used\n   ensure alignment.  (The standard library `align_to` method works fine in both modes; under\n   symbolic alignment it only fills the middle slice when the allocation guarantees sufficient\n   alignment.)\n-* `-Zmiri-tag-gc=<blocks>` configures how often the pointer tag garbage collector runs. The default\n-  is to search for and remove unreachable tags once every `10,000` basic blocks. Setting this to\n-  `0` disables the garbage collector, which causes some programs to have explosive memory usage\n-  and/or super-linear runtime.\n \n The remaining flags are for advanced use only, and more likely to change or be removed.\n Some of these are **unsound**, which means they can lead\n@@ -378,6 +374,10 @@ to Miri failing to detect cases of undefined behavior in a program.\n * `-Zmiri-retag-fields` changes Stacked Borrows retagging to recurse into fields.\n   This means that references in fields of structs/enums/tuples/arrays/... are retagged,\n   and in particular, they are protected when passed as function arguments.\n+* `-Zmiri-tag-gc=<blocks>` configures how often the pointer tag garbage collector runs. The default\n+  is to search for and remove unreachable tags once every `10000` basic blocks. Setting this to\n+  `0` disables the garbage collector, which causes some programs to have explosive memory usage\n+  and/or super-linear runtime.\n * `-Zmiri-track-alloc-id=<id1>,<id2>,...` shows a backtrace when the given allocations are\n   being allocated or freed.  This helps in debugging memory leaks and\n   use after free bugs. Specifying this argument multiple times does not overwrite the previous"}]}