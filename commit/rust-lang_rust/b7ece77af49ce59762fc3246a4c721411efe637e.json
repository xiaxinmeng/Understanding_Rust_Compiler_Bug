{"sha": "b7ece77af49ce59762fc3246a4c721411efe637e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZWNlNzdhZjQ5Y2U1OTc2MmZjMzI0NmE0YzcyMTQxMWVmZTYzN2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-28T14:33:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-28T14:33:57Z"}, "message": "Merge #6650\n\n6650: Make completion and assists module independent r=matklad a=SomeoneToIgnore\n\nA follow-up of https://github.com/rust-analyzer/rust-analyzer/pull/6553#discussion_r524402907\r\n\r\nMove the common code for both assists and completion modules into a separate crate.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "81c617c2df781e27b0c16c10515ebcf588cb376e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c617c2df781e27b0c16c10515ebcf588cb376e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ece77af49ce59762fc3246a4c721411efe637e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwl/VCRBK7hj4Ov3rIwAAdHIIAJ2F43klzvK65elj8T3IyNXj\n5tRzLHfGc/04++rjq2CDwBryg9NdIw6H/VmeErRA/H8fyBiBgue8PTdtzfSpYqSP\nBg/ktH67xDYpSqE0K9KvD8NC+Er+EG6Ij3JiOQeaPB1XvIu+o7L+nRyU13/Qwt6p\nFinutkePXGSLfc4mo0exXKlEjLNRb9TqvEYfJyg5WuiSxb0hpDyfuOSRvuj0HEaR\ngwNNsIvnKqePizgJlnF0DAaP6UX+ofXlg4AyM4HIzPbAmPa/Q8o0r/ntb5+sUtMB\nBXJcziz/IoVS7yzmXPvxqxWx4/Y67JL2S/Bc4n89mUHO5whTPSgNQuzHDdZTJ5A=\n=Hj9M\n-----END PGP SIGNATURE-----\n", "payload": "tree 81c617c2df781e27b0c16c10515ebcf588cb376e\nparent fe2ac4480bd71c9cf25d2c21bda82b33558d27a4\nparent 3f612d37c68a6e4c09e407b7cd2ad8a1d17ab4e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606574037 +0000\ncommitter GitHub <noreply@github.com> 1606574037 +0000\n\nMerge #6650\n\n6650: Make completion and assists module independent r=matklad a=SomeoneToIgnore\n\nA follow-up of https://github.com/rust-analyzer/rust-analyzer/pull/6553#discussion_r524402907\r\n\r\nMove the common code for both assists and completion modules into a separate crate.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ece77af49ce59762fc3246a4c721411efe637e", "html_url": "https://github.com/rust-lang/rust/commit/b7ece77af49ce59762fc3246a4c721411efe637e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ece77af49ce59762fc3246a4c721411efe637e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4", "html_url": "https://github.com/rust-lang/rust/commit/fe2ac4480bd71c9cf25d2c21bda82b33558d27a4"}, {"sha": "3f612d37c68a6e4c09e407b7cd2ad8a1d17ab4e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f612d37c68a6e4c09e407b7cd2ad8a1d17ab4e6", "html_url": "https://github.com/rust-lang/rust/commit/3f612d37c68a6e4c09e407b7cd2ad8a1d17ab4e6"}], "stats": {"total": 608, "additions": 305, "deletions": 303}, "files": [{"sha": "f50e9edd66ac7bdebdf381f36526980feff3e4c3", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -253,7 +253,6 @@ dependencies = [\n name = \"completion\"\n version = \"0.0.0\"\n dependencies = [\n- \"assists\",\n  \"base_db\",\n  \"either\",\n  \"expect-test\",\n@@ -682,6 +681,7 @@ dependencies = [\n  \"expect-test\",\n  \"fst\",\n  \"hir\",\n+ \"itertools\",\n  \"log\",\n  \"once_cell\",\n  \"profile\","}, {"sha": "3fd8327d6a327cc2ae9ab391e947658de1b69bd0", "filename": "crates/assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2FCargo.toml?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n-either = \"1.5.3\"\n+either = \"1.6.1\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "786224cfa1ca557d27ec30d7f76cd344a1d23ff3", "filename": "crates/assists/src/assist_config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_config.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -5,8 +5,9 @@\n //! assists if we are allowed to.\n \n use hir::PrefixKind;\n+use ide_db::helpers::insert_use::MergeBehaviour;\n \n-use crate::{utils::MergeBehaviour, AssistKind};\n+use crate::AssistKind;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct AssistConfig {"}, {"sha": "66e4634b1d303a392d200f30ef5873e4ffc62b87", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,14 +1,13 @@\n //! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n use hir::{HirDisplay, PathResolution, SemanticsScope};\n+use ide_db::helpers::mod_path_to_ast;\n use rustc_hash::FxHashMap;\n use syntax::{\n     algo::SyntaxRewriter,\n     ast::{self, AstNode},\n     SyntaxNode,\n };\n \n-use crate::utils::mod_path_to_ast;\n-\n pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n     SyntaxRewriter::from_fn(|element| match element {\n         syntax::SyntaxElement::Node(n) => {"}, {"sha": "bd5bba64601ec3549edd34da41362f402cbbb040", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,8 +1,11 @@\n+use ide_db::helpers::{\n+    insert_use::{insert_use, ImportScope},\n+    mod_path_to_ast,\n+};\n use syntax::ast;\n \n use crate::{\n     utils::import_assets::{ImportAssets, ImportCandidate},\n-    utils::{insert_use, mod_path_to_ast, ImportScope},\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n "}, {"sha": "d85767b4ecdc4d1ea5e278a926ca2eb168d1cee8", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -2,6 +2,10 @@ use std::iter;\n \n use either::Either;\n use hir::{AsName, EnumVariant, Module, ModuleDef, Name};\n+use ide_db::helpers::{\n+    insert_use::{insert_use, ImportScope},\n+    mod_path_to_ast,\n+};\n use ide_db::{defs::Definition, search::Reference, RootDatabase};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n@@ -10,10 +14,7 @@ use syntax::{\n     SourceFile, SyntaxElement, SyntaxNode, T,\n };\n \n-use crate::{\n-    utils::{insert_use, mod_path_to_ast, ImportScope},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -236,10 +237,9 @@ fn update_reference(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{\n-        tests::{check_assist, check_assist_not_applicable},\n-        utils::FamousDefs,\n-    };\n+    use ide_db::helpers::FamousDefs;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n "}, {"sha": "ef12ef0cf1adc44d1322219457fc89146e5aa010", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,13 +1,14 @@\n use std::iter;\n \n use hir::{Adt, HasSource, ModuleDef, Semantics};\n+use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n use crate::{\n-    utils::{mod_path_to_ast, render_snippet, Cursor, FamousDefs},\n+    utils::{render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -212,12 +213,10 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n \n #[cfg(test)]\n mod tests {\n+    use ide_db::helpers::FamousDefs;\n     use test_utils::mark;\n \n-    use crate::{\n-        tests::{check_assist, check_assist_not_applicable, check_assist_target},\n-        utils::FamousDefs,\n-    };\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::fill_match_arms;\n "}, {"sha": "3c374e5d95bc539b21e97bf3179cf6f7d74cdea7", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,8 +1,9 @@\n+use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n use syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n-use crate::{utils::FamousDefs, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: generate_from_impl_for_enum\n //"}, {"sha": "b7e853994b3f4d4a718cb65a4a5fad6e33ae39eb", "filename": "crates/assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,14 +1,12 @@\n+use ide_db::helpers::insert_use::{try_merge_imports, try_merge_trees, MergeBehaviour};\n use syntax::{\n     algo::{neighbor, SyntaxRewriter},\n     ast, AstNode,\n };\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    utils::{\n-        insert_use::{try_merge_imports, try_merge_trees},\n-        next_prev, MergeBehaviour,\n-    },\n+    utils::next_prev,\n     AssistId, AssistKind,\n };\n "}, {"sha": "6f9810fe88dc55881211377e3a46e0f08e054694", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,6 +1,7 @@\n use std::iter;\n \n use hir::AsName;\n+use ide_db::helpers::mod_path_to_ast;\n use ide_db::RootDatabase;\n use syntax::{\n     ast,\n@@ -12,7 +13,6 @@ use test_utils::mark;\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::import_assets::{ImportAssets, ImportCandidate},\n-    utils::mod_path_to_ast,\n     AssistId, AssistKind, GroupLabel,\n };\n "}, {"sha": "4d6a1956bb192a5891d7d0a16f7fcc52242ba863", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,3 +1,4 @@\n+use ide_db::helpers::mod_path_to_ast;\n use ide_db::imports_locator;\n use itertools::Itertools;\n use syntax::{\n@@ -10,8 +11,7 @@ use syntax::{\n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n     utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, mod_path_to_ast, render_snippet, Cursor,\n-        DefaultMethods,\n+        add_trait_assoc_items_to_impl, filter_assoc_items, render_snippet, Cursor, DefaultMethods,\n     },\n     AssistId, AssistKind,\n };"}, {"sha": "8bdf9eea5e47fe1796c881642091fdec775c5b2d", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,10 +1,8 @@\n+use ide_db::helpers::insert_use::{insert_use, ImportScope};\n use syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SyntaxNode};\n use test_utils::mark;\n \n-use crate::{\n-    utils::{insert_use, ImportScope},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_qualified_name_with_use\n //"}, {"sha": "01f5c291fb3526a8ac8289219f805160e09d12ba", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 199, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,10 +1,9 @@\n //! Assorted functions shared by several assists.\n-pub(crate) mod insert_use;\n pub(crate) mod import_assets;\n \n use std::ops;\n \n-use hir::{Crate, Enum, HasSource, Module, ScopeDef, Semantics, Trait};\n+use hir::HasSource;\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use syntax::{\n@@ -22,30 +21,6 @@ use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n };\n \n-pub use insert_use::{insert_use, ImportScope, MergeBehaviour};\n-\n-pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n-    let _p = profile::span(\"mod_path_to_ast\");\n-    let mut segments = Vec::new();\n-    let mut is_abs = false;\n-    match path.kind {\n-        hir::PathKind::Plain => {}\n-        hir::PathKind::Super(0) => segments.push(make::path_segment_self()),\n-        hir::PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n-        hir::PathKind::DollarCrate(_) | hir::PathKind::Crate => {\n-            segments.push(make::path_segment_crate())\n-        }\n-        hir::PathKind::Abs => is_abs = true,\n-    }\n-\n-    segments.extend(\n-        path.segments\n-            .iter()\n-            .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n-    );\n-    make::path_from_segments(segments, is_abs)\n-}\n-\n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)\n         .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n@@ -260,179 +235,6 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n-/// Helps with finding well-know things inside the standard library. This is\n-/// somewhat similar to the known paths infra inside hir, but it different; We\n-/// want to make sure that IDE specific paths don't become interesting inside\n-/// the compiler itself as well.\n-pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Crate>);\n-\n-#[allow(non_snake_case)]\n-impl FamousDefs<'_, '_> {\n-    pub const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n-pub mod convert {\n-    pub trait From<T> {\n-        fn from(t: T) -> Self;\n-    }\n-}\n-\n-pub mod default {\n-    pub trait Default {\n-       fn default() -> Self;\n-    }\n-}\n-\n-pub mod iter {\n-    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n-    mod traits {\n-        pub(crate) mod iterator {\n-            use crate::option::Option;\n-            pub trait Iterator {\n-                type Item;\n-                fn next(&mut self) -> Option<Self::Item>;\n-                fn by_ref(&mut self) -> &mut Self {\n-                    self\n-                }\n-                fn take(self, n: usize) -> crate::iter::Take<Self> {\n-                    crate::iter::Take { inner: self }\n-                }\n-            }\n-\n-            impl<I: Iterator> Iterator for &mut I {\n-                type Item = I::Item;\n-                fn next(&mut self) -> Option<I::Item> {\n-                    (**self).next()\n-                }\n-            }\n-        }\n-        pub(crate) mod collect {\n-            pub trait IntoIterator {\n-                type Item;\n-            }\n-        }\n-    }\n-\n-    pub use self::sources::*;\n-    pub(crate) mod sources {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Repeat<A> {\n-            element: A,\n-        }\n-\n-        pub fn repeat<T>(elt: T) -> Repeat<T> {\n-            Repeat { element: elt }\n-        }\n-\n-        impl<A> Iterator for Repeat<A> {\n-            type Item = A;\n-\n-            fn next(&mut self) -> Option<A> {\n-                None\n-            }\n-        }\n-    }\n-\n-    pub use self::adapters::*;\n-    pub(crate) mod adapters {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Take<I> { pub(crate) inner: I }\n-        impl<I> Iterator for Take<I> where I: Iterator {\n-            type Item = <I as Iterator>::Item;\n-            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-                None\n-            }\n-        }\n-    }\n-}\n-\n-pub mod option {\n-    pub enum Option<T> { None, Some(T)}\n-}\n-\n-pub mod prelude {\n-    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}, default::Default};\n-}\n-#[prelude_import]\n-pub use prelude::*;\n-\"#;\n-\n-    pub fn core(&self) -> Option<Crate> {\n-        self.find_crate(\"core\")\n-    }\n-\n-    pub(crate) fn core_convert_From(&self) -> Option<Trait> {\n-        self.find_trait(\"core:convert:From\")\n-    }\n-\n-    pub(crate) fn core_option_Option(&self) -> Option<Enum> {\n-        self.find_enum(\"core:option:Option\")\n-    }\n-\n-    pub fn core_default_Default(&self) -> Option<Trait> {\n-        self.find_trait(\"core:default:Default\")\n-    }\n-\n-    pub fn core_iter_Iterator(&self) -> Option<Trait> {\n-        self.find_trait(\"core:iter:traits:iterator:Iterator\")\n-    }\n-\n-    pub fn core_iter(&self) -> Option<Module> {\n-        self.find_module(\"core:iter\")\n-    }\n-\n-    fn find_trait(&self, path: &str) -> Option<Trait> {\n-        match self.find_def(path)? {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    fn find_enum(&self, path: &str) -> Option<Enum> {\n-        match self.find_def(path)? {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(it))) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    fn find_module(&self, path: &str) -> Option<Module> {\n-        match self.find_def(path)? {\n-            hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    fn find_crate(&self, name: &str) -> Option<Crate> {\n-        let krate = self.1?;\n-        let db = self.0.db;\n-        let res =\n-            krate.dependencies(db).into_iter().find(|dep| dep.name.to_string() == name)?.krate;\n-        Some(res)\n-    }\n-\n-    fn find_def(&self, path: &str) -> Option<ScopeDef> {\n-        let db = self.0.db;\n-        let mut path = path.split(':');\n-        let trait_ = path.next_back()?;\n-        let std_crate = path.next()?;\n-        let std_crate = self.find_crate(std_crate)?;\n-        let mut module = std_crate.root_module(db);\n-        for segment in path {\n-            module = module.children(db).find_map(|child| {\n-                let name = child.name(db)?;\n-                if name.to_string() == segment {\n-                    Some(child)\n-                } else {\n-                    None\n-                }\n-            })?;\n-        }\n-        let def =\n-            module.scope(db, None).into_iter().find(|(name, _def)| name.to_string() == trait_)?.1;\n-        Some(def)\n-    }\n-}\n-\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }"}, {"sha": "35e169a28c11707875c269f5a3cc42253e709b67", "filename": "crates/completion/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -15,7 +15,6 @@ log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n either = \"1.6.1\"\n \n-assists = { path = \"../assists\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }"}, {"sha": "eaa44c97d1f1e1eafea158fd716d2500f5ef8935", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,5 +1,5 @@\n //! Complete fields in record literals and patterns.\n-use assists::utils::FamousDefs;\n+use ide_db::helpers::FamousDefs;\n use syntax::ast::Expr;\n \n use crate::{\n@@ -45,8 +45,8 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n \n #[cfg(test)]\n mod tests {\n-    use assists::utils::FamousDefs;\n     use expect_test::{expect, Expect};\n+    use ide_db::helpers::FamousDefs;\n \n     use crate::{test_utils::completion_list, CompletionKind};\n "}, {"sha": "81691cd7f23bc2d6b2911e26d85478b5302add17", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,8 +1,8 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n-use assists::utils::ImportScope;\n use either::Either;\n use hir::{Adt, ModuleDef, ScopeDef, Type};\n+use ide_db::helpers::insert_use::ImportScope;\n use ide_db::imports_locator;\n use syntax::AstNode;\n use test_utils::mark;"}, {"sha": "654a76f7b33e2077247a90e431e250674d1e6225", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -4,7 +4,7 @@\n //! module, and we use to statically check that we only produce snippet\n //! completions if we are allowed to.\n \n-use assists::utils::MergeBehaviour;\n+use ide_db::helpers::insert_use::MergeBehaviour;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {"}, {"sha": "e85549fef4d45370defc2ea58546fb69e55e5a5e", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -2,8 +2,11 @@\n \n use std::fmt;\n \n-use assists::utils::{insert_use, mod_path_to_ast, ImportScope, MergeBehaviour};\n use hir::{Documentation, ModPath, Mutability};\n+use ide_db::helpers::{\n+    insert_use::{self, ImportScope, MergeBehaviour},\n+    mod_path_to_ast,\n+};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n@@ -201,7 +204,7 @@ impl CompletionItem {\n             trigger_call_info: None,\n             score: None,\n             ref_match: None,\n-            import_data: None,\n+            import_to_add: None,\n         }\n     }\n \n@@ -255,13 +258,21 @@ impl CompletionItem {\n     }\n }\n \n+/// An extra import to add after the completion is applied.\n+#[derive(Clone)]\n+pub(crate) struct ImportToAdd {\n+    pub(crate) import_path: ModPath,\n+    pub(crate) import_scope: ImportScope,\n+    pub(crate) merge_behaviour: Option<MergeBehaviour>,\n+}\n+\n /// A helper to make `CompletionItem`s.\n #[must_use]\n #[derive(Clone)]\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -285,9 +296,9 @@ impl Builder {\n         let mut insert_text = self.insert_text;\n         let mut text_edits = TextEdit::builder();\n \n-        if let Some((import_path, import_scope, merge_behaviour)) = self.import_data {\n-            let import = mod_path_to_ast(&import_path);\n-            let mut import_path_without_last_segment = import_path;\n+        if let Some(import_data) = self.import_to_add {\n+            let import = mod_path_to_ast(&import_data.import_path);\n+            let mut import_path_without_last_segment = import_data.import_path;\n             let _ = import_path_without_last_segment.segments.pop();\n \n             if !import_path_without_last_segment.segments.is_empty() {\n@@ -300,7 +311,11 @@ impl Builder {\n                 label = format!(\"{}::{}\", import_path_without_last_segment, label);\n             }\n \n-            let rewriter = insert_use(&import_scope, import, merge_behaviour);\n+            let rewriter = insert_use::insert_use(\n+                &import_data.import_scope,\n+                import,\n+                import_data.merge_behaviour,\n+            );\n             if let Some(old_ast) = rewriter.rewrite_root() {\n                 algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n             }\n@@ -392,11 +407,8 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn import_data(\n-        mut self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> Builder {\n-        self.import_data = import_data;\n+    pub(crate) fn add_import(mut self, import_to_add: Option<ImportToAdd>) -> Builder {\n+        self.import_to_add = import_to_add;\n         self\n     }\n     pub(crate) fn set_ref_match("}, {"sha": "504757a6ae2ff271ee9cb31279a806ac7e8c1de8", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -9,15 +9,15 @@ pub(crate) mod type_alias;\n \n mod builder_ext;\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{Documentation, HasAttrs, HirDisplay, ModPath, Mutability, ScopeDef, Type};\n+use ide_db::helpers::insert_use::{ImportScope, MergeBehaviour};\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::mark;\n \n use crate::{\n-    config::SnippetCap, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n-    CompletionScore,\n+    config::SnippetCap, item::ImportToAdd, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionKind, CompletionScore,\n };\n \n use crate::render::{enum_variant::render_enum_variant, function::render_fn, macro_::render_macro};\n@@ -48,15 +48,15 @@ pub(crate) fn render_resolution<'a>(\n \n pub(crate) fn render_resolution_with_import<'a>(\n     ctx: RenderContext<'a>,\n-    import: ModPath,\n+    import_path: ModPath,\n     import_scope: ImportScope,\n     merge_behaviour: Option<MergeBehaviour>,\n     resolution: &ScopeDef,\n ) -> Option<CompletionItem> {\n-    let local_name = import.segments.last()?.to_string();\n+    let local_name = import_path.segments.last()?.to_string();\n     Render::new(ctx).render_resolution(\n         local_name,\n-        Some((import, import_scope, merge_behaviour)),\n+        Some(ImportToAdd { import_path, import_scope, merge_behaviour }),\n         resolution,\n     )\n }\n@@ -147,7 +147,7 @@ impl<'a> Render<'a> {\n     fn render_resolution(\n         self,\n         local_name: String,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+        import_to_add: Option<ImportToAdd>,\n         resolution: &ScopeDef,\n     ) -> Option<CompletionItem> {\n         let _p = profile::span(\"render_resolution\");\n@@ -160,15 +160,16 @@ impl<'a> Render<'a> {\n \n         let kind = match resolution {\n             ScopeDef::ModuleDef(Function(func)) => {\n-                let item = render_fn(self.ctx, import_data, Some(local_name), *func);\n+                let item = render_fn(self.ctx, import_to_add, Some(local_name), *func);\n                 return Some(item);\n             }\n             ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                let item = render_enum_variant(self.ctx, import_data, Some(local_name), *var, None);\n+                let item =\n+                    render_enum_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n                 return Some(item);\n             }\n             ScopeDef::MacroDef(mac) => {\n-                let item = render_macro(self.ctx, import_data, local_name, *mac);\n+                let item = render_macro(self.ctx, import_to_add, local_name, *mac);\n                 return item;\n             }\n \n@@ -193,7 +194,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .import_data(import_data)\n+                .add_import(import_to_add)\n                 .build();\n                 return Some(item);\n             }\n@@ -248,7 +249,7 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .import_data(import_data)\n+            .add_import(import_to_add)\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();"}, {"sha": "f4bd02f258155c7359ab492121bd7e8f6f126b46", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,24 +1,23 @@\n //! Renderer for `enum` variants.\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n use itertools::Itertools;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n     render::{builder_ext::Params, RenderContext},\n };\n \n pub(crate) fn render_enum_variant<'a>(\n     ctx: RenderContext<'a>,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     local_name: Option<String>,\n     variant: hir::EnumVariant,\n     path: Option<ModPath>,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_enum_variant\");\n-    EnumVariantRender::new(ctx, local_name, variant, path).render(import_data)\n+    EnumVariantRender::new(ctx, local_name, variant, path).render(import_to_add)\n }\n \n #[derive(Debug)]\n@@ -63,10 +62,7 @@ impl<'a> EnumVariantRender<'a> {\n         }\n     }\n \n-    fn render(\n-        self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n         let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n@@ -75,7 +71,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .import_data(import_data)\n+        .add_import(import_to_add)\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "542383d7e77097eaee53ec3b052c57fde4bc675e", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,22 +1,21 @@\n //! Renderer for function calls.\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n-use hir::{HasSource, ModPath, Type};\n+use hir::{HasSource, Type};\n use syntax::{ast::Fn, display::function_declaration};\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n     render::{builder_ext::Params, RenderContext},\n };\n \n pub(crate) fn render_fn<'a>(\n     ctx: RenderContext<'a>,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     local_name: Option<String>,\n     fn_: hir::Function,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_fn\");\n-    FunctionRender::new(ctx, local_name, fn_).render(import_data)\n+    FunctionRender::new(ctx, local_name, fn_).render(import_to_add)\n }\n \n #[derive(Debug)]\n@@ -39,18 +38,15 @@ impl<'a> FunctionRender<'a> {\n         FunctionRender { ctx, name, fn_, ast_node }\n     }\n \n-    fn render(\n-        self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.fn_))\n             .set_deprecated(self.ctx.is_deprecated(self.fn_))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .import_data(import_data)\n+            .add_import(import_to_add)\n             .build()\n     }\n "}, {"sha": "b4ab32c6e43ce35d8516874f1c2c9945c8173866", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,23 +1,22 @@\n //! Renderer for macro invocations.\n \n-use assists::utils::{ImportScope, MergeBehaviour};\n-use hir::{Documentation, HasSource, ModPath};\n+use hir::{Documentation, HasSource};\n use syntax::display::macro_label;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n     render::RenderContext,\n };\n \n pub(crate) fn render_macro<'a>(\n     ctx: RenderContext<'a>,\n-    import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n+    import_to_add: Option<ImportToAdd>,\n     name: String,\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_macro\");\n-    MacroRender::new(ctx, name, macro_).render(import_data)\n+    MacroRender::new(ctx, name, macro_).render(import_to_add)\n }\n \n #[derive(Debug)]\n@@ -39,10 +38,7 @@ impl<'a> MacroRender<'a> {\n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n-    fn render(\n-        &self,\n-        import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n-    ) -> Option<CompletionItem> {\n+    fn render(&self, import_to_add: Option<ImportToAdd>) -> Option<CompletionItem> {\n         // FIXME: Currently proc-macro do not have ast-node,\n         // such that it does not have source\n         if self.macro_.is_proc_macro() {\n@@ -54,7 +50,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .import_data(import_data)\n+                .add_import(import_to_add)\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "65df7979cfa25e03d395708239ba03e1b0ec4561", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,6 +1,6 @@\n-use assists::utils::FamousDefs;\n use either::Either;\n use hir::{known, Callable, HirDisplay, Semantics};\n+use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n use stdx::to_lower_snake_case;\n use syntax::{\n@@ -427,8 +427,8 @@ fn get_callable(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<hir:\n \n #[cfg(test)]\n mod tests {\n-    use assists::utils::FamousDefs;\n     use expect_test::{expect, Expect};\n+    use ide_db::helpers::FamousDefs;\n     use test_utils::extract_annotations;\n \n     use crate::{fixture, inlay_hints::InlayHintsConfig};"}, {"sha": "5244bdd610e086fcc0be5255c2058f43bcbd3932", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -87,9 +87,7 @@ pub use ide_db::{\n     search::{Reference, ReferenceAccess, ReferenceKind},\n };\n \n-pub use assists::{\n-    utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,\n-};\n+pub use assists::{Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist};\n pub use hir::{Documentation, Semantics};\n pub use ide_db::base_db::{\n     Canceled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,"}, {"sha": "0ad6e100097882f4a5b511f9eeeaf3d183786fc2", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -18,7 +18,8 @@ rayon = \"1.5.0\"\n fst = { version = \"0.4\", default-features = false }\n rustc-hash = \"1.1.0\"\n once_cell = \"1.3.1\"\n-either = \"1.5.3\"\n+either = \"1.6.1\"\n+itertools = \"0.9.0\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "d988588ff3eb9d979631e5a5682371d61266dafe", "filename": "crates/ide_db/src/helpers.rs", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -0,0 +1,203 @@\n+//! A module with ide helpers for high-level ide features.\n+use crate::RootDatabase;\n+use hir::{Crate, Enum, Module, ScopeDef, Semantics, Trait};\n+use syntax::ast::{self, make};\n+\n+pub mod insert_use;\n+\n+/// Converts the mod path struct into its ast representation.\n+pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n+    let _p = profile::span(\"mod_path_to_ast\");\n+\n+    let mut segments = Vec::new();\n+    let mut is_abs = false;\n+    match path.kind {\n+        hir::PathKind::Plain => {}\n+        hir::PathKind::Super(0) => segments.push(make::path_segment_self()),\n+        hir::PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n+        hir::PathKind::DollarCrate(_) | hir::PathKind::Crate => {\n+            segments.push(make::path_segment_crate())\n+        }\n+        hir::PathKind::Abs => is_abs = true,\n+    }\n+\n+    segments.extend(\n+        path.segments\n+            .iter()\n+            .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n+    );\n+    make::path_from_segments(segments, is_abs)\n+}\n+\n+/// Helps with finding well-know things inside the standard library. This is\n+/// somewhat similar to the known paths infra inside hir, but it different; We\n+/// want to make sure that IDE specific paths don't become interesting inside\n+/// the compiler itself as well.\n+pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Crate>);\n+\n+#[allow(non_snake_case)]\n+impl FamousDefs<'_, '_> {\n+    pub const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n+pub mod convert {\n+    pub trait From<T> {\n+        fn from(t: T) -> Self;\n+    }\n+}\n+\n+pub mod default {\n+    pub trait Default {\n+       fn default() -> Self;\n+    }\n+}\n+\n+pub mod iter {\n+    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n+    mod traits {\n+        pub(crate) mod iterator {\n+            use crate::option::Option;\n+            pub trait Iterator {\n+                type Item;\n+                fn next(&mut self) -> Option<Self::Item>;\n+                fn by_ref(&mut self) -> &mut Self {\n+                    self\n+                }\n+                fn take(self, n: usize) -> crate::iter::Take<Self> {\n+                    crate::iter::Take { inner: self }\n+                }\n+            }\n+\n+            impl<I: Iterator> Iterator for &mut I {\n+                type Item = I::Item;\n+                fn next(&mut self) -> Option<I::Item> {\n+                    (**self).next()\n+                }\n+            }\n+        }\n+        pub(crate) mod collect {\n+            pub trait IntoIterator {\n+                type Item;\n+            }\n+        }\n+    }\n+\n+    pub use self::sources::*;\n+    pub(crate) mod sources {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Repeat<A> {\n+            element: A,\n+        }\n+\n+        pub fn repeat<T>(elt: T) -> Repeat<T> {\n+            Repeat { element: elt }\n+        }\n+\n+        impl<A> Iterator for Repeat<A> {\n+            type Item = A;\n+\n+            fn next(&mut self) -> Option<A> {\n+                None\n+            }\n+        }\n+    }\n+\n+    pub use self::adapters::*;\n+    pub(crate) mod adapters {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Take<I> { pub(crate) inner: I }\n+        impl<I> Iterator for Take<I> where I: Iterator {\n+            type Item = <I as Iterator>::Item;\n+            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+                None\n+            }\n+        }\n+    }\n+}\n+\n+pub mod option {\n+    pub enum Option<T> { None, Some(T)}\n+}\n+\n+pub mod prelude {\n+    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}, default::Default};\n+}\n+#[prelude_import]\n+pub use prelude::*;\n+\"#;\n+\n+    pub fn core(&self) -> Option<Crate> {\n+        self.find_crate(\"core\")\n+    }\n+\n+    pub fn core_convert_From(&self) -> Option<Trait> {\n+        self.find_trait(\"core:convert:From\")\n+    }\n+\n+    pub fn core_option_Option(&self) -> Option<Enum> {\n+        self.find_enum(\"core:option:Option\")\n+    }\n+\n+    pub fn core_default_Default(&self) -> Option<Trait> {\n+        self.find_trait(\"core:default:Default\")\n+    }\n+\n+    pub fn core_iter_Iterator(&self) -> Option<Trait> {\n+        self.find_trait(\"core:iter:traits:iterator:Iterator\")\n+    }\n+\n+    pub fn core_iter(&self) -> Option<Module> {\n+        self.find_module(\"core:iter\")\n+    }\n+\n+    fn find_trait(&self, path: &str) -> Option<Trait> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_enum(&self, path: &str) -> Option<Enum> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(it))) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_module(&self, path: &str) -> Option<Module> {\n+        match self.find_def(path)? {\n+            hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find_crate(&self, name: &str) -> Option<Crate> {\n+        let krate = self.1?;\n+        let db = self.0.db;\n+        let res =\n+            krate.dependencies(db).into_iter().find(|dep| dep.name.to_string() == name)?.krate;\n+        Some(res)\n+    }\n+\n+    fn find_def(&self, path: &str) -> Option<ScopeDef> {\n+        let db = self.0.db;\n+        let mut path = path.split(':');\n+        let trait_ = path.next_back()?;\n+        let std_crate = path.next()?;\n+        let std_crate = self.find_crate(std_crate)?;\n+        let mut module = std_crate.root_module(db);\n+        for segment in path {\n+            module = module.children(db).find_map(|child| {\n+                let name = child.name(db)?;\n+                if name.to_string() == segment {\n+                    Some(child)\n+                } else {\n+                    None\n+                }\n+            })?;\n+        }\n+        let def =\n+            module.scope(db, None).into_iter().find(|(name, _def)| name.to_string() == trait_)?.1;\n+        Some(def)\n+    }\n+}"}, {"sha": "67e800fad88f645855757307fc182e0809142968", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -1,8 +1,8 @@\n //! Handle syntactic aspects of inserting a new `use`.\n use std::{cmp::Ordering, iter::successors};\n \n+use crate::RootDatabase;\n use hir::Semantics;\n-use ide_db::RootDatabase;\n use itertools::{EitherOrBoth, Itertools};\n use syntax::{\n     algo::SyntaxRewriter,\n@@ -22,7 +22,7 @@ pub enum ImportScope {\n }\n \n impl ImportScope {\n-    pub(crate) fn from(syntax: SyntaxNode) -> Option<Self> {\n+    pub fn from(syntax: SyntaxNode) -> Option<Self> {\n         if let Some(module) = ast::Module::cast(syntax.clone()) {\n             module.item_list().map(ImportScope::Module)\n         } else if let this @ Some(_) = ast::SourceFile::cast(syntax.clone()) {\n@@ -180,7 +180,7 @@ fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -\n     }\n }\n \n-pub(crate) fn try_merge_imports(\n+pub fn try_merge_imports(\n     lhs: &ast::Use,\n     rhs: &ast::Use,\n     merge_behaviour: MergeBehaviour,\n@@ -195,7 +195,7 @@ pub(crate) fn try_merge_imports(\n     Some(lhs.with_use_tree(merged))\n }\n \n-pub(crate) fn try_merge_trees(\n+pub fn try_merge_trees(\n     lhs: &ast::UseTree,\n     rhs: &ast::UseTree,\n     merge: MergeBehaviour,", "previous_filename": "crates/assists/src/utils/insert_use.rs"}, {"sha": "fceaa089ade52f0f18818cc8e5436bcf00dffcd4", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -13,6 +13,7 @@ pub mod source_change;\n pub mod ty_filter;\n pub mod traits;\n pub mod call_info;\n+pub mod helpers;\n \n use std::{fmt, sync::Arc};\n "}, {"sha": "08559b53adbd0bdf3e368a0726caac13f96ddb0d", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -39,6 +39,7 @@ tracing-tree = { version = \"0.1.4\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n flycheck = { path = \"../flycheck\", version = \"0.0.0\" }\n ide = { path = \"../ide\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n project_model = { path = \"../project_model\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n@@ -49,7 +50,6 @@ cfg = { path = \"../cfg\", version = \"0.0.0\" }\n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n \n # This should only be used in CLI\n-ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n ssr = { path = \"../ssr\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n hir_def = { path = \"../hir_def\", version = \"0.0.0\" }"}, {"sha": "30299a4659e89e45cee1cfc3439f2883ad356928", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ece77af49ce59762fc3246a4c721411efe637e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b7ece77af49ce59762fc3246a4c721411efe637e", "patch": "@@ -11,10 +11,8 @@ use std::{convert::TryFrom, ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use hir::PrefixKind;\n-use ide::{\n-    AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig,\n-    MergeBehaviour,\n-};\n+use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n+use ide_db::helpers::insert_use::MergeBehaviour;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use rustc_hash::FxHashSet;"}]}