{"sha": "bf84e4958ee31c59e5b78f60059d69a73ef659bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODRlNDk1OGVlMzFjNTllNWI3OGY2MDA1OWQ2OWE3M2VmNjU5YmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-24T19:08:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T19:08:12Z"}, "message": "Merge #6331 #6342\n\n6331: correct hover text for items with doc attribute with raw strings r=matklad a=JoshMcguigan\n\nFixes #6300 by improving the handling of raw string literals in attribute style doc comments.\r\n\r\nThis still has a bug where it could consume too many `\"` at the start or end of the comment text, just as the original code had. Not sure if we want to fix that as part of this PR or not? If so, I think I'd prefer to add a unit test for either the `as_simple_key_value` function (I'm not exactly sure where this would belong / how to set this up) or create a `fn(&SmolStr) -> &SmolStr` to unit test by factoring out the `trim` operations from `as_simple_key_value`. Thoughts on this? \n\n6342: Shorter dependency chain r=matklad a=popzxc\n\nContinuing implementing suggestions from the `Completion refactoring` zulip thread.\r\n\r\nThis PR does the following:\r\n\r\n- Removes dependency of `completions` on `assists` by moving required functionality into `ide_db`.\r\n- Moves completely `call_info` crate into `ide_db` as it looks like it fits perfect there.\r\n- Adds a bunch of new tests and docs.\r\n- Adds the re-export of `base_db` to the `ide_db` and removes direct dependency on `base_db` from other crates.\r\n\r\nThe last point is controversial, I guess, but I noticed that in places where `ide_db` is used, `base_db` is also *always* used. Thus I think the dependency on the `base_db` is implied by the fact of `ide_db` interfaces, and thus it makes sense to just provide `base_db` out of the box.\r\n\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "7eacf8a6da9894c1a6656e0dffbe7189ad4f71b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eacf8a6da9894c1a6656e0dffbe7189ad4f71b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf84e4958ee31c59e5b78f60059d69a73ef659bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflHucCRBK7hj4Ov3rIwAAdHIIAGcCfEwJIarKVNBb4a9p1nqN\nFn/+rsAx8VoQaxhKjWga6NRLWtAXJWEMJkrtHJtif6sxjt4qyo25ffHhMr1eKbfX\nsa9z+xpaijw6Gsbg4CoCyQ0z3kLTnt26hd70u6nGGrYnV9Flq4KojTfAFepCsp8a\nVzDKKJ13Mla98hvqTG7VbuLdbdDr/txG86s5awZfLVxoeM0ubiYvrtqoHwNmoZIF\nNkCA1p/SspZ+hgbpNSvkkAgVk9pYsOS2JFZk+sff7pM+5B095vrx81ZzyWKI0BGO\npER9Wc9TDImVgfqb+uksZEASKUW1cW+0olFSRmq743Y/icF1wFplR0o/I0C8cbQ=\n=gNc6\n-----END PGP SIGNATURE-----\n", "payload": "tree 7eacf8a6da9894c1a6656e0dffbe7189ad4f71b4\nparent 11e18c31df19d05438a373c26ad6cda487955b4d\nparent 4e76e884bd74430223919f29d49d7ae9710b48cf\nparent 19cce08662222f012a0f50ff73afd4fdd34ca683\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603566492 +0000\ncommitter GitHub <noreply@github.com> 1603566492 +0000\n\nMerge #6331 #6342\n\n6331: correct hover text for items with doc attribute with raw strings r=matklad a=JoshMcguigan\n\nFixes #6300 by improving the handling of raw string literals in attribute style doc comments.\r\n\r\nThis still has a bug where it could consume too many `\"` at the start or end of the comment text, just as the original code had. Not sure if we want to fix that as part of this PR or not? If so, I think I'd prefer to add a unit test for either the `as_simple_key_value` function (I'm not exactly sure where this would belong / how to set this up) or create a `fn(&SmolStr) -> &SmolStr` to unit test by factoring out the `trim` operations from `as_simple_key_value`. Thoughts on this? \n\n6342: Shorter dependency chain r=matklad a=popzxc\n\nContinuing implementing suggestions from the `Completion refactoring` zulip thread.\r\n\r\nThis PR does the following:\r\n\r\n- Removes dependency of `completions` on `assists` by moving required functionality into `ide_db`.\r\n- Moves completely `call_info` crate into `ide_db` as it looks like it fits perfect there.\r\n- Adds a bunch of new tests and docs.\r\n- Adds the re-export of `base_db` to the `ide_db` and removes direct dependency on `base_db` from other crates.\r\n\r\nThe last point is controversial, I guess, but I noticed that in places where `ide_db` is used, `base_db` is also *always* used. Thus I think the dependency on the `base_db` is implied by the fact of `ide_db` interfaces, and thus it makes sense to just provide `base_db` out of the box.\r\n\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf84e4958ee31c59e5b78f60059d69a73ef659bb", "html_url": "https://github.com/rust-lang/rust/commit/bf84e4958ee31c59e5b78f60059d69a73ef659bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf84e4958ee31c59e5b78f60059d69a73ef659bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e18c31df19d05438a373c26ad6cda487955b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e18c31df19d05438a373c26ad6cda487955b4d", "html_url": "https://github.com/rust-lang/rust/commit/11e18c31df19d05438a373c26ad6cda487955b4d"}, {"sha": "4e76e884bd74430223919f29d49d7ae9710b48cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e76e884bd74430223919f29d49d7ae9710b48cf", "html_url": "https://github.com/rust-lang/rust/commit/4e76e884bd74430223919f29d49d7ae9710b48cf"}, {"sha": "19cce08662222f012a0f50ff73afd4fdd34ca683", "url": "https://api.github.com/repos/rust-lang/rust/commits/19cce08662222f012a0f50ff73afd4fdd34ca683", "html_url": "https://github.com/rust-lang/rust/commit/19cce08662222f012a0f50ff73afd4fdd34ca683"}], "stats": {"total": 680, "additions": 421, "deletions": 259}, "files": [{"sha": "efabcf2c5a1242c9f3a726b7cbea39811f3c35be", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -50,7 +50,6 @@ checksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n name = \"assists\"\n version = \"0.0.0\"\n dependencies = [\n- \"base_db\",\n  \"either\",\n  \"hir\",\n  \"ide_db\",\n@@ -127,20 +126,6 @@ version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n \n-[[package]]\n-name = \"call_info\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"base_db\",\n- \"either\",\n- \"expect-test\",\n- \"hir\",\n- \"ide_db\",\n- \"stdx\",\n- \"syntax\",\n- \"test_utils\",\n-]\n-\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.12.0\"\n@@ -268,9 +253,7 @@ dependencies = [\n name = \"completion\"\n version = \"0.0.0\"\n dependencies = [\n- \"assists\",\n  \"base_db\",\n- \"call_info\",\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\",\n@@ -655,8 +638,6 @@ name = \"ide\"\n version = \"0.0.0\"\n dependencies = [\n  \"assists\",\n- \"base_db\",\n- \"call_info\",\n  \"cfg\",\n  \"completion\",\n  \"either\",\n@@ -685,6 +666,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"base_db\",\n  \"either\",\n+ \"expect-test\",\n  \"fst\",\n  \"hir\",\n  \"log\",\n@@ -1356,7 +1338,6 @@ name = \"rust-analyzer\"\n version = \"0.0.0\"\n dependencies = [\n  \"anyhow\",\n- \"base_db\",\n  \"cfg\",\n  \"crossbeam-channel 0.5.0\",\n  \"env_logger\",\n@@ -1614,7 +1595,6 @@ dependencies = [\n name = \"ssr\"\n version = \"0.0.0\"\n dependencies = [\n- \"base_db\",\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\","}, {"sha": "108f656e920eecff2e6727066cd993579676fcd2", "filename": "crates/assists/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2FCargo.toml?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -18,7 +18,6 @@ stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n-base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }"}, {"sha": "d11fee196a374bbc541596d89d3c5062ddd7949f", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -3,8 +3,8 @@\n use std::mem;\n \n use algo::find_covering_element;\n-use base_db::{FileId, FileRange};\n use hir::Semantics;\n+use ide_db::base_db::{FileId, FileRange};\n use ide_db::{\n     label::Label,\n     source_change::{SourceChange, SourceFileEdit},"}, {"sha": "b82fb30ad47a023f1f949707223c7da3b6bee5e2", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,4 +1,5 @@\n use hir::HasSource;\n+use ide_db::traits::{get_missing_assoc_items, resolve_target_trait};\n use syntax::{\n     ast::{\n         self,\n@@ -11,7 +12,7 @@ use syntax::{\n use crate::{\n     assist_context::{AssistContext, Assists},\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n-    utils::{get_missing_assoc_items, render_snippet, resolve_target_trait, Cursor},\n+    utils::{render_snippet, Cursor},\n     AssistId, AssistKind,\n };\n "}, {"sha": "48433feb9e98cfb07daf6c0c6cd7b90a63d9bc46", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,5 +1,5 @@\n-use base_db::FileId;\n use hir::{EnumVariant, Module, ModuleDef, Name};\n+use ide_db::base_db::FileId;\n use ide_db::{defs::Definition, search::Reference, RootDatabase};\n use itertools::Itertools;\n use rustc_hash::FxHashSet;"}, {"sha": "c867207877bc0a396ab2a96f0ab615a4b567db9b", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,5 +1,5 @@\n-use base_db::FileId;\n use hir::{db::HirDatabase, HasSource, HasVisibility, PathResolution};\n+use ide_db::base_db::FileId;\n use syntax::{\n     ast::{self, VisibilityOwner},\n     AstNode, TextRange, TextSize,"}, {"sha": "758188a42956aa7133706a7e84f893156699b6df", "filename": "crates/assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,5 +1,5 @@\n-use base_db::FileId;\n use hir::HirDisplay;\n+use ide_db::base_db::FileId;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     ast::{"}, {"sha": "9a49c48c1fae967710c9100e38aa28ec281a471e", "filename": "crates/assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -7,10 +7,8 @@ use syntax::{\n     AstNode,\n };\n \n-use crate::{\n-    utils::{unwrap_trivial_block, TryEnum},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n+use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, Assists};\n+use ide_db::ty_filter::TryEnum;\n \n // Assist: replace_if_let_with_match\n //"}, {"sha": "a5bcbda24e1d1aab64ebae8cc4ee2ec06a191041", "filename": "crates/assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -9,7 +9,8 @@ use syntax::{\n     AstNode, T,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use ide_db::ty_filter::TryEnum;\n \n // Assist: replace_let_with_if_let\n //"}, {"sha": "f547066f0da9bc5ade3a2390ef79dc861ed501ba", "filename": "crates/assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -10,9 +10,10 @@ use syntax::{\n };\n \n use crate::{\n-    utils::{render_snippet, Cursor, TryEnum},\n+    utils::{render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n+use ide_db::ty_filter::TryEnum;\n \n // Assist: replace_unwrap_with_match\n //"}, {"sha": "70a651e10f62754e862e5430082f7cbf1774cd26", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -17,8 +17,8 @@ mod tests;\n pub mod utils;\n pub mod ast_transform;\n \n-use base_db::FileRange;\n use hir::Semantics;\n+use ide_db::base_db::FileRange;\n use ide_db::{label::Label, source_change::SourceChange, RootDatabase};\n use syntax::TextRange;\n "}, {"sha": "849d85e7631e6c9fba69d877ca96355770943b4b", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,7 +1,7 @@\n mod generated;\n \n-use base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n use hir::Semantics;\n+use ide_db::base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset, extract_range};"}, {"sha": "56f925ee699837d928fa2067ccd5a2df692c1cae", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 3, "deletions": 118, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -2,14 +2,13 @@\n pub(crate) mod insert_use;\n pub(crate) mod import_assets;\n \n-use std::{iter, ops};\n+use std::ops;\n \n-use hir::{Adt, Crate, Enum, Module, ScopeDef, Semantics, Trait, Type};\n+use hir::{Crate, Enum, Module, ScopeDef, Semantics, Trait};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n use syntax::{\n-    ast::{self, make, ArgListOwner, NameOwner},\n+    ast::{self, make, ArgListOwner},\n     AstNode, Direction,\n     SyntaxKind::*,\n     SyntaxNode, TextSize, T,\n@@ -115,72 +114,6 @@ pub(crate) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor\n     }\n }\n \n-pub fn get_missing_assoc_items(\n-    sema: &Semantics<RootDatabase>,\n-    impl_def: &ast::Impl,\n-) -> Vec<hir::AssocItem> {\n-    // Names must be unique between constants and functions. However, type aliases\n-    // may share the same name as a function or constant.\n-    let mut impl_fns_consts = FxHashSet::default();\n-    let mut impl_type = FxHashSet::default();\n-\n-    if let Some(item_list) = impl_def.assoc_item_list() {\n-        for item in item_list.assoc_items() {\n-            match item {\n-                ast::AssocItem::Fn(f) => {\n-                    if let Some(n) = f.name() {\n-                        impl_fns_consts.insert(n.syntax().to_string());\n-                    }\n-                }\n-\n-                ast::AssocItem::TypeAlias(t) => {\n-                    if let Some(n) = t.name() {\n-                        impl_type.insert(n.syntax().to_string());\n-                    }\n-                }\n-\n-                ast::AssocItem::Const(c) => {\n-                    if let Some(n) = c.name() {\n-                        impl_fns_consts.insert(n.syntax().to_string());\n-                    }\n-                }\n-                ast::AssocItem::MacroCall(_) => (),\n-            }\n-        }\n-    }\n-\n-    resolve_target_trait(sema, impl_def).map_or(vec![], |target_trait| {\n-        target_trait\n-            .items(sema.db)\n-            .iter()\n-            .filter(|i| match i {\n-                hir::AssocItem::Function(f) => {\n-                    !impl_fns_consts.contains(&f.name(sema.db).to_string())\n-                }\n-                hir::AssocItem::TypeAlias(t) => !impl_type.contains(&t.name(sema.db).to_string()),\n-                hir::AssocItem::Const(c) => c\n-                    .name(sema.db)\n-                    .map(|n| !impl_fns_consts.contains(&n.to_string()))\n-                    .unwrap_or_default(),\n-            })\n-            .cloned()\n-            .collect()\n-    })\n-}\n-\n-pub(crate) fn resolve_target_trait(\n-    sema: &Semantics<RootDatabase>,\n-    impl_def: &ast::Impl,\n-) -> Option<hir::Trait> {\n-    let ast_path =\n-        impl_def.trait_().map(|it| it.syntax().clone()).and_then(ast::PathType::cast)?.path()?;\n-\n-    match sema.resolve_path(&ast_path) {\n-        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def),\n-        _ => None,\n-    }\n-}\n-\n pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n     node.children_with_tokens()\n         .find(|it| !matches!(it.kind(), WHITESPACE | COMMENT | ATTR))\n@@ -223,54 +156,6 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n-#[derive(Clone, Copy)]\n-pub enum TryEnum {\n-    Result,\n-    Option,\n-}\n-\n-impl TryEnum {\n-    const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n-\n-    pub fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n-        let enum_ = match ty.as_adt() {\n-            Some(Adt::Enum(it)) => it,\n-            _ => return None,\n-        };\n-        TryEnum::ALL.iter().find_map(|&var| {\n-            if &enum_.name(sema.db).to_string() == var.type_name() {\n-                return Some(var);\n-            }\n-            None\n-        })\n-    }\n-\n-    pub(crate) fn happy_case(self) -> &'static str {\n-        match self {\n-            TryEnum::Result => \"Ok\",\n-            TryEnum::Option => \"Some\",\n-        }\n-    }\n-\n-    pub(crate) fn sad_pattern(self) -> ast::Pat {\n-        match self {\n-            TryEnum::Result => make::tuple_struct_pat(\n-                make::path_unqualified(make::path_segment(make::name_ref(\"Err\"))),\n-                iter::once(make::wildcard_pat().into()),\n-            )\n-            .into(),\n-            TryEnum::Option => make::ident_pat(make::name(\"None\")).into(),\n-        }\n-    }\n-\n-    fn type_name(self) -> &'static str {\n-        match self {\n-            TryEnum::Result => \"Result\",\n-            TryEnum::Option => \"Option\",\n-        }\n-    }\n-}\n-\n /// Helps with finding well-know things inside the standard library. This is\n /// somewhat similar to the known paths infra inside hir, but it different; We\n /// want to make sure that IDE specific paths don't become interesting inside"}, {"sha": "98c0bd6dbe55e65a3745ffc29e402cff37afcbba", "filename": "crates/call_info/Cargo.toml", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11e18c31df19d05438a373c26ad6cda487955b4d/crates%2Fcall_info%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11e18c31df19d05438a373c26ad6cda487955b4d/crates%2Fcall_info%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcall_info%2FCargo.toml?ref=11e18c31df19d05438a373c26ad6cda487955b4d", "patch": "@@ -1,26 +0,0 @@\n-[package]\n-name = \"call_info\"\n-version = \"0.0.0\"\n-description = \"TBD\"\n-license = \"MIT OR Apache-2.0\"\n-authors = [\"rust-analyzer developers\"]\n-edition = \"2018\"\n-\n-[lib]\n-doctest = false\n-\n-[dependencies]\n-either = \"1.5.3\"\n-\n-stdx = { path = \"../stdx\", version = \"0.0.0\" }\n-syntax = { path = \"../syntax\", version = \"0.0.0\" }\n-base_db = { path = \"../base_db\", version = \"0.0.0\" }\n-ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n-test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n-\n-# call_info crate should depend only on the top-level `hir` package. if you need\n-# something from some `hir_xxx` subpackage, reexport the API via `hir`.\n-hir = { path = \"../hir\", version = \"0.0.0\" }\n-\n-[dev-dependencies]\n-expect-test = \"1.0\""}, {"sha": "b79ee33f73aeb855598ac454be916be8ba874032", "filename": "crates/completion/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -21,8 +21,6 @@ base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n-assists = { path = \"../assists\", version = \"0.0.0\" }\n-call_info = { path = \"../call_info\", version = \"0.0.0\" }\n \n # completions crate should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "385911afadc2758c40caa805c54a556b9dea3d81", "filename": "crates/completion/src/complete_mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_mod.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,7 +1,7 @@\n //! Completes mod declarations.\n \n-use base_db::{SourceDatabaseExt, VfsPath};\n use hir::{Module, ModuleSource};\n+use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n use ide_db::RootDatabase;\n use rustc_hash::FxHashSet;\n "}, {"sha": "2622f12ab13b0e97750c7a235068ea5e8e6a852f", "filename": "crates/completion/src/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -2,7 +2,7 @@\n \n mod format_like;\n \n-use assists::utils::TryEnum;\n+use ide_db::ty_filter::TryEnum;\n use syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange, TextSize,"}, {"sha": "a14be9c73b21f02e161645347f6e60f02af1660e", "filename": "crates/completion/src/complete_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_trait_impl.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -31,8 +31,8 @@\n //! }\n //! ```\n \n-use assists::utils::get_missing_assoc_items;\n use hir::{self, HasAttrs, HasSource};\n+use ide_db::traits::get_missing_assoc_items;\n use syntax::{\n     ast::{self, edit, Impl},\n     display::function_declaration,"}, {"sha": "dca304a8f50ce722b121605e9d6486c9f9f09fee", "filename": "crates/completion/src/completion_context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletion_context.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,9 +1,8 @@\n //! See `CompletionContext` structure.\n \n-use base_db::{FilePosition, SourceDatabase};\n-use call_info::ActiveParameter;\n use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n-use ide_db::RootDatabase;\n+use ide_db::base_db::{FilePosition, SourceDatabase};\n+use ide_db::{call_info::ActiveParameter, RootDatabase};\n use syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n     ast, match_ast, AstNode, NodeOrToken,"}, {"sha": "b72fd249dcfe83824ee938c6f9fff9c6d837e3d6", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -23,7 +23,7 @@ mod complete_macro_in_item_position;\n mod complete_trait_impl;\n mod complete_mod;\n \n-use base_db::FilePosition;\n+use ide_db::base_db::FilePosition;\n use ide_db::RootDatabase;\n \n use crate::{"}, {"sha": "b02556797d9c13775f41aba6161e6862b043b166", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,7 +1,7 @@\n //! Runs completion for testing purposes.\n \n-use base_db::{fixture::ChangeFixture, FileLoader, FilePosition};\n use hir::Semantics;\n+use ide_db::base_db::{fixture::ChangeFixture, FileLoader, FilePosition};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use stdx::{format_to, trim_indent};"}, {"sha": "4d483580df378829f11059dc686956d334cd1da7", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -23,14 +23,12 @@ url = \"2.1.1\"\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n-base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n assists = { path = \"../assists\", version = \"0.0.0\" }\n ssr = { path = \"../ssr\", version = \"0.0.0\" }\n-call_info = { path = \"../call_info\", version = \"0.0.0\" }\n completion = { path = \"../completion\", version = \"0.0.0\" }\n \n # ide should depend only on the top-level `hir` package. if you need"}, {"sha": "8ad50a2ee5ed91657d145dea80d66125a6a5562f", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -2,8 +2,8 @@\n \n use indexmap::IndexMap;\n \n-use call_info::FnCallNode;\n use hir::Semantics;\n+use ide_db::call_info::FnCallNode;\n use ide_db::RootDatabase;\n use syntax::{ast, match_ast, AstNode, TextRange};\n \n@@ -137,7 +137,7 @@ impl CallLocations {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::FilePosition;\n+    use ide_db::base_db::FilePosition;\n \n     use crate::fixture;\n "}, {"sha": "d0ee58858943d903b390c1981c103125982a04db", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -9,11 +9,11 @@ mod field_shorthand;\n \n use std::cell::RefCell;\n \n-use base_db::SourceDatabase;\n use hir::{\n     diagnostics::{Diagnostic as _, DiagnosticSinkBuilder},\n     Semantics,\n };\n+use ide_db::base_db::SourceDatabase;\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use rustc_hash::FxHashSet;"}, {"sha": "f41bcd61919f0d2ad600e5fc758bd9f219beb3f7", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,7 +1,7 @@\n //! Suggests shortening `Foo { field: field }` to `Foo { field }` in both\n //! expressions and patterns.\n \n-use base_db::FileId;\n+use ide_db::base_db::FileId;\n use ide_db::source_change::SourceFileEdit;\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;"}, {"sha": "0c950003e14f8a3b584ec41028fbbf616cbf888a", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,6 +1,5 @@\n //! Provides a way to attach fixes to the diagnostics.\n //! The same module also has all curret custom fixes for the diagnostics implemented.\n-use base_db::FileId;\n use hir::{\n     db::AstDatabase,\n     diagnostics::{\n@@ -9,6 +8,7 @@ use hir::{\n     },\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n+use ide_db::base_db::FileId;\n use ide_db::{\n     source_change::{FileSystemEdit, SourceFileEdit},\n     RootDatabase,"}, {"sha": "0c429a2629a00ee0a80005c4d5034462b8a73384", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,8 +1,8 @@\n //! FIXME: write short doc here\n \n-use base_db::{FileId, SourceDatabase};\n use either::Either;\n use hir::{original_range, AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n+use ide_db::base_db::{FileId, SourceDatabase};\n use ide_db::{defs::Definition, RootDatabase};\n use syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},"}, {"sha": "eb57f9224d5f51191f7da110b0ce7f88d53a4bff", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,5 +1,5 @@\n //! Utilities for creating `Analysis` instances for tests.\n-use base_db::fixture::ChangeFixture;\n+use ide_db::base_db::fixture::ChangeFixture;\n use test_utils::{extract_annotations, RangeOrOffset};\n \n use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};"}, {"sha": "15792f94725ccc9edc8055b6fc11e74fff366990", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn reference_definition(\n \n #[cfg(test)]\n mod tests {\n-    use base_db::FileRange;\n+    use ide_db::base_db::FileRange;\n     use syntax::{TextRange, TextSize};\n \n     use crate::fixture;"}, {"sha": "529004878d3241ba959c37e82f68aa89b0fe071b", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -74,7 +74,7 @@ fn impls_for_trait(\n \n #[cfg(test)]\n mod tests {\n-    use base_db::FileRange;\n+    use ide_db::base_db::FileRange;\n \n     use crate::fixture;\n "}, {"sha": "aba6bf5dc2620cdd1fa47ab9e505e7787e94397d", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -54,7 +54,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::FileRange;\n+    use ide_db::base_db::FileRange;\n \n     use crate::fixture;\n "}, {"sha": "8321928817dbfd2888be80d13bba6337a6b5223f", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,8 +1,8 @@\n-use base_db::SourceDatabase;\n use hir::{\n     Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n     Module, ModuleDef, ModuleSource, Semantics,\n };\n+use ide_db::base_db::SourceDatabase;\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -385,8 +385,8 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::FileLoader;\n     use expect_test::{expect, Expect};\n+    use ide_db::base_db::FileLoader;\n \n     use crate::fixture;\n \n@@ -637,6 +637,33 @@ fn main() { }\n         );\n     }\n \n+    #[test]\n+    fn hover_shows_fn_doc_attr_raw_string() {\n+        check(\n+            r##\"\n+#[doc = r#\"Raw string doc attr\"#]\n+pub fn foo<|>(_: &Path) {}\n+\n+fn main() { }\n+\"##,\n+            expect![[r##\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub fn foo(_: &Path)\n+                ```\n+\n+                ---\n+\n+                Raw string doc attr\n+            \"##]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_shows_struct_field_info() {\n         // Hovering over the field when instantiating"}, {"sha": "4bc733b70e94b68663e01b2cc14be0a457815a21", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -48,11 +48,11 @@ mod doc_links;\n \n use std::sync::Arc;\n \n-use base_db::{\n+use cfg::CfgOptions;\n+use ide_db::base_db::{\n     salsa::{self, ParallelDatabase},\n     CheckCanceled, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n };\n-use cfg::CfgOptions;\n use ide_db::{\n     symbol_index::{self, FileSymbol},\n     LineIndexDatabase,\n@@ -80,19 +80,19 @@ pub use crate::{\n         Highlight, HighlightModifier, HighlightModifiers, HighlightTag, HighlightedRange,\n     },\n };\n-pub use call_info::CallInfo;\n pub use completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n };\n+pub use ide_db::call_info::CallInfo;\n \n pub use assists::{\n     utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,\n };\n-pub use base_db::{\n+pub use hir::{Documentation, Semantics};\n+pub use ide_db::base_db::{\n     Canceled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n     SourceRootId,\n };\n-pub use hir::{Documentation, Semantics};\n pub use ide_db::{\n     label::Label,\n     line_index::{LineCol, LineIndex},\n@@ -396,7 +396,7 @@ impl Analysis {\n \n     /// Computes parameter information for the given call expression.\n     pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n-        self.with_db(|db| call_info::call_info(db, position))\n+        self.with_db(|db| ide_db::call_info::call_info(db, position))\n     }\n \n     /// Computes call hierarchy candidates for the given file position."}, {"sha": "6cc3b2991cdedc70d573e0e8327d8d270ed4e4c1", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,5 +1,5 @@\n-use base_db::{CrateId, FileId, FilePosition};\n use hir::Semantics;\n+use ide_db::base_db::{CrateId, FileId, FilePosition};\n use ide_db::RootDatabase;\n use syntax::{\n     algo::find_node_at_offset,"}, {"sha": "ea0acfaa0204e620ac339ce6ec60bbaf77b125a5", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -3,8 +3,8 @@\n //! request takes longer to compute. This modules implemented prepopulating of\n //! various caches, it's not really advanced at the moment.\n \n-use base_db::SourceDatabase;\n use hir::db::DefDatabase;\n+use ide_db::base_db::SourceDatabase;\n \n use crate::RootDatabase;\n "}, {"sha": "a517081d520323896a9ee18dbecbdf8476274890", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -191,8 +191,8 @@ fn get_struct_def_name_for_struct_literal_search(\n \n #[cfg(test)]\n mod tests {\n-    use base_db::FileId;\n     use expect_test::{expect, Expect};\n+    use ide_db::base_db::FileId;\n     use stdx::format_to;\n \n     use crate::{fixture, SearchScope};"}, {"sha": "26ac2371a5270ed4c86dfc2d3480acf8cd35eb30", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n-use base_db::SourceDatabaseExt;\n use hir::{Module, ModuleDef, ModuleSource, Semantics};\n+use ide_db::base_db::SourceDatabaseExt;\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,"}, {"sha": "8e91c99d72b38f4a6eed3aa6c3a4a52e67233623", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,10 +1,10 @@\n use std::{fmt, iter::FromIterator, sync::Arc};\n \n-use base_db::{\n+use hir::MacroFile;\n+use ide_db::base_db::{\n     salsa::debug::{DebugQueryTable, TableEntry},\n     CrateId, FileId, FileTextQuery, SourceDatabase, SourceRootId,\n };\n-use hir::MacroFile;\n use ide_db::{\n     symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n     RootDatabase,\n@@ -16,7 +16,7 @@ use stdx::format_to;\n use syntax::{ast, Parse, SyntaxNode};\n \n fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n-    base_db::ParseQuery.in_db(db).entries::<SyntaxTreeStats>()\n+    ide_db::base_db::ParseQuery.in_db(db).entries::<SyntaxTreeStats>()\n }\n fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n     hir::db::ParseMacroQuery.in_db(db).entries::<SyntaxTreeStats>()"}, {"sha": "abcc5cccc7577ed085db01d987598ba4e480bb37", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,6 +1,6 @@\n //! Renders a bit of code as HTML.\n \n-use base_db::SourceDatabase;\n+use ide_db::base_db::SourceDatabase;\n use oorandom::Rand32;\n use stdx::format_to;\n use syntax::{AstNode, TextRange, TextSize};"}, {"sha": "59a74bc02e5f2cb5683a988156ee47e1aeb322ac", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -3,8 +3,8 @@\n use std::{collections::BTreeMap, convert::TryFrom};\n \n use ast::{HasQuotes, HasStringValue};\n-use call_info::ActiveParameter;\n use hir::Semantics;\n+use ide_db::call_info::ActiveParameter;\n use itertools::Itertools;\n use syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n "}, {"sha": "7941610d6b04e9558af6f4e05f37eb0a629fd46e", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,4 +1,4 @@\n-use base_db::{FileId, SourceDatabase};\n+use ide_db::base_db::{FileId, SourceDatabase};\n use ide_db::RootDatabase;\n use syntax::{\n     algo, AstNode, NodeOrToken, SourceFile,"}, {"sha": "43458a3a2c10e9f9776ceeb193e70e025ff0b3c0", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -15,7 +15,7 @@\n \n mod on_enter;\n \n-use base_db::{FilePosition, SourceDatabase};\n+use ide_db::base_db::{FilePosition, SourceDatabase};\n use ide_db::{source_change::SourceFileEdit, RootDatabase};\n use syntax::{\n     algo::find_node_at_offset,"}, {"sha": "f4ea30352620fe6294b5c4df3de95c09827af80c", "filename": "crates/ide/src/typing/on_enter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,7 +1,7 @@\n //! Handles the `Enter` key press. At the momently, this only continues\n //! comments, but should handle indent some time in the future as well.\n \n-use base_db::{FilePosition, SourceDatabase};\n+use ide_db::base_db::{FilePosition, SourceDatabase};\n use ide_db::RootDatabase;\n use syntax::{\n     ast::{self, AstToken},"}, {"sha": "72a9212f1f72f7b86328821166c012784358e140", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -29,3 +29,6 @@ test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n hir = { path = \"../hir\", version = \"0.0.0\" }\n+\n+[dev-dependencies]\n+expect-test = \"1.0\""}, {"sha": "83a602b9ad4d51a4ef16ad8c113b7d00d463222d", "filename": "crates/ide_db/src/call_info.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -2,14 +2,15 @@\n use base_db::FilePosition;\n use either::Either;\n use hir::{HasAttrs, HirDisplay, Semantics, Type};\n-use ide_db::RootDatabase;\n use stdx::format_to;\n use syntax::{\n     ast::{self, ArgListOwner},\n     match_ast, AstNode, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n use test_utils::mark;\n \n+use crate::RootDatabase;\n+\n /// Contains information about a call site. Specifically the\n /// `FunctionSignature`and current parameter.\n #[derive(Debug)]\n@@ -228,9 +229,9 @@ impl FnCallNode {\n \n #[cfg(test)]\n mod tests {\n+    use crate::RootDatabase;\n     use base_db::{fixture::ChangeFixture, FilePosition};\n     use expect_test::{expect, Expect};\n-    use ide_db::RootDatabase;\n     use test_utils::{mark, RangeOrOffset};\n \n     /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n@@ -249,7 +250,7 @@ mod tests {\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let (db, position) = position(ra_fixture);\n-        let call_info = crate::call_info(&db, position);\n+        let call_info = crate::call_info::call_info(&db, position);\n         let actual = match call_info {\n             Some(call_info) => {\n                 let docs = match &call_info.doc {", "previous_filename": "crates/call_info/src/lib.rs"}, {"sha": "38ebdbf7917d2abc16cf78bf9abef75b911d7325", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -10,6 +10,9 @@ pub mod defs;\n pub mod search;\n pub mod imports_locator;\n pub mod source_change;\n+pub mod ty_filter;\n+pub mod traits;\n+pub mod call_info;\n \n use std::{fmt, sync::Arc};\n \n@@ -23,6 +26,9 @@ use rustc_hash::FxHashSet;\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n \n+/// `base_db` is normally also needed in places where `ide_db` is used, so this re-export is for convenience.\n+pub use base_db;\n+\n #[salsa::database(\n     base_db::SourceDatabaseStorage,\n     base_db::SourceDatabaseExtStorage,"}, {"sha": "f57b6dd91ecff5069642d0a4cd0e46b75a15d889", "filename": "crates/ide_db/src/traits.rs", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -0,0 +1,227 @@\n+//! Functionality for obtaining data related to traits from the DB.\n+\n+use crate::RootDatabase;\n+use hir::Semantics;\n+use rustc_hash::FxHashSet;\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstNode,\n+};\n+\n+/// Given the `impl` block, attempts to find the trait this `impl` corresponds to.\n+pub fn resolve_target_trait(\n+    sema: &Semantics<RootDatabase>,\n+    impl_def: &ast::Impl,\n+) -> Option<hir::Trait> {\n+    let ast_path =\n+        impl_def.trait_().map(|it| it.syntax().clone()).and_then(ast::PathType::cast)?.path()?;\n+\n+    match sema.resolve_path(&ast_path) {\n+        Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def),\n+        _ => None,\n+    }\n+}\n+\n+/// Given the `impl` block, returns the list of associated items (e.g. functions or types) that are\n+/// missing in this `impl` block.\n+pub fn get_missing_assoc_items(\n+    sema: &Semantics<RootDatabase>,\n+    impl_def: &ast::Impl,\n+) -> Vec<hir::AssocItem> {\n+    // Names must be unique between constants and functions. However, type aliases\n+    // may share the same name as a function or constant.\n+    let mut impl_fns_consts = FxHashSet::default();\n+    let mut impl_type = FxHashSet::default();\n+\n+    if let Some(item_list) = impl_def.assoc_item_list() {\n+        for item in item_list.assoc_items() {\n+            match item {\n+                ast::AssocItem::Fn(f) => {\n+                    if let Some(n) = f.name() {\n+                        impl_fns_consts.insert(n.syntax().to_string());\n+                    }\n+                }\n+\n+                ast::AssocItem::TypeAlias(t) => {\n+                    if let Some(n) = t.name() {\n+                        impl_type.insert(n.syntax().to_string());\n+                    }\n+                }\n+\n+                ast::AssocItem::Const(c) => {\n+                    if let Some(n) = c.name() {\n+                        impl_fns_consts.insert(n.syntax().to_string());\n+                    }\n+                }\n+                ast::AssocItem::MacroCall(_) => (),\n+            }\n+        }\n+    }\n+\n+    resolve_target_trait(sema, impl_def).map_or(vec![], |target_trait| {\n+        target_trait\n+            .items(sema.db)\n+            .iter()\n+            .filter(|i| match i {\n+                hir::AssocItem::Function(f) => {\n+                    !impl_fns_consts.contains(&f.name(sema.db).to_string())\n+                }\n+                hir::AssocItem::TypeAlias(t) => !impl_type.contains(&t.name(sema.db).to_string()),\n+                hir::AssocItem::Const(c) => c\n+                    .name(sema.db)\n+                    .map(|n| !impl_fns_consts.contains(&n.to_string()))\n+                    .unwrap_or_default(),\n+            })\n+            .cloned()\n+            .collect()\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::RootDatabase;\n+    use base_db::{fixture::ChangeFixture, FilePosition};\n+    use expect_test::{expect, Expect};\n+    use hir::Semantics;\n+    use syntax::ast::{self, AstNode};\n+    use test_utils::RangeOrOffset;\n+\n+    /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+    pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n+        let change_fixture = ChangeFixture::parse(ra_fixture);\n+        let mut database = RootDatabase::default();\n+        database.apply_change(change_fixture.change);\n+        let (file_id, range_or_offset) =\n+            change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+        let offset = match range_or_offset {\n+            RangeOrOffset::Range(_) => panic!(),\n+            RangeOrOffset::Offset(it) => it,\n+        };\n+        (database, FilePosition { file_id, offset })\n+    }\n+\n+    fn check_trait(ra_fixture: &str, expect: Expect) {\n+        let (db, position) = position(ra_fixture);\n+        let sema = Semantics::new(&db);\n+        let file = sema.parse(position.file_id);\n+        let impl_block: ast::Impl =\n+            sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n+        let trait_ = crate::traits::resolve_target_trait(&sema, &impl_block);\n+        let actual = match trait_ {\n+            Some(trait_) => trait_.name(&db).to_string(),\n+            None => String::new(),\n+        };\n+        expect.assert_eq(&actual);\n+    }\n+\n+    fn check_missing_assoc(ra_fixture: &str, expect: Expect) {\n+        let (db, position) = position(ra_fixture);\n+        let sema = Semantics::new(&db);\n+        let file = sema.parse(position.file_id);\n+        let impl_block: ast::Impl =\n+            sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n+        let items = crate::traits::get_missing_assoc_items(&sema, &impl_block);\n+        let actual = items\n+            .into_iter()\n+            .map(|item| item.name(&db).unwrap().to_string())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn resolve_trait() {\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    <|>\n+}\n+            \"#,\n+            expect![[\"Foo\"]],\n+        );\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    fn bar() {\n+        fn baz() {\n+            <|>\n+        }\n+        baz();\n+    }\n+}\n+            \"#,\n+            expect![[\"Foo\"]],\n+        );\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+pub struct Bar;\n+impl Bar {\n+    <|>\n+}\n+            \"#,\n+            expect![[\"\"]],\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_assoc_items() {\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    <|>\n+}\"#,\n+            expect![[r#\"\n+                FOO\n+                bar\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    const FOO: u8 = 10;\n+    <|>\n+}\"#,\n+            expect![[r#\"\n+                bar\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    const FOO: u8 = 10;\n+    fn bar() {<|>}\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub struct Foo;\n+impl Foo {\n+    fn bar() {<|>}\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+}"}, {"sha": "63a94528259b9a7f6ac858718c4c7e9e53390450", "filename": "crates/ide_db/src/ty_filter.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -0,0 +1,58 @@\n+//! This module contains structures for filtering the expected types.\n+//! Use case for structures in this module is, for example, situation when you need to process\n+//! only certain `Enum`s.\n+\n+use crate::RootDatabase;\n+use hir::{Adt, Semantics, Type};\n+use std::iter;\n+use syntax::ast::{self, make};\n+\n+/// Enum types that implement `std::ops::Try` trait.\n+#[derive(Clone, Copy)]\n+pub enum TryEnum {\n+    Result,\n+    Option,\n+}\n+\n+impl TryEnum {\n+    const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n+\n+    /// Returns `Some(..)` if the provided type is an enum that implements `std::ops::Try`.\n+    pub fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n+        let enum_ = match ty.as_adt() {\n+            Some(Adt::Enum(it)) => it,\n+            _ => return None,\n+        };\n+        TryEnum::ALL.iter().find_map(|&var| {\n+            if &enum_.name(sema.db).to_string() == var.type_name() {\n+                return Some(var);\n+            }\n+            None\n+        })\n+    }\n+\n+    pub fn happy_case(self) -> &'static str {\n+        match self {\n+            TryEnum::Result => \"Ok\",\n+            TryEnum::Option => \"Some\",\n+        }\n+    }\n+\n+    pub fn sad_pattern(self) -> ast::Pat {\n+        match self {\n+            TryEnum::Result => make::tuple_struct_pat(\n+                make::path_unqualified(make::path_segment(make::name_ref(\"Err\"))),\n+                iter::once(make::wildcard_pat().into()),\n+            )\n+            .into(),\n+            TryEnum::Option => make::ident_pat(make::name(\"None\")).into(),\n+        }\n+    }\n+\n+    fn type_name(self) -> &'static str {\n+        match self {\n+            TryEnum::Result => \"Result\",\n+            TryEnum::Option => \"Option\",\n+        }\n+    }\n+}"}, {"sha": "2f0fa97262d1c856cf703c4b286fad4cd8847696", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -46,7 +46,6 @@ cfg = { path = \"../cfg\", version = \"0.0.0\" }\n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n \n # This should only be used in CLI\n-base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n ssr = { path = \"../ssr\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }"}, {"sha": "8e33986d52f9fe14da4700802459409857ae05d1", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -3,13 +3,13 @@\n use std::{env, path::PathBuf, str::FromStr, sync::Arc, time::Instant};\n \n use anyhow::{bail, format_err, Result};\n-use base_db::{\n-    salsa::{Database, Durability},\n-    FileId,\n-};\n use ide::{\n     Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineCol,\n };\n+use ide_db::base_db::{\n+    salsa::{Database, Durability},\n+    FileId,\n+};\n use vfs::AbsPathBuf;\n \n use crate::{"}, {"sha": "98ef0cd68aa8a33f7980ab7a5c3546fd8cb62f2d", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -6,16 +6,16 @@ use std::{\n     time::{SystemTime, UNIX_EPOCH},\n };\n \n-use base_db::{\n-    salsa::{self, ParallelDatabase},\n-    SourceDatabaseExt,\n-};\n use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     original_range, AssocItem, Crate, HasSource, HirDisplay, ModuleDef,\n };\n use hir_def::FunctionId;\n use hir_ty::{Ty, TypeWalk};\n+use ide_db::base_db::{\n+    salsa::{self, ParallelDatabase},\n+    SourceDatabaseExt,\n+};\n use itertools::Itertools;\n use oorandom::Rand32;\n use rayon::prelude::*;"}, {"sha": "368f627ac4f4f3eeb53e0fe92d26ef10ce365fa9", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -6,9 +6,9 @@ use std::path::Path;\n use anyhow::anyhow;\n use rustc_hash::FxHashSet;\n \n-use base_db::SourceDatabaseExt;\n use hir::Crate;\n use ide::{DiagnosticsConfig, Severity};\n+use ide_db::base_db::SourceDatabaseExt;\n \n use crate::cli::{load_cargo::load_cargo, Result};\n "}, {"sha": "ab1e2ab92d060cb3bf1175566098a1707a4274c0", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -3,9 +3,9 @@\n use std::{path::Path, sync::Arc};\n \n use anyhow::Result;\n-use base_db::CrateGraph;\n use crossbeam_channel::{unbounded, Receiver};\n use ide::{AnalysisHost, Change};\n+use ide_db::base_db::CrateGraph;\n use project_model::{CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n "}, {"sha": "a06631dacabe8c107b56dab0b657d790af760492", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -4,7 +4,7 @@ use crate::cli::{load_cargo::load_cargo, Result};\n use ssr::{MatchFinder, SsrPattern, SsrRule};\n \n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n-    use base_db::SourceDatabaseExt;\n+    use ide_db::base_db::SourceDatabaseExt;\n     let (host, vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n@@ -26,7 +26,7 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n /// `debug_snippet`. This is intended for debugging and probably isn't in it's current form useful\n /// for much else.\n pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<String>) -> Result<()> {\n-    use base_db::SourceDatabaseExt;\n+    use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n     let (host, _vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n     let db = host.raw_database();"}, {"sha": "aa6b808d6ecfb94a7b8dd12ed21efdbdfd976351", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,8 +1,8 @@\n //! Conversion lsp_types types to rust-analyzer specific ones.\n use std::convert::TryFrom;\n \n-use base_db::{FileId, FilePosition, FileRange};\n use ide::{AssistKind, LineCol, LineIndex};\n+use ide_db::base_db::{FileId, FilePosition, FileRange};\n use syntax::{TextRange, TextSize};\n use vfs::AbsPathBuf;\n "}, {"sha": "673a2eebc98f86aa61b414dbd01060dae419ba97", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -5,10 +5,10 @@\n \n use std::{sync::Arc, time::Instant};\n \n-use base_db::{CrateId, VfsPath};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n use ide::{Analysis, AnalysisHost, Change, FileId};\n+use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};"}, {"sha": "1d271a9d8b11405212094e4274f8b1df6968eff9", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,8 +1,8 @@\n //! Utilities for LSP-related boilerplate code.\n use std::{error::Error, ops::Range};\n \n-use base_db::Canceled;\n use ide::LineIndex;\n+use ide_db::base_db::Canceled;\n use lsp_server::Notification;\n \n use crate::{from_proto, global_state::GlobalState};"}, {"sha": "ed52927330439d5133d6168ad42464737b932dd0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -5,10 +5,10 @@ use std::{\n     time::{Duration, Instant},\n };\n \n-use base_db::VfsPath;\n use crossbeam_channel::{select, Receiver};\n use ide::PrimeCachesProgress;\n use ide::{Canceled, FileId};\n+use ide_db::base_db::VfsPath;\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n use project_model::ProjectWorkspace;"}, {"sha": "0eabd51bdbb2b5c73529eae027df7155851afd6a", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,9 +1,9 @@\n //! Project loading & configuration updates\n use std::{mem, sync::Arc};\n \n-use base_db::{CrateGraph, SourceRoot, VfsPath};\n use flycheck::{FlycheckConfig, FlycheckHandle};\n use ide::Change;\n+use ide_db::base_db::{CrateGraph, SourceRoot, VfsPath};\n use project_model::{ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n "}, {"sha": "24a658fc653d14d6f041b4d73fb9974be3748c9c", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -4,13 +4,13 @@ use std::{\n     sync::atomic::{AtomicU32, Ordering},\n };\n \n-use base_db::{FileId, FileRange};\n use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation,\n     FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n     Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget,\n     ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n+use ide_db::base_db::{FileId, FileRange};\n use itertools::Itertools;\n use syntax::{SyntaxKind, TextRange, TextSize};\n \n@@ -809,7 +809,7 @@ mod tests {\n         let completions: Vec<(String, Option<String>)> = analysis\n             .completions(\n                 &ide::CompletionConfig::default(),\n-                base_db::FilePosition { file_id, offset },\n+                ide_db::base_db::FilePosition { file_id, offset },\n             )\n             .unwrap()\n             .unwrap()"}, {"sha": "98ed25fb699f4272a127116e251fa6f565c976e4", "filename": "crates/ssr/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2FCargo.toml?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -16,7 +16,6 @@ itertools = \"0.9.0\"\n \n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n-base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }"}, {"sha": "747ce495d495632309faabf54b438c0994fb9c87", "filename": "crates/ssr/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Flib.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -73,8 +73,8 @@ use crate::errors::bail;\n pub use crate::errors::SsrError;\n pub use crate::matching::Match;\n use crate::matching::MatchFailureReason;\n-use base_db::{FileId, FilePosition, FileRange};\n use hir::Semantics;\n+use ide_db::base_db::{FileId, FilePosition, FileRange};\n use ide_db::source_change::SourceFileEdit;\n use resolving::ResolvedRule;\n use rustc_hash::FxHashMap;\n@@ -126,7 +126,7 @@ impl<'db> MatchFinder<'db> {\n \n     /// Constructs an instance using the start of the first file in `db` as the lookup context.\n     pub fn at_first_file(db: &'db ide_db::RootDatabase) -> Result<MatchFinder<'db>, SsrError> {\n-        use base_db::SourceDatabaseExt;\n+        use ide_db::base_db::SourceDatabaseExt;\n         use ide_db::symbol_index::SymbolsDatabase;\n         if let Some(first_file_id) = db\n             .local_roots()\n@@ -160,7 +160,7 @@ impl<'db> MatchFinder<'db> {\n \n     /// Finds matches for all added rules and returns edits for all found matches.\n     pub fn edits(&self) -> Vec<SourceFileEdit> {\n-        use base_db::SourceDatabaseExt;\n+        use ide_db::base_db::SourceDatabaseExt;\n         let mut matches_by_file = FxHashMap::default();\n         for m in self.matches().matches {\n             matches_by_file\n@@ -205,7 +205,7 @@ impl<'db> MatchFinder<'db> {\n     /// them, while recording reasons why they don't match. This API is useful for command\n     /// line-based debugging where providing a range is difficult.\n     pub fn debug_where_text_equal(&self, file_id: FileId, snippet: &str) -> Vec<MatchDebugInfo> {\n-        use base_db::SourceDatabaseExt;\n+        use ide_db::base_db::SourceDatabaseExt;\n         let file = self.sema.parse(file_id);\n         let mut res = Vec::new();\n         let file_text = self.sema.db.file_text(file_id);"}, {"sha": "99b187311a793936d1df3b1e9d08f2d05052de27", "filename": "crates/ssr/src/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -6,8 +6,8 @@ use crate::{\n     resolving::{ResolvedPattern, ResolvedRule, UfcsCallInfo},\n     SsrMatches,\n };\n-use base_db::FileRange;\n use hir::Semantics;\n+use ide_db::base_db::FileRange;\n use rustc_hash::FxHashMap;\n use std::{cell::Cell, iter::Peekable};\n use syntax::ast::{AstNode, AstToken};"}, {"sha": "f5ceb572928c51b77f87a4457d04a0cd1c5c8fcb", "filename": "crates/ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fresolving.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -2,7 +2,7 @@\n \n use crate::errors::error;\n use crate::{parsing, SsrError};\n-use base_db::FilePosition;\n+use ide_db::base_db::FilePosition;\n use parsing::Placeholder;\n use rustc_hash::FxHashMap;\n use syntax::{ast, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken};"}, {"sha": "44b5db029dcba84ccfa37adff562b527bf6be558", "filename": "crates/ssr/src/search.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fsearch.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -5,7 +5,7 @@ use crate::{\n     resolving::{ResolvedPath, ResolvedPattern, ResolvedRule},\n     Match, MatchFinder,\n };\n-use base_db::{FileId, FileRange};\n+use ide_db::base_db::{FileId, FileRange};\n use ide_db::{\n     defs::Definition,\n     search::{Reference, SearchScope},\n@@ -145,7 +145,7 @@ impl<'db> MatchFinder<'db> {\n     fn search_files_do(&self, mut callback: impl FnMut(FileId)) {\n         if self.restrict_ranges.is_empty() {\n             // Unrestricted search.\n-            use base_db::SourceDatabaseExt;\n+            use ide_db::base_db::SourceDatabaseExt;\n             use ide_db::symbol_index::SymbolsDatabase;\n             for &root in self.sema.db.local_roots().iter() {\n                 let sr = self.sema.db.source_root(root);"}, {"sha": "63131f6ca5a088a2c618139a90c6be34cd84474c", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -1,6 +1,6 @@\n use crate::{MatchFinder, SsrRule};\n-use base_db::{salsa::Durability, FileId, FilePosition, FileRange, SourceDatabaseExt};\n use expect_test::{expect, Expect};\n+use ide_db::base_db::{salsa::Durability, FileId, FilePosition, FileRange, SourceDatabaseExt};\n use rustc_hash::FxHashSet;\n use std::sync::Arc;\n use test_utils::{mark, RangeOrOffset};\n@@ -62,7 +62,7 @@ fn parser_undefined_placeholder_in_replacement() {\n /// `code` may optionally contain a cursor marker `<|>`. If it doesn't, then the position will be\n /// the start of the file. If there's a second cursor marker, then we'll return a single range.\n pub(crate) fn single_file(code: &str) -> (ide_db::RootDatabase, FilePosition, Vec<FileRange>) {\n-    use base_db::fixture::WithFixture;\n+    use ide_db::base_db::fixture::WithFixture;\n     use ide_db::symbol_index::SymbolsDatabase;\n     let (mut db, file_id, range_or_offset) = if code.contains(test_utils::CURSOR_MARKER) {\n         ide_db::RootDatabase::with_range_or_offset(code)\n@@ -83,7 +83,7 @@ pub(crate) fn single_file(code: &str) -> (ide_db::RootDatabase, FilePosition, Ve\n         }\n     }\n     let mut local_roots = FxHashSet::default();\n-    local_roots.insert(base_db::fixture::WORKSPACE);\n+    local_roots.insert(ide_db::base_db::fixture::WORKSPACE);\n     db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n     (db, position, selections)\n }"}, {"sha": "c5cd1c504da1eb87f02f68b83351fa68d837b0cd", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84e4958ee31c59e5b78f60059d69a73ef659bb/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=bf84e4958ee31c59e5b78f60059d69a73ef659bb", "patch": "@@ -7,7 +7,7 @@ use itertools::Itertools;\n use parser::SyntaxKind;\n \n use crate::{\n-    ast::{self, support, AstNode, NameOwner, SyntaxNode},\n+    ast::{self, support, token_ext::HasStringValue, AstNode, AstToken, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n@@ -53,8 +53,16 @@ impl ast::Attr {\n     pub fn as_simple_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n         let lit = self.literal()?;\n         let key = self.simple_name()?;\n-        // FIXME: escape? raw string?\n-        let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n+        let value_token = lit.syntax().first_token()?;\n+\n+        let value: SmolStr = if let Some(s) = ast::String::cast(value_token.clone()) {\n+            s.value()?.into()\n+        } else if let Some(s) = ast::RawString::cast(value_token) {\n+            s.value()?.into()\n+        } else {\n+            return None;\n+        };\n+\n         Some((key, value))\n     }\n "}]}