{"sha": "e22e8586877925c731e712f3116e53bdcccfffa7", "node_id": "C_kwDOAAsO6NoAKGUyMmU4NTg2ODc3OTI1YzczMWU3MTJmMzExNmU1M2JkY2NjZmZmYTc", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T17:27:09Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-08T18:14:01Z"}, "message": "Move more scrape-examples logic from JS to rust\n\nFix failing test\n\nAdd missing backslash\n\nFix padding issue with horizontal scrollbar", "tree": {"sha": "e057905ca960da50a1b36d75e5471332ee0c9907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e057905ca960da50a1b36d75e5471332ee0c9907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22e8586877925c731e712f3116e53bdcccfffa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22e8586877925c731e712f3116e53bdcccfffa7", "html_url": "https://github.com/rust-lang/rust/commit/e22e8586877925c731e712f3116e53bdcccfffa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22e8586877925c731e712f3116e53bdcccfffa7/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb383edb69e2aaa718dc94147275053005d112e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb383edb69e2aaa718dc94147275053005d112e3", "html_url": "https://github.com/rust-lang/rust/commit/bb383edb69e2aaa718dc94147275053005d112e3"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "bef99087a19d2acad3c68441f36000d3a78de829", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -691,7 +691,7 @@ fn string<T: Display>(\n                 // https://github.com/rust-lang/rust/blob/60f1a2fc4b535ead9c85ce085fdce49b1b097531/src/librustdoc/html/render/context.rs#L315-L338\n                 match href {\n                     LinkFromSrc::Local(span) => context\n-                        .href_from_span(*span)\n+                        .href_from_span(*span, true)\n                         .map(|s| format!(\"{}{}\", context_info.root_path, s)),\n                     LinkFromSrc::External(def_id) => {\n                         format::href_with_root_path(*def_id, context, Some(context_info.root_path))"}, {"sha": "323bae3c9c4b61284cecf8bbe3e9cfb00782ec74", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -295,10 +295,10 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        self.href_from_span(item.span(self.tcx()))\n+        self.href_from_span(item.span(self.tcx()), true)\n     }\n \n-    crate fn href_from_span(&self, span: clean::Span) -> Option<String> {\n+    crate fn href_from_span(&self, span: clean::Span, with_lines: bool) -> Option<String> {\n         if span.is_dummy() {\n             return None;\n         }\n@@ -345,16 +345,26 @@ impl<'tcx> Context<'tcx> {\n             (&*symbol, &path)\n         };\n \n-        let loline = span.lo(self.sess()).line;\n-        let hiline = span.hi(self.sess()).line;\n-        let lines =\n-            if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n+        let anchor = if with_lines {\n+            let loline = span.lo(self.sess()).line;\n+            let hiline = span.hi(self.sess()).line;\n+            format!(\n+                \"#{}\",\n+                if loline == hiline {\n+                    loline.to_string()\n+                } else {\n+                    format!(\"{}-{}\", loline, hiline)\n+                }\n+            )\n+        } else {\n+            \"\".to_string()\n+        };\n         Some(format!(\n-            \"{root}src/{krate}/{path}#{lines}\",\n+            \"{root}src/{krate}/{path}{anchor}\",\n             root = Escape(&root),\n             krate = krate,\n             path = path,\n-            lines = lines\n+            anchor = anchor\n         ))\n     }\n }"}, {"sha": "3a4c68917081d0acaa23cd3b1137de0b0dfd2b2d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -2475,12 +2475,11 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n     };\n \n     // Generate a unique ID so users can link to this section for a given method\n-    // FIXME: this should use init_id_map instead of derive\n     let id = cx.id_map.borrow_mut().derive(\"scraped-examples\");\n     write!(\n         w,\n         \"<div class=\\\"docblock scraped-example-list\\\">\\\n-          <span></span>\n+          <span></span>\\\n           <h5 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n              <a href=\\\"#{id}\\\">Examples found in repository</a>\\\n           </h5>\",\n@@ -2516,42 +2515,51 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n \n         // The call locations need to be updated to reflect that the size of the program has changed.\n         // Specifically, the ranges are all subtracted by `byte_min` since that's the new zero point.\n-        let (byte_ranges, line_ranges): (Vec<_>, Vec<_>) = call_data\n+        let (mut byte_ranges, line_ranges): (Vec<_>, Vec<_>) = call_data\n             .locations\n             .iter()\n             .map(|loc| {\n                 let (byte_lo, byte_hi) = loc.call_expr.byte_span;\n                 let (line_lo, line_hi) = loc.call_expr.line_span;\n-                ((byte_lo - byte_min, byte_hi - byte_min), (line_lo - line_min, line_hi - line_min))\n+                let byte_range = (byte_lo - byte_min, byte_hi - byte_min);\n+                let line_range = (line_lo - line_min, line_hi - line_min);\n+                let (anchor, line_title) = if line_lo == line_hi {\n+                    (format!(\"{}\", line_lo + 1), format!(\"line {}\", line_lo + 1))\n+                } else {\n+                    (\n+                        format!(\"{}-{}\", line_lo + 1, line_hi + 1),\n+                        format!(\"lines {}-{}\", line_lo + 1, line_hi + 1),\n+                    )\n+                };\n+                let line_url = format!(\"{}{}#{}\", cx.root_path(), call_data.url, anchor);\n+\n+                (byte_range, (line_range, line_url, line_title))\n             })\n             .unzip();\n \n-        let (init_min, init_max) = line_ranges[0];\n-        let line_range = if init_min == init_max {\n-            format!(\"line {}\", init_min + line_min + 1)\n-        } else {\n-            format!(\"lines {}-{}\", init_min + line_min + 1, init_max + line_min + 1)\n-        };\n-\n+        let (_, init_url, init_title) = &line_ranges[0];\n         let needs_expansion = line_max - line_min > NUM_VISIBLE_LINES;\n+        let locations_encoded = serde_json::to_string(&line_ranges).unwrap();\n \n         write!(\n             w,\n             \"<div class=\\\"scraped-example {expanded_cls}\\\" data-locs=\\\"{locations}\\\">\\\n                 <div class=\\\"scraped-example-title\\\">\\\n-                   {name} (<a href=\\\"{root}{url}\\\">{line_range}</a>)\\\n+                   {name} (<a href=\\\"{url}\\\">{title}</a>)\\\n                 </div>\\\n                 <div class=\\\"code-wrapper\\\">\",\n-            root = cx.root_path(),\n-            url = call_data.url,\n-            name = call_data.display_name,\n-            line_range = line_range,\n             expanded_cls = if needs_expansion { \"\" } else { \"expanded\" },\n+            name = call_data.display_name,\n+            url = init_url,\n+            title = init_title,\n             // The locations are encoded as a data attribute, so they can be read\n             // later by the JS for interactions.\n-            locations = serde_json::to_string(&line_ranges).unwrap(),\n+            locations = Escape(&locations_encoded)\n         );\n-        write!(w, r#\"<span class=\"prev\">&pr;</span> <span class=\"next\">&sc;</span>\"#);\n+\n+        if line_ranges.len() > 1 {\n+            write!(w, r#\"<span class=\"prev\">&pr;</span> <span class=\"next\">&sc;</span>\"#);\n+        }\n \n         if needs_expansion {\n             write!(w, r#\"<span class=\"expand\">&varr;</span>\"#);\n@@ -2580,6 +2588,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n         let root_path = vec![\"../\"; cx.current.len() - 1].join(\"\");\n \n         let mut decoration_info = FxHashMap::default();\n+        decoration_info.insert(\"highlight focus\", vec![byte_ranges.remove(0)]);\n         decoration_info.insert(\"highlight\", byte_ranges);\n \n         sources::print_src("}, {"sha": "49bdb2455ac931933f7f6a018d9a0dc39a336d0d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -1986,6 +1986,7 @@ details.undocumented[open] > summary::before {\n .scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n \toverflow-y: hidden;\n \tmax-height: 240px;\n+\tpadding-bottom: 0;\n }\n \n .scraped-example .code-wrapper .prev {"}, {"sha": "664b187e33e9f4d700e0f329bbf0394c608e57e8", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -15,41 +15,23 @@\n \n     function updateScrapedExample(example) {\n         var locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n-        var first_line_no = example.querySelector('.line-numbers > span:first-child');\n-        var offset = parseInt(first_line_no.innerHTML) - 1;\n-\n         var locIndex = 0;\n         var highlights = example.querySelectorAll('.highlight');\n         var link = example.querySelector('.scraped-example-title a');\n-        addClass(highlights[0], 'focus');\n+\n         if (locs.length > 1) {\n             // Toggle through list of examples in a given file\n-            var onChangeLoc = function(f) {\n+            var onChangeLoc = function(changeIndex) {\n                 removeClass(highlights[locIndex], 'focus');\n-                f();\n-                scrollToLoc(example, locs[locIndex]);\n+                changeIndex();\n+                scrollToLoc(example, locs[locIndex][0]);\n                 addClass(highlights[locIndex], 'focus');\n \n-                var curLoc = locs[locIndex];\n-                var minLine = curLoc[0] + offset + 1;\n-                var maxLine = curLoc[1] + offset + 1;\n-\n-                var text;\n-                var anchor;\n-                if (minLine == maxLine) {\n-                    text = 'line ' + minLine.toString();\n-                    anchor = minLine.toString();\n-                } else {\n-                    var range = minLine.toString() + '-' + maxLine.toString();\n-                    text = 'lines ' + range;\n-                    anchor = range;\n-                }\n-\n-                var url = new URL(link.href);\n-                url.hash = anchor;\n+                var url = locs[locIndex][1];\n+                var title = locs[locIndex][2];\n \n-                link.href = url.toString();\n-                link.innerHTML = text;\n+                link.href = url;\n+                link.innerHTML = title;\n             };\n \n             example.querySelector('.prev')\n@@ -61,28 +43,26 @@\n \n             example.querySelector('.next')\n                 .addEventListener('click', function() {\n-                    onChangeLoc(function() { locIndex = (locIndex + 1) % locs.length; });\n+                    onChangeLoc(function() {\n+                        locIndex = (locIndex + 1) % locs.length;\n+                    });\n                 });\n-        } else {\n-            // Remove buttons if there's only one example in the file\n-            example.querySelector('.prev').remove();\n-            example.querySelector('.next').remove();\n         }\n \n         var expandButton = example.querySelector('.expand');\n         if (expandButton) {\n             expandButton.addEventListener('click', function () {\n                 if (hasClass(example, \"expanded\")) {\n                     removeClass(example, \"expanded\");\n-                    scrollToLoc(example, locs[0]);\n+                    scrollToLoc(example, locs[0][0]);\n                 } else {\n                     addClass(example, \"expanded\");\n                 }\n             });\n         }\n \n         // Start with the first example in view\n-        scrollToLoc(example, locs[0]);\n+        scrollToLoc(example, locs[0][0]);\n     }\n \n     var firstExamples = document.querySelectorAll('.scraped-example-list > .scraped-example');"}, {"sha": "c75a42446200dcc5fb74fc9cd12c753baf6f485e", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -171,7 +171,7 @@ where\n                 let cx = &self.cx;\n                 let mk_call_data = || {\n                     let clean_span = crate::clean::types::Span::new(span);\n-                    let url = cx.href_from_span(clean_span).unwrap();\n+                    let url = cx.href_from_span(clean_span, false).unwrap();\n                     let display_name = file_path.display().to_string();\n                     let edition = span.edition();\n                     CallData { locations: Vec::new(), url, display_name, edition }\n@@ -233,6 +233,7 @@ crate fn run(\n     Ok(())\n }\n \n+// Note: the Handler must be passed in explicitly because sess isn't available while parsing options\n crate fn load_call_locations(\n     with_examples: Vec<String>,\n     diag: &rustc_errors::Handler,"}, {"sha": "f525a4270dde10fa886a44119c68b08dce10f6bb", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e22e8586877925c731e712f3116e53bdcccfffa7/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2Fsrc%2Flib.rs?ref=e22e8586877925c731e712f3116e53bdcccfffa7", "patch": "@@ -1,5 +1,5 @@\n-// @has foobar/b/fn.foo.html '//*[@class=\"scraped-example\"]' 'ex.rs'\n-// @has foobar/c/fn.foo.html '//*[@class=\"scraped-example\"]' 'ex.rs'\n+// @has foobar/b/fn.foo.html '//*[@class=\"scraped-example expanded\"]' 'ex.rs'\n+// @has foobar/c/fn.foo.html '//*[@class=\"scraped-example expanded\"]' 'ex.rs'\n \n #[path = \"a.rs\"]\n pub mod b;"}]}