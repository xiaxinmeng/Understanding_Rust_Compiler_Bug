{"sha": "03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "node_id": "C_kwDOAAsO6NoAKDAzZDMzNTU2YzlmMjQ4ZWE2YTFkODQ3M2I5OGNmYTRjMWU5NjM0M2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-26T12:53:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-26T12:53:54Z"}, "message": "fix: Don't emit unresolvedReference highlight tags in unlinked files", "tree": {"sha": "06c646174acfcad3fbae88c3482749d93c201a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c646174acfcad3fbae88c3482749d93c201a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "html_url": "https://github.com/rust-lang/rust/commit/03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d33556c9f248ea6a1d8473b98cfa4c1e96343b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cc1d6b7b499d6b03436db7fc8053aea72f75ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cc1d6b7b499d6b03436db7fc8053aea72f75ac", "html_url": "https://github.com/rust-lang/rust/commit/a2cc1d6b7b499d6b03436db7fc8053aea72f75ac"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "1b2fc9c635d30ef2e3dc74d35bb2831aff74809b", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03d33556c9f248ea6a1d8473b98cfa4c1e96343b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d33556c9f248ea6a1d8473b98cfa4c1e96343b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "patch": "@@ -183,7 +183,8 @@ pub(crate) fn highlight(\n     traverse(\n         &mut hl,\n         &sema,\n-        InFile::new(file_id.into(), &root),\n+        file_id,\n+        &root,\n         sema.scope(&root).krate(),\n         range_to_highlight,\n         syntactic_name_ref_highlighting,\n@@ -194,11 +195,13 @@ pub(crate) fn highlight(\n fn traverse(\n     hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n-    root: InFile<&SyntaxNode>,\n+    file_id: FileId,\n+    root: &SyntaxNode,\n     krate: Option<hir::Crate>,\n     range_to_highlight: TextRange,\n     syntactic_name_ref_highlighting: bool,\n ) {\n+    let is_unlinked = sema.to_module_def(file_id).is_none();\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n@@ -209,7 +212,7 @@ fn traverse(\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n     // If in macro, expand it first and highlight the expanded code.\n-    for event in root.value.preorder_with_tokens() {\n+    for event in root.preorder_with_tokens() {\n         let range = match &event {\n             WalkEvent::Enter(it) | WalkEvent::Leave(it) => it.text_range(),\n         };\n@@ -283,7 +286,7 @@ fn traverse(\n             WalkEvent::Enter(it) => it,\n             WalkEvent::Leave(NodeOrToken::Token(_)) => continue,\n             WalkEvent::Leave(NodeOrToken::Node(node)) => {\n-                inject::doc_comment(hl, sema, root.with_value(&node));\n+                inject::doc_comment(hl, sema, InFile::new(file_id.into(), &node));\n                 continue;\n             }\n         };\n@@ -378,6 +381,11 @@ fn traverse(\n             NodeOrToken::Token(token) => highlight::token(sema, token).zip(Some(None)),\n         };\n         if let Some((mut highlight, binding_hash)) = element {\n+            if is_unlinked && highlight.tag == HlTag::UnresolvedReference {\n+                // do not emit unresolved references if the file is unlinked\n+                // let the editor do its highlighting for these tokens instead\n+                continue;\n+            }\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }"}]}