{"sha": "adbb608678c618efdc823e3c7a60a0331b9c0156", "node_id": "C_kwDOAAsO6NoAKGFkYmI2MDg2NzhjNjE4ZWZkYzgyM2UzYzdhNjBhMDMzMWI5YzAxNTY", "commit": {"author": {"name": "Timothy Maloney", "email": "tmaloney@pdx.edu", "date": "2021-09-24T00:24:58Z"}, "committer": {"name": "Timothy Maloney", "email": "tmaloney@pdx.edu", "date": "2021-09-27T04:26:30Z"}, "message": "Link stage1 build to toolchain automatically\n\nFixed types\n\nAdd checks for rustup and if toolchain is linked\n\nFortified rustup/directory checks; made other suggested changes\n\nAdded check for output status\n\nRemove output of rustup from console\n\nMade suggested change\n\nDeleted confusing comment\n\nFixed compiler error; removed extra declaration\n\nRefactored to smaller components; made suggested changes\n\nAutomate toolchain linking for stage 1 builds", "tree": {"sha": "851ff2f5b813f62391daa3e0b12eba5c57ab396d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/851ff2f5b813f62391daa3e0b12eba5c57ab396d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adbb608678c618efdc823e3c7a60a0331b9c0156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adbb608678c618efdc823e3c7a60a0331b9c0156", "html_url": "https://github.com/rust-lang/rust/commit/adbb608678c618efdc823e3c7a60a0331b9c0156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adbb608678c618efdc823e3c7a60a0331b9c0156/comments", "author": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0132f8258ae0fbc4f2b461b28d510222d22aa979", "url": "https://api.github.com/repos/rust-lang/rust/commits/0132f8258ae0fbc4f2b461b28d510222d22aa979", "html_url": "https://github.com/rust-lang/rust/commit/0132f8258ae0fbc4f2b461b28d510222d22aa979"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "5bc0a505bf6954602f44fb94b872126e09c15467", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/adbb608678c618efdc823e3c7a60a0331b9c0156/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adbb608678c618efdc823e3c7a60a0331b9c0156/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=adbb608678c618efdc823e3c7a60a0331b9c0156", "patch": "@@ -1,3 +1,4 @@\n+use crate::TargetSelection;\n use crate::{t, VERSION};\n use std::fmt::Write as _;\n use std::path::{Path, PathBuf};\n@@ -107,6 +108,17 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     let include_path = profile.include_path(src_path);\n     println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n+    let build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n+    let stage_path = [\"build\", build.rustc_target_arg(), \"stage1\"].join(\"/\");\n+\n+    println!();\n+\n+    if !rustup_installed() && profile != Profile::User {\n+        println!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n+    } else if stage_dir_exists(&stage_path[..]) {\n+        attempt_toolchain_link(&stage_path[..]);\n+    }\n+\n     let suggestions = match profile {\n         Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n         Profile::Tools => &[\n@@ -139,6 +151,74 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     }\n }\n \n+fn rustup_installed() -> bool {\n+    Command::new(\"rustup\")\n+        .arg(\"--version\")\n+        .stdout(std::process::Stdio::null())\n+        .output()\n+        .map_or(false, |output| output.status.success())\n+}\n+\n+fn stage_dir_exists(stage_path: &str) -> bool {\n+    match fs::create_dir(&stage_path[..]) {\n+        Ok(_) => true,\n+        Err(_) => Path::new(&stage_path[..]).exists(),\n+    }\n+}\n+\n+fn attempt_toolchain_link(stage_path: &str) {\n+    if toolchain_is_linked() {\n+        return;\n+    }\n+\n+    if try_link_toolchain(&stage_path[..]) {\n+        println!(\n+            \"Added `stage1` rustup toolchain; try `cargo +stage1 build` on a separate rust project to run a newly-built toolchain\"\n+        );\n+    } else {\n+        println!(\"`rustup` failed to link stage 1 build to `stage1` toolchain\");\n+        println!(\n+            \"To manually link stage 1 build to `stage1` toolchain, run:\\n\n+            `rustup toolchain link stage1 {}`\",\n+            &stage_path[..]\n+        );\n+    }\n+}\n+\n+fn toolchain_is_linked() -> bool {\n+    match Command::new(\"rustup\")\n+        .args(&[\"toolchain\", \"list\"])\n+        .stdout(std::process::Stdio::piped())\n+        .output()\n+    {\n+        Ok(toolchain_list) => {\n+            if !String::from_utf8_lossy(&toolchain_list.stdout).contains(\"stage1\") {\n+                return false;\n+            }\n+            // The toolchain has already been linked.\n+            println!(\n+                \"`stage1` toolchain already linked; not attempting to link `stage1` toolchain\"\n+            );\n+        }\n+        Err(_) => {\n+            // In this case, we don't know if the `stage1` toolchain has been linked;\n+            // but `rustup` failed, so let's not go any further.\n+            println!(\n+                \"`rustup` failed to list current toolchains; not attempting to link `stage1` toolchain\"\n+            );\n+        }\n+    }\n+    true\n+}\n+\n+fn try_link_toolchain(stage_path: &str) -> bool {\n+    Command::new(\"rustup\")\n+        .stdout(std::process::Stdio::null())\n+        .args(&[\"toolchain\", \"link\", \"stage1\", &stage_path[..]])\n+        .output()\n+        .map_or(false, |output| output.status.success())\n+}\n+\n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n     fn abbrev_all() -> impl Iterator<Item = ((String, String), Profile)> {"}]}