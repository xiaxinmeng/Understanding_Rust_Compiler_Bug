{"sha": "9006c3c0f14be45da8ffeba43d354d088e366c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMDZjM2MwZjE0YmU0NWRhOGZmZWJhNDNkMzU0ZDA4OGUzNjZjODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-20T04:23:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-20T04:23:28Z"}, "message": "Auto merge of #21287 - alexcrichton:issue-19872, r=huonw\n\ncc #19872, this may help give some insight", "tree": {"sha": "f4cc69b217328f907fe1ca2fcbca6f93a6d77bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4cc69b217328f907fe1ca2fcbca6f93a6d77bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9006c3c0f14be45da8ffeba43d354d088e366c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9006c3c0f14be45da8ffeba43d354d088e366c83", "html_url": "https://github.com/rust-lang/rust/commit/9006c3c0f14be45da8ffeba43d354d088e366c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9006c3c0f14be45da8ffeba43d354d088e366c83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e375a892f194a4c19fd69c1abf91ef3363627a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/e375a892f194a4c19fd69c1abf91ef3363627a98", "html_url": "https://github.com/rust-lang/rust/commit/e375a892f194a4c19fd69c1abf91ef3363627a98"}, {"sha": "440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "html_url": "https://github.com/rust-lang/rust/commit/440d63b0f59933ed97a5088e60ba3b7e90cf72f9"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "0084acd99e03e892ae61391c258892e419cfb132", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9006c3c0f14be45da8ffeba43d354d088e366c83/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9006c3c0f14be45da8ffeba43d354d088e366c83/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=9006c3c0f14be45da8ffeba43d354d088e366c83", "patch": "@@ -22,6 +22,7 @@ pub use self::imp::Lock;\n mod imp {\n     use std::ffi::CString;\n     use libc;\n+    use std::os as stdos;\n \n     #[cfg(target_os = \"linux\")]\n     mod os {\n@@ -116,7 +117,8 @@ mod imp {\n                 libc::open(buf.as_ptr(), libc::O_RDWR | libc::O_CREAT,\n                            libc::S_IRWXU)\n             };\n-            assert!(fd > 0);\n+            assert!(fd > 0, \"failed to open lockfile: [{}] {}\",\n+                    stdos::errno(), stdos::last_os_error());\n             let flock = os::flock {\n                 l_start: 0,\n                 l_len: 0,\n@@ -129,8 +131,10 @@ mod imp {\n                 libc::fcntl(fd, os::F_SETLKW, &flock as *const os::flock)\n             };\n             if ret == -1 {\n+                let errno = stdos::errno();\n                 unsafe { libc::close(fd); }\n-                panic!(\"could not lock `{}`\", p.display())\n+                panic!(\"could not lock `{}`: [{}] {}\", p.display(),\n+                       errno, stdos::error_string(errno))\n             }\n             Lock { fd: fd }\n         }\n@@ -199,17 +203,19 @@ mod imp {\n                                   ptr::null_mut())\n             };\n             if handle == libc::INVALID_HANDLE_VALUE {\n-                panic!(\"create file error: {}\", os::last_os_error());\n+                panic!(\"create file error: [{}] {}\",\n+                       os::errno(), os::last_os_error());\n             }\n             let mut overlapped: libc::OVERLAPPED = unsafe { mem::zeroed() };\n             let ret = unsafe {\n                 LockFileEx(handle, LOCKFILE_EXCLUSIVE_LOCK, 0, 100, 0,\n                            &mut overlapped)\n             };\n             if ret == 0 {\n+                let errno = os::errno();\n                 unsafe { libc::CloseHandle(handle); }\n-                panic!(\"could not lock `{}`: {}\", p.display(),\n-                      os::last_os_error())\n+                panic!(\"could not lock `{}`: [{}] {}\", p.display(),\n+                       errno, os::error_string(errno));\n             }\n             Lock { handle: handle }\n         }"}]}