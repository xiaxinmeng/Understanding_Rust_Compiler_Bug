{"sha": "48aae09e9fe0a5574f59867610a9005c68ff5c19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWFlMDllOWZlMGE1NTc0ZjU5ODY3NjEwYTkwMDVjNjhmZjVjMTk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-11-11T11:13:59Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-11-20T17:22:40Z"}, "message": "Add std::iter::unfold", "tree": {"sha": "747104442a533de0cd09a36a755733b80369a935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747104442a533de0cd09a36a755733b80369a935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48aae09e9fe0a5574f59867610a9005c68ff5c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48aae09e9fe0a5574f59867610a9005c68ff5c19", "html_url": "https://github.com/rust-lang/rust/commit/48aae09e9fe0a5574f59867610a9005c68ff5c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48aae09e9fe0a5574f59867610a9005c68ff5c19/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e661328198540e35670138f485bbc06a866464", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e661328198540e35670138f485bbc06a866464", "html_url": "https://github.com/rust-lang/rust/commit/15e661328198540e35670138f485bbc06a866464"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "5ac8b2d28956a5617c877eb8f2a5339753567a7a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48aae09e9fe0a5574f59867610a9005c68ff5c19/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48aae09e9fe0a5574f59867610a9005c68ff5c19/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=48aae09e9fe0a5574f59867610a9005c68ff5c19", "patch": "@@ -339,6 +339,8 @@ pub use self::sources::{RepeatWith, repeat_with};\n pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{Once, once};\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+pub use self::sources::{Unfold, unfold};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};"}, {"sha": "a209b90ace19b72d2d22161ceaa309ddd94426bf", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/48aae09e9fe0a5574f59867610a9005c68ff5c19/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48aae09e9fe0a5574f59867610a9005c68ff5c19/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=48aae09e9fe0a5574f59867610a9005c68ff5c19", "patch": "@@ -386,3 +386,79 @@ impl<T> FusedIterator for Once<T> {}\n pub fn once<T>(value: T) -> Once<T> {\n     Once { inner: Some(value).into_iter() }\n }\n+\n+/// Creates a new iterator where each iteration calls the provided closure\n+/// `F: FnMut(&mut St) -> Option<T>`.\n+///\n+/// This allows creating a custom iterator with any behavior\n+/// without using the more verbose syntax of creating a dedicated type\n+/// and implementing the `Iterator` trait for it.\n+///\n+/// In addition to its captures and environment,\n+/// the closure is given a mutable reference to some state\n+/// that is preserved across iterations.\n+/// That state starts as the given `initial_state` value.\n+///\n+/// Note that the `Unfold` iterator doesn\u2019t make assumptions about the behavior of the closure,\n+/// and therefore conservatively does not implement [`FusedIterator`],\n+/// or override [`Iterator::size_hint`] from its default `(0, None)`.\n+///\n+/// [`FusedIterator`]: trait.FusedIterator.html\n+/// [`Iterator::size_hint`]: trait.Iterator.html#method.size_hint\n+///\n+/// # Examples\n+///\n+/// Let\u2019s re-implement the counter iterator from [module-level documentation]:\n+///\n+/// [module-level documentation]: index.html\n+///\n+/// ```\n+/// #![feature(iter_unfold)]\n+/// let counter = std::iter::unfold(0, |count| {\n+///     // increment our count. This is why we started at zero.\n+///     *count += 1;\n+///\n+///     // check to see if we've finished counting or not.\n+///     if *count < 6 {\n+///         Some(*count)\n+///     } else {\n+///         None\n+///     }\n+/// });\n+/// assert_eq!(counter.collect::<Vec<_>>(), &[1, 2, 3, 4, 5]);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+pub fn unfold<St, T, F>(initial_state: St, f: F) -> Unfold<St, F>\n+    where F: FnMut(&mut St) -> Option<T>\n+{\n+    Unfold {\n+        state: initial_state,\n+        f,\n+    }\n+}\n+\n+/// An iterator where each iteration calls the provided closure `F: FnMut(&mut St) -> Option<T>`.\n+///\n+/// This `struct` is created by the [`unfold`] function.\n+/// See its documentation for more.\n+///\n+/// [`unfold`]: fn.unfold.html\n+#[derive(Copy, Clone, Debug)]\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+pub struct Unfold<St, F> {\n+    state: St,\n+    f: F,\n+}\n+\n+#[unstable(feature = \"iter_unfold\", issue = /* FIXME */ \"0\")]\n+impl<St, T, F> Iterator for Unfold<St, F>\n+    where F: FnMut(&mut St) -> Option<T>\n+{\n+    type Item = T;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        (self.f)(&mut self.state)\n+    }\n+}"}]}