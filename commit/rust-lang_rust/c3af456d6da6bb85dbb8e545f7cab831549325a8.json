{"sha": "c3af456d6da6bb85dbb8e545f7cab831549325a8", "node_id": "C_kwDOAAsO6NoAKGMzYWY0NTZkNmRhNmJiODVkYmI4ZTU0NWY3Y2FiODMxNTQ5MzI1YTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-20T13:37:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-20T13:37:32Z"}, "message": "Rollup merge of #105930 - JakobDegen:nal-unsound, r=oli-obk\n\nDisable `NormalizeArrayLen`\n\ncc #105929\n\nr? mir-opt", "tree": {"sha": "2a26ab28984129f3855eeb9680ec3fea1f04722b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a26ab28984129f3855eeb9680ec3fea1f04722b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3af456d6da6bb85dbb8e545f7cab831549325a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjobqcCRBK7hj4Ov3rIwAAJxkIAITT53NQLc/F9Fa4uz1WJ25h\nXpd1fftQ5I9bNwCcI8BBosR3PUHgkufhn6LgkpZpwWf7LFqktc3cBA4wQr8D3jFx\nONzlQXqF4CYNIDTgGdhrY4jMM/hnu/Rtdy3PopQOOng1dz+WXWgQn1lnONlkmJZU\n3ZWAmN9GYiofRW/u1k6x7dhAVlvtgOuXoQpgvxrQXDZAAFPdqZ0ptsVYyXSH/pL0\ny2quURdqle3Z3Q41pO54QO1uHBXhbDBKtGULZX/I4Siv5WtRhPui7BOosC1mDH9w\n7PZTxebBYbinB/sAfUL3YL8VML58zjl19wmaSNOIfFJ+BPvgpo+sJkU9k/1uL2E=\n=syoM\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a26ab28984129f3855eeb9680ec3fea1f04722b\nparent 52fe5a1cc142562c549a54a41147a92e7e23e25f\nparent 4251289f27949cec69d8aa39d3891a4977fbc856\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671543452 +0100\ncommitter GitHub <noreply@github.com> 1671543452 +0100\n\nRollup merge of #105930 - JakobDegen:nal-unsound, r=oli-obk\n\nDisable `NormalizeArrayLen`\n\ncc #105929\n\nr? mir-opt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3af456d6da6bb85dbb8e545f7cab831549325a8", "html_url": "https://github.com/rust-lang/rust/commit/c3af456d6da6bb85dbb8e545f7cab831549325a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3af456d6da6bb85dbb8e545f7cab831549325a8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fe5a1cc142562c549a54a41147a92e7e23e25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fe5a1cc142562c549a54a41147a92e7e23e25f", "html_url": "https://github.com/rust-lang/rust/commit/52fe5a1cc142562c549a54a41147a92e7e23e25f"}, {"sha": "4251289f27949cec69d8aa39d3891a4977fbc856", "url": "https://api.github.com/repos/rust-lang/rust/commits/4251289f27949cec69d8aa39d3891a4977fbc856", "html_url": "https://github.com/rust-lang/rust/commit/4251289f27949cec69d8aa39d3891a4977fbc856"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "1708b287e56f25bca285136fca3a92649a0bafd6", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3af456d6da6bb85dbb8e545f7cab831549325a8/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3af456d6da6bb85dbb8e545f7cab831549325a8/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=c3af456d6da6bb85dbb8e545f7cab831549325a8", "patch": "@@ -16,7 +16,8 @@ pub struct NormalizeArrayLen;\n \n impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 4\n+        // See #105929\n+        sess.mir_opt_level() >= 4 && sess.opts.unstable_opts.unsound_mir_opts\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "44445731e72090a365113c15b0fac97251217604", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=c3af456d6da6bb85dbb8e545f7cab831549325a8", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n@@ -25,16 +24,14 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }"}, {"sha": "44445731e72090a365113c15b0fac97251217604", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=c3af456d6da6bb85dbb8e545f7cab831549325a8", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n@@ -25,16 +24,14 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }"}, {"sha": "e97b46f6ecc82b19b29ccddcdd162afb07801192", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=c3af456d6da6bb85dbb8e545f7cab831549325a8", "patch": "@@ -22,7 +22,6 @@\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:70: +3:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:70: +3:84\n       let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:+1:9: +1:10\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n@@ -52,17 +51,16 @@\n           StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          StorageLive(_23);                // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          _23 = _3;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n           StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:29: +1:30\n           StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:+2:5: +5:6\n-          _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          StorageDead(_23);                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+          _10 = Len((*_2));                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n           _11 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          _12 = const true;                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          goto -> bb2;                     // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+-         _12 = Eq(move _10, const 3_usize); // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+-         switchInt(move _12) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n++         nop;                             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n++         switchInt(move _10) -> [3: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n       }\n   \n       bb1: {"}, {"sha": "d8e4e521ee6820b91fb3dc9ee41f8f5310bebb71", "filename": "src/test/mir-opt/lower_array_len_e2e.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3af456d6da6bb85dbb8e545f7cab831549325a8/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs?ref=c3af456d6da6bb85dbb8e545f7cab831549325a8", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4\n+// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n \n // EMIT_MIR lower_array_len_e2e.array_bound.PreCodegen.after.mir\n pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {"}]}