{"sha": "4e16e30b07c24b6ae5db1269c894d618eb55b1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMTZlMzBiMDdjMjRiNmFlNWRiMTI2OWM4OTRkNjE4ZWI1NWIxYzA=", "commit": {"author": {"name": "Virgil Palanciuc", "email": "virgilp@adobe.com", "date": "2017-10-25T23:56:13Z"}, "committer": {"name": "Virgil Palanciuc", "email": "virgilp@adobe.com", "date": "2017-10-25T23:56:13Z"}, "message": "fix #44953 - The \u201cuse of unstable library feature 'rustc_private'\u201d error is very repetitive", "tree": {"sha": "83d8155970d692108e8fcf6547769d847bbbdf72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d8155970d692108e8fcf6547769d847bbbdf72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e16e30b07c24b6ae5db1269c894d618eb55b1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e16e30b07c24b6ae5db1269c894d618eb55b1c0", "html_url": "https://github.com/rust-lang/rust/commit/4e16e30b07c24b6ae5db1269c894d618eb55b1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e16e30b07c24b6ae5db1269c894d618eb55b1c0/comments", "author": null, "committer": null, "parents": [{"sha": "f9d24165948a926263444bfe763f9861cb683246", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d24165948a926263444bfe763f9861cb683246", "html_url": "https://github.com/rust-lang/rust/commit/f9d24165948a926263444bfe763f9861cb683246"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "d83560963f7624b619e8dc490419633608be9bac", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e16e30b07c24b6ae5db1269c894d618eb55b1c0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e16e30b07c24b6ae5db1269c894d618eb55b1c0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=4e16e30b07c24b6ae5db1269c894d618eb55b1c0", "patch": "@@ -19,7 +19,7 @@ use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n@@ -597,8 +597,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            feature.as_str(), &r),\n                     None => format!(\"use of unstable library feature '{}'\", &feature)\n                 };\n-                emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n-                                 GateIssue::Library(Some(issue)), &msg);\n+\n+                let msp: MultiSpan = span.into();\n+                let cm = &self.sess.parse_sess.codemap();\n+                let real_file_location =\n+                    msp.primary_span().and_then(|sp:Span|\n+                        if sp != DUMMY_SP {\n+                            let fname = cm.lookup_char_pos(sp.lo()).file.as_ref().name.clone();\n+                            if fname.starts_with(\"<\") && fname.ends_with(\" macros>\") {\n+                                None\n+                            } else {\n+                                Some(fname)\n+                            }\n+                        } else {\n+                            None\n+                        }\n+                    );\n+\n+                if let Some(_) = real_file_location {\n+                    let tuple = (None, Some(span), msg.clone());\n+                    let fresh = self.sess.one_time_diagnostics.borrow_mut().insert(tuple);\n+                    if fresh {\n+                        emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n+                                         GateIssue::Library(Some(issue)), &msg);\n+                    }\n+                }\n+\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are"}, {"sha": "177e595273b8e8932adecc320fc6e47f9ae67652", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e16e30b07c24b6ae5db1269c894d618eb55b1c0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e16e30b07c24b6ae5db1269c894d618eb55b1c0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4e16e30b07c24b6ae5db1269c894d618eb55b1c0", "patch": "@@ -78,7 +78,7 @@ pub struct Session {\n     /// Set of (LintId, Option<Span>, message) tuples tracking lint\n     /// (sub)diagnostics that have been set once, but should not be set again,\n     /// in order to avoid redundantly verbose output (Issue #24690).\n-    pub one_time_diagnostics: RefCell<FxHashSet<(lint::LintId, Option<Span>, String)>>,\n+    pub one_time_diagnostics: RefCell<FxHashSet<(Option<lint::LintId>, Option<Span>, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n@@ -361,7 +361,7 @@ impl Session {\n             },\n             _ => {\n                 let lint_id = lint::LintId::of(lint);\n-                let id_span_message = (lint_id, span, message.to_owned());\n+                let id_span_message = (Some(lint_id), span, message.to_owned());\n                 let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n                 if fresh {\n                     do_method()"}]}