{"sha": "560bb0af6d0dda06b856a80cc5095b7d552b8406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MGJiMGFmNmQwZGRhMDZiODU2YTgwY2M1MDk1YjdkNTUyYjg0MDY=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-03T05:47:41Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-07-15T18:32:29Z"}, "message": "Better detection of duplicate associated items.\n\nExpands E0201 to be used for any duplicate associated items, not just duplicate\nmethods/functions. It also correctly detects when two different kinds of items\n(like a constant and a method) have the same name.\n\nFixes #23969.", "tree": {"sha": "94462b67ad88771977ff2399eba8307cf3ae1844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94462b67ad88771977ff2399eba8307cf3ae1844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560bb0af6d0dda06b856a80cc5095b7d552b8406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560bb0af6d0dda06b856a80cc5095b7d552b8406", "html_url": "https://github.com/rust-lang/rust/commit/560bb0af6d0dda06b856a80cc5095b7d552b8406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560bb0af6d0dda06b856a80cc5095b7d552b8406/comments", "author": null, "committer": null, "parents": [{"sha": "906ad724620e1ff93082b364a38761940a7abdcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/906ad724620e1ff93082b364a38761940a7abdcf", "html_url": "https://github.com/rust-lang/rust/commit/906ad724620e1ff93082b364a38761940a7abdcf"}], "stats": {"total": 126, "additions": 111, "deletions": 15}, "files": [{"sha": "82449296eae1ec924ab7e7acf3e386767eca3ca5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=560bb0af6d0dda06b856a80cc5095b7d552b8406", "patch": "@@ -748,17 +748,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n            rcvr_ty_generics.repr(ccx.tcx),\n            rcvr_ty_predicates.repr(ccx.tcx));\n \n-    let tcx = ccx.tcx;\n-    let mut seen_methods = FnvHashSet();\n-    for (sig, id, ident, vis, span) in methods {\n-        if !seen_methods.insert(ident.name) {\n-            let fn_desc = match sig.explicit_self.node {\n-                ast::SelfStatic => \"associated function\",\n-                _               => \"method\",\n-            };\n-            span_err!(tcx.sess, span, E0201, \"duplicate {}\", fn_desc);\n-        }\n-\n+    for (sig, id, ident, vis, _span) in methods {\n         convert_method(ccx,\n                        container,\n                        sig,\n@@ -860,7 +850,30 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n             };\n \n             // Convert all the associated consts.\n+            // Also, check if there are any duplicate associated items\n+            let mut seen_type_items = FnvHashSet();\n+            let mut seen_value_items = FnvHashSet();\n+\n             for impl_item in impl_items {\n+                let seen_items = match impl_item.node {\n+                    ast::TypeImplItem(_) => &mut seen_type_items,\n+                    _                    => &mut seen_value_items,\n+                };\n+                if !seen_items.insert(impl_item.ident.name) {\n+                    let desc = match impl_item.node {\n+                        ast::ConstImplItem(_, _) => \"associated constant\",\n+                        ast::TypeImplItem(_) => \"associated type\",\n+                        ast::MethodImplItem(ref sig, _) =>\n+                            match sig.explicit_self.node {\n+                                ast::SelfStatic => \"associated function\",\n+                                _ => \"method\",\n+                            },\n+                        _ => \"associated item\",\n+                    };\n+\n+                    span_err!(tcx.sess, impl_item.span, E0201, \"duplicate {}\", desc);\n+                }\n+\n                 if let ast::ConstImplItem(ref ty, ref expr) = impl_item.node {\n                     let ty = ccx.icx(&ty_predicates)\n                                 .to_ty(&ExplicitRscope, &*ty);"}, {"sha": "c9ff6e36e66ed6af0601f51f1773fce8e3f87dda", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=560bb0af6d0dda06b856a80cc5095b7d552b8406", "patch": "@@ -1036,7 +1036,8 @@ unsafe impl Bar for Foo { }\n \"##,\n \n E0201: r##\"\n-It is an error to define an associated function more than once.\n+It is an error to define two associated items (like methods, associated types,\n+associated functions, etc.) with the same identifier.\n \n For example:\n \n@@ -1045,20 +1046,24 @@ struct Foo(u8);\n \n impl Foo {\n     fn bar(&self) -> bool { self.0 > 5 }\n-\n-    // error: duplicate associated function\n-    fn bar() {}\n+    fn bar() {} // error: duplicate associated function\n }\n \n trait Baz {\n+    type Quux;\n     fn baz(&self) -> bool;\n }\n \n impl Baz for Foo {\n+    type Quux = u32;\n+\n     fn baz(&self) -> bool { true }\n \n     // error: duplicate method\n     fn baz(&self) -> bool { self.0 > 5 }\n+\n+    // error: duplicate associated type\n+    type Quux = u32;\n }\n ```\n \"##,"}, {"sha": "6a7eaecae7f42ae6de68acd8dbd73ef1417ff0ca", "filename": "src/test/compile-fail/associated-item-duplicate-names-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-2.rs?ref=560bb0af6d0dda06b856a80cc5095b7d552b8406", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    const bar: bool = true;\n+    fn bar() {} //~ ERROR duplicate associated function\n+}\n+\n+fn main() {}"}, {"sha": "7c4c5ca6b4eab9448ee66b5497f6c6fcd7d5d31f", "filename": "src/test/compile-fail/associated-item-duplicate-names-3.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names-3.rs?ref=560bb0af6d0dda06b856a80cc5095b7d552b8406", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Before the introduction of the \"duplicate associated type\" error, the\n+// program below used to result in the \"ambiguous associated type\" error E0223,\n+// which is unexpected.\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+struct Baz;\n+\n+impl Foo for Baz {\n+    type Bar = i16;\n+    type Bar = u16; //~ ERROR duplicate associated type\n+}\n+\n+fn main() {\n+    let x: Baz::Bar = 5;\n+}"}, {"sha": "4c484b49024efc44a2b9445962a6a620ab70adf2", "filename": "src/test/compile-fail/associated-item-duplicate-names.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560bb0af6d0dda06b856a80cc5095b7d552b8406/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-item-duplicate-names.rs?ref=560bb0af6d0dda06b856a80cc5095b7d552b8406", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for issue #23969\n+\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    type Ty;\n+    const BAR: u32;\n+}\n+\n+impl Foo for () {\n+    type Ty = ();\n+    type Ty = usize; //~ ERROR duplicate associated type\n+    const BAR: u32 = 7;\n+    const BAR: u32 = 8; //~ ERROR duplicate associated constant\n+}\n+\n+fn main() {\n+    let _: <() as Foo>::Ty = ();\n+    let _: u32 = <() as Foo>::BAR;\n+}"}]}