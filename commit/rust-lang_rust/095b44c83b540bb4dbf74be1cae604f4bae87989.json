{"sha": "095b44c83b540bb4dbf74be1cae604f4bae87989", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NWI0NGM4M2I1NDBiYjRkYmY3NGJlMWNhZTYwNGY0YmFlODc5ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-24T13:11:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-24T13:11:06Z"}, "message": "Auto merge of #57269 - gnzlbg:simd_bitmask, r=rkruppe\n\nAdd intrinsic to create an integer bitmask from a vector mask\n\nThis PR adds a new simd intrinsic: `simd_bitmask(vector) -> unsigned integer` that creates an integer bitmask from a vector mask by extracting one bit of each vector lane.\n\nThis is required to implement: https://github.com/rust-lang-nursery/packed_simd/issues/166 .\n\nEDIT: the reason we need an intrinsics for this is that we have to truncate the vector lanes to an `<i1 x N>` vector, and then bitcast that to an `iN` integer (while making sure that we only materialize `i8`, ... , `i64` - that is, no `i1`, `i2`, `i4`, types), and we can't do any of that in a Rust library.\n\nr? @rkruppe", "tree": {"sha": "660a01091b2a50604735d6d3ddaa862dadb238c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660a01091b2a50604735d6d3ddaa862dadb238c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/095b44c83b540bb4dbf74be1cae604f4bae87989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/095b44c83b540bb4dbf74be1cae604f4bae87989", "html_url": "https://github.com/rust-lang/rust/commit/095b44c83b540bb4dbf74be1cae604f4bae87989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/095b44c83b540bb4dbf74be1cae604f4bae87989/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23b63cbbf8d92deac6b3c39746d3b85d3e838af", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23b63cbbf8d92deac6b3c39746d3b85d3e838af", "html_url": "https://github.com/rust-lang/rust/commit/f23b63cbbf8d92deac6b3c39746d3b85d3e838af"}, {"sha": "785f529d6e91b787d94b44726a5d6018e8fe181b", "url": "https://api.github.com/repos/rust-lang/rust/commits/785f529d6e91b787d94b44726a5d6018e8fe181b", "html_url": "https://github.com/rust-lang/rust/commit/785f529d6e91b787d94b44726a5d6018e8fe181b"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "201b1684fb9b20fe692c4b276ff6edc07a4f9f49", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=095b44c83b540bb4dbf74be1cae604f4bae87989", "patch": "@@ -1167,6 +1167,52 @@ fn generic_simd_intrinsic(\n         return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n     }\n \n+    if name == \"simd_bitmask\" {\n+        // The `fn simd_bitmask(vector) -> unsigned integer` intrinsic takes a\n+        // vector mask and returns an unsigned integer containing the most\n+        // significant bit (MSB) of each lane.\n+        use rustc_target::abi::HasDataLayout;\n+\n+        // If the vector has less than 8 lanes, an u8 is returned with zeroed\n+        // trailing bits.\n+        let expected_int_bits = in_len.max(8);\n+        match ret_ty.sty {\n+           ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => (),\n+            _ => return_error!(\n+                \"bitmask `{}`, expected `u{}`\",\n+                ret_ty, expected_int_bits\n+            ),\n+        }\n+\n+        // Integer vector <i{in_bitwidth} x in_len>:\n+        let (i_xn, in_elem_bitwidth) = match in_elem.sty {\n+            ty::Int(i) => (\n+                args[0].immediate(),\n+                i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits() as _)\n+            ),\n+            ty::Uint(i) => (\n+                args[0].immediate(),\n+                i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits() as _)\n+            ),\n+            _ => return_error!(\n+                \"vector argument `{}`'s element type `{}`, expected integer element type\",\n+                in_ty, in_elem\n+            ),\n+        };\n+\n+        // Shift the MSB to the right by \"in_elem_bitwidth - 1\" into the first bit position.\n+        let shift_indices = vec![\n+            bx.cx.const_int(bx.type_ix(in_elem_bitwidth as _), (in_elem_bitwidth - 1) as _); in_len\n+        ];\n+        let i_xn_msb = bx.lshr(i_xn, bx.const_vector(shift_indices.as_slice()));\n+        // Truncate vector to an <i1 x N>\n+        let i1xn = bx.trunc(i_xn_msb, bx.type_vector(bx.type_i1(), in_len as _));\n+        // Bitcast <i1 x N> to iN:\n+        let i_ = bx.bitcast(i1xn, bx.type_ix(in_len as _));\n+        // Zero-extend iN to the bitmask type:\n+        return Ok(bx.zext(i_, bx.type_ix(expected_int_bits as _)));\n+    }\n+\n     fn simd_simple_float_intrinsic(\n         name: &str,\n         in_elem: &::rustc::ty::TyS,"}, {"sha": "96e271f0cde10b6e146cc92ce6c03af213a9d58c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=095b44c83b540bb4dbf74be1cae604f4bae87989", "patch": "@@ -430,6 +430,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         \"simd_insert\" => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         \"simd_extract\" => (2, vec![param(0), tcx.types.u32], param(1)),\n         \"simd_cast\" => (2, vec![param(0)], param(1)),\n+        \"simd_bitmask\" => (2, vec![param(0)], param(1)),\n         \"simd_select\" |\n         \"simd_select_bitmask\" => (2, vec![param(0), param(1), param(1)], param(1)),\n         \"simd_reduce_all\" | \"simd_reduce_any\" => (1, vec![param(0)], tcx.types.bool),"}, {"sha": "cd8130f92314856320a11dbb181882a71ca856ea", "filename": "src/test/codegen/simd-intrinsic-generic-bitmask.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-bitmask.rs?ref=095b44c83b540bb4dbf74be1cae604f4bae87989", "patch": "@@ -0,0 +1,57 @@\n+// compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x2(u32, u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct i32x2(i32, i32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct i8x16(\n+    i8, i8, i8, i8, i8, i8, i8, i8,\n+    i8, i8, i8, i8, i8, i8, i8, i8,\n+);\n+\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_bitmask<T, U>(x: T) -> U;\n+}\n+\n+// CHECK-LABEL: @bitmask_int\n+#[no_mangle]\n+pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n+    // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n+    // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n+    // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n+    simd_bitmask(x)\n+}\n+\n+// CHECK-LABEL: @bitmask_uint\n+#[no_mangle]\n+pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n+    // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n+    // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n+    // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n+    simd_bitmask(x)\n+}\n+\n+// CHECK-LABEL: @bitmask_int16\n+#[no_mangle]\n+pub unsafe fn bitmask_int16(x: i8x16) -> u16 {\n+    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n+    // CHECK: [[B:%[0-9]+]] = trunc <16 x i8> [[A]] to <16 x i1>\n+    // CHECK: %{{[0-9]+}} = bitcast <16 x i1> [[B]] to i16\n+    // CHECK-NOT: zext\n+    simd_bitmask(x)\n+}"}, {"sha": "b28f742a92e94a99159e66a2bea8b5f5899510d7", "filename": "src/test/run-pass/simd/simd-intrinsic-generic-bitmask.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-bitmask.rs?ref=095b44c83b540bb4dbf74be1cae604f4bae87989", "patch": "@@ -0,0 +1,61 @@\n+// run-pass\n+#![allow(non_camel_case_types)]\n+\n+// ignore-emscripten\n+\n+// Test that the simd_bitmask intrinsic produces correct results.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#[allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct u8x4(pub u8, pub u8, pub u8, pub u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct Tx4<T>(pub T, pub T, pub T, pub T);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_bitmask<T, U>(x: T) -> U;\n+}\n+\n+fn main() {\n+    let z = u32x4(0, 0, 0, 0);\n+    let ez = 0_u8;\n+\n+    let o = u32x4(!0, !0, !0, !0);\n+    let eo = 0b_1111_u8;\n+\n+    let m0 = u32x4(!0, 0, !0, 0);\n+    let e0 = 0b_0000_0101_u8;\n+\n+    // Check that the MSB is extracted:\n+    let m = u8x4(0b_1000_0000, 0b_0100_0001, 0b_1100_0001, 0b_1111_1111);\n+    let e = 0b_1101;\n+\n+    // Check usize / isize\n+    let msize: Tx4<usize> = Tx4(usize::max_value(), 0, usize::max_value(), usize::max_value());\n+\n+    unsafe {\n+        let r: u8 = simd_bitmask(z);\n+        assert_eq!(r, ez);\n+\n+        let r: u8 = simd_bitmask(o);\n+        assert_eq!(r, eo);\n+\n+        let r: u8 = simd_bitmask(m0);\n+        assert_eq!(r, e0);\n+\n+        let r: u8 = simd_bitmask(m);\n+        assert_eq!(r, e);\n+\n+        let r: u8 = simd_bitmask(msize);\n+        assert_eq!(r, e);\n+\n+    }\n+}"}, {"sha": "931ee9db1fe15ac7c09eaf2eba05ae978b64890d", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=095b44c83b540bb4dbf74be1cae604f4bae87989", "patch": "@@ -0,0 +1,90 @@\n+// Test that the simd_bitmask intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x2(pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x8(\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x16(\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x32(\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x64(\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n+);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_bitmask<T, U>(x: T) -> U;\n+}\n+\n+fn main() {\n+    let m2 = u32x2(0, 0);\n+    let m4 = u32x4(0, 0, 0, 0);\n+    let m8 = u8x8(0, 0, 0, 0, 0, 0, 0, 0);\n+    let m16 = u8x16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    let m32 = u8x32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    let m64 = u8x64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+    unsafe {\n+        let _: u8 = simd_bitmask(m2);\n+        let _: u8 = simd_bitmask(m4);\n+        let _: u8 = simd_bitmask(m8);\n+        let _: u16 = simd_bitmask(m16);\n+        let _: u32 = simd_bitmask(m32);\n+        let _: u64 = simd_bitmask(m64);\n+\n+        let _: u16 = simd_bitmask(m2);\n+        //~^ ERROR bitmask `u16`, expected `u8`\n+\n+        let _: u16 = simd_bitmask(m8);\n+        //~^ ERROR bitmask `u16`, expected `u8`\n+\n+        let _: u32 = simd_bitmask(m16);\n+        //~^ ERROR bitmask `u32`, expected `u16`\n+\n+        let _: u64 = simd_bitmask(m32);\n+        //~^ ERROR bitmask `u64`, expected `u32`\n+\n+        let _: u128 = simd_bitmask(m64);\n+        //~^ ERROR bitmask `u128`, expected `u64`\n+\n+   }\n+}"}, {"sha": "d016838d098d49473682300733ce45d0e467b27a", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/095b44c83b540bb4dbf74be1cae604f4bae87989/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr?ref=095b44c83b540bb4dbf74be1cae604f4bae87989", "patch": "@@ -0,0 +1,33 @@\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:74:22\n+   |\n+LL |         let _: u16 = simd_bitmask(m2);\n+   |                      ^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:77:22\n+   |\n+LL |         let _: u16 = simd_bitmask(m8);\n+   |                      ^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u32`, expected `u16`\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:80:22\n+   |\n+LL |         let _: u32 = simd_bitmask(m16);\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u64`, expected `u32`\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:83:22\n+   |\n+LL |         let _: u64 = simd_bitmask(m32);\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u128`, expected `u64`\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:86:23\n+   |\n+LL |         let _: u128 = simd_bitmask(m64);\n+   |                       ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}]}