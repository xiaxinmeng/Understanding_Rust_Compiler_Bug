{"sha": "94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZmI5YWQ2YjMxNjdlOGI4MDczYTA5ZmNmMGNiMTM1ZjM4M2QzZDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T14:33:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T14:35:06Z"}, "message": "Fix extension name", "tree": {"sha": "89291f15bc0f6208e8f31e9a57b34a11e77ad1e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89291f15bc0f6208e8f31e9a57b34a11e77ad1e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "html_url": "https://github.com/rust-lang/rust/commit/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d793929a8f7732a586cc2f8a2322f2c02fd582", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d793929a8f7732a586cc2f8a2322f2c02fd582", "html_url": "https://github.com/rust-lang/rust/commit/13d793929a8f7732a586cc2f8a2322f2c02fd582"}], "stats": {"total": 61, "additions": 14, "deletions": 47}, "files": [{"sha": "d6d5dba95e67798fc113016e8f1fbe2ebc48972a", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "patch": "@@ -93,7 +93,7 @@ jobs:\n         working-directory: ./editors/code\n \n       - name: Copy vscode extension\n-        run: mkdir -p ./dist/code && cp ./editors/code/*.vsix ./dist/\n+        run: mkdir -p ./dist/code && cp ./editors/code/rust-analyzer.vsix ./dist/\n \n       - name: Upload artifacts\n         uses: actions/upload-artifact@v1\n@@ -112,8 +112,7 @@ jobs:\n           node-version: 12.x\n \n       - run: echo \"::set-env name=TAG::$(date --iso)\"\n-      - run: echo \"::set-env name=EXT_VERSION::0.1.$(date +%Y%m%d)\"\n-      - run: 'echo \"TAG: $TAG EXT_VERSION: $EXT_VERSION\"'\n+      - run: 'echo \"TAG: $TAG\"'\n \n       - name: Checkout repository\n         uses: actions/checkout@v1\n@@ -181,8 +180,8 @@ jobs:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         with:\n           upload_url: ${{ steps.create_release.outputs.upload_url }}\n-          asset_path: ./dist/rust-analyzer-${{ env.EXT_VERSION }}.vsix\n-          asset_name: rust-analyzer-${{ env.EXT_VERSION }}.vsix\n+          asset_path: ./dist/rust-analyzer.vsix\n+          asset_name: rust-analyzer.vsix\n           asset_content_type: application/octet-stream\n \n       - run: npm ci\n@@ -191,4 +190,4 @@ jobs:\n       - name: Publish Extension\n         working-directory: ./editors/code\n         # token from https://dev.azure.com/rust-analyzer/\n-        run: npx vsce publish $EXT_VERSION --pat ${{ secrets.MARKETPLACE_TOKEN }}\n+        run: npx vsce publish 0.1.$(date +%Y%m%d) --pat ${{ secrets.MARKETPLACE_TOKEN }}"}, {"sha": "d54b1750a40f12a52463427732e9294008bea506", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "patch": "@@ -20,7 +20,7 @@\n     },\n     \"scripts\": {\n         \"vscode:prepublish\": \"tsc && rollup -c\",\n-        \"package\": \"vsce package\",\n+        \"package\": \"vsce package -o rust-analyzer.vsix\",\n         \"watch\": \"tsc --watch\",\n         \"fmt\": \"tsfmt -r && tslint -p tsconfig.json -c tslint.json 'src/**/*.ts' --fix\"\n     },"}, {"sha": "91426377fec133e630892d58c5af878cb0093155", "filename": "xtask/src/install.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "patch": "@@ -4,7 +4,7 @@ use std::{env, path::PathBuf, str};\n \n use anyhow::{bail, format_err, Context, Result};\n \n-use crate::not_bash::{ls, pushd, rm, run};\n+use crate::not_bash::{pushd, run};\n \n // Latest stable, feel free to send a PR if this lags behind.\n const REQUIRED_RUST_VERSION: u32 = 41;\n@@ -99,28 +99,20 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n         run!(\"npm --version\").context(\"`npm` is required to build the VS Code plugin\")?;\n         run!(\"npm install\")?;\n \n-        let vsix_pkg = {\n-            rm(\"*.vsix\")?;\n-            run!(\"npm run package --scripts-prepend-node-path\")?;\n-            ls(\"*.vsix\")?.pop().unwrap()\n-        };\n+        run!(\"npm run package --scripts-prepend-node-path\")?;\n \n         let code = find_code(|bin| run!(\"{} --version\", bin).is_ok())?;\n-        run!(\"{} --install-extension {} --force\", code, vsix_pkg.display())?;\n+        run!(\"{} --install-extension rust-analyzer.vsix --force\", code)?;\n         installed_extensions = run!(\"{} --list-extensions\", code; echo = false)?;\n     } else {\n         run!(\"cmd.exe /c npm --version\")\n             .context(\"`npm` is required to build the VS Code plugin\")?;\n         run!(\"cmd.exe /c npm install\")?;\n \n-        let vsix_pkg = {\n-            rm(\"*.vsix\")?;\n-            run!(\"cmd.exe /c npm run package\")?;\n-            ls(\"*.vsix\")?.pop().unwrap()\n-        };\n+        run!(\"cmd.exe /c npm run package\")?;\n \n         let code = find_code(|bin| run!(\"cmd.exe /c {}.cmd --version\", bin).is_ok())?;\n-        run!(r\"cmd.exe /c {}.cmd --install-extension {} --force\", code, vsix_pkg.display())?;\n+        run!(r\"cmd.exe /c {}.cmd --install-extension rust-analyzer.vsix --force\", code)?;\n         installed_extensions = run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?;\n     }\n "}, {"sha": "d5577cce9239d84d71e9492f9bb0a83c83bee6be", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2", "patch": "@@ -2,8 +2,6 @@\n use std::{\n     cell::RefCell,\n     env,\n-    ffi::OsStr,\n-    fs,\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n@@ -68,40 +66,18 @@ impl Drop for Pushd {\n     }\n }\n \n-pub fn rm(glob: &str) -> Result<()> {\n-    let cwd = Env::with(|env| env.cwd());\n-    ls(glob)?.into_iter().try_for_each(|it| fs::remove_file(cwd.join(it)))?;\n-    Ok(())\n-}\n-\n pub fn rm_rf(path: impl AsRef<Path>) -> Result<()> {\n     let path = path.as_ref();\n+    if !path.exists() {\n+        return Ok(());\n+    }\n     if path.is_file() {\n         fs2::remove_file(path)\n     } else {\n         fs2::remove_dir_all(path)\n     }\n }\n \n-pub fn ls(glob: &str) -> Result<Vec<PathBuf>> {\n-    let cwd = Env::with(|env| env.cwd());\n-    let mut res = Vec::new();\n-    for entry in fs::read_dir(&cwd)? {\n-        let entry = entry?;\n-        if matches(&entry.file_name(), glob) {\n-            let path = entry.path();\n-            let path = path.strip_prefix(&cwd).unwrap();\n-            res.push(path.to_path_buf())\n-        }\n-    }\n-    return Ok(res);\n-\n-    fn matches(file_name: &OsStr, glob: &str) -> bool {\n-        assert!(glob.starts_with('*'));\n-        file_name.to_string_lossy().ends_with(&glob[1..])\n-    }\n-}\n-\n #[doc(hidden)]\n pub fn run_process(cmd: String, echo: bool) -> Result<String> {\n     run_process_inner(&cmd, echo).with_context(|| format!(\"process `{}` failed\", cmd))"}]}