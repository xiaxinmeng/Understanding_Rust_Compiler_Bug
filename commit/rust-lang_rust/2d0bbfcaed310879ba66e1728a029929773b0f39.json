{"sha": "2d0bbfcaed310879ba66e1728a029929773b0f39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMGJiZmNhZWQzMTA4NzliYTY2ZTE3MjhhMDI5OTI5NzczYjBmMzk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-10T20:56:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-10T20:56:36Z"}, "message": "Rollup merge of #51722 - Aaronepower:master, r=Mark-Simulacrum\n\nUpdated RELEASES for 1.28.0\n\n[Rendered](https://github.com/Aaronepower/rust/blob/master/RELEASES.md)\nr? @Mark-Simulacrum\ncc @rust-lang/release", "tree": {"sha": "26b4957c089cb9c4cf9decddc46de594d4e7d912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b4957c089cb9c4cf9decddc46de594d4e7d912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d0bbfcaed310879ba66e1728a029929773b0f39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRR2ECRBK7hj4Ov3rIwAAdHIIADmV/HObYtoYmbh39C7tBqxx\n7eAD8Gt4sIyg+YSiKlo9MSHETrMTiWZEfIbpipkVhyzfY0pf9K9DeeTz1unzbXSk\nItL/X0jovlb35mv4xNsST0mZWPzA7G610XwBBAMB1UnyJ/0ulJerpLgjcGLzs9Vn\nbsXKDx6nvryGAJJcTLFqJHT8SpPLvPBfQEFMVuLPMmdNzzMFB65j9EfRR36N+gQ9\nTGYK/liWtdh/Rdx+0UtDGPDHaqOnLMzs71VqauaGDlLRV49jx71jDXRP15f4ABMM\nOAb8KuhCrN9+KRNHfbyxgeONCvspfMI9MH+Mjw6nsH9w1wcF2HMWEM0qw2qIJic=\n=B3mh\n-----END PGP SIGNATURE-----\n", "payload": "tree 26b4957c089cb9c4cf9decddc46de594d4e7d912\nparent aac60ce8aa9467ed32b0854077c7a59233ab4172\nparent dab257f1932718b659564a242ee450016175d12c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1531256196 +0200\ncommitter GitHub <noreply@github.com> 1531256196 +0200\n\nRollup merge of #51722 - Aaronepower:master, r=Mark-Simulacrum\n\nUpdated RELEASES for 1.28.0\n\n[Rendered](https://github.com/Aaronepower/rust/blob/master/RELEASES.md)\nr? @Mark-Simulacrum\ncc @rust-lang/release\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0bbfcaed310879ba66e1728a029929773b0f39", "html_url": "https://github.com/rust-lang/rust/commit/2d0bbfcaed310879ba66e1728a029929773b0f39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d0bbfcaed310879ba66e1728a029929773b0f39/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aac60ce8aa9467ed32b0854077c7a59233ab4172", "url": "https://api.github.com/repos/rust-lang/rust/commits/aac60ce8aa9467ed32b0854077c7a59233ab4172", "html_url": "https://github.com/rust-lang/rust/commit/aac60ce8aa9467ed32b0854077c7a59233ab4172"}, {"sha": "dab257f1932718b659564a242ee450016175d12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab257f1932718b659564a242ee450016175d12c", "html_url": "https://github.com/rust-lang/rust/commit/dab257f1932718b659564a242ee450016175d12c"}], "stats": {"total": 147, "additions": 145, "deletions": 2}, "files": [{"sha": "cf80c166759bfbef1f66cfd4e77ce7df5b818947", "filename": "RELEASES.md", "status": "modified", "additions": 145, "deletions": 2, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/2d0bbfcaed310879ba66e1728a029929773b0f39/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d0bbfcaed310879ba66e1728a029929773b0f39/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2d0bbfcaed310879ba66e1728a029929773b0f39", "patch": "@@ -1,3 +1,146 @@\n+Version 1.28.0 (2018-08-02)\n+===========================\n+\n+Language\n+--------\n+- [The `#[repr(transparent)]` attribute is now stable.][51562] This attribute\n+  allows a Rust newtype wrapper (`struct NewType<T>(T);`) to be represented as\n+  the inner type across Foreign Function Interface (FFI) boundaries.\n+- [The keywords `pure`, `sizeof`, `alignof`, and `offsetof` have been unreserved\n+  and can now be used as identifiers.][51196]\n+- [The `GlobalAlloc` trait and `#[global_allocator]` attribute are now\n+  stable.][51241] This will allow users to specify a global allocator for\n+  their program.\n+- [Unit test functions marked with the `#[test]` attribute can now return\n+  `Result<(), E: Debug>` in addition to `()`.][51298]\n+- [The `lifetime` specifier for `macro_rules!` is now stable.][50385] This\n+  allows macros to easily target lifetimes.\n+\n+Compiler\n+--------\n+- [The `s` and `z` optimisation levels are now stable.][50265] These optimisations\n+  prioritise making smaller binary sizes. `z` is the same as `s` with the\n+  exception that it does not vectorise loops, which typically results in an even\n+  smaller binary.\n+- [The short error format is now stable.][49546] Specified with\n+  `--error-format=short` this option will provide a more compressed output of\n+  rust error messages.\n+- [Added a lint warning when you have duplicated `macro_export`s.][50143]\n+- [Reduced the number of allocations in the macro parser.][50855] This can\n+  improve compile times of macro heavy crates on average by 5%.\n+\n+Libraries\n+---------\n+- [Implemented `Default` for `&mut str`.][51306]\n+- [Implemented `From<bool>` for all integer and unsigned number types.][50554]\n+- [Implemented `Extend` for `()`.][50234]\n+- [The `Debug` implementation of `time::Duration` should now be more easily\n+  human readable.][50364] Previously a `Duration` of one second would printed as\n+  `Duration { secs: 1, nanos: 0 }` and will now be printed as `1s`.\n+- [Implemented `From<&String>` for `Cow<str>`, `From<&Vec<T>>` for `Cow<[T]>`,\n+  `From<Cow<CStr>>` for `CString`, `From<CString>, From<CStr>, From<&CString>`\n+  for `Cow<CStr>`, `From<OsString>, From<OsStr>, From<&OsString>` for\n+  `Cow<OsStr>`, `From<&PathBuf>` for `Cow<Path>`, and `From<Cow<Path>>`\n+  for `PathBuf`.][50170]\n+- [Implemented `Shl` and `Shr` for `Wrapping<u128>`\n+  and `Wrapping<i128>`.][50465]\n+- [`DirEntry::metadata` now uses `fstatat` instead of `lstat` when\n+  possible.][51050] This can provide up to a 40% speed increase.\n+- [Improved error messages when using `format!`.][50610]\n+\n+Stabilized APIs\n+---------------\n+- [`Iterator::step_by`]\n+- [`Path::ancestors`]\n+- [`btree_map::Entry::or_default`]\n+- [`fmt::Alignment`]\n+- [`hash_map::Entry::or_default`]\n+- [`iter::repeat_with`]\n+- [`num::NonZeroUsize`]\n+- [`num::NonZeroU128`]\n+- [`num::NonZeroU16`]\n+- [`num::NonZeroU32`]\n+- [`num::NonZeroU64`]\n+- [`num::NonZeroU8`]\n+- [`ops::RangeBounds`]\n+- [`slice::SliceIndex`]\n+- [`slice::from_mut`]\n+- [`slice::from_ref`]\n+- [`{Any + Send + Sync}::downcast_mut`]\n+- [`{Any + Send + Sync}::downcast_ref`]\n+- [`{Any + Send + Sync}::is`]\n+\n+Cargo\n+-----\n+- [Cargo will now no longer allow you to publish crates with build scripts that\n+  modify the `src` directory.][cargo/5584] The `src` directory in a crate should be\n+  considered to be immutable.\n+\n+Misc\n+----\n+- [The `suggestion_applicability` field in `rustc`'s json output is now\n+  stable.][50486] This will allow dev tools to check whether a code suggestion\n+  would apply to them.\n+\n+Compatibility Notes\n+-------------------\n+- [Rust will no longer consider trait objects with duplicated constraints to\n+  have implementations.][51276] For example the below code will now fail\n+  to compile.\n+  ```rust\n+  trait Trait {}\n+\n+  impl Trait + Send {\n+      fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n+  }\n+\n+  impl Trait + Send + Send {\n+      fn test(&self) { println!(\"two\"); }\n+  }\n+  ```\n+\n+[49546]: https://github.com/rust-lang/rust/pull/49546/\n+[50143]: https://github.com/rust-lang/rust/pull/50143/\n+[50170]: https://github.com/rust-lang/rust/pull/50170/\n+[50234]: https://github.com/rust-lang/rust/pull/50234/\n+[50265]: https://github.com/rust-lang/rust/pull/50265/\n+[50364]: https://github.com/rust-lang/rust/pull/50364/\n+[50385]: https://github.com/rust-lang/rust/pull/50385/\n+[50465]: https://github.com/rust-lang/rust/pull/50465/\n+[50486]: https://github.com/rust-lang/rust/pull/50486/\n+[50554]: https://github.com/rust-lang/rust/pull/50554/\n+[50610]: https://github.com/rust-lang/rust/pull/50610/\n+[50855]: https://github.com/rust-lang/rust/pull/50855/\n+[51050]: https://github.com/rust-lang/rust/pull/51050/\n+[51196]: https://github.com/rust-lang/rust/pull/51196/\n+[51200]: https://github.com/rust-lang/rust/pull/51200/\n+[51241]: https://github.com/rust-lang/rust/pull/51241/\n+[51276]: https://github.com/rust-lang/rust/pull/51276/\n+[51298]: https://github.com/rust-lang/rust/pull/51298/\n+[51306]: https://github.com/rust-lang/rust/pull/51306/\n+[51562]: https://github.com/rust-lang/rust/pull/51562/\n+[cargo/5584]: https://github.com/rust-lang/cargo/pull/5584/\n+[`Iterator::step_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by\n+[`Path::ancestors`]: https://doc.rust-lang.org/std/path/struct.Path.html#method.ancestors\n+[`btree_map::Entry::or_default`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default\n+[`fmt::Alignment`]: https://doc.rust-lang.org/std/fmt/enum.Alignment.html\n+[`hash_map::Entry::or_default`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default\n+[`iter::repeat_with`]: https://doc.rust-lang.org/std/iter/fn.repeat_with.html\n+[`num::NonZeroUsize`]: https://doc.rust-lang.org/std/num/struct.NonZeroUsize.html\n+[`num::NonZeroU128`]: https://doc.rust-lang.org/std/num/struct.NonZeroU128.html\n+[`num::NonZeroU16`]: https://doc.rust-lang.org/std/num/struct.NonZeroU16.html\n+[`num::NonZeroU32`]: https://doc.rust-lang.org/std/num/struct.NonZeroU32.html\n+[`num::NonZeroU64`]: https://doc.rust-lang.org/std/num/struct.NonZeroU64.html\n+[`num::NonZeroU8`]: https://doc.rust-lang.org/std/num/struct.NonZeroU8.html\n+[`ops::RangeBounds`]: https://doc.rust-lang.org/std/ops/trait.RangeBounds.html\n+[`slice::SliceIndex`]: https://doc.rust-lang.org/std/slice/trait.SliceIndex.html\n+[`slice::from_mut`]: https://doc.rust-lang.org/std/slice/fn.from_mut.html\n+[`slice::from_ref`]: https://doc.rust-lang.org/std/slice/fn.from_ref.html\n+[`{Any + Send + Sync}::downcast_mut`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut-2\n+[`{Any + Send + Sync}::downcast_ref`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref-2\n+[`{Any + Send + Sync}::is`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.is-2\n+\n+\n Version 1.27.0 (2018-06-21)\n ==========================\n \n@@ -188,7 +331,7 @@ Language\n - [Closures now implement `Copy` and/or `Clone` if all captured variables\n   implement either or both traits.][49299]\n - [The inclusive range syntax e.g. `for x in 0..=10` is now stable.][47813]\n-- [Stablise `'_`. The underscore lifetime can be used anywhere where a\n+- [The `'_` lifetime is now stable. The underscore lifetime can be used anywhere where a\n   lifetime can be elided.][49458]\n - [`impl Trait` is now stable allowing you to have abstract types in returns\n    or in function parameters.][49255] e.g. `fn foo() -> impl Iterator<Item=u8>` or\n@@ -389,7 +532,7 @@ Version 1.25.0 (2018-03-29)\n \n Language\n --------\n-- [Stabilised `#[repr(align(x))]`.][47006] [RFC 1358]\n+- [The `#[repr(align(x))]` attribute is now stable.][47006] [RFC 1358]\n - [You can now use nested groups of imports.][47948]\n   e.g. `use std::{fs::File, io::Read, path::{Path, PathBuf}};`\n - [You can now have `|` at the start of a match arm.][47947] e.g."}]}