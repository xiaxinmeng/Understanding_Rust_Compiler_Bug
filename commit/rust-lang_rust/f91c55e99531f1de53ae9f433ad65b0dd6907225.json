{"sha": "f91c55e99531f1de53ae9f433ad65b0dd6907225", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MWM1NWU5OTUzMWYxZGU1M2FlOWY0MzNhZDY1YjBkZDY5MDcyMjU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-09-29T23:58:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-29T23:58:52Z"}, "message": "Rollup merge of #44287 - Eh2406:master, r=aturon\n\nAllow T op= &T for built-in numeric types T v2\n\nManually rebase of @Migi https://github.com/rust-lang/rust/pull/41336", "tree": {"sha": "ac38296fc9c8b66a7de649fadbb28491cd6eee06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac38296fc9c8b66a7de649fadbb28491cd6eee06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91c55e99531f1de53ae9f433ad65b0dd6907225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91c55e99531f1de53ae9f433ad65b0dd6907225", "html_url": "https://github.com/rust-lang/rust/commit/f91c55e99531f1de53ae9f433ad65b0dd6907225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91c55e99531f1de53ae9f433ad65b0dd6907225/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f407b2bf4aa8154cd398c7823474efee8be17213", "url": "https://api.github.com/repos/rust-lang/rust/commits/f407b2bf4aa8154cd398c7823474efee8be17213", "html_url": "https://github.com/rust-lang/rust/commit/f407b2bf4aa8154cd398c7823474efee8be17213"}, {"sha": "2adeba62077fc7630d57705cce4f2f0e9029351e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2adeba62077fc7630d57705cce4f2f0e9029351e", "html_url": "https://github.com/rust-lang/rust/commit/2adeba62077fc7630d57705cce4f2f0e9029351e"}], "stats": {"total": 150, "additions": 147, "deletions": 3}, "files": [{"sha": "cb215a38e5356247808236b1286732338a53ebc9", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -68,3 +68,22 @@ macro_rules! forward_ref_binop {\n         }\n     }\n }\n+\n+// implements \"T op= &U\", based on \"T op= U\"\n+// where U is expected to be `Copy`able\n+macro_rules! forward_ref_op_assign {\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_op_assign!(impl $imp, $method for $t, $u,\n+                #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]);\n+    };\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        impl<'a> $imp<&'a $u> for $t {\n+            #[inline]\n+            fn $method(&mut self, other: &'a $u) {\n+                $imp::$method(self, *other);\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "ae1b0b3ce11b209cfff581408724b3a05a4c864f", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -36,6 +36,7 @@ macro_rules! sh_impl_signed {\n                 *self = *self << other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Shr<$f> for Wrapping<$t> {\n@@ -58,6 +59,7 @@ macro_rules! sh_impl_signed {\n                 *self = *self >> other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n     )\n }\n \n@@ -80,6 +82,7 @@ macro_rules! sh_impl_unsigned {\n                 *self = *self << other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Shr<$f> for Wrapping<$t> {\n@@ -98,6 +101,7 @@ macro_rules! sh_impl_unsigned {\n                 *self = *self >> other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n     )\n }\n \n@@ -142,6 +146,7 @@ macro_rules! wrapping_impl {\n                 *self = *self + other;\n             }\n         }\n+        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Sub for Wrapping<$t> {\n@@ -162,6 +167,7 @@ macro_rules! wrapping_impl {\n                 *self = *self - other;\n             }\n         }\n+        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Mul for Wrapping<$t> {\n@@ -182,6 +188,7 @@ macro_rules! wrapping_impl {\n                 *self = *self * other;\n             }\n         }\n+        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n         impl Div for Wrapping<$t> {\n@@ -202,6 +209,7 @@ macro_rules! wrapping_impl {\n                 *self = *self / other;\n             }\n         }\n+        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n         impl Rem for Wrapping<$t> {\n@@ -222,6 +230,7 @@ macro_rules! wrapping_impl {\n                 *self = *self % other;\n             }\n         }\n+        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Not for Wrapping<$t> {\n@@ -254,6 +263,7 @@ macro_rules! wrapping_impl {\n                 *self = *self ^ other;\n             }\n         }\n+        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitOr for Wrapping<$t> {\n@@ -274,6 +284,7 @@ macro_rules! wrapping_impl {\n                 *self = *self | other;\n             }\n         }\n+        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitAnd for Wrapping<$t> {\n@@ -294,6 +305,7 @@ macro_rules! wrapping_impl {\n                 *self = *self & other;\n             }\n         }\n+        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n         impl Neg for Wrapping<$t> {"}, {"sha": "8b3d662a6db774382bd9b14e7591ed55bffca87e", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -662,6 +662,8 @@ macro_rules! add_assign_impl {\n             #[rustc_inherit_overflow_checks]\n             fn add_assign(&mut self, other: $t) { *self += other }\n         }\n+\n+        forward_ref_op_assign! { impl AddAssign, add_assign for $t, $t }\n     )+)\n }\n \n@@ -713,6 +715,8 @@ macro_rules! sub_assign_impl {\n             #[rustc_inherit_overflow_checks]\n             fn sub_assign(&mut self, other: $t) { *self -= other }\n         }\n+\n+        forward_ref_op_assign! { impl SubAssign, sub_assign for $t, $t }\n     )+)\n }\n \n@@ -755,6 +759,8 @@ macro_rules! mul_assign_impl {\n             #[rustc_inherit_overflow_checks]\n             fn mul_assign(&mut self, other: $t) { *self *= other }\n         }\n+\n+        forward_ref_op_assign! { impl MulAssign, mul_assign for $t, $t }\n     )+)\n }\n \n@@ -796,6 +802,8 @@ macro_rules! div_assign_impl {\n             #[inline]\n             fn div_assign(&mut self, other: $t) { *self /= other }\n         }\n+\n+        forward_ref_op_assign! { impl DivAssign, div_assign for $t, $t }\n     )+)\n }\n \n@@ -841,6 +849,8 @@ macro_rules! rem_assign_impl {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) { *self %= other }\n         }\n+\n+        forward_ref_op_assign! { impl RemAssign, rem_assign for $t, $t }\n     )+)\n }\n "}, {"sha": "7ac5fc4debf1489150e9f1d4e151e1c60231edc0", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -593,6 +593,8 @@ macro_rules! bitand_assign_impl {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) { *self &= other }\n         }\n+\n+        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for $t, $t }\n     )+)\n }\n \n@@ -638,6 +640,8 @@ macro_rules! bitor_assign_impl {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) { *self |= other }\n         }\n+\n+        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for $t, $t }\n     )+)\n }\n \n@@ -683,6 +687,8 @@ macro_rules! bitxor_assign_impl {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) { *self ^= other }\n         }\n+\n+        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for $t, $t }\n     )+)\n }\n \n@@ -729,6 +735,8 @@ macro_rules! shl_assign_impl {\n                 *self <<= other\n             }\n         }\n+\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for $t, $f }\n     )\n }\n \n@@ -793,6 +801,8 @@ macro_rules! shr_assign_impl {\n                 *self >>= other\n             }\n         }\n+\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for $t, $f }\n     )\n }\n "}, {"sha": "0bfc4d2264c622ce9e6e7c957db349ca1a22c161", "filename": "src/test/run-pass/for-loop-unconstrained-element-type-i32-fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // Test that the type of `sum` falls back to `i32` here,\n-// and that the for loop desugaring doesn't inferfere with\n+// and that the for loop desugaring doesn't interfere with\n // that.\n \n fn main() {\n     let mut sum = 0;\n     for i in Vec::new() {\n-        sum += i;\n+        sum += &i;\n     }\n }"}, {"sha": "20c7f27336e2520986d27325f38cb388246005d1", "filename": "src/test/run-pass/num-wrapping.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -173,6 +173,15 @@ fn test_op_assigns() {\n                 tmp.$op(Wrapping($rhs));\n                 assert_eq!(black_box(tmp), Wrapping($ans));\n             }\n+\n+            // also test that a &Wrapping<T> right-hand side is possible\n+            {\n+                let mut tmp = Wrapping($initial);\n+                tmp = black_box(tmp);\n+                tmp.$op(&Wrapping($rhs));\n+                assert_eq!(black_box(tmp), Wrapping($ans));\n+            }\n+\n             // FIXME(30524): Uncomment this test\n             /*\n             {"}, {"sha": "230d44ba647a5d41f29368add82f517f0ed19b92", "filename": "src/test/run-pass/op-assign-builtins-by-ref.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftest%2Frun-pass%2Fop-assign-builtins-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftest%2Frun-pass%2Fop-assign-builtins-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fop-assign-builtins-by-ref.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // test compound assignment operators with ref as right-hand side,\n+    // for each operator, with various types as operands.\n+\n+    // test AddAssign\n+    {\n+        let mut x = 3i8;\n+        x += &2i8;\n+        assert_eq!(x, 5i8);\n+    }\n+\n+    // test SubAssign\n+    {\n+        let mut x = 7i16;\n+        x -= &4;\n+        assert_eq!(x, 3i16);\n+    }\n+\n+    // test MulAssign\n+    {\n+        let mut x = 3f32;\n+        x *= &3f32;\n+        assert_eq!(x, 9f32);\n+    }\n+\n+    // test DivAssign\n+    {\n+        let mut x = 6f64;\n+        x /= &2f64;\n+        assert_eq!(x, 3f64);\n+    }\n+\n+    // test RemAssign\n+    {\n+        let mut x = 7i64;\n+        x %= &4i64;\n+        assert_eq!(x, 3i64);\n+    }\n+\n+    // test BitOrAssign\n+    {\n+        let mut x = 0b1010u8;\n+        x |= &0b1100u8;\n+        assert_eq!(x, 0b1110u8);\n+    }\n+\n+    // test BitAndAssign\n+    {\n+        let mut x = 0b1010u16;\n+        x &= &0b1100u16;\n+        assert_eq!(x, 0b1000u16);\n+    }\n+\n+    // test BitXorAssign\n+    {\n+        let mut x = 0b1010u32;\n+        x ^= &0b1100u32;\n+        assert_eq!(x, 0b0110u32);\n+    }\n+\n+    // test ShlAssign\n+    {\n+        let mut x = 0b1010u64;\n+        x <<= &2u32;\n+        assert_eq!(x, 0b101000u64);\n+    }\n+\n+    // test ShrAssign\n+    {\n+        let mut x = 0b1010u64;\n+        x >>= &2i16;\n+        assert_eq!(x, 0b10u64);\n+    }\n+}"}, {"sha": "0a9da26d9968d1ee073f42e9058e7934408dd64a", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c55e99531f1de53ae9f433ad65b0dd6907225/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=f91c55e99531f1de53ae9f433ad65b0dd6907225", "patch": "@@ -49,7 +49,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"xsv\",\n         repo: \"https://github.com/BurntSushi/xsv\",\n-        sha: \"a9a7163f2a2953cea426fee1216bec914fe2f56a\",\n+        sha: \"4b308adbe48ac81657fd124b90b44f7c3263f771\",\n         lock: None,\n     },\n ];"}]}