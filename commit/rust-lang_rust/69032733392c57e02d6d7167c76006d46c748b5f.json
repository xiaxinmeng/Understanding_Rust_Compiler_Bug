{"sha": "69032733392c57e02d6d7167c76006d46c748b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MDMyNzMzMzkyYzU3ZTAyZDZkNzE2N2M3NjAwNmQ0NmM3NDhiNWY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-14T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-14T00:00:00Z"}, "message": "Lower intrinsics calls: forget, size_of, unreachable, wrapping_*\n\nThis allows constant propagation to evaluate `size_of` and `wrapping_*`,\nand unreachable propagation to propagate a call to `unreachable`.\n\nThe lowering is performed as a MIR optimization, rather than during MIR\nbuilding to preserve the special status of intrinsics with respect to\nunsafety checks and promotion.", "tree": {"sha": "5fa47242481799be8244b34a16130119d664ed73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa47242481799be8244b34a16130119d664ed73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69032733392c57e02d6d7167c76006d46c748b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69032733392c57e02d6d7167c76006d46c748b5f", "html_url": "https://github.com/rust-lang/rust/commit/69032733392c57e02d6d7167c76006d46c748b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69032733392c57e02d6d7167c76006d46c748b5f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e49a9ead550551e879af64ba91a0316da1c422", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e49a9ead550551e879af64ba91a0316da1c422", "html_url": "https://github.com/rust-lang/rust/commit/30e49a9ead550551e879af64ba91a0316da1c422"}], "stats": {"total": 378, "additions": 373, "deletions": 5}, "files": [{"sha": "da937094c41702c163465971f254c2407176eedf", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,108 @@\n+//! Lowers intrinsic calls\n+\n+use crate::transform::MirPass;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::spec::abi::Abi;\n+\n+pub struct LowerIntrinsics;\n+\n+impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        for block in body.basic_blocks_mut() {\n+            let terminator = block.terminator.as_mut().unwrap();\n+            if let TerminatorKind::Call {\n+                func: Operand::Constant(box Constant { literal: ty::Const { ty: func_ty, .. }, .. }),\n+                args,\n+                destination,\n+                ..\n+            } = &mut terminator.kind\n+            {\n+                let (intrinsic_name, substs) = match resolve_rust_intrinsic(tcx, func_ty) {\n+                    None => continue,\n+                    Some(it) => it,\n+                };\n+                match intrinsic_name {\n+                    sym::unreachable => {\n+                        terminator.kind = TerminatorKind::Unreachable;\n+                    }\n+                    sym::forget => {\n+                        if let Some((destination, target)) = *destination {\n+                            block.statements.push(Statement {\n+                                source_info: terminator.source_info,\n+                                kind: StatementKind::Assign(box (\n+                                    destination,\n+                                    Rvalue::Use(Operand::Constant(box Constant {\n+                                        span: terminator.source_info.span,\n+                                        user_ty: None,\n+                                        literal: ty::Const::zero_sized(tcx, tcx.types.unit),\n+                                    })),\n+                                )),\n+                            });\n+                            terminator.kind = TerminatorKind::Goto { target };\n+                        }\n+                    }\n+                    sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n+                        if let Some((destination, target)) = *destination {\n+                            let lhs;\n+                            let rhs;\n+                            {\n+                                let mut args = args.drain(..);\n+                                lhs = args.next().unwrap();\n+                                rhs = args.next().unwrap();\n+                            }\n+                            let bin_op = match intrinsic_name {\n+                                sym::wrapping_add => BinOp::Add,\n+                                sym::wrapping_sub => BinOp::Sub,\n+                                sym::wrapping_mul => BinOp::Mul,\n+                                _ => bug!(\"unexpected intrinsic\"),\n+                            };\n+                            block.statements.push(Statement {\n+                                source_info: terminator.source_info,\n+                                kind: StatementKind::Assign(box (\n+                                    destination,\n+                                    Rvalue::BinaryOp(bin_op, lhs, rhs),\n+                                )),\n+                            });\n+                            terminator.kind = TerminatorKind::Goto { target };\n+                        }\n+                    }\n+                    sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n+                        // The checked binary operations are not suitable target for lowering here,\n+                        // since their semantics depend on the value of overflow-checks flag used\n+                        // during codegen. Issue #35310.\n+                    }\n+                    sym::size_of => {\n+                        if let Some((destination, target)) = *destination {\n+                            let tp_ty = substs.type_at(0);\n+                            block.statements.push(Statement {\n+                                source_info: terminator.source_info,\n+                                kind: StatementKind::Assign(box (\n+                                    destination,\n+                                    Rvalue::NullaryOp(NullOp::SizeOf, tp_ty),\n+                                )),\n+                            });\n+                            terminator.kind = TerminatorKind::Goto { target };\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn resolve_rust_intrinsic(\n+    tcx: TyCtxt<'tcx>,\n+    func_ty: Ty<'tcx>,\n+) -> Option<(Symbol, SubstsRef<'tcx>)> {\n+    if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n+        let fn_sig = func_ty.fn_sig(tcx);\n+        if fn_sig.abi() == Abi::RustIntrinsic {\n+            return Some((tcx.item_name(def_id), substs));\n+        }\n+    }\n+    None\n+}"}, {"sha": "2f81db8af2f11129222367560c6ca790932c3f7c", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -32,6 +32,7 @@ pub mod function_item_references;\n pub mod generator;\n pub mod inline;\n pub mod instcombine;\n+pub mod lower_intrinsics;\n pub mod match_branches;\n pub mod multiple_return_terminators;\n pub mod no_landing_pads;\n@@ -390,6 +391,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     // The main optimizations that we do on MIR.\n     let optimizations: &[&dyn MirPass<'tcx>] = &[\n+        &lower_intrinsics::LowerIntrinsics,\n         &remove_unneeded_drops::RemoveUnneededDrops,\n         &match_branches::MatchBranchSimplification,\n         // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)"}, {"sha": "654dd8275c9dec52b350dee0aa441df5f90fbd8f", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `f_u64` before PreCodegen\n+\n+fn f_u64() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:16\n+    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        debug t => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        let mut _2: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        }\n+    }\n+\n+    bb0: {\n+        _2 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        _1 = f_non_zst::<u64>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/lower_intrinsics.rs:35:5: 35:21\n+                                         // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:34:16: 36:2\n+        return;                          // scope 0 at $DIR/lower_intrinsics.rs:36:2: 36:2\n+    }\n+}"}, {"sha": "f8857eda7372174691872fa28cd53bbaa6eba861", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,28 @@\n+// MIR for `f_unit` before PreCodegen\n+\n+fn f_unit() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:28:17: 28:17\n+    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:29:16: 29:18\n+    scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:29:16: 29:18\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/lower_intrinsics.rs:29:5: 29:19\n+                                         // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:29:18: 29:19\n+        _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:28:17: 30:2\n+        return;                          // scope 0 at $DIR/lower_intrinsics.rs:30:2: 30:2\n+    }\n+}"}, {"sha": "6b2d3833c2f5c1e9a5620607f7f63f3216c9ae37", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `forget` before LowerIntrinsics\n++ // MIR for `forget` after LowerIntrinsics\n+  \n+  fn forget(_1: T) -> () {\n+      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:18:18: 18:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:18:24: 18:24\n+      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:19:14: 19:41\n+      let mut _3: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:19:39: 19:40\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:43\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:19:39: 19:40\n+          _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:19:39: 19:40\n+-         _2 = std::intrinsics::forget::<T>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:19:14: 19:41\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:19:14: 19:38\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(Scalar(<ZST>)) }\n++         _2 = const ();                   // scope 1 at $DIR/lower_intrinsics.rs:19:14: 19:41\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:19:14: 19:41\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:19:40: 19:41\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:43: 19:44\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:18:24: 20:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:20:2: 20:2\n+      }\n+  }\n+  "}, {"sha": "e08d620c4b13f9ead6ed9eed55eca632b1d508ac", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,52 @@\n+// compile-flags: -Cpanic=abort\n+#![feature(core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR lower_intrinsics.wrapping.LowerIntrinsics.diff\n+pub fn wrapping<T: Copy>(a: T, b: T) {\n+    let _x = core::intrinsics::wrapping_add(a, b);\n+    let _y = core::intrinsics::wrapping_sub(a, b);\n+    let _z = core::intrinsics::wrapping_mul(a, b);\n+}\n+\n+// EMIT_MIR lower_intrinsics.size_of.LowerIntrinsics.diff\n+pub fn size_of<T>() -> usize {\n+    core::intrinsics::size_of::<T>()\n+}\n+\n+// EMIT_MIR lower_intrinsics.forget.LowerIntrinsics.diff\n+pub fn forget<T>(t: T) {\n+    unsafe { core::intrinsics::forget(t) };\n+}\n+\n+// EMIT_MIR lower_intrinsics.unreachable.LowerIntrinsics.diff\n+pub fn unreachable() -> ! {\n+    unsafe { core::intrinsics::unreachable() };\n+}\n+\n+// EMIT_MIR lower_intrinsics.f_unit.PreCodegen.before.mir\n+pub fn f_unit() {\n+    f_dispatch(());\n+}\n+\n+\n+// EMIT_MIR lower_intrinsics.f_u64.PreCodegen.before.mir\n+pub fn f_u64() {\n+    f_dispatch(0u64);\n+}\n+\n+#[inline(always)]\n+pub fn f_dispatch<T>(t: T) {\n+    if std::mem::size_of::<T>() == 0 {\n+        f_zst(t);\n+    } else {\n+        f_non_zst(t);\n+    }\n+}\n+\n+#[inline(never)]\n+pub fn f_zst<T>(t: T) {\n+}\n+\n+#[inline(never)]\n+pub fn f_non_zst<T>(t: T) {}"}, {"sha": "262385e9f5e24ffc03be6b65ea15518b447c8cac", "filename": "src/test/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,20 @@\n+- // MIR for `size_of` before LowerIntrinsics\n++ // MIR for `size_of` after LowerIntrinsics\n+  \n+  fn size_of() -> usize {\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:13:24: 13:29\n+  \n+      bb0: {\n+-         _0 = std::intrinsics::size_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:14:5: 14:37\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:14:5: 14:35\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(Scalar(<ZST>)) }\n++         _0 = SizeOf(T);                  // scope 0 at $DIR/lower_intrinsics.rs:14:5: 14:37\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:14:5: 14:37\n+      }\n+  \n+      bb1: {\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:15:2: 15:2\n+      }\n+  }\n+  "}, {"sha": "b58cb333244f1954539fac265b3b2dc5c0459648", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `unreachable` before LowerIntrinsics\n++ // MIR for `unreachable` after LowerIntrinsics\n+  \n+  fn unreachable() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:23:25: 23:26\n+      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:23:27: 25:2\n+      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:47\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+-         std::intrinsics::unreachable();  // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:24:14: 24:43\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }\n++         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+      }\n+  }\n+  "}, {"sha": "ce03ce90e5225677ac7eb81b07a9fd9d5df275e7", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `wrapping` before LowerIntrinsics\n++ // MIR for `wrapping` after LowerIntrinsics\n+  \n+  fn wrapping(_1: T, _2: T) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:6:26: 6:27\n+      debug b => _2;                       // in scope 0 at $DIR/lower_intrinsics.rs:6:32: 6:33\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:6:38: 6:38\n+      let _3: T;                           // in scope 0 at $DIR/lower_intrinsics.rs:7:9: 7:11\n+      let mut _4: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:7:45: 7:46\n+      let mut _5: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:7:48: 7:49\n+      let mut _7: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:8:45: 8:46\n+      let mut _8: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:8:48: 8:49\n+      let mut _10: T;                      // in scope 0 at $DIR/lower_intrinsics.rs:9:45: 9:46\n+      let mut _11: T;                      // in scope 0 at $DIR/lower_intrinsics.rs:9:48: 9:49\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/lower_intrinsics.rs:7:9: 7:11\n+          let _6: T;                       // in scope 1 at $DIR/lower_intrinsics.rs:8:9: 8:11\n+          scope 2 {\n+              debug _y => _6;              // in scope 2 at $DIR/lower_intrinsics.rs:8:9: 8:11\n+              let _9: T;                   // in scope 2 at $DIR/lower_intrinsics.rs:9:9: 9:11\n+              scope 3 {\n+                  debug _z => _9;          // in scope 3 at $DIR/lower_intrinsics.rs:9:9: 9:11\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:7:9: 7:11\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:7:45: 7:46\n+          _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:7:45: 7:46\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:7:48: 7:49\n+          _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:7:48: 7:49\n+-         _3 = wrapping_add::<T>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:7:14: 7:44\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {std::intrinsics::wrapping_add::<T>}, val: Value(Scalar(<ZST>)) }\n++         _3 = Add(move _4, move _5);      // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:7:49: 7:50\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:7:49: 7:50\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:8:9: 8:11\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:8:45: 8:46\n+          _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:8:45: 8:46\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:8:48: 8:49\n+          _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:8:48: 8:49\n+-         _6 = wrapping_sub::<T>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:8:14: 8:44\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {std::intrinsics::wrapping_sub::<T>}, val: Value(Scalar(<ZST>)) }\n++         _6 = Sub(move _7, move _8);      // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n++         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n+      }\n+  \n+      bb2: {\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:8:49: 8:50\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:8:49: 8:50\n+          StorageLive(_9);                 // scope 2 at $DIR/lower_intrinsics.rs:9:9: 9:11\n+          StorageLive(_10);                // scope 2 at $DIR/lower_intrinsics.rs:9:45: 9:46\n+          _10 = _1;                        // scope 2 at $DIR/lower_intrinsics.rs:9:45: 9:46\n+          StorageLive(_11);                // scope 2 at $DIR/lower_intrinsics.rs:9:48: 9:49\n+          _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:9:48: 9:49\n+-         _9 = wrapping_mul::<T>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {std::intrinsics::wrapping_mul::<T>}, val: Value(Scalar(<ZST>)) }\n++         _9 = Mul(move _10, move _11);    // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n++         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n+      }\n+  \n+      bb3: {\n+          StorageDead(_11);                // scope 2 at $DIR/lower_intrinsics.rs:9:49: 9:50\n+          StorageDead(_10);                // scope 2 at $DIR/lower_intrinsics.rs:9:49: 9:50\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:6:38: 10:2\n+          StorageDead(_9);                 // scope 2 at $DIR/lower_intrinsics.rs:10:1: 10:2\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:10:1: 10:2\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:10:2: 10:2\n+      }\n+  }\n+  "}, {"sha": "fdbe3f0c592946285a0befaff2aeebef90a20918", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69032733392c57e02d6d7167c76006d46c748b5f/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=69032733392c57e02d6d7167c76006d46c748b5f", "patch": "@@ -19,11 +19,6 @@ note: ...which requires const-evaluating + checking `std::mem::size_of`...\n    |\n LL | pub const fn size_of<T>() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `std::intrinsics::size_of`...\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |     pub fn size_of<T>() -> usize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `[u8; _]`...\n    = note: ...which again requires simplifying constant for the type system `Foo::bytes::{constant#0}`, completing the cycle"}]}