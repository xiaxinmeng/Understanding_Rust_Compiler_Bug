{"sha": "9f6f35bef4986e02f811a1fb7c3da212241784a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmYzNWJlZjQ5ODZlMDJmODExYTFmYjdjM2RhMjEyMjQxNzg0YTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-21T16:31:37Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T13:34:01Z"}, "message": "Added support for parsing `in PLACE { BLOCK_CONTENT }`.", "tree": {"sha": "2607e761ec89c8dd6af7306a24ebebc446c53acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2607e761ec89c8dd6af7306a24ebebc446c53acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6f35bef4986e02f811a1fb7c3da212241784a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6f35bef4986e02f811a1fb7c3da212241784a8", "html_url": "https://github.com/rust-lang/rust/commit/9f6f35bef4986e02f811a1fb7c3da212241784a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6f35bef4986e02f811a1fb7c3da212241784a8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b44797ce644210af0fd1596d1aa2e5338c976b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b44797ce644210af0fd1596d1aa2e5338c976b", "html_url": "https://github.com/rust-lang/rust/commit/e0b44797ce644210af0fd1596d1aa2e5338c976b"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "6c10d6efa50457197bfeef84d2ba828d7adce271", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9f6f35bef4986e02f811a1fb7c3da212241784a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6f35bef4986e02f811a1fb7c3da212241784a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9f6f35bef4986e02f811a1fb7c3da212241784a8", "patch": "@@ -2612,18 +2612,43 @@ impl<'a> Parser<'a> {\n             ex = ExprAddrOf(m, e);\n           }\n           token::Ident(_, _) => {\n-            if !self.check_keyword(keywords::Box) {\n+            if !self.check_keyword(keywords::Box) && !self.check_keyword(keywords::In) {\n                 return self.parse_dot_or_call_expr();\n             }\n \n             let lo = self.span.lo;\n-            let box_hi = self.span.hi;\n+            let keyword_hi = self.span.hi;\n \n+            let is_in = self.token.is_keyword(keywords::In);\n             try!(self.bump());\n \n-            // Check for a place: `box(PLACE) EXPR`.\n+            if is_in {\n+              let place = try!(self.parse_expr_res(Restrictions::RESTRICTION_NO_STRUCT_LITERAL));\n+              let blk = try!(self.parse_block());\n+              hi = blk.span.hi;\n+              let blk_expr = self.mk_expr(blk.span.lo, blk.span.hi, ExprBlock(blk));\n+              ex = ExprBox(Some(place), blk_expr);\n+              return Ok(self.mk_expr(lo, hi, ex));\n+            }\n+\n+            // FIXME (#22181) Remove `box (PLACE) EXPR` support\n+            // entirely after next release (enabling `(box (EXPR))`),\n+            // since it will be replaced by `in PLACE { EXPR }`, ...\n+            //\n+            // ... but for now: check for a place: `box(PLACE) EXPR`.\n+\n             if try!(self.eat(&token::OpenDelim(token::Paren)) ){\n-                // Support `box() EXPR` as the default.\n+                // SNAP ba0e1cd\n+                // Enable this warning after snapshot ...\n+                //\n+                // let box_span = mk_sp(lo, self.last_span.hi);\n+                // self.span_warn(\n+                //     box_span,\n+                //     \"deprecated syntax; use the `in` keyword now \\\n+                //            (e.g. change `box (<expr>) <expr>` to \\\n+                //                         `in <expr> { <expr> }`)\");\n+\n+                // Continue supporting `box () EXPR` (temporarily)\n                 if !try!(self.eat(&token::CloseDelim(token::Paren)) ){\n                     let place = try!(self.parse_expr_nopanic());\n                     try!(self.expect(&token::CloseDelim(token::Paren)));\n@@ -2634,10 +2659,9 @@ impl<'a> Parser<'a> {\n                         self.span_err(span,\n                                       &format!(\"expected expression, found `{}`\",\n                                               this_token_to_string));\n-                        let box_span = mk_sp(lo, box_hi);\n-                        self.span_suggestion(box_span,\n-                                             \"try using `box()` instead:\",\n-                                             \"box()\".to_string());\n+                        let box_span = mk_sp(lo, keyword_hi);\n+                        let new_expr = format!(\"box () {}\", pprust::expr_to_string(&place));\n+                        self.span_suggestion(box_span, \"try using `box ()` instead:\", new_expr);\n                         self.abort_if_errors();\n                     }\n                     let subexpression = try!(self.parse_prefix_expr());\n@@ -2650,6 +2674,7 @@ impl<'a> Parser<'a> {\n             // Otherwise, we use the unique pointer default.\n             let subexpression = try!(self.parse_prefix_expr());\n             hi = subexpression.span.hi;\n+\n             // FIXME (pnkfelix): After working out kinks with box\n             // desugaring, should be `ExprBox(None, subexpression)`\n             // instead."}]}