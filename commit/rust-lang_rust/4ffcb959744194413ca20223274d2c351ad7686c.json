{"sha": "4ffcb959744194413ca20223274d2c351ad7686c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZmNiOTU5NzQ0MTk0NDEzY2EyMDIyMzI3NGQyYzM1MWFkNzY4NmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-10T00:39:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-10T00:40:37Z"}, "message": "rustc: Perform region inference", "tree": {"sha": "cf5ab5de7c08561e7472283a4312c3b783fc15ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf5ab5de7c08561e7472283a4312c3b783fc15ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ffcb959744194413ca20223274d2c351ad7686c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffcb959744194413ca20223274d2c351ad7686c", "html_url": "https://github.com/rust-lang/rust/commit/4ffcb959744194413ca20223274d2c351ad7686c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ffcb959744194413ca20223274d2c351ad7686c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f55e7d0870756712c0926f5b3621147dc9a82a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f55e7d0870756712c0926f5b3621147dc9a82a4", "html_url": "https://github.com/rust-lang/rust/commit/7f55e7d0870756712c0926f5b3621147dc9a82a4"}], "stats": {"total": 156, "additions": 154, "deletions": 2}, "files": [{"sha": "906da4cdedeec0173849241a69f35a86c85d8ffc", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=4ffcb959744194413ca20223274d2c351ad7686c", "patch": "@@ -140,7 +140,10 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     let freevars =\n         time(time_passes, \"freevar finding\",\n              bind freevars::annotate_freevars(def_map, crate));\n-    let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars);\n+    let region_map =\n+        time(time_passes, \"region resolution\",\n+             bind middle::region::resolve_crate(sess, crate));\n+    let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars, region_map);\n     let (method_map, dict_map) =\n         time(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, impl_map, crate));"}, {"sha": "1981377a83ef7b1e023b2d8b433ff323e0d2a27f", "filename": "src/rustc/middle/region.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=4ffcb959744194413ca20223274d2c351ad7686c", "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * Region resolution. This pass runs before typechecking and resolves region\n+ * names to the appropriate block.\n+ */\n+\n+import driver::session::session;\n+import middle::ty;\n+import syntax::{ast, visit};\n+import std::map;\n+import std::map::hashmap;\n+\n+type region_map = {\n+    parent_blocks: hashmap<ast::node_id,ast::node_id>,\n+    ast_type_to_region: hashmap<ast::node_id,ty::region>\n+};\n+\n+enum parent {\n+    pa_item(ast::node_id),\n+    pa_block(ast::node_id),\n+    pa_crate\n+}\n+\n+type ctxt = {\n+    sess: session,\n+    region_map: @region_map,\n+    names_in_scope: hashmap<str,ast::def_id>,\n+    parent: parent\n+};\n+\n+fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n+    alt ty.node {\n+        ast::ty_rptr({id: region_id, node: node}, _) {\n+            let region;\n+            alt node {\n+                ast::re_inferred {\n+                    // We infer to the caller region if we're at item scope\n+                    // and to the block region if we're at block scope.\n+                    alt cx.parent {\n+                        pa_item(item_id) {\n+                            let def_id = {crate: ast::local_crate,\n+                                          node: item_id};\n+                            region = ty::re_caller(def_id);\n+                        }\n+                        pa_block(block_id) {\n+                            region = ty::re_block(block_id);\n+                        }\n+                        pa_crate {\n+                            cx.sess.span_bug(ty.span,\n+                                             \"region type outside item\");\n+                        }\n+                    }\n+                }\n+\n+                ast::re_named(ident) {\n+                    // If at item scope, introduce or reuse a binding. If at\n+                    // block scope, require that the binding be introduced.\n+                    alt cx.names_in_scope.find(ident) {\n+                        some(def_id) { region = ty::re_named(def_id); }\n+                        none {\n+                            alt cx.parent {\n+                                pa_item(_) { /* ok; fall through */ }\n+                                pa_block(_) {\n+                                    cx.sess.span_err(ty.span,\n+                                                     \"unknown region `\" +\n+                                                     ident + \"`\");\n+                                }\n+                                pa_crate {\n+                                    cx.sess.span_bug(ty.span,\n+                                                     \"named region at \" +\n+                                                     \"crate scope?!\");\n+                                }\n+                            }\n+\n+                            let def_id = {crate: ast::local_crate,\n+                                          node: region_id};\n+                            cx.names_in_scope.insert(ident, def_id);\n+                            region = ty::re_named(def_id);\n+                        }\n+                    }\n+                }\n+\n+                ast::re_self {\n+                    // For blocks, \"self\" means \"the current block\".\n+                    alt cx.parent {\n+                        pa_item(_) {\n+                            cx.sess.span_unimpl(ty.span,\n+                                                \"'self' region for items\");\n+                        }\n+                        pa_block(block_id) {\n+                            region = ty::re_block(block_id);\n+                        }\n+                        pa_crate {\n+                            cx.sess.span_bug(ty.span,\n+                                             \"region type outside item\");\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            cx.region_map.ast_type_to_region.insert(region_id, region);\n+        }\n+        _ { /* nothing to do */ }\n+    }\n+\n+    visit::visit_ty(ty, cx, visitor);\n+}\n+\n+fn resolve_block(blk: ast::blk, cx: ctxt, visitor: visit::vt<ctxt>) {\n+    alt cx.parent {\n+        pa_item(_) { /* no-op */ }\n+        pa_block(parent_block_id) {\n+            cx.region_map.parent_blocks.insert(blk.node.id, parent_block_id);\n+        }\n+        pa_crate { cx.sess.span_bug(blk.span, \"block outside item?!\"); }\n+    }\n+\n+    let new_cx: ctxt = {parent: pa_block(blk.node.id) with cx};\n+    visit::visit_block(blk, new_cx, visitor);\n+}\n+\n+fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n+    // Items create a new outer block scope as far as we're concerned.\n+    let new_cx: ctxt = {names_in_scope: map::new_str_hash(),\n+                        parent: pa_item(item.id)\n+                        with cx};\n+    visit::visit_item(item, new_cx, visitor);\n+}\n+\n+fn resolve_crate(sess: session, crate: @ast::crate) -> @region_map {\n+    let cx: ctxt = {sess: sess,\n+                    region_map: @{parent_blocks: map::new_int_hash(),\n+                                  ast_type_to_region: map::new_int_hash()},\n+                    names_in_scope: map::new_str_hash(),\n+                    parent: pa_crate};\n+    let visitor = visit::mk_vt(@{\n+        visit_block: resolve_block,\n+        visit_item: resolve_item,\n+        visit_ty: resolve_ty\n+        with *visit::default_visitor()\n+    });\n+    visit::visit_crate(*crate, cx, visitor);\n+    ret cx.region_map;\n+}\n+"}, {"sha": "dc6053ad73dd547beb0858bb77642d93ec3324b5", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4ffcb959744194413ca20223274d2c351ad7686c", "patch": "@@ -167,6 +167,7 @@ type ctxt =\n       mutable next_id: uint,\n       sess: session::session,\n       def_map: resolve::def_map,\n+      region_map: @middle::region::region_map,\n       node_types: node_type_table,\n       node_type_substs: hashmap<node_id, [t]>,\n       items: ast_map::map,\n@@ -327,7 +328,8 @@ fn new_ty_hash<V: copy>() -> map::hashmap<t, V> {\n }\n \n fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n-           freevars: freevars::freevar_map) -> ctxt {\n+           freevars: freevars::freevar_map,\n+           region_map: @middle::region::region_map) -> ctxt {\n     let interner = map::mk_hashmap({|&&k: intern_key|\n         hash_type_structure(k.struct) +\n             option::maybe(0u, k.o_def_id, ast_util::hash_def_id)\n@@ -336,6 +338,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n       mutable next_id: 0u,\n       sess: s,\n       def_map: dm,\n+      region_map: region_map,\n       node_types: @smallintmap::mk(),\n       node_type_substs: map::new_int_hash(),\n       items: amap,"}, {"sha": "4880044c81ef12ecd4665a6dc1e830be7b3a0926", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4ffcb959744194413ca20223274d2c351ad7686c/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=4ffcb959744194413ca20223274d2c351ad7686c", "patch": "@@ -44,6 +44,7 @@ mod middle {\n     mod freevars;\n     mod capture;\n     mod pat_util;\n+    mod region;\n \n     mod tstate {\n         mod ck;"}]}