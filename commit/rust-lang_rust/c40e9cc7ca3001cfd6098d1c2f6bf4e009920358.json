{"sha": "c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "node_id": "C_kwDOAAsO6NoAKGM0MGU5Y2M3Y2EzMDAxY2ZkNjA5OGQxYzJmNmJmNGUwMDk5MjAzNTg", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-05-26T18:14:48Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-05-28T16:44:53Z"}, "message": "Make EarlyBinder's inner value private; and fix all of the resulting errors", "tree": {"sha": "c02b84d53e56e8f4dcfeab317dc4e07985b4dfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02b84d53e56e8f4dcfeab317dc4e07985b4dfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "html_url": "https://github.com/rust-lang/rust/commit/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03534ac8b70de1134ce7e91b172cd629048a6c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/03534ac8b70de1134ce7e91b172cd629048a6c8b", "html_url": "https://github.com/rust-lang/rust/commit/03534ac8b70de1134ce7e91b172cd629048a6c8b"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "ced994aa6366eb7b6e900c714ff9c65aafe22196", "filename": "compiler/rustc_hir_analysis/src/outlives/implicit_infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -68,8 +68,9 @@ pub(super) fn infer_predicates(\n             // Therefore mark `predicates_added` as true and which will ensure\n             // we walk the crates again and re-calculate predicates for all\n             // items.\n-            let item_predicates_len: usize =\n-                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.0.len());\n+            let item_predicates_len: usize = global_inferred_outlives\n+                .get(&item_did.to_def_id())\n+                .map_or(0, |p| p.as_ref().skip_binder().len());\n             if item_required_predicates.len() > item_predicates_len {\n                 predicates_added = true;\n                 global_inferred_outlives\n@@ -137,7 +138,9 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 // 'a` holds for `Foo`.\n                 debug!(\"Adt\");\n                 if let Some(unsubstituted_predicates) = global_inferred_outlives.get(&def.did()) {\n-                    for (unsubstituted_predicate, &span) in &unsubstituted_predicates.0 {\n+                    for (unsubstituted_predicate, &span) in\n+                        unsubstituted_predicates.as_ref().skip_binder()\n+                    {\n                         // `unsubstituted_predicate` is `U: 'b` in the\n                         // example above. So apply the substitution to\n                         // get `T: 'a` (or `predicate`):\n@@ -251,7 +254,7 @@ fn check_explicit_predicates<'tcx>(\n     );\n     let explicit_predicates = explicit_map.explicit_predicates_of(tcx, def_id);\n \n-    for (outlives_predicate, &span) in &explicit_predicates.0 {\n+    for (outlives_predicate, &span) in explicit_predicates.as_ref().skip_binder() {\n         debug!(\"outlives_predicate = {:?}\", &outlives_predicate);\n \n         // Careful: If we are inferring the effects of a `dyn Trait<..>`"}, {"sha": "2106d6ff07dcc929a2efc9c912089de05c75ecf9", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -98,24 +98,27 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     let predicates = global_inferred_outlives\n         .iter()\n         .map(|(&def_id, set)| {\n-            let predicates = &*tcx.arena.alloc_from_iter(set.0.iter().filter_map(\n-                |(ty::OutlivesPredicate(kind1, region2), &span)| {\n-                    match kind1.unpack() {\n-                        GenericArgKind::Type(ty1) => Some((\n-                            ty::Clause::TypeOutlives(ty::OutlivesPredicate(ty1, *region2)),\n-                            span,\n-                        )),\n-                        GenericArgKind::Lifetime(region1) => Some((\n-                            ty::Clause::RegionOutlives(ty::OutlivesPredicate(region1, *region2)),\n-                            span,\n-                        )),\n-                        GenericArgKind::Const(_) => {\n-                            // Generic consts don't impose any constraints.\n-                            None\n+            let predicates =\n+                &*tcx.arena.alloc_from_iter(set.as_ref().skip_binder().iter().filter_map(\n+                    |(ty::OutlivesPredicate(kind1, region2), &span)| {\n+                        match kind1.unpack() {\n+                            GenericArgKind::Type(ty1) => Some((\n+                                ty::Clause::TypeOutlives(ty::OutlivesPredicate(ty1, *region2)),\n+                                span,\n+                            )),\n+                            GenericArgKind::Lifetime(region1) => Some((\n+                                ty::Clause::RegionOutlives(ty::OutlivesPredicate(\n+                                    region1, *region2,\n+                                )),\n+                                span,\n+                            )),\n+                            GenericArgKind::Const(_) => {\n+                                // Generic consts don't impose any constraints.\n+                                None\n+                            }\n                         }\n-                    }\n-                },\n-            ));\n+                    },\n+                ));\n             (def_id, predicates)\n         })\n         .collect();"}, {"sha": "38ddb7e76041091dc48f642a7386b85b9456aa93", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -1386,7 +1386,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // the referenced item.\n         let ty = tcx.type_of(def_id);\n         assert!(!substs.has_escaping_bound_vars());\n-        assert!(!ty.0.has_escaping_bound_vars());\n+        assert!(!ty.skip_binder().has_escaping_bound_vars());\n         let ty_substituted = self.normalize(span, ty.subst(tcx, substs));\n \n         if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {"}, {"sha": "59ae2ce6c603ec3bb6085a051b75ca14768a6313", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -293,7 +293,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n         let bounds = tcx.item_bounds(alias_ty.def_id);\n-        trace!(\"{:#?}\", bounds.0);\n+        trace!(\"{:#?}\", bounds.skip_binder());\n         bounds\n             .subst_iter(tcx, alias_ty.substs)\n             .filter_map(|p| p.to_opt_type_outlives())"}, {"sha": "2de0a3f75dcf60c9f8756c0bf1844244ff8d537a", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -123,7 +123,7 @@ pub trait Printer<'tcx>: Sized {\n                         impl_trait_ref.map(|i| i.subst(self.tcx(), substs)),\n                     )\n                 } else {\n-                    (self_ty.0, impl_trait_ref.map(|i| i.0))\n+                    (self_ty.subst_identity(), impl_trait_ref.map(|i| i.subst_identity()))\n                 };\n                 self.print_impl_path(def_id, substs, self_ty, impl_trait_ref)\n             }"}, {"sha": "82f79a0c0887b3bb81f959b2f17d9baead701389", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -2366,7 +2366,7 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Tuple(tys) => tys.iter().all(|ty| ty.is_trivially_sized(tcx)),\n \n-            ty::Adt(def, _substs) => def.sized_constraint(tcx).0.is_empty(),\n+            ty::Adt(def, _substs) => def.sized_constraint(tcx).skip_binder().is_empty(),\n \n             ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => false,\n "}, {"sha": "5422ee7db32fb1fc1255d1e0ecdb1f36401c6672", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -538,7 +538,7 @@ impl<'tcx, T: TypeVisitable<TyCtxt<'tcx>>> TypeVisitable<TyCtxt<'tcx>> for &'tcx\n /// [`subst_identity`](EarlyBinder::subst_identity) or [`skip_binder`](EarlyBinder::skip_binder).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[derive(Encodable, Decodable, HashStable)]\n-pub struct EarlyBinder<T>(pub T);\n+pub struct EarlyBinder<T>(T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n impl<'tcx, T> !TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}"}, {"sha": "522220f3d77c12b5f85328cb6ddc2bc0abd9be09", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -644,8 +644,11 @@ fn build_call_shim<'tcx>(\n     let sig = sig.map_bound(|sig| tcx.erase_late_bound_regions(sig));\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n-    let mut sig =\n-        if let Some(sig_substs) = sig_substs { sig.subst(tcx, &sig_substs) } else { sig.0 };\n+    let mut sig = if let Some(sig_substs) = sig_substs {\n+        sig.subst(tcx, &sig_substs)\n+    } else {\n+        sig.skip_binder()\n+    };\n \n     if let CallKind::Indirect(fnty) = call_kind {\n         // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This"}, {"sha": "1071b8fc7026f49dd9cf0469ab3ac48050557eea", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -148,11 +148,7 @@ pub(in crate::solve) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n \n         ty::Adt(def, substs) => {\n             let sized_crit = def.sized_constraint(ecx.tcx());\n-            Ok(sized_crit\n-                .0\n-                .iter()\n-                .map(|ty| sized_crit.rebind(*ty).subst(ecx.tcx(), substs))\n-                .collect())\n+            Ok(sized_crit.subst_iter_copied(ecx.tcx(), substs).collect())\n         }\n     }\n }"}, {"sha": "3c223db5a0b7459d6da7bebeefdd84de64289081", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -360,7 +360,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // consider a \"quick reject\". This avoids creating more types\n                 // and so forth that we need to.\n                 let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n-                if !drcx.substs_refs_may_unify(obligation_substs, impl_trait_ref.0.substs) {\n+                if !drcx\n+                    .substs_refs_may_unify(obligation_substs, impl_trait_ref.skip_binder().substs)\n+                {\n                     return;\n                 }\n                 if self.reject_fn_ptr_impls("}, {"sha": "0245dfd333beebe82d1620798a761195c7f901b2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -527,9 +527,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         substs.extend(trait_predicate.trait_ref.substs.iter());\n                         let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n                             smallvec::SmallVec::with_capacity(\n-                                bound.0.kind().bound_vars().len() + defs.count(),\n+                                bound.skip_binder().kind().bound_vars().len() + defs.count(),\n                             );\n-                        bound_vars.extend(bound.0.kind().bound_vars().into_iter());\n+                        bound_vars.extend(bound.skip_binder().kind().bound_vars().into_iter());\n                         InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param\n                             .kind\n                         {"}, {"sha": "ed380f32b72f41d987d887e87b75e4238a0bff5b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -2149,13 +2149,11 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n             ty::Adt(def, substs) => {\n                 let sized_crit = def.sized_constraint(self.tcx());\n                 // (*) binder moved here\n-                Where(obligation.predicate.rebind({\n-                    sized_crit\n-                        .0\n-                        .iter()\n-                        .map(|ty| sized_crit.rebind(*ty).subst(self.tcx(), substs))\n-                        .collect()\n-                }))\n+                Where(\n+                    obligation\n+                        .predicate\n+                        .rebind(sized_crit.subst_iter_copied(self.tcx(), substs).collect()),\n+                )\n             }\n \n             ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => None,"}, {"sha": "1d3ea96666f2f9b95dd0e3d01d6c87ab57e1aefa", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -294,7 +294,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         };\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n-            sig: sig.0.lower_into(self.interner),\n+            sig: sig.skip_binder().lower_into(self.interner),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }"}, {"sha": "52bc386cb009deaeb291c24e473aa9b1252fa32f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -44,9 +44,7 @@ fn sized_constraint_for_ty<'tcx>(\n             let adt_tys = adt.sized_constraint(tcx);\n             debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\", ty, adt_tys);\n             adt_tys\n-                .0\n-                .iter()\n-                .map(|ty| adt_tys.rebind(*ty).subst(tcx, substs))\n+                .subst_iter_copied(tcx, substs)\n                 .flat_map(|ty| sized_constraint_for_ty(tcx, adtdef, ty))\n                 .collect()\n         }"}, {"sha": "7d3ccb9def360e8c92fb8ab5ef916bb557a8b1cc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n         let mut impls = Vec::new();\n         for trait_def_id in cx.tcx.all_traits() {\n             if !cx.cache.effective_visibilities.is_reachable(cx.tcx, trait_def_id)\n-                || cx.generated_synthetics.get(&(ty.0, trait_def_id)).is_some()\n+                || cx.generated_synthetics.get(&(ty.skip_binder(), trait_def_id)).is_some()\n             {\n                 continue;\n             }\n@@ -34,7 +34,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     impl_def_id\n                 );\n                 let trait_ref = cx.tcx.impl_trait_ref(impl_def_id).unwrap();\n-                if !matches!(trait_ref.0.self_ty().kind(), ty::Param(_)) {\n+                if !matches!(trait_ref.skip_binder().self_ty().kind(), ty::Param(_)) {\n                     continue;\n                 }\n                 let infcx = cx.tcx.infer_ctxt().build();\n@@ -87,7 +87,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     trait_ref, ty\n                 );\n \n-                cx.generated_synthetics.insert((ty.0, trait_def_id));\n+                cx.generated_synthetics.insert((ty.skip_binder(), trait_def_id));\n \n                 impls.push(Item {\n                     name: None,\n@@ -104,10 +104,10 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         // the post-inference `trait_ref`, as it's more accurate.\n                         trait_: Some(clean_trait_ref_with_bindings(\n                             cx,\n-                            ty::Binder::dummy(trait_ref.0),\n+                            ty::Binder::dummy(trait_ref.skip_binder()),\n                             ThinVec::new(),\n                         )),\n-                        for_: clean_middle_ty(ty::Binder::dummy(ty.0), cx, None),\n+                        for_: clean_middle_ty(ty::Binder::dummy(ty.skip_binder()), cx, None),\n                         items: cx\n                             .tcx\n                             .associated_items(impl_def_id)\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .collect::<Vec<_>>(),\n                         polarity: ty::ImplPolarity::Positive,\n                         kind: ImplKind::Blanket(Box::new(clean_middle_ty(\n-                            ty::Binder::dummy(trait_ref.0.self_ty()),\n+                            ty::Binder::dummy(trait_ref.skip_binder().self_ty()),\n                             cx,\n                             None,\n                         ))),"}, {"sha": "e6fd65f001a6e8ea4a8d7e02384ee6282358d66d", "filename": "src/tools/clippy/clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40e9cc7ca3001cfd6098d1c2f6bf4e009920358/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=c40e9cc7ca3001cfd6098d1c2f6bf4e009920358", "patch": "@@ -138,7 +138,7 @@ fn collect_unsafe_exprs<'tcx>(\n                     .type_dependent_def_id(expr.hir_id)\n                     .map(|def_id| cx.tcx.fn_sig(def_id))\n                 {\n-                    if sig.0.unsafety() == Unsafety::Unsafe {\n+                    if sig.skip_binder().unsafety() == Unsafety::Unsafe {\n                         unsafe_ops.push((\"unsafe method call occurs here\", expr.span));\n                     }\n                 }"}]}