{"sha": "432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmIxY2IyNTNmMmI5NWYzZmRlNGM3OWQ2NTgyNGVmZTY0YWVhZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-19T04:11:30Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-20T20:58:53Z"}, "message": "Rationalise error types\n\ncc #2639", "tree": {"sha": "e74069d907f5a124af8f05b3de604627decbdc10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e74069d907f5a124af8f05b3de604627decbdc10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "html_url": "https://github.com/rust-lang/rust/commit/432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "html_url": "https://github.com/rust-lang/rust/commit/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "f6e5c9991eb0838cc887b1ed18d115d491e01cc3", "filename": "src/bin/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "patch": "@@ -26,7 +26,7 @@ use getopts::{Matches, Options};\n \n use rustfmt::{\n     emit_post_matter, emit_pre_matter, format_and_emit_report, load_config, CliOptions, Config,\n-    FileName, FmtResult, Input, Summary, Verbosity, WriteMode,\n+    ErrorKind, FileName, Input, Summary, Verbosity, WriteMode,\n };\n \n fn main() {\n@@ -170,7 +170,7 @@ fn is_nightly() -> bool {\n         .unwrap_or(false)\n }\n \n-fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n+fn execute(opts: &Options) -> Result<(WriteMode, Summary), failure::Error> {\n     let matches = opts.parse(env::args().skip(1))?;\n     let options = CliOptions::from_matches(&matches)?;\n \n@@ -239,7 +239,7 @@ fn format(\n     files: Vec<PathBuf>,\n     minimal_config_path: Option<String>,\n     options: CliOptions,\n-) -> FmtResult<(WriteMode, Summary)> {\n+) -> Result<(WriteMode, Summary), failure::Error> {\n     options.verify_file_lines(&files);\n     let (config, config_path) = load_config(None, Some(&options))?;\n \n@@ -347,7 +347,7 @@ fn print_version() {\n     println!(\"rustfmt {}\", version_info);\n }\n \n-fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n+fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n     if matches.opt_present(\"h\") {\n         let topic = matches.opt_str(\"h\");\n         if topic == None {"}, {"sha": "56587dbce9068da9d3a03c42f7fe8df9ceeee02a", "filename": "src/config/options.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "patch": "@@ -14,9 +14,8 @@ use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n use config::lists::*;\n use config::Config;\n-use FmtResult;\n \n-use failure::err_msg;\n+use failure::{self, err_msg};\n \n use getopts::Matches;\n use std::collections::HashSet;\n@@ -345,7 +344,7 @@ pub struct CliOptions {\n }\n \n impl CliOptions {\n-    pub fn from_matches(matches: &Matches) -> FmtResult<CliOptions> {\n+    pub fn from_matches(matches: &Matches) -> Result<CliOptions, failure::Error> {\n         let mut options = CliOptions::default();\n         options.verbose = matches.opt_present(\"verbose\");\n         options.quiet = matches.opt_present(\"quiet\");\n@@ -448,7 +447,7 @@ impl CliOptions {\n     }\n }\n \n-fn write_mode_from_emit_str(emit_str: &str) -> FmtResult<WriteMode> {\n+fn write_mode_from_emit_str(emit_str: &str) -> Result<WriteMode, failure::Error> {\n     match emit_str {\n         \"files\" => Ok(WriteMode::Overwrite),\n         \"stdout\" => Ok(WriteMode::Display),"}, {"sha": "5a44074c845d70da0285c1536e2471156226bbec", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432b1cb253f2b95f3fde4c79d65824efe64aeaf4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "patch": "@@ -64,8 +64,6 @@ pub use config::options::CliOptions;\n pub use config::summary::Summary;\n pub use config::{file_lines, load_config, Config, Verbosity, WriteMode};\n \n-pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n-\n #[macro_use]\n mod utils;\n \n@@ -107,7 +105,7 @@ pub(crate) type FileMap = Vec<FileRecord>;\n \n pub(crate) type FileRecord = (FileName, String);\n \n-#[derive(Fail, Debug, Clone, Copy)]\n+#[derive(Fail, Debug)]\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n     #[fail(\n@@ -132,6 +130,14 @@ pub enum ErrorKind {\n     // Used a rustfmt:: attribute other than skip\n     #[fail(display = \"invalid attribute\")]\n     BadAttr,\n+    #[fail(display = \"io error: {}\", _0)]\n+    IoError(io::Error),\n+}\n+\n+impl From<io::Error> for ErrorKind {\n+    fn from(e: io::Error) -> ErrorKind {\n+        ErrorKind::IoError(e)\n+    }\n }\n \n struct FormattingError {\n@@ -162,7 +168,9 @@ impl FormattingError {\n     }\n     fn msg_prefix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"internal error:\",\n+            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace | ErrorKind::IoError(_) => {\n+                \"internal error:\"\n+            }\n             ErrorKind::LicenseCheck | ErrorKind::BadAttr => \"error:\",\n             ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n         }\n@@ -244,6 +252,7 @@ impl FormatReport {\n                 | ErrorKind::BadAttr => {\n                     errs.has_check_errors = true;\n                 }\n+                _ => {}\n             }\n         }\n     }\n@@ -469,7 +478,7 @@ fn should_report_error(\n     config: &Config,\n     char_kind: FullCodeCharKind,\n     is_string: bool,\n-    error_kind: ErrorKind,\n+    error_kind: &ErrorKind,\n ) -> bool {\n     let allow_error_report = if char_kind.is_comment() || is_string {\n         config.error_on_unformatted()\n@@ -541,7 +550,8 @@ fn format_lines(\n             if format_line {\n                 // Check for (and record) trailing whitespace.\n                 if let Some(..) = last_wspace {\n-                    if should_report_error(config, kind, is_string, ErrorKind::TrailingWhitespace) {\n+                    if should_report_error(config, kind, is_string, &ErrorKind::TrailingWhitespace)\n+                    {\n                         trims.push((cur_line, kind, line_buffer.clone()));\n                     }\n                     line_len -= 1;\n@@ -551,7 +561,7 @@ fn format_lines(\n                 let error_kind = ErrorKind::LineOverflow(line_len, config.max_width());\n                 if line_len > config.max_width()\n                     && !is_skipped_line(cur_line, skipped_range)\n-                    && should_report_error(config, kind, is_string, error_kind)\n+                    && should_report_error(config, kind, is_string, &error_kind)\n                 {\n                     errors.push(FormattingError {\n                         line: cur_line,\n@@ -967,7 +977,7 @@ pub enum Input {\n     Text(String),\n }\n \n-pub fn format_and_emit_report(input: Input, config: &Config) -> FmtResult<Summary> {\n+pub fn format_and_emit_report(input: Input, config: &Config) -> Result<Summary, failure::Error> {\n     if !config.version_meets_requirement() {\n         return Err(format_err!(\"Version mismatch\"));\n     }\n@@ -1000,15 +1010,15 @@ pub fn format_and_emit_report(input: Input, config: &Config) -> FmtResult<Summar\n     }\n }\n \n-pub fn emit_pre_matter(config: &Config) -> FmtResult<()> {\n+pub fn emit_pre_matter(config: &Config) -> Result<(), ErrorKind> {\n     if config.write_mode() == WriteMode::Checkstyle {\n         let mut out = &mut stdout();\n         checkstyle::output_header(&mut out)?;\n     }\n     Ok(())\n }\n \n-pub fn emit_post_matter(config: &Config) -> FmtResult<()> {\n+pub fn emit_post_matter(config: &Config) -> Result<(), ErrorKind> {\n     if config.write_mode() == WriteMode::Checkstyle {\n         let mut out = &mut stdout();\n         checkstyle::output_footer(&mut out)?;"}]}