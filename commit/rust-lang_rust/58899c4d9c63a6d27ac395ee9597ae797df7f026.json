{"sha": "58899c4d9c63a6d27ac395ee9597ae797df7f026", "node_id": "C_kwDOAAsO6NoAKDU4ODk5YzRkOWM2M2E2ZDI3YWMzOTVlZTk1OTdhZTc5N2RmN2YwMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-31T09:07:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-31T09:07:09Z"}, "message": "Auto merge of #90434 - matthiaskrgr:rollup-xbn393a, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89446 (Add paragraph to ControlFlow docs to menion it works with the ? operator (#88715))\n - #89677 (Stabilize `is_symlink()` for `Metadata` and `Path`)\n - #89833 (Add #[must_use] to Rc::downgrade)\n - #89835 (Add #[must_use] to expensive computations)\n - #89839 (Add #[must_use] to mem/ptr functions)\n - #89897 (Add #[must_use] to remaining core functions)\n - #89951 (Stabilize `option_result_unwrap_unchecked`)\n - #90427 (Add #[must_use] to alloc functions that would leak memory)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8dd3927bfe5e06e4d5446333d87ede1c13c89ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd3927bfe5e06e4d5446333d87ede1c13c89ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58899c4d9c63a6d27ac395ee9597ae797df7f026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58899c4d9c63a6d27ac395ee9597ae797df7f026", "html_url": "https://github.com/rust-lang/rust/commit/58899c4d9c63a6d27ac395ee9597ae797df7f026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58899c4d9c63a6d27ac395ee9597ae797df7f026/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "html_url": "https://github.com/rust-lang/rust/commit/38b01d90657a355abf81b53cb3ee0b9a7dd88f98"}, {"sha": "ff6d8ecd6482587368ab0a6287009460eac536b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6d8ecd6482587368ab0a6287009460eac536b3", "html_url": "https://github.com/rust-lang/rust/commit/ff6d8ecd6482587368ab0a6287009460eac536b3"}], "stats": {"total": 148, "additions": 129, "deletions": 19}, "files": [{"sha": "66ef92558d8b563c4d149fe5966c54ad60a657ad", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -81,6 +81,7 @@ pub use std::alloc::Global;\n /// }\n /// ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n     unsafe { __rust_alloc(layout.size(), layout.align()) }\n@@ -117,6 +118,7 @@ pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n ///\n /// See [`GlobalAlloc::realloc`].\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n@@ -150,6 +152,7 @@ pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8\n /// }\n /// ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n+#[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {\n     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }"}, {"sha": "59f1ca76b0b928b915e3feb8e2d10354737020f1", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -137,6 +137,8 @@ pub struct Range<'a, T: 'a> {\n /// See its documentation for more.\n ///\n /// [`difference`]: BTreeSet::difference\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a> {\n     inner: DifferenceInner<'a, T>,\n@@ -169,6 +171,8 @@ impl<T: fmt::Debug> fmt::Debug for Difference<'_, T> {\n /// [`BTreeSet`]. See its documentation for more.\n ///\n /// [`symmetric_difference`]: BTreeSet::symmetric_difference\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a>(MergeIterInner<Iter<'a, T>>);\n \n@@ -185,6 +189,8 @@ impl<T: fmt::Debug> fmt::Debug for SymmetricDifference<'_, T> {\n /// See its documentation for more.\n ///\n /// [`intersection`]: BTreeSet::intersection\n+#[must_use = \"this returns the intersection as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a> {\n     inner: IntersectionInner<'a, T>,\n@@ -217,6 +223,8 @@ impl<T: fmt::Debug> fmt::Debug for Intersection<'_, T> {\n /// See its documentation for more.\n ///\n /// [`union`]: BTreeSet::union\n+#[must_use = \"this returns the union as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a>(MergeIterInner<Iter<'a, T>>);\n "}, {"sha": "34d2cfc8e2c5b778c200ccbd661173d192028ded", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -112,7 +112,6 @@\n #![feature(maybe_uninit_slice)]\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(nonnull_slice_from_raw_parts)]\n-#![feature(option_result_unwrap_unchecked)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(receiver_trait)]"}, {"sha": "c0ca068de9c21f955791dbe918157b80bfb30499", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -41,7 +41,7 @@\n //! use std::rc::Rc;\n //!\n //! let my_rc = Rc::new(());\n-//! Rc::downgrade(&my_rc);\n+//! let my_weak = Rc::downgrade(&my_rc);\n //! ```\n //!\n //! `Rc<T>`'s implementations of traits like `Clone` may also be called using\n@@ -889,6 +889,8 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// let weak_five = Rc::downgrade(&five);\n     /// ```\n+    #[must_use = \"this returns a new `Weak` pointer, \\\n+                  without modifying the original `Rc`\"]\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inner().inc_weak();"}, {"sha": "677942a1820c94e23588dff87bf526e236d82099", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -552,6 +552,7 @@ impl String {\n     ///\n     /// assert_eq!(\"Hello \ufffdWorld\", output);\n     /// ```\n+    #[must_use]\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n@@ -646,6 +647,7 @@ impl String {\n     ///            String::from_utf16_lossy(v));\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf16_lossy(v: &[u16]) -> String {"}, {"sha": "b738337a2ddd19805fc0d623f6570077f6991a22", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -804,6 +804,7 @@ impl<T: ?Sized> Arc<T> {\n     /// let x_ptr = Arc::into_raw(x);\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n+    #[must_use = \"losing the pointer will leak memory\"]\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub fn into_raw(this: Self) -> *const T {\n         let ptr = Self::as_ptr(&this);"}, {"sha": "dc7d0bff9a404ba8ec417b4ecfd17c3445e4c92d", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1031,7 +1031,7 @@ fn test_split_at_mut() {\n #[should_panic]\n fn test_split_at_boundscheck() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-    s.split_at(1);\n+    let _ = s.split_at(1);\n }\n \n #[test]"}, {"sha": "cc32d5223b49f655f691017d675c0d363b5de444", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -104,6 +104,7 @@ impl Layout {\n     /// The minimum size in bytes for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn size(&self) -> usize {\n         self.size_\n@@ -137,6 +138,7 @@ impl Layout {\n     /// allocate backing structure for `T` (which could be a trait\n     /// or other unsized type like a slice).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n@@ -171,6 +173,7 @@ impl Layout {\n     /// [trait object]: ../../book/ch17-02-trait-objects.html\n     /// [extern type]: ../../unstable-book/language-features/extern-types.html\n     #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+    #[must_use]\n     pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n         // SAFETY: we pass along the prerequisites of these functions to the caller\n         let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };\n@@ -187,6 +190,7 @@ impl Layout {\n     /// some other means.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[rustc_const_unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[must_use]\n     #[inline]\n     pub const fn dangling(&self) -> NonNull<u8> {\n         // SAFETY: align is guaranteed to be non-zero"}, {"sha": "1fd5aa27fce46562c51ddc6d3b80a7bfc9b45464", "filename": "library/core/src/any.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -458,6 +458,7 @@ impl TypeId {\n     /// assert_eq!(is_string(&0), false);\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n@@ -492,6 +493,7 @@ impl TypeId {\n ///     \"core::option::Option<alloc::string::String>\",\n /// );\n /// ```\n+#[must_use]\n #[stable(feature = \"type_name\", since = \"1.38.0\")]\n #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n pub const fn type_name<T: ?Sized>() -> &'static str {\n@@ -534,6 +536,7 @@ pub const fn type_name<T: ?Sized>() -> &'static str {\n /// let y = 1.0;\n /// println!(\"{}\", type_name_of_val(&y));\n /// ```\n+#[must_use]\n #[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n pub const fn type_name_of_val<T: ?Sized>(_val: &T) -> &'static str {"}, {"sha": "532208e41afa2ba2b01169da64c061d0d5587347", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -18,6 +18,7 @@ use crate::str::from_utf8_unchecked;\n ///\n /// This `struct` is created by the [`escape_default`] function. See its\n /// documentation for more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EscapeDefault {"}, {"sha": "d154bb3583c2d387d0757a0acb0fddc47ddbf63b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1335,6 +1335,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// with the widespread use of `r.borrow().clone()` to clone the contents of\n     /// a `RefCell`.\n     #[stable(feature = \"cell_extras\", since = \"1.15.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T> {\n         Ref { value: orig.value, borrow: orig.borrow.clone() }"}, {"sha": "5dd8c5ef78941835b3619b63636e2214d00c4620", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -128,6 +128,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n \n impl DecodeUtf16Error {\n     /// Returns the unpaired surrogate which caused this error.\n+    #[must_use]\n     #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n     pub fn unpaired_surrogate(&self) -> u16 {\n         self.code"}, {"sha": "fb862f7df947bc5d688cf1bb46446a8de968ffee", "filename": "library/core/src/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -155,6 +155,7 @@ pub trait Default: Sized {\n /// }\n /// ```\n #[unstable(feature = \"default_free_fn\", issue = \"73014\")]\n+#[must_use]\n #[inline]\n pub fn default<T: Default>() -> T {\n     Default::default()"}, {"sha": "80d3270d73cc824a80759b328ac5dd3eb4fecfe3", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1604,6 +1604,7 @@ impl<'a> Formatter<'a> {\n     }\n \n     /// Flags for formatting\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n         since = \"1.24.0\",\n@@ -1641,6 +1642,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:G>3}\", Foo), \"GGG\");\n     /// assert_eq!(&format!(\"{:t>6}\", Foo), \"tttttt\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn fill(&self) -> char {\n         self.fill\n@@ -1677,6 +1679,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:^}\", Foo), \"center\");\n     /// assert_eq!(&format!(\"{}\", Foo), \"into the void\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n     pub fn align(&self) -> Option<Alignment> {\n         match self.align {\n@@ -1711,6 +1714,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn width(&self) -> Option<usize> {\n         self.width\n@@ -1741,6 +1745,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn precision(&self) -> Option<usize> {\n         self.precision\n@@ -1771,6 +1776,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_plus(&self) -> bool {\n         self.flags & (1 << FlagV1::SignPlus as u32) != 0\n@@ -1799,6 +1805,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_minus(&self) -> bool {\n         self.flags & (1 << FlagV1::SignMinus as u32) != 0\n@@ -1826,6 +1833,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn alternate(&self) -> bool {\n         self.flags & (1 << FlagV1::Alternate as u32) != 0\n@@ -1851,6 +1859,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0"}, {"sha": "7a3af70d6d97c3fa6533199960b94087ec83e3ce", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -90,6 +90,7 @@ where\n #[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[must_use]\n #[inline]\n pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     // SAFETY: the caller must guarantee that `cx.0` is a valid pointer"}, {"sha": "7abe01d17c90bd46668d87fcb437f8d35b113a25", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -25,6 +25,7 @@ pub const fn empty<T>() -> Empty<T> {\n /// An iterator that yields nothing.\n ///\n /// This `struct` is created by the [`empty()`] function. See its documentation for more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n "}, {"sha": "7d005666a74a6514e32bd7b55e15e00f87236c74", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -296,6 +296,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// [alignment]: align_of\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_size_of\", since = \"1.24.0\")]\n@@ -324,6 +325,7 @@ pub const fn size_of<T>() -> usize {\n /// assert_eq!(13, mem::size_of_val(y));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of_val\")]\n@@ -373,6 +375,7 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n #[rustc_const_unstable(feature = \"const_size_of_val_raw\", issue = \"46571\")]\n pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n@@ -397,6 +400,7 @@ pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n /// assert_eq!(4, mem::min_align_of::<i32>());\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n pub fn min_align_of<T>() -> usize {\n@@ -418,6 +422,7 @@ pub fn min_align_of<T>() -> usize {\n /// assert_eq!(4, mem::min_align_of_val(&5i32));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n@@ -441,6 +446,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(4, mem::align_of::<i32>());\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_align_of\", since = \"1.24.0\")]\n@@ -462,6 +468,7 @@ pub const fn align_of<T>() -> usize {\n /// assert_eq!(4, mem::align_of_val(&5i32));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n #[allow(deprecated)]\n@@ -507,6 +514,7 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n #[rustc_const_unstable(feature = \"const_align_of_val_raw\", issue = \"46571\")]\n pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n@@ -571,6 +579,7 @@ pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n /// }\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n #[rustc_diagnostic_item = \"needs_drop\"]\n@@ -618,6 +627,7 @@ pub const fn needs_drop<T>() -> bool {\n /// let _y: fn() = unsafe { mem::zeroed() }; // And again!\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n@@ -653,6 +663,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [assume_init]: MaybeUninit::assume_init\n /// [inv]: MaybeUninit#initialization-invariant\n #[inline(always)]\n+#[must_use]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n@@ -938,6 +949,7 @@ pub fn drop<T>(_x: T) {}\n /// assert_eq!(foo_array, [10]);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n@@ -1051,6 +1063,7 @@ pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n /// assert_eq!(mem::variant_count::<Result<!, !>>(), 2);\n /// ```\n #[inline(always)]\n+#[must_use]\n #[unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_diagnostic_item = \"mem_variant_count\"]"}, {"sha": "8a9ecbe98dff604a3bc158005236aa66e8dda68e", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -115,6 +115,7 @@ pub enum IntErrorKind {\n \n impl ParseIntError {\n     /// Outputs the detailed cause of parsing an integer failing.\n+    #[must_use]\n     #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind"}, {"sha": "905b0c4245801e87c4be00d2684ab3f51cf34564", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -980,6 +980,7 @@ impl f32 {\n     /// #     .all(|(a, b)| a.to_bits() == b.to_bits()))\n     /// ```\n     #[unstable(feature = \"total_cmp\", issue = \"72599\")]\n+    #[must_use]\n     #[inline]\n     pub fn total_cmp(&self, other: &Self) -> crate::cmp::Ordering {\n         let mut left = self.to_bits() as i32;"}, {"sha": "112a239a145f6ea374c8c2365157364b512dc3a0", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -996,6 +996,7 @@ impl f64 {\n     /// #     .all(|(a, b)| a.to_bits() == b.to_bits()))\n     /// ```\n     #[unstable(feature = \"total_cmp\", issue = \"72599\")]\n+    #[must_use]\n     #[inline]\n     pub fn total_cmp(&self, other: &Self) -> crate::cmp::Ordering {\n         let mut left = self.to_bits() as i64;"}, {"sha": "b0c15898a1fd86a362db3c931ea5bf499a5e34d1", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -7,6 +7,10 @@ use crate::{convert, ops};\n /// Having the enum makes it clearer -- no more wondering \"wait, what did `false`\n /// mean again?\" -- and allows including a value.\n ///\n+/// Similar to [`Option`] and [`Result`], this enum can be used with the `?` operator\n+/// to return immediately if the [`Break`] variant is present or otherwise continue normally\n+/// with the value inside the [`Continue`] variant.\n+///\n /// # Examples\n ///\n /// Early-exiting from [`Iterator::try_for_each`]:\n@@ -71,6 +75,9 @@ use crate::{convert, ops};\n /// assert_eq!(res, ControlFlow::Break(-1));\n /// assert_eq!(sum, 6);\n /// ```\n+///\n+/// [`Break`]: ControlFlow::Break\n+/// [`Continue`]: ControlFlow::Continue\n #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<B, C = ()> {"}, {"sha": "b74ba92c76eb6e459c5989c40e8b1388503f20fe", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -743,6 +743,7 @@ impl<T: Clone> Bound<&T> {\n     /// assert_eq!((1..12).start_bound(), Included(&1));\n     /// assert_eq!((1..12).start_bound().cloned(), Included(1));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"bound_cloned\", since = \"1.55.0\")]\n     pub fn cloned(self) -> Bound<T> {\n         match self {"}, {"sha": "baf9948857bbe1e0c2d96eeaad6827e0727bebcd", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -800,19 +800,17 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_result_unwrap_unchecked)]\n     /// let x = Some(\"air\");\n     /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\");\n     /// ```\n     ///\n     /// ```no_run\n-    /// #![feature(option_result_unwrap_unchecked)]\n     /// let x: Option<&str> = None;\n     /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\"); // Undefined behavior!\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n     pub unsafe fn unwrap_unchecked(self) -> T {\n         debug_assert!(self.is_some());\n         match self {\n@@ -1451,6 +1449,7 @@ impl<T: Copy> Option<&T> {\n     /// let copied = opt_x.copied();\n     /// assert_eq!(copied, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n     #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     pub const fn copied(self) -> Option<T> {"}, {"sha": "714e9b73c78a61f71e4c32e8c2a46dc51eeaa7d2", "filename": "library/core/src/panic/location.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -79,6 +79,7 @@ impl<'a> Location<'a> {\n     /// assert_ne!(this_location.line(), another_location.line());\n     /// assert_ne!(this_location.column(), another_location.column());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"track_caller\", since = \"1.46.0\")]\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     #[track_caller]\n@@ -119,6 +120,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn file(&self) -> &str {\n         self.file\n@@ -141,6 +143,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn line(&self) -> u32 {\n         self.line\n@@ -163,6 +166,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_col\", since = \"1.25.0\")]\n     pub fn column(&self) -> u32 {\n         self.col"}, {"sha": "d8e421df5de5d321bd7e4d18d536091afa4e8c7a", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -81,6 +81,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn payload(&self) -> &(dyn Any + Send) {\n         self.payload\n@@ -89,6 +90,7 @@ impl<'a> PanicInfo<'a> {\n     /// If the `panic!` macro from the `core` crate (not from `std`)\n     /// was used with a formatting string and some additional arguments,\n     /// returns that message ready to be used for example with [`fmt::write`]\n+    #[must_use]\n     #[unstable(feature = \"panic_info_message\", issue = \"66745\")]\n     pub fn message(&self) -> Option<&fmt::Arguments<'_>> {\n         self.message\n@@ -118,6 +120,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,"}, {"sha": "09fc6df5429759ce336bd08b7670b710d68dfce3", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -705,6 +705,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     ///\n     /// [\"pinning projections\"]: self#projections-and-structural-pinning\n     #[inline(always)]\n+    #[must_use]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub const fn get_ref(self) -> &'a T {"}, {"sha": "8ab72e6aeeafa3844d37b1c0e4abeee2b64c599f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -204,6 +204,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n /// assert!(p.is_null());\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n@@ -223,6 +224,7 @@ pub const fn null<T>() -> *const T {\n /// assert!(p.is_null());\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]"}, {"sha": "50dd451b5d1cca0d180337541b5288238debfa3c", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -83,6 +83,7 @@ impl<T: Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a non-zero usize which is then casted\n@@ -423,6 +424,7 @@ impl<T> NonNull<[T]> {\n     /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)\n     #[unstable(feature = \"nonnull_slice_from_raw_parts\", issue = \"71941\")]\n     #[rustc_const_unstable(feature = \"const_nonnull_slice_from_raw_parts\", issue = \"71941\")]\n+    #[must_use]\n     #[inline]\n     pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {\n         // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null"}, {"sha": "d650a6f974b972c209f8f4b8f89746c39782ed5c", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -68,6 +68,7 @@ impl<T: Sized> Unique<T> {\n     /// a `T`, which means this must not be used as a \"not yet initialized\"\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n+    #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a valid, non-null pointer. The"}, {"sha": "8fec2e928aae2505b8154d91c813dec46c5e627d", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1096,19 +1096,17 @@ impl<T, E> Result<T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_result_unwrap_unchecked)]\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(unsafe { x.unwrap_unchecked() }, 2);\n     /// ```\n     ///\n     /// ```no_run\n-    /// #![feature(option_result_unwrap_unchecked)]\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// unsafe { x.unwrap_unchecked(); } // Undefined behavior!\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n     pub unsafe fn unwrap_unchecked(self) -> T {\n         debug_assert!(self.is_ok());\n         match self {\n@@ -1130,19 +1128,17 @@ impl<T, E> Result<T, E> {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(option_result_unwrap_unchecked)]\n     /// let x: Result<u32, &str> = Ok(2);\n     /// unsafe { x.unwrap_err_unchecked() }; // Undefined behavior!\n     /// ```\n     ///\n     /// ```\n-    /// #![feature(option_result_unwrap_unchecked)]\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// assert_eq!(unsafe { x.unwrap_err_unchecked() }, \"emergency failure\");\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n     pub unsafe fn unwrap_err_unchecked(self) -> E {\n         debug_assert!(self.is_err());\n         match self {"}, {"sha": "080256f493f5ffe95d2148d88f4f2ab384fb49c0", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -11,6 +11,7 @@ use crate::ops;\n impl [u8] {\n     /// Checks if all bytes in this slice are within the ASCII range.\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         is_ascii(self)\n@@ -21,6 +22,7 @@ impl [u8] {\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n     /// but without allocating and copying temporaries.\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n         self.len() == other.len() && iter::zip(self, other).all(|(a, b)| a.eq_ignore_ascii_case(b))"}, {"sha": "ad1d6b8b846a00433e422a92918e795522b2a0e9", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1724,6 +1724,7 @@ impl<'a, T> ChunksExact<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use]\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n@@ -2153,6 +2154,7 @@ impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `N-1`\n     /// elements.\n+    #[must_use]\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n@@ -2728,6 +2730,7 @@ impl<'a, T> RChunksExact<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use]\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem"}, {"sha": "6da99055f2d5af887c03997e0f90e7880d561a89", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -37,6 +37,7 @@ fn repeat_byte(b: u8) -> usize {\n }\n \n /// Returns the first index matching the byte `x` in `text`.\n+#[must_use]\n #[inline]\n pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Fast path for small slices\n@@ -91,6 +92,7 @@ fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {\n }\n \n /// Returns the last index matching the byte `x` in `text`.\n+#[must_use]\n pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //"}, {"sha": "b6460d72fef32abc13f70a7a74581411131aaeaf", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -72,6 +72,7 @@ impl Utf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn valid_up_to(&self) -> usize {\n         self.valid_up_to\n@@ -93,6 +94,7 @@ impl Utf8Error {\n     ///\n     /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn error_len(&self) -> Option<usize> {\n         self.error_len.map(|len| len as usize)"}, {"sha": "94a534c6e797e8a65357c4d50dadffe7b2848513", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -27,6 +27,7 @@ use super::{IsAsciiWhitespace, IsNotEmpty, IsWhitespace};\n /// [`char`]: prim@char\n /// [`chars`]: str::chars\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n     pub(super) iter: slice::Iter<'a, u8>,\n@@ -125,6 +126,7 @@ impl<'a> Chars<'a> {\n /// [`char`]: prim@char\n /// [`char_indices`]: str::char_indices\n #[derive(Clone, Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CharIndices<'a> {\n     pub(super) front_offset: usize,\n@@ -211,6 +213,7 @@ impl<'a> CharIndices<'a> {\n     /// assert_eq!(chars.next(), None);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"char_indices_offset\", issue = \"83871\")]\n     pub fn offset(&self) -> usize {\n         self.front_offset\n@@ -223,6 +226,7 @@ impl<'a> CharIndices<'a> {\n /// See its documentation for more.\n ///\n /// [`bytes`]: str::bytes\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Bytes<'a>(pub(super) Copied<slice::Iter<'a, u8>>);\n@@ -1089,6 +1093,7 @@ generate_pattern_iterators! {\n ///\n /// [`lines`]: str::lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Lines<'a>(pub(super) Map<SplitTerminator<'a, char>, LinesAnyMap>);\n \n@@ -1128,6 +1133,7 @@ impl FusedIterator for Lines<'_> {}\n /// [`lines_any`]: str::lines_any\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n #[allow(deprecated)]\n pub struct LinesAny<'a>(pub(super) Lines<'a>);"}, {"sha": "6c21a5e802026b858073de5ebe0f2abdc27377cc", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -29,6 +29,7 @@ impl Utf8Lossy {\n }\n \n /// Iterator over lossy UTF-8 string\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n #[allow(missing_debug_implementations)]\n pub struct Utf8LossyChunksIter<'a> {"}, {"sha": "8f02ecbd009c4a528fc8139c8b275e1da42459ae", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -498,6 +498,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.29.0\", reason = \"use `get_unchecked(begin..end)` instead\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n@@ -570,6 +571,7 @@ impl str {\n     /// assert_eq!(\" Martin-L\u00f6f\", last);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"str_split_at\", since = \"1.4.0\")]\n     pub fn split_at(&self, mid: usize) -> (&str, &str) {\n         // is_char_boundary checks that the index is in [0, .len()]\n@@ -613,6 +615,7 @@ impl str {\n     /// assert_eq!(\"PER Martin-L\u00f6f\", s);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"str_split_at\", since = \"1.4.0\")]\n     pub fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) {\n         // is_char_boundary checks that the index is in [0, .len()]\n@@ -2255,6 +2258,7 @@ impl str {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         // We can treat each byte as character here: all multibyte characters\n@@ -2276,6 +2280,7 @@ impl str {\n     /// assert!(!\"Ferr\u00f6s\".eq_ignore_ascii_case(\"FERR\u00d6S\"));\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn eq_ignore_ascii_case(&self, other: &str) -> bool {\n         self.as_bytes().eq_ignore_ascii_case(other.as_bytes())"}, {"sha": "9a1cf905e3b025c9aed55a9d56804da08d2482e3", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -251,6 +251,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n \n /// Given a first byte, determines how many bytes are in this UTF-8 character.\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n+#[must_use]\n #[inline]\n pub fn utf8_char_width(b: u8) -> usize {\n     UTF8_CHAR_WIDTH[b as usize] as usize"}, {"sha": "6cba781c2ed8f6d41f1cc16b724b7c8022295aab", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -167,6 +167,7 @@ impl<'a> Context<'a> {\n \n     /// Returns a reference to the `Waker` for the current task.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn waker(&self) -> &'a Waker {\n         &self.waker\n@@ -242,6 +243,7 @@ impl Waker {\n     ///\n     /// This function is primarily used for optimization purposes.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn will_wake(&self, other: &Waker) -> bool {\n         self.waker == other.waker"}, {"sha": "a054d72a8800add4d17e15b60929ac9265bcecb3", "filename": "library/core/src/time.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -357,6 +357,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn subsec_millis(&self) -> u32 {\n         self.nanos / NANOS_PER_MILLI\n@@ -379,6 +380,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn subsec_micros(&self) -> u32 {\n         self.nanos / NANOS_PER_MICRO\n@@ -401,6 +403,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 {\n         self.nanos"}, {"sha": "6d2cf3e83bce9683bbf9fea9dbd510072cb79c6c", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -115,7 +115,7 @@ fn test_eq_ignore_ascii_case() {\n #[test]\n fn inference_works() {\n     let x = \"a\".to_string();\n-    x.eq_ignore_ascii_case(\"A\");\n+    let _ = x.eq_ignore_ascii_case(\"A\");\n }\n \n // Shorthands used by the is_ascii_* tests."}, {"sha": "ce40bac3f31a515d300a0d2bfb540f1ad8c573ea", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -59,7 +59,6 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n-#![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]"}, {"sha": "1fc1d39b1816e63cd3e48c19defd8b486169ffed", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1320,6 +1320,8 @@ where\n ///\n /// let mut intersection = a.intersection(&b);\n /// ```\n+#[must_use = \"this returns the intersection as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1345,6 +1347,8 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n ///\n /// let mut difference = a.difference(&b);\n /// ```\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1370,6 +1374,8 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n ///\n /// let mut intersection = a.symmetric_difference(&b);\n /// ```\n+#[must_use = \"this returns the difference as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n@@ -1392,6 +1398,8 @@ pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n ///\n /// let mut union_iter = a.union(&b);\n /// ```\n+#[must_use = \"this returns the union as an iterator, \\\n+              without modifying either input set\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}, {"sha": "49e268eb99bc85c503e1e5b17dbd83afa638b1ab", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -829,6 +829,7 @@ impl OsStr {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"osstring_ascii\", since = \"1.53.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n         self.inner.is_ascii()"}, {"sha": "2b76a411a0fd50dc8e16a9d35864edf28701f56b", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -1046,7 +1046,6 @@ impl Metadata {\n     ///\n     #[cfg_attr(unix, doc = \"```no_run\")]\n     #[cfg_attr(not(unix), doc = \"```ignore\")]\n-    /// #![feature(is_symlink)]\n     /// use std::fs;\n     /// use std::path::Path;\n     /// use std::os::unix::fs::symlink;\n@@ -1062,7 +1061,7 @@ impl Metadata {\n     /// }\n     /// ```\n     #[must_use]\n-    #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n+    #[stable(feature = \"is_symlink\", since = \"1.57.0\")]\n     pub fn is_symlink(&self) -> bool {\n         self.file_type().is_symlink()\n     }"}, {"sha": "96a9da24c7e5520ab9bf179d3cfa3291d9027fb3", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -487,6 +487,7 @@ impl Stdin {\n     ///     println!(\"got a chunk: {}\", String::from_utf8_lossy(&split.unwrap()));\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n     pub fn split(self, byte: u8) -> Split<StdinLock<'static>> {\n         self.into_locked().split(byte)"}, {"sha": "4e547a8025845d53a77349be1091504e88af3c93", "filename": "library/std/src/path.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -2751,7 +2751,7 @@ impl Path {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n-    /// Returns true if the path exists on disk and is pointing at a symbolic link.\n+    /// Returns `true` if the path exists on disk and is pointing at a symbolic link.\n     ///\n     /// This function will not traverse symbolic links.\n     /// In case of a broken symbolic link this will also return true.\n@@ -2763,7 +2763,6 @@ impl Path {\n     ///\n     #[cfg_attr(unix, doc = \"```no_run\")]\n     #[cfg_attr(not(unix), doc = \"```ignore\")]\n-    /// #![feature(is_symlink)]\n     /// use std::path::Path;\n     /// use std::os::unix::fs::symlink;\n     ///\n@@ -2772,8 +2771,14 @@ impl Path {\n     /// assert_eq!(link_path.is_symlink(), true);\n     /// assert_eq!(link_path.exists(), false);\n     /// ```\n-    #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n+    ///\n+    /// # See Also\n+    ///\n+    /// This is a convenience function that coerces errors to false. If you want to\n+    /// check errors, call [`fs::symlink_metadata`] and handle its [`Result`]. Then call\n+    /// [`fs::Metadata::is_symlink`] if it was [`Ok`].\n     #[must_use]\n+    #[stable(feature = \"is_symlink\", since = \"1.57.0\")]\n     pub fn is_symlink(&self) -> bool {\n         fs::symlink_metadata(self).map(|m| m.is_symlink()).unwrap_or(false)\n     }"}, {"sha": "d93ffcb2262eb362edb6e0cd773599847741b139", "filename": "src/test/ui/issues/issue-31299.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58899c4d9c63a6d27ac395ee9597ae797df7f026/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58899c4d9c63a6d27ac395ee9597ae797df7f026/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs?ref=58899c4d9c63a6d27ac395ee9597ae797df7f026", "patch": "@@ -29,6 +29,7 @@ struct PtrBack<T: Front>(Vec<T::Back>);\n \n struct M(PtrBack<Vec<M>>);\n \n+#[allow(unused_must_use)]\n fn main() {\n     std::mem::size_of::<M>();\n }"}]}