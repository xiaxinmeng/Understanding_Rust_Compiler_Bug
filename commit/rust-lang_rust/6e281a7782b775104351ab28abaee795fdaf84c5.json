{"sha": "6e281a7782b775104351ab28abaee795fdaf84c5", "node_id": "C_kwDOAAsO6NoAKDZlMjgxYTc3ODJiNzc1MTA0MzUxYWIyOGFiYWVlNzk1ZmRhZjg0YzU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-12-16T20:38:08Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:29Z"}, "message": "Explicitly list all ExprKinds in cfg_build\n\nAlso rearranges the existing arms to be more logical. For example, Break\nand Continue come closer to Loop now.", "tree": {"sha": "ef8f0fa904f09012c08506a39d0c9eff2c906c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8f0fa904f09012c08506a39d0c9eff2c906c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e281a7782b775104351ab28abaee795fdaf84c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e281a7782b775104351ab28abaee795fdaf84c5", "html_url": "https://github.com/rust-lang/rust/commit/6e281a7782b775104351ab28abaee795fdaf84c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e281a7782b775104351ab28abaee795fdaf84c5/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a70de79321552fa8c254b9998562d7814f3f72e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a70de79321552fa8c254b9998562d7814f3f72e", "html_url": "https://github.com/rust-lang/rust/commit/4a70de79321552fa8c254b9998562d7814f3f72e"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "4656f56569e460f4a519ef55dc9d44dd3ba24039", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6e281a7782b775104351ab28abaee795fdaf84c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e281a7782b775104351ab28abaee795fdaf84c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=6e281a7782b775104351ab28abaee795fdaf84c5", "patch": "@@ -103,6 +103,12 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         let mut reinit = None;\n         match expr.kind {\n+            ExprKind::Assign(lhs, rhs, _) => {\n+                self.visit_expr(lhs);\n+                self.visit_expr(rhs);\n+\n+                reinit = Some(lhs);\n+            }\n             ExprKind::If(test, if_true, if_false) => {\n                 self.visit_expr(test);\n \n@@ -119,17 +125,6 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n \n                 self.drop_ranges.add_control_edge(true_end, self.expr_index + 1);\n             }\n-            ExprKind::Assign(lhs, rhs, _) => {\n-                self.visit_expr(lhs);\n-                self.visit_expr(rhs);\n-\n-                reinit = Some(lhs);\n-            }\n-            ExprKind::Loop(body, ..) => {\n-                let loop_begin = self.expr_index + 1;\n-                self.visit_block(body);\n-                self.drop_ranges.add_control_edge(self.expr_index, loop_begin);\n-            }\n             ExprKind::Match(scrutinee, arms, ..) => {\n                 self.visit_expr(scrutinee);\n \n@@ -160,12 +155,45 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                     self.drop_ranges.add_control_edge(arm_end, self.expr_index + 1)\n                 });\n             }\n+            ExprKind::Loop(body, ..) => {\n+                let loop_begin = self.expr_index + 1;\n+                self.visit_block(body);\n+                self.drop_ranges.add_control_edge(self.expr_index, loop_begin);\n+            }\n             ExprKind::Break(hir::Destination { target_id: Ok(target), .. }, ..)\n             | ExprKind::Continue(hir::Destination { target_id: Ok(target), .. }, ..) => {\n                 self.drop_ranges.add_control_edge_hir_id(self.expr_index, target);\n             }\n \n-            _ => intravisit::walk_expr(self, expr),\n+            ExprKind::AddrOf(..)\n+            | ExprKind::Array(..)\n+            | ExprKind::AssignOp(..)\n+            | ExprKind::Binary(..)\n+            | ExprKind::Block(..)\n+            | ExprKind::Box(..)\n+            | ExprKind::Break(..)\n+            | ExprKind::Call(..)\n+            | ExprKind::Cast(..)\n+            | ExprKind::Closure(..)\n+            | ExprKind::ConstBlock(..)\n+            | ExprKind::Continue(..)\n+            | ExprKind::DropTemps(..)\n+            | ExprKind::Err\n+            | ExprKind::Field(..)\n+            | ExprKind::Index(..)\n+            | ExprKind::InlineAsm(..)\n+            | ExprKind::Let(..)\n+            | ExprKind::Lit(..)\n+            | ExprKind::LlvmInlineAsm(..)\n+            | ExprKind::MethodCall(..)\n+            | ExprKind::Path(..)\n+            | ExprKind::Repeat(..)\n+            | ExprKind::Ret(..)\n+            | ExprKind::Struct(..)\n+            | ExprKind::Tup(..)\n+            | ExprKind::Type(..)\n+            | ExprKind::Unary(..)\n+            | ExprKind::Yield(..) => intravisit::walk_expr(self, expr),\n         }\n \n         self.expr_index = self.expr_index + 1;"}]}