{"sha": "cb5733de868600aab889730effe4077641a46981", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTczM2RlODY4NjAwYWFiODg5NzMwZWZmZTQwNzc2NDFhNDY5ODE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-10-17T16:21:05Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-10-17T16:37:01Z"}, "message": "Improve code style", "tree": {"sha": "7ebc1dc83eecca0167f809e5d3ab882d929fa3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ebc1dc83eecca0167f809e5d3ab882d929fa3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5733de868600aab889730effe4077641a46981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5733de868600aab889730effe4077641a46981", "html_url": "https://github.com/rust-lang/rust/commit/cb5733de868600aab889730effe4077641a46981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5733de868600aab889730effe4077641a46981/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85628e80637cf21caa9d6fef31d9fed53e7156aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/85628e80637cf21caa9d6fef31d9fed53e7156aa", "html_url": "https://github.com/rust-lang/rust/commit/85628e80637cf21caa9d6fef31d9fed53e7156aa"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "f95d5aad18a654792815573564f12259244e0a29", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -329,7 +329,11 @@ fn get_test_threads(matches: &getopts::Matches) -> OptPartRes<Option<usize>> {\n     Ok(test_threads)\n }\n \n-fn get_format(matches: &getopts::Matches, quiet: bool, allow_unstable: bool) -> OptPartRes<OutputFormat> {\n+fn get_format(\n+    matches: &getopts::Matches,\n+    quiet: bool,\n+    allow_unstable: bool\n+) -> OptPartRes<OutputFormat> {\n     let format = match matches.opt_str(\"format\").as_ref().map(|s| &**s) {\n         None if quiet => OutputFormat::Terse,\n         Some(\"pretty\") | None => OutputFormat::Pretty,"}, {"sha": "eefbd2d6a813a5804ddd0d6926058f1cc26d683b", "filename": "src/libtest/event.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fevent.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -14,7 +14,12 @@ pub struct CompletedTest {\n }\n \n impl CompletedTest {\n-    pub fn new(desc: TestDesc, result: TestResult, exec_time: Option<TestExecTime>, stdout: Vec<u8>) -> Self {\n+    pub fn new(\n+        desc: TestDesc,\n+        result: TestResult,\n+        exec_time: Option<TestExecTime>,\n+        stdout: Vec<u8>\n+    ) -> Self {\n         Self {\n             desc,\n             result,"}, {"sha": "b73d7349678a720c81f519ca233d7997e4452e8b", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -92,7 +92,8 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n         stdout: &[u8],\n         state: &ConsoleTestState,\n     ) -> io::Result<()> {\n-        let stdout = if (state.options.display_output || *result != TestResult::TrOk) && stdout.len() > 0 {\n+        let display_stdout = state.options.display_output || *result != TestResult::TrOk;\n+        let stdout = if display_stdout && stdout.len() > 0 {\n             Some(String::from_utf8_lossy(stdout))\n         } else {\n             None"}, {"sha": "fe56157d9c10a2624f88f3b846621387daf331eb", "filename": "src/libtest/formatters/terse.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fterse.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -196,7 +196,9 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n     ) -> io::Result<()> {\n         match *result {\n             TestResult::TrOk => self.write_ok(),\n-            TestResult::TrFailed | TestResult::TrFailedMsg(_) | TestResult::TrTimedFail => self.write_failed(),\n+            TestResult::TrFailed\n+                | TestResult::TrFailedMsg(_)\n+                | TestResult::TrTimedFail => self.write_failed(),\n             TestResult::TrIgnored => self.write_ignored(),\n             TestResult::TrAllowedFail => self.write_allowed_fail(),\n             TestResult::TrBench(ref bs) => {"}, {"sha": "6e4954778e60523c90cd4011cbad0be3951b9bb4", "filename": "src/libtest/helpers/isatty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fhelpers%2Fisatty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Fhelpers%2Fisatty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fisatty.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -30,4 +30,4 @@ pub fn stdout_isatty() -> bool {\n         let mut out = 0;\n         GetConsoleMode(handle, &mut out) != 0\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "89f527b6bd763f2c099ddfb6f054fb7ff833611a", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -46,8 +46,8 @@ pub mod test {\n         test_result::{TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk},\n         time::{TestTimeOptions, TestExecTime},\n         types::{\n-            DynTestFn, DynTestName, StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn,\n-            TestName, TestType,\n+            DynTestFn, DynTestName, StaticBenchFn, StaticTestFn, StaticTestName,\n+            TestDesc, TestDescAndFn, TestName, TestType,\n         },\n         assert_test_result, filter_tests, run_test, test_main, test_main_static,\n     };\n@@ -199,7 +199,11 @@ pub fn assert_test_result<T: Termination>(result: T) {\n     );\n }\n \n-pub fn run_tests<F>(opts: &TestOpts, tests: Vec<TestDescAndFn>, mut notify_about_test_event: F) -> io::Result<()>\n+pub fn run_tests<F>(\n+    opts: &TestOpts,\n+    tests: Vec<TestDescAndFn>,\n+    mut notify_about_test_event: F\n+) -> io::Result<()>\n where\n     F: FnMut(TestEvent) -> io::Result<()>,\n {\n@@ -325,7 +329,7 @@ where\n                         _ => {\n                             // We've got a result, stop the loop.\n                             break;\n-                        }            \n+                        }\n                     }\n                 } else {\n                     res = rx.recv().map_err(|_| RecvTimeoutError::Disconnected);"}, {"sha": "80ca9dea18f5aff3ab26b4d57964850ddd7315bc", "filename": "src/libtest/test_result.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftest_result.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -1,4 +1,3 @@\n-\n use std::any::Any;\n \n use super::bench::BenchSamples;\n@@ -50,11 +49,15 @@ pub fn calc_result<'a>(\n                 if desc.allow_fail {\n                     TestResult::TrAllowedFail\n                 } else {\n-                    TestResult::TrFailedMsg(format!(\"panic did not include expected string '{}'\", msg))\n+                    TestResult::TrFailedMsg(\n+                        format!(\"panic did not include expected string '{}'\", msg)\n+                    )\n                 }\n             }\n         }\n-        (&ShouldPanic::Yes, Ok(())) => TestResult::TrFailedMsg(\"test did not panic as expected\".to_string()),\n+        (&ShouldPanic::Yes, Ok(())) => {\n+            TestResult::TrFailedMsg(\"test did not panic as expected\".to_string())\n+        }\n         _ if desc.allow_fail => TestResult::TrAllowedFail,\n         _ => TestResult::TrFailed,\n     };"}, {"sha": "9de774555e9ccab037f333b110bb76b11c0b5ecf", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -7,11 +7,12 @@ use crate::{\n     time::{TimeThreshold, TestTimeOptions},\n     formatters::PrettyFormatter,\n     test::{\n-        filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored, RunStrategy,\n+        filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap,\n+        RunIgnored, RunStrategy, ShouldPanic, StaticTestName, TestDesc,\n+        TestDescAndFn, TestOpts, TrIgnored, TrOk,\n+        // FIXME (introduced by #65251)\n         // ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TestTimeOptions,\n         // TestType, TrFailedMsg, TrIgnored, TrOk,\n-        ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts,\n-        TrIgnored, TrOk,\n     },\n };\n use std::sync::mpsc::channel;\n@@ -104,7 +105,7 @@ pub fn ignored_tests_result_in_ignored() {\n     assert!(result == TrIgnored);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n+// FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic() {\n@@ -127,7 +128,7 @@ fn test_should_panic() {\n     assert!(result == TrOk);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n+// FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_good_message() {\n@@ -150,7 +151,7 @@ fn test_should_panic_good_message() {\n     assert!(result == TrOk);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n+// FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_bad_message() {\n@@ -176,7 +177,7 @@ fn test_should_panic_bad_message() {\n     assert!(result == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n+// FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_but_succeeds() {"}, {"sha": "f4d4b17b620ba7c467f8171a26d60721291943ac", "filename": "src/libtest/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5733de868600aab889730effe4077641a46981/src%2Flibtest%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftime.rs?ref=cb5733de868600aab889730effe4077641a46981", "patch": "@@ -2,7 +2,7 @@\n //! execution.\n //! Two main purposes of this module:\n //! - Check whether test is timed out.\n-//! - Provide helpers for `report-time` and `measure-time` options. \n+//! - Provide helpers for `report-time` and `measure-time` options.\n \n use std::time::{Duration, Instant};\n use std::str::FromStr;\n@@ -55,7 +55,7 @@ pub mod time_constants {\n }\n \n /// Returns an `Instance` object denoting when the test should be considered\n-/// timed out. \n+/// timed out.\n pub fn get_default_test_timeout() -> Instant {\n     Instant::now() + Duration::from_secs(TEST_WARN_TIMEOUT_S)\n }"}]}