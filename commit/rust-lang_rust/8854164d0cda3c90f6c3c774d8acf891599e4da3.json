{"sha": "8854164d0cda3c90f6c3c774d8acf891599e4da3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NTQxNjRkMGNkYTNjOTBmNmMzYzc3NGQ4YWNmODkxNTk5ZTRkYTM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-13T13:40:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-15T22:31:06Z"}, "message": "rustc_const_eval: move ConstEvalErr to the rustc crate.", "tree": {"sha": "bacca832c1ebe509413bd5385be707e25e9372a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bacca832c1ebe509413bd5385be707e25e9372a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8854164d0cda3c90f6c3c774d8acf891599e4da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8854164d0cda3c90f6c3c774d8acf891599e4da3", "html_url": "https://github.com/rust-lang/rust/commit/8854164d0cda3c90f6c3c774d8acf891599e4da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8854164d0cda3c90f6c3c774d8acf891599e4da3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5cf1cb64cd1948a8c289e29838716f03d49d5aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5cf1cb64cd1948a8c289e29838716f03d49d5aa", "html_url": "https://github.com/rust-lang/rust/commit/d5cf1cb64cd1948a8c289e29838716f03d49d5aa"}], "stats": {"total": 497, "additions": 242, "deletions": 255}, "files": [{"sha": "c4b5366d4a324190ed9336e7444db75ecba4b878", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -503,7 +503,6 @@ name = \"rustc_const_eval\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"graphviz 0.0.0\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -731,7 +730,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\","}, {"sha": "8a391f9cde3a3a37b9dc74dddd09106617a86292", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -327,6 +327,25 @@ struct ListNode {\n This works because `Box` is a pointer, so its size is well-known.\n \"##,\n \n+E0080: r##\"\n+This error indicates that the compiler was unable to sensibly evaluate an\n+constant expression that had to be evaluated. Attempting to divide by 0\n+or causing integer overflow are two ways to induce this error. For example:\n+\n+```compile_fail,E0080\n+enum Enum {\n+    X = (1 << 500),\n+    Y = (1 / 0)\n+}\n+```\n+\n+Ensure that the expressions given can be evaluated as the desired integer type.\n+See the FFI section of the Reference for more information about using a custom\n+integer type:\n+\n+https://doc.rust-lang.org/reference.html#ffi-attributes\n+\"##,\n+\n E0106: r##\"\n This error indicates that a lifetime is missing from a type. If it is an error\n inside a function signature, the problem may be with failing to adhere to the"}, {"sha": "9315f7f58081af4d036d76de0ac0abdc337a6821", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 159, "deletions": 5, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -8,17 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::symbol::InternedString;\n-use syntax::ast;\n-use std::rc::Rc;\n+use self::ConstVal::*;\n+pub use rustc_const_math::ConstInt;\n+\n use hir::def_id::DefId;\n+use ty::TyCtxt;\n use ty::subst::Substs;\n use rustc_const_math::*;\n \n-use self::ConstVal::*;\n-pub use rustc_const_math::ConstInt;\n+use graphviz::IntoCow;\n+use errors::DiagnosticBuilder;\n+use syntax::symbol::InternedString;\n+use syntax::ast;\n+use syntax_pos::Span;\n \n+use std::borrow::Cow;\n use std::collections::BTreeMap;\n+use std::rc::Rc;\n+\n+pub type EvalResult<'tcx> = Result<ConstVal<'tcx>, ConstEvalErr<'tcx>>;\n \n #[derive(Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n pub enum ConstVal<'tcx> {\n@@ -61,3 +69,149 @@ impl<'tcx> ConstVal<'tcx> {\n         }\n     }\n }\n+\n+#[derive(Clone, Debug)]\n+pub struct ConstEvalErr<'tcx> {\n+    pub span: Span,\n+    pub kind: ErrKind<'tcx>,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum ErrKind<'tcx> {\n+    CannotCast,\n+    MissingStructField,\n+    NegateOn(ConstVal<'tcx>),\n+    NotOn(ConstVal<'tcx>),\n+    CallOn(ConstVal<'tcx>),\n+\n+    NonConstPath,\n+    UnimplementedConstVal(&'static str),\n+    ExpectedConstTuple,\n+    ExpectedConstStruct,\n+    IndexedNonVec,\n+    IndexNotUsize,\n+    IndexOutOfBounds { len: u64, index: u64 },\n+\n+    MiscBinaryOp,\n+    MiscCatchAll,\n+\n+    IndexOpFeatureGated,\n+    Math(ConstMathErr),\n+\n+    ErroneousReferencedConstant(Box<ConstEvalErr<'tcx>>),\n+\n+    TypeckError\n+}\n+\n+impl<'tcx> From<ConstMathErr> for ErrKind<'tcx> {\n+    fn from(err: ConstMathErr) -> ErrKind<'tcx> {\n+        match err {\n+            ConstMathErr::UnsignedNegation => ErrKind::TypeckError,\n+            _ => ErrKind::Math(err)\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum ConstEvalErrDescription<'a> {\n+    Simple(Cow<'a, str>),\n+}\n+\n+impl<'a> ConstEvalErrDescription<'a> {\n+    /// Return a one-line description of the error, for lints and such\n+    pub fn into_oneline(self) -> Cow<'a, str> {\n+        match self {\n+            ConstEvalErrDescription::Simple(simple) => simple,\n+        }\n+    }\n+}\n+\n+impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n+    pub fn description(&self) -> ConstEvalErrDescription {\n+        use self::ErrKind::*;\n+        use self::ConstEvalErrDescription::*;\n+\n+        macro_rules! simple {\n+            ($msg:expr) => ({ Simple($msg.into_cow()) });\n+            ($fmt:expr, $($arg:tt)+) => ({\n+                Simple(format!($fmt, $($arg)+).into_cow())\n+            })\n+        }\n+\n+        match self.kind {\n+            CannotCast => simple!(\"can't cast this type\"),\n+            NegateOn(ref const_val) => simple!(\"negate on {}\", const_val.description()),\n+            NotOn(ref const_val) => simple!(\"not on {}\", const_val.description()),\n+            CallOn(ref const_val) => simple!(\"call on {}\", const_val.description()),\n+\n+            MissingStructField  => simple!(\"nonexistent struct field\"),\n+            NonConstPath        => simple!(\"non-constant path in constant expression\"),\n+            UnimplementedConstVal(what) =>\n+                simple!(\"unimplemented constant expression: {}\", what),\n+            ExpectedConstTuple => simple!(\"expected constant tuple\"),\n+            ExpectedConstStruct => simple!(\"expected constant struct\"),\n+            IndexedNonVec => simple!(\"indexing is only supported for arrays\"),\n+            IndexNotUsize => simple!(\"indices must be of type `usize`\"),\n+            IndexOutOfBounds { len, index } => {\n+                simple!(\"index out of bounds: the len is {} but the index is {}\",\n+                        len, index)\n+            }\n+\n+            MiscBinaryOp => simple!(\"bad operands for binary\"),\n+            MiscCatchAll => simple!(\"unsupported constant expr\"),\n+            IndexOpFeatureGated => simple!(\"the index operation on const values is unstable\"),\n+            Math(ref err) => Simple(err.description().into_cow()),\n+\n+            ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),\n+\n+            TypeckError => simple!(\"type-checking failed\"),\n+        }\n+    }\n+\n+    pub fn struct_error(&self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        primary_span: Span,\n+        primary_kind: &str)\n+        -> DiagnosticBuilder<'gcx>\n+    {\n+        let mut err = self;\n+        while let &ConstEvalErr {\n+            kind: ErrKind::ErroneousReferencedConstant(box ref i_err), ..\n+        } = err {\n+            err = i_err;\n+        }\n+\n+        let mut diag = struct_span_err!(tcx.sess, err.span, E0080, \"constant evaluation error\");\n+        err.note(tcx, primary_span, primary_kind, &mut diag);\n+        diag\n+    }\n+\n+    pub fn note(&self,\n+        _tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        primary_span: Span,\n+        primary_kind: &str,\n+        diag: &mut DiagnosticBuilder)\n+    {\n+        match self.description() {\n+            ConstEvalErrDescription::Simple(message) => {\n+                diag.span_label(self.span, &message);\n+            }\n+        }\n+\n+        if !primary_span.contains(self.span) {\n+            diag.span_note(primary_span,\n+                        &format!(\"for {} here\", primary_kind));\n+        }\n+    }\n+\n+    pub fn report(&self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        primary_span: Span,\n+        primary_kind: &str)\n+    {\n+        if let ErrKind::TypeckError = self.kind {\n+            return;\n+        }\n+        self.struct_error(tcx, primary_span, primary_kind).emit();\n+    }\n+}"}, {"sha": "e9eb5e97582bf136975d6332cb6e1925a17ebd62", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -10,7 +10,7 @@\n \n use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use middle::const_val::ConstVal;\n+use middle::const_val;\n use middle::privacy::AccessLevels;\n use mir;\n use session::CompileResult;\n@@ -443,7 +443,7 @@ define_maps! { <'tcx>\n \n     /// Results of evaluating monomorphic constants embedded in\n     /// other items, such as enum variant explicit discriminants.\n-    pub monomorphic_const_eval: MonomorphicConstEval(DefId) -> Result<ConstVal<'tcx>, ()>,\n+    pub monomorphic_const_eval: MonomorphicConstEval(DefId) -> const_val::EvalResult<'tcx>,\n \n     /// Performs the privacy check and computes \"access levels\".\n     pub privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,"}, {"sha": "bbc6148082494f905194f9be7aa9b200b075686f", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -17,5 +17,4 @@ rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n-graphviz = { path = \"../libgraphviz\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f1ab6a00aa2effb1e3528546dc825b9aec8b0319", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -14,8 +14,6 @@ use _match::WitnessPreference::*;\n \n use pattern::{Pattern, PatternContext, PatternError, PatternKind};\n \n-use eval::report_const_eval_err;\n-\n use rustc::dep_graph::DepNode;\n \n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n@@ -108,27 +106,29 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n-    fn check_patterns(&self, has_guard: bool, pats: &[P<Pat>]) {\n-        check_legality_of_move_bindings(self, has_guard, pats);\n-        for pat in pats {\n-            check_legality_of_bindings_in_at_patterns(self, pat);\n-        }\n-    }\n-\n-    fn report_inlining_errors(&self, patcx: PatternContext, pat_span: Span) {\n-        for error in patcx.errors {\n-            match error {\n+impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n+    fn report_inlining_errors(&self, pat_span: Span) {\n+        for error in &self.errors {\n+            match *error {\n                 PatternError::StaticInPattern(span) => {\n                     span_err!(self.tcx.sess, span, E0158,\n                               \"statics cannot be referenced in patterns\");\n                 }\n-                PatternError::ConstEval(err) => {\n-                    report_const_eval_err(self.tcx, &err, pat_span, \"pattern\");\n+                PatternError::ConstEval(ref err) => {\n+                    err.report(self.tcx, pat_span, \"pattern\");\n                 }\n             }\n         }\n     }\n+}\n+\n+impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n+    fn check_patterns(&self, has_guard: bool, pats: &[P<Pat>]) {\n+        check_legality_of_move_bindings(self, has_guard, pats);\n+        for pat in pats {\n+            check_legality_of_bindings_in_at_patterns(self, pat);\n+        }\n+    }\n \n     fn check_match(\n         &self,\n@@ -161,7 +161,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                     let mut patcx = PatternContext::new(self.tcx, self.tables);\n                     let pattern = expand_pattern(cx, patcx.lower_pattern(&pat));\n                     if !patcx.errors.is_empty() {\n-                        self.report_inlining_errors(patcx, pat.span);\n+                        patcx.report_inlining_errors(pat.span);\n                         have_errors = true;\n                     }\n                     (pattern, &**pat)"}, {"sha": "04fc3e68c8ccd9033f3fd0226cfc10e6fe4967b0", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -557,25 +557,6 @@ The `op_string_ref` binding has type `&Option<&String>` in both cases.\n See also https://github.com/rust-lang/rust/issues/14587\n \"##,\n \n-E0080: r##\"\n-This error indicates that the compiler was unable to sensibly evaluate an\n-constant expression that had to be evaluated. Attempting to divide by 0\n-or causing integer overflow are two ways to induce this error. For example:\n-\n-```compile_fail,E0080\n-enum Enum {\n-    X = (1 << 500),\n-    Y = (1 / 0)\n-}\n-```\n-\n-Ensure that the expressions given can be evaluated as the desired integer type.\n-See the FFI section of the Reference for more information about using a custom\n-integer type:\n-\n-https://doc.rust-lang.org/reference.html#ffi-attributes\n-\"##,\n-\n }\n \n "}, {"sha": "b928bae620b6c08c0ec3d6a12a11ef38de6cc24d", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 6, "deletions": 170, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use rustc::middle::const_val::ConstVal::*;\n-use rustc::middle::const_val::ConstVal;\n-use self::ErrKind::*;\n+use rustc::middle::const_val::ErrKind::*;\n+use rustc::middle::const_val::{ConstVal, ConstEvalErr, EvalResult, ErrKind};\n \n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks::FnLikeNode;\n@@ -24,16 +24,13 @@ use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::DefIdMap;\n \n-use graphviz::IntoCow;\n use syntax::ast;\n use rustc::hir::{self, Expr};\n use syntax_pos::{Span, DUMMY_SP};\n \n-use std::borrow::Cow;\n use std::cmp::Ordering;\n \n use rustc_const_math::*;\n-use rustc_errors::DiagnosticBuilder;\n \n macro_rules! signal {\n     ($e:expr, $exn:expr) => {\n@@ -158,66 +155,6 @@ fn lookup_const_fn_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     }\n }\n \n-fn build_const_eval_err<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    err: &ConstEvalErr,\n-    primary_span: Span,\n-    primary_kind: &str)\n-    -> DiagnosticBuilder<'tcx>\n-{\n-    let mut err = err;\n-    while let &ConstEvalErr { kind: ErroneousReferencedConstant(box ref i_err), .. } = err {\n-        err = i_err;\n-    }\n-\n-    let mut diag = struct_span_err!(tcx.sess, err.span, E0080, \"constant evaluation error\");\n-    note_const_eval_err(tcx, err, primary_span, primary_kind, &mut diag);\n-    diag\n-}\n-\n-pub fn report_const_eval_err<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    err: &ConstEvalErr,\n-    primary_span: Span,\n-    primary_kind: &str)\n-{\n-    if let TypeckError = err.kind {\n-        return;\n-    }\n-    build_const_eval_err(tcx, err, primary_span, primary_kind).emit();\n-}\n-\n-pub fn fatal_const_eval_err<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    err: &ConstEvalErr,\n-    primary_span: Span,\n-    primary_kind: &str)\n-    -> !\n-{\n-    report_const_eval_err(tcx, err, primary_span, primary_kind);\n-    tcx.sess.abort_if_errors();\n-    unreachable!()\n-}\n-\n-pub fn note_const_eval_err<'a, 'tcx>(\n-    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    err: &ConstEvalErr,\n-    primary_span: Span,\n-    primary_kind: &str,\n-    diag: &mut DiagnosticBuilder)\n-{\n-    match err.description() {\n-        ConstEvalErrDescription::Simple(message) => {\n-            diag.span_label(err.span, &message);\n-        }\n-    }\n-\n-    if !primary_span.contains(err.span) {\n-        diag.span_note(primary_span,\n-                       &format!(\"for {} here\", primary_kind));\n-    }\n-}\n-\n pub struct ConstContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n@@ -251,107 +188,7 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n-pub struct ConstEvalErr<'tcx> {\n-    pub span: Span,\n-    pub kind: ErrKind<'tcx>,\n-}\n-\n-#[derive(Clone, Debug)]\n-pub enum ErrKind<'tcx> {\n-    CannotCast,\n-    MissingStructField,\n-    NegateOn(ConstVal<'tcx>),\n-    NotOn(ConstVal<'tcx>),\n-    CallOn(ConstVal<'tcx>),\n-\n-    NonConstPath,\n-    UnimplementedConstVal(&'static str),\n-    ExpectedConstTuple,\n-    ExpectedConstStruct,\n-    IndexedNonVec,\n-    IndexNotUsize,\n-    IndexOutOfBounds { len: u64, index: u64 },\n-\n-    MiscBinaryOp,\n-    MiscCatchAll,\n-\n-    IndexOpFeatureGated,\n-    Math(ConstMathErr),\n-\n-    ErroneousReferencedConstant(Box<ConstEvalErr<'tcx>>),\n-\n-    TypeckError\n-}\n-\n-impl<'tcx> From<ConstMathErr> for ErrKind<'tcx> {\n-    fn from(err: ConstMathErr) -> ErrKind<'tcx> {\n-        match err {\n-            ConstMathErr::UnsignedNegation => TypeckError,\n-            _ => Math(err)\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Debug)]\n-pub enum ConstEvalErrDescription<'a> {\n-    Simple(Cow<'a, str>),\n-}\n-\n-impl<'a> ConstEvalErrDescription<'a> {\n-    /// Return a one-line description of the error, for lints and such\n-    pub fn into_oneline(self) -> Cow<'a, str> {\n-        match self {\n-            ConstEvalErrDescription::Simple(simple) => simple,\n-        }\n-    }\n-}\n-\n-impl<'tcx> ConstEvalErr<'tcx> {\n-    pub fn description(&self) -> ConstEvalErrDescription {\n-        use self::ErrKind::*;\n-        use self::ConstEvalErrDescription::*;\n-\n-        macro_rules! simple {\n-            ($msg:expr) => ({ Simple($msg.into_cow()) });\n-            ($fmt:expr, $($arg:tt)+) => ({\n-                Simple(format!($fmt, $($arg)+).into_cow())\n-            })\n-        }\n-\n-        match self.kind {\n-            CannotCast => simple!(\"can't cast this type\"),\n-            NegateOn(ref const_val) => simple!(\"negate on {}\", const_val.description()),\n-            NotOn(ref const_val) => simple!(\"not on {}\", const_val.description()),\n-            CallOn(ref const_val) => simple!(\"call on {}\", const_val.description()),\n-\n-            MissingStructField  => simple!(\"nonexistent struct field\"),\n-            NonConstPath        => simple!(\"non-constant path in constant expression\"),\n-            UnimplementedConstVal(what) =>\n-                simple!(\"unimplemented constant expression: {}\", what),\n-            ExpectedConstTuple => simple!(\"expected constant tuple\"),\n-            ExpectedConstStruct => simple!(\"expected constant struct\"),\n-            IndexedNonVec => simple!(\"indexing is only supported for arrays\"),\n-            IndexNotUsize => simple!(\"indices must be of type `usize`\"),\n-            IndexOutOfBounds { len, index } => {\n-                simple!(\"index out of bounds: the len is {} but the index is {}\",\n-                        len, index)\n-            }\n-\n-            MiscBinaryOp => simple!(\"bad operands for binary\"),\n-            MiscCatchAll => simple!(\"unsupported constant expr\"),\n-            IndexOpFeatureGated => simple!(\"the index operation on const values is unstable\"),\n-            Math(ref err) => Simple(err.description().into_cow()),\n-\n-            ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),\n-\n-            TypeckError => simple!(\"type-checking failed\"),\n-        }\n-    }\n-}\n-\n-pub type EvalResult<'tcx> = Result<ConstVal<'tcx>, ConstEvalErr<'tcx>>;\n-pub type CastResult<'tcx> = Result<ConstVal<'tcx>, ErrKind<'tcx>>;\n+type CastResult<'tcx> = Result<ConstVal<'tcx>, ErrKind<'tcx>>;\n \n fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                                      e: &Expr) -> EvalResult<'tcx> {\n@@ -947,14 +784,14 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n         let a = match self.eval(a) {\n             Ok(a) => a,\n             Err(e) => {\n-                report_const_eval_err(tcx, &e, a.span, \"expression\");\n+                e.report(tcx, a.span, \"expression\");\n                 return Err(ErrorReported);\n             }\n         };\n         let b = match self.eval(b) {\n             Ok(b) => b,\n             Err(e) => {\n-                report_const_eval_err(tcx, &e, b.span, \"expression\");\n+                e.report(tcx, b.span, \"expression\");\n                 return Err(ErrorReported);\n             }\n         };\n@@ -979,8 +816,7 @@ pub fn eval_length<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         Ok(_) |\n         Err(ConstEvalErr { kind: TypeckError, .. }) => Err(ErrorReported),\n         Err(err) => {\n-            let mut diag = build_const_eval_err(\n-                tcx, &err, count_expr.span, reason);\n+            let mut diag = err.struct_error(tcx, count_expr.span, reason);\n \n             if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = count_expr.node {\n                 if let Def::Local(..) = path.def {"}, {"sha": "fa3161a860498c17dd866295a008c25e86e66e63", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -40,7 +40,6 @@ extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n-extern crate graphviz;\n extern crate syntax_pos;\n \n // NB: This module needs to be declared first so diagnostics are"}, {"sha": "f20fa27dc225124eca4bd6cd00fa90128e7ffd5a", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -11,7 +11,7 @@\n use eval;\n \n use rustc::lint;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, TypeVariants, Region};\n use rustc::ty::subst::{Substs, Kind};\n@@ -29,7 +29,7 @@ use syntax_pos::Span;\n #[derive(Clone, Debug)]\n pub enum PatternError<'tcx> {\n     StaticInPattern(Span),\n-    ConstEval(eval::ConstEvalErr<'tcx>),\n+    ConstEval(ConstEvalErr<'tcx>),\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "d2512ff602a84fb62014c056911a0284f138937c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -524,7 +524,8 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         if let ty::VariantDiscr::Explicit(def_id) = data.discr {\n-            let result = data.evaluated_discr.map_or(Err(()), Ok);\n+            // The original crate wouldn't have compiled if this is missing.\n+            let result = Ok(data.evaluated_discr.unwrap());\n             tcx.maps.monomorphic_const_eval.borrow_mut().insert(def_id, result);\n         }\n "}, {"sha": "595748c8c6fdc4ce26cbface7e4fa393166aaca2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -17,7 +17,7 @@ use hair::cx::to_ref::ToRef;\n use rustc::hir::map;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::middle::const_val::ConstVal;\n-use rustc_const_eval::{ConstContext, fatal_const_eval_err};\n+use rustc_const_eval::ConstContext;\n use rustc::ty::{self, AdtKind, VariantDef, Ty};\n use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::hir;\n@@ -597,7 +597,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let count = match ConstContext::new(tcx, count).eval(c) {\n                 Ok(ConstVal::Integral(ConstInt::Usize(u))) => u,\n                 Ok(other) => bug!(\"constant evaluation of repeat count yielded {:?}\", other),\n-                Err(s) => fatal_const_eval_err(tcx, &s, c.span, \"expression\")\n+                Err(s) => cx.fatal_const_eval_err(&s, c.span, \"expression\")\n             };\n \n             ExprKind::Repeat {"}, {"sha": "5f9fb8e1b120f040c57486f2cf285e0ed1b512e7", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -17,8 +17,8 @@\n use hair::*;\n use rustc::mir::transform::MirSource;\n \n-use rustc::middle::const_val::ConstVal;\n-use rustc_const_eval::{ConstContext, fatal_const_eval_err};\n+use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n+use rustc_const_eval::ConstContext;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::blocks::FnLikeNode;\n@@ -115,10 +115,21 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let tcx = self.tcx.global_tcx();\n         match ConstContext::with_tables(tcx, self.tables()).eval(e) {\n             Ok(value) => Literal::Value { value: value },\n-            Err(s) => fatal_const_eval_err(tcx, &s, e.span, \"expression\")\n+            Err(s) => self.fatal_const_eval_err(&s, e.span, \"expression\")\n         }\n     }\n \n+    pub fn fatal_const_eval_err(&self,\n+        err: &ConstEvalErr<'tcx>,\n+        primary_span: Span,\n+        primary_kind: &str)\n+        -> !\n+    {\n+        err.report(self.tcx, primary_span, primary_kind);\n+        self.tcx.sess.abort_if_errors();\n+        unreachable!()\n+    }\n+\n     pub fn trait_method(&mut self,\n                         trait_def_id: DefId,\n                         method_name: &str,"}, {"sha": "44d3026d80c3e9d20238310d91b7bb65a6804550", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -26,10 +26,11 @@\n \n use rustc::dep_graph::DepNode;\n use rustc::ty::cast::CastKind;\n-use rustc_const_eval::{ConstEvalErr, ConstContext};\n-use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll, Math};\n-use rustc_const_eval::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp, NonConstPath};\n-use rustc_const_eval::ErrKind::{TypeckError};\n+use rustc_const_eval::ConstContext;\n+use rustc::middle::const_val::ConstEvalErr;\n+use rustc::middle::const_val::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll};\n+use rustc::middle::const_val::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp, NonConstPath};\n+use rustc::middle::const_val::ErrKind::{TypeckError, Math};\n use rustc_const_math::{ConstMathErr, Op};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;"}, {"sha": "af477f5a15217bf7ca4c132a5dba9f77a9cb17d1", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -15,7 +15,6 @@ log = \"0.3\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n-rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "7a53a03344fcba2046f7a20e15f5679ffe72e4fa", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -13,9 +13,9 @@ use back::symbol_names;\n use llvm;\n use llvm::{SetUnnamedAddr};\n use llvm::{ValueRef, True};\n-use rustc_const_eval::ConstEvalErr;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n+use rustc::middle::const_val::ConstEvalErr;\n use {debuginfo, machine};\n use base;\n use trans_item::TransItem;"}, {"sha": "c5383fceb878775586780ffc042e30f9f15ae18a", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -51,7 +51,6 @@ extern crate rustc_incremental;\n pub extern crate rustc_llvm as llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_const_math;\n-extern crate rustc_const_eval;\n #[macro_use]\n #[no_link]\n extern crate rustc_bitflags;"}, {"sha": "0976859e27f44b7ed8a018922bad67fd9c55bc11", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n use llvm::{self, ValueRef, BasicBlockRef};\n-use rustc_const_eval::{ErrKind, ConstEvalErr, note_const_eval_err};\n use rustc::middle::lang_items;\n-use rustc::middle::const_val::ConstInt;\n+use rustc::middle::const_val::{ConstEvalErr, ConstInt, ErrKind};\n use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::{self, LayoutTyper};\n use rustc::mir;\n@@ -363,7 +362,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         let err = ConstEvalErr{ span: span, kind: err };\n                         let mut diag = bcx.tcx().sess.struct_span_warn(\n                             span, \"this expression will panic at run-time\");\n-                        note_const_eval_err(bcx.tcx(), &err, span, \"expression\", &mut diag);\n+                        err.note(bcx.tcx(), span, \"expression\", &mut diag);\n                         diag.emit();\n                     }\n                 }"}, {"sha": "37d2b1952f49419df33d4cddc185b7a4a9df3048", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use llvm::{self, ValueRef};\n-use rustc::middle::const_val::ConstVal;\n-use rustc_const_eval::{ErrKind, ConstEvalErr, report_const_eval_err};\n+use rustc::middle::const_val::{ConstEvalErr, ConstVal, ErrKind};\n use rustc_const_math::ConstInt::*;\n use rustc_const_math::ConstFloat::*;\n use rustc_const_math::{ConstInt, ConstMathErr};\n@@ -327,8 +326,8 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                             }\n                         };\n \n-                        let err = ConstEvalErr{ span: span, kind: err };\n-                        report_const_eval_err(tcx, &err, span, \"expression\");\n+                        let err = ConstEvalErr { span: span, kind: err };\n+                        err.report(tcx, span, \"expression\");\n                         failure = Err(err);\n                     }\n                     target"}, {"sha": "4d908f3c94fa58c7e2bda52885741b14ff6dc437", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -28,7 +28,6 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::Substs;\n-use rustc_const_eval::fatal_const_eval_err;\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n use type_of;\n@@ -82,9 +81,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                     match consts::trans_static(&ccx, m, item.id, &item.attrs) {\n                         Ok(_) => { /* Cool, everything's alright. */ },\n                         Err(err) => {\n-                            // FIXME: shouldn't this be a `span_err`?\n-                            fatal_const_eval_err(\n-                                ccx.tcx(), &err, item.span, \"static\");\n+                            err.report(ccx.tcx(), item.span, \"static\");\n                         }\n                     };\n                 } else {"}, {"sha": "4c7979ea3765c31cb0ae653833e99d3206aae84c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8854164d0cda3c90f6c3c774d8acf891599e4da3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8854164d0cda3c90f6c3c774d8acf891599e4da3", "patch": "@@ -59,7 +59,7 @@ use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n use middle::resolve_lifetime as rl;\n-use rustc_const_eval::{ConstContext, report_const_eval_err};\n+use rustc_const_eval::ConstContext;\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n@@ -587,17 +587,6 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.item_predicates(def_id);\n }\n \n-fn evaluate_disr_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                body: hir::BodyId)\n-                                -> Result<ConstVal<'tcx>, ()> {\n-    let e = &tcx.hir.body(body).value;\n-    ConstContext::new(tcx, body).eval(e).map_err(|err| {\n-        // enum variant evaluation happens before the global constant check\n-        // so we need to report the real error\n-        report_const_eval_err(tcx, &err, e.span, \"enum discriminant\");\n-    })\n-}\n-\n fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         def_id: DefId,\n                                         variants: &[hir::Variant]) {\n@@ -612,9 +601,15 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n             let result = tcx.maps.monomorphic_const_eval.memoize(expr_did, || {\n-                evaluate_disr_expr(tcx, e)\n+                ConstContext::new(tcx, e).eval(&tcx.hir.body(e).value)\n             });\n \n+            // enum variant evaluation happens before the global constant check\n+            // so we need to report the real error\n+            if let Err(ref err) = result {\n+                err.report(tcx, variant.span, \"enum discriminant\");\n+            }\n+\n             match result {\n                 Ok(ConstVal::Integral(x)) => Some(x),\n                 _ => None"}]}