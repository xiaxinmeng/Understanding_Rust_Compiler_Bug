{"sha": "25d0ef347affe79557cdfbaa4e66144c7f476fc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZDBlZjM0N2FmZmU3OTU1N2NkZmJhYTRlNjYxNDRjN2Y0NzZmYzA=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-05-24T04:29:12Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-06-03T06:15:15Z"}, "message": "Improve diagnostic messages for range patterns.", "tree": {"sha": "ca28f418e1f9a3f64dd0d96da6a28105c36992de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca28f418e1f9a3f64dd0d96da6a28105c36992de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25d0ef347affe79557cdfbaa4e66144c7f476fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25d0ef347affe79557cdfbaa4e66144c7f476fc0", "html_url": "https://github.com/rust-lang/rust/commit/25d0ef347affe79557cdfbaa4e66144c7f476fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25d0ef347affe79557cdfbaa4e66144c7f476fc0/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448ce12bc1c20e19fb5c798f1583d8e69969b5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/448ce12bc1c20e19fb5c798f1583d8e69969b5f1", "html_url": "https://github.com/rust-lang/rust/commit/448ce12bc1c20e19fb5c798f1583d8e69969b5f1"}], "stats": {"total": 218, "additions": 147, "deletions": 71}, "files": [{"sha": "87b6f8f0df6b34ab604428d33124fa23b8d50366", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=25d0ef347affe79557cdfbaa4e66144c7f476fc0", "patch": "@@ -24,7 +24,6 @@ use std::fmt;\n use std::fs::{self, File};\n use std::io::BufReader;\n use std::io::prelude::*;\n-use std::iter::repeat;\n use std::net::TcpStream;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n@@ -928,12 +927,12 @@ fn check_forbid_output(props: &TestProps,\n     }\n }\n \n-fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n+fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n                          testfile: &Path,\n                          proc_res: &ProcRes) {\n \n     // true if we found the error in question\n-    let mut found_flags: Vec<_> = repeat(false).take(expected_errors.len()).collect();\n+    let mut found_flags = vec![false; expected_errors.len()];\n \n     if proc_res.status.success() {\n         fatal(\"process did not return an error status\");\n@@ -954,14 +953,10 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         }\n     }\n \n-    // A multi-line error will have followup lines which will always\n-    // start with one of these strings.\n+    // A multi-line error will have followup lines which start with a space\n+    // or open paren.\n     fn continuation( line: &str) -> bool {\n-        line.starts_with(\" expected\") ||\n-        line.starts_with(\"    found\") ||\n-        //                1234\n-        // Should have 4 spaces: see issue 18946\n-        line.starts_with(\"(\")\n+        line.starts_with(\" \") || line.starts_with(\"(\")\n     }\n \n     // Scan and extract our error/warning messages,"}, {"sha": "0c756cf50083fe1f7ef3f0a7f08ac0e478c5a54e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 56, "deletions": 33, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=25d0ef347affe79557cdfbaa4e66144c7f476fc0", "patch": "@@ -83,41 +83,64 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             demand::suptype(fcx, pat.span, expected, pat_ty);\n         }\n         ast::PatRange(ref begin, ref end) => {\n-            check_expr(fcx, &**begin);\n-            check_expr(fcx, &**end);\n-\n-            let lhs_ty = fcx.expr_ty(&**begin);\n-            let rhs_ty = fcx.expr_ty(&**end);\n-\n-            let lhs_eq_rhs =\n-                require_same_types(\n-                    tcx, Some(fcx.infcx()), false, pat.span, lhs_ty, rhs_ty,\n-                    || \"mismatched types in range\".to_string());\n-\n-            let numeric_or_char =\n-                lhs_eq_rhs && (ty::type_is_numeric(lhs_ty) || ty::type_is_char(lhs_ty));\n-\n-            if numeric_or_char {\n-                match const_eval::compare_lit_exprs(tcx, &**begin, &**end, Some(lhs_ty),\n-                                                    |id| {fcx.item_substs()[&id].substs\n-                                                             .clone()}) {\n-                    Some(Ordering::Less) |\n-                    Some(Ordering::Equal) => {}\n-                    Some(Ordering::Greater) => {\n-                        span_err!(tcx.sess, begin.span, E0030,\n-                            \"lower range bound must be less than upper\");\n-                    }\n-                    None => {\n-                        span_err!(tcx.sess, begin.span, E0031,\n-                            \"mismatched types in range\");\n-                    }\n-                }\n-            } else {\n-                span_err!(tcx.sess, begin.span, E0029,\n-                          \"only char and numeric types are allowed in range\");\n+            check_expr(fcx, begin);\n+            check_expr(fcx, end);\n+\n+            let lhs_ty = fcx.expr_ty(begin);\n+            let rhs_ty = fcx.expr_ty(end);\n+\n+            // Check that both end-points are of numeric or char type.\n+            let numeric_or_char = |t| ty::type_is_numeric(t) || ty::type_is_char(t);\n+            let lhs_compat = numeric_or_char(lhs_ty);\n+            let rhs_compat = numeric_or_char(rhs_ty);\n+\n+            if !lhs_compat || !rhs_compat {\n+                let span = if !lhs_compat && !rhs_compat {\n+                    pat.span\n+                } else if !lhs_compat {\n+                    begin.span\n+                } else {\n+                    end.span\n+                };\n+\n+                // Note: spacing here is intentional, we want a space before \"start\" and \"end\".\n+                span_err!(tcx.sess, span, E0029,\n+                          \"only char and numeric types are allowed in range patterns\\n \\\n+                           start type: {}\\n end type: {}\",\n+                          fcx.infcx().ty_to_string(lhs_ty),\n+                          fcx.infcx().ty_to_string(rhs_ty)\n+                );\n+                return;\n+            }\n+\n+            // Check that the types of the end-points can be unified.\n+            let types_unify = require_same_types(\n+                    tcx, Some(fcx.infcx()), false, pat.span, rhs_ty, lhs_ty,\n+                    || \"mismatched types in range\".to_string()\n+            );\n+\n+            // It's ok to return without a message as `require_same_types` prints an error.\n+            if !types_unify {\n+                return;\n             }\n \n-            fcx.write_ty(pat.id, lhs_ty);\n+            // Now that we know the types can be unified we find the unified type and use\n+            // it to type the entire expression.\n+            let common_type = fcx.infcx().resolve_type_vars_if_possible(&lhs_ty);\n+\n+            fcx.write_ty(pat.id, common_type);\n+\n+            // Finally we evaluate the constants and check that the range is non-empty.\n+            let get_substs = |id| fcx.item_substs()[&id].substs.clone();\n+            match const_eval::compare_lit_exprs(tcx, begin, end, Some(&common_type), get_substs) {\n+                Some(Ordering::Less) |\n+                Some(Ordering::Equal) => {}\n+                Some(Ordering::Greater) => {\n+                    span_err!(tcx.sess, begin.span, E0030,\n+                        \"lower range bound must be less than or equal to upper\");\n+                }\n+                None => tcx.sess.span_bug(begin.span, \"literals of different types in range pat\")\n+            }\n \n             // subtyping doesn't matter here, as the value is some kind of scalar\n             demand::eqtype(fcx, pat.span, expected, lhs_ty);"}, {"sha": "5e5e972f1b7b25bd3584cb9e823742743b2ee7e5", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=25d0ef347affe79557cdfbaa4e66144c7f476fc0", "patch": "@@ -146,6 +146,47 @@ match d {\n ```\n \"##,\n \n+E0029: r##\"\n+In a match expression, only numbers and characters can be matched against a\n+range. This is because the compiler checks that the range is non-empty at\n+compile-time, and is unable to evaluate arbitrary comparison functions. If you\n+want to capture values of an orderable type between two end-points, you can use\n+a guard.\n+\n+```\n+// The ordering relation for strings can't be evaluated at compile time,\n+// so this doesn't work:\n+match string {\n+    \"hello\" ... \"world\" => ...\n+    _ => ...\n+}\n+\n+// This is a more general version, using a guard:\n+match string {\n+    s if s >= \"hello\" && s <= \"world\" => ...\n+    _ => ...\n+}\n+```\n+\"##,\n+\n+E0030: r##\"\n+When matching against a range, the compiler verifies that the range is\n+non-empty.  Range patterns include both end-points, so this is equivalent to\n+requiring the start of the range to be less than or equal to the end of the\n+range.\n+\n+For example:\n+\n+```\n+match 5u32 {\n+    // This range is ok, albeit pointless.\n+    1 ... 1 => ...\n+    // This range is empty, and the compiler can tell.\n+    1000 ... 5 => ...\n+}\n+```\n+\"##,\n+\n E0033: r##\"\n This error indicates that a pointer to a trait type cannot be implicitly\n dereferenced by a pattern. Every trait defines a type, but because the\n@@ -1107,9 +1148,6 @@ For more information see the [opt-in builtin traits RFC](https://github.com/rust\n }\n \n register_diagnostics! {\n-    E0029,\n-    E0030,\n-    E0031,\n     E0034, // multiple applicable methods in scope\n     E0035, // does not take type parameters\n     E0036, // incorrect number of type parameters given for this method"}, {"sha": "c60ef2ed28736a72dcb97116bd2ca67c49b45972", "filename": "src/test/compile-fail/match-ill-type1.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/448ce12bc1c20e19fb5c798f1583d8e69969b5f1/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448ce12bc1c20e19fb5c798f1583d8e69969b5f1/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs?ref=448ce12bc1c20e19fb5c798f1583d8e69969b5f1", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    match 1 {\n-        1...2_usize => 1, //~ ERROR mismatched types in range\n-        _ => 2,\n-    };\n-}"}, {"sha": "234b74f76d1e05eb39916d06434236140aca929e", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=25d0ef347affe79557cdfbaa4e66144c7f476fc0", "patch": "@@ -8,22 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//error-pattern: lower range bound\n-//error-pattern: only char and numeric types\n-//error-pattern: mismatched types\n-\n fn main() {\n     match 5 {\n-      6 ... 1 => { }\n-      _ => { }\n+        6 ... 1 => { }\n+        _ => { }\n+    };\n+    //~^^^ ERROR lower range bound must be less than or equal to upper\n+\n+    match \"wow\" {\n+        \"bar\" ... \"foo\" => { }\n     };\n+    //~^^ ERROR only char and numeric types are allowed in range\n+    //~| start type: &'static str\n+    //~| end type: &'static str\n \n     match \"wow\" {\n-      \"bar\" ... \"foo\" => { }\n+        10 ... \"what\" => ()\n     };\n+    //~^^ ERROR only char and numeric types are allowed in range\n+    //~| start type: _\n+    //~| end type: &'static str\n \n     match 5 {\n-      'c' ... 100 => { }\n-      _ => { }\n+        'c' ... 100 => { }\n+        _ => { }\n     };\n+    //~^^^ ERROR mismatched types in range\n+    //~| expected char\n+    //~| found integral variable\n }"}, {"sha": "74f513ef0814f621fcb8db1dfd2ba204aa2aeb72", "filename": "src/test/run-pass/match-range-infer.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Ftest%2Frun-pass%2Fmatch-range-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25d0ef347affe79557cdfbaa4e66144c7f476fc0/src%2Ftest%2Frun-pass%2Fmatch-range-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range-infer.rs?ref=25d0ef347affe79557cdfbaa4e66144c7f476fc0", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that type inference for range patterns works correctly (is bi-directional).\n+\n+pub fn main() {\n+    match 1 {\n+        1 ... 3 => {}\n+        _ => panic!(\"should match range\")\n+    }\n+    match 1 {\n+        1 ... 3u16 => {}\n+        _ => panic!(\"should match range with inferred start type\")\n+    }\n+    match 1 {\n+        1u16 ... 3 => {}\n+        _ => panic!(\"should match range with inferred end type\")\n+    }\n+}"}]}