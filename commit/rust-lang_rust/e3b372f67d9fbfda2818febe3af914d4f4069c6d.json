{"sha": "e3b372f67d9fbfda2818febe3af914d4f4069c6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYjM3MmY2N2Q5ZmJmZGEyODE4ZmViZTNhZjkxNGQ0ZjQwNjljNmQ=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-03-12T15:47:44Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2018-04-28T08:55:25Z"}, "message": "Only check possibly initialized values and also loop over fn args", "tree": {"sha": "4e2e8ba7c119febe97bbc37a39ca40c3ec103f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e2e8ba7c119febe97bbc37a39ca40c3ec103f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b372f67d9fbfda2818febe3af914d4f4069c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b372f67d9fbfda2818febe3af914d4f4069c6d", "html_url": "https://github.com/rust-lang/rust/commit/e3b372f67d9fbfda2818febe3af914d4f4069c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b372f67d9fbfda2818febe3af914d4f4069c6d/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a2b590ec0d6f1de5e44c00adb6638c05da6a265", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2b590ec0d6f1de5e44c00adb6638c05da6a265", "html_url": "https://github.com/rust-lang/rust/commit/5a2b590ec0d6f1de5e44c00adb6638c05da6a265"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "c26b3014e53dd05dae5f815bb4e7d7e3c5e4e75b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3b372f67d9fbfda2818febe3af914d4f4069c6d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b372f67d9fbfda2818febe3af914d4f4069c6d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e3b372f67d9fbfda2818febe3af914d4f4069c6d", "patch": "@@ -248,13 +248,15 @@ impl<'tcx> Mir<'tcx> {\n         })\n     }\n \n-    /// Returns an iterator over all user-declared mutable locals.\n+    /// Returns an iterator over all user-declared mutable arguments and locals.\n     #[inline]\n-    pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n-        (self.arg_count+1..self.local_decls.len()).filter_map(move |index| {\n+    pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n+        (1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            if decl.is_user_variable && decl.mutability == Mutability::Mut {\n+            if (decl.is_user_variable || index < self.arg_count + 1)\n+               && decl.mutability == Mutability::Mut\n+            {\n                 Some(local)\n             } else {\n                 None"}, {"sha": "60691d1179a68d53bc9f4f6ab327f3ba9d292db7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e3b372f67d9fbfda2818febe3af914d4f4069c6d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b372f67d9fbfda2818febe3af914d4f4069c6d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e3b372f67d9fbfda2818febe3af914d4f4069c6d", "patch": "@@ -261,9 +261,17 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n \n-    for local in mbcx.mir.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)) {\n+    for local in mbcx.mir.mut_vars_and_args_iter().filter(|local| !mbcx.used_mut.contains(local)) {\n         if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.visibility_scope_info {\n-            let source_info = mbcx.mir.local_decls[local].source_info;\n+            let local_decl = &mbcx.mir.local_decls[local];\n+\n+            // Skip over locals that begin with an underscore\n+            match local_decl.name {\n+                Some(name) if name.as_str().starts_with(\"_\") => continue,\n+                _ => {},\n+            }\n+\n+            let source_info = local_decl.source_info;\n             let mut_span = tcx.sess.codemap().span_until_non_whitespace(source_info.span);\n \n             tcx.struct_span_lint_node(\n@@ -864,7 +872,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         let mutability_error =\n-            self.check_access_permissions(place_span, rw, is_local_mutation_allowed);\n+            self.check_access_permissions(place_span, rw, is_local_mutation_allowed, flow_state);\n         let conflict_error =\n             self.check_access_for_conflict(context, place_span, sd, rw, flow_state);\n \n@@ -1656,6 +1664,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         (place, span): (&Place<'tcx>, Span),\n         kind: ReadOrWrite,\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n+        flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) -> bool {\n         debug!(\n             \"check_access_permissions({:?}, {:?}, {:?})\",\n@@ -1691,7 +1700,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {\n                 match place {\n                     Place::Local(local) => {\n-                        self.used_mut.insert(*local);\n+                        // If the local may be initialized, and it is now currently being\n+                        // mutated, then it is justified to be annotated with the `mut` keyword,\n+                        // since the mutation may be a possible reassignment.\n+                        let mpi = self.move_data.rev_lookup.find_local(*local);\n+                        if flow_state.inits.contains(&mpi) {\n+                            self.used_mut.insert(*local);\n+                        }\n                     }\n                     Place::Projection(ref proj) => {\n                         if let Some(field) = self.is_upvar_field_projection(&proj.base) {"}]}