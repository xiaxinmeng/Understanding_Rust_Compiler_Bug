{"sha": "823837922bfc55c715a170fda3aa5823ead2e235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMzgzNzkyMmJmYzU1YzcxNWExNzBmZGEzYWE1ODIzZWFkMmUyMzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-25T09:07:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-25T09:07:21Z"}, "message": "update for enum discriminant changes", "tree": {"sha": "6d57b5893b5209b4bbbff6a0e3d3cc1301785ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d57b5893b5209b4bbbff6a0e3d3cc1301785ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/823837922bfc55c715a170fda3aa5823ead2e235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/823837922bfc55c715a170fda3aa5823ead2e235", "html_url": "https://github.com/rust-lang/rust/commit/823837922bfc55c715a170fda3aa5823ead2e235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/823837922bfc55c715a170fda3aa5823ead2e235/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9280d17d981a17ab6c17069c3e4e2959d4372d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/9280d17d981a17ab6c17069c3e4e2959d4372d14", "html_url": "https://github.com/rust-lang/rust/commit/9280d17d981a17ab6c17069c3e4e2959d4372d14"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "ed8514863c197999dd84a5638b04285deb444f25", "filename": "src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/823837922bfc55c715a170fda3aa5823ead2e235/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823837922bfc55c715a170fda3aa5823ead2e235/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=823837922bfc55c715a170fda3aa5823ead2e235", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n \n             \"discriminant_value\" => {\n                 let place = self.ref_to_mplace(self.read_value(args[0])?)?;\n-                let discr_val = self.read_discriminant_value(place.into())?;\n+                let discr_val = self.read_discriminant(place.into())?.0;\n                 self.write_scalar(Scalar::from_uint(discr_val, dest.layout.size), dest)?;\n             }\n "}, {"sha": "a188623a1e0ef16baf940a5928aad3e6c024bf42", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/823837922bfc55c715a170fda3aa5823ead2e235/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823837922bfc55c715a170fda3aa5823ead2e235/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=823837922bfc55c715a170fda3aa5823ead2e235", "patch": "@@ -8,11 +8,10 @@ pub enum Foo {\n \n fn main() {\n     let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n-    match f {\n+    match f { //~ ERROR invalid enum discriminant\n         Foo::A => {},\n         Foo::B => {},\n         Foo::C => {},\n         Foo::D => {},\n     }\n-} //~ ERROR constant evaluation error\n-//~^ NOTE entered unreachable code\n+}"}, {"sha": "5a5a20c48695372d2892b7ecfb9eaca330be6200", "filename": "tests/compile-fail/invalid_enum_discriminant2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/823837922bfc55c715a170fda3aa5823ead2e235/tests%2Fcompile-fail%2Finvalid_enum_discriminant2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823837922bfc55c715a170fda3aa5823ead2e235/tests%2Fcompile-fail%2Finvalid_enum_discriminant2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant2.rs?ref=823837922bfc55c715a170fda3aa5823ead2e235", "patch": "@@ -0,0 +1,16 @@\n+// Validation makes this fail in the wrong place\n+// compile-flags: -Zmir-emit-validate=0\n+\n+// error-pattern: invalid enum discriminant\n+\n+use std::mem;\n+\n+#[repr(C)]\n+pub enum Foo {\n+    A, B, C, D\n+}\n+\n+fn main() {\n+    let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n+    let _ = mem::discriminant(&f);\n+}"}]}