{"sha": "5377eab1ec0d8657cb398762296d82ebc8844a41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzdlYWIxZWMwZDg2NTdjYjM5ODc2MjI5NmQ4MmViYzg4NDRhNDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T22:51:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-11T00:18:27Z"}, "message": "Rollup merge of #40239 - nagisa:death-to-plugins, r=nikomatsakis\n\nRemove ability for plugins to register a MIR pass\n\nIn recent months there have been a few different people investigating how to make a plugin that\nregisters a MIR-pass \u2013 one that isn\u2019t intended to be eventually merged into rustc proper.\n\nThe interface to register MIR passes was added primarily for miri (& later was\nfound to make prototyping of rustc-proper MIR passes a tiny bit faster). Since miri does not use\nthis interface anymore it seems like a good time to remove this \"feature\".\n\nFor prototyping purposes a similar interface can be added by developers themselves in their custom\nrustc build.\n\ncc @nikomatsakis", "tree": {"sha": "11bd193293a305f2013109d81b195545ea019e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11bd193293a305f2013109d81b195545ea019e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5377eab1ec0d8657cb398762296d82ebc8844a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5377eab1ec0d8657cb398762296d82ebc8844a41", "html_url": "https://github.com/rust-lang/rust/commit/5377eab1ec0d8657cb398762296d82ebc8844a41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5377eab1ec0d8657cb398762296d82ebc8844a41/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0", "html_url": "https://github.com/rust-lang/rust/commit/37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0"}, {"sha": "4ca9c97ace17ca0232bf6f83c06a8a8245614de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca9c97ace17ca0232bf6f83c06a8a8245614de5", "html_url": "https://github.com/rust-lang/rust/commit/4ca9c97ace17ca0232bf6f83c06a8a8245614de5"}], "stats": {"total": 92, "additions": 1, "deletions": 91}, "files": [{"sha": "dda118fb4408e6abededcb3f19e3aabe63c091bb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5377eab1ec0d8657cb398762296d82ebc8844a41/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5377eab1ec0d8657cb398762296d82ebc8844a41/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5377eab1ec0d8657cb398762296d82ebc8844a41", "patch": "@@ -604,7 +604,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     let whitelisted_legacy_custom_derives = registry.take_whitelisted_custom_derives();\n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n-                   llvm_passes, attributes, mir_passes, .. } = registry;\n+                   llvm_passes, attributes, .. } = registry;\n \n     sess.track_errors(|| {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -620,7 +620,6 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-        sess.mir_passes.borrow_mut().extend(mir_passes);\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n     })?;\n "}, {"sha": "cdde56f5f634be75a2d0917a5a1885bf59606e2d", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5377eab1ec0d8657cb398762296d82ebc8844a41/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5377eab1ec0d8657cb398762296d82ebc8844a41/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=5377eab1ec0d8657cb398762296d82ebc8844a41", "patch": "@@ -13,8 +13,6 @@\n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n \n-use rustc::mir::transform::MirMapPass;\n-\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n use syntax::symbol::Symbol;\n@@ -53,9 +51,6 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n-    #[doc(hidden)]\n-    pub mir_passes: Vec<Box<for<'pcx> MirMapPass<'pcx>>>,\n-\n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n \n@@ -81,7 +76,6 @@ impl<'a> Registry<'a> {\n             lint_groups: HashMap::new(),\n             llvm_passes: vec![],\n             attributes: vec![],\n-            mir_passes: Vec::new(),\n             whitelisted_custom_derives: Vec::new(),\n         }\n     }\n@@ -157,11 +151,6 @@ impl<'a> Registry<'a> {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n     }\n \n-    /// Register a MIR pass\n-    pub fn register_mir_pass(&mut self, pass: Box<for<'pcx> MirMapPass<'pcx>>) {\n-        self.mir_passes.push(pass);\n-    }\n-\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "3bc4a40a39c99a144c1bafe11752527bd9708ef3", "filename": "src/test/run-pass-fulldeps/auxiliary/dummy_mir_pass.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs?ref=37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// force-host\n-\n-#![feature(plugin_registrar, rustc_private)]\n-#![feature(box_syntax)]\n-\n-#[macro_use] extern crate rustc;\n-extern crate rustc_plugin;\n-extern crate rustc_const_math;\n-extern crate syntax;\n-\n-use rustc::mir::transform::{self, MirPass, MirSource};\n-use rustc::mir::{Mir, Literal, Location};\n-use rustc::mir::visit::MutVisitor;\n-use rustc::ty::TyCtxt;\n-use rustc::middle::const_val::ConstVal;\n-use rustc_const_math::ConstInt;\n-use rustc_plugin::Registry;\n-\n-struct Pass;\n-\n-impl transform::Pass for Pass {}\n-\n-impl<'tcx> MirPass<'tcx> for Pass {\n-    fn run_pass<'a>(&mut self, _: TyCtxt<'a, 'tcx, 'tcx>,\n-                    _: MirSource, mir: &mut Mir<'tcx>) {\n-        Visitor.visit_mir(mir)\n-    }\n-}\n-\n-struct Visitor;\n-\n-impl<'tcx> MutVisitor<'tcx> for Visitor {\n-    fn visit_literal(&mut self, literal: &mut Literal<'tcx>, _: Location) {\n-        if let Literal::Value { ref mut value } = *literal {\n-            if let ConstVal::Integral(ConstInt::I32(ref mut i @ 11)) = *value {\n-                *i = 42;\n-            }\n-        }\n-    }\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_mir_pass(box Pass);\n-}"}, {"sha": "8ac4bf9733757cc25a1af1da68c0d3b9d14f8300", "filename": "src/test/run-pass-fulldeps/mir-pass.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs?ref=37265d8b78f2c21d9b8f4c9ac9f6b0060b2247e0", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:dummy_mir_pass.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(dummy_mir_pass)]\n-\n-fn math() -> i32 {\n-    11\n-}\n-\n-pub fn main() {\n-    assert_eq!(math(), 42);\n-}"}]}