{"sha": "fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "node_id": "C_kwDOAAsO6NoAKGZjNWRiMmNkNGZjMzAzMGZkYzRjYWQwZTZlMzhlN2Y4MGE3YWE3MWI", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2023-02-04T23:07:41Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2023-02-22T18:18:01Z"}, "message": "Implement -Zlink-directives=yes/no\n\n`-Zlink-directives=no` will ignored `#[link]` directives while compiling a\ncrate, so nothing is emitted into the crate's metadata.  The assumption is\nthat the build system already knows about the crate's native dependencies\nand can provide them at link time without these directives.\n\nThis is another way to address issue # #70093, which is currently addressed\nby `-Zlink-native-libraries` (implemented in #70095). The latter is\nimplemented at link time, which has the effect of ignoring `#[link]`\nin *every* crate. This makes it a very large hammer as it requires all\nnative dependencies to be known to the build system to be at all usable,\nincluding those in sysroot libraries. I think this means its effectively\nunused, and definitely under-used.\n\nBeing able to control this on a crate-by-crate basis should make it much\neasier to apply when needed.\n\nI'm not sure if we need both mechanisms, but we can decide that later.", "tree": {"sha": "193c55ccfe3da573c9c86f0a3b62ab612adb22f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193c55ccfe3da573c9c86f0a3b62ab612adb22f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "html_url": "https://github.com/rust-lang/rust/commit/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246eae2fab54a5139365c4e1a08c5724fb385fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/246eae2fab54a5139365c4e1a08c5724fb385fbf", "html_url": "https://github.com/rust-lang/rust/commit/246eae2fab54a5139365c4e1a08c5724fb385fbf"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "f9f4c0ec708545e5a4c989fc9bacec23f3c2d6cc", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "patch": "@@ -756,6 +756,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(instrument_mcount, true);\n     tracked!(instrument_xray, Some(InstrumentXRay::default()));\n+    tracked!(link_directives, false);\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });"}, {"sha": "91cb35f672448b815145bc2ad8fe33f402f01c54", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "patch": "@@ -103,8 +103,13 @@ impl<'tcx> Collector<'tcx> {\n         }\n \n         // Process all of the #[link(..)]-style arguments\n-        let sess = &self.tcx.sess;\n+        let sess = self.tcx.sess;\n         let features = self.tcx.features();\n+\n+        if !sess.opts.unstable_opts.link_directives {\n+            return;\n+        }\n+\n         for m in self.tcx.hir().attrs(it.hir_id()).iter().filter(|a| a.has_name(sym::link)) {\n             let Some(items) = m.meta_item_list() else {\n                 continue;"}, {"sha": "eb8e54fa0bd27c57008f85f19b40712cd3fe0efd", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "patch": "@@ -1489,6 +1489,8 @@ options! {\n         \"keep hygiene data after analysis (default: no)\"),\n     layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],\n         \"seed layout randomization\"),\n+    link_directives: bool = (true, parse_bool, [TRACKED],\n+        \"honour #[link] directives in crates (default: yes)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n     link_only: bool = (false, parse_bool, [TRACKED],"}, {"sha": "55876326e5eab527b7aa82b6fdf048ab8bbf2b3e", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "patch": "@@ -81,6 +81,7 @@\n          Multiple options can be combined with commas.\n     -Z                     keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n     -Z                           layout-seed=val -- seed layout randomization\n+    -Z                       link-directives=val -- honour #[link] directives in crates (default: yes)\n     -Z                 link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n     -Z                             link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n     -Z                          llvm-plugins=val -- a list LLVM plugins to enable (space separated)"}, {"sha": "83f9b16c4086ae1033a18af661e1b459134f6185", "filename": "tests/ui/issues/issue-70093/issue-70093-link-directives.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/tests%2Fui%2Fissues%2Fissue-70093%2Fissue-70093-link-directives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/tests%2Fui%2Fissues%2Fissue-70093%2Fissue-70093-link-directives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-70093%2Fissue-70093-link-directives.rs?ref=fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+// compile-flags: -Zlink-directives=no\n+// ignore-windows - this will probably only work on unixish systems\n+// ignore-fuchsia - missing __libc_start_main for some reason (#84733)\n+// ignore-cross-compile - default-linker-libraries=yes doesn't play well with cross compiling\n+\n+#[link(name = \"some-random-non-existent-library\", kind = \"static\")]\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "86459dc904a6eb0abc8ee4db79205e3a49a1025a", "filename": "tests/ui/issues/issue-70093/issue-70093.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/tests%2Fui%2Fissues%2Fissue-70093%2Fissue-70093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b/tests%2Fui%2Fissues%2Fissue-70093%2Fissue-70093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-70093%2Fissue-70093.rs?ref=fc5db2cd4fc3030fdc4cad0e6e38e7f80a7aa71b", "previous_filename": "tests/ui/issues/issue-70093.rs"}]}