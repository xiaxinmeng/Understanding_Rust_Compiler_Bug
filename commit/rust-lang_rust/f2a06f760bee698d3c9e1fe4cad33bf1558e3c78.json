{"sha": "f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYTA2Zjc2MGJlZTY5OGQzYzllMWZlNGNhZDMzYmYxNTU4ZTNjNzg=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-01-02T11:55:31Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-01-02T11:55:31Z"}, "message": "Make type in ast::Local optional", "tree": {"sha": "29ab839fccc45c7fae5e9765143ec4841f799b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ab839fccc45c7fae5e9765143ec4841f799b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "html_url": "https://github.com/rust-lang/rust/commit/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee3c5957eaaf577bff895ce819447f7e40558a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3c5957eaaf577bff895ce819447f7e40558a28", "html_url": "https://github.com/rust-lang/rust/commit/ee3c5957eaaf577bff895ce819447f7e40558a28"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "0e47f338bb91a653dea2ee42c2289544e4dcfaa6", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -649,7 +649,10 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &ast::Local) {\n         Some(ref expr) => {\n             record_rvalue_scope_if_borrow_expr(visitor, &**expr, blk_scope);\n \n-            if is_binding_pat(&*local.pat) || is_borrowed_ty(&*local.ty) {\n+            let is_borrow =\n+                if let Some(ref ty) = local.ty { is_borrowed_ty(&**ty) } else { false };\n+\n+            if is_binding_pat(&*local.pat) || is_borrow {\n                 record_rvalue_scope(visitor, &**expr, blk_scope);\n             }\n         }"}, {"sha": "b22b4bdc21155baac254c2d236a570ccd02d3174", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -3401,7 +3401,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn resolve_local(&mut self, local: &Local) {\n         // Resolve the type.\n-        self.resolve_type(&*local.ty);\n+        if let Some(ref ty) = local.ty {\n+            self.resolve_type(&**ty);\n+        }\n \n         // Resolve the initializer, if necessary.\n         match local.init {"}, {"sha": "4396740de4e5d8c3fd3d9c588e3b408f9ced7adb", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -1496,7 +1496,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n         self.collected_paths.clear();\n \n         // Just walk the initialiser and type (don't want to walk the pattern again).\n-        self.visit_ty(&*l.ty);\n+        visit::walk_ty_opt(self, &l.ty);\n         visit::walk_expr_opt(self, &l.init);\n     }\n }"}, {"sha": "c0ca540841f220ab7a8b50764fbcdcb91680e46d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -485,9 +485,9 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for GatherLocalsVisitor<'a, 'tcx> {\n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &ast::Local) {\n-        let o_ty = match local.ty.node {\n-            ast::TyInfer => None,\n-            _ => Some(self.fcx.to_ty(&*local.ty))\n+        let o_ty = match local.ty {\n+            Some(ref ty) => Some(self.fcx.to_ty(&**ty)),\n+            None => None\n         };\n         self.assign(local.span, local.id, o_ty);\n         debug!(\"Local variable {} is assigned type {}\","}, {"sha": "937508677503188ce07224ba155f6388bb91b5ff", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -643,8 +643,8 @@ pub enum LocalSource {\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n #[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Local {\n-    pub ty: P<Ty>,\n     pub pat: P<Pat>,\n+    pub ty: Option<P<Ty>>,\n     pub init: Option<P<Expr>>,\n     pub id: NodeId,\n     pub span: Span,"}, {"sha": "ea345f3a458f49ea4b5d49b579072cf3efdaf18f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -482,8 +482,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.pat_ident(sp, ident)\n         };\n         let local = P(ast::Local {\n-            ty: self.ty_infer(sp),\n             pat: pat,\n+            ty: None,\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,\n@@ -506,8 +506,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.pat_ident(sp, ident)\n         };\n         let local = P(ast::Local {\n-            ty: typ,\n             pat: pat,\n+            ty: Some(typ),\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n             span: sp,"}, {"sha": "dcf25a26e2c69e04d192970a6816c4b02c953560", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -712,7 +712,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n                 let rewritten_local = local.map(|Local {id, pat, ty, init, source, span}| {\n                     // expand the ty since TyFixedLengthVec contains an Expr\n                     // and thus may have a macro use\n-                    let expanded_ty = fld.fold_ty(ty);\n+                    let expanded_ty = ty.map(|t| fld.fold_ty(t));\n                     // expand the pat (it might contain macro uses):\n                     let expanded_pat = fld.fold_pat(pat);\n                     // find the PatIdents in the pattern:"}, {"sha": "c134b11a0eb9933ef6555f894c2bdb9c5addfab5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -553,7 +553,7 @@ pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedPara\n pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n     l.map(|Local {id, pat, ty, init, source, span}| Local {\n         id: fld.new_id(id),\n-        ty: fld.fold_ty(ty),\n+        ty: ty.map(|t| fld.fold_ty(t)),\n         pat: fld.fold_pat(pat),\n         init: init.map(|e| fld.fold_expr(e)),\n         source: source,"}, {"sha": "c7327a24bb62f3014fdc02d61177556912fcbe45", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -3627,13 +3627,9 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n         let pat = self.parse_pat();\n \n-        let mut ty = P(Ty {\n-            id: ast::DUMMY_NODE_ID,\n-            node: TyInfer,\n-            span: mk_sp(lo, lo),\n-        });\n+        let mut ty = None;\n         if self.eat(&token::Colon) {\n-            ty = self.parse_ty_sum();\n+            ty = Some(self.parse_ty_sum());\n         }\n         let init = self.parse_initializer();\n         P(ast::Local {"}, {"sha": "3f3af4ed7099d4a865b5696db140cd2b8e65288f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -1858,13 +1858,11 @@ impl<'a> State<'a> {\n \n     pub fn print_local_decl(&mut self, loc: &ast::Local) -> IoResult<()> {\n         try!(self.print_pat(&*loc.pat));\n-        match loc.ty.node {\n-            ast::TyInfer => Ok(()),\n-            _ => {\n-                try!(self.word_space(\":\"));\n-                self.print_type(&*loc.ty)\n-            }\n+        if let Some(ref ty) = loc.ty {\n+            try!(self.word_space(\":\"));\n+            try!(self.print_type(&**ty));\n         }\n+        Ok(())\n     }\n \n     pub fn print_decl(&mut self, decl: &ast::Decl) -> IoResult<()> {"}, {"sha": "e532c76347fa38332babce22698a9a0955fbdd27", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a06f760bee698d3c9e1fe4cad33bf1558e3c78/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f2a06f760bee698d3c9e1fe4cad33bf1558e3c78", "patch": "@@ -211,7 +211,7 @@ pub fn walk_view_item<'v, V: Visitor<'v>>(visitor: &mut V, vi: &'v ViewItem) {\n \n pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n     visitor.visit_pat(&*local.pat);\n-    visitor.visit_ty(&*local.ty);\n+    walk_ty_opt(visitor, &local.ty);\n     walk_expr_opt(visitor, &local.init);\n }\n \n@@ -381,6 +381,13 @@ pub fn skip_ty<'v, V: Visitor<'v>>(_: &mut V, _: &'v Ty) {\n     // Empty!\n }\n \n+pub fn walk_ty_opt<'v, V: Visitor<'v>>(visitor: &mut V, optional_type: &'v Option<P<Ty>>) {\n+    match *optional_type {\n+        Some(ref ty) => visitor.visit_ty(&**ty),\n+        None => ()\n+    }\n+}\n+\n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     match typ.node {\n         TyVec(ref ty) | TyParen(ref ty) => {\n@@ -583,10 +590,7 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_ty_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v TyParam) {\n     visitor.visit_ident(param.span, param.ident);\n     walk_ty_param_bounds_helper(visitor, &param.bounds);\n-    match param.default {\n-        Some(ref ty) => visitor.visit_ty(&**ty),\n-        None => {}\n-    }\n+    walk_ty_opt(visitor, &param.default);\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {"}]}