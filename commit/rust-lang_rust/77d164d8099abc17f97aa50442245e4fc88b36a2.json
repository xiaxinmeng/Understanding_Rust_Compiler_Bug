{"sha": "77d164d8099abc17f97aa50442245e4fc88b36a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZDE2NGQ4MDk5YWJjMTdmOTdhYTUwNDQyMjQ1ZTRmYzg4YjM2YTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:35:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:35Z"}, "message": "rustdoc: Index inherent methods on primitives\n\nThe set of types which can have an inherent impl changed slightly and rustdoc\njust needed to catch up to understand what it means to see a `impl str`!\n\nCloses #23511", "tree": {"sha": "5d7789e68dcb263dfde71a22529f5dada93e5332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d7789e68dcb263dfde71a22529f5dada93e5332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77d164d8099abc17f97aa50442245e4fc88b36a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77d164d8099abc17f97aa50442245e4fc88b36a2", "html_url": "https://github.com/rust-lang/rust/commit/77d164d8099abc17f97aa50442245e4fc88b36a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77d164d8099abc17f97aa50442245e4fc88b36a2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b568ba0fd531ff33d45cb52d5c8cbfe1908be86", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b568ba0fd531ff33d45cb52d5c8cbfe1908be86", "html_url": "https://github.com/rust-lang/rust/commit/1b568ba0fd531ff33d45cb52d5c8cbfe1908be86"}], "stats": {"total": 98, "additions": 56, "deletions": 42}, "files": [{"sha": "38df0339e42503410c20b0bad656287f1961ec4e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77d164d8099abc17f97aa50442245e4fc88b36a2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d164d8099abc17f97aa50442245e4fc88b36a2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=77d164d8099abc17f97aa50442245e4fc88b36a2", "patch": "@@ -1428,6 +1428,21 @@ pub enum TypeKind {\n     TypeTypedef,\n }\n \n+impl Type {\n+    pub fn primitive_type(&self) -> Option<PrimitiveType> {\n+        match *self {\n+            Primitive(p) | BorrowedRef { type_: box Primitive(p), ..} => Some(p),\n+            Vector(..) | BorrowedRef{ type_: box Vector(..), ..  } => Some(Slice),\n+            FixedVector(..) | BorrowedRef { type_: box FixedVector(..), .. } => {\n+                Some(Array)\n+            }\n+            Tuple(..) => Some(PrimitiveTuple),\n+            RawPointer(..) => Some(PrimitiveRawPointer),\n+            _ => None,\n+        }\n+    }\n+}\n+\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s {"}, {"sha": "8e33a9bd80ba76848b0d49a0194959db79bc8933", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 42, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/77d164d8099abc17f97aa50442245e4fc88b36a2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d164d8099abc17f97aa50442245e4fc88b36a2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=77d164d8099abc17f97aa50442245e4fc88b36a2", "patch": "@@ -1025,7 +1025,16 @@ impl DocFolder for Cache {\n                         self.parent_stack.push(did);\n                         true\n                     }\n-                    _ => false\n+                    ref t => {\n+                        match t.primitive_type() {\n+                            Some(prim) => {\n+                                let did = ast_util::local_def(prim.to_node_id());\n+                                self.parent_stack.push(did);\n+                                true\n+                            }\n+                            _ => false,\n+                        }\n+                    }\n                 }\n             }\n             _ => false\n@@ -1037,11 +1046,6 @@ impl DocFolder for Cache {\n             Some(item) => {\n                 match item {\n                     clean::Item{ attrs, inner: clean::ImplItem(i), .. } => {\n-                        use clean::{Primitive, Vector, ResolvedPath, BorrowedRef};\n-                        use clean::PrimitiveType::{Array, Slice, PrimitiveTuple};\n-                        use clean::PrimitiveType::{PrimitiveRawPointer};\n-                        use clean::{FixedVector, Tuple, RawPointer};\n-\n                         // extract relevant documentation for this impl\n                         let dox = match attrs.into_iter().find(|a| {\n                             match *a {\n@@ -1059,47 +1063,18 @@ impl DocFolder for Cache {\n                         // Figure out the id of this impl. This may map to a\n                         // primitive rather than always to a struct/enum.\n                         let did = match i.for_ {\n-                            ResolvedPath { did, .. } |\n-                            BorrowedRef {\n-                                type_: box ResolvedPath { did, .. }, ..\n+                            clean::ResolvedPath { did, .. } |\n+                            clean::BorrowedRef {\n+                                type_: box clean::ResolvedPath { did, .. }, ..\n                             } => {\n                                 Some(did)\n                             }\n \n-                            // References to primitives are picked up as well to\n-                            // recognize implementations for &str, this may not\n-                            // be necessary in a DST world.\n-                            Primitive(p) |\n-                                BorrowedRef { type_: box Primitive(p), ..} =>\n-                            {\n-                                Some(ast_util::local_def(p.to_node_id()))\n+                            ref t => {\n+                                t.primitive_type().map(|p| {\n+                                    ast_util::local_def(p.to_node_id())\n+                                })\n                             }\n-\n-                            FixedVector(..) |\n-                                BorrowedRef { type_: box FixedVector(..), .. } =>\n-                            {\n-                                Some(ast_util::local_def(Array.to_node_id()))\n-                            }\n-\n-                            // In a DST world, we may only need Vector, but for\n-                            // now we also pick up borrowed references\n-                            Vector(..) |\n-                                BorrowedRef{ type_: box Vector(..), ..  } =>\n-                            {\n-                                Some(ast_util::local_def(Slice.to_node_id()))\n-                            }\n-\n-                            Tuple(..) => {\n-                                let id = PrimitiveTuple.to_node_id();\n-                                Some(ast_util::local_def(id))\n-                            }\n-\n-                            RawPointer(..) => {\n-                                let id = PrimitiveRawPointer.to_node_id();\n-                                Some(ast_util::local_def(id))\n-                            }\n-\n-                            _ => None,\n                         };\n \n                         if let Some(did) = did {"}, {"sha": "6582ca0eba9e7181ed77cf0b8cf2214a64674103", "filename": "src/test/rustdoc/issue-23511.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77d164d8099abc17f97aa50442245e4fc88b36a2/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d164d8099abc17f97aa50442245e4fc88b36a2/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=77d164d8099abc17f97aa50442245e4fc88b36a2", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std, lang_items, core)]\n+#![no_std]\n+\n+extern crate core;\n+\n+pub mod str {\n+    #![doc(primitive = \"str\")]\n+\n+    #[lang = \"str\"]\n+    impl str {\n+        // @has search-index.js foo\n+        pub fn foo(&self) {}\n+    }\n+}"}]}