{"sha": "bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOGE0M2E3NzY2NWNjNjViYTNkM2JmNGJkMmRiMDBiNmNiOWVjOGE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-11T11:06:05Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T14:08:30Z"}, "message": "Remove lltyparams field in trans::common::fn_ctxt", "tree": {"sha": "25d790220b08c8cb65ab378c41cdcd4d36a7201f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d790220b08c8cb65ab378c41cdcd4d36a7201f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "html_url": "https://github.com/rust-lang/rust/commit/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f5e58e954939327fbc1ab0ad050b0c615e031b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f5e58e954939327fbc1ab0ad050b0c615e031b", "html_url": "https://github.com/rust-lang/rust/commit/d0f5e58e954939327fbc1ab0ad050b0c615e031b"}], "stats": {"total": 87, "additions": 18, "deletions": 69}, "files": [{"sha": "7574e826a235585b90060b198b55cae5ff96a52f", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 61, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "patch": "@@ -507,18 +507,17 @@ fn get_tydesc(cx: block, t: ty::t,\n     // FIXME[mono]\n     assert !ty::type_has_params(t);\n     // Otherwise, generate a tydesc if necessary, and return it.\n-    let info = get_static_tydesc(cx.ccx(), t, []);\n+    let info = get_static_tydesc(cx.ccx(), t);\n     static_ti = some(info);\n     ret rslt(cx, info.tydesc);\n }\n \n-fn get_static_tydesc(ccx: @crate_ctxt, t: ty::t, ty_params: [uint])\n-    -> @tydesc_info {\n+fn get_static_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     alt ccx.tydescs.find(t) {\n       some(info) { ret info; }\n       none {\n         ccx.stats.n_static_tydescs += 1u;\n-        let info = declare_tydesc(ccx, t, ty_params);\n+        let info = declare_tydesc(ccx, t);\n         ccx.tydescs.insert(t, info);\n         ret info;\n       }\n@@ -569,8 +568,7 @@ fn set_glue_inlining(f: ValueRef, t: ty::t) {\n \n \n // Generates the declaration for (but doesn't emit) a type descriptor.\n-fn declare_tydesc(ccx: @crate_ctxt, t: ty::t, ty_params: [uint])\n-    -> @tydesc_info {\n+fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     log(debug, \"+++ declare_tydesc \" + ty_to_str(ccx.tcx, t));\n     let llsize;\n     let llalign;\n@@ -600,8 +598,7 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t, ty_params: [uint])\n           align: llalign,\n           mutable take_glue: none,\n           mutable drop_glue: none,\n-          mutable free_glue: none,\n-          ty_params: ty_params};\n+          mutable free_glue: none};\n     log(debug, \"--- declare_tydesc \" + ty_to_str(ccx.tcx, t));\n     ret info;\n }\n@@ -622,8 +619,7 @@ fn declare_generic_glue(ccx: @crate_ctxt, t: ty::t, llfnty: TypeRef,\n }\n \n fn make_generic_glue_inner(ccx: @crate_ctxt, t: ty::t,\n-                           llfn: ValueRef, helper: glue_helper,\n-                           ty_params: [uint]) -> ValueRef {\n+                           llfn: ValueRef, helper: glue_helper) -> ValueRef {\n     let fcx = new_fn_ctxt(ccx, [], llfn, none);\n     lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     ccx.stats.n_glues_created += 1u;\n@@ -636,22 +632,6 @@ fn make_generic_glue_inner(ccx: @crate_ctxt, t: ty::t,\n         T_ptr(type_of(ccx, t))\n     } else { T_ptr(T_i8()) };\n \n-    let ty_param_count = ty_params.len();\n-    let lltyparams = llvm::LLVMGetParam(llfn, 2u as c_uint);\n-    let load_env_bcx = raw_block(fcx, fcx.llloadenv);\n-    let lltydescs = [mutable];\n-    let p = 0u;\n-    while p < ty_param_count {\n-        let llparam = GEPi(load_env_bcx, lltyparams, [p as int]);\n-        llparam = Load(load_env_bcx, llparam);\n-        vec::grow_set(lltydescs, ty_params[p], 0 as ValueRef, llparam);\n-        p += 1u;\n-    }\n-\n-    fcx.lltyparams = vec::map(vec::from_mut(lltydescs), {|d|\n-        {desc: d, vtables: none}\n-    });\n-\n     let bcx = top_scope_block(fcx, none);\n     let lltop = bcx.llbb;\n     let llrawptr0 = llvm::LLVMGetParam(llfn, 3u as c_uint);\n@@ -662,14 +642,14 @@ fn make_generic_glue_inner(ccx: @crate_ctxt, t: ty::t,\n }\n \n fn make_generic_glue(ccx: @crate_ctxt, t: ty::t, llfn: ValueRef,\n-                     helper: glue_helper, ty_params: [uint], name: str)\n+                     helper: glue_helper, name: str)\n     -> ValueRef {\n     if !ccx.sess.opts.stats {\n-        ret make_generic_glue_inner(ccx, t, llfn, helper, ty_params);\n+        ret make_generic_glue_inner(ccx, t, llfn, helper);\n     }\n \n     let start = time::get_time();\n-    let llval = make_generic_glue_inner(ccx, t, llfn, helper, ty_params);\n+    let llval = make_generic_glue_inner(ccx, t, llfn, helper);\n     let end = time::get_time();\n     log_fn_time(ccx, \"glue \" + name + \" \" + ty_to_short_str(ccx.tcx, t),\n                 start, end);\n@@ -696,7 +676,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n \n-        let shape = shape_of(ccx, key, ti.ty_params);\n+        let shape = shape_of(ccx, key, []);\n         let shape_tables =\n             llvm::LLVMConstPointerCast(ccx.shape_cx.llshapetables,\n                                        T_ptr(T_i8()));\n@@ -1155,8 +1135,7 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: int,\n                     (ccx, ti.ty, T_glue_fn(ccx), \"take\");\n                 ti.take_glue = some(glue_fn);\n                 make_generic_glue(ccx, ti.ty, glue_fn,\n-                                  make_take_glue,\n-                                  ti.ty_params, \"take\");\n+                                  make_take_glue, \"take\");\n                 #debug(\"--- lazily_emit_tydesc_glue TAKE %s\",\n                        ty_to_str(ccx.tcx, ti.ty));\n               }\n@@ -1171,8 +1150,7 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: int,\n                     declare_generic_glue(ccx, ti.ty, T_glue_fn(ccx), \"drop\");\n                 ti.drop_glue = some(glue_fn);\n                 make_generic_glue(ccx, ti.ty, glue_fn,\n-                                  make_drop_glue,\n-                                  ti.ty_params, \"drop\");\n+                                  make_drop_glue, \"drop\");\n                 #debug(\"--- lazily_emit_tydesc_glue DROP %s\",\n                        ty_to_str(ccx.tcx, ti.ty));\n               }\n@@ -1187,8 +1165,7 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: int,\n                     declare_generic_glue(ccx, ti.ty, T_glue_fn(ccx), \"free\");\n                 ti.free_glue = some(glue_fn);\n                 make_generic_glue(ccx, ti.ty, glue_fn,\n-                                  make_free_glue,\n-                                  ti.ty_params, \"free\");\n+                                  make_free_glue, \"free\");\n                 #debug(\"--- lazily_emit_tydesc_glue FREE %s\",\n                        ty_to_str(ccx.tcx, ti.ty));\n               }\n@@ -3853,7 +3830,6 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt, path: path,\n           llargs: int_hash::<local_val>(),\n           lllocals: int_hash::<local_val>(),\n           llupvars: int_hash::<ValueRef>(),\n-          mutable lltyparams: [],\n           derived_tydescs: ty::new_ty_hash(),\n           id: id,\n           self_id: maybe_self_id,\n@@ -3884,8 +3860,7 @@ fn new_fn_ctxt(ccx: @crate_ctxt, path: path, llfndecl: ValueRef,\n // field of the fn_ctxt with\n fn create_llargs_for_fn_args(cx: fn_ctxt,\n                              ty_self: self_arg,\n-                             args: [ast::arg],\n-                             tps_bounds: [ty::param_bounds]) {\n+                             args: [ast::arg]) {\n     // Skip the implicit arguments 0, and 1.\n     let arg_n = first_real_arg;\n     alt ty_self {\n@@ -3894,25 +3869,6 @@ fn create_llargs_for_fn_args(cx: fn_ctxt,\n       }\n       no_self {}\n     }\n-    for bounds in tps_bounds {\n-        let lltydesc = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n-        let vtables = none;\n-        arg_n += 1u;\n-        for bound in *bounds {\n-            alt bound {\n-              ty::bound_iface(_) {\n-                let vtable = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n-                arg_n += 1u;\n-                vtables = some(alt vtables {\n-                    none { [vtable] }\n-                    some(ds) { ds + [vtable] }\n-                });\n-              }\n-              _ {}\n-            }\n-        }\n-        cx.lltyparams += [{desc: lltydesc, vtables: vtables}];\n-    }\n \n     // Populate the llargs field of the function context with the ValueRefs\n     // that we get from llvm::LLVMGetParam for each argument.\n@@ -3994,7 +3950,7 @@ fn trans_closure(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n     // Set up arguments to the function.\n             let fcx = new_fn_ctxt_w_id(ccx, path, llfndecl, id, maybe_self_id,\n                   param_substs, some(body.span));\n-    create_llargs_for_fn_args(fcx, ty_self, decl.inputs, []);\n+    create_llargs_for_fn_args(fcx, ty_self, decl.inputs);\n \n     // Create the first basic block in the function and keep a handle on it to\n     //  pass to finish_fn later.\n@@ -4061,7 +4017,7 @@ fn trans_res_ctor(ccx: @crate_ctxt, path: path, dtor: ast::fn_decl,\n     // Create a function for the constructor\n     let fcx = new_fn_ctxt_w_id(ccx, path, llfndecl, ctor_id,\n                                none, param_substs, none);\n-    create_llargs_for_fn_args(fcx, no_self, dtor.inputs, []);\n+    create_llargs_for_fn_args(fcx, no_self, dtor.inputs);\n     let bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n     let fty = node_id_type(bcx, ctor_id);\n     let arg_t = ty::ty_fn_args(fty)[0].ty;\n@@ -4103,7 +4059,7 @@ fn trans_enum_variant(ccx: @crate_ctxt, enum_id: ast::node_id,\n     }\n     let fcx = new_fn_ctxt_w_id(ccx, [], llfndecl, variant.node.id, none,\n                                param_substs, none);\n-    create_llargs_for_fn_args(fcx, no_self, fn_args, []);\n+    create_llargs_for_fn_args(fcx, no_self, fn_args);\n     let ty_param_substs = alt param_substs {\n       some(substs) { substs.tys }\n       none { [] }"}, {"sha": "27372f9912b0fe1317a4e4023f7ac75432aefd05", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "patch": "@@ -35,8 +35,7 @@ type tydesc_info =\n      align: ValueRef,\n      mutable take_glue: option<ValueRef>,\n      mutable drop_glue: option<ValueRef>,\n-     mutable free_glue: option<ValueRef>,\n-     ty_params: [uint]};\n+     mutable free_glue: option<ValueRef>};\n \n /*\n  * A note on nomenclature of linking: \"upcall\", \"extern\" and \"native\".\n@@ -122,8 +121,6 @@ type val_self_pair = {v: ValueRef, t: ty::t};\n \n enum local_val { local_mem(ValueRef), local_imm(ValueRef), }\n \n-type fn_ty_param = {desc: ValueRef, vtables: option<[ValueRef]>};\n-\n type param_substs = {tys: [ty::t],\n                      vtables: option<typeck::vtable_res>,\n                      bounds: @[ty::param_bounds]};\n@@ -179,10 +176,6 @@ type fn_ctxt = @{\n     // Same as above, but for closure upvars\n     llupvars: hashmap<ast::node_id, ValueRef>,\n \n-    // A vector of incoming type descriptors and their associated vtables.\n-    // Currently only used by glue functions\n-    mutable lltyparams: [fn_ty_param],\n-\n     // Derived tydescs are tydescs created at runtime, for types that\n     // involve type parameters inside type constructors.  For example,\n     // suppose a function parameterized by T creates a vector of type"}]}