{"sha": "8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYjMxZjc1Yzk1YzUyY2ZlZjQwYzZmZmUyZjE0NTJjOTU5Y2E1ZTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-13T22:25:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-16T16:44:33Z"}, "message": "rustdoc: Fix cross-crate macro source links\n\nThe source filename for cross crate macros isn't quite right so the normal\ngenerated links are invalid.\n\nCloses #21311", "tree": {"sha": "ae4a77128625aa008da5b569b3b641c88f73e97f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4a77128625aa008da5b569b3b641c88f73e97f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "html_url": "https://github.com/rust-lang/rust/commit/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a46933c4d81573e78ce16cd215ba155a3114fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a46933c4d81573e78ce16cd215ba155a3114fce", "html_url": "https://github.com/rust-lang/rust/commit/0a46933c4d81573e78ce16cd215ba155a3114fce"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "263a93a9d6779bbbc0cb8f121c4ee96c6309fa66", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "patch": "@@ -1270,6 +1270,7 @@ impl Clean<Item> for ast::ImplItem {\n             ast::MacImplItem(_) => {\n                 MacroItem(Macro {\n                     source: self.span.to_src(cx),\n+                    imported_from: None,\n                 })\n             }\n         };\n@@ -2557,6 +2558,7 @@ fn resolve_def(cx: &DocContext, id: ast::NodeId) -> Option<ast::DefId> {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Macro {\n     pub source: String,\n+    pub imported_from: Option<String>,\n }\n \n impl Clean<Item> for doctree::Macro {\n@@ -2570,6 +2572,7 @@ impl Clean<Item> for doctree::Macro {\n             def_id: ast_util::local_def(self.id),\n             inner: MacroItem(Macro {\n                 source: self.whence.to_src(cx),\n+                imported_from: self.imported_from.clean(cx),\n             }),\n         }\n     }"}, {"sha": "8fa92304d249cb9d3adcfdba00d3b77e6250992c", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "patch": "@@ -214,6 +214,7 @@ pub struct Macro {\n     pub attrs: Vec<ast::Attribute>,\n     pub whence: Span,\n     pub stab: Option<attr::Stability>,\n+    pub imported_from: Option<Ident>,\n }\n \n pub struct ExternCrate {"}, {"sha": "bb53d532f52f725b00453ad44dda63a16e221b70", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "patch": "@@ -288,9 +288,9 @@ pub fn href(did: ast::DefId) -> Option<(String, ItemType, Vec<String>)> {\n         repeat(\"../\").take(loc.len()).collect::<String>()\n     } else {\n         match cache.extern_locations[&did.krate] {\n-            render::Remote(ref s) => s.to_string(),\n-            render::Local => repeat(\"../\").take(loc.len()).collect::<String>(),\n-            render::Unknown => return None,\n+            (_, render::Remote(ref s)) => s.to_string(),\n+            (_, render::Local) => repeat(\"../\").take(loc.len()).collect(),\n+            (_, render::Unknown) => return None,\n         }\n     };\n     for component in &fqp[..fqp.len() - 1] {\n@@ -379,12 +379,12 @@ fn primitive_link(f: &mut fmt::Formatter,\n                 node: ast::CRATE_NODE_ID,\n             }];\n             let loc = match m.extern_locations[&cnum] {\n-                render::Remote(ref s) => Some(s.to_string()),\n-                render::Local => {\n+                (_, render::Remote(ref s)) => Some(s.to_string()),\n+                (_, render::Local) => {\n                     let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n                     Some(repeat(\"../\").take(len).collect::<String>())\n                 }\n-                render::Unknown => None,\n+                (_, render::Unknown) => None,\n             };\n             match loc {\n                 Some(root) => {"}, {"sha": "e3df0fc9ba6703756aab539820afee6e53b518b4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "patch": "@@ -193,7 +193,7 @@ pub struct Cache {\n     pub implementors: HashMap<ast::DefId, Vec<Implementor>>,\n \n     /// Cache of where external crate documentation can be found.\n-    pub extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n+    pub extern_locations: HashMap<ast::CrateNum, (String, ExternalLocation)>,\n \n     /// Cache of where documentation for primitives can be found.\n     pub primitive_locations: HashMap<clean::PrimitiveType, ast::CrateNum>,\n@@ -408,7 +408,8 @@ pub fn run(mut krate: clean::Crate,\n \n     // Cache where all our extern crates are located\n     for &(n, ref e) in &krate.externs {\n-        cache.extern_locations.insert(n, extern_location(e, &cx.dst));\n+        cache.extern_locations.insert(n, (e.name.clone(),\n+                                          extern_location(e, &cx.dst)));\n         let did = ast::DefId { krate: n, node: ast::CRATE_NODE_ID };\n         cache.paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n     }\n@@ -1343,22 +1344,43 @@ impl<'a> Item<'a> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     fn href(&self, cx: &Context) -> Option<String> {\n+        let href = if self.item.source.loline == self.item.source.hiline {\n+            format!(\"{}\", self.item.source.loline)\n+        } else {\n+            format!(\"{}-{}\", self.item.source.loline, self.item.source.hiline)\n+        };\n+\n+        // First check to see if this is an imported macro source. In this case\n+        // we need to handle it specially as cross-crate inlined macros have...\n+        // odd locations!\n+        let imported_macro_from = match self.item.inner {\n+            clean::MacroItem(ref m) => m.imported_from.as_ref(),\n+            _ => None,\n+        };\n+        if let Some(krate) = imported_macro_from {\n+            let cache = cache();\n+            let root = cache.extern_locations.values().find(|&&(ref n, _)| {\n+                *krate == *n\n+            }).map(|l| &l.1);\n+            let root = match root {\n+                Some(&Remote(ref s)) => s.to_string(),\n+                Some(&Local) => self.cx.root_path.clone(),\n+                None | Some(&Unknown) => return None,\n+            };\n+            Some(format!(\"{root}/{krate}/macro.{name}.html?gotomacrosrc=1\",\n+                         root = root,\n+                         krate = krate,\n+                         name = self.item.name.as_ref().unwrap()))\n+\n         // If this item is part of the local crate, then we're guaranteed to\n         // know the span, so we plow forward and generate a proper url. The url\n         // has anchors for the line numbers that we're linking to.\n-        if ast_util::is_local(self.item.def_id) {\n+        } else if ast_util::is_local(self.item.def_id) {\n             let mut path = Vec::new();\n             clean_srcpath(&cx.src_root, Path::new(&self.item.source.filename),\n                           true, |component| {\n                 path.push(component.to_string());\n             });\n-            let href = if self.item.source.loline == self.item.source.hiline {\n-                format!(\"{}\", self.item.source.loline)\n-            } else {\n-                format!(\"{}-{}\",\n-                        self.item.source.loline,\n-                        self.item.source.hiline)\n-            };\n             Some(format!(\"{root}src/{krate}/{path}.html#{href}\",\n                          root = self.cx.root_path,\n                          krate = self.cx.layout.krate,\n@@ -1380,9 +1402,9 @@ impl<'a> Item<'a> {\n             let cache = cache();\n             let path = &cache.external_paths[&self.item.def_id];\n             let root = match cache.extern_locations[&self.item.def_id.krate] {\n-                Remote(ref s) => s.to_string(),\n-                Local => self.cx.root_path.clone(),\n-                Unknown => return None,\n+                (_, Remote(ref s)) => s.to_string(),\n+                (_, Local) => self.cx.root_path.clone(),\n+                (_, Unknown) => return None,\n             };\n             Some(format!(\"{root}{path}/{file}?gotosrc={goto}\",\n                          root = root,\n@@ -1444,7 +1466,8 @@ impl<'a> fmt::Display for Item<'a> {\n         if self.cx.include_sources && !is_primitive {\n             match self.href(self.cx) {\n                 Some(l) => {\n-                    try!(write!(fmt, \"<a id='src-{}' href='{}'>[src]</a>\",\n+                    try!(write!(fmt, \"<a id='src-{}' class='srclink' \\\n+                                       href='{}'>[src]</a>\",\n                                 self.item.def_id.node, l));\n                 }\n                 None => {}"}, {"sha": "0379c04be4d29746acf5329c71653aa4858f9db0", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "patch": "@@ -802,6 +802,9 @@\n     if (query['gotosrc']) {\n         window.location = $('#src-' + query['gotosrc']).attr('href');\n     }\n+    if (query['gotomacrosrc']) {\n+        window.location = $('.srclink').attr('href');\n+    }\n \n     $(\"#expand-all\").on(\"click\", function() {\n         $(\".docblock\").show();"}, {"sha": "4ad693578ccdc312e3aed9aa689614abe19d0e68", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=8fb31f75c95c52cfef40c6ffe2f1452c959ca5e4", "patch": "@@ -398,6 +398,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: def.ident,\n             whence: def.span,\n             stab: self.stability(def.id),\n+            imported_from: def.imported_from,\n         }\n     }\n }"}]}