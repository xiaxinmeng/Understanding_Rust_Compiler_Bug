{"sha": "0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjliODUwYWMxZWQzYWJkMGZmNWFiZmJiNzE2YWY4MzUwMWRkNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-02T19:32:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-02T19:32:09Z"}, "message": "auto merge of #10696 : fhahn/rust/issue9543-remove-extern-mod-foo, r=pcwalton\n\nThis patch for  #9543 throws an `obsolete syntax` error for `extern mod foo (name=\"bar\")` . \r\nI was wondering if [this](https://github.com/fhahn/rust/compare/mozilla:master...fhahn:issue9543-remove-extern-mod-foo?expand=1#diff-da9d34ca1d0f6beee2838cf02e07345cR4444) is the correct place to do this?\r\n\r\nI think the wording of the error message could probably be improved as well.\r\n\r\nIf this approach is OK, I'm going to run the whole test suite tomorrow and update the old syntax to the new one.", "tree": {"sha": "380744a8c4feb43d1704d408ab410c85b7eac9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380744a8c4feb43d1704d408ab410c85b7eac9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "html_url": "https://github.com/rust-lang/rust/commit/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c29b1be5edcb56f221b0a54653f62147069b41a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29b1be5edcb56f221b0a54653f62147069b41a4", "html_url": "https://github.com/rust-lang/rust/commit/c29b1be5edcb56f221b0a54653f62147069b41a4"}, {"sha": "4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb13ed9823d30ac3163e7e6b3e74becd09a508d", "html_url": "https://github.com/rust-lang/rust/commit/4cb13ed9823d30ac3163e7e6b3e74becd09a508d"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "cebf42eff111aabbe6ded39fae5c3d963b12aaf4", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -21,7 +21,7 @@ use syntax::fold;\n use syntax::opt_vec;\n use syntax::util::small_vector::SmallVector;\n \n-static STD_VERSION: &'static str = \"0.9-pre\";\n+pub static VERSION: &'static str = \"0.9-pre\";\n \n pub fn maybe_inject_libstd_ref(sess: Session, crate: ast::Crate)\n                                -> ast::Crate {\n@@ -57,12 +57,10 @@ struct StandardLibraryInjector {\n \n impl fold::ast_fold for StandardLibraryInjector {\n     fn fold_crate(&mut self, crate: ast::Crate) -> ast::Crate {\n-        let version = STD_VERSION.to_managed();\n-        let vers_item = attr::mk_name_value_item_str(@\"vers\", version);\n         let mut vis = ~[ast::view_item {\n             node: ast::view_item_extern_mod(self.sess.ident_of(\"std\"),\n-                                            None,\n-                                            ~[vers_item.clone()],\n+                                            Some((format!(\"std\\\\#{}\", VERSION).to_managed(),\n+                                                  ast::CookedStr)),\n                                             ast::DUMMY_NODE_ID),\n             attrs: ~[],\n             vis: ast::private,\n@@ -72,17 +70,17 @@ impl fold::ast_fold for StandardLibraryInjector {\n         if use_uv(&crate) && !self.sess.building_library.get() {\n             vis.push(ast::view_item {\n                 node: ast::view_item_extern_mod(self.sess.ident_of(\"green\"),\n-                                                None,\n-                                                ~[vers_item],\n+                                                Some((format!(\"green\\\\#{}\", VERSION).to_managed(),\n+                                                      ast::CookedStr)),\n                                                 ast::DUMMY_NODE_ID),\n                 attrs: ~[],\n                 vis: ast::private,\n                 span: DUMMY_SP\n             });\n             vis.push(ast::view_item {\n                 node: ast::view_item_extern_mod(self.sess.ident_of(\"rustuv\"),\n-                                                None,\n-                                                ~[vers_item],\n+                                                Some((format!(\"rustuv\\\\#{}\", VERSION).to_managed(),\n+                                                      ast::CookedStr)),\n                                                 ast::DUMMY_NODE_ID),\n                 attrs: ~[],\n                 vis: ast::private,"}, {"sha": "6acd3060e9f5852e57c4356392c76636247f3b89", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -13,6 +13,7 @@\n \n use driver::session;\n use front::config;\n+use front::std_inject::VERSION;\n \n use std::cell::RefCell;\n use std::vec;\n@@ -291,8 +292,10 @@ fn mk_std(cx: &TestCtxt) -> ast::view_item {\n                                             path_node(~[id_extra]),\n                                             ast::DUMMY_NODE_ID))])\n     } else {\n-        let mi = attr::mk_name_value_item_str(@\"vers\", @\"0.9-pre\");\n-        ast::view_item_extern_mod(id_extra, None, ~[mi], ast::DUMMY_NODE_ID)\n+        ast::view_item_extern_mod(id_extra,\n+                                  Some((format!(\"extra\\\\#{}\", VERSION).to_managed(),\n+                                        ast::CookedStr)),\n+                                  ast::DUMMY_NODE_ID)\n     };\n     ast::view_item {\n         node: vi,"}, {"sha": "f14c9780bc46c4fdb8f2d89933348421e65bb2c3", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -132,7 +132,7 @@ fn visit_crate(e: &Env, c: &ast::Crate) {\n \n fn visit_view_item(e: &mut Env, i: &ast::view_item) {\n     match i.node {\n-      ast::view_item_extern_mod(ident, path_opt, _, id) => {\n+      ast::view_item_extern_mod(ident, path_opt, id) => {\n           let ident = token::ident_to_str(&ident);\n           debug!(\"resolving extern mod stmt. ident: {:?} path_opt: {:?}\",\n                  ident, path_opt);"}, {"sha": "905213fe95be3b8fa4354167aa2378adf8f202e3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -1507,7 +1507,7 @@ impl Resolver {\n                 }\n             }\n \n-            view_item_extern_mod(name, _, _, node_id) => {\n+            view_item_extern_mod(name, _, node_id) => {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 match self.session.cstore.find_extern_mod_stmt_cnum(node_id) {\n                     Some(crate_id) => {"}, {"sha": "4bcf1985ef235e5f1930f6f0221c5598dfab34ee", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -994,15 +994,15 @@ impl Clean<Item> for ast::view_item {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub enum ViewItemInner {\n-    ExternMod(~str, Option<~str>, ~[Attribute], ast::NodeId),\n+    ExternMod(~str, Option<~str>, ast::NodeId),\n     Import(~[ViewPath])\n }\n \n impl Clean<ViewItemInner> for ast::view_item_ {\n     fn clean(&self) -> ViewItemInner {\n         match self {\n-            &ast::view_item_extern_mod(ref i, ref p, ref mi, ref id) =>\n-                ExternMod(i.clean(), p.map(|(ref x, _)| x.to_owned()),  mi.clean(), *id),\n+            &ast::view_item_extern_mod(ref i, ref p, ref id) =>\n+                ExternMod(i.clean(), p.map(|(ref x, _)| x.to_owned()), *id),\n             &ast::view_item_use(ref vp) => Import(vp.clean())\n         }\n     }"}, {"sha": "7c3d3b4b44f76016ab5022e4f91044c5918ed2ed", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -995,7 +995,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n \n             clean::ViewItemItem(ref item) => {\n                 match item.inner {\n-                    clean::ExternMod(ref name, ref src, _, _) => {\n+                    clean::ExternMod(ref name, ref src, _) => {\n                         write!(w, \"<tr><td><code>extern mod {}\",\n                                name.as_slice());\n                         match *src {"}, {"sha": "aaaf56af436b44a8fbbc0f718404ee8e3a05092d", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -14,7 +14,8 @@\n \n pub use crate_id::CrateId;\n pub use target::{OutputType, Main, Lib, Test, Bench, Target, Build, Install};\n-pub use version::{Version, NoVersion, split_version_general, try_parsing_version};\n+pub use version::{Version, ExactRevision, NoVersion, split_version, split_version_general,\n+    try_parsing_version};\n pub use rustc::metadata::filesearch::rust_path;\n use rustc::metadata::filesearch::libdir;\n use rustc::driver::driver::host_triple;\n@@ -213,8 +214,9 @@ pub fn library_in_workspace(path: &Path, short_name: &str, where: Target,\n }\n \n // rustc doesn't use target-specific subdirectories\n-pub fn system_library(sysroot: &Path, lib_name: &str) -> Option<Path> {\n-    library_in(lib_name, &NoVersion, &sysroot.join(libdir()))\n+pub fn system_library(sysroot: &Path, crate_id: &str) -> Option<Path> {\n+    let (lib_name, version) = split_crate_id(crate_id);\n+    library_in(lib_name, &version, &sysroot.join(libdir()))\n }\n \n fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Option<Path> {\n@@ -268,6 +270,7 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n                                }\n                                None => break\n                            }\n+\n                        }\n                        _ => { f_name = f_name.slice(0, i); }\n                  }\n@@ -293,6 +296,22 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n     abs_path\n }\n \n+fn split_crate_id<'a>(crate_id: &'a str) -> (&'a str, Version) {\n+    match split_version(crate_id) {\n+        Some((name, vers)) =>\n+            match vers {\n+                ExactRevision(ref v) => match v.find('-') {\n+                    Some(pos) => (name, ExactRevision(v.slice(0, pos).to_owned())),\n+                    None => (name, ExactRevision(v.to_owned()))\n+                },\n+                _ => (name, vers)\n+            },\n+        None => (crate_id, NoVersion)\n+    }\n+}\n+\n+\n+\n /// Returns the executable that would be installed for <crateid>\n /// in <workspace>\n /// As a side effect, creates the bin-dir if it doesn't exist"}, {"sha": "c5648d811ed01e29ac08eda53261475821f0a7dd", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -461,7 +461,7 @@ impl<'a> Visitor<()> for ViewItemVisitor<'a> {\n \n         match vi.node {\n             // ignore metadata, I guess\n-            ast::view_item_extern_mod(lib_ident, path_opt, _, _) => {\n+            ast::view_item_extern_mod(lib_ident, path_opt, _) => {\n                 let lib_name = match path_opt {\n                     Some((p, _)) => p,\n                     None => self.sess.str_of(lib_ident)"}, {"sha": "51aa7cd4377b820dd33854fe6e92d7a2fea2b13e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -1057,7 +1057,7 @@ pub enum view_item_ {\n     // optional @str: if present, this is a location (containing\n     // arbitrary characters) from which to fetch the crate sources\n     // For example, extern mod whatever = \"github.com/mozilla/rust\"\n-    view_item_extern_mod(Ident, Option<(@str, StrStyle)>, ~[@MetaItem], NodeId),\n+    view_item_extern_mod(Ident, Option<(@str, StrStyle)>, NodeId),\n     view_item_use(~[@view_path]),\n }\n "}, {"sha": "f93eb6754adf191c9d6ea2de9269c6c9d0a93897", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -419,7 +419,7 @@ impl<'a, O: IdVisitingOperation> Visitor<()> for IdVisitor<'a, O> {\n \n     fn visit_view_item(&mut self, view_item: &view_item, env: ()) {\n         match view_item.node {\n-            view_item_extern_mod(_, _, _, node_id) => {\n+            view_item_extern_mod(_, _, node_id) => {\n                 self.operation.visit_id(node_id)\n             }\n             view_item_use(ref view_paths) => {"}, {"sha": "4a2adc04fbd00313f5e77a4288fb8ed3108eab9f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -66,11 +66,9 @@ pub trait ast_fold {\n         let inner_view_item = match vi.node {\n             view_item_extern_mod(ref ident,\n                                  string,\n-                                 ref meta_items,\n                                  node_id) => {\n                 view_item_extern_mod(ident.clone(),\n                                      string,\n-                                     self.fold_meta_items(*meta_items),\n                                      self.new_id(node_id))\n             }\n             view_item_use(ref view_paths) => {"}, {"sha": "df6fbe98aed4b2585cf9a6a23c45ff3fefe00c27", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -45,6 +45,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteBoxedClosure,\n     ObsoleteClosureType,\n     ObsoleteMultipleImport,\n+    ObsoleteExternModAttributesInParens\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -145,6 +146,11 @@ impl ParserObsoleteMethods for Parser {\n                 \"multiple imports\",\n                 \"only one import is allowed per `use` statement\"\n             ),\n+            ObsoleteExternModAttributesInParens => (\n+                \"`extern mod` with linkage attribute list\",\n+                \"use `extern mod foo = \\\"bar\\\";` instead of \\\n+                `extern mod foo (name = \\\"bar\\\")`\"\n+            )\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "5e2b022d17525b86659b9af24870f2c7ec4c3f13", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -4446,11 +4446,18 @@ impl Parser {\n             self.span_err(*self.span, \"an ABI may not be specified here\");\n         }\n \n+\n+        if *self.token == token::LPAREN {\n+            // `extern mod foo (name = \"bar\"[,vers = \"version\"]) is obsolete,\n+            // `extern mod foo = \"bar#[version]\";` should be used.\n+            // Parse obsolete options to avoid wired parser errors\n+            self.parse_optional_meta();\n+            self.obsolete(*self.span, ObsoleteExternModAttributesInParens);\n+        }\n         // extern mod foo;\n-        let metadata = self.parse_optional_meta();\n         self.expect(&token::SEMI);\n         iovi_view_item(ast::view_item {\n-            node: view_item_extern_mod(ident, maybe_path, metadata, ast::DUMMY_NODE_ID),\n+            node: view_item_extern_mod(ident, maybe_path, ast::DUMMY_NODE_ID),\n             attrs: attrs,\n             vis: visibility,\n             span: mk_sp(lo, self.last_span.hi)"}, {"sha": "79ef9c2cbbea5b3f7b84e91a6a5d5af61fff6b69", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -1952,7 +1952,7 @@ pub fn print_view_item(s: @ps, item: &ast::view_item) {\n     print_outer_attributes(s, item.attrs);\n     print_visibility(s, item.vis);\n     match item.node {\n-        ast::view_item_extern_mod(id, ref optional_path, ref mta, _) => {\n+        ast::view_item_extern_mod(id, ref optional_path, _) => {\n             head(s, \"extern mod\");\n             print_ident(s, id);\n             for &(ref p, style) in optional_path.iter() {\n@@ -1961,11 +1961,6 @@ pub fn print_view_item(s: @ps, item: &ast::view_item) {\n                 space(s.s);\n                 print_string(s, *p, style);\n             }\n-            if !mta.is_empty() {\n-                popen(s);\n-                commasep(s, consistent, *mta, |p, &i| print_meta_item(p, i));\n-                pclose(s);\n-            }\n         }\n \n         ast::view_item_use(ref vps) => {"}, {"sha": "2e83a038c589dccfed5598ffd2c39f2855ff16dd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -139,7 +139,7 @@ pub fn walk_mod<E:Clone, V:Visitor<E>>(visitor: &mut V, module: &_mod, env: E) {\n \n pub fn walk_view_item<E:Clone, V:Visitor<E>>(visitor: &mut V, vi: &view_item, env: E) {\n     match vi.node {\n-        view_item_extern_mod(name, _, _, _) => {\n+        view_item_extern_mod(name, _, _) => {\n             visitor.visit_ident(vi.span, name, env)\n         }\n         view_item_use(ref paths) => {"}, {"sha": "d329b8546b6117f428d9038e655eb476dbb74d9d", "filename": "src/test/run-pass/crateresolve8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -13,7 +13,7 @@\n \n #[crate_id=\"crateresolve8#0.1\"];\n \n-extern mod crateresolve8(vers = \"0.1\", package_id=\"crateresolve8#0.1\");\n+extern mod crateresolve8 = \"crateresolve8#0.1\";\n //extern mod crateresolve8(vers = \"0.1\");\n \n pub fn main() {"}, {"sha": "2b27a56dc79d45dbe872b7cd75354b134671dc94", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n //aux-build:extern-crosscrate-source.rs\n \n-extern mod externcallback(vers = \"0.1\");\n+extern mod externcallback = \"externcallback#0.1\";\n \n fn fact(n: uint) -> uint {\n     unsafe {"}, {"sha": "1af4d892a1a919760b14e12b38996e59a7c49bc4", "filename": "src/test/run-pass/issue-6919.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Ftest%2Frun-pass%2Fissue-6919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9b850ac1ed3abd0ff5abfbb716af83501dd5a/src%2Ftest%2Frun-pass%2Fissue-6919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6919.rs?ref=0df9b850ac1ed3abd0ff5abfbb716af83501dd5a", "patch": "@@ -12,7 +12,6 @@\n // xfail-fast\n \n #[crate_id=\"issue-6919\"];\n-\n extern mod issue6919_3;\n \n pub fn main() {"}]}