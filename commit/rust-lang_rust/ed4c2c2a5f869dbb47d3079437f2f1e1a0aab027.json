{"sha": "ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNGMyYzJhNWY4NjlkYmI0N2QzMDc5NDM3ZjJmMWUxYTBhYWIwMjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T05:10:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T05:10:09Z"}, "message": "Rollup merge of #65545 - nnethercote:more-symbol-cleanups, r=petrochenkov\n\nMore symbol cleanups\n\nSome minor improvements, mostly aimed at reducing unimportant differences between `Symbol` and `InternedString`. Helps a little with #60869.\n\nr? @petrochenkov", "tree": {"sha": "7df559a95d863fd0b40bb7f2c0aa9f6a2c835840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df559a95d863fd0b40bb7f2c0aa9f6a2c835840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqpqxCRBK7hj4Ov3rIwAAdHIIAHKXw1l+wCsB41dynobyrHEr\nrnQAQ4KlYzqeHJ1J7SlTlv+RrX5zuKr+R9aacbw8KLU33D0nlW9ZnQNfr00n4HSs\nJPHV9WoWMrZEb9iSMFjYo+ABKeyzuAO6Fx3n0CwXWgk9lTB/n4YfYkPWA+gPjlys\nN0aMejjHcLt47Ad7TCC3ike3+enBrxORaBWxRRKTDRHtO+IEk9c3XY3bgklDwOsk\nTQsaUXlq34VTkBMf1c4WBADxFtTI/EokQiRVjOMXPKqi6IhPOsKomI24Q9P7BJYn\nsOErtc64FZx0Lx6rTRdOUKn8ujGMUkZXr5nSFCD3evV4RnBnhZeiv5VRdIvzGkE=\n=G2EO\n-----END PGP SIGNATURE-----\n", "payload": "tree 7df559a95d863fd0b40bb7f2c0aa9f6a2c835840\nparent fab74044dde091682869039c2bbbb764d4f70123\nparent d343ee839b6fe26c992d0609281443776839039c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571461809 +0200\ncommitter GitHub <noreply@github.com> 1571461809 +0200\n\nRollup merge of #65545 - nnethercote:more-symbol-cleanups, r=petrochenkov\n\nMore symbol cleanups\n\nSome minor improvements, mostly aimed at reducing unimportant differences between `Symbol` and `InternedString`. Helps a little with #60869.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "html_url": "https://github.com/rust-lang/rust/commit/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab74044dde091682869039c2bbbb764d4f70123", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab74044dde091682869039c2bbbb764d4f70123", "html_url": "https://github.com/rust-lang/rust/commit/fab74044dde091682869039c2bbbb764d4f70123"}, {"sha": "d343ee839b6fe26c992d0609281443776839039c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d343ee839b6fe26c992d0609281443776839039c", "html_url": "https://github.com/rust-lang/rust/commit/d343ee839b6fe26c992d0609281443776839039c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d2732c92d26887688ff7e83d79131d2d418e8106", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "patch": "@@ -111,7 +111,7 @@ pub struct Definitions {\n /// A unique identifier that we can use to lookup a definition\n /// precisely. It combines the index of the definition's parent (if\n /// any) with a `DisambiguatedDefPathData`.\n-#[derive(Clone, PartialEq, Debug, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub struct DefKey {\n     /// The parent path.\n     pub parent: Option<DefIndex>,\n@@ -162,13 +162,13 @@ impl DefKey {\n /// between them. This introduces some artificial ordering dependency\n /// but means that if you have, e.g., two impls for the same type in\n /// the same module, they do get distinct `DefId`s.\n-#[derive(Clone, PartialEq, Debug, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub struct DisambiguatedDefPathData {\n     pub data: DefPathData,\n     pub disambiguator: u32\n }\n \n-#[derive(Clone, Debug, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct DefPath {\n     /// The path leading from the crate root to the item.\n     pub data: Vec<DisambiguatedDefPathData>,"}, {"sha": "fa9567fb62c0f8487f426e5a1a693eb41706f317", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "patch": "@@ -934,19 +934,19 @@ impl Symbol {\n \n impl fmt::Debug for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n+        self.with(|str| fmt::Debug::fmt(&str, f))\n     }\n }\n \n impl fmt::Display for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_str(), f)\n+        self.with(|str| fmt::Display::fmt(&str, f))\n     }\n }\n \n impl Encodable for Symbol {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(&self.as_str())\n+        self.with(|string| s.emit_str(string))\n     }\n }\n \n@@ -1106,8 +1106,8 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n }\n \n /// An alternative to `Symbol` and `InternedString`, useful when the chars\n-/// within the symbol need to be accessed. It is best used for temporary\n-/// values.\n+/// within the symbol need to be accessed. It deliberately has limited\n+/// functionality and should only be used for temporary values.\n ///\n /// Because the interner outlives any thread which uses this type, we can\n /// safely treat `string` which points to interner data, as an immortal string,\n@@ -1116,7 +1116,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Clone, Copy, Eq, PartialOrd, Ord)]\n+#[derive(Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }"}, {"sha": "acd852103cae3d0b5219b7f1c50c5a60cd31778a", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "patch": "@@ -17,7 +17,7 @@ fn y /* 0#0 */() { }\n /*\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, kind: Macro(Bang, foo)\n+1: parent: ExpnId(0), call_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "2160df51a8375c92e8082ab2a60953b4f3a4137e", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(197..199) }, Ident { ident: \"span_preservation\", span: #0 bytes(200..217) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(217..219) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(227..230) }, Ident { ident: \"tst\", span: #0 bytes(231..234) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(235..236) }, Literal { lit: Lit { kind: Integer, symbol: 123, suffix: None }, span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(240..241) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(241..242) }, Ident { ident: \"match\", span: #0 bytes(288..293) }, Ident { ident: \"tst\", span: #0 bytes(294..297) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: 123, suffix: None }, span: Span { lo: BytePos(482), hi: BytePos(485), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(486..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(486..488) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(489..491) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(491..492) }, Ident { ident: \"_\", span: #0 bytes(501..502) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(503..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(503..505) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(506..508) }], span: #0 bytes(298..514) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(514..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(516..517) }], span: #0 bytes(221..561) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(197..199) }, Ident { ident: \"span_preservation\", span: #0 bytes(200..217) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(217..219) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(227..230) }, Ident { ident: \"tst\", span: #0 bytes(231..234) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(235..236) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(240..241) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(241..242) }, Ident { ident: \"match\", span: #0 bytes(288..293) }, Ident { ident: \"tst\", span: #0 bytes(294..297) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(482), hi: BytePos(485), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(486..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(486..488) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(489..491) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(491..492) }, Ident { ident: \"_\", span: #0 bytes(501..502) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(503..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(503..505) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(506..508) }], span: #0 bytes(298..514) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(514..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(516..517) }], span: #0 bytes(221..561) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |"}]}