{"sha": "31263f320419f21a909a04b92305ed66364f63c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMjYzZjMyMDQxOWYyMWE5MDlhMDRiOTIzMDVlZDY2MzY0ZjYzYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T02:50:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T02:50:14Z"}, "message": "Auto merge of #52285 - ljedrz:dyn_librustc_driver, r=nikomatsakis\n\nDeny bare trait objects in librustc_driver\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_driver`.", "tree": {"sha": "949c0c1c342dc063808b689160e861ec46c9f68b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949c0c1c342dc063808b689160e861ec46c9f68b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31263f320419f21a909a04b92305ed66364f63c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31263f320419f21a909a04b92305ed66364f63c0", "html_url": "https://github.com/rust-lang/rust/commit/31263f320419f21a909a04b92305ed66364f63c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31263f320419f21a909a04b92305ed66364f63c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c04babb88beb20331b80ad9e4a51f860fb2392", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c04babb88beb20331b80ad9e4a51f860fb2392", "html_url": "https://github.com/rust-lang/rust/commit/55c04babb88beb20331b80ad9e4a51f860fb2392"}, {"sha": "db7170cf4ad9e4c72e5c456891647d0e1b6355be", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7170cf4ad9e4c72e5c456891647d0e1b6355be", "html_url": "https://github.com/rust-lang/rust/commit/db7170cf4ad9e4c72e5c456891647d0e1b6355be"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "3c3c56e629570e1c1f09da257c3670c8bfadc6c1", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=31263f320419f21a909a04b92305ed66364f63c0", "patch": "@@ -100,7 +100,7 @@ pub fn spawn_thread_pool<F: FnOnce(config::Options) -> R + sync::Send, R: sync::\n             // the thread local rustc uses. syntax_globals and syntax_pos_globals are\n             // captured and set on the new threads. ty::tls::with_thread_locals sets up\n             // thread local callbacks from libsyntax\n-            let main_handler = move |worker: &mut FnMut()| {\n+            let main_handler = move |worker: &mut dyn FnMut()| {\n                 syntax::GLOBALS.set(syntax_globals, || {\n                     syntax_pos::GLOBALS.set(syntax_pos_globals, || {\n                         ty::tls::with_thread_locals(|| {\n@@ -118,7 +118,7 @@ pub fn spawn_thread_pool<F: FnOnce(config::Options) -> R + sync::Send, R: sync::\n }\n \n pub fn compile_input(\n-    codegen_backend: Box<CodegenBackend>,\n+    codegen_backend: Box<dyn CodegenBackend>,\n     sess: &Session,\n     cstore: &CStore,\n     input_path: &Option<PathBuf>,\n@@ -399,10 +399,10 @@ pub struct CompileController<'a> {\n \n     /// Allows overriding default rustc query providers,\n     /// after `default_provide` has installed them.\n-    pub provide: Box<Fn(&mut ty::query::Providers) + 'a>,\n+    pub provide: Box<dyn Fn(&mut ty::query::Providers) + 'a>,\n     /// Same as `provide`, but only for non-local crates,\n     /// applied after `default_provide_extern`.\n-    pub provide_extern: Box<Fn(&mut ty::query::Providers) + 'a>,\n+    pub provide_extern: Box<dyn Fn(&mut ty::query::Providers) + 'a>,\n }\n \n impl<'a> CompileController<'a> {\n@@ -471,10 +471,10 @@ impl<'a> ::CompilerCalls<'a> for CompileController<'a> {\n     }\n     fn late_callback(\n         &mut self,\n-        codegen_backend: &::CodegenBackend,\n+        codegen_backend: &dyn (::CodegenBackend),\n         matches: &::getopts::Matches,\n         sess: &Session,\n-        cstore: &::CrateStore,\n+        cstore: &dyn (::CrateStore),\n         input: &Input,\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n@@ -496,7 +496,7 @@ pub struct PhaseController<'a> {\n     // If true then the compiler will try to run the callback even if the phase\n     // ends with an error. Note that this is not always possible.\n     pub run_callback_on_error: bool,\n-    pub callback: Box<Fn(&mut CompileState) + 'a>,\n+    pub callback: Box<dyn Fn(&mut CompileState) + 'a>,\n }\n \n impl<'a> PhaseController<'a> {\n@@ -1175,7 +1175,7 @@ pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n-    codegen_backend: &CodegenBackend,\n+    codegen_backend: &dyn CodegenBackend,\n     control: &CompileController,\n     sess: &'tcx Session,\n     cstore: &'tcx CrateStoreDyn,\n@@ -1191,7 +1191,7 @@ where\n     F: for<'a> FnOnce(\n         TyCtxt<'a, 'tcx, 'tcx>,\n         ty::CrateAnalysis,\n-        mpsc::Receiver<Box<Any + Send>>,\n+        mpsc::Receiver<Box<dyn Any + Send>>,\n         CompileResult,\n     ) -> R,\n {\n@@ -1324,10 +1324,10 @@ where\n /// Run the codegen backend, after which the AST and analysis can\n /// be discarded.\n pub fn phase_4_codegen<'a, 'tcx>(\n-    codegen_backend: &CodegenBackend,\n+    codegen_backend: &dyn CodegenBackend,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    rx: mpsc::Receiver<Box<Any + Send>>,\n-) -> Box<Any> {\n+    rx: mpsc::Receiver<Box<dyn Any + Send>>,\n+) -> Box<dyn Any> {\n     time(tcx.sess, \"resolving dependency formats\", || {\n         ::rustc::middle::dependency_format::calculate(tcx)\n     });"}, {"sha": "0e1ba6e444dc6eec55aec7495f309e9b4a9e7f17", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=31263f320419f21a909a04b92305ed66364f63c0", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -131,7 +133,7 @@ pub mod target_features {\n     /// features is available on the target machine, by querying LLVM.\n     pub fn add_configuration(cfg: &mut ast::CrateConfig,\n                              sess: &Session,\n-                             codegen_backend: &CodegenBackend) {\n+                             codegen_backend: &dyn CodegenBackend) {\n         let tf = Symbol::intern(\"target_feature\");\n \n         for feat in codegen_backend.target_features(sess) {\n@@ -202,7 +204,7 @@ pub fn run<F>(run_compiler: F) -> isize\n     0\n }\n \n-fn load_backend_from_dylib(path: &Path) -> fn() -> Box<CodegenBackend> {\n+fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n     // Note that we're specifically using `open_global_now` here rather than\n     // `open`, namely we want the behavior on Unix of RTLD_GLOBAL and RTLD_NOW,\n     // where NOW means \"bind everything right now\" because we don't want\n@@ -235,12 +237,12 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<CodegenBackend> {\n     }\n }\n \n-pub fn get_codegen_backend(sess: &Session) -> Box<CodegenBackend> {\n+pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n     static INIT: Once = ONCE_INIT;\n \n     #[allow(deprecated)]\n     #[no_debug]\n-    static mut LOAD: fn() -> Box<CodegenBackend> = || unreachable!();\n+    static mut LOAD: fn() -> Box<dyn CodegenBackend> = || unreachable!();\n \n     INIT.call_once(|| {\n         let codegen_name = sess.opts.debugging_opts.codegen_backend.as_ref()\n@@ -264,7 +266,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<CodegenBackend> {\n     backend\n }\n \n-fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<CodegenBackend> {\n+fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     // For now we only allow this function to be called once as it'll dlopen a\n     // few things, which seems to work best if we only do that once. In\n     // general this assertion never trips due to the once guard in `get_codegen_backend`,\n@@ -454,9 +456,9 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<CodegenBackend> {\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n pub fn run_compiler<'a>(args: &[String],\n-                        callbacks: Box<CompilerCalls<'a> + sync::Send + 'a>,\n-                        file_loader: Option<Box<FileLoader + Send + Sync + 'static>>,\n-                        emitter_dest: Option<Box<Write + Send>>)\n+                        callbacks: Box<dyn CompilerCalls<'a> + sync::Send + 'a>,\n+                        file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n+                        emitter_dest: Option<Box<dyn Write + Send>>)\n                         -> (CompileResult, Option<Session>)\n {\n     syntax::with_globals(|| {\n@@ -478,9 +480,9 @@ fn run_compiler_with_pool<'a>(\n     matches: getopts::Matches,\n     sopts: config::Options,\n     cfg: ast::CrateConfig,\n-    mut callbacks: Box<CompilerCalls<'a> + sync::Send + 'a>,\n-    file_loader: Option<Box<FileLoader + Send + Sync + 'static>>,\n-    emitter_dest: Option<Box<Write + Send>>\n+    mut callbacks: Box<dyn CompilerCalls<'a> + sync::Send + 'a>,\n+    file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n+    emitter_dest: Option<Box<dyn Write + Send>>\n ) -> (CompileResult, Option<Session>) {\n     macro_rules! do_or_return {($expr: expr, $sess: expr) => {\n         match $expr {\n@@ -662,10 +664,10 @@ pub trait CompilerCalls<'a> {\n     /// be called just before actual compilation starts (and before build_controller\n     /// is called), after all arguments etc. have been completely handled.\n     fn late_callback(&mut self,\n-                     _: &CodegenBackend,\n+                     _: &dyn CodegenBackend,\n                      _: &getopts::Matches,\n                      _: &Session,\n-                     _: &CrateStore,\n+                     _: &dyn CrateStore,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n@@ -870,10 +872,10 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     }\n \n     fn late_callback(&mut self,\n-                     codegen_backend: &CodegenBackend,\n+                     codegen_backend: &dyn CodegenBackend,\n                      matches: &getopts::Matches,\n                      sess: &Session,\n-                     cstore: &CrateStore,\n+                     cstore: &dyn CrateStore,\n                      input: &Input,\n                      odir: &Option<PathBuf>,\n                      ofile: &Option<PathBuf>)\n@@ -979,7 +981,7 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n \n impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session,\n-                         cstore: &CrateStore,\n+                         cstore: &dyn CrateStore,\n                          matches: &getopts::Matches,\n                          input: &Input)\n                          -> Compilation {\n@@ -1007,7 +1009,7 @@ impl RustcDefaultCalls {\n     }\n \n \n-    fn print_crate_info(codegen_backend: &CodegenBackend,\n+    fn print_crate_info(codegen_backend: &dyn CodegenBackend,\n                         sess: &Session,\n                         input: Option<&Input>,\n                         odir: &Option<PathBuf>,\n@@ -1486,7 +1488,7 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n /// Runs `f` in a suitable thread for running `rustc`; returns a\n /// `Result` with either the return value of `f` or -- if a panic\n /// occurs -- the panic value.\n-pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n+pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     where F: FnOnce() -> R + Send + 'static,\n           R: Send + 'static,\n {"}, {"sha": "6433a93a317a653cfa11ba7805a1ed49f5a56a7f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=31263f320419f21a909a04b92305ed66364f63c0", "patch": "@@ -170,7 +170,7 @@ impl PpSourceMode {\n                                            hir_map: Option<&hir_map::Map<'tcx>>,\n                                            f: F)\n                                            -> A\n-        where F: FnOnce(&PrinterSupport) -> A\n+        where F: FnOnce(&dyn PrinterSupport) -> A\n     {\n         match *self {\n             PpmNormal | PpmEveryBodyLoops | PpmExpanded => {\n@@ -208,7 +208,7 @@ impl PpSourceMode {\n                                                id: &str,\n                                                f: F)\n                                                -> A\n-        where F: FnOnce(&HirPrinterSupport, &hir::Crate) -> A\n+        where F: FnOnce(&dyn HirPrinterSupport, &hir::Crate) -> A\n     {\n         match *self {\n             PpmNormal => {\n@@ -265,7 +265,7 @@ trait PrinterSupport: pprust::PpAnn {\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n-    fn pp_ann<'a>(&'a self) -> &'a pprust::PpAnn;\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn;\n }\n \n trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n@@ -281,7 +281,7 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n-    fn pp_ann<'a>(&'a self) -> &'a pprust_hir::PpAnn;\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn;\n \n     /// Computes an user-readable representation of a path, if possible.\n     fn node_path(&self, id: ast::NodeId) -> Option<String> {\n@@ -305,7 +305,7 @@ impl<'hir> PrinterSupport for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a pprust::PpAnn {\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -319,7 +319,7 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n         self.hir_map.as_ref()\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a pprust_hir::PpAnn {\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n         self\n     }\n }\n@@ -346,7 +346,7 @@ impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a pprust::PpAnn {\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -397,7 +397,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n         self.hir_map.as_ref()\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a pprust_hir::PpAnn {\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n         self\n     }\n }\n@@ -458,7 +458,7 @@ impl<'a> PrinterSupport for HygieneAnnotation<'a> {\n         self.sess\n     }\n \n-    fn pp_ann(&self) -> &pprust::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -496,7 +496,7 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n         Some(&self.tcx.hir)\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a pprust_hir::PpAnn {\n+    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n         self\n     }\n \n@@ -896,7 +896,7 @@ pub fn print_after_parsing(sess: &Session,\n \n     if let PpmSource(s) = ppm {\n         // Silently ignores an identified node.\n-        let out: &mut Write = &mut out;\n+        let out: &mut dyn Write = &mut out;\n         s.call_with_pp_support(sess, None, move |annotation| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n@@ -953,7 +953,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n     match (ppm, opt_uii) {\n             (PpmSource(s), _) => {\n                 // Silently ignores an identified node.\n-                let out: &mut Write = &mut out;\n+                let out: &mut dyn Write = &mut out;\n                 s.call_with_pp_support(sess, Some(hir_map), move |annotation| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n@@ -969,7 +969,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             }\n \n             (PpmHir(s), None) => {\n-                let out: &mut Write = &mut out;\n+                let out: &mut dyn Write = &mut out;\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n@@ -993,7 +993,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             }\n \n             (PpmHirTree(s), None) => {\n-                let out: &mut Write = &mut out;\n+                let out: &mut dyn Write = &mut out;\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n@@ -1009,7 +1009,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             }\n \n             (PpmHir(s), Some(uii)) => {\n-                let out: &mut Write = &mut out;\n+                let out: &mut dyn Write = &mut out;\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n@@ -1043,7 +1043,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             }\n \n             (PpmHirTree(s), Some(uii)) => {\n-                let out: &mut Write = &mut out;\n+                let out: &mut dyn Write = &mut out;\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n@@ -1137,7 +1137,7 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                     Some(code) => {\n                         let variants = gather_flowgraph_variants(tcx.sess);\n \n-                        let out: &mut Write = &mut out;\n+                        let out: &mut dyn Write = &mut out;\n \n                         print_flowgraph(variants, tcx, code, mode, out)\n                     }"}, {"sha": "5b2092ea9eb11fe17cdbdec653ef540d819b4e58", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31263f320419f21a909a04b92305ed66364f63c0/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=31263f320419f21a909a04b92305ed66364f63c0", "patch": "@@ -88,13 +88,13 @@ impl Emitter for ExpectErrorEmitter {\n     }\n }\n \n-fn errors(msgs: &[&str]) -> (Box<Emitter + sync::Send>, usize) {\n+fn errors(msgs: &[&str]) -> (Box<dyn Emitter + sync::Send>, usize) {\n     let v = msgs.iter().map(|m| m.to_string()).collect();\n-    (box ExpectErrorEmitter { messages: v } as Box<Emitter + sync::Send>, msgs.len())\n+    (box ExpectErrorEmitter { messages: v } as Box<dyn Emitter + sync::Send>, msgs.len())\n }\n \n fn test_env<F>(source_string: &str,\n-               args: (Box<Emitter + sync::Send>, usize),\n+               args: (Box<dyn Emitter + sync::Send>, usize),\n                body: F)\n     where F: FnOnce(Env)\n {\n@@ -112,7 +112,7 @@ fn test_env<F>(source_string: &str,\n fn test_env_with_pool<F>(\n     options: config::Options,\n     source_string: &str,\n-    (emitter, expected_err_count): (Box<Emitter + sync::Send>, usize),\n+    (emitter, expected_err_count): (Box<dyn Emitter + sync::Send>, usize),\n     body: F\n )\n     where F: FnOnce(Env)"}]}