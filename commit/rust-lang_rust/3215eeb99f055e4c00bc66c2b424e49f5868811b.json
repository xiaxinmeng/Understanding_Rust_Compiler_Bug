{"sha": "3215eeb99f055e4c00bc66c2b424e49f5868811b", "node_id": "C_kwDOAAsO6NoAKDMyMTVlZWI5OWYwNTVlNGMwMGJjNjZjMmI0MjRlNDlmNTg2ODgxMWI", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-28T15:01:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-28T15:01:42Z"}, "message": "Revert \"Add rustc lint, warning when iterating over hashmaps\"", "tree": {"sha": "485ad4e34c27585ea83a8b502794ed02d9cd624d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485ad4e34c27585ea83a8b502794ed02d9cd624d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3215eeb99f055e4c00bc66c2b424e49f5868811b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhertWCRBK7hj4Ov3rIwAAT/8IAB8AerTQI58QxGTIXBWh0Z1/\nEhmd9gNwTMOayUKQmmXat9q+RaG6xaUOKpZCIaPv5G2y8kZLwel7kmB6OuM61U4+\n9K/Emii1Pqj53IbBDC7cwT88v3XM0YTn1LSPzb7LgdgtYk9BZLh4ZS5Wy3u54EDb\n7QW43CBojtogBpX+oIsSic6g9DPWSZ2nrRa07u4uWsb2F9HTK0ZBNVgvOz7kJj/8\nNrmn3bu7Gn4+gxNCi4DvoeaWH+D1N4PxqaKPmZq13omubx5YdLUxwhEH1jRApuLg\nypuOJZuTzDNdARF6q4JnpTcL4wNxOL/3JdQcur4zgzjS4lAYS3KrGTKjciYaksw=\n=mrZv\n-----END PGP SIGNATURE-----\n", "payload": "tree 485ad4e34c27585ea83a8b502794ed02d9cd624d\nparent f2707fec04f655cdf18388618881748ebbd683e9\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1635433302 -0400\ncommitter GitHub <noreply@github.com> 1635433302 -0400\n\nRevert \"Add rustc lint, warning when iterating over hashmaps\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3215eeb99f055e4c00bc66c2b424e49f5868811b", "html_url": "https://github.com/rust-lang/rust/commit/3215eeb99f055e4c00bc66c2b424e49f5868811b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3215eeb99f055e4c00bc66c2b424e49f5868811b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2707fec04f655cdf18388618881748ebbd683e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2707fec04f655cdf18388618881748ebbd683e9", "html_url": "https://github.com/rust-lang/rust/commit/f2707fec04f655cdf18388618881748ebbd683e9"}], "stats": {"total": 367, "additions": 68, "deletions": 299}, "files": [{"sha": "92e08da7a97abdf9a23ecfa00ad8b6641ba85e5d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -35,7 +35,6 @@\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};"}, {"sha": "47666670b2b63dbb2f2fbbe714e278011e1da4d7", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -7,7 +7,6 @@\n #![feature(iter_is_partitioned)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "c4fc7e0df005fb3dd5409ed2de65aa0162e505b0", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -12,7 +12,6 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "d1d276930b90aa1c45912cede65d38c9821e72e7", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -11,7 +11,6 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "8f4d79e7147d349ac7ab7978b654c062569757a4", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -13,7 +13,6 @@\n #![feature(iter_zip)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "4c87d4d896e2ec8129362eb05464504d68108a26", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -8,7 +8,6 @@\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "f308e764e861d0422e76464c39014aea20b59d09", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -24,7 +24,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "77784bf1705234d0018ef5aca044267902dd6735", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -27,7 +27,6 @@\n #![feature(thread_id_value)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "9a57ec991444ac8e160ae835d213b6513afad26e", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -8,7 +8,6 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;\n@@ -847,7 +846,7 @@ Available lint options:\n     let builtin = sort_lints(sess, builtin);\n \n     let (plugin_groups, builtin_groups): (Vec<_>, _) =\n-        lint_store.get_lint_groups().partition(|&(.., p)| p);\n+        lint_store.get_lint_groups().iter().cloned().partition(|&(.., p)| p);\n     let plugin_groups = sort_lint_groups(plugin_groups);\n     let builtin_groups = sort_lint_groups(builtin_groups);\n "}, {"sha": "b6cf332f511ec2fe39e4eda5fbbd5982d92539a6", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -10,7 +10,6 @@\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(nll)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "521ca2135c6f217ad573c1ffbf437ade2652c08b", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -10,7 +10,6 @@\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "33188d375f5d5e2f333ff8605a5414cf58b796ac", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -460,9 +460,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Prevents field reads in the marked trait or method to be considered\n     // during dead code analysis.\n     rustc_attr!(rustc_trivial_field_reads, Normal, template!(Word), INTERNAL_UNSTABLE),\n-    // Used by the `rustc::potential_query_instability` lint to warn methods which\n-    // might not be stable during incremental compilation.\n-    rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "dd3f8c937f81abd400017a7885e74a02990ada60", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -5,7 +5,6 @@\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "d0f1ff649d058a0558f80ef9258234fac1fd165a", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -24,7 +24,6 @@\n #![feature(min_specialization)]\n #![feature(label_break_value)]\n #![recursion_limit = \"512\"] // For rustdoc\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "2fc3759968fd3531d8c63857a98cbda411de3a00", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -5,7 +5,6 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod callbacks;\n pub mod interface;"}, {"sha": "d235b2209444eb8bd7dfb7e6896d416e95597499", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -144,11 +144,7 @@ impl LintStore {\n         &self.lints\n     }\n \n-    pub fn get_lint_groups<'t>(\n-        &'t self,\n-    ) -> impl Iterator<Item = (&'static str, Vec<LintId>, bool)> + 't {\n-        // This function is not used in a way which observes the order of lints.\n-        #[cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n         self.lint_groups\n             .iter()\n             .filter(|(_, LintGroup { depr, .. })| {\n@@ -158,6 +154,7 @@ impl LintStore {\n             .map(|(k, LintGroup { lint_ids, from_plugin, .. })| {\n                 (*k, lint_ids.clone(), *from_plugin)\n             })\n+            .collect()\n     }\n \n     pub fn register_early_pass("}, {"sha": "50a0d211a366a913613ea622df502554413c00bd", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -5,7 +5,10 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::*;\n+use rustc_hir::{\n+    GenericArg, HirId, Item, ItemKind, MutTy, Mutability, Node, Path, PathSegment, QPath, Ty,\n+    TyKind,\n+};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -48,60 +51,6 @@ impl LateLintPass<'_> for DefaultHashTypes {\n     }\n }\n \n-declare_tool_lint! {\n-    pub rustc::POTENTIAL_QUERY_INSTABILITY,\n-    Allow,\n-    \"require explicit opt-in when using potentially unstable methods or functions\",\n-    report_in_external_macro: true\n-}\n-\n-declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n-\n-impl LateLintPass<'_> for QueryStability {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n-        // error if there are resolution failures.\n-        //\n-        // As internal lints are currently always run if there are `unstable_options`,\n-        // they are added to the lint store of rustdoc. Internal lints are also\n-        // not used via the `lint_mod` query. Crate lints run outside of a query\n-        // so rustdoc currently doesn't disable them.\n-        //\n-        // Instead of relying on this, either change crate lints to a query disabled by\n-        // rustdoc, only run internal lints if the user is explicitly opting in\n-        // or figure out a different way to avoid running lints for rustdoc.\n-        if cx.tcx.sess.opts.actually_rustdoc {\n-            return;\n-        }\n-\n-        let (def_id, span) = match expr.kind {\n-            ExprKind::Path(ref path) if let Some(def_id) = cx.qpath_res(path, expr.hir_id).opt_def_id() => {\n-                (def_id, expr.span)\n-            }\n-            ExprKind::MethodCall(_, span, _, _) if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) => {\n-                (def_id, span)\n-            },\n-            _ => return,\n-        };\n-\n-        let substs = cx.typeck_results().node_substs(expr.hir_id);\n-        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n-            let def_id = instance.def_id();\n-            if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n-                cx.struct_span_lint(POTENTIAL_QUERY_INSTABILITY, span, |lint| {\n-                    let msg = format!(\n-                        \"using `{}` can result in unstable query results\",\n-                        cx.tcx.item_name(def_id)\n-                    );\n-                    lint.build(&msg)\n-                        .note(\"if you believe this case to be fine, allow this lint and add a comment explaining your rationale\")\n-                        .emit();\n-                })\n-            }\n-        }\n-    }\n-}\n-\n declare_tool_lint! {\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,"}, {"sha": "6f684a0fe5128658eaaa61dd955d505b5d80b24f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -31,14 +31,12 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n-#![feature(if_let_guard)]\n #![feature(iter_order_by)]\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -486,8 +484,6 @@ fn register_internals(store: &mut LintStore) {\n     store.register_early_pass(|| Box::new(LintPassImpl));\n     store.register_lints(&DefaultHashTypes::get_lints());\n     store.register_late_pass(|| Box::new(DefaultHashTypes));\n-    store.register_lints(&QueryStability::get_lints());\n-    store.register_late_pass(|| Box::new(QueryStability));\n     store.register_lints(&ExistingDocKeyword::get_lints());\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n@@ -498,7 +494,6 @@ fn register_internals(store: &mut LintStore) {\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n-            LintId::of(POTENTIAL_QUERY_INSTABILITY),\n             LintId::of(USAGE_OF_TY_TYKIND),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n             LintId::of(TY_PASS_BY_REFERENCE),"}, {"sha": "6cf0dd8b1addbee40c76b377e7c05bb52c39455e", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -10,7 +10,6 @@\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "0894b80507581458cb006426ed59e7b33158347e", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -56,7 +56,6 @@\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n #![recursion_limit = \"512\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "b0f1e08562c1609b4d91ef91d0b9333478f2d59c", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -10,7 +10,6 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "f9ef31462780731a9375aa0ec7f4f379c17da875", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -12,7 +12,6 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "f4082153b684048d1310b9a1990ee6b721dd128b", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -5,7 +5,6 @@\n #![feature(let_else)]\n #![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "e5fbddda74427a8e0d60b8d0c4a5681854e01bb0", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 61, "deletions": 83, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -62,7 +62,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_attributes(\n         &self,\n         hir_id: HirId,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) {\n@@ -78,7 +78,7 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::marker => self.check_marker(hir_id, attr, span, target),\n                 sym::target_feature => self.check_target_feature(hir_id, attr, span, target),\n                 sym::track_caller => {\n-                    self.check_track_caller(hir_id, attr.span, attrs, span, target)\n+                    self.check_track_caller(hir_id, &attr.span, attrs, span, target)\n                 }\n                 sym::doc => self.check_doc_attrs(\n                     attr,\n@@ -103,9 +103,6 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::rustc_legacy_const_generics => {\n                     self.check_rustc_legacy_const_generics(&attr, span, target, item)\n                 }\n-                sym::rustc_lint_query_instability => {\n-                    self.check_rustc_lint_query_instability(&attr, span, target)\n-                }\n                 sym::rustc_clean\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n@@ -233,7 +230,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n-    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Closure\n@@ -276,7 +273,7 @@ impl CheckAttrVisitor<'tcx> {\n                     E0518,\n                     \"attribute should be applied to function or closure\",\n                 )\n-                .span_label(span, \"not a function or closure\")\n+                .span_label(*span, \"not a function or closure\")\n                 .emit();\n                 false\n             }\n@@ -315,7 +312,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if `#[naked]` is applied to a function definition.\n-    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -334,15 +331,15 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(span, \"not a function definition\")\n+                    .span_label(*span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cmse_nonsecure_entry]` is applied to a function definition.\n-    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -353,7 +350,7 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(span, \"not a function definition\")\n+                    .span_label(*span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n@@ -364,16 +361,16 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_track_caller(\n         &self,\n         hir_id: HirId,\n-        attr_span: Span,\n+        attr_span: &Span,\n         attrs: &'hir [Attribute],\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n             _ if attrs.iter().any(|attr| attr.has_name(sym::naked)) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    attr_span,\n+                    *attr_span,\n                     E0736,\n                     \"cannot use `#[track_caller]` with `#[naked]`\",\n                 )\n@@ -394,11 +391,11 @@ impl CheckAttrVisitor<'tcx> {\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    attr_span,\n+                    *attr_span,\n                     E0739,\n                     \"attribute should be applied to function\"\n                 )\n-                .span_label(span, \"not a function\")\n+                .span_label(*span, \"not a function\")\n                 .emit();\n                 false\n             }\n@@ -410,7 +407,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -430,15 +427,15 @@ impl CheckAttrVisitor<'tcx> {\n                     E0701,\n                     \"attribute can only be applied to a struct or enum\"\n                 )\n-                .span_label(span, \"not a struct or enum\")\n+                .span_label(*span, \"not a struct or enum\")\n                 .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n-    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Trait => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -453,7 +450,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(span, \"not a trait\")\n+                    .span_label(*span, \"not a trait\")\n                     .emit();\n                 false\n             }\n@@ -465,7 +462,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -481,7 +478,7 @@ impl CheckAttrVisitor<'tcx> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(span, \"not a function\")\n+                        .span_label(*span, \"not a function\")\n                         .emit();\n                 });\n                 true\n@@ -498,7 +495,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                    .span_label(span, \"not a function\")\n+                    .span_label(*span, \"not a function\")\n                     .emit();\n                 false\n             }\n@@ -1050,22 +1047,22 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n-    fn check_must_not_suspend(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Struct | Target::Enum | Target::Union | Target::Trait => true,\n             _ => {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, or trait\")\n-                        .span_label(span, \"is not a struct, enum, or trait\")\n+                        .span_label(*span, \"is not a struct, enum, or trait\")\n                         .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n-    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n+    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n             Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1085,15 +1082,15 @@ impl CheckAttrVisitor<'tcx> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(span, \"not a function\")\n+                        .span_label(*span, \"not a function\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[link_name]` is applied to an item other than a foreign function or static.\n-    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n+    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n             Target::ForeignFn | Target::ForeignStatic => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1127,15 +1124,15 @@ impl CheckAttrVisitor<'tcx> {\n                         }\n                     }\n \n-                    diag.span_label(span, \"not a foreign function or static\");\n+                    diag.span_label(*span, \"not a foreign function or static\");\n                     diag.emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_link]` is applied to an `extern crate`. Returns `true` if valid.\n-    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::ExternCrate => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1153,7 +1150,7 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to an `extern crate` item\",\n                     )\n-                    .span_label(span, \"not an `extern crate` item\")\n+                    .span_label(*span, \"not an `extern crate` item\")\n                     .emit();\n                 false\n             }\n@@ -1169,7 +1166,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1190,7 +1187,7 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a free function, impl method or static\",\n                     )\n-                    .span_label(span, \"not a free function, impl method or static\")\n+                    .span_label(*span, \"not a free function, impl method or static\")\n                     .emit();\n                 false\n             }\n@@ -1200,14 +1197,14 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_rustc_layout_scalar_valid_range(\n         &self,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         if target != Target::Struct {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a struct\")\n-                .span_label(span, \"not a struct\")\n+                .span_label(*span, \"not a struct\")\n                 .emit();\n             return false;\n         }\n@@ -1232,7 +1229,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_rustc_legacy_const_generics(\n         &self,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n@@ -1241,7 +1238,7 @@ impl CheckAttrVisitor<'tcx> {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(span, \"not a function\")\n+                .span_label(*span, \"not a function\")\n                 .emit();\n             return false;\n         }\n@@ -1327,25 +1324,6 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_rustc_lint_query_instability(\n-        &self,\n-        attr: &Attribute,\n-        span: Span,\n-        target: Target,\n-    ) -> bool {\n-        let is_function = matches!(target, Target::Fn | Target::Method(..));\n-        if !is_function {\n-            self.tcx\n-                .sess\n-                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(span, \"not a function\")\n-                .emit();\n-            false\n-        } else {\n-            true\n-        }\n-    }\n-\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {\n@@ -1361,7 +1339,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if `#[link_section]` is applied to a function or static.\n-    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n+    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn | Target::Method(..) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1381,15 +1359,15 @@ impl CheckAttrVisitor<'tcx> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(span, \"not a function or static\")\n+                        .span_label(*span, \"not a function or static\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_mangle]` is applied to a function or static.\n-    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n+    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn => {}\n             Target::Method(..) if self.is_impl_item(hir_id) => {}\n@@ -1419,7 +1397,7 @@ impl CheckAttrVisitor<'tcx> {\n                             being phased out; it will become a hard error in \\\n                             a future release!\",\n                     )\n-                    .span_label(span, format!(\"foreign {}\", foreign_item_kind))\n+                    .span_label(*span, format!(\"foreign {}\", foreign_item_kind))\n                     .note(\"symbol names in extern blocks are not mangled\")\n                     .span_suggestion(\n                         attr.span,\n@@ -1442,7 +1420,7 @@ impl CheckAttrVisitor<'tcx> {\n                          being phased out; it will become a hard error in \\\n                          a future release!\",\n                     )\n-                    .span_label(span, \"not a free function, impl method or static\")\n+                    .span_label(*span, \"not a free function, impl method or static\")\n                     .emit();\n                 });\n             }\n@@ -1453,7 +1431,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_repr(\n         &self,\n         attrs: &'hir [Attribute],\n-        span: Span,\n+        span: &Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n         hir_id: HirId,\n@@ -1587,7 +1565,7 @@ impl CheckAttrVisitor<'tcx> {\n                 \"{}\",\n                 &format!(\"attribute should be applied to {} {}\", article, allowed_targets)\n             )\n-            .span_label(span, &format!(\"not {} {}\", article, allowed_targets))\n+            .span_label(*span, &format!(\"not {} {}\", article, allowed_targets))\n             .emit();\n         }\n \n@@ -1650,7 +1628,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n         attrs: &[Attribute],\n     ) -> bool {\n@@ -1683,7 +1661,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n-                    .span_label(span, \"not a macro\")\n+                    .span_label(*span, \"not a macro\")\n                     .emit();\n                 false\n             }\n@@ -1696,7 +1674,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1717,7 +1695,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n-                    .span_label(span, \"not a `const fn`\")\n+                    .span_label(*span, \"not a `const fn`\")\n                     .emit();\n                 false\n             }\n@@ -1728,7 +1706,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_default_method_body_is_const(\n         &self,\n         attr: &Attribute,\n-        span: Span,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1740,14 +1718,14 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a trait method with body\",\n                     )\n-                    .span_label(span, \"not a trait method or missing a body\")\n+                    .span_label(*span, \"not a trait method or missing a body\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n-    fn check_stability_promotable(&self, attr: &Attribute, _span: Span, target: Target) -> bool {\n+    fn check_stability_promotable(&self, attr: &Attribute, _span: &Span, target: Target) -> bool {\n         match target {\n             Target::Expression => {\n                 self.tcx\n@@ -1760,7 +1738,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: Span, target: Target) {\n+    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: &Span, target: Target) {\n         match target {\n             Target::Closure | Target::Expression | Target::Statement | Target::Arm => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n@@ -1832,37 +1810,37 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         }\n \n         let target = Target::from_item(item);\n-        self.check_attributes(item.hir_id(), item.span, target, Some(ItemLike::Item(item)));\n+        self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));\n         intravisit::walk_item(self, item)\n     }\n \n     fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {\n         let target = Target::from_generic_param(generic_param);\n-        self.check_attributes(generic_param.hir_id, generic_param.span, target, None);\n+        self.check_attributes(generic_param.hir_id, &generic_param.span, target, None);\n         intravisit::walk_generic_param(self, generic_param)\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n-        self.check_attributes(trait_item.hir_id(), trait_item.span, target, None);\n+        self.check_attributes(trait_item.hir_id(), &trait_item.span, target, None);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_field_def(&mut self, struct_field: &'tcx hir::FieldDef<'tcx>) {\n-        self.check_attributes(struct_field.hir_id, struct_field.span, Target::Field, None);\n+        self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);\n         intravisit::walk_field_def(self, struct_field);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n-        self.check_attributes(arm.hir_id, arm.span, Target::Arm, None);\n+        self.check_attributes(arm.hir_id, &arm.span, Target::Arm, None);\n         intravisit::walk_arm(self, arm);\n     }\n \n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n             f_item.hir_id(),\n-            f_item.span,\n+            &f_item.span,\n             target,\n             Some(ItemLike::ForeignItem(f_item)),\n         );\n@@ -1871,14 +1849,14 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = target_from_impl_item(self.tcx, impl_item);\n-        self.check_attributes(impl_item.hir_id(), impl_item.span, target, None);\n+        self.check_attributes(impl_item.hir_id(), &impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n-            self.check_attributes(l.hir_id, stmt.span, Target::Statement, None);\n+            self.check_attributes(l.hir_id, &stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)\n     }\n@@ -1889,7 +1867,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n             _ => Target::Expression,\n         };\n \n-        self.check_attributes(expr.hir_id, expr.span, target, None);\n+        self.check_attributes(expr.hir_id, &expr.span, target, None);\n         intravisit::walk_expr(self, expr)\n     }\n \n@@ -1899,12 +1877,12 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         generics: &'tcx hir::Generics<'tcx>,\n         item_id: HirId,\n     ) {\n-        self.check_attributes(variant.id, variant.span, Target::Variant, None);\n+        self.check_attributes(variant.id, &variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.check_attributes(param.hir_id, param.span, Target::Param, None);\n+        self.check_attributes(param.hir_id, &param.span, Target::Param, None);\n \n         intravisit::walk_param(self, param);\n     }\n@@ -1972,7 +1950,7 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut check_attr_visitor.as_deep_visitor());\n     if module_def_id.is_top_level_module() {\n-        check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n+        check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n }"}, {"sha": "4adec3c4f608d78e93c412ccb6a5476a370fad7d", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -14,7 +14,6 @@\n #![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "fa34b9abc1e6c9314288ae045f6d1e71dde8ec03", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -5,7 +5,6 @@\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::MacroDef;\n use rustc_attr as attr;"}, {"sha": "440b6f1983e6eee7d8e7cbfcf3784268412de789", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -8,7 +8,6 @@\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "1b992cdb0c94b2f0a3fbc7c491aa3bfc2fecff08", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -6,7 +6,6 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "23eb2d1aebb7ce9be13f8f2720b50cc0969f69d2", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -20,7 +20,6 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "543cd0247a53daecd9400c4b4711a6232c54578a", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -2,7 +2,6 @@\n #![feature(if_let_guard)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod dump_visitor;\n mod dumper;"}, {"sha": "6c86f86ecd9bb210a4d71b1d7eca891bd44a52ec", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -2,7 +2,6 @@\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "032ae73bbf3c61fe503de4442584f5fc658a0e2b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -21,7 +21,6 @@\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "1b4315896321f9fc77b2302c8432dfc985a65254", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -1115,7 +1115,6 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_legacy_const_generics,\n-        rustc_lint_query_instability,\n         rustc_macro_transparency,\n         rustc_main,\n         rustc_mir,"}, {"sha": "bb7b4529556091923e6c947750e1fa1a0c6fa8df", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -93,7 +93,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "1a049e6ec649da4bcd0c63408e40b7e5106f6d0a", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -22,7 +22,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "ac4bb652244864e3e1b873f289afdf08766f54fa", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -830,7 +830,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.type_of(def_id)\n         };\n         let substs = self.infcx.fresh_substs_for_item(span, def_id);\n-        self.write_substs(hir_id, substs);\n         let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));"}, {"sha": "017e7ad8ca74a83f6620b2f31a2df6b43c3471b3", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -71,7 +71,6 @@ This API is completely unstable and subject to change.\n #![feature(slice_partition_dedup)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "01019344f4f67b2dff83edcee55e9b18acd1495c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -414,7 +414,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter { base: self.base.iter() }\n@@ -443,7 +442,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut { base: self.base.iter_mut() }\n@@ -504,7 +502,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, K, V> {\n         Drain { base: self.base.drain() }\n@@ -546,7 +543,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, K, V, F>\n     where\n@@ -953,7 +949,6 @@ where\n     /// assert_eq!(map.len(), 4);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -983,7 +978,6 @@ where\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -1010,7 +1004,6 @@ where\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n@@ -1976,7 +1969,6 @@ impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type IntoIter = Iter<'a, K, V>;\n \n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, K, V> {\n         self.iter()\n     }\n@@ -1988,7 +1980,6 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S> {\n     type IntoIter = IterMut<'a, K, V>;\n \n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n@@ -2017,7 +2008,6 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "546c43faecfdc6f5f3bbc5b15d16028bcfdd5361", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3215eeb99f055e4c00bc66c2b424e49f5868811b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3215eeb99f055e4c00bc66c2b424e49f5868811b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=3215eeb99f055e4c00bc66c2b424e49f5868811b", "patch": "@@ -185,7 +185,6 @@ impl<T, S> HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n         Iter { base: self.base.iter() }\n@@ -245,7 +244,6 @@ impl<T, S> HashSet<T, S> {\n     /// assert!(set.is_empty());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { base: self.base.drain() }\n@@ -284,7 +282,6 @@ impl<T, S> HashSet<T, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, T, F>\n     where\n@@ -509,7 +506,6 @@ where\n     /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference { iter: self.iter(), other }\n@@ -537,7 +533,6 @@ where\n     /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(\n         &'a self,\n@@ -565,7 +560,6 @@ where\n     /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -594,7 +588,6 @@ where\n     /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n         if self.len() >= other.len() {\n@@ -929,7 +922,6 @@ where\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -1411,7 +1403,6 @@ impl<'a, T, S> IntoIterator for &'a HashSet<T, S> {\n     type IntoIter = Iter<'a, T>;\n \n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n@@ -1443,7 +1434,6 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "560675b448608a31ef1130b38e476afa69fec9d9", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs?ref=f2707fec04f655cdf18388618881748ebbd683e9", "patch": "@@ -1,24 +0,0 @@\n-// compile-flags: -Z unstable-options\n-\n-#![feature(rustc_private)]\n-#![deny(rustc::potential_query_instability)]\n-\n-extern crate rustc_data_structures;\n-\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-\n-fn main() {\n-    let mut x = FxHashMap::<u32, i32>::default();\n-\n-    for _ in x.drain() {}\n-    //~^ ERROR using `drain` can result in unstable\n-\n-    for _ in x.iter() {}\n-    //~^ ERROR using `iter`\n-\n-    for _ in Some(&mut x).unwrap().iter_mut() {}\n-    //~^ ERROR using `iter_mut`\n-\n-    for _ in x {}\n-    //~^ ERROR using `into_iter`\n-}"}, {"sha": "7e8b448f41a9119911d9f5bd8a7ec58a5fcc7b95", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr?ref=f2707fec04f655cdf18388618881748ebbd683e9", "patch": "@@ -1,39 +0,0 @@\n-error: using `drain` can result in unstable query results\n-  --> $DIR/query_stability.rs:13:16\n-   |\n-LL |     for _ in x.drain() {}\n-   |                ^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/query_stability.rs:4:9\n-   |\n-LL | #![deny(rustc::potential_query_instability)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n-\n-error: using `iter` can result in unstable query results\n-  --> $DIR/query_stability.rs:16:16\n-   |\n-LL |     for _ in x.iter() {}\n-   |                ^^^^\n-   |\n-   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n-\n-error: using `iter_mut` can result in unstable query results\n-  --> $DIR/query_stability.rs:19:36\n-   |\n-LL |     for _ in Some(&mut x).unwrap().iter_mut() {}\n-   |                                    ^^^^^^^^\n-   |\n-   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n-\n-error: using `into_iter` can result in unstable query results\n-  --> $DIR/query_stability.rs:22:14\n-   |\n-LL |     for _ in x {}\n-   |              ^\n-   |\n-   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "f478b73329eb76f0e446594dc32a85142e000470", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs?ref=f2707fec04f655cdf18388618881748ebbd683e9", "patch": "@@ -1,15 +0,0 @@\n-// compile-flags: -Z unstable-options\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_lint_query_instability]\n-//~^ ERROR attribute should be applied to a function\n-struct Foo;\n-\n-impl Foo {\n-    #[rustc_lint_query_instability(a)]\n-    //~^ ERROR malformed `rustc_lint_query_instability`\n-    fn bar() {}\n-}\n-\n-fn main() {}"}, {"sha": "b5156f2ac5905551077f73b3265e75c7d5d14410", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2707fec04f655cdf18388618881748ebbd683e9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr?ref=f2707fec04f655cdf18388618881748ebbd683e9", "patch": "@@ -1,17 +0,0 @@\n-error: malformed `rustc_lint_query_instability` attribute input\n-  --> $DIR/query_stability_incorrect.rs:10:5\n-   |\n-LL |     #[rustc_lint_query_instability(a)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_lint_query_instability]`\n-\n-error: attribute should be applied to a function\n-  --> $DIR/query_stability_incorrect.rs:5:1\n-   |\n-LL | #[rustc_lint_query_instability]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |\n-LL | struct Foo;\n-   | ----------- not a function\n-\n-error: aborting due to 2 previous errors\n-"}]}