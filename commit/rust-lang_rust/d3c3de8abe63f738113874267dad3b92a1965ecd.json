{"sha": "d3c3de8abe63f738113874267dad3b92a1965ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzNkZThhYmU2M2Y3MzgxMTM4NzQyNjdkYWQzYjkyYTE5NjVlY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-13T02:38:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-13T02:38:46Z"}, "message": "Auto merge of #35138 - petrochenkov:clarify, r=eddyb\n\nImplement RFC 1506 \"Clarify the relationships between various kinds of structs and variants\"\n\ncc https://github.com/rust-lang/rust/issues/35626", "tree": {"sha": "7aee211940151fc16238ee0169d92381bdff2313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aee211940151fc16238ee0169d92381bdff2313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c3de8abe63f738113874267dad3b92a1965ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c3de8abe63f738113874267dad3b92a1965ecd", "html_url": "https://github.com/rust-lang/rust/commit/d3c3de8abe63f738113874267dad3b92a1965ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c3de8abe63f738113874267dad3b92a1965ecd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a", "html_url": "https://github.com/rust-lang/rust/commit/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a"}, {"sha": "f6624782d41dce401a4103240daa06011ed326a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6624782d41dce401a4103240daa06011ed326a5", "html_url": "https://github.com/rust-lang/rust/commit/f6624782d41dce401a4103240daa06011ed326a5"}], "stats": {"total": 548, "additions": 330, "deletions": 218}, "files": [{"sha": "1e8da29ee74002bbd5f37b5ead3935d08c62382c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -197,27 +197,6 @@ impl<'a> Visitor for AstValidator<'a> {\n         visit::walk_foreign_item(self, fi)\n     }\n \n-    fn visit_variant_data(&mut self,\n-                          vdata: &VariantData,\n-                          _: Ident,\n-                          _: &Generics,\n-                          _: NodeId,\n-                          span: Span) {\n-        if vdata.fields().is_empty() {\n-            if vdata.is_tuple() {\n-                self.err_handler()\n-                    .struct_span_err(span,\n-                                     \"empty tuple structs and enum variants are not allowed, use \\\n-                                      unit structs and enum variants instead\")\n-                    .span_help(span,\n-                               \"remove trailing `()` to make a unit struct or unit enum variant\")\n-                    .emit();\n-            }\n-        }\n-\n-        visit::walk_struct_def(self, vdata)\n-    }\n-\n     fn visit_vis(&mut self, vis: &Visibility) {\n         match *vis {\n             Visibility::Restricted { ref path, .. } => {"}, {"sha": "0c8e6d990a64443f08cb6e5c24c64cda5d6dd153", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -116,6 +116,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Spanned};\n+use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::{self, InternedString, keywords};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -1700,7 +1701,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                  node_id: ast::NodeId)\n                                  -> Ty<'tcx> {\n         debug!(\"instantiate_type_path(did={:?}, path={:?})\", did, path);\n-        let type_scheme = self.tcx.lookup_item_type(did);\n+        let mut type_scheme = self.tcx.lookup_item_type(did);\n+        if type_scheme.ty.is_fn() {\n+            // Tuple variants have fn type even in type namespace, extract true variant type from it\n+            let fn_ret = self.tcx.no_late_bound_regions(&type_scheme.ty.fn_ret()).unwrap().unwrap();\n+            type_scheme = ty::TypeScheme { ty: fn_ret, generics: type_scheme.generics }\n+        }\n         let type_predicates = self.tcx.lookup_predicates(did);\n         let substs = AstConv::ast_path_substs_for_ty(self, self,\n                                                      path.span,\n@@ -3244,19 +3250,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             _ => None\n         };\n-        if variant.is_none() || variant.unwrap().kind == ty::VariantKind::Tuple {\n-            // Reject tuple structs for now, braced and unit structs are allowed.\n+\n+        if let Some(variant) = variant {\n+            if variant.kind == ty::VariantKind::Tuple &&\n+                    !self.tcx.sess.features.borrow().relaxed_adts {\n+                emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n+                                 \"relaxed_adts\", span, GateIssue::Language,\n+                                 \"tuple structs and variants in struct patterns are unstable\");\n+            }\n+            let ty = self.instantiate_type_path(def.def_id(), path, node_id);\n+            Some((variant, ty))\n+        } else {\n             struct_span_err!(self.tcx.sess, path.span, E0071,\n                              \"`{}` does not name a struct or a struct variant\",\n                              pprust::path_to_string(path))\n                 .span_label(path.span, &format!(\"not a struct\"))\n                 .emit();\n-\n-            return None;\n+            None\n         }\n-\n-        let ty = self.instantiate_type_path(def.def_id(), path, node_id);\n-        Some((variant.unwrap(), ty))\n     }\n \n     fn check_expr_struct(&self,"}, {"sha": "ad52184a6dcb0cd658cb607b31fc5a97352ad3b6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -280,7 +280,11 @@ declare_features! (\n     (active, dotdot_in_tuple_patterns, \"1.10.0\", Some(33627)),\n \n     // Allows `impl Trait` in function return types.\n-    (active, conservative_impl_trait, \"1.12.0\", Some(34511))\n+    (active, conservative_impl_trait, \"1.12.0\", Some(34511)),\n+\n+    // Allows tuple structs and variants in more contexts,\n+    // Permits numeric fields in struct expressions and patterns.\n+    (active, relaxed_adts, \"1.12.0\", Some(35626))\n );\n \n declare_features! (\n@@ -1022,9 +1026,8 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n             }\n             PatKind::TupleStruct(_, ref fields, ddpos)\n                     if ddpos.is_none() && fields.is_empty() => {\n-                self.context.span_handler.struct_span_err(pattern.span,\n-                                                          \"nullary enum variants are written with \\\n-                                                           no trailing `( )`\").emit();\n+                gate_feature_post!(&self, relaxed_adts, pattern.span,\n+                                   \"empty tuple structs patterns are unstable\");\n             }\n             _ => {}\n         }\n@@ -1107,6 +1110,19 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n         visit::walk_impl_item(self, ii);\n     }\n \n+    fn visit_variant_data(&mut self, vdata: &ast::VariantData, _: ast::Ident,\n+                          _: &ast::Generics, _: NodeId, span: Span) {\n+        if vdata.fields().is_empty() {\n+            if vdata.is_tuple() {\n+                gate_feature_post!(&self, relaxed_adts, span,\n+                                   \"empty tuple structs and enum variants are unstable, \\\n+                                    use unit structs and enum variants instead\");\n+            }\n+        }\n+\n+        visit::walk_struct_def(self, vdata)\n+    }\n+\n     fn visit_vis(&mut self, vis: &ast::Visibility) {\n         let span = match *vis {\n             ast::Visibility::Crate(span) => span,"}, {"sha": "4c279b2fe48327dfda1f94e746d1ec445bba6e28", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -2009,10 +2009,19 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    pub fn parse_field_name(&mut self) -> PResult<'a, Ident> {\n+        if let token::Literal(token::Integer(name), None) = self.token {\n+            self.bump();\n+            Ok(Ident::with_empty_ctxt(name))\n+        } else {\n+            self.parse_ident()\n+        }\n+    }\n+\n     /// Parse ident COLON expr\n     pub fn parse_field(&mut self) -> PResult<'a, Field> {\n         let lo = self.span.lo;\n-        let i = self.parse_ident()?;\n+        let i = self.parse_field_name()?;\n         let hi = self.last_span.hi;\n         self.expect(&token::Colon)?;\n         let e = self.parse_expr()?;\n@@ -3508,7 +3517,7 @@ impl<'a> Parser<'a> {\n             // Check if a colon exists one ahead. This means we're parsing a fieldname.\n             let (subpat, fieldname, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n                 // Parsing a pattern of the form \"fieldname: pat\"\n-                let fieldname = self.parse_ident()?;\n+                let fieldname = self.parse_field_name()?;\n                 self.bump();\n                 let pat = self.parse_pat()?;\n                 hi = pat.span.hi;"}, {"sha": "c13ba7bf136712efd1cb50732de9e8a36b81688e", "filename": "src/test/compile-fail/E0071.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2FE0071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2FE0071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0071.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo { FirstValue(i32) }\n+enum Foo {}\n \n fn main() {\n-    let u = Foo::FirstValue { value: 0 };\n-    //~^ ERROR `Foo::FirstValue` does not name a struct or a struct variant [E0071]\n+    let u = Foo { value: 0 };\n+    //~^ ERROR `Foo` does not name a struct or a struct variant [E0071]\n     //~| NOTE not a struct\n \n     let t = u32 { value: 4 };"}, {"sha": "dcbb0ce178bd8c487df447ee0124c0e535de5a6a", "filename": "src/test/compile-fail/auxiliary/empty-struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fempty-struct.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(relaxed_adts)]\n+\n pub struct XEmpty1 {}\n pub struct XEmpty2;\n+pub struct XEmpty6();\n \n pub enum XE {\n     XEmpty3 {},\n     XEmpty4,\n+    XEmpty5(),\n }"}, {"sha": "52481517ce7512ca5289ac5eda9ed3cafd49da7d", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -12,6 +12,8 @@\n \n // aux-build:empty-struct.rs\n \n+#![feature(relaxed_adts)]\n+\n extern crate empty_struct;\n use empty_struct::*;\n \n@@ -21,13 +23,12 @@ fn main() {\n     let e1 = Empty1 {};\n     let xe1 = XEmpty1 {};\n \n-    // Rejected by parser as yet\n-    // match e1 {\n-    //     Empty1() => () // ERROR unresolved enum variant, struct or const `Empty1`\n-    // }\n-    // match xe1 {\n-    //     XEmpty1() => () // ERROR unresolved enum variant, struct or const `XEmpty1`\n-    // }\n+    match e1 {\n+        Empty1() => () //~ ERROR unresolved variant or struct `Empty1`\n+    }\n+    match xe1 {\n+        XEmpty1() => () //~ ERROR unresolved variant or struct `XEmpty1`\n+    }\n     match e1 {\n         Empty1(..) => () //~ ERROR unresolved variant or struct `Empty1`\n     }"}, {"sha": "cb859fe7501c677f7cf1232a7fb31a721f19e47e", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -12,6 +12,8 @@\n \n // aux-build:empty-struct.rs\n \n+#![feature(relaxed_adts)]\n+\n extern crate empty_struct;\n use empty_struct::*;\n \n@@ -23,13 +25,12 @@ fn main() {\n     let e3 = E::Empty3 {};\n     let xe3 = XE::XEmpty3 {};\n \n-    // Rejected by parser as yet\n-    // match e3 {\n-    //     E::Empty3() => () // ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n-    // }\n-    // match xe3 {\n-    //     E::Empty3() => () // ERROR `XE::XEmpty3` does not name a tuple variant or a tuple struct\n-    // }\n+    match e3 {\n+        E::Empty3() => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n+    }\n+    match xe3 {\n+        XE::XEmpty3() => () //~ ERROR `XE::XEmpty3` does not name a tuple variant or a tuple struct\n+    }\n     match e3 {\n         E::Empty3(..) => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n     }"}, {"sha": "be90e3b26c7efdba11d53795a84cae383b1a3ac0", "filename": "src/test/compile-fail/empty-struct-tuple-pat.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use unit struct as enum pattern\n+\n+// aux-build:empty-struct.rs\n+\n+#![feature(relaxed_adts)]\n+\n+extern crate empty_struct;\n+use empty_struct::*;\n+\n+struct Empty2();\n+\n+enum E {\n+    Empty4()\n+}\n+\n+// remove attribute after warning cycle and promoting warnings to errors\n+fn main() {\n+    let e2 = Empty2();\n+    let e4 = E::Empty4();\n+    let xe6 = XEmpty6();\n+    let xe5 = XE::XEmpty5();\n+\n+    match e2 {\n+        Empty2 => () //~ ERROR `Empty2` does not name a unit variant, unit struct or a constant\n+    }\n+    match xe6 {\n+        XEmpty6 => () //~ ERROR `XEmpty6` does not name a unit variant, unit struct or a constant\n+    }\n+\n+    match e4 {\n+        E::Empty4 => () //~ ERROR `E::Empty4` does not name a unit variant, unit struct or a\n+    }\n+    match xe5 {\n+        XE::XEmpty5 => (), //~ ERROR `XE::XEmpty5` does not name a unit variant, unit struct or a\n+        _ => {},\n+    }\n+}"}, {"sha": "aec4ad4cad401a867a1eb22d482a945b03096fa1", "filename": "src/test/compile-fail/empty-struct-unit-pat-1.rs", "status": "renamed", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-1.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -12,6 +12,8 @@\n \n // aux-build:empty-struct.rs\n \n+#![feature(relaxed_adts)]\n+\n extern crate empty_struct;\n use empty_struct::*;\n \n@@ -28,13 +30,6 @@ fn main() {\n     let xe2 = XEmpty2;\n     let xe4 = XE::XEmpty4;\n \n-    // Rejected by parser as yet\n-    // match e2 {\n-    //     Empty2() => () // ERROR `Empty2` does not name a tuple variant or a tuple struct\n-    // }\n-    // match xe2 {\n-    //     XEmpty2() => () // ERROR `XEmpty2` does not name a tuple variant or a tuple struct\n-    // }\n     match e2 {\n         Empty2(..) => () //~ ERROR `Empty2` does not name a tuple variant or a tuple struct\n             //~^ WARNING hard error\n@@ -43,14 +38,7 @@ fn main() {\n         XEmpty2(..) => () //~ ERROR `XEmpty2` does not name a tuple variant or a tuple struct\n             //~^ WARNING hard error\n     }\n-    // Rejected by parser as yet\n-    // match e4 {\n-    //     E::Empty4() => () // ERROR `E::Empty4` does not name a tuple variant or a tuple struct\n-    // }\n-    // match xe4 {\n-    //     XE::XEmpty4() => (), // ERROR `XE::XEmpty4` does not name a tuple variant or a tuple\n-    //     _ => {},\n-    // }\n+\n     match e4 {\n         E::Empty4(..) => () //~ ERROR `E::Empty4` does not name a tuple variant or a tuple struct\n             //~^ WARNING hard error", "previous_filename": "src/test/compile-fail/empty-struct-unit-pat.rs"}, {"sha": "6375a7f23381ec85f60f733589212a3fde5740af", "filename": "src/test/compile-fail/empty-struct-unit-pat-2.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use unit struct as enum pattern\n+\n+// aux-build:empty-struct.rs\n+\n+#![feature(relaxed_adts)]\n+\n+extern crate empty_struct;\n+use empty_struct::*;\n+\n+struct Empty2;\n+\n+enum E {\n+    Empty4\n+}\n+\n+// remove attribute after warning cycle and promoting warnings to errors\n+fn main() {\n+    let e2 = Empty2;\n+    let e4 = E::Empty4;\n+    let xe2 = XEmpty2;\n+    let xe4 = XE::XEmpty4;\n+\n+    match e2 {\n+        Empty2() => () //~ ERROR `Empty2` does not name a tuple variant or a tuple struct\n+    }\n+    match xe2 {\n+        XEmpty2() => () //~ ERROR `XEmpty2` does not name a tuple variant or a tuple struct\n+    }\n+\n+    match e4 {\n+        E::Empty4() => () //~ ERROR `E::Empty4` does not name a tuple variant or a tuple struct\n+    }\n+    match xe4 {\n+        XE::XEmpty4() => (), //~ ERROR `XE::XEmpty4` does not name a tuple variant or a tuple\n+        _ => {},\n+    }\n+}"}, {"sha": "a75f2647f49a4d3fd324c84700c127629819f927", "filename": "src/test/compile-fail/feature-gate-relaxed-adts-2.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts-2.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Z(u8, u8);\n+\n+enum E {\n+    U(u8, u8),\n+}\n+\n+fn main() {\n+    match Z(0, 1) {\n+        Z{..} => {} //~ ERROR tuple structs and variants in struct patterns are unstable\n+    }\n+    match E::U(0, 1) {\n+        E::U{..} => {} //~ ERROR tuple structs and variants in struct patterns are unstable\n+    }\n+\n+    let z1 = Z(0, 1);\n+    let z2 = Z { ..z1 }; //~ ERROR tuple structs and variants in struct patterns are unstable\n+}"}, {"sha": "dc5e347aadf3074a9d3b4b8927a48452afc47d9d", "filename": "src/test/compile-fail/feature-gate-relaxed-adts.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(); //~ ERROR empty tuple structs and enum variants are unstable\n+struct Z(u8, u8);\n+\n+enum E {\n+    V(), //~ ERROR empty tuple structs and enum variants are unstable\n+    U(u8, u8),\n+}\n+\n+fn main() {\n+    match S() {\n+        S() => {} //~ ERROR empty tuple structs patterns are unstable\n+    }\n+    match E::V() {\n+        E::V() => {} //~ ERROR empty tuple structs patterns are unstable\n+    }\n+}"}, {"sha": "80f551ebd1f7c9b2962db0c6df0cfc6fa7bcecf2", "filename": "src/test/compile-fail/issue-12560-1.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs?ref=1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// For style and consistency reasons, non-parametrized enum variants must\n-// be used simply as `ident` instead of `ident ()`.\n-// This test-case covers enum declaration.\n-\n-enum Foo {\n-    Bar(), //~ ERROR empty tuple structs and enum variants are not allowed\n-    //~^ HELP remove trailing `()` to make a unit struct or unit enum variant\n-    Baz(), //~ ERROR empty tuple structs and enum variants are not allowed\n-    //~^ HELP remove trailing `()` to make a unit struct or unit enum variant\n-    Bazar\n-}\n-\n-fn main() {\n-    println!(\"{}\", match Bar { Bar => 1, Baz => 2, Bazar => 3 }) //~ ERROR unresolved name `Bar`\n-}"}, {"sha": "9cbe2ebffe694eaf83a117d224ad3df92870072e", "filename": "src/test/compile-fail/issue-12560-2.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Fcompile-fail%2Fissue-12560-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Fcompile-fail%2Fissue-12560-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12560-2.rs?ref=1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z continue-parse-after-error\n-\n-// For style and consistency reasons, non-parametrized enum variants must\n-// be used simply as `ident` instead of `ident ()`.\n-// This test-case covers enum matching.\n-\n-enum Foo {\n-    Bar,\n-    Baz,\n-    Bazar\n-}\n-\n-fn main() {\n-    println!(\"{}\", match Bar {\n-        Bar() => 1, //~ ERROR nullary enum variants are written with no trailing `( )`\n-        Baz() => 2, //~ ERROR nullary enum variants are written with no trailing `( )`\n-        Bazar => 3\n-    })\n-}"}, {"sha": "4301b47f2e9b29ce956f8450d3d69c4fc543bccf", "filename": "src/test/compile-fail/issue-16819.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct TS ( //~ ERROR empty tuple structs and enum variants are not allowed\n+struct TS ( //~ ERROR empty tuple structs and enum variants are unstable\n     #[cfg(untrue)]\n     i32,\n );\n \n enum E {\n-    TV ( //~ ERROR empty tuple structs and enum variants are not allowed\n+    TV ( //~ ERROR empty tuple structs and enum variants are unstable\n         #[cfg(untrue)]\n         i32,\n     )"}, {"sha": "58d580a5c1a1ceb6ecf9b8d257e7f55b4a714f46", "filename": "src/test/compile-fail/issue-17800.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(relaxed_adts)]\n+\n enum MyOption<T> {\n     MySome(T),\n     MyNone,\n@@ -16,7 +18,8 @@ enum MyOption<T> {\n fn main() {\n     match MyOption::MySome(42) {\n         MyOption::MySome { x: 42 } => (),\n-        //~^ ERROR `MyOption::MySome` does not name a struct or a struct variant\n+        //~^ ERROR struct `MyOption::MySome` does not have a field named `x`\n+        //~| ERROR pattern does not mention field `0`\n         _ => (),\n     }\n }"}, {"sha": "e20e6ea23198cd3c885fa4bea2d8d90ec4a94567", "filename": "src/test/compile-fail/issue-27831.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs?ref=1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Foo(u32);\n-struct Bar;\n-\n-enum Enum {\n-    Foo(u32),\n-    Bar\n-}\n-\n-fn main() {\n-    let x = Foo(1);\n-    Foo { ..x }; //~ ERROR `Foo` does not name a struct or a struct variant\n-    let Foo { .. } = x; //~ ERROR `Foo` does not name a struct\n-\n-    let x = Bar;\n-    Bar { ..x };\n-    let Bar { .. } = x;\n-\n-    match Enum::Bar {\n-        Enum::Bar { .. }\n-           => {}\n-        Enum::Foo { .. } //~ ERROR `Enum::Foo` does not name a struct\n-           => {}\n-    }\n-}"}, {"sha": "a8a1b1482fc08b4ad0e69473d22679e32e9bdc08", "filename": "src/test/compile-fail/issue-4736.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(relaxed_adts)]\n+\n struct NonCopyable(());\n \n fn main() {\n-    let z = NonCopyable{ p: () }; //~ ERROR `NonCopyable` does not name a struct or a struct variant\n+    let z = NonCopyable{ p: () }; //~ ERROR structure `NonCopyable` has no field named `p`\n }"}, {"sha": "480d2dcddddd45879cbd60da493605b93d63e5f2", "filename": "src/test/compile-fail/numeric-fields.rs", "status": "renamed", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo(); //~ ERROR empty tuple structs and enum variants are not allowed\n+#![feature(relaxed_adts)]\n \n-fn main() {}\n+struct S(u8, u16);\n+\n+fn main() {\n+    let s = S{0b1: 10, 0: 11}; //~ ERROR structure `S` has no field named `0b1`\n+    match s {\n+        S{0: a, 0x1: b, ..} => {} //~ ERROR does not have a field named `0x1`\n+    }\n+}", "previous_filename": "src/test/compile-fail/struct-no-fields-enumlike.rs"}, {"sha": "b599d7bee73defca8eb7261063c7ebcde99bf465", "filename": "src/test/run-pass/auxiliary/empty-struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Frun-pass%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Frun-pass%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fempty-struct.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(relaxed_adts)]\n+\n pub struct XEmpty1 {}\n pub struct XEmpty2;\n+pub struct XEmpty7();\n \n pub enum XE {\n     XEmpty3 {},\n     XEmpty4,\n+    XEmpty6(),\n }"}, {"sha": "0ec3c89859e62a1afa41b9f6b54e957443bfb90b", "filename": "src/test/run-pass/empty-struct-braces-gate-2.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-2.rs?ref=1deb02ea69a7ca3fd8011a45bb75ff22c3f7579a", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Feature gate test for empty struct with braces\n-// Can't use braced expressions and patterns with structs defined without braces\n-\n-struct Empty2;\n-\n-enum E {\n-    Empty5,\n-}\n-\n-fn main() {\n-    let e2: Empty2 = Empty2 {};\n-    let e2: Empty2 = Empty2;\n-    let e5: E = E::Empty5 {};\n-    let e5: E = E::Empty5;\n-\n-    match e2 {\n-        Empty2 {} => {}\n-    }\n-    match e2 {\n-        Empty2 => {}\n-    }\n-    match e2 {\n-        Empty2 { .. } => {}\n-    }\n-    match e5 {\n-        E::Empty5 {} => {}\n-    }\n-    match e5 {\n-        E::Empty5 => {}\n-    }\n-    match e5 {\n-        E::Empty5 { .. } => {}\n-    }\n-\n-    let e22 = Empty2 { ..e2 };\n-}"}, {"sha": "48966f24a2e5eca4afead2914955c92cf5ed0a94", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -13,11 +13,14 @@\n \n // aux-build:empty-struct.rs\n \n+#![feature(relaxed_adts)]\n+\n extern crate empty_struct;\n use empty_struct::*;\n \n struct Empty1 {}\n struct Empty2;\n+struct Empty7();\n \n #[derive(PartialEq, Eq)]\n struct Empty3 {}\n@@ -27,6 +30,7 @@ const Empty3: Empty3 = Empty3 {};\n enum E {\n     Empty4 {},\n     Empty5,\n+    Empty6(),\n }\n \n fn local() {\n@@ -38,6 +42,12 @@ fn local() {\n     let e4: E = E::Empty4 {};\n     let e5: E = E::Empty5 {};\n     let e5: E = E::Empty5;\n+    let e6: E = E::Empty6 {};\n+    let e6: E = E::Empty6();\n+    let ctor6: fn() -> E = E::Empty6;\n+    let e7: Empty7 = Empty7 {};\n+    let e7: Empty7 = Empty7();\n+    let ctor7: fn() -> Empty7 = Empty7;\n \n     match e1 {\n         Empty1 {} => {}\n@@ -56,6 +66,13 @@ fn local() {\n         E::Empty5 {} => {}\n         _ => {}\n     }\n+    match e6 {\n+        E::Empty6 {} => {}\n+        _ => {}\n+    }\n+    match e7 {\n+        Empty7 {} => {}\n+    }\n \n     match e1 {\n         Empty1 { .. } => {}\n@@ -74,6 +91,13 @@ fn local() {\n         E::Empty5 { .. } => {}\n         _ => {}\n     }\n+    match e6 {\n+        E::Empty6 { .. } => {}\n+        _ => {}\n+    }\n+    match e7 {\n+        Empty7 { .. } => {}\n+    }\n \n     match e2 {\n         Empty2 => {}\n@@ -85,10 +109,25 @@ fn local() {\n         E::Empty5 => {}\n         _ => {}\n     }\n+    match e6 {\n+        E::Empty6() => {}\n+        _ => {}\n+    }\n+    match e6 {\n+        E::Empty6(..) => {}\n+        _ => {}\n+    }\n+    match e7 {\n+        Empty7() => {}\n+    }\n+    match e7 {\n+        Empty7(..) => {}\n+    }\n \n     let e11: Empty1 = Empty1 { ..e1 };\n     let e22: Empty2 = Empty2 { ..e2 };\n     let e33: Empty3 = Empty3 { ..e3 };\n+    let e77: Empty7 = Empty7 { ..e7 };\n }\n \n fn xcrate() {\n@@ -98,6 +137,12 @@ fn xcrate() {\n     let e3: XE = XE::XEmpty3 {};\n     let e4: XE = XE::XEmpty4 {};\n     let e4: XE = XE::XEmpty4;\n+    let e6: XE = XE::XEmpty6 {};\n+    let e6: XE = XE::XEmpty6();\n+    let ctor6: fn() -> XE = XE::XEmpty6;\n+    let e7: XEmpty7 = XEmpty7 {};\n+    let e7: XEmpty7 = XEmpty7();\n+    let ctor7: fn() -> XEmpty7 = XEmpty7;\n \n     match e1 {\n         XEmpty1 {} => {}\n@@ -113,6 +158,13 @@ fn xcrate() {\n         XE::XEmpty4 {} => {}\n         _ => {}\n     }\n+    match e6 {\n+        XE::XEmpty6 {} => {}\n+        _ => {}\n+    }\n+    match e7 {\n+        XEmpty7 {} => {}\n+    }\n \n     match e1 {\n         XEmpty1 { .. } => {}\n@@ -128,6 +180,13 @@ fn xcrate() {\n         XE::XEmpty4 { .. } => {}\n         _ => {}\n     }\n+    match e6 {\n+        XE::XEmpty6 { .. } => {}\n+        _ => {}\n+    }\n+    match e7 {\n+        XEmpty7 { .. } => {}\n+    }\n \n     match e2 {\n         XEmpty2 => {}\n@@ -136,9 +195,24 @@ fn xcrate() {\n         XE::XEmpty4 => {}\n         _ => {}\n     }\n+    match e6 {\n+        XE::XEmpty6() => {}\n+        _ => {}\n+    }\n+    match e6 {\n+        XE::XEmpty6(..) => {}\n+        _ => {}\n+    }\n+    match e7 {\n+        XEmpty7() => {}\n+    }\n+    match e7 {\n+        XEmpty7(..) => {}\n+    }\n \n     let e11: XEmpty1 = XEmpty1 { ..e1 };\n     let e22: XEmpty2 = XEmpty2 { ..e2 };\n+    let e77: XEmpty7 = XEmpty7 { ..e7 };\n }\n \n fn main() {"}, {"sha": "25e5a2a0fd5baeef69214cfce9b28f40a805cdc0", "filename": "src/test/run-pass/numeric-fields.rs", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Frun-pass%2Fnumeric-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c3de8abe63f738113874267dad3b92a1965ecd/src%2Ftest%2Frun-pass%2Fnumeric-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-fields.rs?ref=d3c3de8abe63f738113874267dad3b92a1965ecd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Feature gate test for empty struct with braces\n-// Can't define an empty braced struct\n+#![feature(relaxed_adts)]\n \n-struct Empty1 {}\n-struct Empty2;\n-\n-enum E {\n-    Empty4 {},\n-    Empty5,\n-}\n+struct S(u8, u16);\n \n fn main() {\n+    let s = S{1: 10, 0: 11};\n+    match s {\n+        S{0: a, 1: b, ..} => {\n+            assert_eq!(a, 11);\n+            assert_eq!(b, 10);\n+        }\n+    }\n }", "previous_filename": "src/test/run-pass/empty-struct-braces-gate-1.rs"}]}