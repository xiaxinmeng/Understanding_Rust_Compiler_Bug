{"sha": "ffd3070cc9ea6d845865f11d70c220da40720d7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDMwNzBjYzllYTZkODQ1ODY1ZjExZDcwYzIyMGRhNDA3MjBkN2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-23T23:59:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-02-06T16:43:37Z"}, "message": "Clean our src/etc of old files\n\nSome of these have long since expired, some are no longer in use now that we've\njettisoned the makefiles, but none of them should be needed any more.", "tree": {"sha": "e02a60901dca74b25cd58152975c5382a8ebe84b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e02a60901dca74b25cd58152975c5382a8ebe84b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd3070cc9ea6d845865f11d70c220da40720d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd3070cc9ea6d845865f11d70c220da40720d7e", "html_url": "https://github.com/rust-lang/rust/commit/ffd3070cc9ea6d845865f11d70c220da40720d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd3070cc9ea6d845865f11d70c220da40720d7e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c3bfa7429abf87b76ba84108df018d9e9d90e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c3bfa7429abf87b76ba84108df018d9e9d90e2", "html_url": "https://github.com/rust-lang/rust/commit/77c3bfa7429abf87b76ba84108df018d9e9d90e2"}], "stats": {"total": 520, "additions": 0, "deletions": 520}, "files": [{"sha": "83d54789ff3572a12b8ec6ae4ade1c6fa9d638a0", "filename": "src/etc/Dockerfile", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,27 +0,0 @@\n-FROM ubuntu:xenial\n-\n-# curl\n-#   Download stage0, see src/bootstrap/bootstrap.py\n-# g++\n-#   Compile LLVM binding in src/rustllvm\n-# gdb\n-#   Used to run tests in src/test/debuginfo\n-# git\n-#   Get commit hash and commit date in version string\n-# make\n-#   Run build scripts in mk\n-# libedit-dev zlib1g-dev\n-#   LLVM dependencies as packaged in Ubuntu\n-#   (They are optional, but Ubuntu package enables them)\n-# llvm-3.7-dev (installed by llvm-3.7-tools)\n-#   LLVM\n-# llvm-3.7-tools\n-#   FileCheck is used to run tests in src/test/codegen\n-\n-RUN apt-get update && apt-get -y install \\\n-    curl g++ gdb git make \\\n-    libedit-dev zlib1g-dev \\\n-    llvm-3.7-tools cmake\n-\n-RUN mkdir /build\n-WORKDIR /build"}, {"sha": "50e30caa2b34b0fa58700b81091da0fe28185b93", "filename": "src/etc/apple-darwin.supp", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fapple-darwin.supp", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fapple-darwin.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fapple-darwin.supp?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,75 +0,0 @@\n-{\n-   osx-frameworks.rs-fails-otherwise-1\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:malloc\n-   ...\n-   fun:__CFInitialize\n-   ...\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-2\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:malloc_zone_calloc\n-   ...\n-   fun:__CFInitialize\n-   fun:_ZN16ImageLoaderMachO11doImageInitERKN11ImageLoader11LinkContextE\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-3\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:realloc\n-   ...\n-   fun:_read_images\n-   fun:map_images_nolock\n-   ...\n-   fun:_ZN4dyldL18notifyBatchPartialE17dyld_image_statesbPFPKcS0_jPK15dyld_image_infoE\n-   fun:_ZN4dyld36registerImageStateBatchChangeHandlerE17dyld_image_statesPFPKcS0_jPK15dyld_image_infoE\n-   fun:dyld_register_image_state_change_handler\n-   fun:_objc_init\n-   fun:_os_object_init\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-4\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:calloc\n-   ...\n-   fun:__CFInitialize\n-   fun:_ZN16ImageLoaderMachO11doImageInitERKN11ImageLoader11LinkContextE\n-   fun:_ZN16ImageLoaderMachO16doInitializationERKN11ImageLoader11LinkContextE\n-   fun:_ZN11ImageLoader23recursiveInitializationERKNS_11LinkContextEjRNS_21InitializerTimingListERNS_15UninitedUpwardsE\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-5\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:malloc_zone_malloc\n-   ...\n-   fun:__CFInitialize\n-   ...\n-}\n-\n-{\n-   fails-since-xcode-7.2\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:malloc_zone_malloc\n-   fun:_objc_copyClassNamesForImage\n-   fun:_ZL9protocolsv\n-   fun:_Z9readClassP10objc_classbb\n-   fun:gc_init\n-   fun:_ZL33objc_initializeClassPair_internalP10objc_classPKcS0_S0_\n-   fun:layout_string_create\n-   fun:_ZL12realizeClassP10objc_class\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-}"}, {"sha": "0e103fbcffbad6a0fb1b2f34044b0887200519c8", "filename": "src/etc/check-sanitycheck.py", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fcheck-sanitycheck.py", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fcheck-sanitycheck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-sanitycheck.py?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,58 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import subprocess\n-import sys\n-import functools\n-\n-STATUS = 0\n-\n-def error_unless_permitted(env_var, message):\n-    global STATUS\n-    if not os.getenv(env_var):\n-        sys.stderr.write(message)\n-        STATUS = 1\n-\n-def only_on(platforms):\n-    def decorator(func):\n-        @functools.wraps(func)\n-        def inner():\n-            if any(map(lambda x: sys.platform.startswith(x), platforms)):\n-                func()\n-        return inner\n-    return decorator\n-\n-@only_on(['linux', 'darwin', 'freebsd', 'openbsd'])\n-def check_rlimit_core():\n-    import resource\n-    soft, hard = resource.getrlimit(resource.RLIMIT_CORE)\n-    if soft > 0:\n-        error_unless_permitted('ALLOW_NONZERO_RLIMIT_CORE', \"\"\"\\\n-RLIMIT_CORE is set to a nonzero value (%d). During debuginfo, the test suite\n-will segfault many rustc's, creating many potentially large core files.\n-set ALLOW_NONZERO_RLIMIT_CORE to ignore this warning\n-\"\"\" % (soft))\n-\n-@only_on(['win32'])\n-def check_console_code_page():\n-    if '65001' not in subprocess.check_output(['cmd', '/c', 'chcp']):\n-        sys.stderr.write('Warning: the console output code page is not UTF-8, \\\n-some tests may fail. Use `cmd /c \"chcp 65001\"` to setup UTF-8 code page.\\n')\n-\n-def main():\n-    check_console_code_page()\n-    check_rlimit_core()\n-\n-if __name__ == '__main__':\n-    main()\n-    sys.exit(STATUS)"}, {"sha": "9312b685c14a2b5dc79d1aacfd31ad11e9901713", "filename": "src/etc/check-summary.py", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,57 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import glob\n-import sys\n-\n-if __name__ == '__main__':\n-    summaries = []\n-\n-    def summarise(fname):\n-        summary = {}\n-        with open(fname) as fd:\n-            for line in fd:\n-                splitline = line.strip().split(' ')\n-                if len(splitline) == 1:\n-                    continue\n-                status = splitline[0]\n-                test = splitline[-1]\n-                # track bench runs\n-                if splitline[1] == 'ns/iter':\n-                    status = 'bench'\n-                if status not in summary:\n-                    summary[status] = []\n-                summary[status].append(test)\n-            summaries.append((fname, summary))\n-\n-    def count(t):\n-        return sum(map(lambda f: len(f[1].get(t, [])), summaries))\n-\n-    logfiles = sys.argv[1:]\n-    for files in map(glob.glob, logfiles):\n-        map(summarise, files)\n-    ok = count('ok')\n-    failed = count('failed')\n-    ignored = count('ignored')\n-    measured = count('bench')\n-    print(\"summary of %d test runs: %d passed; %d failed; %d ignored; %d measured\" %\n-          (len(logfiles), ok, failed, ignored, measured))\n-    print(\"\")\n-\n-    if failed > 0:\n-        print(\"failed tests:\")\n-        for f, s in summaries:\n-            failures = s.get('failed', [])\n-            if len(failures) > 0:\n-                print(\"  %s:\" % (f))\n-            for test in failures:\n-                print(\"    %s\" % (test))"}, {"sha": "127251cc802c9ccec20dc19c01901cbad412f43e", "filename": "src/etc/get-stage0.py", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fget-stage0.py", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fget-stage0.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-stage0.py?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,46 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import sys\n-\n-path = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../bootstrap\"))\n-sys.path.append(path)\n-\n-import bootstrap\n-\n-def main(triple):\n-    src_root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../..\"))\n-    data = bootstrap.stage0_data(src_root)\n-\n-    channel, date = data['rustc'].split('-', 1)\n-\n-    dl_dir = 'dl'\n-    if not os.path.exists(dl_dir):\n-        os.makedirs(dl_dir)\n-\n-    filename = 'rustc-{}-{}.tar.gz'.format(channel, triple)\n-    url = 'https://static.rust-lang.org/dist/{}/{}'.format(date, filename)\n-    dst = dl_dir + '/' + filename\n-    bootstrap.get(url, dst)\n-\n-    stage0_dst = triple + '/stage0'\n-    if os.path.exists(stage0_dst):\n-        for root, _, files in os.walk(stage0_dst):\n-            for f in files:\n-                os.unlink(os.path.join(root, f))\n-    else:\n-        os.makedirs(stage0_dst)\n-    bootstrap.unpack(dst, stage0_dst, match='rustc', verbose=True)\n-\n-if __name__ == '__main__':\n-    main(sys.argv[1])"}, {"sha": "ee77206640eab2a70bc8f6f086a9fe1b76ef95db", "filename": "src/etc/local_stage0.sh", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,79 +0,0 @@\n-#!/bin/sh\n-# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-TARG_DIR=$1\n-PREFIX=$2\n-RUSTLIBDIR=$3\n-\n-LIB_DIR=lib\n-LIB_PREFIX=lib\n-\n-OS=`uname -s`\n-case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\"|\"SunOS\"|\"Haiku\")\n-    BIN_SUF=\n-    LIB_SUF=.so\n-    ;;\n-    (\"Darwin\")\n-    BIN_SUF=\n-    LIB_SUF=.dylib\n-    ;;\n-    (*)\n-    BIN_SUF=.exe\n-    LIB_SUF=.dll\n-    LIB_DIR=bin\n-    LIB_PREFIX=\n-    ;;\n-esac\n-\n-if [ -z $PREFIX ]; then\n-    echo \"No local rust specified.\"\n-    exit 1\n-fi\n-\n-if [ ! -e ${PREFIX}/bin/rustc${BIN_SUF} ]; then\n-    echo \"No local rust installed at ${PREFIX}\"\n-    exit 1\n-fi\n-\n-if [ -z $TARG_DIR ]; then\n-    echo \"No target directory specified.\"\n-    exit 1\n-fi\n-\n-case \"$TARG_DIR\" in\n---print-rustc-release)\n-  # not actually copying to TARG_DIR, just print the local rustc version and exit\n-  ${PREFIX}/bin/rustc${BIN_SUF} --version --verbose | sed -ne 's/^release: //p'\n-;;\n-*)\n-\n-cp ${PREFIX}/bin/rustc${BIN_SUF} ${TARG_DIR}/stage0/bin/\n-cp ${PREFIX}/${LIB_DIR}/${RUSTLIBDIR}/${TARG_DIR}/${LIB_DIR}/* ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}arena*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}extra*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rust*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}std*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}syntax*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}flate*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}fmt_macros*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}getopts*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}graphviz*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}log*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rbml*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}serialize*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}term*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}proc_macro*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-\n-# do not fail if one of the above fails, as all we need is a working rustc!\n-exit 0\n-\n-esac"}, {"sha": "24b007576aa24ad673a6687d246400f0dd16b459", "filename": "src/etc/mklldeps.py", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,113 +0,0 @@\n-# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import sys\n-import subprocess\n-\n-f = open(sys.argv[1], 'wb')\n-\n-components = sys.argv[2].split() # splits on whitespace\n-enable_static = sys.argv[3]\n-llvm_config = sys.argv[4]\n-stdcpp_name = sys.argv[5]\n-use_libcpp = sys.argv[6]\n-\n-f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// WARNING: THIS IS A GENERATED FILE, DO NOT MODIFY\n-//          take a look at src/etc/mklldeps.py if you're interested\n-\"\"\")\n-\n-\n-def run(args):\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        print(\"failed to run llvm_config: args = `{}`\".format(args))\n-        print(err)\n-        sys.exit(1)\n-    return out\n-\n-def runErr(args):\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        return False, out\n-    else:\n-        return True, out\n-\n-f.write(\"\\n\")\n-\n-args = [llvm_config, '--shared-mode']\n-args.extend(components)\n-llvm_shared, out = runErr(args)\n-if llvm_shared:\n-    llvm_shared = 'shared' in out\n-\n-# LLVM libs\n-args = [llvm_config, '--libs', '--system-libs']\n-args.extend(components)\n-out = run(args)\n-for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n-    if len(lib) == 0:\n-        continue\n-    # in some cases we get extra spaces in between libs so ignore those\n-    if len(lib) == 1 and lib == ' ':\n-        continue\n-    # not all libs strictly follow -lfoo, on Bitrig, there is -pthread\n-    if lib[0:2] == '-l':\n-        lib = lib.strip()[2:]\n-    elif lib[0] == '-':\n-        lib = lib.strip()[1:]\n-    # If this actually points at a literal file then we're on MSVC which now\n-    # prints full paths, so get just the name of the library and strip off the\n-    # trailing \".lib\"\n-    elif os.path.exists(lib):\n-        lib = os.path.basename(lib)[:-4]\n-    elif lib[-4:] == '.lib':\n-        lib = lib[:-4]\n-    f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n-    if not llvm_shared and 'LLVM' in lib:\n-        f.write(\", kind = \\\"static\\\"\")\n-    f.write(\")]\\n\")\n-\n-# LLVM ldflags\n-out = run([llvm_config, '--ldflags'])\n-for lib in out.strip().split(' '):\n-    if lib[:2] == \"-l\":\n-        f.write(\"#[link(name = \\\"\" + lib[2:] + \"\\\")]\\n\")\n-\n-# C++ runtime library\n-out = run([llvm_config, '--cxxflags'])\n-if enable_static == '1':\n-    assert('stdlib=libc++' not in out)\n-    f.write(\"#[link(name = \\\"\" + stdcpp_name + \"\\\", kind = \\\"static\\\")]\\n\")\n-else:\n-    # Note that we use `cfg_attr` here because on MSVC the C++ standard library\n-    # is not c++ or stdc++, but rather the linker takes care of linking the\n-    # right standard library.\n-    if use_libcpp != \"0\" or 'stdlib=libc++' in out:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"c++\\\"))]\\n\")\n-    else:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"\" + stdcpp_name + \"\\\"))]\\n\")\n-\n-# Attach everything to an extern block\n-f.write(\"extern {}\\n\")"}, {"sha": "6e409af79aecfe48f4c49bcd8cc97ae1dbb110b6", "filename": "src/etc/x86.supp", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -1,65 +0,0 @@\n-{\n-   goddammit-llvm-why-u-no-valgrind\n-   Memcheck:Cond\n-   fun:*\n-   ...\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-1\n-   Memcheck:Addr1\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-2\n-   Memcheck:Addr2\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-3\n-   Memcheck:Addr4\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-4\n-   Memcheck:Addr8\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-5\n-   Memcheck:Leak\n-   match-leak-kinds: definite\n-   fun:malloc\n-   fun:tlv_allocate_and_initialize_for_key\n-   fun:tlv_get_addr\n-   ...\n-   fun:start\n-}"}]}