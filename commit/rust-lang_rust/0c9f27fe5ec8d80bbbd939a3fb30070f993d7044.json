{"sha": "0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOWYyN2ZlNWVjOGQ4MGJiYmQ5MzlhM2ZiMzAwNzBmOTkzZDcwNDQ=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2015-12-28T04:13:32Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-14T01:59:18Z"}, "message": "Start hacking checkstyle output in.\n\ncheckstyle now shows up on the option parser, and the code still\ncompiles/passes tests. Next up will be outputing the XML to stdout.", "tree": {"sha": "ecf7f645ab629d9ec7c1d5cd2daa3845feba51d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf7f645ab629d9ec7c1d5cd2daa3845feba51d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "html_url": "https://github.com/rust-lang/rust/commit/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f7741bb0ce2d2162ec0bcb7754fbfec91c80776", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7741bb0ce2d2162ec0bcb7754fbfec91c80776", "html_url": "https://github.com/rust-lang/rust/commit/3f7741bb0ce2d2162ec0bcb7754fbfec91c80776"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "a8a19d96bc775af9028d1057355b0a917f2ce703", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "patch": "@@ -90,7 +90,7 @@ fn execute() -> i32 {\n     opts.optopt(\"\",\n                 \"write-mode\",\n                 \"mode to write in (not usable when piping from stdin)\",\n-                \"[replace|overwrite|display|diff|coverage]\");\n+                \"[replace|overwrite|display|diff|coverage|checkstyle]\");\n     opts.optflag(\"\", \"skip-children\", \"don't reformat child modules\");\n \n     opts.optflag(\"\","}, {"sha": "5b6a5e05cf59578005b77d0576120fa3f3945de5", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "patch": "@@ -136,6 +136,8 @@ configuration_option_enum! { WriteMode:\n     Coverage,\n     // Unfancy stdout\n     Plain,\n+    // Output a checkstyle XML file.\n+    Checkstyle,\n }\n \n // This trait and the following impl blocks are there so that we an use"}, {"sha": "b22ca7b9b806e71048ef6e585baeebac439107f2", "filename": "src/filemap.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "patch": "@@ -38,6 +38,7 @@ pub fn write_all_files(file_map: &FileMap,\n         try!(write_file(&file_map[filename], filename, mode, config));\n     }\n \n+    // Output trailers for write mode.\n     Ok(())\n }\n \n@@ -142,6 +143,19 @@ pub fn write_file(text: &StringBuffer,\n         WriteMode::Default => {\n             unreachable!(\"The WriteMode should NEVER Be default at this point!\");\n         }\n+        WriteMode::Checkstyle => {\n+            // Generate the diff for the current file.\n+            // Output the XML tags for the lines that are different.\n+            // Use the new text as 'should be X'.\n+        }\n+        WriteMode::Return => {\n+            // io::Write is not implemented for String, working around with\n+            // Vec<u8>\n+            let mut v = Vec::new();\n+            try!(write_system_newlines(&mut v, text, config));\n+            // won't panic, we are writing correct utf8\n+            return Ok(Some(String::from_utf8(v).unwrap()));\n+        }\n     }\n \n     Ok(None)"}]}