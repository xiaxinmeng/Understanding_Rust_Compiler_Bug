{"sha": "10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "node_id": "C_kwDOAAsO6NoAKDEwYmUwZGQ4ZGZjNDZlZGE0ZGM0ZDE1NTVkZjMxZGUyZThiNzU1MWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-13T06:22:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-26T17:00:31Z"}, "message": "Replace LifetimeRes::Anonymous by LifetimeRes::Infer.", "tree": {"sha": "8b56fa381ecf283cff9dae5a1071811eb3c34f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b56fa381ecf283cff9dae5a1071811eb3c34f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "html_url": "https://github.com/rust-lang/rust/commit/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab63591f00cb985fe95e1226a2ab3898f1b9e471", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab63591f00cb985fe95e1226a2ab3898f1b9e471", "html_url": "https://github.com/rust-lang/rust/commit/ab63591f00cb985fe95e1226a2ab3898f1b9e471"}], "stats": {"total": 156, "additions": 51, "deletions": 105}, "files": [{"sha": "a1bf0f94964bb70e8d342dd18b868482cb0bbb89", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -1883,25 +1883,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 hir::LifetimeName::Param(param, ParamName::Fresh)\n             }\n-            LifetimeRes::Anonymous { binder } => {\n-                let mut l_name = None;\n-                if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n-                    if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n-                        let p_id = self.next_node_id();\n-                        let p_def_id = self.create_def(\n-                            captured_lifetimes.parent_def_id,\n-                            p_id,\n-                            DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n-                        );\n-                        captured_lifetimes\n-                            .captures\n-                            .insert(p_def_id, (span, p_id, ParamName::Fresh, res));\n-                        l_name = Some(hir::LifetimeName::Param(p_def_id, ParamName::Fresh));\n-                    }\n-                    self.captured_lifetimes = Some(captured_lifetimes);\n-                };\n-                l_name.unwrap_or(hir::LifetimeName::Underscore)\n-            }\n+            LifetimeRes::Infer => hir::LifetimeName::Infer,\n             LifetimeRes::Static => hir::LifetimeName::Static,\n             LifetimeRes::Error => hir::LifetimeName::Error,\n             res => panic!(\"Unexpected lifetime resolution {:?} for {:?} at {:?}\", res, ident, span),"}, {"sha": "0662d4d882f6a8cdda2215ee29dec8dbdac5995b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -589,7 +589,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n             hir::LifetimeName::Param(_, hir::ParamName::Fresh)\n             | hir::LifetimeName::ImplicitObjectLifetimeDefault\n-            | hir::LifetimeName::Underscore => {\n+            | hir::LifetimeName::Infer => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "be5b7eccbafb2ef34cc1bd53fd2924fe265ac2fe", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -738,11 +738,8 @@ pub enum LifetimeRes {\n         binder: NodeId,\n     },\n     /// This variant is used for anonymous lifetimes that we did not resolve during\n-    /// late resolution.  Shifting the work to the HIR lifetime resolver.\n-    Anonymous {\n-        /// Id of the introducing place. See `Param`.\n-        binder: NodeId,\n-    },\n+    /// late resolution.  Those lifetimes will be inferred by typechecking.\n+    Infer,\n     /// Explicit `'static` lifetime.\n     Static,\n     /// Resolution failure."}, {"sha": "f71400898e60b44fa561f49917a481dd650c9ce5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -108,7 +108,8 @@ pub enum LifetimeName {\n     Error,\n \n     /// User wrote an anonymous lifetime, either `'_` or nothing.\n-    Underscore,\n+    /// The semantics of this lifetime should be inferred by typechecking code.\n+    Infer,\n \n     /// User wrote `'static`.\n     Static,\n@@ -118,7 +119,7 @@ impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Error => Ident::empty(),\n-            LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n+            LifetimeName::Infer => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(_, param_name) => param_name.ident(),\n         }\n@@ -127,7 +128,7 @@ impl LifetimeName {\n     pub fn is_anonymous(&self) -> bool {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Underscore\n+            | LifetimeName::Infer\n             | LifetimeName::Param(_, ParamName::Fresh)\n             | LifetimeName::Error => true,\n             LifetimeName::Static | LifetimeName::Param(..) => false,\n@@ -136,7 +137,7 @@ impl LifetimeName {\n \n     pub fn is_elided(&self) -> bool {\n         match self {\n-            LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Underscore => true,\n+            LifetimeName::ImplicitObjectLifetimeDefault | LifetimeName::Infer => true,\n \n             // It might seem surprising that `Fresh` counts as\n             // *not* elided -- but this is because, as far as the code"}, {"sha": "640974115b926e2075a9b26f42d13c3c7b4c0352", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -497,7 +497,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         | LifetimeName::Static\n         | LifetimeName::Error\n         | LifetimeName::ImplicitObjectLifetimeDefault\n-        | LifetimeName::Underscore => {}\n+        | LifetimeName::Infer => {}\n     }\n }\n "}, {"sha": "f5fb2585c748eb9ce09c4aa9137a8e660c005094", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 37, "deletions": 71, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -865,7 +865,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             let previous_state = replace(&mut this.in_func_body, true);\n                             // Resolve the function body, potentially inside the body of an async closure\n                             this.with_lifetime_rib(\n-                                LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: fn_id }),\n+                                LifetimeRibKind::Elided(LifetimeRes::Infer),\n                                 |this| this.visit_block(body),\n                             );\n \n@@ -893,9 +893,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         this.with_lifetime_rib(\n                             match binder {\n                                 ClosureBinder::NotPresent => {\n-                                    LifetimeRibKind::Elided(LifetimeRes::Anonymous {\n-                                        binder: fn_id,\n-                                    })\n+                                    LifetimeRibKind::Elided(LifetimeRes::Infer)\n                                 }\n                                 ClosureBinder::For { .. } => LifetimeRibKind::AnonymousReportError,\n                             },\n@@ -907,7 +905,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         let previous_state = replace(&mut this.in_func_body, true);\n                         // Resolve the function body, potentially inside the body of an async closure\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: fn_id }),\n+                            LifetimeRibKind::Elided(LifetimeRes::Infer),\n                             |this| this.visit_expr(body),\n                         );\n \n@@ -1645,35 +1643,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             if !missing {\n                 // Do not create a parameter for patterns and expressions.\n-                for rib in self.lifetime_ribs.iter().rev() {\n-                    match rib.kind {\n-                        LifetimeRibKind::Elided(res @ LifetimeRes::Anonymous { .. }) => {\n-                            for id in node_ids {\n-                                self.record_lifetime_res(id, res, LifetimeElisionCandidate::Named);\n-                            }\n-                            break;\n-                        }\n-                        // `LifetimeRes::Error`, which would usually be used in the case of\n-                        // `ReportError`, is unsuitable here, as we don't emit an error yet.  Instead,\n-                        // we simply resolve to an implicit lifetime, which will be checked later, at\n-                        // which point a suitable error will be emitted.\n-                        LifetimeRibKind::AnonymousReportError | LifetimeRibKind::Item => {\n-                            // FIXME(cjgillot) This resolution is wrong, but this does not matter\n-                            // since these cases are erroneous anyway.  Lifetime resolution should\n-                            // emit a \"missing lifetime specifier\" diagnostic.\n-                            let res = LifetimeRes::Anonymous { binder: DUMMY_NODE_ID };\n-                            for id in node_ids {\n-                                self.record_lifetime_res(id, res, LifetimeElisionCandidate::Named);\n-                            }\n-                            break;\n-                        }\n-                        LifetimeRibKind::AnonymousCreateParameter { .. }\n-                        | LifetimeRibKind::Elided(_)\n-                        | LifetimeRibKind::ElisionFailure\n-                        | LifetimeRibKind::Generics { .. }\n-                        | LifetimeRibKind::ConstGeneric\n-                        | LifetimeRibKind::AnonConst => {}\n-                    }\n+                for id in node_ids {\n+                    self.record_lifetime_res(\n+                        id,\n+                        LifetimeRes::Infer,\n+                        LifetimeElisionCandidate::Named,\n+                    );\n                 }\n                 continue;\n             }\n@@ -1814,15 +1789,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             )\n         }\n         match res {\n-            LifetimeRes::Param { .. }\n-            | LifetimeRes::Fresh { .. }\n-            | LifetimeRes::Anonymous { .. }\n-            | LifetimeRes::Static => {\n+            LifetimeRes::Param { .. } | LifetimeRes::Fresh { .. } | LifetimeRes::Static => {\n                 if let Some(ref mut candidates) = self.lifetime_elision_candidates {\n                     candidates.insert(res, candidate);\n                 }\n             }\n-            LifetimeRes::Error | LifetimeRes::ElidedAnchor { .. } => {}\n+            LifetimeRes::Infer | LifetimeRes::Error | LifetimeRes::ElidedAnchor { .. } => {}\n         }\n     }\n \n@@ -2245,26 +2217,23 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n                     });\n-                    this.with_lifetime_rib(\n-                        LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: item.id }),\n-                        |this| {\n-                            if let Some(expr) = expr {\n-                                let constant_item_kind = match item.kind {\n-                                    ItemKind::Const(..) => ConstantItemKind::Const,\n-                                    ItemKind::Static(..) => ConstantItemKind::Static,\n-                                    _ => unreachable!(),\n-                                };\n-                                // We already forbid generic params because of the above item rib,\n-                                // so it doesn't matter whether this is a trivial constant.\n-                                this.with_constant_rib(\n-                                    IsRepeatExpr::No,\n-                                    HasGenericParams::Yes,\n-                                    Some((item.ident, constant_item_kind)),\n-                                    |this| this.visit_expr(expr),\n-                                );\n-                            }\n-                        },\n-                    );\n+                    this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n+                        if let Some(expr) = expr {\n+                            let constant_item_kind = match item.kind {\n+                                ItemKind::Const(..) => ConstantItemKind::Const,\n+                                ItemKind::Static(..) => ConstantItemKind::Static,\n+                                _ => unreachable!(),\n+                            };\n+                            // We already forbid generic params because of the above item rib,\n+                            // so it doesn't matter whether this is a trivial constant.\n+                            this.with_constant_rib(\n+                                IsRepeatExpr::No,\n+                                HasGenericParams::Yes,\n+                                Some((item.ident, constant_item_kind)),\n+                                |this| this.visit_expr(expr),\n+                            );\n+                        }\n+                    });\n                 });\n             }\n \n@@ -2521,7 +2490,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         // Type parameters can already be used and as associated consts are\n                         // not used as part of the type system, this is far less surprising.\n                         self.with_lifetime_rib(\n-                            LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: item.id }),\n+                            LifetimeRibKind::Elided(LifetimeRes::Infer),\n                             |this| {\n                                 this.with_constant_rib(\n                                     IsRepeatExpr::No,\n@@ -2694,17 +2663,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     //\n                     // Type parameters can already be used and as associated consts are\n                     // not used as part of the type system, this is far less surprising.\n-                    self.with_lifetime_rib(\n-                        LifetimeRibKind::Elided(LifetimeRes::Anonymous { binder: item.id }),\n-                        |this| {\n-                            this.with_constant_rib(\n-                                IsRepeatExpr::No,\n-                                HasGenericParams::Yes,\n-                                None,\n-                                |this| this.visit_expr(expr),\n-                            )\n-                        },\n-                    );\n+                    self.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n+                        this.with_constant_rib(\n+                            IsRepeatExpr::No,\n+                            HasGenericParams::Yes,\n+                            None,\n+                            |this| this.visit_expr(expr),\n+                        )\n+                    });\n                 }\n             }\n             AssocItemKind::Fn(box Fn { generics, .. }) => {"}, {"sha": "51aea02cb7a627f9b49433a294e87d9158e9d5a7", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -819,7 +819,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // `Box<dyn Debug + 'static>`.\n                         self.resolve_object_lifetime_default(lifetime)\n                     }\n-                    LifetimeName::Underscore => {\n+                    LifetimeName::Infer => {\n                         // If the user writes `'_`, we use the *ordinary* elision\n                         // rules. So the `'_` in e.g., `Box<dyn Debug + '_>` will be\n                         // resolved the same as the `'_` in `&'_ Foo`.\n@@ -1135,7 +1135,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         match lifetime_ref.name {\n-            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Underscore => {\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Infer => {\n                 self.resolve_elided_lifetimes(&[lifetime_ref])\n             }\n             hir::LifetimeName::Static => self.insert_lifetime(lifetime_ref, Region::Static),"}, {"sha": "a0ca7e6ff1e22b78f2cd4c08a8ca29c6cea71e8c", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -166,7 +166,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n     // - There's only one output lifetime bound using `+ '_`\n     // - All input lifetimes are explicitly bound to the output\n     input_lifetimes.is_empty()\n-        || (output_lifetimes.len() == 1 && matches!(output_lifetimes[0], LifetimeName::Underscore))\n+        || (output_lifetimes.len() == 1 && matches!(output_lifetimes[0], LifetimeName::Infer))\n         || input_lifetimes\n             .iter()\n             .all(|in_lt| output_lifetimes.iter().any(|out_lt| in_lt == out_lt))"}, {"sha": "3c5ea2d94144faf0718772b5342befcc510c7b8e", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10be0dd8dfc46eda4dc4d1555df31de2e8b7551a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=10be0dd8dfc46eda4dc4d1555df31de2e8b7551a", "patch": "@@ -351,7 +351,7 @@ impl fmt::Display for RefPrefix {\n                 name.fmt(f)?;\n                 f.write_char(' ')?;\n             },\n-            LifetimeName::Underscore => f.write_str(\"'_ \")?,\n+            LifetimeName::Infer => f.write_str(\"'_ \")?,\n             LifetimeName::Static => f.write_str(\"'static \")?,\n             _ => (),\n         }"}]}