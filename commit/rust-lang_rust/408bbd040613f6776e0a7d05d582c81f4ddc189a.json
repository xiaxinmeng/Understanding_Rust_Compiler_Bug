{"sha": "408bbd040613f6776e0a7d05d582c81f4ddc189a", "node_id": "C_kwDOAAsO6NoAKDQwOGJiZDA0MDYxM2Y2Nzc2ZTBhN2QwNWQ1ODJjODFmNGRkYzE4OWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-05T16:50:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-05T16:50:32Z"}, "message": "Auto merge of #112317 - GuillaumeGomez:rollup-toh0gpo, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #112243 (Remove unneeded `Buffer` allocations when `&mut fmt::Write` can be used directly)\n - #112263 (Remove ExtendElement, ExtendWith, extend_with)\n - #112291 (Disable RustAnalyzer check by default, run Rustfmt check before)\n - #112299 (Don't double-print status messages in GHA)\n - #112311 (Ignore fluent message reordering in `git blame`)\n - #112315 (fix spelling error)\n\nFailed merges:\n\n - #112251 (rustdoc: convert `if let Some()` that always matches to variable)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8406e7c234f528d6396ee44a9311ea3c7d40ce5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8406e7c234f528d6396ee44a9311ea3c7d40ce5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/408bbd040613f6776e0a7d05d582c81f4ddc189a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/408bbd040613f6776e0a7d05d582c81f4ddc189a", "html_url": "https://github.com/rust-lang/rust/commit/408bbd040613f6776e0a7d05d582c81f4ddc189a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/408bbd040613f6776e0a7d05d582c81f4ddc189a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f896da247e0ee8f0bef7cd7c54cfbea255b9f68", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f896da247e0ee8f0bef7cd7c54cfbea255b9f68", "html_url": "https://github.com/rust-lang/rust/commit/2f896da247e0ee8f0bef7cd7c54cfbea255b9f68"}, {"sha": "7c363c22a26e947071e0c7288ae418f056b995eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c363c22a26e947071e0c7288ae418f056b995eb", "html_url": "https://github.com/rust-lang/rust/commit/7c363c22a26e947071e0c7288ae418f056b995eb"}], "stats": {"total": 96, "additions": 39, "deletions": 57}, "files": [{"sha": "19078c1b842aee6eee3292ae8c3d16aa8fd2c61a", "filename": ".git-blame-ignore-revs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/.git-blame-ignore-revs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/.git-blame-ignore-revs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.git-blame-ignore-revs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -14,3 +14,5 @@ c34fbfaad38cf5829ef5cfe780dc9d58480adeaa\n cf2dff2b1e3fa55fa5415d524200070d0d7aacfe\n # Run rustfmt on bootstrap\n b39a1d6f1a30ba29f25d7141038b9a5bf0126e36\n+# reorder fluent message files\n+f97fddab91fbf290ea5b691fe355d6f915220b6e"}, {"sha": "0cd0b51b6ad4999f2ebedb6c4f4208b672ef0580", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -1,4 +1,4 @@\n-// This crate is intentionally empty and a rexport of `rustc_driver_impl` to allow the code in\n+// This crate is intentionally empty and a re-export of `rustc_driver_impl` to allow the code in\n // `rustc_driver_impl` to be compiled in parallel with other crates.\n \n pub use rustc_driver_impl::*;"}, {"sha": "d89cdff8e366cc0f8b32185348f67e58ea786e8b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -2355,7 +2355,7 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend_with(new_len - len, ExtendElement(value))\n+            self.extend_with(new_len - len, value)\n         } else {\n             self.truncate(new_len);\n         }\n@@ -2469,26 +2469,10 @@ impl<T, A: Allocator, const N: usize> Vec<[T; N], A> {\n     }\n }\n \n-// This code generalizes `extend_with_{element,default}`.\n-trait ExtendWith<T> {\n-    fn next(&mut self) -> T;\n-    fn last(self) -> T;\n-}\n-\n-struct ExtendElement<T>(T);\n-impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n-    fn next(&mut self) -> T {\n-        self.0.clone()\n-    }\n-    fn last(self) -> T {\n-        self.0\n-    }\n-}\n-\n-impl<T, A: Allocator> Vec<T, A> {\n+impl<T: Clone, A: Allocator> Vec<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n-    /// Extend the vector by `n` values, using the given generator.\n-    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {\n+    /// Extend the vector by `n` clones of value.\n+    fn extend_with(&mut self, n: usize, value: T) {\n         self.reserve(n);\n \n         unsafe {\n@@ -2500,15 +2484,15 @@ impl<T, A: Allocator> Vec<T, A> {\n \n             // Write all elements except the last one\n             for _ in 1..n {\n-                ptr::write(ptr, value.next());\n+                ptr::write(ptr, value.clone());\n                 ptr = ptr.add(1);\n-                // Increment the length in every step in case next() panics\n+                // Increment the length in every step in case clone() panics\n                 local_len.increment_len(1);\n             }\n \n             if n > 0 {\n                 // We can write the last element directly without cloning needlessly\n-                ptr::write(ptr, value.last());\n+                ptr::write(ptr, value);\n                 local_len.increment_len(1);\n             }\n "}, {"sha": "da43d17bf36243086e631ba1bca2f7dd0c040bf0", "filename": "library/alloc/src/vec/spec_from_elem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -3,7 +3,7 @@ use core::ptr;\n use crate::alloc::Allocator;\n use crate::raw_vec::RawVec;\n \n-use super::{ExtendElement, IsZero, Vec};\n+use super::{IsZero, Vec};\n \n // Specialization trait used for Vec::from_elem\n pub(super) trait SpecFromElem: Sized {\n@@ -13,7 +13,7 @@ pub(super) trait SpecFromElem: Sized {\n impl<T: Clone> SpecFromElem for T {\n     default fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A> {\n         let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n+        v.extend_with(n, elem);\n         v\n     }\n }\n@@ -25,7 +25,7 @@ impl<T: Clone + IsZero> SpecFromElem for T {\n             return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n         }\n         let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n+        v.extend_with(n, elem);\n         v\n     }\n }"}, {"sha": "0be59cab48b6591990cbbf21b7a1f485edfb8106", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -703,8 +703,8 @@ impl<'a> Builder<'a> {\n                 check::CargoMiri,\n                 check::MiroptTestTools,\n                 check::Rls,\n-                check::RustAnalyzer,\n                 check::Rustfmt,\n+                check::RustAnalyzer,\n                 check::Bootstrap\n             ),\n             Kind::Test => describe!("}, {"sha": "1a0f0047812ed38e21b75793a24de932ef27bbee", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -347,7 +347,7 @@ pub struct RustAnalyzer {\n impl Step for RustAnalyzer {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n+    const DEFAULT: bool = false;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.path(\"src/tools/rust-analyzer\")"}, {"sha": "7ed8d2bfa7f543423029d5886633934e4a876cb5", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -1069,7 +1069,6 @@ impl Build {\n     }\n \n     fn group(&self, msg: &str) -> Option<gha::Group> {\n-        self.info(&msg);\n         match self.config.dry_run {\n             DryRun::SelfCheck => None,\n             DryRun::Disabled | DryRun::UserSelected => Some(gha::group(&msg)),"}, {"sha": "f205ff15ec3d030ae7d3d8bc334378b5bb13881a", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -1040,9 +1040,9 @@ fn render_attributes_in_pre<'a, 'b: 'a>(\n \n // When an attribute is rendered inside a <code> tag, it is formatted using\n // a div to produce a newline after it.\n-fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item, tcx: TyCtxt<'_>) {\n-    for a in it.attributes(tcx, false) {\n-        write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n+fn render_attributes_in_code(w: &mut impl fmt::Write, it: &clean::Item, tcx: TyCtxt<'_>) {\n+    for attr in it.attributes(tcx, false) {\n+        write!(w, \"<div class=\\\"code-attribute\\\">{attr}</div>\").unwrap();\n     }\n }\n "}, {"sha": "be78ad564e4dc8b835a510d192f6e6e36f5afef3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -1431,30 +1431,28 @@ fn item_proc_macro(\n     it: &clean::Item,\n     m: &clean::ProcMacro,\n ) {\n-    let mut buffer = Buffer::new();\n-    wrap_item(&mut buffer, |buffer| {\n+    wrap_item(w, |buffer| {\n         let name = it.name.expect(\"proc-macros always have names\");\n         match m.kind {\n             MacroKind::Bang => {\n-                write!(buffer, \"{}!() {{ /* proc-macro */ }}\", name);\n+                write!(buffer, \"{name}!() {{ /* proc-macro */ }}\").unwrap();\n             }\n             MacroKind::Attr => {\n-                write!(buffer, \"#[{}]\", name);\n+                write!(buffer, \"#[{name}]\").unwrap();\n             }\n             MacroKind::Derive => {\n-                write!(buffer, \"#[derive({})]\", name);\n+                write!(buffer, \"#[derive({name})]\").unwrap();\n                 if !m.helpers.is_empty() {\n-                    buffer.push_str(\"\\n{\\n\");\n-                    buffer.push_str(\"    // Attributes available to this derive:\\n\");\n+                    buffer.write_str(\"\\n{\\n    // Attributes available to this derive:\\n\").unwrap();\n                     for attr in &m.helpers {\n-                        writeln!(buffer, \"    #[{}]\", attr);\n+                        writeln!(buffer, \"    #[{attr}]\").unwrap();\n                     }\n-                    buffer.push_str(\"}\\n\");\n+                    buffer.write_str(\"}\\n\").unwrap();\n                 }\n             }\n         }\n     });\n-    write!(w, \"{}{}\", buffer.into_inner(), document(cx, it, None, HeadingOffset::H2)).unwrap();\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n }\n \n fn item_primitive(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item) {\n@@ -1571,8 +1569,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n }\n \n fn item_static(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    let mut buffer = Buffer::new();\n-    wrap_item(&mut buffer, |buffer| {\n+    wrap_item(w, |buffer| {\n         render_attributes_in_code(buffer, it, cx.tcx());\n         write!(\n             buffer,\n@@ -1581,29 +1578,27 @@ fn item_static(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item,\n             mutability = s.mutability.print_with_space(),\n             name = it.name.unwrap(),\n             typ = s.type_.print(cx)\n-        );\n+        )\n+        .unwrap();\n     });\n \n-    write!(w, \"{}\", buffer.into_inner()).unwrap();\n-\n     write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n }\n \n fn item_foreign_type(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item) {\n-    let mut buffer = Buffer::new();\n-    wrap_item(&mut buffer, |buffer| {\n-        buffer.write_str(\"extern {\\n\");\n+    wrap_item(w, |buffer| {\n+        buffer.write_str(\"extern {\\n\").unwrap();\n         render_attributes_in_code(buffer, it, cx.tcx());\n         write!(\n             buffer,\n             \"    {}type {};\\n}}\",\n             visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n             it.name.unwrap(),\n-        );\n+        )\n+        .unwrap();\n     });\n \n-    write!(w, \"{}{}\", buffer.into_inner(), document(cx, it, None, HeadingOffset::H2)).unwrap();\n-\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n     write!(w, \"{}\", render_assoc_items(cx, it, it.item_id.expect_def_id(), AssocItemRender::All))\n         .unwrap();\n }"}, {"sha": "db353552893496c36655cfe1d89772b5e8264fc3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -147,9 +147,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n         // `#[macro_export] macro_rules!` items are reexported at the top level of the\n         // crate, regardless of where they're defined. We want to document the\n-        // top level rexport of the macro, not its original definition, since\n-        // the rexport defines the path that a user will actually see. Accordingly,\n-        // we add the rexport as an item here, and then skip over the original\n+        // top level re-export of the macro, not its original definition, since\n+        // the re-export defines the path that a user will actually see. Accordingly,\n+        // we add the re-export as an item here, and then skip over the original\n         // definition in `visit_item()` below.\n         //\n         // We also skip `#[macro_export] macro_rules!` that have already been inserted,"}, {"sha": "d106e5b339b2fb57cf613f89128f9a5ebe2fca3e", "filename": "src/tools/build_helper/src/ci.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408bbd040613f6776e0a7d05d582c81f4ddc189a/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs?ref=408bbd040613f6776e0a7d05d582c81f4ddc189a", "patch": "@@ -46,6 +46,8 @@ pub mod gha {\n     pub fn group(name: impl std::fmt::Display) -> Group {\n         if std::env::var_os(\"GITHUB_ACTIONS\").is_some() {\n             eprintln!(\"::group::{name}\");\n+        } else {\n+            eprintln!(\"{name}\")\n         }\n         Group(())\n     }"}]}