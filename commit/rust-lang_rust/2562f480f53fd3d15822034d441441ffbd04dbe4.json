{"sha": "2562f480f53fd3d15822034d441441ffbd04dbe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NjJmNDgwZjUzZmQzZDE1ODIyMDM0ZDQ0MTQ0MWZmYmQwNGRiZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-16T13:30:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-16T13:30:51Z"}, "message": "auto merge of #9220 : kballard/rust/c_str-as_str, r=thestinger\n\nAlso rustify .as_bytes(), so it no longer calls libc::strlen() and is\r\ninlineable.", "tree": {"sha": "5d1e9493efdcf2ac805496a605e58e70fccf9ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1e9493efdcf2ac805496a605e58e70fccf9ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2562f480f53fd3d15822034d441441ffbd04dbe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2562f480f53fd3d15822034d441441ffbd04dbe4", "html_url": "https://github.com/rust-lang/rust/commit/2562f480f53fd3d15822034d441441ffbd04dbe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2562f480f53fd3d15822034d441441ffbd04dbe4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1803f3af1adc1b2e5595650f6920f40bbedc2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1803f3af1adc1b2e5595650f6920f40bbedc2e", "html_url": "https://github.com/rust-lang/rust/commit/3e1803f3af1adc1b2e5595650f6920f40bbedc2e"}, {"sha": "51470f3b97428756bee70e564db026ba2e2bceb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/51470f3b97428756bee70e564db026ba2e2bceb6", "html_url": "https://github.com/rust-lang/rust/commit/51470f3b97428756bee70e564db026ba2e2bceb6"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "a2842efbf8a04dbeabd32582fdc131f4ed4fd071", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 74, "deletions": 3, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2562f480f53fd3d15822034d441441ffbd04dbe4/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2562f480f53fd3d15822034d441441ffbd04dbe4/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=2562f480f53fd3d15822034d441441ffbd04dbe4", "patch": "@@ -15,6 +15,7 @@ use ops::Drop;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n+use str;\n use str::StrSlice;\n use vec::{ImmutableVector, CopyableVector};\n use container::Container;\n@@ -97,15 +98,25 @@ impl CString {\n     /// # Failure\n     ///\n     /// Fails if the CString is null.\n+    #[inline]\n     pub fn as_bytes<'a>(&'a self) -> &'a [u8] {\n-        #[fixed_stack_segment]; #[inline(never)];\n         if self.buf.is_null() { fail!(\"CString is null!\"); }\n         unsafe {\n-            let len = libc::strlen(self.buf) as uint;\n+            let len = ptr::position(self.buf, |c| *c == 0);\n             cast::transmute((self.buf, len + 1))\n         }\n     }\n \n+    /// Converts the CString into a `&str` without copying.\n+    /// Returns None if the CString is not UTF-8 or is null.\n+    #[inline]\n+    pub fn as_str<'a>(&'a self) -> Option<&'a str> {\n+        if self.buf.is_null() { return None; }\n+        let buf = self.as_bytes();\n+        let buf = buf.slice_to(buf.len()-1); // chop off the trailing NUL\n+        str::from_utf8_slice_opt(buf)\n+    }\n+\n     /// Return a CString iterator.\n     pub fn iter<'a>(&'a self) -> CStringIterator<'a> {\n         CStringIterator {\n@@ -238,7 +249,7 @@ mod tests {\n     use option::{Some, None};\n \n     #[test]\n-    fn test_to_c_str() {\n+    fn test_str_to_c_str() {\n         do \"\".to_c_str().with_ref |buf| {\n             unsafe {\n                 assert_eq!(*ptr::offset(buf, 0), 0);\n@@ -257,6 +268,37 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_vec_to_c_str() {\n+        let b: &[u8] = [];\n+        do b.to_c_str().with_ref |buf| {\n+            unsafe {\n+                assert_eq!(*ptr::offset(buf, 0), 0);\n+            }\n+        }\n+\n+        do bytes!(\"hello\").to_c_str().with_ref |buf| {\n+            unsafe {\n+                assert_eq!(*ptr::offset(buf, 0), 'h' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 1), 'e' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 2), 'l' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 3), 'l' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 4), 'o' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 5), 0);\n+            }\n+        }\n+\n+        do bytes!(\"foo\", 0xff).to_c_str().with_ref |buf| {\n+            unsafe {\n+                assert_eq!(*ptr::offset(buf, 0), 'f' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 1), 'o' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 2), 'o' as libc::c_char);\n+                assert_eq!(*ptr::offset(buf, 3), 0xff);\n+                assert_eq!(*ptr::offset(buf, 4), 0);\n+            }\n+        }\n+    }\n+\n     #[test]\n     fn test_is_null() {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n@@ -349,4 +391,33 @@ mod tests {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn test_as_bytes() {\n+        let c_str = \"hello\".to_c_str();\n+        assert_eq!(c_str.as_bytes(), bytes!(\"hello\", 0));\n+        let c_str = \"\".to_c_str();\n+        assert_eq!(c_str.as_bytes(), bytes!(0));\n+        let c_str = bytes!(\"foo\", 0xff).to_c_str();\n+        assert_eq!(c_str.as_bytes(), bytes!(\"foo\", 0xff, 0));\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_as_bytes_fail() {\n+        let c_str = unsafe { CString::new(ptr::null(), false) };\n+        c_str.as_bytes();\n+    }\n+\n+    #[test]\n+    fn test_as_str() {\n+        let c_str = \"hello\".to_c_str();\n+        assert_eq!(c_str.as_str(), Some(\"hello\"));\n+        let c_str = \"\".to_c_str();\n+        assert_eq!(c_str.as_str(), Some(\"\"));\n+        let c_str = bytes!(\"foo\", 0xff).to_c_str();\n+        assert_eq!(c_str.as_str(), None);\n+        let c_str = unsafe { CString::new(ptr::null(), false) };\n+        assert_eq!(c_str.as_str(), None);\n+    }\n }"}]}