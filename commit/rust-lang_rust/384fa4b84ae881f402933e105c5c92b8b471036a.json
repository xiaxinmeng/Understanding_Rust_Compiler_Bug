{"sha": "384fa4b84ae881f402933e105c5c92b8b471036a", "node_id": "C_kwDOAAsO6NoAKDM4NGZhNGI4NGFlODgxZjQwMjkzM2UxMDVjNWM5MmI4YjQ3MTAzNmE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-19T18:21:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-19T20:31:08Z"}, "message": "fix: Fix target-data-layout fetching incorrectly passing 'rustc' to rustc", "tree": {"sha": "9b8eeb1a0d8a83fd3b11728afc5e1390c24b122a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b8eeb1a0d8a83fd3b11728afc5e1390c24b122a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384fa4b84ae881f402933e105c5c92b8b471036a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384fa4b84ae881f402933e105c5c92b8b471036a", "html_url": "https://github.com/rust-lang/rust/commit/384fa4b84ae881f402933e105c5c92b8b471036a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384fa4b84ae881f402933e105c5c92b8b471036a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d33cddc96c34047be7a57c0a6b36998f4d7c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d33cddc96c34047be7a57c0a6b36998f4d7c6d", "html_url": "https://github.com/rust-lang/rust/commit/c9d33cddc96c34047be7a57c0a6b36998f4d7c6d"}], "stats": {"total": 207, "additions": 144, "deletions": 63}, "files": [{"sha": "5b0ed1648db5bfd6909eec1fbfa6a9ef659629e7", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -163,7 +163,10 @@ impl ChangeFixture {\n                     Ok(Vec::new()),\n                     false,\n                     origin,\n-                    meta.target_data_layout.as_deref().map(Arc::from),\n+                    meta.target_data_layout\n+                        .as_deref()\n+                        .map(Arc::from)\n+                        .ok_or_else(|| \"target_data_layout unset\".into()),\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -200,7 +203,9 @@ impl ChangeFixture {\n                 Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n-                default_target_data_layout.map(|x| x.into()),\n+                default_target_data_layout\n+                    .map(|x| x.into())\n+                    .ok_or_else(|| \"target_data_layout unset\".into()),\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {\n@@ -214,8 +219,10 @@ impl ChangeFixture {\n                     .unwrap();\n             }\n         }\n-        let target_layout =\n-            crate_graph.iter().next().and_then(|it| crate_graph[it].target_layout.clone());\n+        let target_layout = crate_graph.iter().next().map_or_else(\n+            || Err(\"target_data_layout unset\".into()),\n+            |it| crate_graph[it].target_layout.clone(),\n+        );\n \n         if let Some(mini_core) = mini_core {\n             let core_file = file_id;"}, {"sha": "ea0561772d225251a217c420899e340ea15acf99", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -243,6 +243,7 @@ pub enum ProcMacroExpansionError {\n }\n \n pub type ProcMacroLoadResult = Result<Vec<ProcMacro>, String>;\n+pub type TargetLayoutLoadResult = Result<Arc<str>, Arc<str>>;\n \n #[derive(Debug, Clone)]\n pub struct ProcMacro {\n@@ -265,7 +266,7 @@ pub struct CrateData {\n     pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n     pub potential_cfg_options: CfgOptions,\n-    pub target_layout: Option<Arc<str>>,\n+    pub target_layout: TargetLayoutLoadResult,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: ProcMacroLoadResult,\n@@ -324,7 +325,7 @@ impl CrateGraph {\n         proc_macro: ProcMacroLoadResult,\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n-        target_layout: Option<Arc<str>>,\n+        target_layout: Result<Arc<str>, Arc<str>>,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id,\n@@ -647,7 +648,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -660,7 +661,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -673,7 +674,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -700,7 +701,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -713,7 +714,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -737,7 +738,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -750,7 +751,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -763,7 +764,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -787,7 +788,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -800,7 +801,7 @@ mod tests {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"\".into()),\n         );\n         assert!(graph\n             .add_dep("}, {"sha": "9720db9d8ace31a418f165d2ca6cbedcf5297eb3", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -17,6 +17,7 @@ pub use crate::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n         Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n         ProcMacroId, ProcMacroKind, ProcMacroLoadResult, SourceRoot, SourceRootId,\n+        TargetLayoutLoadResult,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "adfae0a1abb387eafc9ff7bb14c6ca6b7da6d982", "filename": "crates/hir-ty/src/layout/target.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -12,6 +12,13 @@ pub fn target_data_layout_query(\n     krate: CrateId,\n ) -> Option<Arc<TargetDataLayout>> {\n     let crate_graph = db.crate_graph();\n-    let target_layout = crate_graph[krate].target_layout.as_ref()?;\n-    Some(Arc::new(TargetDataLayout::parse_from_llvm_datalayout_string(&target_layout).ok()?))\n+    let target_layout = crate_graph[krate].target_layout.as_ref().ok()?;\n+    let res = TargetDataLayout::parse_from_llvm_datalayout_string(&target_layout);\n+    if let Err(_e) = &res {\n+        // FIXME: Print the error here once it implements debug/display\n+        // also logging here is somewhat wrong, but unfortunately this is the earliest place we can\n+        // parse that doesn't impose a dependency to the rust-abi crate for project-model\n+        tracing::error!(\"Failed to parse target data layout for {krate:?}\");\n+    }\n+    res.ok().map(Arc::new)\n }"}, {"sha": "4ead9d4d0a869640c4c3a3e8b055b625af7eabdf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -237,7 +237,7 @@ impl Analysis {\n             Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n-            None,\n+            Err(\"Analysis::from_single_file has no target layout\".into()),\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);"}, {"sha": "267a73ac5bd8819621d38350b0019842a9d9a0d8", "filename": "crates/project-model/src/target_data_layout.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftarget_data_layout.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -1,6 +1,7 @@\n //! Runs `rustc --print target-spec-json` to get the target_data_layout.\n use std::process::Command;\n \n+use anyhow::Result;\n use rustc_hash::FxHashMap;\n \n use crate::{utf8_stdout, ManifestPath};\n@@ -9,7 +10,7 @@ pub(super) fn get(\n     cargo_toml: Option<&ManifestPath>,\n     target: Option<&str>,\n     extra_env: &FxHashMap<String, String>,\n-) -> Option<String> {\n+) -> Result<String> {\n     let output = (|| {\n         if let Some(cargo_toml) = cargo_toml {\n             let mut cmd = Command::new(toolchain::rustc());\n@@ -28,13 +29,13 @@ pub(super) fn get(\n         // using unstable cargo features failed, fall back to using plain rustc\n         let mut cmd = Command::new(toolchain::rustc());\n         cmd.envs(extra_env)\n-            .args([\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"target-spec-json\"])\n+            .args([\"-Z\", \"unstable-options\", \"--print\", \"target-spec-json\"])\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(target) = target {\n             cmd.args([\"--target\", target]);\n         }\n         utf8_stdout(cmd)\n-    })()\n-    .ok()?;\n-    Some(output.split_once(r#\"\"data-layout\": \"\"#)?.1.split_once('\"')?.0.to_owned())\n+    })()?;\n+    (|| Some(output.split_once(r#\"\"data-layout\": \"\"#)?.1.split_once('\"')?.0.to_owned()))()\n+        .ok_or_else(|| anyhow::format_err!(\"could not fetch target-spec-json from command output\"))\n }"}, {"sha": "19ee68569110776124c5b95edab34cf24063f96e", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 79, "deletions": 27, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -29,7 +29,7 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGr\n         rustc_cfg: Vec::new(),\n         cfg_overrides,\n         toolchain: None,\n-        target_layout: None,\n+        target_layout: Err(\"target_data_layout not loaded\".into()),\n     };\n     to_crate_graph(project_workspace)\n }\n@@ -151,7 +151,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -221,7 +223,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -300,7 +304,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -379,7 +385,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"debug_assertions\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -467,7 +475,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -553,7 +563,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -625,7 +637,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -706,7 +720,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -787,7 +803,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -875,7 +893,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -952,7 +972,9 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1024,7 +1046,9 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1105,7 +1129,9 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1186,7 +1212,9 @@ fn cargo_hello_world_project_model() {\n                                 \"test\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1274,7 +1302,9 @@ fn cargo_hello_world_project_model() {\n                                 \"feature=use_std\",\n                             ],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"target_data_layout not loaded\",\n+                        ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n@@ -1343,7 +1373,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1388,7 +1420,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1423,7 +1457,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1458,7 +1494,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1493,7 +1531,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1538,7 +1578,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1573,7 +1615,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1681,7 +1725,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1716,7 +1762,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1751,7 +1799,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },\n@@ -1786,7 +1836,9 @@ fn rust_project_hello_world_project_model() {\n                         potential_cfg_options: CfgOptions(\n                             [],\n                         ),\n-                        target_layout: None,\n+                        target_layout: Err(\n+                            \"rust-project.json projects have no target layout set\",\n+                        ),\n                         env: Env {\n                             entries: {},\n                         },"}, {"sha": "9aa04eaa75a4298d2701d4b8fb28c8a0f8fae3e6", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384fa4b84ae881f402933e105c5c92b8b471036a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=384fa4b84ae881f402933e105c5c92b8b471036a", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n use anyhow::{format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, LangCrateOrigin, ProcMacroLoadResult,\n+    FileId, LangCrateOrigin, ProcMacroLoadResult, TargetLayoutLoadResult,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -79,7 +79,7 @@ pub enum ProjectWorkspace {\n         rustc_cfg: Vec<CfgFlag>,\n         cfg_overrides: CfgOverrides,\n         toolchain: Option<Version>,\n-        target_layout: Option<String>,\n+        target_layout: Result<String, String>,\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n     Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n@@ -249,6 +249,9 @@ impl ProjectWorkspace {\n                     config.target.as_deref(),\n                     &config.extra_env,\n                 );\n+                if let Err(e) = &data_layout {\n+                    tracing::error!(%e, \"failed fetching data layout for {cargo_toml:?} workspace\");\n+                }\n                 ProjectWorkspace::Cargo {\n                     cargo,\n                     build_scripts: WorkspaceBuildScripts::default(),\n@@ -257,7 +260,7 @@ impl ProjectWorkspace {\n                     rustc_cfg,\n                     cfg_overrides,\n                     toolchain,\n-                    target_layout: data_layout,\n+                    target_layout: data_layout.map_err(|it| it.to_string()),\n                 }\n             }\n         };\n@@ -540,7 +543,7 @@ impl ProjectWorkspace {\n                 project,\n                 sysroot,\n                 extra_env,\n-                None,\n+                Err(\"rust-project.json projects have no target layout set\".into()),\n             ),\n             ProjectWorkspace::Cargo {\n                 cargo,\n@@ -560,10 +563,19 @@ impl ProjectWorkspace {\n                 rustc_cfg.clone(),\n                 cfg_overrides,\n                 build_scripts,\n-                target_layout.as_deref().map(Arc::from),\n+                match target_layout.as_ref() {\n+                    Ok(it) => Ok(Arc::from(it.as_str())),\n+                    Err(it) => Err(Arc::from(it.as_str())),\n+                },\n             ),\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n-                detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot, None)\n+                detached_files_to_crate_graph(\n+                    rustc_cfg.clone(),\n+                    load,\n+                    files,\n+                    sysroot,\n+                    Err(\"detached file projects have no target layout set\".into()),\n+                )\n             }\n         };\n         if crate_graph.patch_cfg_if() {\n@@ -582,7 +594,7 @@ fn project_json_to_crate_graph(\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n-    target_layout: Option<Arc<str>>,\n+    target_layout: TargetLayoutLoadResult,\n ) -> CrateGraph {\n     let mut crate_graph = CrateGraph::default();\n     let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n@@ -686,7 +698,7 @@ fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n-    target_layout: Option<Arc<str>>,\n+    target_layout: TargetLayoutLoadResult,\n ) -> CrateGraph {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n@@ -852,7 +864,7 @@ fn detached_files_to_crate_graph(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     detached_files: &[AbsPathBuf],\n     sysroot: &Option<Sysroot>,\n-    target_layout: Option<Arc<str>>,\n+    target_layout: TargetLayoutLoadResult,\n ) -> CrateGraph {\n     let _p = profile::span(\"detached_files_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n@@ -917,7 +929,7 @@ fn handle_rustc_crates(\n     cfg_options: &CfgOptions,\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n-    target_layout: Option<Arc<str>>,\n+    target_layout: TargetLayoutLoadResult,\n ) {\n     let mut rustc_pkg_crates = FxHashMap::default();\n     // The root package of the rustc-dev component is rustc_driver, so we match that\n@@ -1039,7 +1051,7 @@ fn add_target_crate_root(\n     file_id: FileId,\n     cargo_name: &str,\n     is_proc_macro: bool,\n-    target_layout: Option<Arc<str>>,\n+    target_layout: TargetLayoutLoadResult,\n ) -> CrateId {\n     let edition = pkg.edition;\n     let mut potential_cfg_options = cfg_options.clone();\n@@ -1108,7 +1120,7 @@ fn sysroot_to_crate_graph(\n     crate_graph: &mut CrateGraph,\n     sysroot: &Sysroot,\n     rustc_cfg: Vec<CfgFlag>,\n-    target_layout: Option<Arc<str>>,\n+    target_layout: TargetLayoutLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n ) -> (SysrootPublicDeps, Option<CrateId>) {\n     let _p = profile::span(\"sysroot_to_crate_graph\");"}]}