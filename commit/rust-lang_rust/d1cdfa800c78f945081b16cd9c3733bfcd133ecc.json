{"sha": "d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "node_id": "C_kwDOAAsO6NoAKGQxY2RmYTgwMGM3OGY5NDUwODFiMTZjZDljMzczM2JmY2QxMzNlY2M", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-20T18:05:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-20T18:05:31Z"}, "message": "Merge #10600\n\n10600: minor: Make some functions non-generic r=Veykril a=lnicola\n\nThis reduces `text` size by 10192 bytes (0.064% :cry:), with no apparent change in performance.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "2f07720cfa66f557d3daf0a9424989be2e1d1ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f07720cfa66f557d3daf0a9424989be2e1d1ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcFprCRBK7hj4Ov3rIwAAxPIIABfyjCCeoHWZc9WnRhjgkyml\nhjzqZfec8tM9/qp9GUfQgIhpVtWyiLFkOgZcephttd57bKWtsJZjxT/gWYkLB/WH\nv3zT3UyD0ZxX5DlypBC3CRT9GgWvOMFjauaz190/Mk2T+dRctFvbwRh3p1scHj3P\naLMwutZ75f8fwdmTMJvHZ5cvhFko9sNwCBNtpFmlhQkRfIbW5aKBwhM/lXC903C/\nKYnWiqh1m7w8aRNksnqEfqLZYihhs4N8jJIsGuP5h5+zsFpAHyq+I6AB1VnrFklK\nZRtkK7uJHhGErza/d+bAyX+Vw+a53m9gf+OtzdFoKAGSia4FrvMcMo4Vr3hMTuQ=\n=vV9l\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f07720cfa66f557d3daf0a9424989be2e1d1ab4\nparent c2e36291f380b855fa924d28e6b0c9e4a3dcd784\nparent 24eca25d8aa06e1cf301f196789cff884cb32b33\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634753131 +0000\ncommitter GitHub <noreply@github.com> 1634753131 +0000\n\nMerge #10600\n\n10600: minor: Make some functions non-generic r=Veykril a=lnicola\n\nThis reduces `text` size by 10192 bytes (0.064% :cry:), with no apparent change in performance.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "html_url": "https://github.com/rust-lang/rust/commit/d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e36291f380b855fa924d28e6b0c9e4a3dcd784", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e36291f380b855fa924d28e6b0c9e4a3dcd784", "html_url": "https://github.com/rust-lang/rust/commit/c2e36291f380b855fa924d28e6b0c9e4a3dcd784"}, {"sha": "24eca25d8aa06e1cf301f196789cff884cb32b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/24eca25d8aa06e1cf301f196789cff884cb32b33", "html_url": "https://github.com/rust-lang/rust/commit/24eca25d8aa06e1cf301f196789cff884cb32b33"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2926f32b63018fba53eadceb80725eb889e258d5", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "patch": "@@ -645,7 +645,7 @@ impl<'a> Ctx<'a> {\n     fn lower_generic_params_and_inner_items(\n         &mut self,\n         owner: GenericsOwner<'_>,\n-        node: &impl ast::HasGenericParams,\n+        node: &dyn ast::HasGenericParams,\n     ) -> Interned<GenericParams> {\n         // Generics are part of item headers and may contain inner items we need to collect.\n         if let Some(params) = node.generic_param_list() {\n@@ -661,7 +661,7 @@ impl<'a> Ctx<'a> {\n     fn lower_generic_params(\n         &mut self,\n         owner: GenericsOwner<'_>,\n-        node: &impl ast::HasGenericParams,\n+        node: &dyn ast::HasGenericParams,\n     ) -> Interned<GenericParams> {\n         let mut generics = GenericParams::default();\n         match owner {\n@@ -697,7 +697,7 @@ impl<'a> Ctx<'a> {\n         Interned::new(generics)\n     }\n \n-    fn lower_type_bounds(&mut self, node: &impl ast::HasTypeBounds) -> Vec<Interned<TypeBound>> {\n+    fn lower_type_bounds(&mut self, node: &dyn ast::HasTypeBounds) -> Vec<Interned<TypeBound>> {\n         match node.type_bound_list() {\n             Some(bound_list) => bound_list\n                 .bounds()\n@@ -707,7 +707,7 @@ impl<'a> Ctx<'a> {\n         }\n     }\n \n-    fn lower_visibility(&mut self, item: &impl ast::HasVisibility) -> RawVisibilityId {\n+    fn lower_visibility(&mut self, item: &dyn ast::HasVisibility) -> RawVisibilityId {\n         let vis = match self.forced_visibility {\n             Some(vis) => return vis,\n             None => RawVisibility::from_ast_with_hygiene(self.db, item.visibility(), &self.hygiene),"}, {"sha": "3aad9d4cc8ac0134afd69f3e4e2cebcc09bb9b78", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "patch": "@@ -1037,7 +1037,7 @@ impl<'a> InferenceContext<'a> {\n         if let Some(expected_ty) = expected_output.to_option(&mut self.table) {\n             self.table.fudge_inference(|table| {\n                 if table.try_unify(&expected_ty, &output).is_ok() {\n-                    table.resolve_with_fallback(inputs, |var, kind, _, _| match kind {\n+                    table.resolve_with_fallback(inputs, &|var, kind, _, _| match kind {\n                         chalk_ir::VariableKind::Ty(tk) => var.to_ty(&Interner, tk).cast(&Interner),\n                         chalk_ir::VariableKind::Lifetime => {\n                             var.to_lifetime(&Interner).cast(&Interner)"}, {"sha": "852e545bd0e94c26d0abcf4505893d71b07e9701", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1cdfa800c78f945081b16cd9c3733bfcd133ecc/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=d1cdfa800c78f945081b16cd9c3733bfcd133ecc", "patch": "@@ -128,7 +128,7 @@ pub(crate) fn unify(\n     Some(Substitution::from_iter(\n         &Interner,\n         vars.iter(&Interner)\n-            .map(|v| table.resolve_with_fallback(v.assert_ty_ref(&Interner).clone(), fallback)),\n+            .map(|v| table.resolve_with_fallback(v.assert_ty_ref(&Interner).clone(), &fallback)),\n     ))\n }\n \n@@ -291,7 +291,7 @@ impl<'a> InferenceTable<'a> {\n     pub(crate) fn resolve_with_fallback<T>(\n         &mut self,\n         t: T,\n-        fallback: impl Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg,\n+        fallback: &dyn Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg,\n     ) -> T::Result\n     where\n         T: HasInterner<Interner = Interner> + Fold<Interner>,\n@@ -303,7 +303,7 @@ impl<'a> InferenceTable<'a> {\n         &mut self,\n         var_stack: &mut Vec<InferenceVar>,\n         t: T,\n-        fallback: &impl Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg,\n+        fallback: &dyn Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg,\n     ) -> T::Result\n     where\n         T: HasInterner<Interner = Interner> + Fold<Interner>,\n@@ -319,7 +319,7 @@ impl<'a> InferenceTable<'a> {\n     where\n         T: HasInterner<Interner = Interner> + Fold<Interner>,\n     {\n-        self.resolve_with_fallback(t, |_, _, d, _| d)\n+        self.resolve_with_fallback(t, &|_, _, d, _| d)\n     }\n \n     /// Unify two types and register new trait goals that arise from that."}]}