{"sha": "7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "node_id": "C_kwDOAAsO6NoAKDcxOTIyOTdjMjg3OGIyMmU0NGNhNWJjNThmNWY3NTQ0YjMzY2RmNGE", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-27T17:58:23Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-30T18:12:58Z"}, "message": "additional checks for conditionally compiled code", "tree": {"sha": "f1d590dad8ebf21108af06f8fcffa5d6bccb1344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d590dad8ebf21108af06f8fcffa5d6bccb1344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "html_url": "https://github.com/rust-lang/rust/commit/7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5ff38f92971141d2f1d39cd0ddc80188f746de", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5ff38f92971141d2f1d39cd0ddc80188f746de", "html_url": "https://github.com/rust-lang/rust/commit/1a5ff38f92971141d2f1d39cd0ddc80188f746de"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "cb6e2a44afbe3fea90d95c01546d2e046d80a4aa", "filename": "clippy_lints/src/unit_like_struct_brackets.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/clippy_lints%2Fsrc%2Funit_like_struct_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/clippy_lints%2Fsrc%2Funit_like_struct_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_like_struct_brackets.rs?ref=7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "patch": "@@ -1,8 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet_opt};\n use rustc_ast::ast::{Item, ItemKind, VariantData};\n use rustc_errors::Applicability;\n+use rustc_lexer::TokenKind;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -28,9 +30,9 @@ declare_lint_pass!(UnitLikeStructBrackets => [UNIT_LIKE_STRUCT_BRACKETS]);\n \n impl EarlyLintPass for UnitLikeStructBrackets {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Struct(var_data, _) = &item.kind && has_no_fields(var_data) {\n-            let span_after_ident = item.span.with_lo(item.ident.span.hi());\n+        let span_after_ident = item.span.with_lo(item.ident.span.hi());\n \n+        if let ItemKind::Struct(var_data, _) = &item.kind && has_no_fields(cx, var_data, span_after_ident) {\n             span_lint_and_sugg(\n                 cx,\n                 UNIT_LIKE_STRUCT_BRACKETS,\n@@ -44,9 +46,51 @@ impl EarlyLintPass for UnitLikeStructBrackets {\n     }\n }\n \n-fn has_no_fields(var_data: &VariantData) -> bool {\n+fn has_fields_in_hir(var_data: &VariantData) -> bool {\n     match var_data {\n-        VariantData::Struct(defs, _) | VariantData::Tuple(defs, _) => defs.is_empty(),\n-        VariantData::Unit(_) => false,\n+        VariantData::Struct(defs, _) | VariantData::Tuple(defs, _) => !defs.is_empty(),\n+        VariantData::Unit(_) => true,\n+    }\n+}\n+\n+fn has_no_ident_token(braces_span_str: &str) -> bool {\n+    !rustc_lexer::tokenize(braces_span_str).any(|t| t.kind == TokenKind::Ident)\n+}\n+\n+fn has_no_fields(cx: &EarlyContext<'_>, var_data: &VariantData, braces_span: Span) -> bool {\n+    if has_fields_in_hir(var_data) {\n+        return false;\n+    }\n+\n+    // there might still be field declarations hidden from HIR\n+    // (conditionaly compiled code using #[cfg(..)])\n+\n+    let Some(braces_span_str) = snippet_opt(cx, braces_span) else {\n+        return false;\n+    };\n+\n+    has_no_ident_token(braces_span_str.as_ref())\n+}\n+\n+#[cfg(test)]\n+mod unit_test {\n+    use super::*;\n+\n+    #[test]\n+    fn test_has_no_ident_token() {\n+        let input = \"{ field: u8 }\";\n+        assert!(!has_no_ident_token(input));\n+\n+        let input = \"(u8, String);\";\n+        assert!(!has_no_ident_token(input));\n+\n+        let input = \" {\n+                // test = 5\n+        }\n+        \";\n+        assert!(has_no_ident_token(input));\n+\n+        let input = \" ();\";\n+        assert!(has_no_ident_token(input));\n     }\n }"}, {"sha": "78764337ec0f3c9fbe4e2f49953ccb2b174908f0", "filename": "tests/ui/unit_like_struct_brackets.fixed", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/tests%2Fui%2Funit_like_struct_brackets.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/tests%2Fui%2Funit_like_struct_brackets.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_like_struct_brackets.fixed?ref=7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "patch": "@@ -5,8 +5,17 @@\n pub struct MyEmptyStruct; // should trigger lint\n struct MyEmptyTupleStruct; // should trigger lint\n \n+// should not trigger lint\n+struct MyCfgStruct {\n+    #[cfg(feature = \"thisisneverenabled\")]\n+    field: u8,\n+}\n+\n+// should not trigger lint\n+struct MyCfgTupleStruct(#[cfg(feature = \"thisisneverenabled\")] u8);\n+\n+// should not trigger lint\n struct MyStruct {\n-    // should not trigger lint\n     field: u8,\n }\n struct MyTupleStruct(usize, String); // should not trigger lint"}, {"sha": "c43f97adfe90f25ac1f64e1e2d84ec8afdf92259", "filename": "tests/ui/unit_like_struct_brackets.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/tests%2Fui%2Funit_like_struct_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7192297c2878b22e44ca5bc58f5f7544b33cdf4a/tests%2Fui%2Funit_like_struct_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_like_struct_brackets.rs?ref=7192297c2878b22e44ca5bc58f5f7544b33cdf4a", "patch": "@@ -5,8 +5,17 @@\n pub struct MyEmptyStruct {} // should trigger lint\n struct MyEmptyTupleStruct(); // should trigger lint\n \n+// should not trigger lint\n+struct MyCfgStruct {\n+    #[cfg(feature = \"thisisneverenabled\")]\n+    field: u8,\n+}\n+\n+// should not trigger lint\n+struct MyCfgTupleStruct(#[cfg(feature = \"thisisneverenabled\")] u8);\n+\n+// should not trigger lint\n struct MyStruct {\n-    // should not trigger lint\n     field: u8,\n }\n struct MyTupleStruct(usize, String); // should not trigger lint"}]}