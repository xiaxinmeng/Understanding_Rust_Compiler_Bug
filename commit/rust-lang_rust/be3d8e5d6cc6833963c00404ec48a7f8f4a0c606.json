{"sha": "be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlM2Q4ZTVkNmNjNjgzMzk2M2MwMDQwNGVjNDhhN2Y4ZjRhMGM2MDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-19T11:43:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-21T11:32:03Z"}, "message": "Add missing code examples on HashMap types", "tree": {"sha": "b6582946757e9ea584a993209dcea3521140fdd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6582946757e9ea584a993209dcea3521140fdd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "html_url": "https://github.com/rust-lang/rust/commit/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953f33c5cbe61817ed84e311731b132006a255ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/953f33c5cbe61817ed84e311731b132006a255ca", "html_url": "https://github.com/rust-lang/rust/commit/953f33c5cbe61817ed84e311731b132006a255ca"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "7c1892c8bfde569d3cb07b50e7ae3054609a436d", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "patch": "@@ -1102,6 +1102,16 @@ where\n /// documentation for more.\n ///\n /// [`iter`]: HashMap::iter\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     base: base::Iter<'a, K, V>,\n@@ -1129,6 +1139,16 @@ impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n /// documentation for more.\n ///\n /// [`iter_mut`]: HashMap::iter_mut\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.iter_mut();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     base: base::IterMut<'a, K, V>,\n@@ -1148,6 +1168,16 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.into_iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     base: base::IntoIter<K, V>,\n@@ -1167,6 +1197,16 @@ impl<K, V> IntoIter<K, V> {\n /// documentation for more.\n ///\n /// [`keys`]: HashMap::keys\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.keys();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1194,6 +1234,16 @@ impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// documentation for more.\n ///\n /// [`values`]: HashMap::values\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_values = map.values();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1221,6 +1271,16 @@ impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n /// documentation for more.\n ///\n /// [`drain`]: HashMap::drain\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.drain();\n+/// ```\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     base: base::Drain<'a, K, V>,\n@@ -1239,6 +1299,18 @@ impl<'a, K, V> Drain<'a, K, V> {\n /// This `struct` is created by the [`drain_filter`] method on [`HashMap`].\n ///\n /// [`drain_filter`]: HashMap::drain_filter\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(hash_drain_filter)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.drain_filter(|_k, v| *v % 2 == 0);\n+/// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n pub struct DrainFilter<'a, K, V, F>\n where\n@@ -1253,6 +1325,16 @@ where\n /// documentation for more.\n ///\n /// [`values_mut`]: HashMap::values_mut\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_values = map.values_mut();\n+/// ```\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n@@ -1264,6 +1346,18 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: HashMap::into_keys\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(map_into_keys_values)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.into_keys();\n+/// ```\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1275,6 +1369,18 @@ pub struct IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: HashMap::into_values\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(map_into_keys_values)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.into_values();\n+/// ```\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1285,7 +1391,6 @@ pub struct IntoValues<K, V> {\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n ///\n /// [`HashMap::raw_entry_mut`]: HashMap::raw_entry_mut\n-\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a mut HashMap<K, V, S>,"}]}