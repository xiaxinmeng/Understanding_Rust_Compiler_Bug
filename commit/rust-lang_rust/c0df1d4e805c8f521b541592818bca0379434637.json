{"sha": "c0df1d4e805c8f521b541592818bca0379434637", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZGYxZDRlODA1YzhmNTIxYjU0MTU5MjgxOGJjYTAzNzk0MzQ2Mzc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-31T16:52:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-31T16:52:46Z"}, "message": "Rollup merge of #42252 - stjepang:clarify-alignof-docs, r=nikomatsakis\n\nClarify the docs for align_of and its variants\n\nIt's okay to have unaligned raw pointers and then use `ptr::write_unaligned` and `ptr::read_unaligned`.\nHowever, using unaligned `&T` and `&mut T` would be undefined behavior.\n\nThe current documentation seems to indicate that everything has to be aligned, but in reality only references do. This PR changes the text of docs accordingly.\n\nr? @sfackler", "tree": {"sha": "578d011c471a74004dbf1dede16149c50552b033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578d011c471a74004dbf1dede16149c50552b033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0df1d4e805c8f521b541592818bca0379434637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0df1d4e805c8f521b541592818bca0379434637", "html_url": "https://github.com/rust-lang/rust/commit/c0df1d4e805c8f521b541592818bca0379434637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0df1d4e805c8f521b541592818bca0379434637/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b851d1cdb47b5961a4b37b0645232a18e122663f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b851d1cdb47b5961a4b37b0645232a18e122663f", "html_url": "https://github.com/rust-lang/rust/commit/b851d1cdb47b5961a4b37b0645232a18e122663f"}, {"sha": "c25e271858d3aa131814a6c60669783d20b5e89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25e271858d3aa131814a6c60669783d20b5e89e", "html_url": "https://github.com/rust-lang/rust/commit/c25e271858d3aa131814a6c60669783d20b5e89e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d11ad76d65dfe9afd19433f4c1156e51e6f31515", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0df1d4e805c8f521b541592818bca0379434637/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0df1d4e805c8f521b541592818bca0379434637/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c0df1d4e805c8f521b541592818bca0379434637", "patch": "@@ -220,7 +220,7 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n \n /// Returns the [ABI]-required minimum alignment of a type.\n ///\n-/// Every valid address of a value of the type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n ///\n@@ -243,7 +243,7 @@ pub fn min_align_of<T>() -> usize {\n \n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n-/// Every valid address of a value of the type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n ///\n@@ -264,7 +264,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n \n /// Returns the [ABI]-required minimum alignment of a type.\n ///\n-/// Every valid address of a value of the type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n ///\n@@ -285,7 +285,7 @@ pub fn align_of<T>() -> usize {\n \n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n-/// Every valid address of a value of the type `T` must be a multiple of this number.\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n ///\n /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n ///"}]}