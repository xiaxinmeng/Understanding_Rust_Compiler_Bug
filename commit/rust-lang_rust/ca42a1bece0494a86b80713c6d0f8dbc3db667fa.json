{"sha": "ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "node_id": "C_kwDOAAsO6NoAKGNhNDJhMWJlY2UwNDk0YTg2YjgwNzEzYzZkMGY4ZGJjM2RiNjY3ZmE", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-01T21:46:05Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-01T22:05:43Z"}, "message": "Update the documentation for `{As,Into,From}Raw{Fd,Handle,Socket}`.\n\nThis change weakens the descriptions of the\n`{as,into,from}_raw_{fd,handle,socket}` descriptions from saying that\nthey *do* express ownership relations to say that they are *typically used*\nin ways that express ownership relations. This needed needed since, for\nexample, std's own [`RawFd`] implements `{As,From,Into}Fd` without any of\nthe ownership relationships.\n\nThis adds proper `# Safety` comments to `from_raw_{fd,handle,socket}`,\nadds the requirement that raw handles be not opened with the\n`FILE_FLAG_OVERLAPPED` flag, and merges the `OwnedHandle::from_raw_handle`\ncomment into the main `FromRawHandle::from_raw_handle` comment.\n\nAnd, this changes `HandleOrNull` and `HandleOrInvalid` to not implement\n`FromRawHandle`, since they are intended for limited use in FFI situations,\nand not for generic use, and they have constraints that are stronger than\nthe those of `FromRawHandle`.\n\n[`RawFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/type.RawFd.html", "tree": {"sha": "0242db542f2b38b7a0fb5adb8b30cad5193fc123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0242db542f2b38b7a0fb5adb8b30cad5193fc123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "html_url": "https://github.com/rust-lang/rust/commit/ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410", "html_url": "https://github.com/rust-lang/rust/commit/ad88831cd50ffe9cb9006bbdcb7fc9d97142e410"}], "stats": {"total": 164, "additions": 101, "deletions": 63}, "files": [{"sha": "6925269c8f1797b684f13c91c3a8aeb73cd4ab3d", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "patch": "@@ -24,9 +24,14 @@ pub type RawFd = raw::c_int;\n pub trait AsRawFd {\n     /// Extracts the raw file descriptor.\n     ///\n-    /// This method does **not** pass ownership of the raw file descriptor\n-    /// to the caller. The descriptor is only guaranteed to be valid while\n-    /// the original object has not yet been destroyed.\n+    /// This function is typically used to **borrow** an owned file descriptor.\n+    /// When used in this way, this method does **not** pass ownership of the\n+    /// raw file descriptor to the caller, and the file descriptor is only\n+    /// guaranteed to be valid while the original object has not yet been\n+    /// destroyed.\n+    ///\n+    /// However, borrowing is not strictly required. See [`AsFd::as_fd`]\n+    /// for an API which strictly borrows a handle.\n     ///\n     /// # Example\n     ///\n@@ -55,15 +60,17 @@ pub trait FromRawFd {\n     /// Constructs a new instance of `Self` from the given raw file\n     /// descriptor.\n     ///\n-    /// This function **consumes ownership** of the specified file\n-    /// descriptor. The returned object will take responsibility for closing\n-    /// it when the object goes out of scope.\n+    /// This function is typically used to **consume ownership** of the\n+    /// specified file descriptor. When used in this way, the returned object\n+    /// will take responsibility for closing it when the object goes out of\n+    /// scope.\n+    ///\n+    /// However, consuming ownership is not strictly required. See\n+    /// [`FromFd::from_fd`] for an API which strictly consumes ownership.\n     ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n+    /// # Safety\n+    ///\n+    /// The `fd` passed in must be a valid an open file descriptor.\n     ///\n     /// # Example\n     ///\n@@ -94,9 +101,12 @@ pub trait FromRawFd {\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor.\n     ///\n-    /// This function **transfers ownership** of the underlying file descriptor\n-    /// to the caller. Callers are then the unique owners of the file descriptor\n-    /// and must close the descriptor once it's no longer needed.\n+    /// This function is typically used to **transfer ownership** of the underlying\n+    /// file descriptor to the caller. When used in this way, callers are then the unique\n+    /// owners of the file descriptor and must close it once it's no longer needed.\n+    ///\n+    /// However, transferring ownership is not strictly required. See\n+    /// [`IntoFd::into_fd`] for an API which strictly transfers ownership.\n     ///\n     /// # Example\n     ///"}, {"sha": "b9951a4249faeeea41771a47ac0a7c722e76982f", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "patch": "@@ -210,29 +210,13 @@ impl IntoRawHandle for OwnedHandle {\n }\n \n impl FromRawHandle for OwnedHandle {\n-    /// Constructs a new instance of `Self` from the given raw handle.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `handle` must be open and suitable for\n-    /// assuming ownership. The resource must not require any cleanup other\n-    /// than `CloseHandle`.\n-    ///\n-    /// In particular, it must not be used with handles to open registry\n-    /// keys which need to be closed with [`RegCloseKey`] instead.\n-    ///\n-    /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-    /// sometimes a valid handle value. See [here] for the full story.\n-    ///\n-    /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n-    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         Self { handle }\n     }\n }\n \n-impl FromRawHandle for HandleOrNull {\n+impl HandleOrNull {\n     /// Constructs a new instance of `Self` from the given `RawHandle` returned\n     /// from a Windows API that uses null to indicate failure, such as\n     /// `CreateThread`.\n@@ -242,9 +226,9 @@ impl FromRawHandle for HandleOrNull {\n     ///\n     /// # Safety\n     ///\n-    /// The resource pointed to by `handle` must be either open and otherwise\n-    /// unowned, or null. Note that not all Windows APIs use null for errors;\n-    /// see [here] for the full story.\n+    /// The passed `handle` value must either satisfy the safety requirements\n+    /// of [`FromRawHandle::from_raw_handle`], or be null. Note that not all\n+    /// Windows APIs use null for errors; see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n@@ -253,7 +237,7 @@ impl FromRawHandle for HandleOrNull {\n     }\n }\n \n-impl FromRawHandle for HandleOrInvalid {\n+impl HandleOrInvalid {\n     /// Constructs a new instance of `Self` from the given `RawHandle` returned\n     /// from a Windows API that uses `INVALID_HANDLE_VALUE` to indicate\n     /// failure, such as `CreateFileW`.\n@@ -263,10 +247,10 @@ impl FromRawHandle for HandleOrInvalid {\n     ///\n     /// # Safety\n     ///\n-    /// The resource pointed to by `handle` must be either open and otherwise\n-    /// unowned, null, or equal to `INVALID_HANDLE_VALUE` (-1). Note that not\n-    /// all Windows APIs use `INVALID_HANDLE_VALUE` for errors; see [here] for\n-    /// the full story.\n+    /// The passed `handle` value must either satisfy the safety requirements\n+    /// of [`FromRawHandle::from_raw_handle`], or be\n+    /// `INVALID_HANDLE_VALUE` (-1). Note that not all Windows APIs use\n+    /// `INVALID_HANDLE_VALUE` for errors; see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]"}, {"sha": "580ebfe92d75d52ca67666c47dc212b1291e099c", "filename": "library/std/src/os/windows/io/raw.rs", "status": "modified", "additions": 68, "deletions": 24, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca42a1bece0494a86b80713c6d0f8dbc3db667fa/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs?ref=ca42a1bece0494a86b80713c6d0f8dbc3db667fa", "patch": "@@ -22,7 +22,15 @@ pub type RawSocket = raw::SOCKET;\n /// Extracts raw handles.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawHandle {\n-    /// Extracts the raw handle, without taking any ownership.\n+    /// Extracts the raw handle.\n+    ///\n+    /// This function is typically used to **borrow** an owned handle.\n+    /// When used in this way, this method does **not** pass ownership of the\n+    /// raw handle to the caller, and the handle is only guaranteed\n+    /// to be valid while the original object has not yet been destroyed.\n+    ///\n+    /// However, borrowing is not strictly required. See [`AsHandle::as_handle`]\n+    /// for an API which strictly borrows a handle.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_raw_handle(&self) -> RawHandle;\n }\n@@ -32,15 +40,29 @@ pub trait AsRawHandle {\n pub trait FromRawHandle {\n     /// Constructs a new I/O object from the specified raw handle.\n     ///\n-    /// This function will **consume ownership** of the handle given,\n-    /// passing responsibility for closing the handle to the returned\n-    /// object.\n+    /// This function is typically used to **consume ownership** of the handle\n+    /// given, passing responsibility for closing the handle to the returned\n+    /// object. When used in this way, the returned object\n+    /// will take responsibility for closing it when the object goes out of\n+    /// scope.\n+    ///\n+    /// However, consuming ownership is not strictly required. See\n+    /// [`FromHandle::from_handle`] for an API which strictly consumes ownership.\n+    ///\n+    /// # Safety\n     ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n+    /// The `handle` passed in must:\n+    ///   - be a valid an open handle,\n+    ///   - be a handle opened for synchronous I/O, *without* the\n+    ///     `FILE_FLAG_OVERLAPPED` flag, and\n+    ///   - be a handle for a resource that may be freed via [`CloseHandle`]\n+    ///     (as opposed to `RegCloseKey` or other close functions).\n+    ///\n+    /// Note that the handle *may* have the value `INVALID_HANDLE_VALUE` (-1),\n+    /// which is sometimes a valid handle value. See [here] for the full story.\n+    ///\n+    /// [`CloseHandle`]: https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle\n+    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self;\n }\n@@ -51,9 +73,12 @@ pub trait FromRawHandle {\n pub trait IntoRawHandle {\n     /// Consumes this object, returning the raw underlying handle.\n     ///\n-    /// This function **transfers ownership** of the underlying handle to the\n-    /// caller. Callers are then the unique owners of the handle and must close\n-    /// it once it's no longer needed.\n+    /// This function is typically used to **transfer ownership** of the underlying\n+    /// handle to the caller. When used in this way, callers are then the unique\n+    /// owners of the handle and must close it once it's no longer needed.\n+    ///\n+    /// However, transferring ownership is not strictly required. See\n+    /// [`IntoHandle::into_handle`] for an API which strictly transfers ownership.\n     #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_handle(self) -> RawHandle;\n }\n@@ -130,24 +155,40 @@ impl IntoRawHandle for fs::File {\n /// Extracts raw sockets.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawSocket {\n-    /// Extracts the underlying raw socket from this object.\n+    /// Extracts the raw socket.\n+    ///\n+    /// This function is typically used to **borrow** an owned socket.\n+    /// When used in this way, this method does **not** pass ownership of the\n+    /// raw socket to the caller, and the socket is only guaranteed\n+    /// to be valid while the original object has not yet been destroyed.\n+    ///\n+    /// However, borrowing is not strictly required. See [`AsSocket::as_socket`]\n+    /// for an API which strictly borrows a socket.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_raw_socket(&self) -> RawSocket;\n }\n \n /// Creates I/O objects from raw sockets.\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawSocket {\n-    /// Creates a new I/O object from the given raw socket.\n+    /// Constructs a new I/O object from the specified raw socket.\n+    ///\n+    /// This function is typically used to **consume ownership** of the socket\n+    /// given, passing responsibility for closing the socket to the returned\n+    /// object. When used in this way, the returned object\n+    /// will take responsibility for closing it when the object goes out of\n+    /// scope.\n     ///\n-    /// This function will **consume ownership** of the socket provided and\n-    /// it will be closed when the returned object goes out of scope.\n+    /// However, consuming ownership is not strictly required. See\n+    /// [`FromSocket::from_socket`] for an API which strictly consumes ownership.\n     ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n+    /// # Safety\n+    ///\n+    /// The `socket` passed in must:\n+    ///   - be a valid an open socket,\n+    ///   - be a handle for a resource that may be freed via [`closesocket`].\n+    ///\n+    /// [`closesocket`]: https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-closesocket\n     #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_socket(sock: RawSocket) -> Self;\n }\n@@ -158,9 +199,12 @@ pub trait FromRawSocket {\n pub trait IntoRawSocket {\n     /// Consumes this object, returning the raw underlying socket.\n     ///\n-    /// This function **transfers ownership** of the underlying socket to the\n-    /// caller. Callers are then the unique owners of the socket and must close\n-    /// it once it's no longer needed.\n+    /// This function is typically used to **transfer ownership** of the underlying\n+    /// socket to the caller. When used in this way, callers are then the unique\n+    /// owners of the socket and must close it once it's no longer needed.\n+    ///\n+    /// However, transferring ownership is not strictly required. See\n+    /// [`IntoSocket::into_socket`] for an API which strictly transfers ownership.\n     #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_socket(self) -> RawSocket;\n }"}]}