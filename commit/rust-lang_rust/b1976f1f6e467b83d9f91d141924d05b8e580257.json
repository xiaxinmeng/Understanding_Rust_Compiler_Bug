{"sha": "b1976f1f6e467b83d9f91d141924d05b8e580257", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTc2ZjFmNmU0NjdiODNkOWY5MWQxNDE5MjRkMDViOGU1ODAyNTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-30T22:24:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-01T17:40:46Z"}, "message": "std: Remove index notation on slice iterators\n\nThese implementations were intended to be unstable, but currently the stability\nattributes cannot handle a stable trait with an unstable `impl` block. This\ncommit also audits the rest of the standard library for explicitly-`#[unstable]`\nimpl blocks. No others were removed but some annotations were changed to\n`#[stable]` as they're defacto stable anyway.\n\nOne particularly interesting `impl` marked `#[stable]` as part of this commit\nis the `Add<&[T]>` impl for `Vec<T>`, which uses `push_all` and implicitly\nclones all elements of the vector provided.\n\nCloses #24791", "tree": {"sha": "a9cba09f027e8e267f2ddd7f9e96eabcee1a1763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9cba09f027e8e267f2ddd7f9e96eabcee1a1763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1976f1f6e467b83d9f91d141924d05b8e580257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1976f1f6e467b83d9f91d141924d05b8e580257", "html_url": "https://github.com/rust-lang/rust/commit/b1976f1f6e467b83d9f91d141924d05b8e580257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1976f1f6e467b83d9f91d141924d05b8e580257/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e962870420fef19e8f23a299dbe7499aca1656a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e962870420fef19e8f23a299dbe7499aca1656a5", "html_url": "https://github.com/rust-lang/rust/commit/e962870420fef19e8f23a299dbe7499aca1656a5"}], "stats": {"total": 223, "additions": 30, "deletions": 193}, "files": [{"sha": "5b7d05db27ff22e23192923ff99072eafbe74961", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -740,8 +740,7 @@ impl<'a> FromIterator<&'a str> for String {\n     }\n }\n \n-#[unstable(feature = \"collections\",\n-           reason = \"waiting on Extend stabilization\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<char> for String {\n     fn extend<I: IntoIterator<Item=char>>(&mut self, iterable: I) {\n         let iterator = iterable.into_iter();\n@@ -753,8 +752,7 @@ impl Extend<char> for String {\n     }\n }\n \n-#[unstable(feature = \"collections\",\n-           reason = \"waiting on Extend stabilization\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Extend<&'a str> for String {\n     fn extend<I: IntoIterator<Item=&'a str>>(&mut self, iterable: I) {\n         let iterator = iterable.into_iter();\n@@ -869,8 +867,7 @@ impl hash::Hash for String {\n     }\n }\n \n-#[unstable(feature = \"collections\",\n-           reason = \"recent addition, needs more experience\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Add<&'a str> for String {\n     type Output = String;\n \n@@ -964,11 +961,17 @@ pub fn as_string<'a>(x: &'a str) -> DerefString<'a> {\n     DerefString { x: as_vec(x.as_bytes()) }\n }\n \n-#[unstable(feature = \"collections\", reason = \"associated error type may change\")]\n+/// Error returned from `String::from_str`\n+#[unstable(feature = \"str_parse_error\", reason = \"may want to be replaced with \\\n+                                                  Void if it ever exists\")]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub struct ParseError(());\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for String {\n-    type Err = ();\n+    type Err = ParseError;\n     #[inline]\n-    fn from_str(s: &str) -> Result<String, ()> {\n+    fn from_str(s: &str) -> Result<String, ParseError> {\n         Ok(String::from_str(s))\n     }\n }"}, {"sha": "33de6b7973672f977c764941ed2a864ac5fa4c65", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -1299,7 +1299,7 @@ pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {\n // Common trait implementations for Vec\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[unstable(feature = \"collections\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Clone> Clone for Vec<T> {\n     #[cfg(not(test))]\n     fn clone(&self) -> Vec<T> { <[T]>::to_vec(&**self) }\n@@ -1554,7 +1554,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n     }\n }\n \n-#[unstable(feature = \"collections\", reason = \"waiting on Extend stability\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) {\n@@ -1614,8 +1614,7 @@ impl<T: Ord> Ord for Vec<T> {\n     }\n }\n \n-#[unstable(feature = \"collections\",\n-           reason = \"recent addition, needs more experience\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: Clone> Add<&'a [T]> for Vec<T> {\n     type Output = Vec<T>;\n \n@@ -1694,7 +1693,7 @@ impl<'a> From<&'a str> for Vec<u8> {\n // Clone-on-write\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[unstable(feature = \"collections\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n     fn from_iter<I: IntoIterator<Item=T>>(it: I) -> Cow<'a, [T]> {\n         Cow::Owned(FromIterator::from_iter(it))"}, {"sha": "a9b99c33ee5cc232f3b64b9267d394dc711f9909", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -626,12 +626,10 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.any(|x| *x == 3));\n-    /// assert_eq!(&it[..], [4, 5]);\n-    ///\n+    /// assert_eq!(it.collect::<Vec<_>>(), [&4, &5]);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -654,11 +652,10 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.find(|&x| *x == 3).unwrap(), &3);\n-    /// assert_eq!(&it[..], [4, 5]);\n+    /// assert_eq!(it.collect::<Vec<_>>(), [&4, &5]);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n@@ -678,11 +675,10 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.position(|x| *x == 3).unwrap(), 2);\n-    /// assert_eq!(&it[..], [4, 5]);\n+    /// assert_eq!(it.collect::<Vec<_>>(), [&4, &5]);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn position<P>(&mut self, mut predicate: P) -> Option<usize> where\n@@ -708,11 +704,10 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let a = [1, 2, 2, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.rposition(|x| *x == 2).unwrap(), 2);\n-    /// assert_eq!(&it[..], [1, 2]);\n+    /// assert_eq!(it.collect::<Vec<_>>(), [&1, &2]);\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where"}, {"sha": "f0accef92ceccf4735213505f2d87bf296f35f52", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -762,46 +762,6 @@ pub struct Iter<'a, T: 'a> {\n unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}\n \n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::Range<usize>> for Iter<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::Range<usize>) -> &[T] {\n-        self.as_slice().index(index)\n-    }\n-}\n-\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::RangeTo<usize>> for Iter<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeTo<usize>) -> &[T] {\n-        self.as_slice().index(index)\n-    }\n-}\n-\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::RangeFrom<usize>> for Iter<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] {\n-        self.as_slice().index(index)\n-    }\n-}\n-\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<RangeFull> for Iter<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, _index: RangeFull) -> &[T] {\n-        self.as_slice()\n-    }\n-}\n-\n impl<'a, T> Iter<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n     ///\n@@ -873,76 +833,6 @@ pub struct IterMut<'a, T: 'a> {\n unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}\n \n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::Range<usize>> for IterMut<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::Range<usize>) -> &[T] {\n-        self.index(RangeFull).index(index)\n-    }\n-}\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::RangeTo<usize>> for IterMut<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeTo<usize>) -> &[T] {\n-        self.index(RangeFull).index(index)\n-    }\n-}\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<ops::RangeFrom<usize>> for IterMut<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] {\n-        self.index(RangeFull).index(index)\n-    }\n-}\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::Index<RangeFull> for IterMut<'a, T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, _index: RangeFull) -> &[T] {\n-        make_slice!(T => &[T]: self.ptr, self.end)\n-    }\n-}\n-\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::IndexMut<ops::Range<usize>> for IterMut<'a, T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n-        self.index_mut(RangeFull).index_mut(index)\n-    }\n-}\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::IndexMut<ops::RangeTo<usize>> for IterMut<'a, T> {\n-\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n-        self.index_mut(RangeFull).index_mut(index)\n-    }\n-}\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::IndexMut<ops::RangeFrom<usize>> for IterMut<'a, T> {\n-\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] {\n-        self.index_mut(RangeFull).index_mut(index)\n-    }\n-}\n-#[unstable(feature = \"core\")]\n-impl<'a, T> ops::IndexMut<RangeFull> for IterMut<'a, T> {\n-\n-    #[inline]\n-    fn index_mut(&mut self, _index: RangeFull) -> &mut [T] {\n-        make_mut_slice!(T => &mut [T]: self.ptr, self.end)\n-    }\n-}\n-\n-\n impl<'a, T> IterMut<'a, T> {\n     /// View the underlying data as a subslice of the original data.\n     ///"}, {"sha": "5a1166aeb5085e99debd69982c1af9ce4980e5f9", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -34,55 +34,6 @@ fn binary_search_not_found() {\n     assert!(b.binary_search_by(|v| v.cmp(&9)) == Err(6));\n }\n \n-#[test]\n-fn iterator_to_slice() {\n-    macro_rules! test {\n-        ($data: expr) => {{\n-            let data: &mut [_] = &mut $data;\n-            let other_data: &mut [_] = &mut $data;\n-\n-            {\n-                let mut iter = data.iter();\n-                assert_eq!(&iter[..], &other_data[..]);\n-\n-                iter.next();\n-                assert_eq!(&iter[..], &other_data[1..]);\n-\n-                iter.next_back();\n-                assert_eq!(&iter[..], &other_data[1..2]);\n-\n-                let s = iter.as_slice();\n-                iter.next();\n-                assert_eq!(s, &other_data[1..2]);\n-            }\n-            {\n-                let mut iter = data.iter_mut();\n-                assert_eq!(&iter[..], &other_data[..]);\n-                // mutability:\n-                assert!(&mut iter[..] == other_data);\n-\n-                iter.next();\n-                assert_eq!(&iter[..], &other_data[1..]);\n-                assert!(&mut iter[..] == &mut other_data[1..]);\n-\n-                iter.next_back();\n-\n-                assert_eq!(&iter[..], &other_data[1..2]);\n-                assert!(&mut iter[..] == &mut other_data[1..2]);\n-\n-                let s = iter.into_slice();\n-                assert!(s == &mut other_data[1..2]);\n-            }\n-        }}\n-    }\n-\n-    // try types of a variety of sizes\n-    test!([(1u64, 1u64, 1u8), (2, 2, 2), (3, 3, 3)]);\n-    test!([1u64,2,3]);\n-    test!([1u8,2,3]);\n-    test!([(),(),()]);\n-}\n-\n #[test]\n fn test_iterator_nth() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "a618f4b6ef675fe3f193cff07e48a41012e0597f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -852,11 +852,11 @@ pub fn monitor<F:FnOnce()+Send+'static>(f: F) {\n pub fn diagnostics_registry() -> diagnostics::registry::Registry {\n     use syntax::diagnostics::registry::Registry;\n \n-    let all_errors = Vec::new() +\n-        &rustc::DIAGNOSTICS[..] +\n-        &rustc_typeck::DIAGNOSTICS[..] +\n-        &rustc_borrowck::DIAGNOSTICS[..] +\n-        &rustc_resolve::DIAGNOSTICS[..];\n+    let mut all_errors = Vec::new();\n+    all_errors.push_all(&rustc::DIAGNOSTICS);\n+    all_errors.push_all(&rustc_typeck::DIAGNOSTICS);\n+    all_errors.push_all(&rustc_borrowck::DIAGNOSTICS);\n+    all_errors.push_all(&rustc_resolve::DIAGNOSTICS);\n \n     Registry::new(&*all_errors)\n }"}, {"sha": "ec130e8233a74ac51d55304f43ee7e81a7a03a30", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -1605,8 +1605,7 @@ impl HashState for RandomState {\n     }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"hashing an hash maps may be altered\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for RandomState {\n     #[inline]\n     fn default() -> RandomState {"}, {"sha": "30a61e66dd2e2bab5504b31a898b93c40d372407", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -118,7 +118,7 @@ impl<R> fmt::Debug for BufReader<R> where R: fmt::Debug {\n     }\n }\n \n-#[unstable(feature = \"buf_seek\", reason = \"recently added\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Seek> Seek for BufReader<R> {\n     /// Seek to an offset, in bytes, in the underlying reader.\n     ///\n@@ -282,8 +282,8 @@ impl<W: Write> fmt::Debug for BufWriter<W> where W: fmt::Debug {\n     }\n }\n \n-#[unstable(feature = \"buf_seek\", reason = \"recently added\")]\n-impl<W: Write+Seek> Seek for BufWriter<W> {\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<W: Write + Seek> Seek for BufWriter<W> {\n     /// Seek to the offset, in bytes, in the underlying writer.\n     ///\n     /// Seeking always writes out the internal buffer before seeking."}, {"sha": "88cfc5a7b2d8d08bb8b93d3092915548db18617f", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1976f1f6e467b83d9f91d141924d05b8e580257/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=b1976f1f6e467b83d9f91d141924d05b8e580257", "patch": "@@ -291,7 +291,7 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-#[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for IpAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {"}]}