{"sha": "3dc625c661924d47fcb040b27f56ab7a9a206c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYzYyNWM2NjE5MjRkNDdmY2IwNDBiMjdmNTZhYjdhOWEyMDZjNjA=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-17T12:33:36Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-04-17T12:33:36Z"}, "message": "Use annotate-snippets for emitting errors (#3507)", "tree": {"sha": "49cd82d7dbe03209da84bbdcab91f479afcff35c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cd82d7dbe03209da84bbdcab91f479afcff35c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc625c661924d47fcb040b27f56ab7a9a206c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc625c661924d47fcb040b27f56ab7a9a206c60", "html_url": "https://github.com/rust-lang/rust/commit/3dc625c661924d47fcb040b27f56ab7a9a206c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc625c661924d47fcb040b27f56ab7a9a206c60/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa3a62b56f793ab13a85486ad99da1432f88aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/efa3a62b56f793ab13a85486ad99da1432f88aa3", "html_url": "https://github.com/rust-lang/rust/commit/efa3a62b56f793ab13a85486ad99da1432f88aa3"}], "stats": {"total": 374, "additions": 238, "deletions": 136}, "files": [{"sha": "90961fa86f09863355291cdf0def796a2fae1dbc", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -8,6 +8,22 @@ dependencies = [\n  \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"annotate-snippets\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"argon2rs\"\n version = \"0.2.5\"\n@@ -744,6 +760,7 @@ dependencies = [\n name = \"rustfmt-nightly\"\n version = \"1.2.0\"\n dependencies = [\n+ \"annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -991,6 +1008,8 @@ dependencies = [\n \n [metadata]\n \"checksum aho-corasick 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"81ce3d38065e618af2d7b77e10c5ad9a069859b4be3c2250f674af3840d9c8a5\"\n+\"checksum annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8bcdcd5b291ce85a78f2b9d082a8de9676c12b1840d386d67bc5eea6f9d2b4e\"\n+\"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f67b0b6a86dae6e67ff4ca2b6201396074996379fba2b92ff649126f37cb392\"\n \"checksum arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c7fb76bc8826a8b33b4ee5bb07a247a81e76764ab4d55e8f73e3a4d8808c71\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\""}, {"sha": "55a44e2890d65ca173ef920c169ee84f94ca0200", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -58,6 +58,7 @@ unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n dirs = \"1.0.4\"\n ignore = \"0.4.6\"\n+annotate-snippets = { version = \"0.5.0\", features = [\"ansi_term\"] }\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "5b69a440b654b1af999c0fd217330b0ba5d3df27", "filename": "src/bin/main.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -16,7 +16,7 @@ use getopts::{Matches, Options};\n \n use crate::rustfmt::{\n     load_config, CliOptions, Color, Config, Edition, EmitMode, ErrorKind, FileLines, FileName,\n-    Input, Session, Verbosity,\n+    FormatReportFormatterBuilder, Input, Session, Verbosity,\n };\n \n fn main() {\n@@ -310,19 +310,12 @@ fn format_and_emit_report<T: Write>(session: &mut Session<'_, T>, input: Input)\n     match session.format(input) {\n         Ok(report) => {\n             if report.has_warnings() {\n-                match term::stderr() {\n-                    Some(ref t)\n-                        if session.config.color().use_colored_tty()\n-                            && t.supports_color()\n-                            && t.supports_attr(term::Attr::Bold) =>\n-                    {\n-                        match report.fancy_print(term::stderr().unwrap()) {\n-                            Ok(..) => (),\n-                            Err(..) => panic!(\"Unable to write to stderr: {}\", report),\n-                        }\n-                    }\n-                    _ => eprintln!(\"{}\", report),\n-                }\n+                eprintln!(\n+                    \"{}\",\n+                    FormatReportFormatterBuilder::new(&report)\n+                        .enable_colors(should_print_with_colors(session))\n+                        .build()\n+                );\n             }\n         }\n         Err(msg) => {\n@@ -332,6 +325,19 @@ fn format_and_emit_report<T: Write>(session: &mut Session<'_, T>, input: Input)\n     }\n }\n \n+fn should_print_with_colors<T: Write>(session: &mut Session<'_, T>) -> bool {\n+    match term::stderr() {\n+        Some(ref t)\n+            if session.config.color().use_colored_tty()\n+                && t.supports_color()\n+                && t.supports_attr(term::Attr::Bold) =>\n+        {\n+            true\n+        }\n+        _ => false,\n+    }\n+}\n+\n fn print_usage_to_stdout(opts: &Options, reason: &str) {\n     let sep = if reason.is_empty() {\n         String::new()"}, {"sha": "550380cdd2bdf6f48a84b25997866457b6bed2d8", "filename": "src/format_report_formatter.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -0,0 +1,173 @@\n+use crate::config::FileName;\n+use crate::formatting::FormattingError;\n+use crate::{ErrorKind, FormatReport};\n+use annotate_snippets::display_list::DisplayList;\n+use annotate_snippets::formatter::DisplayListFormatter;\n+use annotate_snippets::snippet::{Annotation, AnnotationType, Slice, Snippet, SourceAnnotation};\n+use std::fmt::{self, Display};\n+\n+/// A builder for [`FormatReportFormatter`].\n+pub struct FormatReportFormatterBuilder<'a> {\n+    report: &'a FormatReport,\n+    enable_colors: bool,\n+}\n+\n+impl<'a> FormatReportFormatterBuilder<'a> {\n+    /// Creates a new [`FormatReportFormatterBuilder`].\n+    pub fn new(report: &'a FormatReport) -> Self {\n+        Self {\n+            report,\n+            enable_colors: false,\n+        }\n+    }\n+\n+    /// Enables colors and formatting in the output.\n+    pub fn enable_colors(self, enable_colors: bool) -> Self {\n+        Self {\n+            enable_colors,\n+            ..self\n+        }\n+    }\n+\n+    /// Creates a new [`FormatReportFormatter`] from the settings in this builder.\n+    pub fn build(self) -> FormatReportFormatter<'a> {\n+        FormatReportFormatter {\n+            report: self.report,\n+            enable_colors: self.enable_colors,\n+        }\n+    }\n+}\n+\n+/// Formats the warnings/errors in a [`FormatReport`].\n+///\n+/// Can be created using a [`FormatReportFormatterBuilder`].\n+pub struct FormatReportFormatter<'a> {\n+    report: &'a FormatReport,\n+    enable_colors: bool,\n+}\n+\n+impl<'a> Display for FormatReportFormatter<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let formatter = DisplayListFormatter::new(self.enable_colors);\n+        let errors_by_file = &self.report.internal.borrow().0;\n+\n+        for (file, errors) in errors_by_file {\n+            for error in errors {\n+                let snippet = formatting_error_to_snippet(file, error);\n+                writeln!(f, \"{}\\n\", formatter.format(&DisplayList::from(snippet)))?;\n+            }\n+        }\n+\n+        if !errors_by_file.is_empty() {\n+            let snippet = formatting_failure_snippet(self.report.warning_count());\n+            writeln!(f, \"{}\", formatter.format(&DisplayList::from(snippet)))?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+fn formatting_failure_snippet(warning_count: usize) -> Snippet {\n+    Snippet {\n+        title: Some(Annotation {\n+            id: None,\n+            label: Some(format!(\n+                \"rustfmt has failed to format. See previous {} errors.\",\n+                warning_count\n+            )),\n+            annotation_type: AnnotationType::Warning,\n+        }),\n+        footer: Vec::new(),\n+        slices: Vec::new(),\n+    }\n+}\n+\n+fn formatting_error_to_snippet(file: &FileName, error: &FormattingError) -> Snippet {\n+    let slices = vec![snippet_code_slice(file, error)];\n+    let title = Some(snippet_title(error));\n+    let footer = snippet_footer(error).into_iter().collect();\n+\n+    Snippet {\n+        title,\n+        footer,\n+        slices,\n+    }\n+}\n+\n+fn snippet_title(error: &FormattingError) -> Annotation {\n+    let annotation_type = error_kind_to_snippet_annotation_type(&error.kind);\n+\n+    Annotation {\n+        id: title_annotation_id(error),\n+        label: Some(error.kind.to_string()),\n+        annotation_type,\n+    }\n+}\n+\n+fn snippet_footer(error: &FormattingError) -> Option<Annotation> {\n+    let message_suffix = error.msg_suffix();\n+\n+    if !message_suffix.is_empty() {\n+        Some(Annotation {\n+            id: None,\n+            label: Some(message_suffix.to_string()),\n+            annotation_type: AnnotationType::Note,\n+        })\n+    } else {\n+        None\n+    }\n+}\n+\n+fn snippet_code_slice(file: &FileName, error: &FormattingError) -> Slice {\n+    let annotations = slice_annotation(error).into_iter().collect();\n+    let origin = Some(format!(\"{}:{}\", file, error.line));\n+    let source = error.line_buffer.clone();\n+\n+    Slice {\n+        source,\n+        line_start: error.line,\n+        origin,\n+        fold: false,\n+        annotations,\n+    }\n+}\n+\n+fn slice_annotation(error: &FormattingError) -> Option<SourceAnnotation> {\n+    let (range_start, range_length) = error.format_len();\n+    let range_end = range_start + range_length;\n+\n+    if range_length > 0 {\n+        Some(SourceAnnotation {\n+            annotation_type: AnnotationType::Error,\n+            range: (range_start, range_end),\n+            label: String::new(),\n+        })\n+    } else {\n+        None\n+    }\n+}\n+\n+fn title_annotation_id(error: &FormattingError) -> Option<String> {\n+    const INTERNAL_ERROR_ID: &str = \"internal\";\n+\n+    if error.is_internal() {\n+        Some(INTERNAL_ERROR_ID.to_string())\n+    } else {\n+        None\n+    }\n+}\n+\n+fn error_kind_to_snippet_annotation_type(error_kind: &ErrorKind) -> AnnotationType {\n+    match error_kind {\n+        ErrorKind::LineOverflow(..)\n+        | ErrorKind::TrailingWhitespace\n+        | ErrorKind::IoError(_)\n+        | ErrorKind::ParseError\n+        | ErrorKind::LostComment\n+        | ErrorKind::LicenseCheck\n+        | ErrorKind::BadAttr\n+        | ErrorKind::InvalidGlobPattern(_)\n+        | ErrorKind::VersionMismatch => AnnotationType::Error,\n+        ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => AnnotationType::Warning,\n+    }\n+}"}, {"sha": "47ff9021c9759586fd09ea340d1c9d994e968631", "filename": "src/formatting.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -275,18 +275,14 @@ impl FormattingError {\n         }\n     }\n \n-    pub(crate) fn msg_prefix(&self) -> &str {\n+    pub(crate) fn is_internal(&self) -> bool {\n         match self.kind {\n             ErrorKind::LineOverflow(..)\n             | ErrorKind::TrailingWhitespace\n             | ErrorKind::IoError(_)\n             | ErrorKind::ParseError\n-            | ErrorKind::LostComment => \"internal error:\",\n-            ErrorKind::LicenseCheck\n-            | ErrorKind::BadAttr\n-            | ErrorKind::InvalidGlobPattern(..)\n-            | ErrorKind::VersionMismatch => \"error:\",\n-            ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n+            | ErrorKind::LostComment => true,\n+            _ => false,\n         }\n     }\n "}, {"sha": "c90eae3e6491926ba4738ba62c1eb56747d41345", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -11,7 +11,7 @@ use env_logger;\n use getopts::{Matches, Options};\n use rustfmt_nightly as rustfmt;\n \n-use crate::rustfmt::{load_config, CliOptions, Input, Session};\n+use crate::rustfmt::{load_config, CliOptions, FormatReportFormatterBuilder, Input, Session};\n \n fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     let prefixes: Vec<_> = files\n@@ -67,7 +67,7 @@ fn fmt_files(files: &[&str]) -> i32 {\n     for file in files {\n         let report = session.format(Input::File(PathBuf::from(file))).unwrap();\n         if report.has_warnings() {\n-            eprintln!(\"{}\", report);\n+            eprintln!(\"{}\", FormatReportFormatterBuilder::new(&report).build());\n         }\n         if !session.has_no_errors() {\n             exit_code = 1;"}, {"sha": "3de9616a2ce15dfe712d1cfa28cb013b9c4f3a04", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 110, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -34,6 +34,8 @@ pub use crate::config::{\n     Range, Verbosity,\n };\n \n+pub use crate::format_report_formatter::{FormatReportFormatter, FormatReportFormatterBuilder};\n+\n pub use crate::rustfmt_diff::{ModifiedChunk, ModifiedLines};\n \n #[macro_use]\n@@ -46,6 +48,7 @@ mod closures;\n mod comment;\n pub(crate) mod config;\n mod expr;\n+mod format_report_formatter;\n pub(crate) mod formatting;\n mod ignore_path;\n mod imports;\n@@ -162,7 +165,7 @@ impl FormattedSnippet {\n \n /// Reports on any issues that occurred during a run of Rustfmt.\n ///\n-/// Can be reported to the user via its `Display` implementation of `print_fancy`.\n+/// Can be reported to the user using the `Display` impl on [`FormatReportFormatter`].\n #[derive(Clone)]\n pub struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors.\n@@ -245,126 +248,27 @@ impl FormatReport {\n \n     /// Print the report to a terminal using colours and potentially other\n     /// fancy output.\n+    #[deprecated(note = \"Use FormatReportFormatter with colors enabled instead\")]\n     pub fn fancy_print(\n         &self,\n         mut t: Box<dyn term::Terminal<Output = io::Stderr>>,\n     ) -> Result<(), term::Error> {\n-        for (file, errors) in &self.internal.borrow().0 {\n-            for error in errors {\n-                let prefix_space_len = error.line.to_string().len();\n-                let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n-\n-                // First line: the overview of error\n-                t.fg(term::color::RED)?;\n-                t.attr(term::Attr::Bold)?;\n-                write!(t, \"{} \", error.msg_prefix())?;\n-                t.reset()?;\n-                t.attr(term::Attr::Bold)?;\n-                writeln!(t, \"{}\", error.kind)?;\n-\n-                // Second line: file info\n-                write!(t, \"{}--> \", &prefix_spaces[1..])?;\n-                t.reset()?;\n-                writeln!(t, \"{}:{}\", file, error.line)?;\n-\n-                // Third to fifth lines: show the line which triggered error, if available.\n-                if !error.line_buffer.is_empty() {\n-                    let (space_len, target_len) = error.format_len();\n-                    t.attr(term::Attr::Bold)?;\n-                    write!(t, \"{}|\\n{} | \", prefix_spaces, error.line)?;\n-                    t.reset()?;\n-                    writeln!(t, \"{}\", error.line_buffer)?;\n-                    t.attr(term::Attr::Bold)?;\n-                    write!(t, \"{}| \", prefix_spaces)?;\n-                    t.fg(term::color::RED)?;\n-                    writeln!(t, \"{}\", FormatReport::target_str(space_len, target_len))?;\n-                    t.reset()?;\n-                }\n-\n-                // The last line: show note if available.\n-                let msg_suffix = error.msg_suffix();\n-                if !msg_suffix.is_empty() {\n-                    t.attr(term::Attr::Bold)?;\n-                    write!(t, \"{}= note: \", prefix_spaces)?;\n-                    t.reset()?;\n-                    writeln!(t, \"{}\", error.msg_suffix())?;\n-                } else {\n-                    writeln!(t)?;\n-                }\n-                t.reset()?;\n-            }\n-        }\n-\n-        if !self.internal.borrow().0.is_empty() {\n-            t.attr(term::Attr::Bold)?;\n-            write!(t, \"warning: \")?;\n-            t.reset()?;\n-            write!(\n-                t,\n-                \"rustfmt may have failed to format. See previous {} errors.\\n\\n\",\n-                self.warning_count(),\n-            )?;\n-        }\n-\n+        writeln!(\n+            t,\n+            \"{}\",\n+            FormatReportFormatterBuilder::new(&self)\n+                .enable_colors(true)\n+                .build()\n+        )?;\n         Ok(())\n     }\n-\n-    fn target_str(space_len: usize, target_len: usize) -> String {\n-        let empty_line = \" \".repeat(space_len);\n-        let overflowed = \"^\".repeat(target_len);\n-        empty_line + &overflowed\n-    }\n }\n \n+#[deprecated(note = \"Use FormatReportFormatter instead\")]\n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        for (file, errors) in &self.internal.borrow().0 {\n-            for error in errors {\n-                let prefix_space_len = error.line.to_string().len();\n-                let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n-\n-                let error_line_buffer = if error.line_buffer.is_empty() {\n-                    String::from(\" \")\n-                } else {\n-                    let (space_len, target_len) = error.format_len();\n-                    format!(\n-                        \"{}|\\n{} | {}\\n{}| {}\",\n-                        prefix_spaces,\n-                        error.line,\n-                        error.line_buffer,\n-                        prefix_spaces,\n-                        FormatReport::target_str(space_len, target_len)\n-                    )\n-                };\n-\n-                let error_info = format!(\"{} {}\", error.msg_prefix(), error.kind);\n-                let file_info = format!(\"{}--> {}:{}\", &prefix_spaces[1..], file, error.line);\n-                let msg_suffix = error.msg_suffix();\n-                let note = if msg_suffix.is_empty() {\n-                    String::new()\n-                } else {\n-                    format!(\"{}note= \", prefix_spaces)\n-                };\n-\n-                writeln!(\n-                    fmt,\n-                    \"{}\\n{}\\n{}\\n{}{}\",\n-                    error_info,\n-                    file_info,\n-                    error_line_buffer,\n-                    note,\n-                    error.msg_suffix()\n-                )?;\n-            }\n-        }\n-        if !self.internal.borrow().0.is_empty() {\n-            writeln!(\n-                fmt,\n-                \"warning: rustfmt may have failed to format. See previous {} errors.\",\n-                self.warning_count(),\n-            )?;\n-        }\n+        write!(fmt, \"{}\", FormatReportFormatterBuilder::new(&self).build())?;\n         Ok(())\n     }\n }"}, {"sha": "c084742a217ae0417380928a11010bc5d84f39ab", "filename": "src/test/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc625c661924d47fcb040b27f56ab7a9a206c60/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=3dc625c661924d47fcb040b27f56ab7a9a206c60", "patch": "@@ -13,7 +13,7 @@ use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTacti\n use crate::formatting::{ReportedErrors, SourceFile};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n-use crate::{FormatReport, Input, Session};\n+use crate::{FormatReport, FormatReportFormatterBuilder, Input, Session};\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n const CONFIGURATIONS_FILE_NAME: &str = \"Configurations.md\";\n@@ -299,7 +299,10 @@ fn self_tests() {\n     assert_eq!(fails, 0, \"{} self tests failed\", fails);\n \n     for format_report in reports {\n-        println!(\"{}\", format_report);\n+        println!(\n+            \"{}\",\n+            FormatReportFormatterBuilder::new(&format_report).build()\n+        );\n         warnings += format_report.warning_count();\n     }\n \n@@ -427,7 +430,7 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n \n         match idempotent_check(&file_name, &opt_config) {\n             Ok(ref report) if report.has_warnings() => {\n-                print!(\"{}\", report);\n+                print!(\"{}\", FormatReportFormatterBuilder::new(&report).build());\n                 fails += 1;\n             }\n             Ok(report) => reports.push(report),"}]}