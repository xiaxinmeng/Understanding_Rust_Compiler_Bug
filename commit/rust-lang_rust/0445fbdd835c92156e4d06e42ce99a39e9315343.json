{"sha": "0445fbdd835c92156e4d06e42ce99a39e9315343", "node_id": "C_kwDOAAsO6NoAKDA0NDVmYmRkODM1YzkyMTU2ZTRkMDZlNDJjZTk5YTM5ZTkzMTUzNDM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-08T03:11:20Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-18T14:52:47Z"}, "message": "Store hashes in special types so they aren't accidentally encoded as numbers", "tree": {"sha": "98214d1ae76737d58e423427cd7384b1f276230c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98214d1ae76737d58e423427cd7384b1f276230c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0445fbdd835c92156e4d06e42ce99a39e9315343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0445fbdd835c92156e4d06e42ce99a39e9315343", "html_url": "https://github.com/rust-lang/rust/commit/0445fbdd835c92156e4d06e42ce99a39e9315343", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0445fbdd835c92156e4d06e42ce99a39e9315343/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de96f3d8735b70d5dc1ca178aaee198b329b8f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/de96f3d8735b70d5dc1ca178aaee198b329b8f3d", "html_url": "https://github.com/rust-lang/rust/commit/de96f3d8735b70d5dc1ca178aaee198b329b8f3d"}], "stats": {"total": 412, "additions": 274, "deletions": 138}, "files": [{"sha": "f3af031ade4a14564f86150742aeffedb61e0c26", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -79,7 +79,8 @@ pub trait LayoutCalculator {\n                 {\n                     // `ReprOptions.layout_seed` is a deterministic seed that we can use to\n                     // randomize field ordering with\n-                    let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);\n+                    let mut rng =\n+                        Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed.as_u64());\n \n                     // Shuffle the ordering of the fields\n                     optimizing.shuffle(&mut rng);"}, {"sha": "a5cdaa547d842c408e1ef5b7faf7a7d8ca3c4e64", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -9,6 +9,7 @@ use std::str::FromStr;\n \n use bitflags::bitflags;\n use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::stable_hasher::Hash64;\n #[cfg(feature = \"nightly\")]\n use rustc_data_structures::stable_hasher::StableOrd;\n use rustc_index::vec::{IndexSlice, IndexVec};\n@@ -77,12 +78,12 @@ pub struct ReprOptions {\n     pub flags: ReprFlags,\n     /// The seed to be used for randomizing a type's layout\n     ///\n-    /// Note: This could technically be a `[u8; 16]` (a `u128`) which would\n+    /// Note: This could technically be a `Hash128` which would\n     /// be the \"most accurate\" hash as it'd encompass the item and crate\n     /// hash without loss, but it does pay the price of being larger.\n-    /// Everything's a tradeoff, a `u64` seed should be sufficient for our\n+    /// Everything's a tradeoff, a 64-bit seed should be sufficient for our\n     /// purposes (primarily `-Z randomize-layout`)\n-    pub field_shuffle_seed: u64,\n+    pub field_shuffle_seed: Hash64,\n }\n \n impl ReprOptions {"}, {"sha": "9127fba388bab308b9673a47002708b772dac6b6", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -10,7 +10,7 @@ use crate::value::Value;\n use rustc_ast::Mutability;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n use rustc_hir::def_id::DefId;\n use rustc_middle::bug;\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n@@ -261,7 +261,7 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                             let hash = self.tcx.with_stable_hashing_context(|mut hcx| {\n                                 let mut hasher = StableHasher::new();\n                                 alloc.hash_stable(&mut hcx, &mut hasher);\n-                                hasher.finish::<u128>()\n+                                hasher.finish::<Hash128>()\n                             });\n                             llvm::set_value_name(value, format!(\"alloc_{hash:032x}\").as_bytes());\n                         }"}, {"sha": "56844c7951fa53c72502ff9595a48f31ac682600", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -21,6 +21,7 @@ use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::Hash128;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n@@ -61,7 +62,7 @@ pub struct CodegenUnitDebugContext<'ll, 'tcx> {\n     llcontext: &'ll llvm::Context,\n     llmod: &'ll llvm::Module,\n     builder: &'ll mut DIBuilder<'ll>,\n-    created_files: RefCell<FxHashMap<Option<(u128, SourceFileHash)>, &'ll DIFile>>,\n+    created_files: RefCell<FxHashMap<Option<(Hash128, SourceFileHash)>, &'ll DIFile>>,\n \n     type_map: metadata::TypeMap<'ll, 'tcx>,\n     namespace_map: RefCell<DefIdMap<&'ll DIScope>>,"}, {"sha": "03f33d8d8aa7fdc9ea69dc620b2c3781513b82d1", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -12,7 +12,7 @@\n // * `\"` is treated as the start of a string.\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Mutability};\n@@ -675,8 +675,7 @@ fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: ty::Const<'tcx>, output: &mut S\n                     hcx.while_hashing_spans(false, |hcx| {\n                         ct.to_valtree().hash_stable(hcx, &mut hasher)\n                     });\n-                    let hash: u64 = hasher.finish();\n-                    hash\n+                    hasher.finish::<Hash64>()\n                 });\n \n                 if cpp_like_debuginfo(tcx) {"}, {"sha": "eada75ae391cbeeddfad388094c90037e6f0b043", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n         }\n         sym::type_id => {\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n-            ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n+            ConstValue::from_u64(tcx.type_id_hash(tp_ty).as_u64())\n         }\n         sym::variant_count => match tp_ty.kind() {\n             // Correctly handles non-monomorphic calls, so there is no need for ensure_monomorphic_enough."}, {"sha": "1c929afb1cf36504b3cdad8d5a6aa3a578ea2ba8", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -1,4 +1,4 @@\n-use crate::stable_hasher;\n+use crate::stable_hasher::{Hash64, StableHasher, StableHasherResult};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::hash::{Hash, Hasher};\n \n@@ -9,32 +9,47 @@ mod tests;\n #[repr(C)]\n pub struct Fingerprint(u64, u64);\n \n-impl Fingerprint {\n-    pub const ZERO: Fingerprint = Fingerprint(0, 0);\n+pub trait FingerprintComponent {\n+    fn as_u64(&self) -> u64;\n+}\n \n-    #[inline]\n-    pub fn new(_0: u64, _1: u64) -> Fingerprint {\n-        Fingerprint(_0, _1)\n+impl FingerprintComponent for Hash64 {\n+    fn as_u64(&self) -> u64 {\n+        Hash64::as_u64(*self)\n+    }\n+}\n+\n+impl FingerprintComponent for u64 {\n+    fn as_u64(&self) -> u64 {\n+        *self\n     }\n+}\n+\n+impl Fingerprint {\n+    pub const ZERO: Fingerprint = Fingerprint(0, 0);\n \n     #[inline]\n-    pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n-        Fingerprint(hash, hash)\n+    pub fn new<A, B>(_0: A, _1: B) -> Fingerprint\n+    where\n+        A: FingerprintComponent,\n+        B: FingerprintComponent,\n+    {\n+        Fingerprint(_0.as_u64(), _1.as_u64())\n     }\n \n     #[inline]\n-    pub fn to_smaller_hash(&self) -> u64 {\n+    pub fn to_smaller_hash(&self) -> Hash64 {\n         // Even though both halves of the fingerprint are expected to be good\n         // quality hash values, let's still combine the two values because the\n         // Fingerprints in DefPathHash have the StableCrateId portion which is\n         // the same for all DefPathHashes from the same crate. Combining the\n         // two halves makes sure we get a good quality hash in such cases too.\n-        self.0.wrapping_mul(3).wrapping_add(self.1)\n+        Hash64::new(self.0.wrapping_mul(3).wrapping_add(self.1))\n     }\n \n     #[inline]\n-    pub fn as_value(&self) -> (u64, u64) {\n-        (self.0, self.1)\n+    pub fn split(&self) -> (Hash64, Hash64) {\n+        (Hash64::new(self.0), Hash64::new(self.1))\n     }\n \n     #[inline]\n@@ -131,9 +146,9 @@ impl FingerprintHasher for crate::unhash::Unhasher {\n     }\n }\n \n-impl stable_hasher::StableHasherResult for Fingerprint {\n+impl StableHasherResult for Fingerprint {\n     #[inline]\n-    fn finish(hasher: stable_hasher::StableHasher) -> Self {\n+    fn finish(hasher: StableHasher) -> Self {\n         let (_0, _1) = hasher.finalize();\n         Fingerprint(_0, _1)\n     }"}, {"sha": "09ec2622a651d448008e3b4c1e5d25ec4613e0c5", "filename": "compiler/rustc_data_structures/src/fingerprint/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint%2Ftests.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -1,11 +1,12 @@\n use super::*;\n+use crate::stable_hasher::Hash64;\n \n // Check that `combine_commutative` is order independent.\n #[test]\n fn combine_commutative_is_order_independent() {\n-    let a = Fingerprint::new(0xf6622fb349898b06, 0x70be9377b2f9c610);\n-    let b = Fingerprint::new(0xa9562bf5a2a5303c, 0x67d9b6c82034f13d);\n-    let c = Fingerprint::new(0x0d013a27811dbbc3, 0x9a3f7b3d9142ec43);\n+    let a = Fingerprint::new(Hash64::new(0xf6622fb349898b06), Hash64::new(0x70be9377b2f9c610));\n+    let b = Fingerprint::new(Hash64::new(0xa9562bf5a2a5303c), Hash64::new(0x67d9b6c82034f13d));\n+    let c = Fingerprint::new(Hash64::new(0x0d013a27811dbbc3), Hash64::new(0x9a3f7b3d9142ec43));\n     let permutations = [(a, b, c), (a, c, b), (b, a, c), (b, c, a), (c, a, b), (c, b, a)];\n     let f = a.combine_commutative(b).combine_commutative(c);\n     for p in &permutations {"}, {"sha": "9f6e0fb76765b3b6e160e53f8f9870c83ff42abe", "filename": "compiler/rustc_data_structures/src/hashes.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fhashes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fhashes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fhashes.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -0,0 +1,120 @@\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use std::fmt;\n+use std::ops::BitXorAssign;\n+use crate::stable_hasher::{StableHasher, StableHasherResult};\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]\n+pub struct Hash64 {\n+    inner: u64,\n+}\n+\n+impl Hash64 {\n+    pub const ZERO: Hash64 = Hash64 { inner: 0 };\n+\n+    #[inline]\n+    pub(crate) fn new(n: u64) -> Self {\n+        Self { inner: n }\n+    }\n+\n+    #[inline]\n+    pub fn as_u64(self) -> u64 {\n+        self.inner\n+    }\n+}\n+\n+impl BitXorAssign<u64> for Hash64 {\n+    fn bitxor_assign(&mut self, rhs: u64) {\n+        self.inner ^= rhs;\n+    }\n+}\n+\n+impl<S: Encoder> Encodable<S> for Hash64 {\n+    #[inline]\n+    fn encode(&self, s: &mut S) {\n+        s.emit_raw_bytes(&self.inner.to_le_bytes());\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for Hash64 {\n+    #[inline]\n+    fn decode(d: &mut D) -> Self {\n+        Self { inner: u64::from_le_bytes(d.read_raw_bytes(8).try_into().unwrap()) }\n+    }\n+}\n+\n+impl StableHasherResult for Hash64 {\n+    #[inline]\n+    fn finish(hasher: StableHasher) -> Self {\n+        Self { inner: hasher.finalize().0 }\n+    }\n+}\n+\n+impl fmt::Debug for Hash64 {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.inner.fmt(f)\n+    }\n+}\n+\n+impl fmt::LowerHex for Hash64 {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::LowerHex::fmt(&self.inner, f)\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]\n+pub struct Hash128 {\n+    inner: u128,\n+}\n+\n+impl Hash128 {\n+    #[inline]\n+    pub fn truncate(self) -> Hash64 {\n+        Hash64 { inner: self.inner as u64 }\n+    }\n+\n+    #[inline]\n+    pub fn wrapping_add(self, other: Self) -> Self {\n+        Self {\n+            inner: self.inner.wrapping_add(other.inner),\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_u128(self) -> u128 {\n+        self.inner\n+    }\n+}\n+\n+impl<S: Encoder> Encodable<S> for Hash128 {\n+    #[inline]\n+    fn encode(&self, s: &mut S) {\n+        s.emit_raw_bytes(&self.inner.to_le_bytes());\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for Hash128 {\n+    #[inline]\n+    fn decode(d: &mut D) -> Self {\n+        Self { inner: u128::from_le_bytes(d.read_raw_bytes(16).try_into().unwrap()) }\n+    }\n+}\n+\n+impl StableHasherResult for Hash128 {\n+    #[inline]\n+    fn finish(hasher: StableHasher) -> Self {\n+        let (_0, _1) = hasher.finalize();\n+        Self { inner: u128::from(_0) | (u128::from(_1) << 64) }\n+    }\n+}\n+\n+impl fmt::Debug for Hash128 {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.inner.fmt(f)\n+    }\n+}\n+\n+impl fmt::LowerHex for Hash128 {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::LowerHex::fmt(&self.inner, f)\n+    }\n+}"}, {"sha": "405ae99395b312a4127e7f65779c48ad00b5c0ff", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -86,6 +86,7 @@ pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod aligned;\n pub mod frozen;\n+mod hashes;\n pub mod owned_slice;\n pub mod sso;\n pub mod steal;"}, {"sha": "b2bd0bfe71473d1ee8c625107bfb50e272b2695b", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -2,13 +2,16 @@ use crate::sip128::SipHasher128;\n use rustc_index::bit_set;\n use rustc_index::vec;\n use smallvec::SmallVec;\n+use std::fmt;\n use std::hash::{BuildHasher, Hash, Hasher};\n use std::marker::PhantomData;\n use std::mem;\n \n #[cfg(test)]\n mod tests;\n \n+pub use crate::hashes::{Hash128, Hash64};\n+\n /// When hashing something that ends up affecting properties like symbol names,\n /// we want these symbol names to be calculated independently of other factors\n /// like what architecture you're compiling *from*.\n@@ -20,8 +23,8 @@ pub struct StableHasher {\n     state: SipHasher128,\n }\n \n-impl ::std::fmt::Debug for StableHasher {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+impl fmt::Debug for StableHasher {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.state)\n     }\n }\n@@ -42,21 +45,6 @@ impl StableHasher {\n     }\n }\n \n-impl StableHasherResult for u128 {\n-    #[inline]\n-    fn finish(hasher: StableHasher) -> Self {\n-        let (_0, _1) = hasher.finalize();\n-        u128::from(_0) | (u128::from(_1) << 64)\n-    }\n-}\n-\n-impl StableHasherResult for u64 {\n-    #[inline]\n-    fn finish(hasher: StableHasher) -> Self {\n-        hasher.finalize().0\n-    }\n-}\n-\n impl StableHasher {\n     #[inline]\n     pub fn finalize(self) -> (u64, u64) {\n@@ -287,6 +275,9 @@ impl_stable_traits_for_trivial_type!(i128);\n impl_stable_traits_for_trivial_type!(char);\n impl_stable_traits_for_trivial_type!(());\n \n+impl_stable_traits_for_trivial_type!(Hash64);\n+impl_stable_traits_for_trivial_type!(Hash128);\n+\n impl<CTX> HashStable<CTX> for ! {\n     fn hash_stable(&self, _ctx: &mut CTX, _hasher: &mut StableHasher) {\n         unreachable!()\n@@ -669,7 +660,7 @@ fn stable_hash_reduce<HCX, I, C, F>(\n                 .map(|value| {\n                     let mut hasher = StableHasher::new();\n                     hash_function(&mut hasher, hcx, value);\n-                    hasher.finish::<u128>()\n+                    hasher.finish::<Hash128>()\n                 })\n                 .reduce(|accum, value| accum.wrapping_add(value));\n             hash.hash_stable(hcx, hasher);"}, {"sha": "c8921f6a7784fbb9c9f4784fd1ee516cecc8018c", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -72,7 +72,7 @@ fn test_hash_isize() {\n     assert_eq!(h.finalize(), expected);\n }\n \n-fn hash<T: HashStable<()>>(t: &T) -> u128 {\n+fn hash<T: HashStable<()>>(t: &T) -> Hash128 {\n     let mut h = StableHasher::new();\n     let ctx = &mut ();\n     t.hash_stable(ctx, &mut h);"}, {"sha": "a3d2724fcdbbb94cb90a4ad004c62643ed0712d8", "filename": "compiler/rustc_data_structures/src/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -24,7 +24,7 @@ impl Svh {\n     }\n \n     pub fn as_u64(&self) -> u64 {\n-        self.hash.to_smaller_hash()\n+        self.hash.to_smaller_hash().as_u64()\n     }\n \n     pub fn to_string(&self) -> String {"}, {"sha": "26791304ef11ec339ad0897d3c6e6403fad8b2c4", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -31,7 +31,7 @@ use Level::*;\n use emitter::{is_case_difference, Emitter, EmitterWriter};\n use registry::Registry;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n-use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::stable_hasher::{Hash128, StableHasher};\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n@@ -427,7 +427,7 @@ struct HandlerInner {\n     /// This set contains a hash of every diagnostic that has been emitted by\n     /// this handler. These hashes is used to avoid emitting the same error\n     /// twice.\n-    emitted_diagnostics: FxHashSet<u128>,\n+    emitted_diagnostics: FxHashSet<Hash128>,\n \n     /// Stashed diagnostics emitted in one stage of the compiler that may be\n     /// stolen by other stages (e.g. to improve them and add more information)."}, {"sha": "5a5a1e44f12b21ed2eac1e91156ed92001d18271", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -9,7 +9,7 @@ use crate::def_id::{CrateNum, DefIndex, LocalDefId, StableCrateId, CRATE_DEF_IND\n use crate::def_path_hash_map::DefPathHashMap;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::stable_hasher::{Hash64, StableHasher};\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -130,7 +130,7 @@ impl DefKey {\n \n         disambiguator.hash(&mut hasher);\n \n-        let local_hash: u64 = hasher.finish();\n+        let local_hash = hasher.finish();\n \n         // Construct the new DefPathHash, making sure that the `crate_id`\n         // portion of the hash is properly copied from the parent. This way the\n@@ -325,7 +325,7 @@ impl Definitions {\n             },\n         };\n \n-        let parent_hash = DefPathHash::new(stable_crate_id, 0);\n+        let parent_hash = DefPathHash::new(stable_crate_id, Hash64::ZERO);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n \n         // Create the root definition."}, {"sha": "c7ac01b333427e1c4b305b780d0525909bf81578", "filename": "compiler/rustc_hir/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftests.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -1,4 +1,5 @@\n use crate::definitions::{DefKey, DefPathData, DisambiguatedDefPathData};\n+use rustc_data_structures::stable_hasher::Hash64;\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n use rustc_span::edition::Edition;\n use rustc_span::{create_session_if_not_set_then, Symbol};\n@@ -24,7 +25,7 @@ fn def_path_hash_depends_on_crate_id() {\n         assert_ne!(h0.local_hash(), h1.local_hash());\n \n         fn mk_test_hash(stable_crate_id: StableCrateId) -> DefPathHash {\n-            let parent_hash = DefPathHash::new(stable_crate_id, 0);\n+            let parent_hash = DefPathHash::new(stable_crate_id, Hash64::ZERO);\n \n             let key = DefKey {\n                 parent: None,"}, {"sha": "ec6d61f9e5f822987bf1fa8a31cb321213aea200", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -601,7 +601,7 @@ fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n fn crate_path(sess: &Session, crate_name: Symbol, stable_crate_id: StableCrateId) -> PathBuf {\n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n-    let stable_crate_id = base_n::encode(stable_crate_id.to_u64() as u128, INT_ENCODE_BASE);\n+    let stable_crate_id = base_n::encode(stable_crate_id.as_u64() as u128, INT_ENCODE_BASE);\n \n     let crate_name = format!(\"{}-{}\", crate_name, stable_crate_id);\n     incr_dir.join(crate_name)"}, {"sha": "264d08ac4dcfb195d139988aa62d71dd10364e4d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::Attribute;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::memmap::{Mmap, MmapMut};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_hir as hir;\n@@ -531,7 +531,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                         adapted.name_hash = {\n                             let mut hasher: StableHasher = StableHasher::new();\n                             adapted.name.hash(&mut hasher);\n-                            hasher.finish::<u128>()\n+                            hasher.finish::<Hash128>()\n                         };\n                         Lrc::new(adapted)\n                     } else {"}, {"sha": "82e396a9dd3f9a136c0740eb4fb41dcb1ddd173f", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -357,7 +357,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n         Fingerprint::new(\n             // `owner` is local, so is completely defined by the local hash\n             def_path_hash.local_hash(),\n-            local_id.as_u32().into(),\n+            local_id.as_u32() as u64,\n         )\n     }\n \n@@ -370,14 +370,15 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n     fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n         if tcx.fingerprint_style(dep_node.kind) == FingerprintStyle::HirId {\n-            let (local_hash, local_id) = Fingerprint::from(dep_node.hash).as_value();\n+            let (local_hash, local_id) = Fingerprint::from(dep_node.hash).split();\n             let def_path_hash = DefPathHash::new(tcx.sess.local_stable_crate_id(), local_hash);\n             let def_id = tcx\n                 .def_path_hash_to_def_id(def_path_hash, &mut || {\n                     panic!(\"Failed to extract HirId: {:?} {}\", dep_node.kind, dep_node.hash)\n                 })\n                 .expect_local();\n             let local_id = local_id\n+                .as_u64()\n                 .try_into()\n                 .unwrap_or_else(|_| panic!(\"local id should be u32, found {:?}\", local_id));\n             Some(HirId { owner: OwnerId { def_id }, local_id: ItemLocalId::from_u32(local_id) })"}, {"sha": "9041da9a0604d6e43e380f8bd59b20c844b2535a", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -72,6 +72,6 @@ pub fn metadata_symbol_name(tcx: TyCtxt<'_>) -> String {\n     format!(\n         \"rust_metadata_{}_{:08x}\",\n         tcx.crate_name(LOCAL_CRATE),\n-        tcx.sess.local_stable_crate_id().to_u64(),\n+        tcx.sess.local_stable_crate_id(),\n     )\n }"}, {"sha": "a9468a90b5374fe5658e3348c07f76a05d51e034", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -4,7 +4,7 @@ use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::ItemId;\n use rustc_index::vec::Idx;\n@@ -313,8 +313,8 @@ impl<'tcx> CodegenUnit<'tcx> {\n         // avoid collisions and is still reasonably short for filenames.\n         let mut hasher = StableHasher::new();\n         human_readable_name.hash(&mut hasher);\n-        let hash: u128 = hasher.finish();\n-        let hash = hash & ((1u128 << 80) - 1);\n+        let hash: Hash128 = hasher.finish();\n+        let hash = hash.as_u128() & ((1u128 << 80) - 1);\n         base_n::encode(hash, base_n::CASE_INSENSITIVE)\n     }\n \n@@ -505,22 +505,13 @@ impl<'tcx> CodegenUnitNameBuilder<'tcx> {\n             // instantiating stuff for upstream crates.\n             let local_crate_id = if cnum != LOCAL_CRATE {\n                 let local_stable_crate_id = tcx.sess.local_stable_crate_id();\n-                format!(\n-                    \"-in-{}.{:08x}\",\n-                    tcx.crate_name(LOCAL_CRATE),\n-                    local_stable_crate_id.to_u64() as u32,\n-                )\n+                format!(\"-in-{}.{:08x}\", tcx.crate_name(LOCAL_CRATE), local_stable_crate_id)\n             } else {\n                 String::new()\n             };\n \n             let stable_crate_id = tcx.sess.local_stable_crate_id();\n-            format!(\n-                \"{}.{:08x}{}\",\n-                tcx.crate_name(cnum),\n-                stable_crate_id.to_u64() as u32,\n-                local_crate_id,\n-            )\n+            format!(\"{}.{:08x}{}\", tcx.crate_name(cnum), stable_crate_id, local_crate_id)\n         });\n \n         write!(cgu_name, \"{}\", crate_prefix).unwrap();"}, {"sha": "d1dbc531edfc160f59509878c9afe1898493b35e", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -141,14 +141,18 @@ impl<CTX> crate::ty::HashStable<CTX> for ScalarInt {\n \n impl<S: Encoder> Encodable<S> for ScalarInt {\n     fn encode(&self, s: &mut S) {\n-        s.emit_u128(self.data);\n-        s.emit_u8(self.size.get());\n+        let size = self.size.get();\n+        s.emit_u8(size);\n+        s.emit_raw_bytes(&self.data.to_le_bytes()[..size as usize]);\n     }\n }\n \n impl<D: Decoder> Decodable<D> for ScalarInt {\n     fn decode(d: &mut D) -> ScalarInt {\n-        ScalarInt { data: d.read_u128(), size: NonZeroU8::new(d.read_u8()).unwrap() }\n+        let mut data = [0u8; 16];\n+        let size = d.read_u8();\n+        data[..size as usize].copy_from_slice(d.read_raw_bytes(size as usize));\n+        ScalarInt { data: u128::from_le_bytes(data), size: NonZeroU8::new(size).unwrap() }\n     }\n }\n "}, {"sha": "1871775ee4a88c0a129a86e6312fd25935a34894", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -925,7 +925,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             crate_name,\n             // Don't print the whole stable crate id. That's just\n             // annoying in debug output.\n-            stable_crate_id.to_u64() >> (8 * 6),\n+            stable_crate_id.as_u64() >> (8 * 6),\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }"}, {"sha": "9106dce9b77db294c133b9fd7f3c25b59b097ad2", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -11,7 +11,7 @@ use crate::ty::{\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -124,7 +124,7 @@ impl IntTypeExt for IntegerType {\n impl<'tcx> TyCtxt<'tcx> {\n     /// Creates a hash of the type `Ty` which will be the same no matter what crate\n     /// context it's calculated within. This is used by the `type_id` intrinsic.\n-    pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {\n+    pub fn type_id_hash(self, ty: Ty<'tcx>) -> Hash64 {\n         // We want the type_id be independent of the types free regions, so we\n         // erase them. The erase_regions() call will also anonymize bound\n         // regions, which is desirable too."}, {"sha": "444b1565d36d80e8f79212e7cbe846aacf378b7f", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -577,5 +577,10 @@ fn get_body_span<'tcx>(\n fn hash_mir_source<'tcx>(tcx: TyCtxt<'tcx>, hir_body: &'tcx rustc_hir::Body<'tcx>) -> u64 {\n     // FIXME(cjgillot) Stop hashing HIR manually here.\n     let owner = hir_body.id().hir_id.owner;\n-    tcx.hir_owner_nodes(owner).unwrap().opt_hash_including_bodies.unwrap().to_smaller_hash()\n+    tcx.hir_owner_nodes(owner)\n+        .unwrap()\n+        .opt_hash_including_bodies\n+        .unwrap()\n+        .to_smaller_hash()\n+        .as_u64()\n }"}, {"sha": "37131f5376f51ab17fa875793d4947384e3c97a5", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -1,6 +1,7 @@\n use crate::QueryCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::memmap::Mmap;\n+use rustc_data_structures::stable_hasher::Hash64;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, RwLock};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_data_structures::unord::UnordSet;\n@@ -138,7 +139,7 @@ impl AbsoluteBytePos {\n /// is the only thing available when decoding the cache's [Footer].\n #[derive(Encodable, Decodable, Clone, Debug)]\n struct EncodedSourceFileId {\n-    file_name_hash: u64,\n+    file_name_hash: Hash64,\n     stable_crate_id: StableCrateId,\n }\n \n@@ -667,7 +668,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for ExpnId {\n             #[cfg(debug_assertions)]\n             {\n                 use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-                let local_hash: u64 = decoder.tcx.with_stable_hashing_context(|mut hcx| {\n+                let local_hash = decoder.tcx.with_stable_hashing_context(|mut hcx| {\n                     let mut hasher = StableHasher::new();\n                     expn_id.expn_data().hash_stable(&mut hcx, &mut hasher);\n                     hasher.finish()"}, {"sha": "32222df25d496e92fdb3df0ba7a663f46cabd6e5", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -5,7 +5,7 @@\n use crate::on_disk_cache::{CacheDecoder, CacheEncoder, EncodedDepNodeIndex};\n use crate::profiling_support::QueryKeyStringCache;\n use crate::{on_disk_cache, Queries};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_data_structures::sync::{AtomicU64, Lock};\n use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{\n@@ -342,7 +342,7 @@ pub(crate) fn create_query_frame<\n             let mut hasher = StableHasher::new();\n             std::mem::discriminant(&kind).hash_stable(&mut hcx, &mut hasher);\n             key.hash_stable(&mut hcx, &mut hasher);\n-            hasher.finish::<u64>()\n+            hasher.finish::<Hash64>()\n         })\n     };\n     let ty_adt_id = key.ty_adt_id();"}, {"sha": "fa1f51b04da77b3893da34f06143754e6dc892f0", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -16,6 +16,7 @@ pub use self::config::{HashResult, QueryConfig, TryLoadFromDisk};\n \n use crate::dep_graph::DepKind;\n use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n+use rustc_data_structures::stable_hasher::Hash64;\n use rustc_data_structures::sync::Lock;\n use rustc_errors::Diagnostic;\n use rustc_hir::def::DefKind;\n@@ -37,7 +38,7 @@ pub struct QueryStackFrame<D: DepKind> {\n     /// This hash is used to deterministically pick\n     /// a query to remove cycles in the parallel compiler.\n     #[cfg(parallel_compiler)]\n-    hash: u64,\n+    hash: Hash64,\n }\n \n impl<D: DepKind> QueryStackFrame<D> {\n@@ -49,7 +50,7 @@ impl<D: DepKind> QueryStackFrame<D> {\n         def_kind: Option<DefKind>,\n         dep_kind: D,\n         ty_adt_id: Option<DefId>,\n-        _hash: impl FnOnce() -> u64,\n+        _hash: impl FnOnce() -> Hash64,\n     ) -> Self {\n         Self {\n             description,"}, {"sha": "39b89017593d033aba8bc0b9709a2b69a728181f", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -573,7 +573,7 @@ where\n             // from disk. Re-hashing results is fairly expensive, so we can't\n             // currently afford to verify every hash. This subset should still\n             // give us some coverage of potential bugs though.\n-            let try_verify = prev_fingerprint.as_value().1 % 32 == 0;\n+            let try_verify = prev_fingerprint.split().1.as_u64() % 32 == 0;\n             if std::intrinsics::unlikely(\n                 try_verify || qcx.dep_context().sess().opts.unstable_opts.incremental_verify_ich,\n             ) {"}, {"sha": "14a8e8ff7271c32c9f2bd1b74a9d098fddacab9d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -811,7 +811,7 @@ impl Session {\n     }\n \n     pub fn generate_proc_macro_decls_symbol(&self, stable_crate_id: StableCrateId) -> String {\n-        format!(\"__rustc_proc_macro_decls_{:08x}__\", stable_crate_id.to_u64())\n+        format!(\"__rustc_proc_macro_decls_{:08x}__\", stable_crate_id.as_u64())\n     }\n \n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {"}, {"sha": "f05328ac1b423cbbab29e0b48528224c5d817ea5", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -1,12 +1,11 @@\n use crate::{HashStableContext, Symbol};\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher, ToStableHashKey};\n use rustc_data_structures::unhash::Unhasher;\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n-use std::borrow::Borrow;\n use std::fmt;\n use std::hash::{BuildHasherDefault, Hash, Hasher};\n \n@@ -105,20 +104,20 @@ impl DefPathHash {\n     /// originates from.\n     #[inline]\n     pub fn stable_crate_id(&self) -> StableCrateId {\n-        StableCrateId(self.0.as_value().0)\n+        StableCrateId(self.0.split().0)\n     }\n \n     /// Returns the crate-local part of the [DefPathHash].\n     ///\n     /// Used for tests.\n     #[inline]\n-    pub fn local_hash(&self) -> u64 {\n-        self.0.as_value().1\n+    pub fn local_hash(&self) -> Hash64 {\n+        self.0.split().1\n     }\n \n     /// Builds a new [DefPathHash] with the given [StableCrateId] and\n     /// `local_hash`, where `local_hash` must be unique within its crate.\n-    pub fn new(stable_crate_id: StableCrateId, local_hash: u64) -> DefPathHash {\n+    pub fn new(stable_crate_id: StableCrateId, local_hash: Hash64) -> DefPathHash {\n         DefPathHash(Fingerprint::new(stable_crate_id.0, local_hash))\n     }\n }\n@@ -129,13 +128,6 @@ impl Default for DefPathHash {\n     }\n }\n \n-impl Borrow<Fingerprint> for DefPathHash {\n-    #[inline]\n-    fn borrow(&self) -> &Fingerprint {\n-        &self.0\n-    }\n-}\n-\n /// A [`StableCrateId`] is a 64-bit hash of a crate name, together with all\n /// `-Cmetadata` arguments, and some other data. It is to [`CrateNum`] what [`DefPathHash`] is to\n /// [`DefId`]. It is stable across compilation sessions.\n@@ -147,15 +139,11 @@ impl Borrow<Fingerprint> for DefPathHash {\n ///\n /// For more information on the possibility of hash collisions in rustc,\n /// see the discussion in [`DefId`].\n-#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]\n-#[derive(HashStable_Generic, Encodable, Decodable)]\n-pub struct StableCrateId(pub(crate) u64);\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n+#[derive(Hash, HashStable_Generic, Encodable, Decodable)]\n+pub struct StableCrateId(pub(crate) Hash64);\n \n impl StableCrateId {\n-    pub fn to_u64(self) -> u64 {\n-        self.0\n-    }\n-\n     /// Computes the stable ID for a crate with the given name and\n     /// `-Cmetadata` arguments.\n     pub fn new(crate_name: Symbol, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n@@ -197,6 +185,16 @@ impl StableCrateId {\n \n         StableCrateId(hasher.finish())\n     }\n+\n+    pub fn as_u64(self) -> u64 {\n+        self.0.as_u64()\n+    }\n+}\n+\n+impl fmt::LowerHex for StableCrateId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::LowerHex::fmt(&self.0, f)\n+    }\n }\n \n rustc_index::newtype_index! {"}, {"sha": "f8741d85934a2549219ef3e8edc76aa519ca8af3", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -33,7 +33,7 @@ use crate::def_id::{CrateNum, DefId, StableCrateId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::HashingControls;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_index::vec::IndexVec;\n@@ -123,15 +123,15 @@ impl ExpnHash {\n     /// originates from.\n     #[inline]\n     pub fn stable_crate_id(self) -> StableCrateId {\n-        StableCrateId(self.0.as_value().0)\n+        StableCrateId(self.0.split().0)\n     }\n \n     /// Returns the crate-local part of the [ExpnHash].\n     ///\n     /// Used for tests.\n     #[inline]\n-    pub fn local_hash(self) -> u64 {\n-        self.0.as_value().1\n+    pub fn local_hash(self) -> Hash64 {\n+        self.0.split().1\n     }\n \n     #[inline]\n@@ -141,7 +141,7 @@ impl ExpnHash {\n \n     /// Builds a new [ExpnHash] with the given [StableCrateId] and\n     /// `local_hash`, where `local_hash` must be unique within its crate.\n-    fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {\n+    fn new(stable_crate_id: StableCrateId, local_hash: Hash64) -> ExpnHash {\n         ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))\n     }\n }\n@@ -350,7 +350,7 @@ pub struct HygieneData {\n     /// would have collisions without a disambiguator.\n     /// The keys of this map are always computed with `ExpnData.disambiguator`\n     /// set to 0.\n-    expn_data_disambiguators: FxHashMap<u64, u32>,\n+    expn_data_disambiguators: FxHashMap<Hash64, u32>,\n }\n \n impl HygieneData {\n@@ -1040,7 +1040,7 @@ impl ExpnData {\n     }\n \n     #[inline]\n-    fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {\n+    fn hash_expn(&self, ctx: &mut impl HashStableContext) -> Hash64 {\n         let mut hasher = StableHasher::new();\n         self.hash_stable(ctx, &mut hasher);\n         hasher.finish()"}, {"sha": "83f4907d517697ff04a74de79001af1646af768f", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -59,7 +59,7 @@ pub mod fatal_error;\n \n pub mod profiling;\n \n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash128, Hash64, HashStable, StableHasher};\n use rustc_data_structures::sync::{Lock, Lrc};\n \n use std::borrow::Cow;\n@@ -282,22 +282,22 @@ impl RealFileName {\n pub enum FileName {\n     Real(RealFileName),\n     /// Call to `quote!`.\n-    QuoteExpansion(u64),\n+    QuoteExpansion(Hash64),\n     /// Command line.\n-    Anon(u64),\n+    Anon(Hash64),\n     /// Hack in `src/librustc_ast/parse.rs`.\n     // FIXME(jseyfried)\n-    MacroExpansion(u64),\n-    ProcMacroSourceCode(u64),\n+    MacroExpansion(Hash64),\n+    ProcMacroSourceCode(Hash64),\n     /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.\n-    CfgSpec(u64),\n+    CfgSpec(Hash64),\n     /// Strings provided as crate attributes in the CLI.\n-    CliCrateAttr(u64),\n+    CliCrateAttr(Hash64),\n     /// Custom sources for explicit parser calls from plugins and drivers.\n     Custom(String),\n     DocTest(PathBuf, isize),\n     /// Post-substitution inline assembly from LLVM.\n-    InlineAsm(u64),\n+    InlineAsm(Hash64),\n }\n \n impl From<PathBuf> for FileName {\n@@ -1343,7 +1343,7 @@ pub struct SourceFile {\n     /// Locations of characters removed during normalization.\n     pub normalized_pos: Vec<NormalizedPos>,\n     /// A hash of the filename, used for speeding up hashing in incremental compilation.\n-    pub name_hash: u128,\n+    pub name_hash: Hash128,\n     /// Indicates which crate this `SourceFile` was imported from.\n     pub cnum: CrateNum,\n }\n@@ -1472,7 +1472,7 @@ impl<D: Decoder> Decodable<D> for SourceFile {\n         };\n         let multibyte_chars: Vec<MultiByteChar> = Decodable::decode(d);\n         let non_narrow_chars: Vec<NonNarrowChar> = Decodable::decode(d);\n-        let name_hash: u128 = Decodable::decode(d);\n+        let name_hash = Decodable::decode(d);\n         let normalized_pos: Vec<NormalizedPos> = Decodable::decode(d);\n         let cnum: CrateNum = Decodable::decode(d);\n         SourceFile {\n@@ -1514,7 +1514,7 @@ impl SourceFile {\n         let name_hash = {\n             let mut hasher: StableHasher = StableHasher::new();\n             name.hash(&mut hasher);\n-            hasher.finish::<u128>()\n+            hasher.finish()\n         };\n         let end_pos = start_pos.to_usize() + src.len();\n         assert!(end_pos <= u32::MAX as usize);"}, {"sha": "4c32c125fb95c874bc33041a6b5f597223fe3e26", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -13,7 +13,7 @@ pub use crate::hygiene::{ExpnData, ExpnKind};\n pub use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::stable_hasher::{Hash128, Hash64, StableHasher};\n use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n use std::cmp;\n use std::hash::Hash;\n@@ -138,7 +138,7 @@ impl FileLoader for RealFileLoader {\n pub struct StableSourceFileId {\n     /// A hash of the source file's [`FileName`]. This is hash so that it's size\n     /// is more predictable than if we included the actual [`FileName`] value.\n-    pub file_name_hash: u64,\n+    pub file_name_hash: Hash64,\n \n     /// The [`CrateNum`] of the crate this source file was originally parsed for.\n     /// We cannot include this information in the hash because at the time\n@@ -331,7 +331,7 @@ impl SourceMap {\n         &self,\n         filename: FileName,\n         src_hash: SourceFileHash,\n-        name_hash: u128,\n+        name_hash: Hash128,\n         source_len: usize,\n         cnum: CrateNum,\n         file_local_lines: Lock<SourceFileLines>,"}, {"sha": "a242ad6d1d730306f226012d43758078b7349876", "filename": "compiler/rustc_span/src/tests.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_span%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Ftests.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -3,8 +3,12 @@ use super::*;\n #[test]\n fn test_lookup_line() {\n     let source = \"abcdefghijklm\\nabcdefghij\\n...\".to_owned();\n-    let sf =\n-        SourceFile::new(FileName::Anon(0), source, BytePos(3), SourceFileHashAlgorithm::Sha256);\n+    let sf = SourceFile::new(\n+        FileName::Anon(Hash64::ZERO),\n+        source,\n+        BytePos(3),\n+        SourceFileHashAlgorithm::Sha256,\n+    );\n     sf.lines(|lines| assert_eq!(lines, &[BytePos(3), BytePos(17), BytePos(28)]));\n \n     assert_eq!(sf.lookup_line(BytePos(0)), None);"}, {"sha": "6a0ca06f69caad16eaa5acd0f594fd1396d039b8", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::ty::print::{PrettyPrinter, Print, Printer};\n@@ -93,7 +93,7 @@ fn get_symbol_hash<'tcx>(\n     item_type: Ty<'tcx>,\n \n     instantiating_crate: Option<CrateNum>,\n-) -> u64 {\n+) -> Hash64 {\n     let def_id = instance.def_id();\n     let substs = instance.substs;\n     debug!(\"get_symbol_hash(def_id={:?}, parameters={:?})\", def_id, substs);\n@@ -138,7 +138,7 @@ fn get_symbol_hash<'tcx>(\n         });\n \n         // 64 bits should be enough to avoid collisions.\n-        hasher.finish::<u64>()\n+        hasher.finish::<Hash64>()\n     })\n }\n \n@@ -176,7 +176,7 @@ impl SymbolPath {\n         }\n     }\n \n-    fn finish(mut self, hash: u64) -> String {\n+    fn finish(mut self, hash: Hash64) -> String {\n         self.finalize_pending_component();\n         // E = end name-sequence\n         let _ = write!(self.result, \"17h{hash:016x}E\");"}, {"sha": "262e8546a5d5b362395cb9e816f59084575810c6", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -406,7 +406,7 @@ fn encode_ty_name(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n \n     // Crate disambiguator and name\n     s.push('C');\n-    s.push_str(&to_disambiguator(tcx.stable_crate_id(def_path.krate).to_u64()));\n+    s.push_str(&to_disambiguator(tcx.stable_crate_id(def_path.krate).as_u64()));\n     let crate_name = tcx.crate_name(def_path.krate).to_string();\n     let _ = write!(s, \"{}{}\", crate_name.len(), &crate_name);\n "}, {"sha": "2235524129e62b37cf90419634036a07904c07b3", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0445fbdd835c92156e4d06e42ce99a39e9315343/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=0445fbdd835c92156e4d06e42ce99a39e9315343", "patch": "@@ -731,7 +731,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n-        self.push_disambiguator(stable_crate_id.to_u64());\n+        self.push_disambiguator(stable_crate_id.as_u64());\n         let name = self.tcx.crate_name(cnum);\n         self.push_ident(name.as_str());\n         Ok(self)"}]}