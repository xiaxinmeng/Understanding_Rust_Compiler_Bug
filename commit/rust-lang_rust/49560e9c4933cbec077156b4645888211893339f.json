{"sha": "49560e9c4933cbec077156b4645888211893339f", "node_id": "C_kwDOAAsO6NoAKDQ5NTYwZTljNDkzM2NiZWMwNzcxNTZiNDY0NTg4ODIxMTg5MzMzOWY", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-14T15:59:29Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-23T18:38:53Z"}, "message": "Ban deps only during query loading from disk", "tree": {"sha": "8b0c43f2ca0033857f5ce2c823ff60a75c0b35d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0c43f2ca0033857f5ce2c823ff60a75c0b35d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49560e9c4933cbec077156b4645888211893339f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHEwj0ACgkQtAh+UQ6Y\nsWRbCxAAsuKSFIF+PIKknWPmEcVitDO2cwuGZbvA75S4+LWDDjJbSvBxJW9WmtVU\nvv7zqS2geHXp7sePejiFMudyX8Z0kv0Kfa6BYgYv4A/NxeaT3/egY+mMGMJLkbvy\nRAJkIUsC6+fLDoXr6bEebFU7SbihuudfIG3in4nhwb7pqXXiCrOLV0TaclwFcwIp\nkHMTunnwlMIy5gSqhyPvYgra+PFpf9Nesvl60qYT/RoiMSmjx4LnMyRXEC5hLE6p\njNAjO6PcJ1wXH3pT7tB3yAP7nHsCp0wmjFh1V55wfVQE1Iw346uWK+NqpMVW0f/g\nhhmYwi5F7aGDFCclvVqJNvCcn0tGxYMTN1KhXYeDtxxrpLxlKvQiAxOmluUElGc/\nvNWgMaN/JkPlZoIywVDPLW2izlQMjTD3nbataw14byaZq0wtHQjfmCsl5otvXrJB\nMtFQUUcTer7pE1vWfmQ0FlcNeNCS0htyO+zTPynmFv3ZVzUxfbx/OiFENZqnjuoS\n/KxFWeQz7nO46dbW5QbSZ9/noq0DDD3ydASjSAXNQvjmMZXJHQlP5aYTHBDnJFnK\nf6CAwN1XwaOFmbEZT4Gg+v0pKoGSPlRQZ7aCC5uIJaCywPyAbU/SdnVosWRo3hV/\n93+Wx9lkGFO+j2qX5P3m4sAat61Enr7/apZB3OrL+xKSfY6j9j8=\n=+JHO\n-----END PGP SIGNATURE-----", "payload": "tree 8b0c43f2ca0033857f5ce2c823ff60a75c0b35d2\nparent 75181dc22f6e25760a95fdc4ad92f9a054506486\nauthor Aaron Hill <aa1ronham@gmail.com> 1639497569 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1640284733 -0500\n\nBan deps only during query loading from disk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49560e9c4933cbec077156b4645888211893339f", "html_url": "https://github.com/rust-lang/rust/commit/49560e9c4933cbec077156b4645888211893339f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49560e9c4933cbec077156b4645888211893339f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75181dc22f6e25760a95fdc4ad92f9a054506486", "url": "https://api.github.com/repos/rust-lang/rust/commits/75181dc22f6e25760a95fdc4ad92f9a054506486", "html_url": "https://github.com/rust-lang/rust/commit/75181dc22f6e25760a95fdc4ad92f9a054506486"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "fd22698e419d189734c72a6d2367aade4291de54", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49560e9c4933cbec077156b4645888211893339f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49560e9c4933cbec077156b4645888211893339f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=49560e9c4933cbec077156b4645888211893339f", "patch": "@@ -2,14 +2,14 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepContext, DepNode, DepNodeIndex, DepNodeParams};\n+use crate::dep_graph::{DepContext, DepNode, DepNodeIndex, DepNodeParams, TaskDeps};\n use crate::query::caches::QueryCache;\n use crate::query::config::{QueryDescription, QueryVtable};\n use crate::query::job::{\n     report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId,\n };\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n-\n+use crate::dep_graph::DepKind;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHasher};\n #[cfg(parallel_compiler)]\n@@ -515,7 +515,13 @@ where\n     // Some things are never cached on disk.\n     if query.cache_on_disk {\n         let prof_timer = tcx.dep_context().profiler().incr_cache_loading();\n-        let result = query.try_load_from_disk(tcx, prev_dep_node_index);\n+\n+        let mut deps = TaskDeps::default();\n+        deps.read_allowed = false;\n+        let deps = Lock::new(deps);\n+        let result = CTX::DepKind::with_deps(Some(&deps), || {\n+            query.try_load_from_disk(tcx, prev_dep_node_index)\n+        });\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         if let Some(result) = result {"}]}