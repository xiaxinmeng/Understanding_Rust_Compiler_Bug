{"sha": "b36d7a0c61b26ed19511de63aab7517fad1a9109", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNmQ3YTBjNjFiMjZlZDE5NTExZGU2M2FhYjc1MTdmYWQxYTkxMDk=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-06-06T05:12:12Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-06-06T05:12:12Z"}, "message": "Remove `to_string()`s from CompilerLintFunctions", "tree": {"sha": "76a060a4006477015e535c1bc24092ff1bcf3de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a060a4006477015e535c1bc24092ff1bcf3de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36d7a0c61b26ed19511de63aab7517fad1a9109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36d7a0c61b26ed19511de63aab7517fad1a9109", "html_url": "https://github.com/rust-lang/rust/commit/b36d7a0c61b26ed19511de63aab7517fad1a9109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36d7a0c61b26ed19511de63aab7517fad1a9109/comments", "author": null, "committer": null, "parents": [{"sha": "42f96b2558abd0d235aee87ce4b3a167d5df0663", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f96b2558abd0d235aee87ce4b3a167d5df0663", "html_url": "https://github.com/rust-lang/rust/commit/42f96b2558abd0d235aee87ce4b3a167d5df0663"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6b91ac8cc99e205abd90670f76c8a25588e7e680", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b36d7a0c61b26ed19511de63aab7517fad1a9109/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36d7a0c61b26ed19511de63aab7517fad1a9109/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=b36d7a0c61b26ed19511de63aab7517fad1a9109", "patch": "@@ -213,17 +213,17 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n \n #[derive(Clone, Default)]\n pub struct CompilerLintFunctions {\n-    map: FxHashMap<String, String>,\n+    map: FxHashMap<&'static str, &'static str>,\n }\n \n impl CompilerLintFunctions {\n     pub fn new() -> Self {\n         let mut map = FxHashMap::default();\n-        map.insert(\"span_lint\".to_string(), \"utils::span_lint\".to_string());\n-        map.insert(\"struct_span_lint\".to_string(), \"utils::span_lint\".to_string());\n-        map.insert(\"lint\".to_string(), \"utils::span_lint\".to_string());\n-        map.insert(\"span_lint_note\".to_string(), \"utils::span_note_and_lint\".to_string());\n-        map.insert(\"span_lint_help\".to_string(), \"utils::span_help_and_lint\".to_string());\n+        map.insert(\"span_lint\", \"utils::span_lint\");\n+        map.insert(\"struct_span_lint\", \"utils::span_lint\");\n+        map.insert(\"lint\", \"utils::span_lint\");\n+        map.insert(\"span_lint_note\", \"utils::span_note_and_lint\");\n+        map.insert(\"span_lint_help\", \"utils::span_help_and_lint\");\n         Self { map }\n     }\n }\n@@ -234,8 +234,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n-            let fn_name = path.ident.as_str().to_string();\n-            if let Some(sugg) = self.map.get(&fn_name);\n+            let fn_name = path.ident;\n+            if let Some(sugg) = self.map.get(&*fn_name.as_str());\n             let ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n                 || match_type(cx, ty, &paths::LATE_CONTEXT);"}]}