{"sha": "6024426e86af6dbe3991901752d886e9d43efa2a", "node_id": "C_kwDOAAsO6NoAKDYwMjQ0MjZlODZhZjZkYmUzOTkxOTAxNzUyZDg4NmU5ZDQzZWZhMmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T05:47:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T05:47:32Z"}, "message": "Rollup merge of #92695 - Swatinem:cover-nested, r=wesleywiser\n\nAdd `#[no_coverage]` tests for nested functions\n\nI was playing around a bit trying to figure out how `#[no_coverage]` behaves for nested functions and thought I might as well add this as a testcase.\n\nThe \"nesting covered fn inside not covered fn\" case looks pretty much as expected.\n\nThe \"nesting not covered fn inside a covered fn\" case however seems a bit counterintuitive.\nEssentially the region of the outer function \"covers\" its whole lexical range. And the inner function does not generate any region at all. \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f\n\nr? `@richkadel`", "tree": {"sha": "00a50a80ec652585efcc62c34a152c928c533c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a50a80ec652585efcc62c34a152c928c533c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6024426e86af6dbe3991901752d886e9d43efa2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAgP0CRBK7hj4Ov3rIwAAQloIAAA9xv9A6myGFtjj+8C0QI0G\nVennmFw7ZhnqCZNOdhk6p10PaVSH1tabt3RDQNQXcq4R+8HcnYOCulJEelfguOGv\nUDXzOYjpnMyMLkLj1N/CoNPv+mih2IaRfRjPXjDkcnPQnJ22apCZCar8yczdeZ5z\nun2KAR6xL2i7Ux7wY5w7Qp+sQ3ZRUQCT594J5jxNPQB3TMYgPpypLMbbp2cJKUzO\nwSPPR4sEkWQrSzmjPoAV8Y7JEdToDrwENXPDrs6538nye4+oQZYPRO3+no4Sh7hI\n7507hSggVvyoYhpf9g3B6eV4OLTsqiTmbxS5eQfswIZyT4sYbqOHcFf7ph/iu78=\n=hRyx\n-----END PGP SIGNATURE-----\n", "payload": "tree 00a50a80ec652585efcc62c34a152c928c533c4a\nparent 1f841fc5fe4f7c6f6c73de93930c3ee38c5f814b\nparent fe9271af22f4a24a3fb06336c2e38fa124158bc6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644299252 +0100\ncommitter GitHub <noreply@github.com> 1644299252 +0100\n\nRollup merge of #92695 - Swatinem:cover-nested, r=wesleywiser\n\nAdd `#[no_coverage]` tests for nested functions\n\nI was playing around a bit trying to figure out how `#[no_coverage]` behaves for nested functions and thought I might as well add this as a testcase.\n\nThe \"nesting covered fn inside not covered fn\" case looks pretty much as expected.\n\nThe \"nesting not covered fn inside a covered fn\" case however seems a bit counterintuitive.\nEssentially the region of the outer function \"covers\" its whole lexical range. And the inner function does not generate any region at all. \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f\n\nr? `@richkadel`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6024426e86af6dbe3991901752d886e9d43efa2a", "html_url": "https://github.com/rust-lang/rust/commit/6024426e86af6dbe3991901752d886e9d43efa2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6024426e86af6dbe3991901752d886e9d43efa2a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f841fc5fe4f7c6f6c73de93930c3ee38c5f814b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f841fc5fe4f7c6f6c73de93930c3ee38c5f814b", "html_url": "https://github.com/rust-lang/rust/commit/1f841fc5fe4f7c6f6c73de93930c3ee38c5f814b"}, {"sha": "fe9271af22f4a24a3fb06336c2e38fa124158bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9271af22f4a24a3fb06336c2e38fa124158bc6", "html_url": "https://github.com/rust-lang/rust/commit/fe9271af22f4a24a3fb06336c2e38fa124158bc6"}], "stats": {"total": 118, "additions": 109, "deletions": 9}, "files": [{"sha": "83a9204136f7c15d82a676c84c9c461e55e297db", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_crate.txt", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6024426e86af6dbe3991901752d886e9d43efa2a/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6024426e86af6dbe3991901752d886e9d43efa2a/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt?ref=6024426e86af6dbe3991901752d886e9d43efa2a", "patch": "@@ -6,8 +6,8 @@\n     6|       |    println!(\"called but not covered\");\n     7|       |}\n     8|       |\n-    9|       |#[no_coverage]\n-   10|       |fn do_not_add_coverage_2() {\n+    9|       |fn do_not_add_coverage_2() {\n+   10|       |    #![no_coverage]\n    11|       |    println!(\"called but not covered\");\n    12|       |}\n    13|       |\n@@ -28,10 +28,60 @@\n    28|      0|    println!(\"not called but covered\");\n    29|      0|}\n    30|       |\n-   31|      1|fn main() {\n-   32|      1|    do_not_add_coverage_1();\n-   33|      1|    do_not_add_coverage_2();\n-   34|      1|    add_coverage_1();\n-   35|      1|    add_coverage_2();\n-   36|      1|}\n+   31|       |// FIXME: These test-cases illustrate confusing results of nested functions.\n+   32|       |// See https://github.com/rust-lang/rust/issues/93319\n+   33|       |mod nested_fns {\n+   34|       |    #[no_coverage]\n+   35|       |    pub fn outer_not_covered(is_true: bool) {\n+   36|      1|        fn inner(is_true: bool) {\n+   37|      1|            if is_true {\n+   38|      1|                println!(\"called and covered\");\n+   39|      1|            } else {\n+   40|      0|                println!(\"absolutely not covered\");\n+   41|      0|            }\n+   42|      1|        }\n+   43|       |        println!(\"called but not covered\");\n+   44|       |        inner(is_true);\n+   45|       |    }\n+   46|       |\n+   47|      1|    pub fn outer(is_true: bool) {\n+   48|      1|        println!(\"called and covered\");\n+   49|      1|        inner_not_covered(is_true);\n+   50|      1|\n+   51|      1|        #[no_coverage]\n+   52|      1|        fn inner_not_covered(is_true: bool) {\n+   53|      1|            if is_true {\n+   54|      1|                println!(\"called but not covered\");\n+   55|      1|            } else {\n+   56|      1|                println!(\"absolutely not covered\");\n+   57|      1|            }\n+   58|      1|        }\n+   59|      1|    }\n+   60|       |\n+   61|      1|    pub fn outer_both_covered(is_true: bool) {\n+   62|      1|        println!(\"called and covered\");\n+   63|      1|        inner(is_true);\n+   64|      1|\n+   65|      1|        fn inner(is_true: bool) {\n+   66|      1|            if is_true {\n+   67|      1|                println!(\"called and covered\");\n+   68|      1|            } else {\n+   69|      0|                println!(\"absolutely not covered\");\n+   70|      0|            }\n+   71|      1|        }\n+   72|      1|    }\n+   73|       |}\n+   74|       |\n+   75|      1|fn main() {\n+   76|      1|    let is_true = std::env::args().len() == 1;\n+   77|      1|\n+   78|      1|    do_not_add_coverage_1();\n+   79|      1|    do_not_add_coverage_2();\n+   80|      1|    add_coverage_1();\n+   81|      1|    add_coverage_2();\n+   82|      1|\n+   83|      1|    nested_fns::outer_not_covered(is_true);\n+   84|      1|    nested_fns::outer(is_true);\n+   85|      1|    nested_fns::outer_both_covered(is_true);\n+   86|      1|}\n "}, {"sha": "0bfbdda2cab037cd1d748d9cb7b063710db15c10", "filename": "src/test/run-make-fulldeps/coverage/no_cov_crate.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6024426e86af6dbe3991901752d886e9d43efa2a/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6024426e86af6dbe3991901752d886e9d43efa2a/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs?ref=6024426e86af6dbe3991901752d886e9d43efa2a", "patch": "@@ -6,8 +6,8 @@ fn do_not_add_coverage_1() {\n     println!(\"called but not covered\");\n }\n \n-#[no_coverage]\n fn do_not_add_coverage_2() {\n+    #![no_coverage]\n     println!(\"called but not covered\");\n }\n \n@@ -28,9 +28,59 @@ fn add_coverage_not_called() {\n     println!(\"not called but covered\");\n }\n \n+// FIXME: These test-cases illustrate confusing results of nested functions.\n+// See https://github.com/rust-lang/rust/issues/93319\n+mod nested_fns {\n+    #[no_coverage]\n+    pub fn outer_not_covered(is_true: bool) {\n+        fn inner(is_true: bool) {\n+            if is_true {\n+                println!(\"called and covered\");\n+            } else {\n+                println!(\"absolutely not covered\");\n+            }\n+        }\n+        println!(\"called but not covered\");\n+        inner(is_true);\n+    }\n+\n+    pub fn outer(is_true: bool) {\n+        println!(\"called and covered\");\n+        inner_not_covered(is_true);\n+\n+        #[no_coverage]\n+        fn inner_not_covered(is_true: bool) {\n+            if is_true {\n+                println!(\"called but not covered\");\n+            } else {\n+                println!(\"absolutely not covered\");\n+            }\n+        }\n+    }\n+\n+    pub fn outer_both_covered(is_true: bool) {\n+        println!(\"called and covered\");\n+        inner(is_true);\n+\n+        fn inner(is_true: bool) {\n+            if is_true {\n+                println!(\"called and covered\");\n+            } else {\n+                println!(\"absolutely not covered\");\n+            }\n+        }\n+    }\n+}\n+\n fn main() {\n+    let is_true = std::env::args().len() == 1;\n+\n     do_not_add_coverage_1();\n     do_not_add_coverage_2();\n     add_coverage_1();\n     add_coverage_2();\n+\n+    nested_fns::outer_not_covered(is_true);\n+    nested_fns::outer(is_true);\n+    nested_fns::outer_both_covered(is_true);\n }"}]}