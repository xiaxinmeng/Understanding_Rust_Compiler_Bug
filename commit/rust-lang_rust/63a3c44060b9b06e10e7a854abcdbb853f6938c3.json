{"sha": "63a3c44060b9b06e10e7a854abcdbb853f6938c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYTNjNDQwNjBiOWIwNmUxMGU3YTg1NGFiY2RiYjg1M2Y2OTM4YzM=", "commit": {"author": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-11-29T17:32:11Z"}, "committer": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-12-03T23:54:28Z"}, "message": "Remove unnecessary unsafe_size_count_copies tests", "tree": {"sha": "fa0cc732ea06b6a593d39fe3cfe04c2191e2f529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa0cc732ea06b6a593d39fe3cfe04c2191e2f529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a3c44060b9b06e10e7a854abcdbb853f6938c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a3c44060b9b06e10e7a854abcdbb853f6938c3", "html_url": "https://github.com/rust-lang/rust/commit/63a3c44060b9b06e10e7a854abcdbb853f6938c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a3c44060b9b06e10e7a854abcdbb853f6938c3/comments", "author": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b80990fe01646868f85245f608203e23f64184a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b80990fe01646868f85245f608203e23f64184a", "html_url": "https://github.com/rust-lang/rust/commit/1b80990fe01646868f85245f608203e23f64184a"}], "stats": {"total": 98, "additions": 3, "deletions": 95}, "files": [{"sha": "2a9adeb6bd9b2246831ce7bb3bd76284378eef9b", "filename": "tests/ui/unsafe_sizeof_count_copies.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63a3c44060b9b06e10e7a854abcdbb853f6938c3/tests%2Fui%2Funsafe_sizeof_count_copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a3c44060b9b06e10e7a854abcdbb853f6938c3/tests%2Fui%2Funsafe_sizeof_count_copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_sizeof_count_copies.rs?ref=63a3c44060b9b06e10e7a854abcdbb853f6938c3", "patch": "@@ -34,36 +34,16 @@ fn main() {\n \n     // Count expression involving multiplication of size_of (Should trigger the lint)\n     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n-\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n \n     // Count expression involving nested multiplications of size_of (Should trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * HALF_SIZE * 2) };\n     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n \n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE * HALF_SIZE) };\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * HALF_SIZE * 2) };\n-\n     // Count expression involving divisions of size_of (Should trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * DOUBLE_SIZE / 2) };\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / 2 * size_of_val(&x[0])) };\n-\n     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * DOUBLE_SIZE / 2) };\n \n     // No size_of calls (Should not trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n-\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n \n     // Different types for pointee and size_of (Should not trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u16>() / 2 * SIZE) };\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&0u16) / 2 * SIZE) };\n-\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u16>() / 2 * SIZE) };\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&0u16) / 2 * SIZE) };\n+    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u16>() / 2 * SIZE) };\n }"}, {"sha": "7989e96dd21e6a493f1ede4517737965e8b9ae81", "filename": "tests/ui/unsafe_sizeof_count_copies.stderr", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/63a3c44060b9b06e10e7a854abcdbb853f6938c3/tests%2Fui%2Funsafe_sizeof_count_copies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63a3c44060b9b06e10e7a854abcdbb853f6938c3/tests%2Fui%2Funsafe_sizeof_count_copies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_sizeof_count_copies.stderr?ref=63a3c44060b9b06e10e7a854abcdbb853f6938c3", "patch": "@@ -111,93 +111,21 @@ LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>(\n    |\n    = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n \n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:37:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n   --> $DIR/unsafe_sizeof_count_copies.rs:39:14\n    |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:40:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:43:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * HALF_SIZE * 2) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:44:14\n-   |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n \n error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:46:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE * HALF_SIZE) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:47:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * HALF_SIZE * 2) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:50:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * DOUBLE_SIZE / 2) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:51:14\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / 2 * size_of_val(&x[0])) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:53:14\n+  --> $DIR/unsafe_sizeof_count_copies.rs:42:14\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n \n-error: unsafe memory copying using a byte count (multiplied by size_of/size_of_val::<T>) instead of a count of T\n-  --> $DIR/unsafe_sizeof_count_copies.rs:54:14\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * DOUBLE_SIZE / 2) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n-\n-error: aborting due to 25 previous errors\n+error: aborting due to 16 previous errors\n "}]}