{"sha": "f2051212c2ac670bf20f8467bac7898e72d4d34d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMDUxMjEyYzJhYzY3MGJmMjBmODQ2N2JhYzc4OThlNzJkNGQzNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-05T22:37:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-06T16:42:47Z"}, "message": "remove use of rbml and just use opaque encoder", "tree": {"sha": "d48971f7f69129cf65e05614419c0d199c72194d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d48971f7f69129cf65e05614419c0d199c72194d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2051212c2ac670bf20f8467bac7898e72d4d34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2051212c2ac670bf20f8467bac7898e72d4d34d", "html_url": "https://github.com/rust-lang/rust/commit/f2051212c2ac670bf20f8467bac7898e72d4d34d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2051212c2ac670bf20f8467bac7898e72d4d34d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ec282df8fb658cca1a0a3acb2cb6cf62fd1f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ec282df8fb658cca1a0a3acb2cb6cf62fd1f84", "html_url": "https://github.com/rust-lang/rust/commit/e9ec282df8fb658cca1a0a3acb2cb6cf62fd1f84"}], "stats": {"total": 57, "additions": 16, "deletions": 41}, "files": [{"sha": "a86d1c3c13bcd53ec2bbf10322356aa457e42368", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2051212c2ac670bf20f8467bac7898e72d4d34d/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2051212c2ac670bf20f8467bac7898e72d4d34d/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=f2051212c2ac670bf20f8467bac7898e72d4d34d", "patch": "@@ -11,8 +11,8 @@\n //! Code to save/load the dep-graph from files.\n \n use calculate_svh::SvhCalculate;\n-use rbml::{self, Doc};\n-use rbml::reader::{self, DecodeResult, Decoder};\n+use rbml::Error;\n+use rbml::opaque::Decoder;\n use rustc::dep_graph::DepNode;\n use rustc::middle::def_id::DefId;\n use rustc::ty;\n@@ -66,42 +66,30 @@ pub fn load_dep_graph_if_exists<'tcx>(tcx: &ty::TyCtxt<'tcx>, path: &Path) {\n         }\n     }\n \n-    match decode_dep_graph(tcx, Doc::new(&data)) {\n+    match decode_dep_graph(tcx, &data) {\n         Ok(dirty) => dirty,\n         Err(err) => {\n             bug!(\"decoding error in dep-graph from `{}`: {}\", path.display(), err);\n         }\n     }\n }\n \n-pub fn decode_dep_graph<'tcx, 'doc>(tcx: &ty::TyCtxt<'tcx>, doc: rbml::Doc<'doc>)\n-                                    -> DecodeResult<()>\n+pub fn decode_dep_graph<'tcx>(tcx: &ty::TyCtxt<'tcx>, data: &[u8])\n+                              -> Result<(), Error>\n {\n-    // First load the directory, which maps the def-ids found\n-    // elsewhere into `DefPath`. We can then refresh the `DefPath` to\n-    // obtain updated def-ids.\n-    let directory = {\n-        let directory_doc = reader::get_doc(doc, DIRECTORY_TAG);\n-        let mut decoder = Decoder::new(directory_doc);\n-        try!(DefIdDirectory::decode(&mut decoder))\n-    };\n+    // Deserialize the directory and dep-graph.\n+    let mut decoder = Decoder::new(data, 0);\n+    let directory = try!(DefIdDirectory::decode(&mut decoder));\n+    let serialized_dep_graph = try!(SerializedDepGraph::decode(&mut decoder));\n \n     debug!(\"decode_dep_graph: directory = {:#?}\", directory);\n+    debug!(\"decode_dep_graph: serialized_dep_graph = {:#?}\", serialized_dep_graph);\n \n-    // Retrace those paths to find their current location (if any).\n+    // Retrace the paths in the directory to find their current location (if any).\n     let retraced = directory.retrace(tcx);\n \n     debug!(\"decode_dep_graph: retraced = {:#?}\", retraced);\n \n-    // Deserialize the dep-graph (which will include DefPathIndex entries)\n-    let serialized_dep_graph = {\n-        let dep_graph_doc = reader::get_doc(doc, DEP_GRAPH_TAG);\n-        let mut decoder = Decoder::new(dep_graph_doc);\n-        try!(SerializedDepGraph::decode(&mut decoder))\n-    };\n-\n-    debug!(\"decode_dep_graph: serialized_dep_graph = {:#?}\", serialized_dep_graph);\n-\n     // Compute the set of Hir nodes whose data has changed.\n     let mut dirty_nodes =\n         initial_dirty_nodes(tcx, &serialized_dep_graph.hashes, &retraced);"}, {"sha": "d88f9e42b08ce12a7c136095d6a3d3deadccf5f2", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2051212c2ac670bf20f8467bac7898e72d4d34d/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2051212c2ac670bf20f8467bac7898e72d4d34d/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=f2051212c2ac670bf20f8467bac7898e72d4d34d", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use calculate_svh::SvhCalculate;\n-use rbml::writer::{EncodeResult, Encoder};\n+use rbml::opaque::Encoder;\n use rustc::dep_graph::DepNode;\n use rustc::ty;\n use rustc_serialize::{Encodable as RustcEncodable};\n-use std::io::{Cursor, Write};\n+use std::io::{self, Cursor, Write};\n use std::fs::{self, File};\n \n use super::data::*;\n@@ -70,7 +70,7 @@ pub fn save_dep_graph<'tcx>(tcx: &ty::TyCtxt<'tcx>) {\n \n pub fn encode_dep_graph<'tcx>(tcx: &ty::TyCtxt<'tcx>,\n                               encoder: &mut Encoder)\n-                              -> EncodeResult\n+                              -> io::Result<()>\n {\n     // Here we take advantage of how RBML allows us to skip around\n     // and encode the depgraph as a two-part structure:\n@@ -126,19 +126,10 @@ pub fn encode_dep_graph<'tcx>(tcx: &ty::TyCtxt<'tcx>,\n \n     debug!(\"graph = {:#?}\", graph);\n \n-    // Encode the graph data into RBML.\n-    try!(encoder.start_tag(DEP_GRAPH_TAG));\n-    try!(graph.encode(encoder));\n-    try!(encoder.end_tag());\n-\n-    // Now encode the directory.\n+    // Encode the directory and then the graph data.\n     let directory = builder.into_directory();\n-\n-    debug!(\"directory = {:#?}\", directory);\n-\n-    try!(encoder.start_tag(DIRECTORY_TAG));\n     try!(directory.encode(encoder));\n-    try!(encoder.end_tag());\n+    try!(graph.encode(encoder));\n \n     Ok(())\n }"}, {"sha": "9b4e5997efe42c3dca6f12daa8ea395840ea6622", "filename": "src/librustc_incremental/persist/util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2051212c2ac670bf20f8467bac7898e72d4d34d/src%2Flibrustc_incremental%2Fpersist%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2051212c2ac670bf20f8467bac7898e72d4d34d/src%2Flibrustc_incremental%2Fpersist%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Futil.rs?ref=f2051212c2ac670bf20f8467bac7898e72d4d34d", "patch": "@@ -12,10 +12,6 @@ use rustc::ty;\n use std::fs;\n use std::path::PathBuf;\n \n-pub const DEP_GRAPH_TAG: usize = 0x100;\n-\n-pub const DIRECTORY_TAG: usize = DEP_GRAPH_TAG + 1;\n-\n pub fn dep_graph_path<'tcx>(tcx: &ty::TyCtxt<'tcx>) -> Option<PathBuf> {\n     // For now, just save/load dep-graph from\n     // directory/dep_graph.rbml"}]}