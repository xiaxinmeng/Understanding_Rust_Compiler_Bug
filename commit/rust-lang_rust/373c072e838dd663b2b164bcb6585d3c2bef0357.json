{"sha": "373c072e838dd663b2b164bcb6585d3c2bef0357", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3M2MwNzJlODM4ZGQ2NjNiMmIxNjRiY2I2NTg1ZDNjMmJlZjAzNTc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-17T00:10:10Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-17T00:10:10Z"}, "message": "deque: avoid Copy in peek_{front,back}", "tree": {"sha": "fb2fba9dd406890f96c64cba7213931322df0c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb2fba9dd406890f96c64cba7213931322df0c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373c072e838dd663b2b164bcb6585d3c2bef0357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373c072e838dd663b2b164bcb6585d3c2bef0357", "html_url": "https://github.com/rust-lang/rust/commit/373c072e838dd663b2b164bcb6585d3c2bef0357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373c072e838dd663b2b164bcb6585d3c2bef0357/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5929f159999b1d9712b8c1dd9fe92ce28c64a741", "url": "https://api.github.com/repos/rust-lang/rust/commits/5929f159999b1d9712b8c1dd9fe92ce28c64a741", "html_url": "https://github.com/rust-lang/rust/commit/5929f159999b1d9712b8c1dd9fe92ce28c64a741"}], "stats": {"total": 102, "additions": 50, "deletions": 52}, "files": [{"sha": "b548623ba7cb9dd3a7531f3dea7e8e92e609244a", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 50, "deletions": 52, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/373c072e838dd663b2b164bcb6585d3c2bef0357/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373c072e838dd663b2b164bcb6585d3c2bef0357/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=373c072e838dd663b2b164bcb6585d3c2bef0357", "patch": "@@ -42,11 +42,14 @@ impl<T> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n               elts: vec::from_fn(initial_capacity, |_| None)}\n     }\n+\n+    fn peek_front(&self) -> &self/T { get(self.elts, self.lo) }\n+    fn peek_back(&self) -> &self/T { get(self.elts, self.hi - 1u) }\n }\n \n impl<T: Copy> Deque<T> {\n     fn add_front(&mut self, t: T) {\n-        let oldlo: uint = self.lo;\n+        let oldlo = self.lo;\n         if self.lo == 0u {\n             self.lo = self.elts.len() - 1u;\n         } else { self.lo -= 1u; }\n@@ -88,10 +91,6 @@ impl<T: Copy> Deque<T> {\n         t\n     }\n \n-    fn peek_front(&self) -> T { *get(self.elts, self.lo) }\n-\n-    fn peek_back(&self) -> T { *get(self.elts, self.hi - 1u) }\n-\n     fn get(&self, i: int) -> T {\n         let idx = (self.lo + (i as uint)) % self.elts.len();\n         *get(self.elts, idx)\n@@ -122,52 +121,51 @@ fn get<T>(elts: &r/[Option<T>], i: uint) -> &r/T {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n     use super::*;\n \n     #[test]\n     fn test_simple() {\n         let mut d = Deque::new();\n-        assert (d.len() == 0u);\n+        assert d.len() == 0u;\n         d.add_front(17);\n         d.add_front(42);\n         d.add_back(137);\n-        assert (d.len() == 3u);\n+        assert d.len() == 3u;\n         d.add_back(137);\n-        assert (d.len() == 4u);\n+        assert d.len() == 4u;\n         log(debug, d.peek_front());\n-        assert (d.peek_front() == 42);\n+        assert *d.peek_front() == 42;\n         log(debug, d.peek_back());\n-        assert (d.peek_back() == 137);\n+        assert *d.peek_back() == 137;\n         let mut i: int = d.pop_front();\n         log(debug, i);\n-        assert (i == 42);\n+        assert i == 42;\n         i = d.pop_back();\n         log(debug, i);\n-        assert (i == 137);\n+        assert i == 137;\n         i = d.pop_back();\n         log(debug, i);\n-        assert (i == 137);\n+        assert i == 137;\n         i = d.pop_back();\n         log(debug, i);\n-        assert (i == 17);\n-        assert (d.len() == 0u);\n+        assert i == 17;\n+        assert d.len() == 0u;\n         d.add_back(3);\n-        assert (d.len() == 1u);\n+        assert d.len() == 1u;\n         d.add_front(2);\n-        assert (d.len() == 2u);\n+        assert d.len() == 2u;\n         d.add_back(4);\n-        assert (d.len() == 3u);\n+        assert d.len() == 3u;\n         d.add_front(1);\n-        assert (d.len() == 4u);\n+        assert d.len() == 4u;\n         log(debug, d.get(0));\n         log(debug, d.get(1));\n         log(debug, d.get(2));\n         log(debug, d.get(3));\n-        assert (d.get(0) == 1);\n-        assert (d.get(1) == 2);\n-        assert (d.get(2) == 3);\n-        assert (d.get(3) == 4);\n+        assert d.get(0) == 1;\n+        assert d.get(1) == 2;\n+        assert d.get(2) == 3;\n+        assert d.get(3) == 4;\n     }\n \n     #[test]\n@@ -178,58 +176,58 @@ mod tests {\n         let d: @int = @175;\n \n         let mut deq = Deque::new();\n-        assert (deq.len() == 0u);\n+        assert deq.len() == 0;\n         deq.add_front(a);\n         deq.add_front(b);\n         deq.add_back(c);\n-        assert (deq.len() == 3u);\n+        assert deq.len() == 3;\n         deq.add_back(d);\n-        assert (deq.len() == 4u);\n-        assert (deq.peek_front() == b);\n-        assert (deq.peek_back() == d);\n-        assert (deq.pop_front() == b);\n-        assert (deq.pop_back() == d);\n-        assert (deq.pop_back() == c);\n-        assert (deq.pop_back() == a);\n-        assert (deq.len() == 0u);\n+        assert deq.len() == 4;\n+        assert *deq.peek_front() == b;\n+        assert *deq.peek_back() == d;\n+        assert deq.pop_front() == b;\n+        assert deq.pop_back() == d;\n+        assert deq.pop_back() == c;\n+        assert deq.pop_back() == a;\n+        assert deq.len() == 0;\n         deq.add_back(c);\n-        assert (deq.len() == 1u);\n+        assert deq.len() == 1;\n         deq.add_front(b);\n-        assert (deq.len() == 2u);\n+        assert deq.len() == 2;\n         deq.add_back(d);\n-        assert (deq.len() == 3u);\n+        assert deq.len() == 3;\n         deq.add_front(a);\n-        assert (deq.len() == 4u);\n-        assert (deq.get(0) == a);\n-        assert (deq.get(1) == b);\n-        assert (deq.get(2) == c);\n-        assert (deq.get(3) == d);\n+        assert deq.len() == 4;\n+        assert deq.get(0) == a;\n+        assert deq.get(1) == b;\n+        assert deq.get(2) == c;\n+        assert deq.get(3) == d;\n     }\n \n     fn test_parameterized<T: Copy Eq Durable>(a: T, b: T, c: T, d: T) {\n         let mut deq = Deque::new();\n-        assert (deq.len() == 0u);\n+        assert deq.len() == 0;\n         deq.add_front(a);\n         deq.add_front(b);\n         deq.add_back(c);\n-        assert (deq.len() == 3u);\n+        assert deq.len() == 3;\n         deq.add_back(d);\n-        assert (deq.len() == 4u);\n-        assert deq.peek_front() == b;\n-        assert deq.peek_back() == d;\n+        assert deq.len() == 4;\n+        assert *deq.peek_front() == b;\n+        assert *deq.peek_back() == d;\n         assert deq.pop_front() == b;\n         assert deq.pop_back() == d;\n         assert deq.pop_back() == c;\n         assert deq.pop_back() == a;\n-        assert (deq.len() == 0u);\n+        assert deq.len() == 0;\n         deq.add_back(c);\n-        assert (deq.len() == 1u);\n+        assert deq.len() == 1;\n         deq.add_front(b);\n-        assert (deq.len() == 2u);\n+        assert deq.len() == 2;\n         deq.add_back(d);\n-        assert (deq.len() == 3u);\n+        assert deq.len() == 3;\n         deq.add_front(a);\n-        assert (deq.len() == 4u);\n+        assert deq.len() == 4;\n         assert deq.get(0) == a;\n         assert deq.get(1) == b;\n         assert deq.get(2) == c;"}]}