{"sha": "b4fc99e09e5ef907b1de80919764852211fdc10c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmM5OWUwOWU1ZWY5MDdiMWRlODA5MTk3NjQ4NTIyMTFmZGMxMGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T22:07:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T22:07:17Z"}, "message": "dist: Add bin directory to system PATH in win32 installer", "tree": {"sha": "eb2dc1d5b5d62e9b15d0101e50d62cad5e7d153e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2dc1d5b5d62e9b15d0101e50d62cad5e7d153e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fc99e09e5ef907b1de80919764852211fdc10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fc99e09e5ef907b1de80919764852211fdc10c", "html_url": "https://github.com/rust-lang/rust/commit/b4fc99e09e5ef907b1de80919764852211fdc10c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fc99e09e5ef907b1de80919764852211fdc10c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92671d6a308c61d5a5910489af99181028db60f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/92671d6a308c61d5a5910489af99181028db60f5", "html_url": "https://github.com/rust-lang/rust/commit/92671d6a308c61d5a5910489af99181028db60f5"}], "stats": {"total": 337, "additions": 337, "deletions": 0}, "files": [{"sha": "7410b7102f6e7a130bff10681ad5140ebab3020e", "filename": "src/etc/pkg/rust.nsi", "status": "modified", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/b4fc99e09e5ef907b1de80919764852211fdc10c/src%2Fetc%2Fpkg%2Frust.nsi", "raw_url": "https://github.com/rust-lang/rust/raw/b4fc99e09e5ef907b1de80919764852211fdc10c/src%2Fetc%2Fpkg%2Frust.nsi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust.nsi?ref=b4fc99e09e5ef907b1de80919764852211fdc10c", "patch": "@@ -4,6 +4,338 @@\n # This is a NSIS win32 installer script the Rust toolchain.\n #\n \n+# FIXME: EnvVarUpdate belongs in its own file but I'm having a hard time figuring\n+# out how to make !include look in the directory I want it to.\n+\n+/**\n+ *  EnvVarUpdate.nsh\n+ *    : Environmental Variables: append, prepend, and remove entries\n+ *\n+ *     WARNING: If you use StrFunc.nsh header then include it before this file\n+ *              with all required definitions. This is to avoid conflicts\n+ *\n+ *  Usage:\n+ *    ${EnvVarUpdate} \"ResultVar\" \"EnvVarName\" \"Action\" \"RegLoc\" \"PathString\"\n+ *\n+ *  Credits:\n+ *  Version 1.0 \n+ *  * Cal Turney (turnec2)\n+ *  * Amir Szekely (KiCHiK) and e-circ for developing the forerunners of this\n+ *    function: AddToPath, un.RemoveFromPath, AddToEnvVar, un.RemoveFromEnvVar,\n+ *    WriteEnvStr, and un.DeleteEnvStr\n+ *  * Diego Pedroso (deguix) for StrTok\n+ *  * Kevin English (kenglish_hi) for StrContains\n+ *  * Hendri Adriaens (Smile2Me), Diego Pedroso (deguix), and Dan Fuhry  \n+ *    (dandaman32) for StrReplace\n+ *\n+ *  Version 1.1 (compatibility with StrFunc.nsh)\n+ *  * techtonik\n+ *\n+ *  http://nsis.sourceforge.net/Environmental_Variables:_append%2C_prepend%2C_and_remove_entries\n+ *\n+ */\n+ \n+ \n+!ifndef ENVVARUPDATE_FUNCTION\n+!define ENVVARUPDATE_FUNCTION\n+!verbose push\n+!verbose 3\n+!include \"LogicLib.nsh\"\n+!include \"WinMessages.NSH\"\n+!include \"StrFunc.nsh\"\n+ \n+; ---- Fix for conflict if StrFunc.nsh is already includes in main file -----------------------\n+!macro _IncludeStrFunction StrFuncName\n+  !ifndef ${StrFuncName}_INCLUDED\n+    ${${StrFuncName}}\n+  !endif\n+  !ifndef Un${StrFuncName}_INCLUDED\n+    ${Un${StrFuncName}}\n+  !endif\n+  !define un.${StrFuncName} \"${Un${StrFuncName}}\"\n+!macroend\n+ \n+!insertmacro _IncludeStrFunction StrTok\n+!insertmacro _IncludeStrFunction StrStr\n+!insertmacro _IncludeStrFunction StrRep\n+ \n+; ---------------------------------- Macro Definitions ----------------------------------------\n+!macro _EnvVarUpdateConstructor ResultVar EnvVarName Action Regloc PathString\n+  Push \"${EnvVarName}\"\n+  Push \"${Action}\"\n+  Push \"${RegLoc}\"\n+  Push \"${PathString}\"\n+    Call EnvVarUpdate\n+  Pop \"${ResultVar}\"\n+!macroend\n+!define EnvVarUpdate '!insertmacro \"_EnvVarUpdateConstructor\"'\n+ \n+!macro _unEnvVarUpdateConstructor ResultVar EnvVarName Action Regloc PathString\n+  Push \"${EnvVarName}\"\n+  Push \"${Action}\"\n+  Push \"${RegLoc}\"\n+  Push \"${PathString}\"\n+    Call un.EnvVarUpdate\n+  Pop \"${ResultVar}\"\n+!macroend\n+!define un.EnvVarUpdate '!insertmacro \"_unEnvVarUpdateConstructor\"'\n+; ---------------------------------- Macro Definitions end-------------------------------------\n+ \n+;----------------------------------- EnvVarUpdate start----------------------------------------\n+!define hklm_all_users     'HKLM \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\"'\n+!define hkcu_current_user  'HKCU \"Environment\"'\n+ \n+!macro EnvVarUpdate UN\n+ \n+Function ${UN}EnvVarUpdate\n+ \n+  Push $0\n+  Exch 4\n+  Exch $1\n+  Exch 3\n+  Exch $2\n+  Exch 2\n+  Exch $3\n+  Exch\n+  Exch $4\n+  Push $5\n+  Push $6\n+  Push $7\n+  Push $8\n+  Push $9\n+  Push $R0\n+ \n+  /* After this point:\n+  -------------------------\n+     $0 = ResultVar     (returned)\n+     $1 = EnvVarName    (input)\n+     $2 = Action        (input)\n+     $3 = RegLoc        (input)\n+     $4 = PathString    (input)\n+     $5 = Orig EnvVar   (read from registry)\n+     $6 = Len of $0     (temp)\n+     $7 = tempstr1      (temp)\n+     $8 = Entry counter (temp)\n+     $9 = tempstr2      (temp)\n+     $R0 = tempChar     (temp)  */\n+ \n+  ; Step 1:  Read contents of EnvVarName from RegLoc\n+  ;\n+  ; Check for empty EnvVarName\n+  ${If} $1 == \"\"\n+    SetErrors\n+    DetailPrint \"ERROR: EnvVarName is blank\"\n+    Goto EnvVarUpdate_Restore_Vars\n+  ${EndIf}\n+ \n+  ; Check for valid Action\n+  ${If}    $2 != \"A\"\n+  ${AndIf} $2 != \"P\"\n+  ${AndIf} $2 != \"R\"\n+    SetErrors\n+    DetailPrint \"ERROR: Invalid Action - must be A, P, or R\"\n+    Goto EnvVarUpdate_Restore_Vars\n+  ${EndIf}\n+ \n+  ${If} $3 == HKLM\n+    ReadRegStr $5 ${hklm_all_users} $1     ; Get EnvVarName from all users into $5\n+  ${ElseIf} $3 == HKCU\n+    ReadRegStr $5 ${hkcu_current_user} $1  ; Read EnvVarName from current user into $5\n+  ${Else}\n+    SetErrors\n+    DetailPrint 'ERROR: Action is [$3] but must be \"HKLM\" or HKCU\"'\n+    Goto EnvVarUpdate_Restore_Vars\n+  ${EndIf}\n+ \n+  ; Check for empty PathString\n+  ${If} $4 == \"\"\n+    SetErrors\n+    DetailPrint \"ERROR: PathString is blank\"\n+    Goto EnvVarUpdate_Restore_Vars\n+  ${EndIf}\n+ \n+  ; Make sure we've got some work to do\n+  ${If} $5 == \"\"\n+  ${AndIf} $2 == \"R\"\n+    SetErrors\n+    DetailPrint \"$1 is empty - Nothing to remove\"\n+    Goto EnvVarUpdate_Restore_Vars\n+  ${EndIf}\n+ \n+  ; Step 2: Scrub EnvVar\n+  ;\n+  StrCpy $0 $5                             ; Copy the contents to $0\n+  ; Remove spaces around semicolons (NOTE: spaces before the 1st entry or\n+  ; after the last one are not removed here but instead in Step 3)\n+  ${If} $0 != \"\"                           ; If EnvVar is not empty ...\n+    ${Do}\n+      ${${UN}StrStr} $7 $0 \" ;\"\n+      ${If} $7 == \"\"\n+        ${ExitDo}\n+      ${EndIf}\n+      ${${UN}StrRep} $0  $0 \" ;\" \";\"         ; Remove '<space>;'\n+    ${Loop}\n+    ${Do}\n+      ${${UN}StrStr} $7 $0 \"; \"\n+      ${If} $7 == \"\"\n+        ${ExitDo}\n+      ${EndIf}\n+      ${${UN}StrRep} $0  $0 \"; \" \";\"         ; Remove ';<space>'\n+    ${Loop}\n+    ${Do}\n+      ${${UN}StrStr} $7 $0 \";;\" \n+      ${If} $7 == \"\"\n+        ${ExitDo}\n+      ${EndIf}\n+      ${${UN}StrRep} $0  $0 \";;\" \";\"\n+    ${Loop}\n+ \n+    ; Remove a leading or trailing semicolon from EnvVar\n+    StrCpy  $7  $0 1 0\n+    ${If} $7 == \";\"\n+      StrCpy $0  $0 \"\" 1                   ; Change ';<EnvVar>' to '<EnvVar>'\n+    ${EndIf}\n+    StrLen $6 $0\n+    IntOp $6 $6 - 1\n+    StrCpy $7  $0 1 $6\n+    ${If} $7 == \";\"\n+     StrCpy $0  $0 $6                      ; Change ';<EnvVar>' to '<EnvVar>'\n+    ${EndIf}\n+    ; DetailPrint \"Scrubbed $1: [$0]\"      ; Uncomment to debug\n+  ${EndIf}\n+ \n+  /* Step 3. Remove all instances of the target path/string (even if \"A\" or \"P\")\n+     $6 = bool flag (1 = found and removed PathString)\n+     $7 = a string (e.g. path) delimited by semicolon(s)\n+     $8 = entry counter starting at 0\n+     $9 = copy of $0\n+     $R0 = tempChar      */\n+ \n+  ${If} $5 != \"\"                           ; If EnvVar is not empty ...\n+    StrCpy $9 $0\n+    StrCpy $0 \"\"\n+    StrCpy $8 0\n+    StrCpy $6 0\n+ \n+    ${Do}\n+      ${${UN}StrTok} $7 $9 \";\" $8 \"0\"      ; $7 = next entry, $8 = entry counter\n+ \n+      ${If} $7 == \"\"                       ; If we've run out of entries,\n+        ${ExitDo}                          ;    were done\n+      ${EndIf}                             ;\n+ \n+      ; Remove leading and trailing spaces from this entry (critical step for Action=Remove)\n+      ${Do}\n+        StrCpy $R0  $7 1\n+        ${If} $R0 != \" \"\n+          ${ExitDo}\n+        ${EndIf}\n+        StrCpy $7   $7 \"\" 1                ;  Remove leading space\n+      ${Loop}\n+      ${Do}\n+        StrCpy $R0  $7 1 -1\n+        ${If} $R0 != \" \"\n+          ${ExitDo}\n+        ${EndIf}\n+        StrCpy $7   $7 -1                  ;  Remove trailing space\n+      ${Loop}\n+      ${If} $7 == $4                       ; If string matches, remove it by not appending it\n+        StrCpy $6 1                        ; Set 'found' flag\n+      ${ElseIf} $7 != $4                   ; If string does NOT match\n+      ${AndIf}  $0 == \"\"                   ;    and the 1st string being added to $0,\n+        StrCpy $0 $7                       ;    copy it to $0 without a prepended semicolon\n+      ${ElseIf} $7 != $4                   ; If string does NOT match\n+      ${AndIf}  $0 != \"\"                   ;    and this is NOT the 1st string to be added to $0,\n+        StrCpy $0 $0;$7                    ;    append path to $0 with a prepended semicolon\n+      ${EndIf}                             ;\n+ \n+      IntOp $8 $8 + 1                      ; Bump counter\n+    ${Loop}                                ; Check for duplicates until we run out of paths\n+  ${EndIf}\n+ \n+  ; Step 4:  Perform the requested Action\n+  ;\n+  ${If} $2 != \"R\"                          ; If Append or Prepend\n+    ${If} $6 == 1                          ; And if we found the target\n+      DetailPrint \"Target is already present in $1. It will be removed and\"\n+    ${EndIf}\n+    ${If} $0 == \"\"                         ; If EnvVar is (now) empty\n+      StrCpy $0 $4                         ;   just copy PathString to EnvVar\n+      ${If} $6 == 0                        ; If found flag is either 0\n+      ${OrIf} $6 == \"\"                     ; or blank (if EnvVarName is empty)\n+        DetailPrint \"$1 was empty and has been updated with the target\"\n+      ${EndIf}\n+    ${ElseIf} $2 == \"A\"                    ;  If Append (and EnvVar is not empty),\n+      StrCpy $0 $0;$4                      ;     append PathString\n+      ${If} $6 == 1\n+        DetailPrint \"appended to $1\"\n+      ${Else}\n+        DetailPrint \"Target was appended to $1\"\n+      ${EndIf}\n+    ${Else}                                ;  If Prepend (and EnvVar is not empty),\n+      StrCpy $0 $4;$0                      ;     prepend PathString\n+      ${If} $6 == 1\n+        DetailPrint \"prepended to $1\"\n+      ${Else}\n+        DetailPrint \"Target was prepended to $1\"\n+      ${EndIf}\n+    ${EndIf}\n+  ${Else}                                  ; If Action = Remove\n+    ${If} $6 == 1                          ;   and we found the target\n+      DetailPrint \"Target was found and removed from $1\"\n+    ${Else}\n+      DetailPrint \"Target was NOT found in $1 (nothing to remove)\"\n+    ${EndIf}\n+    ${If} $0 == \"\"\n+      DetailPrint \"$1 is now empty\"\n+    ${EndIf}\n+  ${EndIf}\n+ \n+  ; Step 5:  Update the registry at RegLoc with the updated EnvVar and announce the change\n+  ;\n+  ClearErrors\n+  ${If} $3  == HKLM\n+    WriteRegExpandStr ${hklm_all_users} $1 $0     ; Write it in all users section\n+  ${ElseIf} $3 == HKCU\n+    WriteRegExpandStr ${hkcu_current_user} $1 $0  ; Write it to current user section\n+  ${EndIf}\n+ \n+  IfErrors 0 +4\n+    MessageBox MB_OK|MB_ICONEXCLAMATION \"Could not write updated $1 to $3\"\n+    DetailPrint \"Could not write updated $1 to $3\"\n+    Goto EnvVarUpdate_Restore_Vars\n+ \n+  ; \"Export\" our change\n+  SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 \"STR:Environment\" /TIMEOUT=5000\n+ \n+  EnvVarUpdate_Restore_Vars:\n+  ;\n+  ; Restore the user's variables and return ResultVar\n+  Pop $R0\n+  Pop $9\n+  Pop $8\n+  Pop $7\n+  Pop $6\n+  Pop $5\n+  Pop $4\n+  Pop $3\n+  Pop $2\n+  Pop $1\n+  Push $0  ; Push my $0 (ResultVar)\n+  Exch\n+  Pop $0   ; Restore his $0\n+ \n+FunctionEnd\n+ \n+!macroend   ; EnvVarUpdate UN\n+!insertmacro EnvVarUpdate \"\"\n+!insertmacro EnvVarUpdate \"un.\"\n+;----------------------------------- EnvVarUpdate end----------------------------------------\n+ \n+!verbose pop\n+!endif\n+\n+\n Name \"Rust\"\n ShowInstDetails \"show\"\n ShowUninstDetails \"show\"\n@@ -29,6 +361,10 @@ Section \"Documentation\"\n     File /nonfatal /oname=rust.pdf  doc\\rust.pdf\n SectionEnd\n \n+Section \"SystemPath\"\n+    ${EnvVarUpdate} $0 \"PATH\" \"A\" \"HKLM\" \"$INSTDIR\\bin\"\n+SectionEnd\n+\n Section \"Uninstall\"\n     Delete $INSTDIR\\uninstall.exe\n     Delete $INSTDIR\\bin\\*.*\n@@ -42,6 +378,7 @@ Section \"Uninstall\"\n     RMDir $INSTDIR\\doc\n     RMDir $INSTDIR\n     DeleteRegKey HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Rust\"\n+    ${un.EnvVarUpdate} $0 \"PATH\" \"R\" \"HKLM\" \"$INSTDIR\\bin\"\n SectionEnd\n \n Section"}]}