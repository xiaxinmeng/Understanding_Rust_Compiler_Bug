{"sha": "89c2dff58a253416c2f005fe2478f4ca66bfdba6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzJkZmY1OGEyNTM0MTZjMmYwMDVmZTI0NzhmNGNhNjZiZmRiYTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T21:36:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T21:36:25Z"}, "message": "minor: simplify", "tree": {"sha": "52ef7e0c0072aa9475856c031f1ca1a614b4347b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ef7e0c0072aa9475856c031f1ca1a614b4347b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c2dff58a253416c2f005fe2478f4ca66bfdba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c2dff58a253416c2f005fe2478f4ca66bfdba6", "html_url": "https://github.com/rust-lang/rust/commit/89c2dff58a253416c2f005fe2478f4ca66bfdba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c2dff58a253416c2f005fe2478f4ca66bfdba6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb591a5704f767d783d57af7022272f665318ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb591a5704f767d783d57af7022272f665318ac", "html_url": "https://github.com/rust-lang/rust/commit/ebb591a5704f767d783d57af7022272f665318ac"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "6c6ff16c25bc5ddd63b65d0c53c74a8ecf788d79", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/89c2dff58a253416c2f005fe2478f4ca66bfdba6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c2dff58a253416c2f005fe2478f4ca66bfdba6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=89c2dff58a253416c2f005fe2478f4ca66bfdba6", "patch": "@@ -48,6 +48,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     let variant_name = variant.name()?;\n     let variant_hir = ctx.sema.to_def(&variant)?;\n     if existing_definition(ctx.db(), &variant_name, &variant_hir) {\n+        cov_mark::hit!(test_extract_enum_not_applicable_if_struct_exists);\n         return None;\n     }\n \n@@ -300,18 +301,10 @@ fn reference_to_node(\n \n #[cfg(test)]\n mod tests {\n-    use ide_db::helpers::FamousDefs;\n-\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        let fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n-        check_assist_not_applicable(extract_struct_from_enum_variant, &fixture)\n-    }\n-\n     #[test]\n     fn test_extract_struct_several_fields_tuple() {\n         check_assist(\n@@ -699,29 +692,33 @@ fn foo() {\n \n     #[test]\n     fn test_extract_enum_not_applicable_for_element_with_no_fields() {\n-        check_not_applicable(\"enum A { $0One }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r#\"enum A { $0One }\"#);\n     }\n \n     #[test]\n     fn test_extract_enum_not_applicable_if_struct_exists() {\n-        check_not_applicable(\n-            r#\"struct One;\n-        enum A { $0One(u8, u32) }\"#,\n+        cov_mark::check!(test_extract_enum_not_applicable_if_struct_exists);\n+        check_assist_not_applicable(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+struct One;\n+enum A { $0One(u8, u32) }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_not_applicable_one_field() {\n-        check_not_applicable(r\"enum A { $0One(u32) }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r\"enum A { $0One(u32) }\");\n     }\n \n     #[test]\n     fn test_extract_not_applicable_no_field_tuple() {\n-        check_not_applicable(r\"enum A { $0None() }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r\"enum A { $0None() }\");\n     }\n \n     #[test]\n     fn test_extract_not_applicable_no_field_named() {\n-        check_not_applicable(r\"enum A { $0None {} }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r\"enum A { $0None {} }\");\n     }\n }"}]}