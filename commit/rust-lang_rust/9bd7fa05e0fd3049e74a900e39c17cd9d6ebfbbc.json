{"sha": "9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZDdmYTA1ZTBmZDMwNDllNzRhOTAwZTM5YzE3Y2Q5ZDZlYmZiYmM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T16:44:59Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T16:53:04Z"}, "message": "Improve `NEEDLESS_RANGE_LOOP` error reporting", "tree": {"sha": "e99036123b6006fdb66536874b4f570a8c3f3976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99036123b6006fdb66536874b4f570a8c3f3976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdp/zAAoJEF5CfHlMukXov8sQAJHMw3T4MndcrUm7KWdaWHAr\nI0ZPmUGB9qV6ojueGZ2gCRZAK5euSLLNGffbz15ZU5toindiZyVXZyJ+otEh0ARK\nFGjNdh9eqVCDtNiGLiBHYrq5QK9VMhA7tohg8Zx6vz9xkPylTYChldUOAQDIROH7\niucqjAKMhGs5Mn1SqtBa5Gix0lJKQi+UqBLlVvFJ/XzktH0gSStRu95L9B3WZc8D\nEhicATGh5AaDK4ZkIyvtUb84rTkp70CfuR07W+dBOFygKpndw3vb73v49xrtbpIM\nTPBlKR+O3l+cJ1/2Cu7LjUEP8IGdCI3DCmDUJmJMjMbbW0SnCrpQfmHnON6Zf8MN\ndQ6e2fdZK67USwkPgWpYMa4LgAGW79Ks8HWIQw5hmHrNrILvQw64xN6yO/N6dbWx\nUyEvGsHQi89rj0+ENJr2UAfEiukupA5ovZH7/KTfYOWi9gTnWiuXFMxlI/rEPkL8\nS29HxhiQBQOokHDsvLlwy8gROmCyc5qdgiCtxDRgEDwQkQeCq4v3NUe9xldchtO6\nHNEkiSk1uWMoY2DP7pe3ugRiPYmxcqxOZrbGQmLs/9xAHPo2DsUCzj2HzrS7sRn7\nDv4AZxINbv1I03WjPBFZOx17o1HruNE6V+LsudYzPijA2VINYtWHcpQoMhfngUe/\nrgdx3Ifn3AvgJp934MNY\n=rS4n\n-----END PGP SIGNATURE-----", "payload": "tree e99036123b6006fdb66536874b4f570a8c3f3976\nparent e613c8b492495aeb5f75f94a0cdcf252573a345f\nauthor mcarton <cartonmartin+git@gmail.com> 1467391499 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467391984 +0200\n\nImprove `NEEDLESS_RANGE_LOOP` error reporting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "html_url": "https://github.com/rust-lang/rust/commit/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e613c8b492495aeb5f75f94a0cdcf252573a345f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e613c8b492495aeb5f75f94a0cdcf252573a345f", "html_url": "https://github.com/rust-lang/rust/commit/e613c8b492495aeb5f75f94a0cdcf252573a345f"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "0f9d030c2f285b373d8256e823aa40370e2ffb7c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "patch": "@@ -13,7 +13,7 @@ use std::borrow::Cow;\n use std::collections::HashMap;\n use syntax::ast;\n \n-use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro,\n+use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, multispan_sugg, in_external_macro,\n             span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, higher,\n             walk_ptrs_ty};\n use utils::paths;\n@@ -377,32 +377,33 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n                 };\n \n                 if visitor.nonindex {\n-                    span_lint(cx,\n-                              NEEDLESS_RANGE_LOOP,\n-                              expr.span,\n-                              &format!(\"the loop variable `{}` is used to index `{}`. Consider using `for ({}, \\\n-                                        item) in {}.iter().enumerate(){}{}` or similar iterators\",\n-                                       ident.node,\n-                                       indexed,\n-                                       ident.node,\n-                                       indexed,\n-                                       take,\n-                                       skip));\n+                    span_lint_and_then(cx,\n+                                       NEEDLESS_RANGE_LOOP,\n+                                       expr.span,\n+                                       &format!(\"the loop variable `{}` is used to index `{}`\", ident.node, indexed),\n+                                       |db| {\n+                        multispan_sugg(db, \"consider using an iterator\".to_string(), &[\n+                            (pat.span, &format!(\"({}, <item>)\", ident.node)),\n+                            (arg.span, &format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip)),\n+                        ]);\n+                    });\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n                         format!(\"&{}\", indexed)\n                     } else {\n                         format!(\"{}.iter(){}{}\", indexed, take, skip)\n                     };\n \n-                    span_lint(cx,\n-                              NEEDLESS_RANGE_LOOP,\n-                              expr.span,\n-                              &format!(\"the loop variable `{}` is only used to index `{}`. \\\n-                                        Consider using `for item in {}` or similar iterators\",\n-                                       ident.node,\n-                                       indexed,\n-                                       repl));\n+                    span_lint_and_then(cx,\n+                                       NEEDLESS_RANGE_LOOP,\n+                                       expr.span,\n+                                       &format!(\"the loop variable `{}` is only used to index `{}`.\", ident.node, indexed),\n+                                       |db| {\n+                        multispan_sugg(db, \"consider using an iterator\".to_string(), &[\n+                            (pat.span, \"<item>\"),\n+                            (arg.span, &repl),\n+                        ]);\n+                    });\n                 }\n             }\n         }"}, {"sha": "6028c5c0f3a84ddde5c98c3f84dfdd1773aca3bc", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=9bd7fa05e0fd3049e74a900e39c17cd9d6ebfbbc", "patch": "@@ -96,66 +96,108 @@ fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n     for i in 0..vec.len() {\n-        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in &vec`\n+        //~^ ERROR `i` is only used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in &vec {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 0..vec.len() { let _ = vec[i]; }\n+    //~^ ERROR `i` is only used to index `vec`\n+    //~| HELP consider\n+    //~| HELP consider\n+    //~| SUGGESTION for <item> in &vec { let _ = vec[i]; }\n+\n     // ICE #746\n     for j in 0..4 {\n         //~^ ERROR `j` is only used to index `STATIC`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in STATIC.iter().take(4) {\n         println!(\"{:?}\", STATIC[j]);\n     }\n \n     for j in 0..4 {\n         //~^ ERROR `j` is only used to index `CONST`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in CONST.iter().take(4) {\n         println!(\"{:?}\", CONST[j]);\n     }\n \n     for i in 0..vec.len() {\n-        //~^ ERROR `i` is used to index `vec`. Consider using `for (i, item) in vec.iter().enumerate()`\n+        //~^ ERROR `i` is used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for (i, <item>) in vec.iter().enumerate() {\n         println!(\"{} {}\", vec[i], i);\n     }\n     for i in 0..vec.len() {      // not an error, indexing more than one variable\n         println!(\"{} {}\", vec[i], vec2[i]);\n     }\n \n     for i in 0..vec.len() {\n-        //~^ ERROR `i` is only used to index `vec2`. Consider using `for item in vec2.iter().take(vec.len())`\n+        //~^ ERROR `i` is only used to index `vec2`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in vec2.iter().take(vec.len()) {\n         println!(\"{}\", vec2[i]);\n     }\n \n     for i in 5..vec.len() {\n-        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().skip(5)`\n+        //~^ ERROR `i` is only used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in vec.iter().skip(5) {\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0..MAX_LEN {\n-        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(MAX_LEN)`\n+        //~^ ERROR `i` is only used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in vec.iter().take(MAX_LEN) {\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0...MAX_LEN {\n-        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(MAX_LEN)`\n+        //~^ ERROR `i` is only used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in vec.iter().take(MAX_LEN) {\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..10 {\n-        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(10).skip(5)`\n+        //~^ ERROR `i` is only used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in vec.iter().take(10).skip(5) {\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5...10 {\n-        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(10).skip(5)`\n+        //~^ ERROR `i` is only used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for <item> in vec.iter().take(10).skip(5) {\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..vec.len() {\n-        //~^ ERROR `i` is used to index `vec`. Consider using `for (i, item) in vec.iter().enumerate().skip(5)`\n+        //~^ ERROR `i` is used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for (i, <item>) in vec.iter().enumerate().skip(5) {\n         println!(\"{} {}\", vec[i], i);\n     }\n \n     for i in 5..10 {\n-        //~^ ERROR `i` is used to index `vec`. Consider using `for (i, item) in vec.iter().enumerate().take(10).skip(5)`\n+        //~^ ERROR `i` is used to index `vec`\n+        //~| HELP consider\n+        //~| HELP consider\n+        //~| SUGGESTION for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n         println!(\"{} {}\", vec[i], i);\n     }\n "}]}