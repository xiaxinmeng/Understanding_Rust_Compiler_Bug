{"sha": "ac097f1a5efb735e852883e841ee3a5cfbc26d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDk3ZjFhNWVmYjczNWU4NTI4ODNlODQxZWUzYTVjZmJjMjZkMGI=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-10-15T21:53:05Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-10-15T21:53:05Z"}, "message": "Update lint plugin example in book to work with recent master", "tree": {"sha": "cd9ce402bdc9d72875d5d0e9f15fdcbea6a75a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9ce402bdc9d72875d5d0e9f15fdcbea6a75a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac097f1a5efb735e852883e841ee3a5cfbc26d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac097f1a5efb735e852883e841ee3a5cfbc26d0b", "html_url": "https://github.com/rust-lang/rust/commit/ac097f1a5efb735e852883e841ee3a5cfbc26d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac097f1a5efb735e852883e841ee3a5cfbc26d0b/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3d390cf51545b880c5cd78585fa408c087f786", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3d390cf51545b880c5cd78585fa408c087f786", "html_url": "https://github.com/rust-lang/rust/commit/be3d390cf51545b880c5cd78585fa408c087f786"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "e1c982511170993fd137957be85580b417f4d1b8", "filename": "src/doc/trpl/compiler-plugins.md", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac097f1a5efb735e852883e841ee3a5cfbc26d0b/src%2Fdoc%2Ftrpl%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac097f1a5efb735e852883e841ee3a5cfbc26d0b/src%2Fdoc%2Ftrpl%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompiler-plugins.md?ref=ac097f1a5efb735e852883e841ee3a5cfbc26d0b", "patch": "@@ -170,31 +170,45 @@ starting point for an improved quasiquote as an ordinary plugin library.\n \n Plugins can extend [Rust's lint\n infrastructure](../reference.html#lint-check-attributes) with additional checks for\n-code style, safety, etc. You can see\n-[`src/test/auxiliary/lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/auxiliary/lint_plugin_test.rs)\n-for a full example, the core of which is reproduced here:\n+code style, safety, etc. Now let's write a plugin [`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/auxiliary/lint_plugin_test.rs)\n+that warns about any item named `lintme`.\n \n ```ignore\n-declare_lint!(TEST_LINT, Warn,\n-              \"Warn about items named 'lintme'\");\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax, rustc_private)]\n+\n+extern crate syntax;\n+\n+// Load rustc as a plugin to get macros\n+#[macro_use]\n+extern crate rustc;\n+\n+use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n+                  EarlyLintPassObject, LintArray};\n+use rustc::plugin::Registry;\n+use syntax::ast;\n+\n+declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(TEST_LINT)\n     }\n+}\n \n-    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n-        if it.ident.name == \"lintme\" {\n+impl EarlyLintPass for Pass {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+        if it.ident.name.as_str() == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n         }\n     }\n }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_lint_pass(box Pass as LintPassObject);\n+    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n }\n ```\n "}]}