{"sha": "20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZmMwMmY4MzZmMzAzNWI4NmI1NmE3Y2VkYjk3YzVjZDRlZDk2MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T19:11:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T19:11:28Z"}, "message": "Auto merge of #71356 - Dylan-DPC:rollup-liockhk, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71250 (Replace big JS dict with JSON parsing)\n - #71270 (Fix `has_no_input_arg` check and rename it to `has_only_self_parameter`)\n - #71284 (fix -Zast-json to output correct JSON form)\n - #71328 (Stabilize PathBuf capacity methods)\n - #71334 (Update pattern docs.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "dfabe458b912b67789905471180c6bd45171efa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfabe458b912b67789905471180c6bd45171efa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "html_url": "https://github.com/rust-lang/rust/commit/20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce3f840ae9b735a66531996c32330f24b877cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce3f840ae9b735a66531996c32330f24b877cb0", "html_url": "https://github.com/rust-lang/rust/commit/8ce3f840ae9b735a66531996c32330f24b877cb0"}, {"sha": "b921587c91cffe5205b472d562432d5f93374218", "url": "https://api.github.com/repos/rust-lang/rust/commits/b921587c91cffe5205b472d562432d5f93374218", "html_url": "https://github.com/rust-lang/rust/commit/b921587c91cffe5205b472d562432d5f93374218"}], "stats": {"total": 283, "additions": 223, "deletions": 60}, "files": [{"sha": "2c11d5cd25759f7d3386719a8d32e4fa83ae6786", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 115, "deletions": 36, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -3010,6 +3010,12 @@ impl str {\n     ///\n     /// Returns `false` if it does not.\n     ///\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -3031,6 +3037,12 @@ impl str {\n     ///\n     /// Returns `false` if it does not.\n     ///\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -3051,6 +3063,12 @@ impl str {\n     ///\n     /// Returns `false` if it does not.\n     ///\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -3074,10 +3092,12 @@ impl str {\n     ///\n     /// Returns [`None`] if the pattern doesn't match.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n-    /// a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n     ///\n     /// [`None`]: option/enum.Option.html#variant.None\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Examples\n     ///\n@@ -3121,10 +3141,12 @@ impl str {\n     ///\n     /// Returns [`None`] if the pattern doesn't match.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n-    /// a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n     ///\n     /// [`None`]: option/enum.Option.html#variant.None\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Examples\n     ///\n@@ -3166,8 +3188,11 @@ impl str {\n     /// An iterator over substrings of this string slice, separated by\n     /// characters matched by a pattern.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3285,6 +3310,12 @@ impl str {\n     /// `split` in that `split_inclusive` leaves the matched part as the\n     /// terminator of the substring.\n     ///\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -3319,8 +3350,11 @@ impl str {\n     /// An iterator over substrings of the given string slice, separated by\n     /// characters matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3370,8 +3404,11 @@ impl str {\n     /// An iterator over substrings of the given string slice, separated by\n     /// characters matched by a pattern.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// Equivalent to [`split`], except that the trailing substring\n     /// is skipped if empty.\n@@ -3414,10 +3451,11 @@ impl str {\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n-    /// Additional libraries might provide more complex patterns like\n-    /// regular expressions.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n@@ -3462,8 +3500,11 @@ impl str {\n     /// If `n` substrings are returned, the last substring (the `n`th substring)\n     /// will contain the remainder of the string.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3512,8 +3553,11 @@ impl str {\n     /// If `n` substrings are returned, the last substring (the `n`th substring)\n     /// will contain the remainder of the string.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3557,8 +3601,11 @@ impl str {\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n-    /// a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3593,8 +3640,11 @@ impl str {\n     /// An iterator over the disjoint matches of a pattern within this string slice,\n     /// yielded in reverse order.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n-    /// a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3634,8 +3684,11 @@ impl str {\n     /// For matches of `pat` within `self` that overlap, only the indices\n     /// corresponding to the first match are returned.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines\n-    /// if a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3676,8 +3729,11 @@ impl str {\n     /// For matches of `pat` within `self` that overlap, only the indices\n     /// corresponding to the last match are returned.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if a\n-    /// character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3894,8 +3950,11 @@ impl str {\n     /// Returns a string slice with all prefixes and suffixes that match a\n     /// pattern repeatedly removed.\n     ///\n-    /// The pattern can be a [`char`] or a closure that determines if a\n-    /// character matches.\n+    /// The [pattern] can be a [`char`], a slice of [`char`]s, or a function\n+    /// or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Examples\n     ///\n@@ -3939,8 +3998,11 @@ impl str {\n     /// Returns a string slice with all prefixes that match a pattern\n     /// repeatedly removed.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n-    /// a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Text directionality\n     ///\n@@ -3981,6 +4043,12 @@ impl str {\n     ///\n     /// If the string does not start with `prefix`, `None` is returned.\n     ///\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -4005,6 +4073,12 @@ impl str {\n     ///\n     /// If the string does not end with `suffix`, `None` is returned.\n     ///\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -4027,8 +4101,11 @@ impl str {\n     /// Returns a string slice with all suffixes that match a pattern\n     /// repeatedly removed.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that\n-    /// determines if a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n+    ///\n+    /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Text directionality\n     ///\n@@ -4073,10 +4150,11 @@ impl str {\n     /// Returns a string slice with all prefixes that match a pattern\n     /// repeatedly removed.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n-    /// a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n     ///\n     /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Text directionality\n     ///\n@@ -4109,10 +4187,11 @@ impl str {\n     /// Returns a string slice with all suffixes that match a pattern\n     /// repeatedly removed.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that\n-    /// determines if a character matches.\n+    /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n+    /// function or closure that determines if a character matches.\n     ///\n     /// [`char`]: primitive.char.html\n+    /// [pattern]: str/pattern/index.html\n     ///\n     /// # Text directionality\n     ///"}, {"sha": "2377536c156fa815ea9d0c7979b202c5983ba632", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -1,7 +1,41 @@\n //! The string Pattern API.\n //!\n+//! The Pattern API provides a generic mechanism for using different pattern\n+//! types when searching through a string.\n+//!\n //! For more details, see the traits [`Pattern`], [`Searcher`],\n //! [`ReverseSearcher`], and [`DoubleEndedSearcher`].\n+//!\n+//! Although this API is unstable, it is exposed via stable APIs on the\n+//! [`str`] type.\n+//!\n+//! # Examples\n+//!\n+//! [`Pattern`] is [implemented][pattern-impls] in the stable API for\n+//! [`&str`], [`char`], slices of [`char`], and functions and closures\n+//! implementing `FnMut(char) -> bool`.\n+//!\n+//! ```\n+//! let s = \"Can you find a needle in a haystack?\";\n+//!\n+//! // &str pattern\n+//! assert_eq!(s.find(\"you\"), Some(4));\n+//! // char pattern\n+//! assert_eq!(s.find('n'), Some(2));\n+//! // slice of chars pattern\n+//! assert_eq!(s.find(&['a', 'e', 'i', 'o', 'u'][..]), Some(1));\n+//! // closure pattern\n+//! assert_eq!(s.find(|c: char| c.is_ascii_punctuation()), Some(35));\n+//! ```\n+//!\n+//! [`&str`]: ../../../std/primitive.str.html\n+//! [`char`]: ../../../std/primitive.char.html\n+//! [`str`]: ../../../std/primitive.str.html\n+//! [`DoubleEndedSearcher`]: trait.DoubleEndedSearcher.html\n+//! [`Pattern`]: trait.Pattern.html\n+//! [`ReverseSearcher`]: trait.ReverseSearcher.html\n+//! [`Searcher`]: trait.Searcher.html\n+//! [pattern-impls]: trait.Pattern.html#implementors\n \n #![unstable(\n     feature = \"pattern\",\n@@ -702,7 +736,7 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b> {\n \n impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n-/// Searches for chars that are equal to any of the chars in the array.\n+/// Searches for chars that are equal to any of the chars in the slice.\n ///\n /// # Examples\n ///"}, {"sha": "14181e440e96aac23a7c4b0902705f7f8d1300a8", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -2211,14 +2211,14 @@ rustc_index::newtype_index! {\n }\n \n impl rustc_serialize::Encodable for AttrId {\n-    fn encode<S: Encoder>(&self, _: &mut S) -> Result<(), S::Error> {\n-        Ok(())\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_unit()\n     }\n }\n \n impl rustc_serialize::Decodable for AttrId {\n-    fn decode<D: Decoder>(_: &mut D) -> Result<AttrId, D::Error> {\n-        Ok(crate::attr::mk_attr_id())\n+    fn decode<D: Decoder>(d: &mut D) -> Result<AttrId, D::Error> {\n+        d.read_nil().map(|_| crate::attr::mk_attr_id())\n     }\n }\n "}, {"sha": "7db376b20aaa8136673b4ac19cb901be4397bdcd", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut methods =\n             self.probe_for_return_type(span, probe::Mode::MethodCall, expected, checked_ty, hir_id);\n         methods.retain(|m| {\n-            self.has_no_input_arg(m)\n+            self.has_only_self_parameter(m)\n                 && self\n                     .tcx\n                     .get_attrs(m.def_id)\n@@ -243,10 +243,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         methods\n     }\n \n-    // This function checks if the method isn't static and takes other arguments than `self`.\n-    fn has_no_input_arg(&self, method: &AssocItem) -> bool {\n+    /// This function checks whether the method is not static and does not accept other parameters than `self`.\n+    fn has_only_self_parameter(&self, method: &AssocItem) -> bool {\n         match method.kind {\n-            ty::AssocKind::Fn => self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1,\n+            ty::AssocKind::Fn => {\n+                method.fn_has_self_parameter\n+                    && self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "b91aab44f10a256b055be230a1822d88e3584575", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -789,6 +789,37 @@ themePicker.onblur = handleThemeButtonsBlur;\n         Ok((ret, krates))\n     }\n \n+    fn collect_json(path: &Path, krate: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n+        let mut ret = Vec::new();\n+        let mut krates = Vec::new();\n+\n+        if path.exists() {\n+            for line in BufReader::new(File::open(path)?).lines() {\n+                let line = line?;\n+                if !line.starts_with(\"\\\"\") {\n+                    continue;\n+                }\n+                if line.starts_with(&format!(\"\\\"{}\\\"\", krate)) {\n+                    continue;\n+                }\n+                if line.ends_with(\",\\\\\") {\n+                    ret.push(line[..line.len() - 2].to_string());\n+                } else {\n+                    // Ends with \"\\\\\" (it's the case for the last added crate line)\n+                    ret.push(line[..line.len() - 1].to_string());\n+                }\n+                krates.push(\n+                    line.split('\"')\n+                        .filter(|s| !s.is_empty())\n+                        .next()\n+                        .map(|s| s.to_owned())\n+                        .unwrap_or_else(String::new),\n+                );\n+            }\n+        }\n+        Ok((ret, krates))\n+    }\n+\n     fn show_item(item: &IndexItem, krate: &str) -> String {\n         format!(\n             \"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','p':'{}'{}}}\",\n@@ -909,18 +940,18 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n-    let (mut all_indexes, mut krates) = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n+    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name), &dst);\n     all_indexes.push(search_index);\n \n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     {\n-        let mut v = String::from(\"var searchIndex={};\\n\");\n-        v.push_str(&all_indexes.join(\"\\n\"));\n+        let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n+        v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         // \"addSearchOptions\" has to be called first so the crate filtering can be set before the\n         // search might start (if it's set into the URL for example).\n-        v.push_str(\"\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n+        v.push_str(\"\\\\\\n}');\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n         cx.shared.fs.write(&dst, &v)?;\n     }\n     if options.enable_index_page {"}, {"sha": "5b090291227187443ef79e3524e5c874be5cf95d", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -634,14 +634,19 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n \n     // Collect the index into a string\n     format!(\n-        r#\"searchIndex[\"{}\"] = {};\"#,\n+        r#\"\"{}\":{}\"#,\n         krate.name,\n         serde_json::to_string(&CrateData {\n             doc: crate_doc,\n             items: crate_items,\n             paths: crate_paths,\n         })\n         .expect(\"failed serde conversion\")\n+        // All these `replace` calls are because we have to go through JS string for JSON content.\n+        .replace(r\"\\\", r\"\\\\\")\n+        .replace(\"'\", r\"\\'\")\n+        // We need to escape double quotes for the JSON.\n+        .replace(\"\\\\\\\"\", \"\\\\\\\\\\\"\")\n     )\n }\n "}, {"sha": "173d6d1cfa7efbd17e7daabb14755e325aaa3753", "filename": "src/libstd/path.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -1116,7 +1116,6 @@ impl PathBuf {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(path_buf_capacity)]\n     /// use std::path::PathBuf;\n     ///\n     /// let mut path = PathBuf::with_capacity(10);\n@@ -1130,7 +1129,7 @@ impl PathBuf {\n     ///\n     /// [`with_capacity`]: ../ffi/struct.OsString.html#method.with_capacity\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n     pub fn with_capacity(capacity: usize) -> PathBuf {\n         PathBuf { inner: OsString::with_capacity(capacity) }\n     }\n@@ -1374,7 +1373,7 @@ impl PathBuf {\n     ///\n     /// [`capacity`]: ../ffi/struct.OsString.html#method.capacity\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n     pub fn capacity(&self) -> usize {\n         self.inner.capacity()\n     }\n@@ -1383,7 +1382,7 @@ impl PathBuf {\n     ///\n     /// [`clear`]: ../ffi/struct.OsString.html#method.clear\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n     pub fn clear(&mut self) {\n         self.inner.clear()\n     }\n@@ -1392,7 +1391,7 @@ impl PathBuf {\n     ///\n     /// [`reserve`]: ../ffi/struct.OsString.html#method.reserve\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.inner.reserve(additional)\n     }\n@@ -1401,7 +1400,7 @@ impl PathBuf {\n     ///\n     /// [`reserve_exact`]: ../ffi/struct.OsString.html#method.reserve_exact\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n@@ -1410,7 +1409,7 @@ impl PathBuf {\n     ///\n     /// [`shrink_to_fit`]: ../ffi/struct.OsString.html#method.shrink_to_fit\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()\n     }\n@@ -1419,7 +1418,7 @@ impl PathBuf {\n     ///\n     /// [`shrink_to`]: ../ffi/struct.OsString.html#method.shrink_to\n     /// [`OsString`]: ../ffi/struct.OsString.html\n-    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    #[unstable(feature = \"shrink_to\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.inner.shrink_to(min_capacity)\n     }"}, {"sha": "cba539f0065393ccc2ee66d3ae637e56b585cc2a", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -0,0 +1,10 @@\n+// Check that AST json printing works.\n+#![crate_type = \"lib\"]\n+\n+// check-pass\n+// compile-flags: -Zast-json-noexpand\n+// normalize-stdout-test \":\\d+\" -> \":0\"\n+\n+// Only include a single item to reduce how often the test output needs\n+// updating.\n+extern crate core;"}, {"sha": "1a07968bdf162cb8e4c273b4e4e79ad6e41d7d20", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -0,0 +1 @@\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "2e009149ed68d3c38edbe621a0a81f3a3c5ce3c3", "filename": "src/test/ui/ast-json/ast-json-output.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.rs?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -1,7 +1,8 @@\n // Check that AST json printing works.\n+#![crate_type = \"lib\"]\n \n // check-pass\n-// compile-flags: -Zast-json-noexpand\n+// compile-flags: -Zast-json\n // normalize-stdout-test \":\\d+\" -> \":0\"\n \n // Only include a single item to reduce how often the test output needs"}, {"sha": "0b3704e8e0045864c9d50851fa37f9cdc0ad2b74", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/20fc02f836f3035b86b56a7cedb97c5cd4ed9612/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}]}