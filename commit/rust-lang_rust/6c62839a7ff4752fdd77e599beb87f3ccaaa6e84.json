{"sha": "6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNjI4MzlhN2ZmNDc1MmZkZDc3ZTU5OWJlYjg3ZjNjY2FhYTZlODQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-04T21:47:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-04T21:54:49Z"}, "message": "rustc: Recognize `-L framework=foo`\n\nOn OSX the linker has a separate framework lookup path which is specified via\nthe `-F` flag. This adds a new kind of `-L` path recognized by the compiler for\nframeworks to be passed through to the linker.\n\nCloses #20259", "tree": {"sha": "3a36e38033a494d4ec0142eed4b6f2894425a0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a36e38033a494d4ec0142eed4b6f2894425a0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "html_url": "https://github.com/rust-lang/rust/commit/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac134f7ca435551964996ee88319241cd3c7c110", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac134f7ca435551964996ee88319241cd3c7c110", "html_url": "https://github.com/rust-lang/rust/commit/ac134f7ca435551964996ee88319241cd3c7c110"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "49056afa045abb46f7e970696fd03f6ec1ef0b24", "filename": "man/rustc.1", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "patch": "@@ -18,10 +18,15 @@ Display the help message\n \\fB\\-\\-cfg\\fR SPEC\n Configure the compilation environment\n .TP\n-\\fB\\-L\\fR PATH\n-Add a directory to the library search path\n-.TP\n-\\fB\\-l\\fR NAME[:KIND]\n+\\fB\\-L\\fR [KIND=]PATH\n+Add a directory to the library search path. The optional KIND can be one of:\n+    dependency = only lookup transitive dependencies here\n+    crate = only lookup local `extern crate` directives here\n+    native = only lookup native libraries here\n+    framework = only look for OSX frameworks here\n+    all = look for anything here (the default)\n+.TP\n+\\fB\\-l\\fR [KIND=]NAME\n Link the generated crate(s) to the specified native library NAME. The optional\n KIND can be one of, static, dylib, or framework. If omitted, dylib is assumed.\n .TP"}, {"sha": "8faf81a156445e817d7b5bb5f85e43c1741db0b3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "patch": "@@ -738,7 +738,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n     vec![\n         opt::flag(\"h\", \"help\", \"Display this message\"),\n         opt::multi(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n-        opt::multi(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n+        opt::multi(\"L\", \"\",   \"Add a directory to the library search path\",\n+                   \"[KIND=]PATH\"),\n         opt::multi(\"l\", \"\",   \"Link the generated crate(s) to the specified native\n                              library NAME. The optional KIND can be one of,\n                              static, dylib, or framework. If omitted, dylib is"}, {"sha": "c314a999f246119cf1ca7d340b5c8586f0a245e3", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "patch": "@@ -25,6 +25,7 @@ pub enum PathKind {\n     Native,\n     Crate,\n     Dependency,\n+    Framework,\n     ExternFlag,\n     All,\n }\n@@ -41,6 +42,8 @@ impl SearchPaths {\n             (PathKind::Crate, &path[\"crate=\".len()..])\n         } else if path.starts_with(\"dependency=\") {\n             (PathKind::Dependency, &path[\"dependency=\".len()..])\n+        } else if path.starts_with(\"framework=\") {\n+            (PathKind::Framework, &path[\"framework=\".len()..])\n         } else if path.starts_with(\"all=\") {\n             (PathKind::All, &path[\"all=\".len()..])\n         } else {"}, {"sha": "288efd7e5ee8a1f654859709ccc464c31f7d54d3", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c62839a7ff4752fdd77e599beb87f3ccaaa6e84/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=6c62839a7ff4752fdd77e599beb87f3ccaaa6e84", "patch": "@@ -1041,8 +1041,11 @@ fn link_args(cmd: &mut Command,\n // in the current crate. Upstream crates with native library dependencies\n // may have their native library pulled in above.\n fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n-    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, _| {\n-        cmd.arg(\"-L\").arg(path);\n+    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, k| {\n+        match k {\n+            PathKind::Framework => { cmd.arg(\"-F\").arg(path); }\n+            _ => { cmd.arg(\"-L\").arg(path); }\n+        }\n         FileDoesntMatch\n     });\n "}]}