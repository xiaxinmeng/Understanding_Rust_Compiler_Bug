{"sha": "b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NmY0YmI4ZDE3NDhiODNhNmY0YzVlZGMzYzc3YTQ2YjIxM2UxYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T17:33:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T17:33:59Z"}, "message": "minor", "tree": {"sha": "eb34ec6e46f8a15b015e62dc404773a938e45819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb34ec6e46f8a15b015e62dc404773a938e45819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2", "html_url": "https://github.com/rust-lang/rust/commit/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1fc70ccd3bf7a0850e036a12cf866a80d46458", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1fc70ccd3bf7a0850e036a12cf866a80d46458", "html_url": "https://github.com/rust-lang/rust/commit/de1fc70ccd3bf7a0850e036a12cf866a80d46458"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "814e64ae4ffbf7889b7989235259d55584c3ce3b", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2", "patch": "@@ -671,44 +671,6 @@ mod foo;\n         );\n     }\n \n-    #[test]\n-    fn missing_record_pat_field_no_diagnostic_if_not_exhaustive() {\n-        check_diagnostics(\n-            r\"\n-struct S { foo: i32, bar: () }\n-fn baz(s: S) -> i32 {\n-    match s {\n-        S { foo, .. } => foo,\n-    }\n-}\n-\",\n-        )\n-    }\n-\n-    #[test]\n-    fn missing_record_pat_field_box() {\n-        check_diagnostics(\n-            r\"\n-struct S { s: Box<u32> }\n-fn x(a: S) {\n-    let S { box s } = a;\n-}\n-\",\n-        )\n-    }\n-\n-    #[test]\n-    fn missing_record_pat_field_ref() {\n-        check_diagnostics(\n-            r\"\n-struct S { s: u32 }\n-fn x(a: S) {\n-    let S { ref s } = a;\n-}\n-\",\n-        )\n-    }\n-\n     #[test]\n     fn import_extern_crate_clash_with_inner_item() {\n         // This is more of a resolver test, but doesn't really work with the hir_def testsuite."}, {"sha": "d01f050414cbbd56a12ff8e88d4cd804c0743d50", "filename": "crates/ide/src/diagnostics/missing_fields.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs?ref=b66f4bb8d1748b83a6f4c5edc3c77a46b213e1c2", "patch": "@@ -93,6 +93,44 @@ fn baz(s: S) {\n         );\n     }\n \n+    #[test]\n+    fn missing_record_pat_field_no_diagnostic_if_not_exhaustive() {\n+        check_diagnostics(\n+            r\"\n+struct S { foo: i32, bar: () }\n+fn baz(s: S) -> i32 {\n+    match s {\n+        S { foo, .. } => foo,\n+    }\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn missing_record_pat_field_box() {\n+        check_diagnostics(\n+            r\"\n+struct S { s: Box<u32> }\n+fn x(a: S) {\n+    let S { box s } = a;\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn missing_record_pat_field_ref() {\n+        check_diagnostics(\n+            r\"\n+struct S { s: u32 }\n+fn x(a: S) {\n+    let S { ref s } = a;\n+}\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn range_mapping_out_of_macros() {\n         // FIXME: this is very wrong, but somewhat tricky to fix."}]}