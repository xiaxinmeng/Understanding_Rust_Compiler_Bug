{"sha": "5e52b61040223ce8b107fb759f7981d5fd90bdcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTJiNjEwNDAyMjNjZThiMTA3ZmI3NTlmNzk4MWQ1ZmQ5MGJkY2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-16T16:53:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-18T17:33:55Z"}, "message": "CTFE core engine allocation & memory API improvemenets\n\n- make Allocation API offset-based (no more Pointer)\n- make Memory API higher-level (combine checking for access and getting access into one operation)", "tree": {"sha": "2bfd36d052722d353d30e94b7f9fc4eaa35a2f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bfd36d052722d353d30e94b7f9fc4eaa35a2f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e52b61040223ce8b107fb759f7981d5fd90bdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e52b61040223ce8b107fb759f7981d5fd90bdcc", "html_url": "https://github.com/rust-lang/rust/commit/5e52b61040223ce8b107fb759f7981d5fd90bdcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e52b61040223ce8b107fb759f7981d5fd90bdcc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c530059496200e02ab8ffe7c7ed3cc07cf08863", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c530059496200e02ab8ffe7c7ed3cc07cf08863", "html_url": "https://github.com/rust-lang/rust/commit/3c530059496200e02ab8ffe7c7ed3cc07cf08863"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "c0f2920652f612592cd869dd496cc0d347a11e4e", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e52b61040223ce8b107fb759f7981d5fd90bdcc/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e52b61040223ce8b107fb759f7981d5fd90bdcc/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5e52b61040223ce8b107fb759f7981d5fd90bdcc", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer, Scalar,\n+    alloc_range, read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n use rustc_middle::ty::ConstKind;\n \n@@ -176,8 +176,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                     std::iter::repeat(0).take(size.bytes_usize()).collect::<Vec<u8>>(),\n                     align,\n                 );\n-                let ptr = Pointer::new(AllocId(!0), Size::ZERO); // The alloc id is never used\n-                alloc.write_scalar(fx, ptr, x.into(), size).unwrap();\n+                alloc.write_scalar(fx, alloc_range(Size::ZERO, size), x.into()).unwrap();\n                 let alloc = fx.tcx.intern_const_alloc(alloc);\n                 return CValue::by_ref(pointer_for_allocation(fx, alloc), layout);\n             }"}, {"sha": "c2f469fa021e15ab0703f65b6bc1596de4c80a20", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e52b61040223ce8b107fb759f7981d5fd90bdcc/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e52b61040223ce8b107fb759f7981d5fd90bdcc/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=5e52b61040223ce8b107fb759f7981d5fd90bdcc", "patch": "@@ -86,9 +86,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n-                        let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n                         let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n-                        alloc.get_bytes(fx, ptr, size).unwrap()\n+                        alloc.get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };"}]}