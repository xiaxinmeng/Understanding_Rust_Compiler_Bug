{"sha": "1c48039a873f331a4591a499f71161b5c8997af1", "node_id": "C_kwDOAAsO6NoAKDFjNDgwMzlhODczZjMzMWE0NTkxYTQ5OWY3MTE2MWI1Yzg5OTdhZjE", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-18T10:25:32Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-18T13:25:17Z"}, "message": "rename `is_tainted_by_errors`", "tree": {"sha": "ccf9159c187f9bb4aa750421ffcbfd383488065d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf9159c187f9bb4aa750421ffcbfd383488065d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c48039a873f331a4591a499f71161b5c8997af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c48039a873f331a4591a499f71161b5c8997af1", "html_url": "https://github.com/rust-lang/rust/commit/1c48039a873f331a4591a499f71161b5c8997af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c48039a873f331a4591a499f71161b5c8997af1/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fca95a5976aa89612869203f7ffe857d689b033", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fca95a5976aa89612869203f7ffe857d689b033", "html_url": "https://github.com/rust-lang/rust/commit/3fca95a5976aa89612869203f7ffe857d689b033"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "e8b979663143232e99f0864ea0beb09fe5ab9ffc", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -2294,9 +2294,13 @@ mod error {\n         }\n \n         pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n-            self.tainted_by_errors = Some(\n-                self.tcx.sess.delay_span_bug(t.span.clone(), \"diagnostic buffered but not emitted\"),\n-            );\n+            if let None = self.tainted_by_errors {\n+                self.tainted_by_errors = Some(\n+                    self.tcx\n+                        .sess\n+                        .delay_span_bug(t.span.clone(), \"diagnostic buffered but not emitted\"),\n+                )\n+            }\n             t.buffer(&mut self.buffered);\n         }\n "}, {"sha": "b9885952a893c55741e6e057f9c703f7adf45353", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -219,7 +219,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         instantiated_ty: OpaqueHiddenType<'tcx>,\n         origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n-        if let Some(e) = self.is_tainted_by_errors() {\n+        if let Some(e) = self.tainted_by_errors() {\n             return self.tcx.ty_error_with_guaranteed(e);\n         }\n "}, {"sha": "ac6b0924ab572498a4cc36f9fe8187f1b93b38ed", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         // type, `?T` is not considered unsolved, but `?I` is. The\n         // same is true for float variables.)\n         let fallback = match ty.kind() {\n-            _ if let Some(e) = self.is_tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n+            _ if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             ty::Infer(ty::IntVar(_)) => self.tcx.types.i32,\n             ty::Infer(ty::FloatVar(_)) => self.tcx.types.f64,\n             _ => match diverging_fallback.get(&ty) {"}, {"sha": "0d9189b12f6fd4e5f085751be29a561d69988e75", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -528,7 +528,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {\n         match self.typeck_results.borrow().node_types().get(id) {\n             Some(&t) => t,\n-            None if let Some(e) = self.is_tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n+            None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             None => {\n                 bug!(\n                     \"no type for node {}: {} in fcx {}\",\n@@ -543,7 +543,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n         match self.typeck_results.borrow().node_types().get(id) {\n             Some(&t) => Some(t),\n-            None if let Some(e) = self.is_tainted_by_errors() => Some(self.tcx.ty_error_with_guaranteed(e)),\n+            None if let Some(e) = self.tainted_by_errors() => Some(self.tcx.ty_error_with_guaranteed(e)),\n             None => None,\n         }\n     }\n@@ -1440,7 +1440,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if !ty.is_ty_var() {\n             ty\n         } else {\n-            if let None = self.is_tainted_by_errors() {\n+            if let None = self.tainted_by_errors() {\n                 self.err_ctxt()\n                     .emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282, true)\n                     .emit();"}, {"sha": "6847b03f431db1d36dff7d94a011e174c967f711", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -73,6 +73,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = self.typeck_results.borrow().expr_ty_adjusted(expr);\n                 let ty = self.resolve_vars_if_possible(ty);\n                 if ty.has_non_region_infer() {\n+                    assert!(self.tainted_by_errors().is_some());\n                     self.tcx.ty_error()\n                 } else {\n                     self.tcx.erase_regions(ty)"}, {"sha": "51cc2e7882de1c3f7837292c6c01dff3e340f4bd", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -344,7 +344,7 @@ fn typeck_with_fallback<'tcx>(\n \n         fcx.select_all_obligations_or_error();\n \n-        if let None = fcx.infcx.is_tainted_by_errors() {\n+        if let None = fcx.infcx.tainted_by_errors() {\n             fcx.check_transmutes();\n         }\n "}, {"sha": "0b5dc946c1deffa589f20f036542cfacc7edd6a8", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     }\n \n     fn is_tainted_by_errors(&self) -> bool {\n-        self.infcx.is_tainted_by_errors().is_some()\n+        self.infcx.tainted_by_errors().is_some()\n     }\n \n     fn resolve_type_vars_or_error("}, {"sha": "6c2ee35fa50da5b1daef213e9941db8fc3510113", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.typeck_results.treat_byte_string_as_slice =\n             mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);\n \n-        if let Some(e) = self.is_tainted_by_errors() {\n+        if let Some(e) = self.tainted_by_errors() {\n             wbcx.typeck_results.tainted_by_errors = Some(e);\n         }\n \n@@ -673,7 +673,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // to mark the `TypeckResults` as tainted in that case, so that downstream\n         // users of the typeck results don't produce extra errors, or worse, ICEs.\n         if let Some(e) = resolver.replaced_with_error {\n-            // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n             self.typeck_results.tainted_by_errors = Some(e);\n         }\n "}, {"sha": "aa6fed136110b8269632e36556e33e3154bd5aff", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -1208,7 +1208,8 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// reporting errors that often occur as a result of earlier\n     /// errors, but where it's hard to be 100% sure (e.g., unresolved\n     /// inference variables, regionck errors).\n-    pub fn is_tainted_by_errors(&self) -> Option<ErrorGuaranteed> {\n+    #[must_use = \"this method does not have any side effects\"]\n+    pub fn tainted_by_errors(&self) -> Option<ErrorGuaranteed> {\n         debug!(\n             \"is_tainted_by_errors(err_count={}, err_count_on_creation={}, \\\n              tainted_by_errors={})\",\n@@ -1217,14 +1218,17 @@ impl<'tcx> InferCtxt<'tcx> {\n             self.tainted_by_errors.get().is_some()\n         );\n \n+        if let Some(e) = self.tainted_by_errors.get() {\n+            return Some(e);\n+        }\n+\n         if self.tcx.sess.err_count() > self.err_count_on_creation {\n             // errors reported since this infcx was made\n-            return Some(self.tcx.sess.delay_span_bug(\n-                DUMMY_SP,\n-                \"`tcx.sess.error_count()` incorrectly returned non zero value\",\n-            ));\n+            self.set_tainted_by_errors();\n+            return self.tainted_by_errors.get();\n         }\n-        self.tainted_by_errors.get()\n+\n+        None\n     }\n \n     /// Set the \"tainted by errors\" flag to true. We call this when we\n@@ -1274,7 +1278,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             let mut inner = self.inner.borrow_mut();\n             let inner = &mut *inner;\n             assert!(\n-                self.is_tainted_by_errors().is_some() || inner.region_obligations.is_empty(),\n+                self.tainted_by_errors().is_some() || inner.region_obligations.is_empty(),\n                 \"region_obligations not empty: {:#?}\",\n                 inner.region_obligations\n             );\n@@ -1711,7 +1715,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     ) {\n         let errors = self.resolve_regions(outlives_env);\n \n-        if let None = self.is_tainted_by_errors() {\n+        if let None = self.tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors\n             // altogether if other errors have been reported while\n             // this infcx was in use.  This is totally hokey but"}, {"sha": "b84a1c447fffc270b4dbe96c4afba15dc589f78b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -2060,7 +2060,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    if let None = self.is_tainted_by_errors() {\n+                    if let None = self.tainted_by_errors() {\n                         self.emit_inference_failure_err(\n                             body_id,\n                             span,\n@@ -2115,14 +2115,16 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         if impls.len() > 1 && impls.len() < 5 && has_non_region_infer {\n                             self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n                         } else {\n-                            if self.is_tainted_by_errors().is_some() {\n+                            if self.tainted_by_errors().is_some() {\n+                                err.cancel();\n                                 return;\n                             }\n                             err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                         }\n                     }\n                     _ => {\n-                        if self.is_tainted_by_errors().is_some() {\n+                        if self.tainted_by_errors().is_some() {\n+                            err.cancel();\n                             return;\n                         }\n                         err.note(&format!(\"cannot satisfy `{}`\", predicate));\n@@ -2224,7 +2226,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         ] = path.segments\n                         && data.trait_ref.def_id == *trait_id\n                         && self.tcx.trait_of_item(*item_id) == Some(*trait_id)\n-                        && let None = self.is_tainted_by_errors()\n+                        && let None = self.tainted_by_errors()\n                     {\n                         let (verb, noun) = match self.tcx.associated_item(item_id).kind {\n                             ty::AssocKind::Const => (\"refer to the\", \"constant\"),\n@@ -2293,7 +2295,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // with error messages.\n                 if arg.references_error()\n                     || self.tcx.sess.has_errors().is_some()\n-                    || self.is_tainted_by_errors().is_some()\n+                    || self.tainted_by_errors().is_some()\n                 {\n                     return;\n                 }\n@@ -2304,7 +2306,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ty::PredicateKind::Subtype(data) => {\n                 if data.references_error()\n                     || self.tcx.sess.has_errors().is_some()\n-                    || self.is_tainted_by_errors().is_some()\n+                    || self.tainted_by_errors().is_some()\n                 {\n                     // no need to overload user in such cases\n                     return;\n@@ -2315,7 +2317,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282, true)\n             }\n             ty::PredicateKind::Projection(data) => {\n-                if predicate.references_error() || self.is_tainted_by_errors().is_some() {\n+                if predicate.references_error() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n                 let subst = data\n@@ -2349,7 +2351,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n \n             ty::PredicateKind::ConstEvaluatable(data) => {\n-                if predicate.references_error() || self.is_tainted_by_errors().is_some() {\n+                if predicate.references_error() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n                 let subst = data.walk().find(|g| g.is_non_region_infer());\n@@ -2376,7 +2378,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             _ => {\n-                if self.tcx.sess.has_errors().is_some() || self.is_tainted_by_errors().is_some() {\n+                if self.tcx.sess.has_errors().is_some() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n                 let mut err = struct_span_err!(\n@@ -2420,7 +2422,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         post.sort();\n         post.dedup();\n \n-        if self.is_tainted_by_errors().is_some()\n+        if self.tainted_by_errors().is_some()\n             && (crate_names.len() == 1\n                 && spans.len() == 0\n                 && [\"`core`\", \"`alloc`\", \"`std`\"].contains(&crate_names[0].as_str())"}, {"sha": "b05942353a343536100523b245a869ec16b16ccd", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -1089,7 +1089,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n-                    if let Some(e) = self.infcx.is_tainted_by_errors() {\n+                    if let Some(e) = self.infcx.tainted_by_errors() {\n                         return Err(OverflowError::Error(e));\n                     }\n                     self.infcx.err_ctxt().report_overflow_error(error_obligation, true);"}, {"sha": "547643f0d6e203f9644dd410d44deb97d3e7ffac", "filename": "src/test/ui/issues/issue-52262.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags:-Ztreat-err-as-bug=5\n #[derive(Debug)]\n enum MyError {\n     NotFound { key: Vec<u8> },"}, {"sha": "ef41f078b8037d25e1ab892ac182fad9a3656163", "filename": "src/test/ui/issues/issue-52262.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c48039a873f331a4591a499f71161b5c8997af1/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c48039a873f331a4591a499f71161b5c8997af1/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr?ref=1c48039a873f331a4591a499f71161b5c8997af1", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `*key` which is behind a shared reference\n-  --> $DIR/issue-52262.rs:16:35\n+  --> $DIR/issue-52262.rs:15:35\n    |\n LL |                 String::from_utf8(*key).unwrap()\n    |                                   ^^^^ move occurs because `*key` has type `Vec<u8>`, which does not implement the `Copy` trait"}]}