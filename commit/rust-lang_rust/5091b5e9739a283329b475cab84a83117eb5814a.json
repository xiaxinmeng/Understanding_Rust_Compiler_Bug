{"sha": "5091b5e9739a283329b475cab84a83117eb5814a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOTFiNWU5NzM5YTI4MzMyOWI0NzVjYWI4NGE4MzExN2ViNTgxNGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-13T14:59:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-13T14:59:37Z"}, "message": "Merge #6209\n\n6209: Fix MergeBehaviour::Full/Last not working when merging nested long paths r=matklad a=Veykril\n\nPrior to this inserting `std::foo::bar::Baz` with a nested import containing a multi segment path like `use std::{foo::bar::Qux};` present would result in `use std::{foo::bar::Baz, foo::bar::Qux};` with Full/Last Mergebehaviour.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f8e3bc969b502075cf1157fe33fc044d204cb022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e3bc969b502075cf1157fe33fc044d204cb022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5091b5e9739a283329b475cab84a83117eb5814a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhcDZCRBK7hj4Ov3rIwAAdHIIABl1f1uD8Rs+k+/X6a98Qd4U\nnqJPwQvICtlzE9SsLy0tJ68ZLU0/htT8cO4+LRdjkcqy5eaAXuTbg+WsiRNFL6L/\n+ry15LBJpIXRzOe5BQsYvL0DDX6fhvxRQ3jCR2HDkJe1XrUWbk37rqRNlRJlAjud\n324bynrYO8cvNa1NXtREb6Ozrulh3HM2UfPqfw68L5FgtcUVP57g5Ddypxl+pc6i\n/Ch2KRTdtZpDF9xFGt9b8T6cwUa4i2k5j7yxCYvXOiOwPDZ1MdGR3wnql6fWCkiS\n6nyjACG1gDwgqxuUAk7/UYpFxCaefbt2HV1YdpoEepuUG/728C3fHnl7WWsgfXg=\n=ibbt\n-----END PGP SIGNATURE-----\n", "payload": "tree f8e3bc969b502075cf1157fe33fc044d204cb022\nparent 2d79bb9413b3e30d15d70b49ca19fcf47a97e592\nparent 2620b8d42f2d9c41ead1af518158691840141583\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602601177 +0000\ncommitter GitHub <noreply@github.com> 1602601177 +0000\n\nMerge #6209\n\n6209: Fix MergeBehaviour::Full/Last not working when merging nested long paths r=matklad a=Veykril\n\nPrior to this inserting `std::foo::bar::Baz` with a nested import containing a multi segment path like `use std::{foo::bar::Qux};` present would result in `use std::{foo::bar::Baz, foo::bar::Qux};` with Full/Last Mergebehaviour.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5091b5e9739a283329b475cab84a83117eb5814a", "html_url": "https://github.com/rust-lang/rust/commit/5091b5e9739a283329b475cab84a83117eb5814a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5091b5e9739a283329b475cab84a83117eb5814a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d79bb9413b3e30d15d70b49ca19fcf47a97e592", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d79bb9413b3e30d15d70b49ca19fcf47a97e592", "html_url": "https://github.com/rust-lang/rust/commit/2d79bb9413b3e30d15d70b49ca19fcf47a97e592"}, {"sha": "2620b8d42f2d9c41ead1af518158691840141583", "url": "https://api.github.com/repos/rust-lang/rust/commits/2620b8d42f2d9c41ead1af518158691840141583", "html_url": "https://github.com/rust-lang/rust/commit/2620b8d42f2d9c41ead1af518158691840141583"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "e95b971a448489b10ad00dd0f31c780c1b74982c", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5091b5e9739a283329b475cab84a83117eb5814a/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5091b5e9739a283329b475cab84a83117eb5814a/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=5091b5e9739a283329b475cab84a83117eb5814a", "patch": "@@ -393,7 +393,7 @@ impl std::fmt::Display<|> for Foo {\n }\n \",\n             r\"\n-use std::fmt::{Display, nested::Debug};\n+use std::fmt::{nested::Debug, Display};\n \n impl Display for Foo {\n }"}, {"sha": "bfd457d18f76506364768a7c8d81935b7f3d247b", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5091b5e9739a283329b475cab84a83117eb5814a/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5091b5e9739a283329b475cab84a83117eb5814a/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=5091b5e9739a283329b475cab84a83117eb5814a", "patch": "@@ -200,7 +200,18 @@ fn recursive_merge(\n             return None;\n         }\n         let rhs_path = rhs_t.path();\n-        match use_trees.binary_search_by(|p| path_cmp_bin_search(p.path(), rhs_path.clone())) {\n+        match use_trees.binary_search_by(|lhs_t| {\n+            let (lhs_t, rhs_t) = match lhs_t\n+                .path()\n+                .zip(rhs_path.clone())\n+                .and_then(|(lhs, rhs)| common_prefix(&lhs, &rhs))\n+            {\n+                Some((lhs_p, rhs_p)) => (lhs_t.split_prefix(&lhs_p), rhs_t.split_prefix(&rhs_p)),\n+                None => (lhs_t.clone(), rhs_t.clone()),\n+            };\n+\n+            path_cmp_bin_search(lhs_t.path(), rhs_t.path())\n+        }) {\n             Ok(idx) => {\n                 let lhs_t = &mut use_trees[idx];\n                 let lhs_path = lhs_t.path()?;\n@@ -327,11 +338,11 @@ fn path_cmp_for_sort(a: Option<ast::Path>, b: Option<ast::Path>) -> Ordering {\n \n /// Path comparison func for binary searching for merging.\n fn path_cmp_bin_search(lhs: Option<ast::Path>, rhs: Option<ast::Path>) -> Ordering {\n-    match (lhs, rhs) {\n+    match (lhs.and_then(|path| path.segment()), rhs.and_then(|path| path.segment())) {\n         (None, None) => Ordering::Equal,\n         (None, Some(_)) => Ordering::Less,\n         (Some(_), None) => Ordering::Greater,\n-        (Some(ref a), Some(ref b)) => path_cmp_short(a, b),\n+        (Some(ref a), Some(ref b)) => path_segment_cmp(a, b),\n     }\n }\n \n@@ -801,6 +812,24 @@ use std::foo::bar::{Qux, quux::{Fez, Fizz}};\",\n         )\n     }\n \n+    #[test]\n+    fn merge_groups_full_nested_long() {\n+        check_full(\n+            \"std::foo::bar::Baz\",\n+            r\"use std::{foo::bar::Qux};\",\n+            r\"use std::{foo::bar::{Baz, Qux}};\",\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_groups_last_nested_long() {\n+        check_full(\n+            \"std::foo::bar::Baz\",\n+            r\"use std::{foo::bar::Qux};\",\n+            r\"use std::{foo::bar::{Baz, Qux}};\",\n+        );\n+    }\n+\n     #[test]\n     fn merge_groups_skip_pub() {\n         check_full("}]}