{"sha": "ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMTNhNzJkZWQzZTliNDI5MDhhNjJjYjIzMzY3YTBlYzMzN2Q3Yzk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-12-29T21:00:53Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-01-03T14:57:49Z"}, "message": "Dont check stability for items that are not pub to universe.\n\nIncludes special case handling for trait methods.\n\nFix #38412.", "tree": {"sha": "de82ed3bbd5074200a5824bc698efce6b30a1f42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de82ed3bbd5074200a5824bc698efce6b30a1f42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "html_url": "https://github.com/rust-lang/rust/commit/ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae13a72ded3e9b42908a62cb23367a0ec337d7c9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f1fba353d2545ee54589350a83681dc3156e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f1fba353d2545ee54589350a83681dc3156e70", "html_url": "https://github.com/rust-lang/rust/commit/17f1fba353d2545ee54589350a83681dc3156e70"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "e6c9d2c36d013fa9d9677e260534b0148605d1be", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ae13a72ded3e9b42908a62cb23367a0ec337d7c9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae13a72ded3e9b42908a62cb23367a0ec337d7c9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "patch": "@@ -18,7 +18,7 @@ use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, DefIndex, LOCAL_CRATE};\n-use ty::TyCtxt;\n+use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -432,6 +432,36 @@ struct Checker<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    // (See issue #38412)\n+    fn skip_stability_check_due_to_privacy(self, def_id: DefId) -> bool {\n+        let visibility = {\n+            // Check if `def_id` is a trait method.\n+            match self.sess.cstore.associated_item(def_id) {\n+                Some(ty::AssociatedItem { container: ty::TraitContainer(trait_def_id), .. }) => {\n+                    // Trait methods do not declare visibility (even\n+                    // for visibility info in cstore). Use containing\n+                    // trait instead, so methods of pub traits are\n+                    // themselves considered pub.\n+                    self.sess.cstore.visibility(trait_def_id)\n+                }\n+                _ => {\n+                    // Otherwise, cstore info works directly.\n+                    self.sess.cstore.visibility(def_id)\n+                }\n+            }\n+        };\n+\n+        match visibility {\n+            // must check stability for pub items.\n+            ty::Visibility::Public => false,\n+\n+            // these are not visible outside crate; therefore\n+            // stability markers are irrelevant, if even present.\n+            ty::Visibility::Restricted(..) |\n+            ty::Visibility::Invisible => true,\n+        }\n+    }\n+\n     pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n         if self.sess.codemap().span_allows_unstable(span) {\n             debug!(\"stability: \\\n@@ -492,6 +522,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.stability.borrow_mut().used_features.insert(feature.clone(), level.clone());\n         }\n \n+        // Issue 38412: private items lack stability markers.\n+        if self.skip_stability_check_due_to_privacy(def_id) {\n+            return\n+        }\n+\n         match stability {\n             Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n                 if !self.stability.borrow().active_features.contains(feature) {"}]}