{"sha": "0cb0f7636851f9fcc57085cf80197a2ef6db098f", "node_id": "C_kwDOAAsO6NoAKDBjYjBmNzYzNjg1MWY5ZmNjNTcwODVjZjgwMTk3YTJlZjZkYjA5OGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-30T08:32:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-30T08:32:54Z"}, "message": "Auto merge of #9069 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "e614515446be6457d225800d863c6d34f3d51908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e614515446be6457d225800d863c6d34f3d51908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb0f7636851f9fcc57085cf80197a2ef6db098f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb0f7636851f9fcc57085cf80197a2ef6db098f", "html_url": "https://github.com/rust-lang/rust/commit/0cb0f7636851f9fcc57085cf80197a2ef6db098f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb0f7636851f9fcc57085cf80197a2ef6db098f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff3964af1b497f5621f9c1e362cef24aeab4018a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3964af1b497f5621f9c1e362cef24aeab4018a", "html_url": "https://github.com/rust-lang/rust/commit/ff3964af1b497f5621f9c1e362cef24aeab4018a"}, {"sha": "9de1f9f45a85c452ea0371080687e0251f1395c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de1f9f45a85c452ea0371080687e0251f1395c1", "html_url": "https://github.com/rust-lang/rust/commit/9de1f9f45a85c452ea0371080687e0251f1395c1"}], "stats": {"total": 556, "additions": 267, "deletions": 289}, "files": [{"sha": "4993925489f96f1d5799272dd6003efcdbd10997", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.63\"\n+version = \"0.1.64\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "f5c51b9474fcd878cf631441cc03a194d239301b", "filename": "clippy_dev/src/bless.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -4,12 +4,12 @@\n use crate::cargo_clippy_path;\n use std::ffi::OsStr;\n use std::fs;\n-use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n+use std::sync::LazyLock;\n use walkdir::{DirEntry, WalkDir};\n \n-static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> =\n-    SyncLazy::new(|| cargo_clippy_path().metadata().ok()?.modified().ok());\n+static CLIPPY_BUILD_TIME: LazyLock<Option<std::time::SystemTime>> =\n+    LazyLock::new(|| cargo_clippy_path().metadata().ok()?.modified().ok());\n \n /// # Panics\n ///"}, {"sha": "9a3f042ffc034e47bb52a5a42c84f6c11966dbd5", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.63\"\n+version = \"0.1.64\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "13853dec99de8970293790ffd481d030016bda51", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg_for_edges;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_trait_method;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n@@ -14,17 +14,17 @@ use super::MAP_FLATTEN;\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, map_arg: &Expr<'_>, map_span: Span) {\n     if let Some((caller_ty_name, method_to_use)) = try_get_caller_ty_name_and_method_name(cx, expr, recv, map_arg) {\n         let mut applicability = Applicability::MachineApplicable;\n-        let help_msgs = [\n-            &format!(\"try replacing `map` with `{}`\", method_to_use),\n-            \"and remove the `.flatten()`\",\n-        ];\n+\n         let closure_snippet = snippet_with_applicability(cx, map_arg.span, \"..\", &mut applicability);\n-        span_lint_and_sugg_for_edges(\n+        span_lint_and_sugg(\n             cx,\n             MAP_FLATTEN,\n             expr.span.with_lo(map_span.lo()),\n             &format!(\"called `map(..).flatten()` on `{}`\", caller_ty_name),\n-            &help_msgs,\n+            &format!(\n+                \"try replacing `map` with `{}` and remove the `.flatten()`\",\n+                method_to_use\n+            ),\n             format!(\"{}({})\", method_to_use, closure_snippet),\n             applicability,\n         );"}, {"sha": "3d1208824fa34c10e187f873322b462746105104", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -4,7 +4,6 @@ use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_mac\n use clippy_utils::ty::{implements_trait, match_type};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n use if_chain::if_chain;\n-use rustc_errors::emitter::MAX_SUGGESTION_HIGHLIGHT_LINES;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -33,7 +32,6 @@ pub(super) fn check<'tcx>(\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n-        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -56,19 +54,14 @@ pub(super) fn check<'tcx>(\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let hint = \"unwrap_or_default()\";\n-                let mut sugg_span = span;\n+                let sugg_span = span;\n \n-                let mut sugg: String = format!(\n+                let sugg: String = format!(\n                     \"{}.{}\",\n                     snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n                     hint\n                 );\n \n-                if sugg.lines().count() > MAX_SUGGESTION_HIGHLIGHT_LINES {\n-                    sugg_span = method_span.with_hi(span.hi());\n-                    sugg = hint.to_string();\n-                }\n-\n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n@@ -178,7 +171,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span, method_span) {\n+                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "6518e0a6ea07390620fff232344e21c30312b417", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -104,15 +104,14 @@ macro_rules! RENAME_VALUE_TEMPLATE {\n     };\n }\n \n-const LINT_EMISSION_FUNCTIONS: [&[&str]; 8] = [\n+const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_note\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_hir\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_sugg\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_then\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_hir_and_then\"],\n-    &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_sugg_for_edges\"],\n ];\n const SUGGESTION_DIAGNOSTIC_BUILDER_METHODS: [(&str, bool); 9] = [\n     (\"span_suggestion\", false),"}, {"sha": "bb443bdc1168fc97ee0b363b9908c0cd1c423aac", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.63\"\n+version = \"0.1.64\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "ad95369b9ef707091919fa59ea167a906c35e14e", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 88, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -8,7 +8,7 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::Span;\n@@ -213,93 +213,6 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n     });\n }\n \n-/// Like [`span_lint_and_sugg`] with a focus on the edges. The output will either\n-/// emit single span or multispan suggestion depending on the number of its lines.\n-///\n-/// If the given suggestion string has more lines than the maximum display length defined by\n-/// [`MAX_SUGGESTION_HIGHLIGHT_LINES`][`rustc_errors::emitter::MAX_SUGGESTION_HIGHLIGHT_LINES`],\n-/// this function will split the suggestion and span to showcase the change for the top and\n-/// bottom edge of the code. For normal suggestions, in one display window, the help message\n-/// will be combined with a colon.\n-///\n-/// Multipart suggestions like the one being created here currently cannot be\n-/// applied by rustfix (See [rustfix#141](https://github.com/rust-lang/rustfix/issues/141)).\n-/// Testing rustfix with this lint emission function might require a file with\n-/// suggestions that can be fixed and those that can't. See\n-/// [clippy#8520](https://github.com/rust-lang/rust-clippy/pull/8520/files) for\n-/// an example and of this.\n-///\n-/// # Example for a long suggestion\n-///\n-/// ```text\n-/// error: called `map(..).flatten()` on `Option`\n-///   --> $DIR/map_flatten.rs:8:10\n-///    |\n-/// LL |           .map(|x| {\n-///    |  __________^\n-/// LL | |             if x <= 5 {\n-/// LL | |                 Some(x)\n-/// LL | |             } else {\n-/// ...  |\n-/// LL | |         })\n-/// LL | |         .flatten();\n-///    | |__________________^\n-///    |\n-///   = note: `-D clippy::map-flatten` implied by `-D warnings`\n-/// help: try replacing `map` with `and_then`\n-///    |\n-/// LL ~         .and_then(|x| {\n-/// LL +             if x <= 5 {\n-/// LL +                 Some(x)\n-///    |\n-/// help: and remove the `.flatten()`\n-///    |\n-/// LL +                 None\n-/// LL +             }\n-/// LL ~         });\n-///    |\n-/// ```\n-pub fn span_lint_and_sugg_for_edges(\n-    cx: &LateContext<'_>,\n-    lint: &'static Lint,\n-    sp: Span,\n-    msg: &str,\n-    helps: &[&str; 2],\n-    sugg: String,\n-    applicability: Applicability,\n-) {\n-    span_lint_and_then(cx, lint, sp, msg, |diag| {\n-        let sugg_lines_count = sugg.lines().count();\n-        if sugg_lines_count > MAX_SUGGESTION_HIGHLIGHT_LINES {\n-            let sm = cx.sess().source_map();\n-            if let (Ok(line_upper), Ok(line_bottom)) = (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi())) {\n-                let split_idx = MAX_SUGGESTION_HIGHLIGHT_LINES / 2;\n-                let span_upper = sm.span_until_char(\n-                    sp.with_hi(line_upper.sf.lines(|lines| lines[line_upper.line + split_idx])),\n-                    '\\n',\n-                );\n-                let span_bottom = sp.with_lo(line_bottom.sf.lines(|lines| lines[line_bottom.line - split_idx]));\n-\n-                let sugg_lines_vec = sugg.lines().collect::<Vec<&str>>();\n-                let sugg_upper = sugg_lines_vec[..split_idx].join(\"\\n\");\n-                let sugg_bottom = sugg_lines_vec[sugg_lines_count - split_idx..].join(\"\\n\");\n-\n-                diag.span_suggestion(span_upper, helps[0], sugg_upper, applicability);\n-                diag.span_suggestion(span_bottom, helps[1], sugg_bottom, applicability);\n-\n-                return;\n-            }\n-        }\n-        diag.span_suggestion_with_style(\n-            sp,\n-            &helps.join(\", \"),\n-            sugg,\n-            applicability,\n-            rustc_errors::SuggestionStyle::ShowAlways,\n-        );\n-    });\n-}\n-\n /// Create a suggestion made from several `span \u2192 replacement`.\n ///\n /// Note: in the JSON format (used by `compiletest_rs`), the help message will"}, {"sha": "793e3cc58c21dba57339fb431899bef7e2bdf523", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -16,6 +16,10 @@ use rustc_middle::ty::TypeckResults;\n use rustc_span::{sym, Symbol};\n use std::hash::{Hash, Hasher};\n \n+/// Callback that is called when two expressions are not equal in the sense of `SpanlessEq`, but\n+/// other conditions would make them equal.\n+type SpanlessEqCallback<'a> = dyn FnMut(&Expr<'_>, &Expr<'_>) -> bool + 'a;\n+\n /// Type used to check whether two ast are the same. This is different from the\n /// operator `==` on ast types as this operator would compare true equality with\n /// ID and span.\n@@ -26,7 +30,7 @@ pub struct SpanlessEq<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     maybe_typeck_results: Option<(&'tcx TypeckResults<'tcx>, &'tcx TypeckResults<'tcx>)>,\n     allow_side_effects: bool,\n-    expr_fallback: Option<Box<dyn FnMut(&Expr<'_>, &Expr<'_>) -> bool + 'a>>,\n+    expr_fallback: Option<Box<SpanlessEqCallback<'a>>>,\n }\n \n impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {"}, {"sha": "9fa28e137f974288c629634bc745939b3ca93e24", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -64,7 +64,7 @@ pub use self::hir_utils::{\n \n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n-use std::lazy::SyncOnceCell;\n+use std::sync::OnceLock;\n use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n@@ -2099,7 +2099,7 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     false\n }\n \n-static TEST_ITEM_NAMES_CACHE: SyncOnceCell<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = SyncOnceCell::new();\n+static TEST_ITEM_NAMES_CACHE: OnceLock<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = OnceLock::new();\n \n fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n     let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));"}, {"sha": "aa119539b1b3987acfea8d37f21e99334f03bfbc", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -771,7 +771,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, String::new(), applicability);\n+        self.span_suggestion(remove_span, msg, \"\", applicability);\n     }\n }\n "}, {"sha": "6cc6d5036b379261f729c64128a5f4c68c604cf6", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-16\"\n+channel = \"nightly-2022-06-30\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "96d542cfe105223b59c13d7b57398de1d7e70d2e", "filename": "src/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -21,11 +21,11 @@ use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n use std::env;\n-use std::lazy::SyncLazy;\n use std::ops::Deref;\n use std::panic;\n use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n+use std::sync::LazyLock;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n /// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n@@ -153,7 +153,8 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> = SyncLazy::new(|| {\n+type PanicCallback = dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static;\n+static ICE_HOOK: LazyLock<Box<PanicCallback>> = LazyLock::new(|| {\n     let hook = panic::take_hook();\n     panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n     hook\n@@ -220,7 +221,7 @@ fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<Pat\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n-    SyncLazy::force(&ICE_HOOK);\n+    LazyLock::force(&ICE_HOOK);\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n "}, {"sha": "41048298349e8dbac16044dc479d62f3c2c4c6fa", "filename": "tests/compile-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -12,8 +12,8 @@ use std::env::{self, remove_var, set_var, var_os};\n use std::ffi::{OsStr, OsString};\n use std::fs;\n use std::io;\n-use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n+use std::sync::LazyLock;\n use test_utils::IS_RUSTC_TEST_SUITE;\n \n mod test_utils;\n@@ -75,7 +75,7 @@ extern crate tokio;\n /// dependencies must be added to Cargo.toml at the project root. Test\n /// dependencies that are not *directly* used by this test module require an\n /// `extern crate` declaration.\n-static EXTERN_FLAGS: SyncLazy<String> = SyncLazy::new(|| {\n+static EXTERN_FLAGS: LazyLock<String> = LazyLock::new(|| {\n     let current_exe_depinfo = {\n         let mut path = env::current_exe().unwrap();\n         path.set_extension(\"d\");"}, {"sha": "ea8c54e08b33806ca6bad8e4420618530d671632", "filename": "tests/test_utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Ftest_utils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Ftest_utils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftest_utils%2Fmod.rs?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -1,9 +1,9 @@\n #![allow(dead_code)] // see https://github.com/rust-lang/rust/issues/46379\n \n-use std::lazy::SyncLazy;\n use std::path::PathBuf;\n+use std::sync::LazyLock;\n \n-pub static CARGO_CLIPPY_PATH: SyncLazy<PathBuf> = SyncLazy::new(|| {\n+pub static CARGO_CLIPPY_PATH: LazyLock<PathBuf> = LazyLock::new(|| {\n     let mut path = std::env::current_exe().unwrap();\n     assert!(path.pop()); // deps\n     path.set_file_name(\"cargo-clippy\");"}, {"sha": "0152a93feee4274b4a27a61deadb19da8ffe21a4", "filename": "tests/ui/bind_instead_of_map_multipart.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fbind_instead_of_map_multipart.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fbind_instead_of_map_multipart.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbind_instead_of_map_multipart.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -56,7 +56,25 @@ LL |             if s == \"43\" {\n LL ~                 return 43;\n LL |             }\n LL |             s == \"42\"\n+LL |         } {\n+LL ~             return 45;\n+LL |         }\n+LL |         match s.len() {\n+LL ~             10 => 2,\n+LL |             20 => {\n  ...\n+LL |                         if foo() {\n+LL ~                             return 20;\n+LL |                         }\n+LL |                         println!(\"foo\");\n+LL ~                         3\n+LL |                     };\n+LL |                 }\n+LL ~                 20\n+LL |             },\n+LL ~             40 => 30,\n+LL ~             _ => 1,\n+   |\n \n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n   --> $DIR/bind_instead_of_map_multipart.rs:61:13"}, {"sha": "a270f637f2b91ea12e9dea65f68d5db93c774b71", "filename": "tests/ui/branches_sharing_code/shared_at_top_and_bottom.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -98,7 +98,8 @@ LL +         id: e_id,\n LL +         name: \"Player 1\".to_string(),\n LL +         some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n LL +     };\n- ...\n+LL +     process_data(pack);\n+   |\n \n error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:94:5"}, {"sha": "2ef9966525cefbfaca089233e71a9c8f3a6a1ca4", "filename": "tests/ui/entry.stderr", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -28,7 +28,8 @@ LL +             v\n LL +         } else {\n LL +             v2\n LL +         }\n- ...\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:38:5\n@@ -50,7 +51,8 @@ LL +             v\n LL +         } else {\n LL +             v2\n LL +         }\n- ...\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:47:5\n@@ -72,7 +74,9 @@ LL +             e.insert(v);\n LL +         } else {\n LL +             e.insert(v2);\n LL +             return;\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:57:5\n@@ -111,7 +115,11 @@ LL +             1 if true => {\n LL +                 v\n LL +             },\n LL +             _ => {\n- ...\n+LL +                 v2\n+LL +             },\n+LL +         }\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:75:5\n@@ -133,7 +141,9 @@ LL +             0 => foo(),\n LL +             _ => {\n LL +                 e.insert(v2);\n LL +             },\n- ...\n+LL +         };\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:85:5\n@@ -155,7 +165,26 @@ LL +         match 0 {\n LL +             0 if false => {\n LL +                 v\n LL +             },\n- ...\n+LL +             1 => {\n+LL +                 foo();\n+LL +                 v\n+LL +             },\n+LL +             2 | 3 => {\n+LL +                 for _ in 0..2 {\n+LL +                     foo();\n+LL +                 }\n+LL +                 if true {\n+LL +                     v\n+LL +                 } else {\n+LL +                     v2\n+LL +                 }\n+LL +             },\n+LL +             _ => {\n+LL +                 v2\n+LL +             },\n+LL +         }\n+LL +     });\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:119:5"}, {"sha": "e0f6671b460edc96084bbca3f6c54bbc838c6537", "filename": "tests/ui/entry_with_else.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fentry_with_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fentry_with_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_with_else.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -17,7 +17,9 @@ LL +             e.insert(v);\n LL +         }\n LL +         std::collections::hash_map::Entry::Occupied(mut e) => {\n LL +             e.insert(v2);\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:22:5\n@@ -37,7 +39,9 @@ LL +             e.insert(v);\n LL +         }\n LL +         std::collections::hash_map::Entry::Vacant(e) => {\n LL +             e.insert(v2);\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:28:5\n@@ -95,7 +99,9 @@ LL +             e.insert(v);\n LL +         }\n LL +         std::collections::hash_map::Entry::Occupied(mut e) => {\n LL +             e.insert(v2);\n- ...\n+LL +         }\n+LL +     }\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:46:5\n@@ -115,7 +121,10 @@ LL +             if true { Some(e.insert(v)) } else { Some(e.insert(v2)) }\n LL +         }\n LL +         std::collections::hash_map::Entry::Vacant(e) => {\n LL +             e.insert(v);\n- ...\n+LL +             None\n+LL +         }\n+LL ~     };\n+   |\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_with_else.rs:52:5"}, {"sha": "f137787bff0c786f5f1f5f85ab03c8e23b3816ef", "filename": "tests/ui/eprint_with_newline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Feprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Feprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feprint_with_newline.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -9,7 +9,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"Hello/n\");\n LL +     eprintln!(\"Hello\");\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:6:5\n@@ -21,7 +21,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"Hello {}/n\", \"world\");\n LL +     eprintln!(\"Hello {}\", \"world\");\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:7:5\n@@ -33,7 +33,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"Hello {} {}/n\", \"world\", \"#2\");\n LL +     eprintln!(\"Hello {} {}\", \"world\", \"#2\");\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:8:5\n@@ -45,7 +45,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"{}/n\", 1265);\n LL +     eprintln!(\"{}\", 1265);\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:9:5\n@@ -57,7 +57,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"/n\");\n LL +     eprintln!();\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:28:5\n@@ -69,7 +69,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"//n\"); // should fail\n LL +     eprintln!(\"/\"); // should fail\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:35:5\n@@ -111,7 +111,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"/r/n\"); //~ ERROR\n LL +     eprintln!(\"/r\"); //~ ERROR\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:48:5\n@@ -123,7 +123,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"foo/rbar/n\") // ~ ERROR\n LL +     eprintln!(\"foo/rbar\") // ~ ERROR\n-   | \n+   |\n \n error: aborting due to 10 previous errors\n "}, {"sha": "45bf67acdb7361b20bea1636c0c8d3477eb8d3c3", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -32,7 +32,8 @@ LL +         .map(|i| i * 2)\n LL +         .filter(|i| i % 2 == 0)\n LL +         .map(|_| ())\n LL +         .next()\n- ...\n+LL +         .unwrap();\n+   |\n \n error: this let-binding has unit value\n   --> $DIR/let_unit.rs:80:5"}, {"sha": "0a903ed6fd4363c3f247562074ccff0ce46875bc", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -122,7 +122,14 @@ LL +         let a = 42;\n LL +         let b = 21;\n LL +         if a < b {\n LL +             let c = 21;\n- ...\n+LL +             let d = 42;\n+LL +             if c < d {\n+LL +                 let _ = 42;\n+LL +             }\n+LL +         }\n+LL +         42\n+LL +     }\n+   |\n \n error: this function can be simplified using the `async fn` syntax\n   --> $DIR/manual_async_fn.rs:92:1"}, {"sha": "2696694680ad7abd56549743231a3b882444e28c", "filename": "tests/ui/manual_split_once.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmanual_split_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmanual_split_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -96,12 +96,12 @@ help: remove the `iter` usages\n    |\n LL -     let l = iter.next().unwrap();\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let r = iter.next().unwrap();\n LL +     \n-   | \n+   |\n \n error: manual implementation of `split_once`\n   --> $DIR/manual_split_once.rs:49:5\n@@ -121,12 +121,12 @@ help: remove the `iter` usages\n    |\n LL -     let l = iter.next()?;\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let r = iter.next()?;\n LL +     \n-   | \n+   |\n \n error: manual implementation of `rsplit_once`\n   --> $DIR/manual_split_once.rs:53:5\n@@ -146,12 +146,12 @@ help: remove the `iter` usages\n    |\n LL -     let r = iter.next().unwrap();\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let l = iter.next().unwrap();\n LL +     \n-   | \n+   |\n \n error: manual implementation of `rsplit_once`\n   --> $DIR/manual_split_once.rs:57:5\n@@ -171,12 +171,12 @@ help: remove the `iter` usages\n    |\n LL -     let r = iter.next()?;\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let l = iter.next()?;\n LL +     \n-   | \n+   |\n \n error: manual implementation of `split_once`\n   --> $DIR/manual_split_once.rs:142:13\n@@ -202,12 +202,12 @@ help: remove the `iter` usages\n    |\n LL -     let a = iter.next().unwrap();\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let b = iter.next().unwrap();\n LL +     \n-   | \n+   |\n \n error: aborting due to 19 previous errors\n "}, {"sha": "4b2630d6858479b2bafe70e637f53f3ff18ef638", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -12,14 +12,12 @@ LL | |         .flatten();\n    | |__________________^\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n-help: try replacing `map` with `and_then`\n+help: try replacing `map` with `and_then` and remove the `.flatten()`\n    |\n LL ~         .and_then(|x| {\n LL +             if x <= 5 {\n LL +                 Some(x)\n-   |\n-help: and remove the `.flatten()`\n-   |\n+LL +             } else {\n LL +                 None\n LL +             }\n LL ~         });\n@@ -38,14 +36,12 @@ LL | |         })\n LL | |         .flatten();\n    | |__________________^\n    |\n-help: try replacing `map` with `and_then`\n+help: try replacing `map` with `and_then` and remove the `.flatten()`\n    |\n LL ~         .and_then(|x| {\n LL +             if x == 1 {\n LL +                 Ok(x)\n-   |\n-help: and remove the `.flatten()`\n-   |\n+LL +             } else {\n LL +                 Err(0)\n LL +             }\n LL ~         });\n@@ -64,14 +60,13 @@ LL | |         })\n LL | |         .flatten();\n    | |__________________^\n    |\n-help: try replacing `map` with `and_then`\n+help: try replacing `map` with `and_then` and remove the `.flatten()`\n    |\n LL ~         .and_then(|res| {\n LL +             if res > 0 {\n LL +                 do_something();\n-   |\n-help: and remove the `.flatten()`\n-   |\n+LL +                 Ok(res)\n+LL +             } else {\n LL +                 Err(0)\n LL +             }\n LL ~         });\n@@ -90,14 +85,12 @@ LL | |         })\n LL | |         .flatten()\n    | |__________________^\n    |\n-help: try replacing `map` with `filter_map`\n+help: try replacing `map` with `filter_map` and remove the `.flatten()`\n    |\n LL ~         .filter_map(|some_value| {\n LL +             if some_value > 3 {\n LL +                 Some(some_value)\n-   |\n-help: and remove the `.flatten()`\n-   |\n+LL +             } else {\n LL +                 None\n LL +             }\n LL +         })"}, {"sha": "e9b41354c58fa50599e93f2b39a5dc015f61646d", "filename": "tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.fixed?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -59,8 +59,6 @@ fn issue8878() {\n         .and_then(|_| {\n // we need some newlines\n // so that the span is big enough\n-// we need some newlines\n-// so that the span is big enough\n // for a splitted output of the diagnostic\n             Some(\"\")\n  // whitespace beforehand is important as well"}, {"sha": "f3b82ad08d0fc3c61c31cb53e46c035c06789440", "filename": "tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -2,79 +2,45 @@ error: called `map(..).flatten()` on `Iterator`\n   --> $DIR/map_flatten_fixable.rs:18:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n-help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id).collect();\n-   |                                               ~~~~~~~~~~~~~~~~~~~~~\n \n error: called `map(..).flatten()` on `Iterator`\n   --> $DIR/map_flatten_fixable.rs:19:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_ref).collect();\n-   |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on `Iterator`\n   --> $DIR/map_flatten_fixable.rs:20:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_closure).collect();\n-   |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on `Iterator`\n   --> $DIR/map_flatten_fixable.rs:21:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(|x| x.checked_add(1)).collect();\n-   |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on `Iterator`\n   --> $DIR/map_flatten_fixable.rs:24:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try replacing `map` with `flat_map`, and remove the `.flatten()`\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();\n-   |                                               ~~~~~~~~~~~~~~~~~~\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `flat_map` and remove the `.flatten()`: `flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on `Option`\n   --> $DIR/map_flatten_fixable.rs:27:40\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n-   |                                        ^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try replacing `map` with `and_then`, and remove the `.flatten()`\n-   |\n-LL |     let _: Option<_> = (Some(Some(1))).and_then(|x| x);\n-   |                                        ~~~~~~~~~~~~~~~\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Result`\n   --> $DIR/map_flatten_fixable.rs:30:42\n    |\n LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n-   |                                          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try replacing `map` with `and_then`, and remove the `.flatten()`\n-   |\n-LL |     let _: Result<_, &str> = (Ok(Ok(1))).and_then(|x| x);\n-   |                                          ~~~~~~~~~~~~~~~\n+   |                                          ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Option`\n   --> $DIR/map_flatten_fixable.rs:59:10\n@@ -89,14 +55,12 @@ LL | |         })\n LL | |         .flatten();\n    | |__________________^\n    |\n-help: try replacing `map` with `and_then`\n+help: try replacing `map` with `and_then` and remove the `.flatten()`\n    |\n LL ~         .and_then(|_| {\n LL + // we need some newlines\n LL + // so that the span is big enough\n-   |\n-help: and remove the `.flatten()`\n-   |\n+LL + // for a splitted output of the diagnostic\n LL +             Some(\"\")\n LL +  // whitespace beforehand is important as well\n LL ~         });"}, {"sha": "abc9c1ece327aaec9831d88941c4cd05c6ea9ae7", "filename": "tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -12,7 +12,7 @@ help: use `map_or(<a>, <f>)` instead\n    |\n LL -     let _ = opt.map(|x| x + 1)\n LL +     let _ = opt.map_or(0, |x| x + 1);\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:20:13\n@@ -59,7 +59,7 @@ help: use `and_then(<f>)` instead\n    |\n LL -     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n LL +     let _ = opt.and_then(|x| Some(x + 1));\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n   --> $DIR/map_unwrap_or.rs:31:13\n@@ -92,7 +92,7 @@ help: use `and_then(<f>)` instead\n    |\n LL -         .map(|x| Some(x + 1))\n LL +         .and_then(|x| Some(x + 1));\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:46:13\n@@ -104,7 +104,7 @@ help: use `map_or(<a>, <f>)` instead\n    |\n LL -     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n LL +     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:50:13"}, {"sha": "7893ff31a6fdb790c7b358471afd470e6ea13828", "filename": "tests/ui/needless_for_each_unfixable.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fneedless_for_each_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fneedless_for_each_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_unfixable.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -19,7 +19,8 @@ LL +             return;\n LL +         } else {\n LL +             println!(\"{}\", v);\n LL +         }\n- ...\n+LL +     }\n+   |\n help: ...and replace `return` with `continue`\n    |\n LL |             continue;"}, {"sha": "313cdbbeba183c3222fec8dd7848e48b27bb511b", "filename": "tests/ui/needless_late_init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -164,7 +164,7 @@ help: remove the assignments from the `match` arms\n    |\n LL -         1 => f = \"three\",\n LL +         1 => \"three\",\n-   | \n+   |\n \n error: unneeded late initialization\n   --> $DIR/needless_late_init.rs:76:5\n@@ -180,7 +180,7 @@ help: remove the assignments from the branches\n    |\n LL -         g = 5;\n LL +         5\n-   | \n+   |\n help: add a semicolon after the `if` expression\n    |\n LL |     };"}, {"sha": "212a69ab94e6506d0aace70d6dee93b26aa205a3", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -117,7 +117,8 @@ LL +             Self::new()\n LL +         }\n LL +     }\n LL + \n- ...\n+LL ~     impl<T> Foo<T> {\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "123aed40251e2a639a63a6b630fc6a084944e02c", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -185,8 +185,7 @@ mod issue8239 {\n             .reduce(|mut acc, f| {\n                 acc.push_str(&f);\n                 acc\n-            })\n-            .unwrap_or_default();\n+            }).unwrap_or_default();\n     }\n \n     fn more_to_max_suggestion_highest_lines_1() {\n@@ -198,8 +197,7 @@ mod issue8239 {\n                 let _ = \"\";\n                 acc.push_str(&f);\n                 acc\n-            })\n-            .unwrap_or_default();\n+            }).unwrap_or_default();\n     }\n \n     fn equal_to_max_suggestion_highest_lines() {"}, {"sha": "dfe15654bc32c05db6992bfde425b6ba40915883", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -109,16 +109,50 @@ LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:189:14\n+  --> $DIR/or_fun_call.rs:182:9\n+   |\n+LL | /         frames\n+LL | |             .iter()\n+LL | |             .map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+...  |\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         frames\n+LL +             .iter()\n+LL +             .map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n    |\n-LL |             .unwrap_or(String::new());\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:202:14\n+  --> $DIR/or_fun_call.rs:195:9\n+   |\n+LL | /         iter.map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+LL | |                 let _ = \"\";\n+LL | |                 let _ = \"\";\n+...  |\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         iter.map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 let _ = \"\";\n+LL +                 let _ = \"\";\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n    |\n-LL |             .unwrap_or(String::new());\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n   --> $DIR/or_fun_call.rs:208:9"}, {"sha": "72aae0756033a5593826f90b900296a292a2d0df", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -9,7 +9,7 @@ help: try this\n    |\n LL -     print!(\"Hello {}\", \"world\");\n LL +     print!(\"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:26:36\n@@ -21,7 +21,7 @@ help: try this\n    |\n LL -     println!(\"Hello {} {}\", world, \"world\");\n LL +     println!(\"Hello {} world\", world);\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:27:26\n@@ -33,7 +33,7 @@ help: try this\n    |\n LL -     println!(\"Hello {}\", \"world\");\n LL +     println!(\"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:25\n@@ -45,7 +45,7 @@ help: try this\n    |\n LL -     println!(\"{0} {1}\", \"hello\", \"world\");\n LL +     println!(\"hello {1}\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:34\n@@ -57,7 +57,7 @@ help: try this\n    |\n LL -     println!(\"{0} {1}\", \"hello\", \"world\");\n LL +     println!(\"{0} world\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:33:25\n@@ -69,7 +69,7 @@ help: try this\n    |\n LL -     println!(\"{1} {0}\", \"hello\", \"world\");\n LL +     println!(\"{1} hello\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:33:34\n@@ -81,7 +81,7 @@ help: try this\n    |\n LL -     println!(\"{1} {0}\", \"hello\", \"world\");\n LL +     println!(\"world {0}\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:36:29\n@@ -93,7 +93,7 @@ help: try this\n    |\n LL -     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"hello {bar}\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:36:44\n@@ -105,7 +105,7 @@ help: try this\n    |\n LL -     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"{foo} world\", foo = \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:37:29\n@@ -117,7 +117,7 @@ help: try this\n    |\n LL -     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"{bar} hello\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:37:44\n@@ -129,7 +129,7 @@ help: try this\n    |\n LL -     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"world {foo}\", foo = \"hello\");\n-   | \n+   |\n \n error: aborting due to 11 previous errors\n "}, {"sha": "edbaa1cdf979fb0bc3f0f7a226cd555c70f10b97", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -9,7 +9,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"Hello/n\");\n LL +     println!(\"Hello\");\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:9:5\n@@ -21,7 +21,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"Hello {}/n\", \"world\");\n LL +     println!(\"Hello {}\", \"world\");\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:10:5\n@@ -33,7 +33,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"Hello {} {}/n\", \"world\", \"#2\");\n LL +     println!(\"Hello {} {}\", \"world\", \"#2\");\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:11:5\n@@ -45,7 +45,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"{}/n\", 1265);\n LL +     println!(\"{}\", 1265);\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:12:5\n@@ -57,7 +57,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"/n\");\n LL +     println!();\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:31:5\n@@ -69,7 +69,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"//n\"); // should fail\n LL +     println!(\"/\"); // should fail\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:38:5\n@@ -111,7 +111,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"/r/n\"); //~ ERROR\n LL +     println!(\"/r\"); //~ ERROR\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:51:5\n@@ -123,7 +123,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"foo/rbar/n\") // ~ ERROR\n LL +     println!(\"foo/rbar\") // ~ ERROR\n-   | \n+   |\n \n error: aborting due to 10 previous errors\n "}, {"sha": "d64b5f454a5aa985f2d966e153befb4cb9d07e8d", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -56,7 +56,8 @@ LL |     let f = e.clone(); // OK\n LL |     let g = x;\n LL ~     let h = g.to_owned();\n LL |     let i = (e).clone();\n- ...\n+LL ~     x.to_owned()\n+   |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n   --> $DIR/ptr_arg.rs:58:18"}, {"sha": "88ea6bce25b6bb0249aeb7379bae80b14195ce36", "filename": "tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -311,7 +311,9 @@ LL +         _ => mutex2.lock().unwrap(),\n LL +     }\n LL +     .s\n LL +     .len()\n- ...\n+LL +         > 1;\n+LL ~     match value\n+   |\n \n error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n   --> $DIR/significant_drop_in_scrutinee.rs:410:11\n@@ -341,7 +343,10 @@ LL +     } else {\n LL +         mutex2.lock().unwrap()\n LL +     }\n LL +     .s\n- ...\n+LL +     .len()\n+LL +         > 1;\n+LL ~     match value\n+   |\n \n error: temporary with significant `Drop` in `match` scrutinee will live until the end of the `match` expression\n   --> $DIR/significant_drop_in_scrutinee.rs:464:11"}, {"sha": "11cfe66a30e850975c859a3822d2f8c34efa7ad3", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -137,7 +137,13 @@ LL +         foo(1);\n LL +     };\n LL +     {\n LL +         foo(2);\n- ...\n+LL +         foo(3);\n+LL +     };\n+LL +     taking_multiple_units(\n+LL +         (),\n+LL +         (),\n+LL ~     );\n+   |\n \n error: passing a unit value to a function\n   --> $DIR/unit_arg.rs:85:13"}, {"sha": "8f151e620a25eb9c6059e6256789679df83349d5", "filename": "tests/ui/unnecessary_iter_cloned.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funnecessary_iter_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funnecessary_iter_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_iter_cloned.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -13,7 +13,7 @@ help: remove this `&`\n    |\n LL -         let other = match get_file_path(&t) {\n LL +         let other = match get_file_path(t) {\n-   | \n+   |\n \n error: unnecessary use of `copied`\n   --> $DIR/unnecessary_iter_cloned.rs:46:22\n@@ -29,7 +29,7 @@ help: remove this `&`\n    |\n LL -         let other = match get_file_path(&t) {\n LL +         let other = match get_file_path(t) {\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "243b4599dba427ccc2c657014b473aef7a4ed750", "filename": "tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -489,7 +489,7 @@ help: remove this `&`\n    |\n LL -         let path = match get_file_path(&t) {\n LL +         let path = match get_file_path(t) {\n-   | \n+   |\n \n error: unnecessary use of `to_vec`\n   --> $DIR/unnecessary_to_owned.rs:221:14"}, {"sha": "a6a0b22cf689fffdda4211c7dd0643cca561edbe", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -23,7 +23,8 @@ LL |     if a {\n LL |         Some(-1);\n LL ~         2\n LL |     } else {\n- ...\n+LL ~         return 1337;\n+   |\n \n error: this function's return value is unnecessarily wrapped by `Option`\n   --> $DIR/unnecessary_wraps.rs:21:1\n@@ -122,7 +123,8 @@ LL |     if a {\n LL |         Some(());\n LL ~         \n LL |     } else {\n- ...\n+LL ~         return ;\n+   |\n \n error: this function's return value is unnecessary\n   --> $DIR/unnecessary_wraps.rs:117:1"}, {"sha": "3c5ec91d3e0fb8f3a6459b0cbfe2acd1d0c859a3", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -9,7 +9,7 @@ help: try this\n    |\n LL -     write!(v, \"Hello {}\", \"world\");\n LL +     write!(v, \"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:31:39\n@@ -21,7 +21,7 @@ help: try this\n    |\n LL -     writeln!(v, \"Hello {} {}\", world, \"world\");\n LL +     writeln!(v, \"Hello {} world\", world);\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:32:29\n@@ -33,7 +33,7 @@ help: try this\n    |\n LL -     writeln!(v, \"Hello {}\", \"world\");\n LL +     writeln!(v, \"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:28\n@@ -45,7 +45,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{0} {1}\", \"hello\", \"world\");\n LL +     writeln!(v, \"hello {1}\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:37\n@@ -57,7 +57,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{0} {1}\", \"hello\", \"world\");\n LL +     writeln!(v, \"{0} world\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:38:28\n@@ -69,7 +69,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n LL +     writeln!(v, \"{1} hello\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:38:37\n@@ -81,7 +81,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n LL +     writeln!(v, \"world {0}\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:41:32\n@@ -93,7 +93,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"hello {bar}\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:41:47\n@@ -105,7 +105,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"{foo} world\", foo = \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:42:32\n@@ -117,7 +117,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"{bar} hello\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:42:47\n@@ -129,7 +129,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"world {foo}\", foo = \"hello\");\n-   | \n+   |\n \n error: aborting due to 11 previous errors\n "}, {"sha": "9ff297069c402c3876e0678e4498919571d0f821", "filename": "tests/ui/write_literal_2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fwrite_literal_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fwrite_literal_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal_2.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -9,7 +9,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{}\", \"{hello}\");\n LL +     writeln!(v, \"{{hello}}\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:10:24\n@@ -21,7 +21,7 @@ help: try this\n    |\n LL -     writeln!(v, r\"{}\", r\"{hello}\");\n LL +     writeln!(v, r\"{{hello}}\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:11:23\n@@ -33,7 +33,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{}\", '/'');\n LL +     writeln!(v, \"'\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:12:23\n@@ -45,7 +45,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{}\", '\"');\n LL +     writeln!(v, \"/\"\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:14:24\n@@ -57,7 +57,7 @@ help: try this\n    |\n LL -     writeln!(v, r\"{}\", '/'');\n LL +     writeln!(v, r\"'\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:18:9"}, {"sha": "5f55431be0bd99a0abe28999aff27b3c668d1022", "filename": "tests/ui/write_with_newline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb0f7636851f9fcc57085cf80197a2ef6db098f/tests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.stderr?ref=0cb0f7636851f9fcc57085cf80197a2ef6db098f", "patch": "@@ -9,7 +9,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"Hello/n\");\n LL +     writeln!(v, \"Hello\");\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:14:5\n@@ -21,7 +21,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"Hello {}/n\", \"world\");\n LL +     writeln!(v, \"Hello {}\", \"world\");\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:15:5\n@@ -33,7 +33,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"Hello {} {}/n\", \"world\", \"#2\");\n LL +     writeln!(v, \"Hello {} {}\", \"world\", \"#2\");\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:16:5\n@@ -45,7 +45,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"{}/n\", 1265);\n LL +     writeln!(v, \"{}\", 1265);\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:17:5\n@@ -57,7 +57,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"/n\");\n LL +     writeln!(v);\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:36:5\n@@ -69,7 +69,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"//n\"); // should fail\n LL +     writeln!(v, \"/\"); // should fail\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:43:5\n@@ -115,7 +115,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"/r/n\"); //~ ERROR\n LL +     writeln!(v, \"/r\"); //~ ERROR\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:58:5\n@@ -127,7 +127,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"foo/rbar/n\");\n LL +     writeln!(v, \"foo/rbar\");\n-   | \n+   |\n \n error: aborting due to 10 previous errors\n "}]}