{"sha": "ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d", "node_id": "C_kwDOAAsO6NoAKGFjMGI2YWYzN2JjNmQ4ZWQ2ZjQ0NjhhOGMzZmVhYjMxZWJiOWUxNWQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-22T18:52:49Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-23T11:55:43Z"}, "message": "Permit negative impls coherence to take advantage of implied bounds", "tree": {"sha": "8a60e1480c599ec3e68930161166f3d17f793d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a60e1480c599ec3e68930161166f3d17f793d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMEwD8ACgkQgTGiTgx5\n76+9iA/8CbYjdWDhidcLcTS7KRYq4NwrPnY4dKlYFibcWv62BMFR92C5QhviA55g\n3my8d8s/w5+XKnrXbFpBawqr9BvNzLkCVqkhU8ZBG93Jmn3x0C2ME3inpyFjhSVx\n40frU6oF6QvmyF7XUfPPHd2hn729vZcLlQu8nhfB4uhTZYgBnmjktlVgUDmJ8UIF\nd8XS2Jryglslnk/FNJyJZG9xjrLb4SCtMO1aUkU8hCqopX78fPARPxj8PBGU6Z2Z\nomfrRoYaQTSc8r+7vmoVIL3LJBnEhNbxSc+ZfSPR7nZTwmtJ8n93Yffu37aKmdFS\nYlaIL+BbBPKSTtCvhNs1wz4ta8y8wH0P3tmER4r2tAjMbuUA/HZFkVwOG8kZy28A\nSk24SPEnsMYf9PGLuWp9EU7Yk2WL6PUnQ9oOhEDdt2Ff5UO6n+sfkBDjQJmDNzTb\nfznexnFVOy5uNprvHNCpJVmNyZe5ttigIrYFHMwTpLctFD1GXadpUguEcxIJPSmY\nOoHbaqWv3FEaLipZmMIOEQOPIGpSJKQfzpcnUai3FlaOOMpBUp88XVUnvQ/J6/si\nvBBjvj16LDQg2+U6x5ELLnHf+JxS45N7ID4lEfFqkTjr3iH/0ag/CMa8eKmTwwvG\nM1m4vcz60oBCtyzC5D4lg68ooMlnz8y0+KCp9oaq3yv3Y7sROII=\n=Aulo\n-----END PGP SIGNATURE-----", "payload": "tree 8a60e1480c599ec3e68930161166f3d17f793d28\nparent 5ff45dc89efdaabe903e5bff4dc1c170def7b325\nauthor Santiago Pastorino <spastorino@gmail.com> 1661194369 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1661255743 -0300\n\nPermit negative impls coherence to take advantage of implied bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d", "html_url": "https://github.com/rust-lang/rust/commit/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff45dc89efdaabe903e5bff4dc1c170def7b325", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff45dc89efdaabe903e5bff4dc1c170def7b325", "html_url": "https://github.com/rust-lang/rust/commit/5ff45dc89efdaabe903e5bff4dc1c170def7b325"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "fb2440ef4577401f238af965046132209e8519f1", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d", "patch": "@@ -6,12 +6,13 @@\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{CombinedSnapshot, InferOk};\n+use crate::traits::outlives_bounds::InferCtxtExt as _;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n-    self, Normalized, Obligation, ObligationCause, PredicateObligation, PredicateObligations,\n-    SelectionContext,\n+    self, Normalized, Obligation, ObligationCause, ObligationCtxt, PredicateObligation,\n+    PredicateObligations, SelectionContext,\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n@@ -322,7 +323,7 @@ fn negative_impl<'cx, 'tcx>(\n         let (subject2, obligations) =\n             impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n \n-        !equate(&infcx, impl_env, subject1, subject2, obligations)\n+        !equate(&infcx, impl_env, subject1, subject2, obligations, impl1_def_id)\n     })\n }\n \n@@ -332,6 +333,7 @@ fn equate<'cx, 'tcx>(\n     subject1: ImplSubject<'tcx>,\n     subject2: ImplSubject<'tcx>,\n     obligations: impl Iterator<Item = PredicateObligation<'tcx>>,\n+    body_def_id: DefId,\n ) -> bool {\n     // do the impls unify? If not, not disjoint.\n     let Ok(InferOk { obligations: more_obligations, .. }) =\n@@ -342,8 +344,10 @@ fn equate<'cx, 'tcx>(\n     };\n \n     let selcx = &mut SelectionContext::new(&infcx);\n-    let opt_failing_obligation =\n-        obligations.into_iter().chain(more_obligations).find(|o| negative_impl_exists(selcx, o));\n+    let opt_failing_obligation = obligations\n+        .into_iter()\n+        .chain(more_obligations)\n+        .find(|o| negative_impl_exists(selcx, o, body_def_id));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -358,14 +362,15 @@ fn equate<'cx, 'tcx>(\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n     o: &PredicateObligation<'tcx>,\n+    body_def_id: DefId,\n ) -> bool {\n-    if resolve_negative_obligation(selcx.infcx().fork(), o) {\n+    if resolve_negative_obligation(selcx.infcx().fork(), o, body_def_id) {\n         return true;\n     }\n \n     // Try to prove a negative obligation exists for super predicates\n     for o in util::elaborate_predicates(selcx.tcx(), iter::once(o.predicate)) {\n-        if resolve_negative_obligation(selcx.infcx().fork(), &o) {\n+        if resolve_negative_obligation(selcx.infcx().fork(), &o, body_def_id) {\n             return true;\n         }\n     }\n@@ -377,6 +382,7 @@ fn negative_impl_exists<'cx, 'tcx>(\n fn resolve_negative_obligation<'cx, 'tcx>(\n     infcx: InferCtxt<'cx, 'tcx>,\n     o: &PredicateObligation<'tcx>,\n+    body_def_id: DefId,\n ) -> bool {\n     let tcx = infcx.tcx;\n \n@@ -390,7 +396,19 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n         return false;\n     }\n \n-    let outlives_env = OutlivesEnvironment::new(param_env);\n+    let outlives_env = if let Some(body_def_id) = body_def_id.as_local() {\n+        let body_id = tcx.hir().local_def_id_to_hir_id(body_def_id);\n+        let ocx = ObligationCtxt::new(&infcx);\n+        let wf_tys = ocx.assumed_wf_types(param_env, DUMMY_SP, body_def_id);\n+        OutlivesEnvironment::with_bounds(\n+            param_env,\n+            Some(&infcx),\n+            infcx.implied_bounds_tys(param_env, body_id, wf_tys),\n+        )\n+    } else {\n+        OutlivesEnvironment::new(param_env)\n+    };\n+\n     infcx.process_registered_region_obligations(outlives_env.region_bound_pairs(), param_env);\n \n     infcx.resolve_regions(&outlives_env).is_empty()"}, {"sha": "3acf0d8d39ab96e97126c43eb537afd9bc218ad3", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs?ref=ac0b6af37bc6d8ed6f4468a8c3feab31ebb9e15d", "patch": "@@ -1,9 +1,9 @@\n // revisions: stock with_negative_coherence\n+//[with_negative_coherence] check-pass\n+\n #![feature(negative_impls)]\n #![cfg_attr(with_negative_coherence, feature(with_negative_coherence))]\n \n-// FIXME: this should compile\n-\n trait MyPredicate<'a> {}\n \n impl<'a, T> !MyPredicate<'a> for &'a T where T: 'a {}\n@@ -12,6 +12,6 @@ trait MyTrait<'a> {}\n \n impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n impl<'a, T> MyTrait<'a> for &'a T {}\n-//~^ ERROR: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n+//[stock]~^ ERROR: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n \n fn main() {}"}, {"sha": "097cc4e0fe3e67ef63d66d392917c57087fbb2c1", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ff45dc89efdaabe903e5bff4dc1c170def7b325/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ff45dc89efdaabe903e5bff4dc1c170def7b325/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr?ref=5ff45dc89efdaabe903e5bff4dc1c170def7b325", "patch": "@@ -1,11 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n-  --> $DIR/coherence-negative-outlives-lifetimes.rs:14:1\n-   |\n-LL | impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n-   | ---------------------------------------------- first implementation here\n-LL | impl<'a, T> MyTrait<'a> for &'a T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}]}