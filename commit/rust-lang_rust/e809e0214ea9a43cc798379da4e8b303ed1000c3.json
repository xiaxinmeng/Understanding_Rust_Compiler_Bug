{"sha": "e809e0214ea9a43cc798379da4e8b303ed1000c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDllMDIxNGVhOWE0M2NjNzk4Mzc5ZGE0ZThiMzAzZWQxMDAwYzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-29T16:32:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-12T19:26:52Z"}, "message": "ast: `Mac`/`Macro` -> `MacCall`", "tree": {"sha": "f3e4b50941dc93a3de6d5a491a4f5dc335585690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3e4b50941dc93a3de6d5a491a4f5dc335585690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e809e0214ea9a43cc798379da4e8b303ed1000c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e809e0214ea9a43cc798379da4e8b303ed1000c3", "html_url": "https://github.com/rust-lang/rust/commit/e809e0214ea9a43cc798379da4e8b303ed1000c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e809e0214ea9a43cc798379da4e8b303ed1000c3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/23de8275c9b5e5812dc54a12bdba6d80870d9dc8", "html_url": "https://github.com/rust-lang/rust/commit/23de8275c9b5e5812dc54a12bdba6d80870d9dc8"}], "stats": {"total": 397, "additions": 200, "deletions": 197}, "files": [{"sha": "6b2daa671cdc0214bfd20d3638a1b8ee30f2b16e", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -14,7 +14,7 @@\n //! - [`Generics`], [`GenericParam`], [`WhereClause`]: Metadata associated with generic parameters.\n //! - [`EnumDef`] and [`Variant`]: Enum declaration.\n //! - [`Lit`] and [`LitKind`]: Literal expressions.\n-//! - [`MacroDef`], [`MacStmtStyle`], [`Mac`], [`MacDelimeter`]: Macro definition and invocation.\n+//! - [`MacroDef`], [`MacStmtStyle`], [`MacCall`], [`MacDelimeter`]: Macro definition and invocation.\n //! - [`Attribute`]: Metadata associated with item.\n //! - [`UnOp`], [`UnOpKind`], [`BinOp`], [`BinOpKind`]: Unary and binary operators.\n \n@@ -513,7 +513,7 @@ impl Pat {\n                 TyKind::Path(None, Path::from_ident(*ident))\n             }\n             PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n-            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            PatKind::MacCall(mac) => TyKind::MacCall(mac.clone()),\n             // `&mut? P` can be reinterpreted as `&mut? T` where `T` is `P` reparsed as a type.\n             PatKind::Ref(pat, mutbl) => {\n                 pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?\n@@ -567,7 +567,7 @@ impl Pat {\n             | PatKind::Range(..)\n             | PatKind::Ident(..)\n             | PatKind::Path(..)\n-            | PatKind::Mac(_) => {}\n+            | PatKind::MacCall(_) => {}\n         }\n     }\n \n@@ -682,7 +682,7 @@ pub enum PatKind {\n     Paren(P<Pat>),\n \n     /// A macro pattern; pre-expansion.\n-    Mac(Mac),\n+    MacCall(MacCall),\n }\n \n #[derive(\n@@ -881,9 +881,9 @@ impl Stmt {\n     pub fn add_trailing_semicolon(mut self) -> Self {\n         self.kind = match self.kind {\n             StmtKind::Expr(expr) => StmtKind::Semi(expr),\n-            StmtKind::Mac(mac) => {\n-                StmtKind::Mac(mac.map(|(mac, _style, attrs)| (mac, MacStmtStyle::Semicolon, attrs)))\n-            }\n+            StmtKind::MacCall(mac) => StmtKind::MacCall(\n+                mac.map(|(mac, _style, attrs)| (mac, MacStmtStyle::Semicolon, attrs)),\n+            ),\n             kind => kind,\n         };\n         self\n@@ -917,7 +917,7 @@ pub enum StmtKind {\n     /// Just a trailing semi-colon.\n     Empty,\n     /// Macro.\n-    Mac(P<(Mac, MacStmtStyle, AttrVec)>),\n+    MacCall(P<(MacCall, MacStmtStyle, AttrVec)>),\n }\n \n #[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n@@ -1057,7 +1057,7 @@ impl Expr {\n         let kind = match &self.kind {\n             // Trivial conversions.\n             ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n-            ExprKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            ExprKind::MacCall(mac) => TyKind::MacCall(mac.clone()),\n \n             ExprKind::Paren(expr) => expr.to_ty().map(TyKind::Paren)?,\n \n@@ -1127,7 +1127,7 @@ impl Expr {\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n             ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n-            ExprKind::Mac(..) => ExprPrecedence::Mac,\n+            ExprKind::MacCall(..) => ExprPrecedence::Mac,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Paren(..) => ExprPrecedence::Paren,\n@@ -1259,7 +1259,7 @@ pub enum ExprKind {\n     InlineAsm(P<InlineAsm>),\n \n     /// A macro invocation; pre-expansion.\n-    Mac(Mac),\n+    MacCall(MacCall),\n \n     /// A struct literal expression.\n     ///\n@@ -1345,13 +1345,13 @@ pub enum Movability {\n /// Represents a macro invocation. The `path` indicates which macro\n /// is being invoked, and the `args` are arguments passed to it.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Mac {\n+pub struct MacCall {\n     pub path: Path,\n     pub args: P<MacArgs>,\n     pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n-impl Mac {\n+impl MacCall {\n     pub fn span(&self) -> Span {\n         self.path.span.to(self.args.span().unwrap_or(self.path.span))\n     }\n@@ -1881,7 +1881,7 @@ pub enum TyKind {\n     /// Inferred type of a `self` or `&self` argument in a method.\n     ImplicitSelf,\n     /// A macro in the type position.\n-    Mac(Mac),\n+    MacCall(MacCall),\n     /// Placeholder for a kind that has failed to be defined.\n     Err,\n     /// Placeholder for a `va_list`.\n@@ -2574,7 +2574,7 @@ pub enum ItemKind {\n     /// A macro invocation.\n     ///\n     /// E.g., `foo!(..)`.\n-    Mac(Mac),\n+    MacCall(MacCall),\n \n     /// A macro definition.\n     MacroDef(MacroDef),\n@@ -2586,7 +2586,7 @@ impl ItemKind {\n         match self {\n             Use(..) | Static(..) | Const(..) | Fn(..) | Mod(..) | GlobalAsm(..) | TyAlias(..)\n             | Struct(..) | Union(..) | Trait(..) | TraitAlias(..) | MacroDef(..) => \"a\",\n-            ExternCrate(..) | ForeignMod(..) | Mac(..) | Enum(..) | Impl { .. } => \"an\",\n+            ExternCrate(..) | ForeignMod(..) | MacCall(..) | Enum(..) | Impl { .. } => \"an\",\n         }\n     }\n \n@@ -2606,7 +2606,7 @@ impl ItemKind {\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Mac(..) => \"item macro invocation\",\n+            ItemKind::MacCall(..) => \"item macro invocation\",\n             ItemKind::MacroDef(..) => \"macro definition\",\n             ItemKind::Impl { .. } => \"implementation\",\n         }\n@@ -2648,14 +2648,14 @@ pub enum AssocItemKind {\n     /// An associated type.\n     TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n     /// A macro expanding to associated items.\n-    Macro(Mac),\n+    MacCall(MacCall),\n }\n \n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n             Self::Const(def, ..) | Self::Fn(def, ..) | Self::TyAlias(def, ..) => def,\n-            Self::Macro(..) => Defaultness::Final,\n+            Self::MacCall(..) => Defaultness::Final,\n         }\n     }\n }\n@@ -2666,7 +2666,7 @@ impl From<AssocItemKind> for ItemKind {\n             AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n             AssocItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n             AssocItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n-            AssocItemKind::Macro(a) => ItemKind::Mac(a),\n+            AssocItemKind::MacCall(a) => ItemKind::MacCall(a),\n         }\n     }\n }\n@@ -2679,7 +2679,7 @@ impl TryFrom<ItemKind> for AssocItemKind {\n             ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n             ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n             ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n-            ItemKind::Mac(a) => AssocItemKind::Macro(a),\n+            ItemKind::MacCall(a) => AssocItemKind::MacCall(a),\n             _ => return Err(item_kind),\n         })\n     }\n@@ -2695,7 +2695,7 @@ pub enum ForeignItemKind {\n     /// A foreign type.\n     TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n     /// A macro expanding to foreign items.\n-    Macro(Mac),\n+    MacCall(MacCall),\n }\n \n impl From<ForeignItemKind> for ItemKind {\n@@ -2704,7 +2704,7 @@ impl From<ForeignItemKind> for ItemKind {\n             ForeignItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n             ForeignItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n             ForeignItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n-            ForeignItemKind::Macro(a) => ItemKind::Mac(a),\n+            ForeignItemKind::MacCall(a) => ItemKind::MacCall(a),\n         }\n     }\n }\n@@ -2717,7 +2717,7 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n             ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n             ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n             ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n-            ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n+            ItemKind::MacCall(a) => ForeignItemKind::MacCall(a),\n             _ => return Err(item_kind),\n         })\n     }"}, {"sha": "249311851fb1bed7d19bebd79b1a9543dad39804", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -679,7 +679,7 @@ impl HasAttrs for StmtKind {\n             StmtKind::Local(ref local) => local.attrs(),\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n             StmtKind::Empty | StmtKind::Item(..) => &[],\n-            StmtKind::Mac(ref mac) => {\n+            StmtKind::MacCall(ref mac) => {\n                 let (_, _, ref attrs) = **mac;\n                 attrs.attrs()\n             }\n@@ -691,7 +691,7 @@ impl HasAttrs for StmtKind {\n             StmtKind::Local(local) => local.visit_attrs(f),\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr.visit_attrs(f),\n             StmtKind::Empty | StmtKind::Item(..) => {}\n-            StmtKind::Mac(mac) => {\n+            StmtKind::MacCall(mac) => {\n                 let (_mac, _style, attrs) = mac.deref_mut();\n                 attrs.visit_attrs(f);\n             }"}, {"sha": "a1a5b9debc50d89a16f54424a231f8d64dae8cff", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -202,7 +202,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_local(l, self);\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut Mac) {\n+    fn visit_mac(&mut self, _mac: &mut MacCall) {\n         panic!(\"visit_mac disabled by default\");\n         // N.B., see note about macros above. If you really want a visitor that\n         // works on macros, use this definition in your trait impl:\n@@ -482,7 +482,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_id(id);\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n-        TyKind::Mac(mac) => vis.visit_mac(mac),\n+        TyKind::MacCall(mac) => vis.visit_mac(mac),\n     }\n     vis.visit_span(span);\n }\n@@ -584,8 +584,8 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_mac<T: MutVisitor>(mac: &mut Mac, vis: &mut T) {\n-    let Mac { path, args, prior_type_ascription: _ } = mac;\n+pub fn noop_visit_mac<T: MutVisitor>(mac: &mut MacCall, vis: &mut T) {\n+    let MacCall { path, args, prior_type_ascription: _ } = mac;\n     vis.visit_path(path);\n     visit_mac_args(args, vis);\n }\n@@ -926,7 +926,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n         }\n-        ItemKind::Mac(m) => vis.visit_mac(m),\n+        ItemKind::MacCall(m) => vis.visit_mac(m),\n         ItemKind::MacroDef(def) => vis.visit_macro_def(def),\n     }\n }\n@@ -955,7 +955,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        AssocItemKind::Macro(mac) => visitor.visit_mac(mac),\n+        AssocItemKind::MacCall(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);\n     smallvec![item]\n@@ -1043,7 +1043,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        ForeignItemKind::Macro(mac) => visitor.visit_mac(mac),\n+        ForeignItemKind::MacCall(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);\n     smallvec![item]\n@@ -1082,7 +1082,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n             visit_vec(elems, |elem| vis.visit_pat(elem))\n         }\n         PatKind::Paren(inner) => vis.visit_pat(inner),\n-        PatKind::Mac(mac) => vis.visit_mac(mac),\n+        PatKind::MacCall(mac) => vis.visit_mac(mac),\n     }\n     vis.visit_span(span);\n }\n@@ -1219,7 +1219,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n             }\n             visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));\n         }\n-        ExprKind::Mac(mac) => vis.visit_mac(mac),\n+        ExprKind::MacCall(mac) => vis.visit_mac(mac),\n         ExprKind::Struct(path, fields, expr) => {\n             vis.visit_path(path);\n             fields.flat_map_in_place(|field| vis.flat_map_field(field));\n@@ -1275,11 +1275,11 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n         StmtKind::Expr(expr) => vis.filter_map_expr(expr).into_iter().map(StmtKind::Expr).collect(),\n         StmtKind::Semi(expr) => vis.filter_map_expr(expr).into_iter().map(StmtKind::Semi).collect(),\n         StmtKind::Empty => smallvec![StmtKind::Empty],\n-        StmtKind::Mac(mut mac) => {\n+        StmtKind::MacCall(mut mac) => {\n             let (mac_, _semi, attrs) = mac.deref_mut();\n             vis.visit_mac(mac_);\n             visit_thin_attrs(attrs, vis);\n-            smallvec![StmtKind::Mac(mac)]\n+            smallvec![StmtKind::MacCall(mac)]\n         }\n     }\n }"}, {"sha": "39028b7583c63429ad90d8ef3d580d5d0473161b", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -168,7 +168,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &'ast Mac) {\n+    fn visit_mac(&mut self, _mac: &'ast MacCall) {\n         panic!(\"visit_mac disabled by default\");\n         // N.B., see note about macros above.\n         // if you really want a visitor that\n@@ -350,7 +350,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        ItemKind::Mac(ref mac) => visitor.visit_mac(mac),\n+        ItemKind::MacCall(ref mac) => visitor.visit_mac(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n@@ -418,7 +418,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n-        TyKind::Mac(ref mac) => visitor.visit_mac(mac),\n+        TyKind::MacCall(ref mac) => visitor.visit_mac(mac),\n         TyKind::Never | TyKind::CVarArgs => {}\n     }\n }\n@@ -521,7 +521,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         PatKind::Tuple(ref elems) | PatKind::Slice(ref elems) | PatKind::Or(ref elems) => {\n             walk_list!(visitor, visit_pat, elems);\n         }\n-        PatKind::Mac(ref mac) => visitor.visit_mac(mac),\n+        PatKind::MacCall(ref mac) => visitor.visit_mac(mac),\n     }\n }\n \n@@ -545,7 +545,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n         }\n-        ForeignItemKind::Macro(mac) => {\n+        ForeignItemKind::MacCall(mac) => {\n             visitor.visit_mac(mac);\n         }\n     }\n@@ -650,7 +650,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n         }\n-        AssocItemKind::Macro(mac) => {\n+        AssocItemKind::MacCall(mac) => {\n             visitor.visit_mac(mac);\n         }\n     }\n@@ -679,7 +679,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n         StmtKind::Item(ref item) => visitor.visit_item(item),\n         StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => visitor.visit_expr(expr),\n         StmtKind::Empty => {}\n-        StmtKind::Mac(ref mac) => {\n+        StmtKind::MacCall(ref mac) => {\n             let (ref mac, _, ref attrs) = **mac;\n             visitor.visit_mac(mac);\n             for attr in attrs.iter() {\n@@ -689,7 +689,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n     }\n }\n \n-pub fn walk_mac<'a, V: Visitor<'a>>(visitor: &mut V, mac: &'a Mac) {\n+pub fn walk_mac<'a, V: Visitor<'a>>(visitor: &mut V, mac: &'a MacCall) {\n     visitor.visit_path(&mac.path, DUMMY_NODE_ID);\n }\n \n@@ -811,7 +811,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::Mac(ref mac) => visitor.visit_mac(mac),\n+        ExprKind::MacCall(ref mac) => visitor.visit_mac(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::InlineAsm(ref ia) => {\n             for &(_, ref input) in &ia.inputs {"}, {"sha": "a4cbae5196635d480373b3a96c4c7125c1d933b0", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -198,7 +198,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 return self.lower_expr_for(e, pat, head, body, opt_label);\n             }\n             ExprKind::Try(ref sub_expr) => self.lower_expr_try(e.span, sub_expr),\n-            ExprKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n+            ExprKind::MacCall(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n         hir::Expr {"}, {"sha": "d17267a153c3324acc965adc362b035db4e468b8", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -426,7 +426,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n             ),\n-            ItemKind::MacroDef(..) | ItemKind::Mac(..) => {\n+            ItemKind::MacroDef(..) | ItemKind::MacCall(..) => {\n                 bug!(\"`TyMac` should have been expanded by now\")\n             }\n         }\n@@ -676,7 +676,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n-                ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n+                ForeignItemKind::MacCall(_) => panic!(\"macro shouldn't exist here\"),\n             },\n             vis: self.lower_visibility(&i.vis, None),\n             span: i.span,\n@@ -779,7 +779,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, kind)\n             }\n-            AssocItemKind::Macro(..) => bug!(\"macro item shouldn't exist at this point\"),\n+            AssocItemKind::MacCall(..) => bug!(\"macro item shouldn't exist at this point\"),\n         };\n \n         hir::TraitItem {\n@@ -801,7 +801,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(_, sig, _, default) => {\n                 (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n             }\n-            AssocItemKind::Macro(..) => unimplemented!(),\n+            AssocItemKind::MacCall(..) => unimplemented!(),\n         };\n         let id = hir::TraitItemId { hir_id: self.lower_node_id(i.id) };\n         let defaultness = hir::Defaultness::Default { has_value: has_default };\n@@ -860,7 +860,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 };\n                 (generics, kind)\n             }\n-            AssocItemKind::Macro(..) => bug!(\"`TyMac` should have been expanded by now\"),\n+            AssocItemKind::MacCall(..) => bug!(\"`TyMac` should have been expanded by now\"),\n         };\n \n         hir::ImplItem {\n@@ -895,7 +895,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 AssocItemKind::Fn(_, sig, ..) => {\n                     hir::AssocItemKind::Method { has_self: sig.decl.has_self() }\n                 }\n-                AssocItemKind::Macro(..) => unimplemented!(),\n+                AssocItemKind::MacCall(..) => unimplemented!(),\n             },\n         }\n "}, {"sha": "24e547af237d56b0b946aa28c5bfa1ba18496c59", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -1334,7 +1334,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                 }\n             }\n-            TyKind::Mac(_) => bug!(\"`TyKind::Mac` should have been expanded by now\"),\n+            TyKind::MacCall(_) => bug!(\"`TyKind::MacCall` should have been expanded by now\"),\n             TyKind::CVarArgs => {\n                 self.sess.delay_span_bug(\n                     t.span,\n@@ -2282,7 +2282,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             StmtKind::Expr(ref e) => hir::StmtKind::Expr(self.lower_expr(e)),\n             StmtKind::Semi(ref e) => hir::StmtKind::Semi(self.lower_expr(e)),\n             StmtKind::Empty => return smallvec![],\n-            StmtKind::Mac(..) => panic!(\"shouldn't exist here\"),\n+            StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n         };\n         smallvec![hir::Stmt { hir_id: self.lower_node_id(s.id), kind, span: s.span }]\n     }"}, {"sha": "8ba6576f6926598a16e2b2b413a9f0f9ed34151b", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.ban_illegal_rest_pat(p.span)\n             }\n             PatKind::Paren(ref inner) => return self.lower_pat(inner),\n-            PatKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n+            PatKind::MacCall(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n         self.pat_with_node_id_of(p, node)"}, {"sha": "d7491800f04286f66190447083b9078006cb3fbf", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -976,7 +976,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ForeignItemKind::Static(_, _, body) => {\n                 self.check_foreign_kind_bodyless(fi.ident, \"static\", body.as_ref().map(|b| b.span));\n             }\n-            ForeignItemKind::Macro(..) => {}\n+            ForeignItemKind::MacCall(..) => {}\n         }\n \n         visit::walk_foreign_item(self, fi)"}, {"sha": "4a7ebedbab0850c663c4d47c6adfab2fb3bf8a85", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -399,7 +399,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ForeignItemKind::TyAlias(..) => {\n                 gate_feature_post!(&self, extern_types, i.span, \"extern types are experimental\");\n             }\n-            ast::ForeignItemKind::Macro(..) => {}\n+            ast::ForeignItemKind::MacCall(..) => {}\n         }\n \n         visit::walk_foreign_item(self, i)"}, {"sha": "534d6c7b1ea703fe32d0b4e86bb935e0af9d1aa9", "filename": "src/librustc_ast_passes/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fnode_count.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -113,7 +113,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &Mac) {\n+    fn visit_mac(&mut self, _mac: &MacCall) {\n         self.count += 1;\n         walk_mac(self, _mac)\n     }"}, {"sha": "2366426d4dcbaa581ba0dc18df907f86cd3b1b65", "filename": "src/librustc_ast_passes/show_span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_passes%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fshow_span.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -55,7 +55,7 @@ impl<'a> Visitor<'a> for ShowSpanVisitor<'a> {\n         visit::walk_ty(self, t);\n     }\n \n-    fn visit_mac(&mut self, mac: &'a ast::Mac) {\n+    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n         visit::walk_mac(self, mac);\n     }\n }"}, {"sha": "e3f75769eef8b3c808afd3d128beea3ad892adf8", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -960,7 +960,7 @@ impl<'a> State<'a> {\n             ast::TyKind::ImplicitSelf => {\n                 self.s.word(\"Self\");\n             }\n-            ast::TyKind::Mac(ref m) => {\n+            ast::TyKind::MacCall(ref m) => {\n                 self.print_mac(m);\n             }\n             ast::TyKind::CVarArgs => {\n@@ -987,7 +987,7 @@ impl<'a> State<'a> {\n             ast::ForeignItemKind::TyAlias(def, generics, bounds, ty) => {\n                 self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n             }\n-            ast::ForeignItemKind::Macro(m) => {\n+            ast::ForeignItemKind::MacCall(m) => {\n                 self.print_mac(m);\n                 if m.args.need_semicolon() {\n                     self.s.word(\";\");\n@@ -1231,7 +1231,7 @@ impl<'a> State<'a> {\n                 self.print_where_clause(&generics.where_clause);\n                 self.s.word(\";\");\n             }\n-            ast::ItemKind::Mac(ref mac) => {\n+            ast::ItemKind::MacCall(ref mac) => {\n                 self.print_mac(mac);\n                 if mac.args.need_semicolon() {\n                     self.s.word(\";\");\n@@ -1413,7 +1413,7 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::TyAlias(def, generics, bounds, ty) => {\n                 self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n             }\n-            ast::AssocItemKind::Macro(m) => {\n+            ast::AssocItemKind::MacCall(m) => {\n                 self.print_mac(m);\n                 if m.args.need_semicolon() {\n                     self.s.word(\";\");\n@@ -1460,7 +1460,7 @@ impl<'a> State<'a> {\n                 self.space_if_not_bol();\n                 self.s.word(\";\");\n             }\n-            ast::StmtKind::Mac(ref mac) => {\n+            ast::StmtKind::MacCall(ref mac) => {\n                 let (ref mac, style, ref attrs) = **mac;\n                 self.space_if_not_bol();\n                 self.print_outer_attributes(attrs);\n@@ -1570,7 +1570,7 @@ impl<'a> State<'a> {\n         self.print_else(elseopt)\n     }\n \n-    crate fn print_mac(&mut self, m: &ast::Mac) {\n+    crate fn print_mac(&mut self, m: &ast::MacCall) {\n         self.print_mac_common(\n             Some(MacHeader::Path(&m.path)),\n             true,\n@@ -2070,7 +2070,7 @@ impl<'a> State<'a> {\n \n                 self.pclose();\n             }\n-            ast::ExprKind::Mac(ref m) => self.print_mac(m),\n+            ast::ExprKind::MacCall(ref m) => self.print_mac(m),\n             ast::ExprKind::Paren(ref e) => {\n                 self.popen();\n                 self.print_inner_attributes_inline(attrs);\n@@ -2254,7 +2254,7 @@ impl<'a> State<'a> {\n                 self.print_pat(inner);\n                 self.pclose();\n             }\n-            PatKind::Mac(ref m) => self.print_mac(m),\n+            PatKind::MacCall(ref m) => self.print_mac(m),\n         }\n         self.ann.post(self, AnnNode::Pat(pat))\n     }"}, {"sha": "3a3595b04d2876c8d882e7d19e5db826b7c6bcfa", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -40,15 +40,15 @@ pub fn expand_assert<'cx>(\n         ))\n     });\n     let args = P(MacArgs::Delimited(DelimSpan::from_single(sp), MacDelimiter::Parenthesis, tokens));\n-    let panic_call = Mac {\n+    let panic_call = MacCall {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n         args,\n         prior_type_ascription: None,\n     };\n     let if_expr = cx.expr_if(\n         sp,\n         cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)),\n-        cx.expr(sp, ExprKind::Mac(panic_call)),\n+        cx.expr(sp, ExprKind::MacCall(panic_call)),\n         None,\n     );\n     MacEager::expr(if_expr)"}, {"sha": "84ed6e96aafc8352c5af419d525b4efa3b164b27", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -360,7 +360,7 @@ fn find_type_parameters(\n             visit::walk_ty(self, ty)\n         }\n \n-        fn visit_mac(&mut self, mac: &ast::Mac) {\n+        fn visit_mac(&mut self, mac: &ast::MacCall) {\n             self.cx.span_err(mac.span(), \"`derive` cannot be used on items with type macros\");\n         }\n     }"}, {"sha": "179b013342633578d0f0c5dba11acff8d3a6f840", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -341,7 +341,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         self.in_root = prev_in_root;\n     }\n \n-    fn visit_mac(&mut self, mac: &'a ast::Mac) {\n+    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n         visit::walk_mac(self, mac)\n     }\n }"}, {"sha": "39009ca27f102d46cc050ae5b162f77e8679e6a7", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -86,7 +86,7 @@ pub fn expand_test_or_bench(\n             .raise();\n     };\n \n-    if let ast::ItemKind::Mac(_) = item.kind {\n+    if let ast::ItemKind::MacCall(_) = item.kind {\n         cx.parse_sess.span_diagnostic.span_warn(\n             item.span,\n             \"`#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\","}, {"sha": "15997a27fadf24aa1da18856110dd50e684384df", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -138,7 +138,7 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n         smallvec![P(item)]\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut ast::Mac) {\n+    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n         // Do nothing.\n     }\n }\n@@ -184,7 +184,7 @@ impl MutVisitor for EntryPointCleaner {\n         smallvec![item]\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut ast::Mac) {\n+    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n         // Do nothing.\n     }\n }"}, {"sha": "2d27fe09f98c85faa7973c2af228e6fbf74e2972", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -372,7 +372,7 @@ where\n                 mut_visit::noop_visit_tt(tt, self)\n             }\n \n-            fn visit_mac(&mut self, mac: &mut ast::Mac) {\n+            fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n                 mut_visit::noop_visit_mac(mac, self)\n             }\n         }"}, {"sha": "73197160a0269a3e9caa58fecdb1391f4d2d2c0e", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -271,7 +271,7 @@ pub struct Invocation {\n \n pub enum InvocationKind {\n     Bang {\n-        mac: ast::Mac,\n+        mac: ast::MacCall,\n         span: Span,\n     },\n     Attr {\n@@ -625,7 +625,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     /// A macro's expansion does not fit in this fragment kind.\n     /// For example, a non-type macro in a type position.\n-    fn error_wrong_fragment_kind(&mut self, kind: AstFragmentKind, mac: &ast::Mac, span: Span) {\n+    fn error_wrong_fragment_kind(&mut self, kind: AstFragmentKind, mac: &ast::MacCall, span: Span) {\n         let msg = format!(\n             \"non-{kind} macro in {kind} position: {path}\",\n             kind = kind.name(),\n@@ -768,7 +768,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 visit::walk_item(self, item);\n             }\n \n-            fn visit_mac(&mut self, _: &'ast ast::Mac) {}\n+            fn visit_mac(&mut self, _: &'ast ast::MacCall) {}\n         }\n \n         if !self.cx.ecfg.proc_macro_hygiene() {\n@@ -967,7 +967,12 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id), vis)\n     }\n \n-    fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {\n+    fn collect_bang(\n+        &mut self,\n+        mac: ast::MacCall,\n+        span: Span,\n+        kind: AstFragmentKind,\n+    ) -> AstFragment {\n         self.collect(kind, InvocationKind::Bang { mac, span })\n     }\n \n@@ -1110,7 +1115,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     .into_inner();\n             }\n \n-            if let ast::ExprKind::Mac(mac) = expr.kind {\n+            if let ast::ExprKind::MacCall(mac) = expr.kind {\n                 self.check_attributes(&expr.attrs);\n                 self.collect_bang(mac, expr.span, AstFragmentKind::Expr).make_expr().into_inner()\n             } else {\n@@ -1257,7 +1262,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     .map(|expr| expr.into_inner());\n             }\n \n-            if let ast::ExprKind::Mac(mac) = expr.kind {\n+            if let ast::ExprKind::MacCall(mac) = expr.kind {\n                 self.check_attributes(&expr.attrs);\n                 self.collect_bang(mac, expr.span, AstFragmentKind::OptExpr)\n                     .make_opt_expr()\n@@ -1274,12 +1279,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n         self.cfg.configure_pat(pat);\n         match pat.kind {\n-            PatKind::Mac(_) => {}\n+            PatKind::MacCall(_) => {}\n             _ => return noop_visit_pat(pat, self),\n         }\n \n         visit_clobber(pat, |mut pat| match mem::replace(&mut pat.kind, PatKind::Wild) {\n-            PatKind::Mac(mac) => self.collect_bang(mac, pat.span, AstFragmentKind::Pat).make_pat(),\n+            PatKind::MacCall(mac) => {\n+                self.collect_bang(mac, pat.span, AstFragmentKind::Pat).make_pat()\n+            }\n             _ => unreachable!(),\n         });\n     }\n@@ -1311,7 +1318,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n         }\n \n-        if let StmtKind::Mac(mac) = stmt.kind {\n+        if let StmtKind::MacCall(mac) = stmt.kind {\n             let (mac, style, attrs) = mac.into_inner();\n             self.check_attributes(&attrs);\n             let mut placeholder =\n@@ -1360,10 +1367,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::ItemKind::Mac(..) => {\n+            ast::ItemKind::MacCall(..) => {\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n-                    ItemKind::Mac(mac) => self\n+                    ItemKind::MacCall(mac) => self\n                         .collect(\n                             AstFragmentKind::Items,\n                             InvocationKind::Bang { mac, span: item.span },\n@@ -1432,10 +1439,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::AssocItemKind::Macro(..) => {\n+            ast::AssocItemKind::MacCall(..) => {\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n-                    ast::AssocItemKind::Macro(mac) => self\n+                    ast::AssocItemKind::MacCall(mac) => self\n                         .collect_bang(mac, item.span, AstFragmentKind::TraitItems)\n                         .make_trait_items(),\n                     _ => unreachable!(),\n@@ -1462,10 +1469,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::AssocItemKind::Macro(..) => {\n+            ast::AssocItemKind::MacCall(..) => {\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n-                    ast::AssocItemKind::Macro(mac) => self\n+                    ast::AssocItemKind::MacCall(mac) => self\n                         .collect_bang(mac, item.span, AstFragmentKind::ImplItems)\n                         .make_impl_items(),\n                     _ => unreachable!(),\n@@ -1477,12 +1484,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n     fn visit_ty(&mut self, ty: &mut P<ast::Ty>) {\n         match ty.kind {\n-            ast::TyKind::Mac(_) => {}\n+            ast::TyKind::MacCall(_) => {}\n             _ => return noop_visit_ty(ty, self),\n         };\n \n         visit_clobber(ty, |mut ty| match mem::replace(&mut ty.kind, ast::TyKind::Err) {\n-            ast::TyKind::Mac(mac) => self.collect_bang(mac, ty.span, AstFragmentKind::Ty).make_ty(),\n+            ast::TyKind::MacCall(mac) => {\n+                self.collect_bang(mac, ty.span, AstFragmentKind::Ty).make_ty()\n+            }\n             _ => unreachable!(),\n         });\n     }\n@@ -1511,10 +1520,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match foreign_item.kind {\n-            ast::ForeignItemKind::Macro(..) => {\n+            ast::ForeignItemKind::MacCall(..) => {\n                 self.check_attributes(&foreign_item.attrs);\n                 foreign_item.and_then(|item| match item.kind {\n-                    ast::ForeignItemKind::Macro(mac) => self\n+                    ast::ForeignItemKind::MacCall(mac) => self\n                         .collect_bang(mac, item.span, AstFragmentKind::ForeignItems)\n                         .make_foreign_items(),\n                     _ => unreachable!(),"}, {"sha": "7a64d40785e0929a554c529433eb9074e336a3c9", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -2,7 +2,7 @@ use crate::base::ExtCtxt;\n use crate::mbe;\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n \n-use rustc_ast::ast::{Ident, Mac};\n+use rustc_ast::ast::{Ident, MacCall};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::token::{self, NtTT, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n@@ -23,7 +23,7 @@ impl MutVisitor for Marker {\n         *span = span.apply_mark(self.0, self.1)\n     }\n \n-    fn visit_mac(&mut self, mac: &mut Mac) {\n+    fn visit_mac(&mut self, mac: &mut MacCall) {\n         mut_visit::noop_visit_mac(mac, self)\n     }\n }"}, {"sha": "70fb8975d4d085ca167bf2ee537de100bd87bae1", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -17,7 +17,7 @@ impl MutVisitor for ToZzIdentMutVisitor {\n     fn visit_ident(&mut self, ident: &mut ast::Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }\n-    fn visit_mac(&mut self, mac: &mut ast::Mac) {\n+    fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n         mut_visit::noop_visit_mac(mac, self)\n     }\n }"}, {"sha": "4add896258fa8e10ef95ec7e70f8f4517511f005", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -281,7 +281,7 @@ fn ttdelim_span() {\n         .unwrap();\n \n         let tts: Vec<_> = match expr.kind {\n-            ast::ExprKind::Mac(ref mac) => mac.args.inner_tokens().trees().collect(),\n+            ast::ExprKind::MacCall(ref mac) => mac.args.inner_tokens().trees().collect(),\n             _ => panic!(\"not a macro\"),\n         };\n "}, {"sha": "e1781f8636e5830dd6e894a8e3ae0e776b134ee5", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -15,8 +15,8 @@ pub fn placeholder(\n     id: ast::NodeId,\n     vis: Option<ast::Visibility>,\n ) -> AstFragment {\n-    fn mac_placeholder() -> ast::Mac {\n-        ast::Mac {\n+    fn mac_placeholder() -> ast::MacCall {\n+        ast::MacCall {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n@@ -32,11 +32,11 @@ pub fn placeholder(\n             id,\n             span,\n             attrs: ast::AttrVec::new(),\n-            kind: ast::ExprKind::Mac(mac_placeholder()),\n+            kind: ast::ExprKind::MacCall(mac_placeholder()),\n         })\n     };\n-    let ty = || P(ast::Ty { id, kind: ast::TyKind::Mac(mac_placeholder()), span });\n-    let pat = || P(ast::Pat { id, kind: ast::PatKind::Mac(mac_placeholder()), span });\n+    let ty = || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span });\n+    let pat = || P(ast::Pat { id, kind: ast::PatKind::MacCall(mac_placeholder()), span });\n \n     match kind {\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n@@ -47,7 +47,7 @@ pub fn placeholder(\n             ident,\n             vis,\n             attrs,\n-            kind: ast::ItemKind::Mac(mac_placeholder()),\n+            kind: ast::ItemKind::MacCall(mac_placeholder()),\n             tokens: None,\n         })]),\n         AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![P(ast::AssocItem {\n@@ -56,7 +56,7 @@ pub fn placeholder(\n             ident,\n             vis,\n             attrs,\n-            kind: ast::AssocItemKind::Macro(mac_placeholder()),\n+            kind: ast::AssocItemKind::MacCall(mac_placeholder()),\n             tokens: None,\n         })]),\n         AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![P(ast::AssocItem {\n@@ -65,7 +65,7 @@ pub fn placeholder(\n             ident,\n             vis,\n             attrs,\n-            kind: ast::AssocItemKind::Macro(mac_placeholder()),\n+            kind: ast::AssocItemKind::MacCall(mac_placeholder()),\n             tokens: None,\n         })]),\n         AstFragmentKind::ForeignItems => {\n@@ -75,19 +75,21 @@ pub fn placeholder(\n                 ident,\n                 vis,\n                 attrs,\n-                kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n+                kind: ast::ForeignItemKind::MacCall(mac_placeholder()),\n                 tokens: None,\n             })])\n         }\n-        AstFragmentKind::Pat => {\n-            AstFragment::Pat(P(ast::Pat { id, span, kind: ast::PatKind::Mac(mac_placeholder()) }))\n-        }\n+        AstFragmentKind::Pat => AstFragment::Pat(P(ast::Pat {\n+            id,\n+            span,\n+            kind: ast::PatKind::MacCall(mac_placeholder()),\n+        })),\n         AstFragmentKind::Ty => {\n-            AstFragment::Ty(P(ast::Ty { id, span, kind: ast::TyKind::Mac(mac_placeholder()) }))\n+            AstFragment::Ty(P(ast::Ty { id, span, kind: ast::TyKind::MacCall(mac_placeholder()) }))\n         }\n         AstFragmentKind::Stmts => AstFragment::Stmts(smallvec![{\n             let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ast::AttrVec::new()));\n-            ast::Stmt { id, span, kind: ast::StmtKind::Mac(mac) }\n+            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac) }\n         }]),\n         AstFragmentKind::Arms => AstFragment::Arms(smallvec![ast::Arm {\n             attrs: Default::default(),\n@@ -239,7 +241,7 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n \n     fn flat_map_item(&mut self, item: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         match item.kind {\n-            ast::ItemKind::Mac(_) => return self.remove(item.id).make_items(),\n+            ast::ItemKind::MacCall(_) => return self.remove(item.id).make_items(),\n             ast::ItemKind::MacroDef(_) => return smallvec![item],\n             _ => {}\n         }\n@@ -249,14 +251,14 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n \n     fn flat_map_trait_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         match item.kind {\n-            ast::AssocItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n+            ast::AssocItemKind::MacCall(_) => self.remove(item.id).make_trait_items(),\n             _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n \n     fn flat_map_impl_item(&mut self, item: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         match item.kind {\n-            ast::AssocItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n+            ast::AssocItemKind::MacCall(_) => self.remove(item.id).make_impl_items(),\n             _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n@@ -266,28 +268,28 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         item: P<ast::ForeignItem>,\n     ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n         match item.kind {\n-            ast::ForeignItemKind::Macro(_) => self.remove(item.id).make_foreign_items(),\n+            ast::ForeignItemKind::MacCall(_) => self.remove(item.id).make_foreign_items(),\n             _ => noop_flat_map_foreign_item(item, self),\n         }\n     }\n \n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n         match expr.kind {\n-            ast::ExprKind::Mac(_) => *expr = self.remove(expr.id).make_expr(),\n+            ast::ExprKind::MacCall(_) => *expr = self.remove(expr.id).make_expr(),\n             _ => noop_visit_expr(expr, self),\n         }\n     }\n \n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         match expr.kind {\n-            ast::ExprKind::Mac(_) => self.remove(expr.id).make_opt_expr(),\n+            ast::ExprKind::MacCall(_) => self.remove(expr.id).make_opt_expr(),\n             _ => noop_filter_map_expr(expr, self),\n         }\n     }\n \n     fn flat_map_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n         let (style, mut stmts) = match stmt.kind {\n-            ast::StmtKind::Mac(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n+            ast::StmtKind::MacCall(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n             _ => return noop_flat_map_stmt(stmt, self),\n         };\n \n@@ -302,14 +304,14 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n \n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n         match pat.kind {\n-            ast::PatKind::Mac(_) => *pat = self.remove(pat.id).make_pat(),\n+            ast::PatKind::MacCall(_) => *pat = self.remove(pat.id).make_pat(),\n             _ => noop_visit_pat(pat, self),\n         }\n     }\n \n     fn visit_ty(&mut self, ty: &mut P<ast::Ty>) {\n         match ty.kind {\n-            ast::TyKind::Mac(_) => *ty = self.remove(ty.id).make_ty(),\n+            ast::TyKind::MacCall(_) => *ty = self.remove(ty.id).make_ty(),\n             _ => noop_visit_ty(ty, self),\n         }\n     }\n@@ -328,12 +330,12 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n     fn visit_mod(&mut self, module: &mut ast::Mod) {\n         noop_visit_mod(module, self);\n         module.items.retain(|item| match item.kind {\n-            ast::ItemKind::Mac(_) if !self.cx.ecfg.keep_macs => false, // remove macro definitions\n+            ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs => false, // remove macro definitions\n             _ => true,\n         });\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut ast::Mac) {\n+    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n         // Do nothing.\n     }\n }"}, {"sha": "df05bd7c5117dea1b4743619cbf8ed5c4be92294", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -780,7 +780,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n \n     // in general the pretty printer processes unexpanded code, so\n     // we override the default `visit_mac` method which panics.\n-    fn visit_mac(&mut self, mac: &mut ast::Mac) {\n+    fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n         noop_visit_mac(mac, self)\n     }\n }"}, {"sha": "c97dbb955ba85e1b474568e14809a28af7468aeb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -778,7 +778,7 @@ impl EarlyLintPass for UnusedDocComment {\n             ast::StmtKind::Empty\n             | ast::StmtKind::Semi(_)\n             | ast::StmtKind::Expr(_)\n-            | ast::StmtKind::Mac(_) => return,\n+            | ast::StmtKind::MacCall(_) => return,\n         };\n \n         warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());\n@@ -1478,7 +1478,7 @@ impl EarlyLintPass for KeywordIdents {\n     fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n         self.check_tokens(cx, mac_def.body.inner_tokens());\n     }\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n+    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {\n         self.check_tokens(cx, mac.args.inner_tokens());\n     }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {"}, {"sha": "a5da960d8881c35a5a1167e000fab478517b2459", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -249,7 +249,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         self.check_id(id);\n     }\n \n-    fn visit_mac(&mut self, mac: &'a ast::Mac) {\n+    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n         // FIXME(#54110): So, this setup isn't really right. I think\n         // that (a) the librustc_ast visitor ought to be doing this as\n         // part of `walk_mac`, and (b) we should be calling"}, {"sha": "ace154714458e4eb0b849ea1a6d740791c2a1f7d", "filename": "src/librustc_lint/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fpasses.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -198,7 +198,7 @@ macro_rules! early_lint_methods {\n             fn check_path(a: &ast::Path, b: ast::NodeId);\n             fn check_attribute(a: &ast::Attribute);\n             fn check_mac_def(a: &ast::MacroDef, b: ast::NodeId);\n-            fn check_mac(a: &ast::Mac);\n+            fn check_mac(a: &ast::MacCall);\n \n             /// Called when entering a syntax node that can have lint attributes such\n             /// as `#[allow(...)]`. Called with *all* the attributes of that node."}, {"sha": "e88600239e765e44b548c1d675519e2e1cd0b0b8", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -538,7 +538,7 @@ impl EarlyLintPass for UnusedParens {\n             // Do not lint on `(..)` as that will result in the other arms being useless.\n             Paren(_)\n             // The other cases do not contain sub-patterns.\n-            | Wild | Rest | Lit(..) | Mac(..) | Range(..) | Ident(.., None) | Path(..) => return,\n+            | Wild | Rest | Lit(..) | MacCall(..) | Range(..) | Ident(.., None) | Path(..) => return,\n             // These are list-like patterns; parens can always be removed.\n             TupleStruct(_, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n                 self.check_unused_parens_pat(cx, p, false, false);"}, {"sha": "d209da866e17ccfc0cf40ebfaa9a748abe7e843b", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -519,7 +519,7 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n         noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut ast::Mac) {\n+    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n         // Don't configure interpolated AST (cf. issue #34171).\n         // Interpolated AST will get configured once the surrounding tokens are parsed.\n     }"}, {"sha": "c65e99842c5ddf3c63353bed158521c57f6ef081", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -4,8 +4,8 @@ use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n-use rustc_ast::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_NODE_ID};\n-use rustc_ast::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, Mac, Param, Ty, TyKind, UnOp};\n+use rustc_ast::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, UnOp, DUMMY_NODE_ID};\n+use rustc_ast::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token, TokenKind};\n@@ -1065,12 +1065,12 @@ impl<'a> Parser<'a> {\n         // `!`, as an operator, is prefix, so we know this isn't that.\n         let (hi, kind) = if self.eat(&token::Not) {\n             // MACRO INVOCATION expression\n-            let mac = Mac {\n+            let mac = MacCall {\n                 path,\n                 args: self.parse_mac_args()?,\n                 prior_type_ascription: self.last_type_ascription,\n             };\n-            (self.prev_token.span, ExprKind::Mac(mac))\n+            (self.prev_token.span, ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(token::Brace)) {\n             if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n                 return expr;"}, {"sha": "ba9fdb7da2ac52c8f65326b5de12057646f86c77", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -4,16 +4,12 @@ use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n \n-use rustc_ast::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n+use rustc_ast::ast::{self, Async, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind};\n-use rustc_ast::ast::{\n-    Async, Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind,\n-};\n-use rustc_ast::ast::{\n-    BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind,\n-};\n+use rustc_ast::ast::{BindingMode, Block, FnDecl, FnSig, MacArgs, MacCall, MacDelimiter, Param};\n+use rustc_ast::ast::{Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n-use rustc_ast::ast::{FnHeader, ForeignItem, Mutability, Visibility, VisibilityKind};\n+use rustc_ast::ast::{FnHeader, ForeignItem, Mutability, SelfKind, Visibility, VisibilityKind};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n@@ -220,7 +216,7 @@ impl<'a> Parser<'a> {\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n             // MACRO INVOCATION ITEM\n-            (Ident::invalid(), ItemKind::Mac(self.parse_item_macro(vis)?))\n+            (Ident::invalid(), ItemKind::MacCall(self.parse_item_macro(vis)?))\n         } else {\n             return Ok(None);\n         };\n@@ -339,13 +335,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an item macro, e.g., `item!();`.\n-    fn parse_item_macro(&mut self, vis: &Visibility) -> PResult<'a, Mac> {\n+    fn parse_item_macro(&mut self, vis: &Visibility) -> PResult<'a, MacCall> {\n         let path = self.parse_path(PathStyle::Mod)?; // `foo::bar`\n         self.expect(&token::Not)?; // `!`\n         let args = self.parse_mac_args()?; // `( .. )` or `[ .. ]` (followed by `;`), or `{ .. }`.\n         self.eat_semi_for_macro_if_needed(&args);\n         self.complain_if_pub_macro(vis, false);\n-        Ok(Mac { path, args, prior_type_ascription: self.last_type_ascription })\n+        Ok(MacCall { path, args, prior_type_ascription: self.last_type_ascription })\n     }\n \n     /// Recover if we parsed attributes and expected an item but there was none."}, {"sha": "4585941943b74a001a64c10a85ae14c2370e55d4", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -1,9 +1,7 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n-use rustc_ast::ast::{\n-    self, AttrVec, Attribute, FieldPat, Mac, Pat, PatKind, RangeEnd, RangeSyntax,\n-};\n-use rustc_ast::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf};\n+use rustc_ast::ast::{self, AttrVec, Attribute, FieldPat, MacCall, Pat, PatKind, RangeEnd};\n+use rustc_ast::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf, RangeSyntax};\n use rustc_ast::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n@@ -540,7 +538,7 @@ impl<'a> Parser<'a> {\n     fn make_all_value_bindings_mutable(pat: &mut P<Pat>) -> bool {\n         struct AddMut(bool);\n         impl MutVisitor for AddMut {\n-            fn visit_mac(&mut self, mac: &mut Mac) {\n+            fn visit_mac(&mut self, mac: &mut MacCall) {\n                 noop_visit_mac(mac, self);\n             }\n \n@@ -597,8 +595,8 @@ impl<'a> Parser<'a> {\n     fn parse_pat_mac_invoc(&mut self, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n         let args = self.parse_mac_args()?;\n-        let mac = Mac { path, args, prior_type_ascription: self.last_type_ascription };\n-        Ok(PatKind::Mac(mac))\n+        let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n+        Ok(PatKind::MacCall(mac))\n     }\n \n     fn fatal_unexpected_non_pat("}, {"sha": "4359823be0890e9ea114ca8f1fe4168a2a3f283e", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -8,7 +8,7 @@ use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n use rustc_ast::ast;\n-use rustc_ast::ast::{AttrStyle, AttrVec, Attribute, Mac, MacStmtStyle};\n+use rustc_ast::ast::{AttrStyle, AttrVec, Attribute, MacCall, MacStmtStyle};\n use rustc_ast::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n@@ -110,14 +110,14 @@ impl<'a> Parser<'a> {\n         let style =\n             if delim == token::Brace { MacStmtStyle::Braces } else { MacStmtStyle::NoBraces };\n \n-        let mac = Mac { path, args, prior_type_ascription: self.last_type_ascription };\n+        let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n \n         let kind = if delim == token::Brace || self.token == token::Semi || self.token == token::Eof\n         {\n-            StmtKind::Mac(P((mac, style, attrs)))\n+            StmtKind::MacCall(P((mac, style, attrs)))\n         } else {\n             // Since none of the above applied, this is an expression statement macro.\n-            let e = self.mk_expr(lo.to(hi), ExprKind::Mac(mac), AttrVec::new());\n+            let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n             let e = self.maybe_recover_from_bad_qpath(e, true)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n             let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;"}, {"sha": "c21ac8d04f194043465bfa27b53fcf7db7718bf1", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -3,10 +3,8 @@ use super::{Parser, PathStyle, TokenType};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n use rustc_ast::ast::{self, BareFnTy, FnRetTy, GenericParam, Lifetime, MutTy, Ty, TyKind};\n-use rustc_ast::ast::{\n-    GenericBound, GenericBounds, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax,\n-};\n-use rustc_ast::ast::{Mac, Mutability};\n+use rustc_ast::ast::{GenericBound, GenericBounds, MacCall, Mutability};\n+use rustc_ast::ast::{PolyTraitRef, TraitBoundModifier, TraitObjectSyntax};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token, TokenKind};\n use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n@@ -355,7 +353,7 @@ impl<'a> Parser<'a> {\n         let path = self.parse_path(PathStyle::Type)?;\n         if self.eat(&token::Not) {\n             // Macro invocation in type position\n-            Ok(TyKind::Mac(Mac {\n+            Ok(TyKind::MacCall(MacCall {\n                 path,\n                 args: self.parse_mac_args()?,\n                 prior_type_ascription: self.last_type_ascription,"}, {"sha": "65b3b7efdc0f135902bd7553ae4b36f6e360a931", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -336,8 +336,8 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_lifetime(self, lifetime)\n     }\n \n-    fn visit_mac(&mut self, mac: &'v ast::Mac) {\n-        self.record(\"Mac\", Id::None, mac);\n+    fn visit_mac(&mut self, mac: &'v ast::MacCall) {\n+        self.record(\"MacCall\", Id::None, mac);\n     }\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {"}, {"sha": "bac2cb54f60b6d5b3bae39d69e13113c5901db2d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {\n         // If any statements are items, we need to create an anonymous module\n         block.stmts.iter().any(|statement| match statement.kind {\n-            StmtKind::Item(_) | StmtKind::Mac(_) => true,\n+            StmtKind::Item(_) | StmtKind::MacCall(_) => true,\n             _ => false,\n         })\n     }\n@@ -803,7 +803,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             // These items do not add names to modules.\n             ItemKind::Impl { .. } | ItemKind::ForeignMod(..) | ItemKind::GlobalAsm(..) => {}\n \n-            ItemKind::MacroDef(..) | ItemKind::Mac(_) => unreachable!(),\n+            ItemKind::MacroDef(..) | ItemKind::MacCall(_) => unreachable!(),\n         }\n     }\n \n@@ -819,7 +819,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ForeignItemKind::TyAlias(..) => {\n                 (Res::Def(DefKind::ForeignTy, self.r.definitions.local_def_id(item.id)), TypeNS)\n             }\n-            ForeignItemKind::Macro(_) => unreachable!(),\n+            ForeignItemKind::MacCall(_) => unreachable!(),\n         };\n         let parent = self.parent_scope.module;\n         let expansion = self.parent_scope.expansion;\n@@ -1167,17 +1167,17 @@ macro_rules! method {\n }\n \n impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n-    method!(visit_expr: ast::Expr, ast::ExprKind::Mac, walk_expr);\n-    method!(visit_pat: ast::Pat, ast::PatKind::Mac, walk_pat);\n-    method!(visit_ty: ast::Ty, ast::TyKind::Mac, walk_ty);\n+    method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);\n+    method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);\n+    method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);\n \n     fn visit_item(&mut self, item: &'b Item) {\n         let macro_use = match item.kind {\n             ItemKind::MacroDef(..) => {\n                 self.parent_scope.legacy = self.define_macro(item);\n                 return;\n             }\n-            ItemKind::Mac(..) => {\n+            ItemKind::MacCall(..) => {\n                 self.parent_scope.legacy = self.visit_invoc(item.id);\n                 return;\n             }\n@@ -1195,15 +1195,15 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {\n-        if let ast::StmtKind::Mac(..) = stmt.kind {\n+        if let ast::StmtKind::MacCall(..) = stmt.kind {\n             self.parent_scope.legacy = self.visit_invoc(stmt.id);\n         } else {\n             visit::walk_stmt(self, stmt);\n         }\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {\n-        if let ForeignItemKind::Macro(_) = foreign_item.kind {\n+        if let ForeignItemKind::MacCall(_) = foreign_item.kind {\n             self.visit_invoc(foreign_item.id);\n             return;\n         }\n@@ -1224,7 +1224,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_assoc_item(&mut self, item: &'b AssocItem, ctxt: AssocCtxt) {\n         let parent = self.parent_scope.module;\n \n-        if let AssocItemKind::Macro(_) = item.kind {\n+        if let AssocItemKind::MacCall(_) = item.kind {\n             self.visit_invoc(item.id);\n             return;\n         }\n@@ -1246,7 +1246,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                 (Res::Def(DefKind::Method, item_def_id), ValueNS)\n             }\n             AssocItemKind::TyAlias(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n-            AssocItemKind::Macro(_) => bug!(), // handled above\n+            AssocItemKind::MacCall(_) => bug!(), // handled above\n         };\n \n         let vis = ty::Visibility::Public;\n@@ -1259,7 +1259,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_token(&mut self, t: Token) {\n         if let token::Interpolated(nt) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {\n-                if let ast::ExprKind::Mac(..) = expr.kind {\n+                if let ast::ExprKind::MacCall(..) = expr.kind {\n                     self.visit_invoc(expr.id);\n                 }\n             }"}, {"sha": "c55090d7e931e63ff6f776409f08959420d58cde", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -132,7 +132,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 DefPathData::ValueNs(i.ident.name)\n             }\n             ItemKind::MacroDef(..) => DefPathData::MacroNs(i.ident.name),\n-            ItemKind::Mac(..) => return self.visit_macro_invoc(i.id),\n+            ItemKind::MacCall(..) => return self.visit_macro_invoc(i.id),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(..) => {\n                 return visit::walk_item(self, i);\n@@ -160,7 +160,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n-        if let ForeignItemKind::Macro(_) = foreign_item.kind {\n+        if let ForeignItemKind::MacCall(_) = foreign_item.kind {\n             return self.visit_macro_invoc(foreign_item.id);\n         }\n \n@@ -230,7 +230,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             AssocItemKind::Fn(..) | AssocItemKind::Const(..) => DefPathData::ValueNs(i.ident.name),\n             AssocItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            AssocItemKind::Macro(..) => return self.visit_macro_invoc(i.id),\n+            AssocItemKind::MacCall(..) => return self.visit_macro_invoc(i.id),\n         };\n \n         let def = self.create_def(i.id, def_data, i.span);\n@@ -239,7 +239,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_pat(&mut self, pat: &'a Pat) {\n         match pat.kind {\n-            PatKind::Mac(..) => return self.visit_macro_invoc(pat.id),\n+            PatKind::MacCall(..) => return self.visit_macro_invoc(pat.id),\n             _ => visit::walk_pat(self, pat),\n         }\n     }\n@@ -251,7 +251,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_expr(&mut self, expr: &'a Expr) {\n         let parent_def = match expr.kind {\n-            ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id),\n+            ExprKind::MacCall(..) => return self.visit_macro_invoc(expr.id),\n             ExprKind::Closure(_, asyncness, ..) => {\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n@@ -274,7 +274,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.kind {\n-            TyKind::Mac(..) => return self.visit_macro_invoc(ty.id),\n+            TyKind::MacCall(..) => return self.visit_macro_invoc(ty.id),\n             TyKind::ImplTrait(node_id, _) => {\n                 self.create_def(node_id, DefPathData::ImplTrait, ty.span);\n             }\n@@ -285,15 +285,15 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_stmt(&mut self, stmt: &'a Stmt) {\n         match stmt.kind {\n-            StmtKind::Mac(..) => self.visit_macro_invoc(stmt.id),\n+            StmtKind::MacCall(..) => self.visit_macro_invoc(stmt.id),\n             _ => visit::walk_stmt(self, stmt),\n         }\n     }\n \n     fn visit_token(&mut self, t: Token) {\n         if let token::Interpolated(nt) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {\n-                if let ExprKind::Mac(..) = expr.kind {\n+                if let ExprKind::MacCall(..) = expr.kind {\n                     self.visit_macro_invoc(expr.id);\n                 }\n             }"}, {"sha": "fac5acc6f22bc6ddbdfb9f9498807d09768bad93", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n             }\n-            ForeignItemKind::Macro(..) => {\n+            ForeignItemKind::MacCall(..) => {\n                 visit::walk_foreign_item(self, foreign_item);\n             }\n         }\n@@ -852,7 +852,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     AssocItemKind::TyAlias(_, generics, _, _) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n-                                    AssocItemKind::Macro(_) => {\n+                                    AssocItemKind::MacCall(_) => {\n                                         panic!(\"unexpanded macro in resolve!\")\n                                     }\n                                 };\n@@ -897,7 +897,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // do nothing, these are just around to be encoded\n             }\n \n-            ItemKind::Mac(_) => panic!(\"unexpanded macro in resolve!\"),\n+            ItemKind::MacCall(_) => panic!(\"unexpanded macro in resolve!\"),\n         }\n     }\n \n@@ -1174,7 +1174,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::Macro(_) => {\n+                                        AssocItemKind::MacCall(_) => {\n                                             panic!(\"unexpanded macro in resolve!\")\n                                         }\n                                     }"}, {"sha": "cf4a9e947be94300ac9edd0f1772155237e26a2c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -1067,7 +1067,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(default_ty)\n                 }\n             }\n-            ast::AssocItemKind::Macro(_) => {}\n+            ast::AssocItemKind::MacCall(_) => {}\n         }\n     }\n \n@@ -1103,7 +1103,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 // trait.\n                 self.visit_ty(ty)\n             }\n-            ast::AssocItemKind::Macro(_) => {}\n+            ast::AssocItemKind::MacCall(_) => {}\n         }\n     }\n \n@@ -1345,7 +1345,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 walk_list!(self, visit_ty, ty);\n                 self.process_generic_params(ty_params, &qualname, item.id);\n             }\n-            Mac(_) => (),\n+            MacCall(_) => (),\n             _ => visit::walk_item(self, item),\n         }\n     }\n@@ -1549,7 +1549,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.dumper.dump_def(&access, var_data);\n                 }\n             }\n-            ast::ForeignItemKind::Macro(..) => {}\n+            ast::ForeignItemKind::MacCall(..) => {}\n         }\n     }\n }"}, {"sha": "74a918b572d6aa32b79f751f2685de02ec7db9e6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -174,7 +174,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             }\n             // FIXME(plietar): needs a new DefKind in rls-data\n             ast::ForeignItemKind::TyAlias(..) => None,\n-            ast::ForeignItemKind::Macro(..) => None,\n+            ast::ForeignItemKind::MacCall(..) => None,\n         }\n     }\n "}, {"sha": "d9c8594cdbf5fbe591081d03eba8d3f7135076ee", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -308,7 +308,7 @@ impl Sig for ast::Ty {\n             | ast::TyKind::Infer\n             | ast::TyKind::Err\n             | ast::TyKind::ImplicitSelf\n-            | ast::TyKind::Mac(_) => Err(\"Ty\"),\n+            | ast::TyKind::MacCall(_) => Err(\"Ty\"),\n         }\n     }\n }\n@@ -544,7 +544,7 @@ impl Sig for ast::Item {\n             ast::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n             // FIXME should implement this (e.g., pub use).\n             ast::ItemKind::Use(_) => Err(\"import\"),\n-            ast::ItemKind::Mac(..) | ast::ItemKind::MacroDef(_) => Err(\"Macro\"),\n+            ast::ItemKind::MacCall(..) | ast::ItemKind::MacroDef(_) => Err(\"Macro\"),\n         }\n     }\n }\n@@ -795,7 +795,7 @@ impl Sig for ast::ForeignItem {\n \n                 Ok(Signature { text, defs, refs: vec![] })\n             }\n-            ast::ForeignItemKind::Macro(..) => Err(\"macro\"),\n+            ast::ForeignItemKind::MacCall(..) => Err(\"macro\"),\n         }\n     }\n }"}, {"sha": "9ad0f85ec9419111a564a2d03b85c44f62028500", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809e0214ea9a43cc798379da4e8b303ed1000c3/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e809e0214ea9a43cc798379da4e8b303ed1000c3", "patch": "@@ -449,7 +449,7 @@ pub fn make_test(\n                         }\n \n                         if !found_macro {\n-                            if let ast::ItemKind::Mac(..) = item.kind {\n+                            if let ast::ItemKind::MacCall(..) = item.kind {\n                                 found_macro = true;\n                             }\n                         }"}]}