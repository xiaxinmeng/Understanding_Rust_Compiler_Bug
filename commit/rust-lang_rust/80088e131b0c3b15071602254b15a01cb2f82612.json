{"sha": "80088e131b0c3b15071602254b15a01cb2f82612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMDg4ZTEzMWIwYzNiMTUwNzE2MDIyNTRiMTVhMDFjYjJmODI2MTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T07:24:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T07:24:36Z"}, "message": "rustup for trait MachineStopType", "tree": {"sha": "6d4dd009b3801fb1f2f663cee0931ef385fb0e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d4dd009b3801fb1f2f663cee0931ef385fb0e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80088e131b0c3b15071602254b15a01cb2f82612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80088e131b0c3b15071602254b15a01cb2f82612", "html_url": "https://github.com/rust-lang/rust/commit/80088e131b0c3b15071602254b15a01cb2f82612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80088e131b0c3b15071602254b15a01cb2f82612/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f1a299378e8be934f42ab14cabce4a2dab7d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f1a299378e8be934f42ab14cabce4a2dab7d00", "html_url": "https://github.com/rust-lang/rust/commit/e5f1a299378e8be934f42ab14cabce4a2dab7d00"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "7658d0bff9d84624f1cbcce5f5693256f2b5e408", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80088e131b0c3b15071602254b15a01cb2f82612/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/80088e131b0c3b15071602254b15a01cb2f82612/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=80088e131b0c3b15071602254b15a01cb2f82612", "patch": "@@ -1 +1 @@\n-1edd389cc4c7b5be7a3dd4fe4b986f6017018e54\n+342c5f33d097b2dc07a2dbc0ca45a37379d2ff60"}, {"sha": "2e4023e0b5bf89ee1a832b4087493130aa723bc5", "filename": "src/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/80088e131b0c3b15071602254b15a01cb2f82612/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80088e131b0c3b15071602254b15a01cb2f82612/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=80088e131b0c3b15071602254b15a01cb2f82612", "patch": "@@ -1,4 +1,5 @@\n use std::cell::RefCell;\n+use std::fmt;\n \n use rustc_span::DUMMY_SP;\n \n@@ -12,6 +13,26 @@ pub enum TerminationInfo {\n     ExperimentalUb { msg: String, url: String }\n }\n \n+impl fmt::Debug for TerminationInfo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use TerminationInfo::*;\n+        match self {\n+            Exit(code) =>\n+                write!(f, \"the evaluated program completed with exit code {}\", code),\n+            Abort(None) =>\n+                write!(f, \"the evaluated program aborted execution\"),\n+            Abort(Some(msg)) =>\n+                write!(f, \"the evaluated program aborted execution: {}\", msg),\n+            UnsupportedInIsolation(msg) =>\n+                write!(f, \"{}\", msg),\n+            ExperimentalUb { msg, .. } =>\n+                write!(f, \"{}\", msg),\n+        }\n+    }\n+}\n+\n+impl MachineStopType for TerminationInfo {}\n+\n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n@@ -25,21 +46,18 @@ pub fn report_error<'tcx, 'mir>(\n ) -> Option<i64> {\n     use InterpError::*;\n \n-    e.print_backtrace();\n-    let (title, msg, helps) = match e.kind {\n-        MachineStop(info) => {\n+    let (title, helps) = match e.kind {\n+        MachineStop(ref info) => {\n             let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n             use TerminationInfo::*;\n-            let (title, msg) = match info {\n+            let title = match info {\n                 Exit(code) => return Some(*code),\n-                Abort(None) =>\n-                    (\"abnormal termination\", format!(\"the evaluated program aborted execution\")),\n-                Abort(Some(msg)) =>\n-                    (\"abnormal termination\", format!(\"the evaluated program aborted execution: {}\", msg)),\n-                UnsupportedInIsolation(msg) =>\n-                    (\"unsupported operation\", format!(\"{}\", msg)),\n-                ExperimentalUb { msg, .. } =>\n-                    (\"Undefined Behavior\", format!(\"{}\", msg)),\n+                Abort(_) =>\n+                    \"abnormal termination\",\n+                UnsupportedInIsolation(_) =>\n+                    \"unsupported operation\",\n+                ExperimentalUb { .. } =>\n+                    \"Undefined Behavior\",\n             };\n             let helps = match info {\n                 UnsupportedInIsolation(_) =>\n@@ -51,16 +69,16 @@ pub fn report_error<'tcx, 'mir>(\n                     ],\n                 _ => vec![],\n             };\n-            (title, msg, helps)\n+            (title, helps)\n         }\n         _ => {\n-            let (title, msg) = match e.kind {\n+            let title = match e.kind {\n                 Unsupported(_) =>\n-                    (\"unsupported operation\", e.to_string()),\n+                    \"unsupported operation\",\n                 UndefinedBehavior(_) =>\n-                    (\"Undefined Behavior\", e.to_string()),\n+                    \"Undefined Behavior\",\n                 ResourceExhaustion(_) =>\n-                    (\"resource exhaustion\", e.to_string()),\n+                    \"resource exhaustion\",\n                 _ =>\n                     bug!(\"This error should be impossible in Miri: {}\", e),\n             };\n@@ -76,9 +94,12 @@ pub fn report_error<'tcx, 'mir>(\n                     ],\n                 _ => vec![],\n             };\n-            (title, msg, helps)\n+            (title, helps)\n         }\n     };\n+\n+    e.print_backtrace();\n+    let msg = e.to_string();\n     report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, &helps, true)\n }\n "}]}