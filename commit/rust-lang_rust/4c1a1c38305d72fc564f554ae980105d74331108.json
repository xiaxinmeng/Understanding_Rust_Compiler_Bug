{"sha": "4c1a1c38305d72fc564f554ae980105d74331108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMWExYzM4MzA1ZDcyZmM1NjRmNTU0YWU5ODAxMDVkNzQzMzExMDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:18:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T17:21:13Z"}, "message": "review failures in btree, string", "tree": {"sha": "7ab43d7948f271a773a2f4b979da0539565e8a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab43d7948f271a773a2f4b979da0539565e8a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1a1c38305d72fc564f554ae980105d74331108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1a1c38305d72fc564f554ae980105d74331108", "html_url": "https://github.com/rust-lang/rust/commit/4c1a1c38305d72fc564f554ae980105d74331108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1a1c38305d72fc564f554ae980105d74331108/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17ca0107755f60a1760f1dca17240cd70d15c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17ca0107755f60a1760f1dca17240cd70d15c5f", "html_url": "https://github.com/rust-lang/rust/commit/b17ca0107755f60a1760f1dca17240cd70d15c5f"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "a92e7479048956309c5eef7940a48d85856dcb49", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=4c1a1c38305d72fc564f554ae980105d74331108", "patch": "@@ -7,6 +7,7 @@ use std::iter::FromIterator;\n use super::DeterministicRng;\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn test_basic_large() {\n     let mut map = BTreeMap::new();\n     let size = 10000;\n@@ -69,7 +70,10 @@ fn test_basic_small() {\n \n #[test]\n fn test_iter() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 100;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -91,7 +95,10 @@ fn test_iter() {\n \n #[test]\n fn test_iter_rev() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 100;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -127,7 +134,10 @@ fn test_values_mut() {\n \n #[test]\n fn test_iter_mixed() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 100;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -214,42 +224,50 @@ fn test_range_equal_empty_cases() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_equal_excluded() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(2), Excluded(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_1() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Included(3), Included(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_2() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Included(3), Excluded(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_3() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(3), Included(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_4() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(3), Excluded(2)));\n }\n \n #[test]\n fn test_range_1000() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 1000;\n+    #[cfg(miri)]\n+    let size = 100;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) {\n@@ -286,7 +304,10 @@ fn test_range_borrowed_key() {\n \n #[test]\n fn test_range() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n+    #[cfg(miri)]\n+    let size = 20;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n@@ -305,7 +326,10 @@ fn test_range() {\n \n #[test]\n fn test_range_mut() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n+    #[cfg(miri)]\n+    let size = 20;\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n@@ -479,7 +503,10 @@ fn test_bad_zst() {\n #[test]\n fn test_clone() {\n     let mut map = BTreeMap::new();\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 100;\n+    #[cfg(miri)]\n+    let size = 20;\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -631,6 +658,7 @@ create_append_test!(test_append_145, 145);\n create_append_test!(test_append_170, 170);\n create_append_test!(test_append_181, 181);\n create_append_test!(test_append_239, 239);\n+#[cfg(not(miri))] // Miri is too slow\n create_append_test!(test_append_1700, 1700);\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {"}, {"sha": "4c704d0f8c28fa7106bc3364133e9c44c57471b5", "filename": "src/liballoc/tests/btree/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs?ref=4c1a1c38305d72fc564f554ae980105d74331108", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n mod map;\n mod set;\n "}, {"sha": "7e93d84fe3b97b1578dad9e6ebd9eb2324ab83c4", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=4c1a1c38305d72fc564f554ae980105d74331108", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use std::borrow::Cow;\n use std::collections::CollectionAllocErr::*;\n use std::mem::size_of;\n@@ -233,6 +231,7 @@ fn test_split_off_empty() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_split_off_past_end() {\n     let orig = \"Hello, world!\";\n     let mut split = String::from(orig);\n@@ -241,6 +240,7 @@ fn test_split_off_past_end() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_split_off_mid_char() {\n     let mut orig = String::from(\"\u5c71\");\n     orig.split_off(1);\n@@ -289,6 +289,7 @@ fn test_str_truncate_invalid_len() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_str_truncate_split_codepoint() {\n     let mut s = String::from(\"\\u{FC}\"); // \u00fc\n     s.truncate(1);\n@@ -323,6 +324,7 @@ fn remove() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn remove_bad() {\n     \"\u0e28\".to_string().remove(1);\n }\n@@ -358,11 +360,13 @@ fn insert() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn insert_bad1() {\n     \"\".to_string().insert(1, 't');\n }\n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn insert_bad2() {\n     \"\u1ec7\".to_string().insert(1, 't');\n }\n@@ -443,6 +447,7 @@ fn test_replace_range() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_char_boundary() {\n     let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n     s.replace_range(..8, \"\");\n@@ -459,13 +464,15 @@ fn test_replace_range_inclusive_range() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n     s.replace_range(5..6, \"789\");\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_inclusive_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n     s.replace_range(5..=5, \"789\");\n@@ -525,6 +532,7 @@ fn test_reserve_exact() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -602,6 +610,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "e0cb0e7a9e70c532ccd3f915b5afffa2d1d45514", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1a1c38305d72fc564f554ae980105d74331108/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=4c1a1c38305d72fc564f554ae980105d74331108", "patch": "@@ -921,7 +921,6 @@ fn test_append() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n fn test_append_permutations() {\n     fn construct_vec_deque(\n         push_back: usize,\n@@ -945,7 +944,10 @@ fn test_append_permutations() {\n         out\n     }\n \n+    #[cfg(not(miri))] // Miri is too slow\n     const MAX: usize = 5;\n+    #[cfg(miri)]\n+    const MAX: usize = 3;\n \n     // Many different permutations of both the `VecDeque` getting appended to\n     // and the one getting appended are generated to check `append`."}, {"sha": "fd7192cc151195c326c80c0b229db44c45f66f66", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c1a1c38305d72fc564f554ae980105d74331108/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1a1c38305d72fc564f554ae980105d74331108/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=4c1a1c38305d72fc564f554ae980105d74331108", "patch": "@@ -488,7 +488,6 @@ mod debug_list {\n }\n \n #[test]\n-#[cfg(not(miri))] // FIXME uses code in liballoc, investigate Stacked Borrows failure\n fn test_formatting_parameters_are_forwarded() {\n     use std::collections::{BTreeMap, BTreeSet};\n     #[derive(Debug)]"}]}