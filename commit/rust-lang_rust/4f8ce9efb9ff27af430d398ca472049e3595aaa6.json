{"sha": "4f8ce9efb9ff27af430d398ca472049e3595aaa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOGNlOWVmYjlmZjI3YWY0MzBkMzk4Y2E0NzIwNDllMzU5NWFhYTY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-05T14:14:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-05T14:14:39Z"}, "message": "Rollup merge of #39009 - canndrew:default-unit-warnings, r=nikomatsakis\n\nAdd warning for () to ! switch\n\nWith feature(never_type) enabled diverging type variables will default to `!` instead of `()`. This can cause breakages where a trait is resolved on such a type.\n\nThis PR emits a future-compatibility warning when it sees this happen.", "tree": {"sha": "63e137a34f2935f1fc91eb796962a7a7fa5642a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e137a34f2935f1fc91eb796962a7a7fa5642a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8ce9efb9ff27af430d398ca472049e3595aaa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8ce9efb9ff27af430d398ca472049e3595aaa6", "html_url": "https://github.com/rust-lang/rust/commit/4f8ce9efb9ff27af430d398ca472049e3595aaa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8ce9efb9ff27af430d398ca472049e3595aaa6/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca202fe181ec52998fe8843e87528bbd920605d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca202fe181ec52998fe8843e87528bbd920605d5", "html_url": "https://github.com/rust-lang/rust/commit/ca202fe181ec52998fe8843e87528bbd920605d5"}, {"sha": "42f3ac5ea610b351e404dd30199d13ffc91617d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f3ac5ea610b351e404dd30199d13ffc91617d5", "html_url": "https://github.com/rust-lang/rust/commit/42f3ac5ea610b351e404dd30199d13ffc91617d5"}], "stats": {"total": 355, "additions": 249, "deletions": 106}, "files": [{"sha": "70f03e02f46d9b9c6a8dd7c22c7afaa2cd4f31ae", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -192,6 +192,13 @@ declare_lint! {\n     \"lifetimes or labels named `'_` were erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n+    Warn,\n+    \"attempt to resolve a trait on an expression whose type cannot be inferred but which \\\n+     currently defaults to ()\"\n+}\n+\n declare_lint! {\n     pub SAFE_EXTERN_STATICS,\n     Warn,\n@@ -272,6 +279,7 @@ impl LintPass for HardwiredLints {\n             SUPER_OR_SELF_IN_GLOBAL_PATH,\n             HR_LIFETIME_IN_ASSOC_TYPE,\n             LIFETIME_UNDERSCORE,\n+            RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n             EXTRA_REQUIREMENT_IN_IMPL,"}, {"sha": "9d1bcb8164a9e08c477ef02cab8e6f6f7bb700de", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -1199,7 +1199,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           PatKind::Tuple(ref subpats, ddpos) => {\n             // (p1, ..., pN)\n             let expected_len = match self.pat_ty(&pat)?.sty {\n-                ty::TyTuple(ref tys) => tys.len(),\n+                ty::TyTuple(ref tys, _) => tys.len(),\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {"}, {"sha": "f1268521d67086781de6701def629e40d4ab251e", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                let ty = tcx.intern_tup(&[ty, tcx.types.bool]);\n+                let ty = tcx.intern_tup(&[ty, tcx.types.bool], false);\n                 Some(ty)\n             }\n             &Rvalue::UnaryOp(_, ref operand) => {\n@@ -184,7 +184,8 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                     AggregateKind::Tuple => {\n                         Some(tcx.mk_tup(\n-                            ops.iter().map(|op| op.ty(mir, tcx))\n+                            ops.iter().map(|op| op.ty(mir, tcx)),\n+                            false\n                         ))\n                     }\n                     AggregateKind::Adt(def, _, substs, _) => {"}, {"sha": "41f3f825c3d191e16770527fd80819af4ef77719", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -52,6 +52,7 @@ use std::mem;\n use std::rc::Rc;\n use syntax::abi::Abi;\n use hir;\n+use lint;\n use util::nodemap::FxHashMap;\n \n struct InferredObligationsSnapshotVecDelegate<'tcx> {\n@@ -407,19 +408,62 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"select({:?})\", obligation);\n         assert!(!obligation.predicate.has_escaping_regions());\n \n+        let tcx = self.tcx();\n         let dep_node = obligation.predicate.dep_node();\n-        let _task = self.tcx().dep_graph.in_task(dep_node);\n+        let _task = tcx.dep_graph.in_task(dep_node);\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n-        match self.candidate_from_obligation(&stack)? {\n-            None => Ok(None),\n+        let ret = match self.candidate_from_obligation(&stack)? {\n+            None => None,\n             Some(candidate) => {\n                 let mut candidate = self.confirm_candidate(obligation, candidate)?;\n                 let inferred_obligations = (*self.inferred_obligations).into_iter().cloned();\n                 candidate.nested_obligations_mut().extend(inferred_obligations);\n-                Ok(Some(candidate))\n+                Some(candidate)\n             },\n+        };\n+\n+        // Test whether this is a `()` which was produced by defaulting a\n+        // diverging type variable with `!` disabled. If so, we may need\n+        // to raise a warning.\n+        if obligation.predicate.skip_binder().self_ty().is_defaulted_unit() {\n+            let mut raise_warning = true;\n+            // Don't raise a warning if the trait is implemented for ! and only\n+            // permits a trivial implementation for !. This stops us warning\n+            // about (for example) `(): Clone` becoming `!: Clone` because such\n+            // a switch can't cause code to stop compiling or execute\n+            // differently.\n+            let mut never_obligation = obligation.clone();\n+            let def_id = never_obligation.predicate.skip_binder().trait_ref.def_id;\n+            never_obligation.predicate = never_obligation.predicate.map_bound(|mut trait_pred| {\n+                // Swap out () with ! so we can check if the trait is impld for !\n+                {\n+                    let mut trait_ref = &mut trait_pred.trait_ref;\n+                    let unit_substs = trait_ref.substs;\n+                    let mut never_substs = Vec::with_capacity(unit_substs.len());\n+                    never_substs.push(From::from(tcx.types.never));\n+                    never_substs.extend(&unit_substs[1..]);\n+                    trait_ref.substs = tcx.intern_substs(&never_substs);\n+                }\n+                trait_pred\n+            });\n+            if let Ok(Some(..)) = self.select(&never_obligation) {\n+                if !tcx.trait_relevant_for_never(def_id) {\n+                    // The trait is also implemented for ! and the resulting\n+                    // implementation cannot actually be invoked in any way.\n+                    raise_warning = false;\n+                }\n+            }\n+\n+            if raise_warning {\n+                tcx.sess.add_lint(lint::builtin::RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n+                                  obligation.cause.body_id,\n+                                  obligation.cause.span,\n+                                  format!(\"code relies on type inference rules which are likely \\\n+                                           to change\"));\n+            }\n         }\n+        Ok(ret)\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -1744,15 +1788,15 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) => Never,\n \n-            ty::TyTuple(tys) => {\n+            ty::TyTuple(tys, _) => {\n                 Where(ty::Binder(tys.last().into_iter().cloned().collect()))\n             }\n \n             ty::TyAdt(def, substs) => {\n                 let sized_crit = def.sized_constraint(self.tcx());\n                 // (*) binder moved here\n                 Where(ty::Binder(match sized_crit.sty {\n-                    ty::TyTuple(tys) => tys.to_vec().subst(self.tcx(), substs),\n+                    ty::TyTuple(tys, _) => tys.to_vec().subst(self.tcx(), substs),\n                     ty::TyBool => vec![],\n                     _ => vec![sized_crit.subst(self.tcx(), substs)]\n                 }))\n@@ -1799,7 +1843,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(vec![element_ty]))\n             }\n \n-            ty::TyTuple(tys) => {\n+            ty::TyTuple(tys, _) => {\n                 // (*) binder moved here\n                 Where(ty::Binder(tys.to_vec()))\n             }\n@@ -1874,7 +1918,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 vec![element_ty]\n             }\n \n-            ty::TyTuple(ref tys) => {\n+            ty::TyTuple(ref tys, _) => {\n                 // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n                 tys.to_vec()\n             }"}, {"sha": "7b2882bb64f2cb97a13825a6e66ae7eefcf0b877", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -489,7 +489,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let arguments_tuple = match tuple_arguments {\n             TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n             TupleArgumentsFlag::Yes =>\n-                self.intern_tup(sig.skip_binder().inputs()),\n+                self.intern_tup(sig.skip_binder().inputs(), false),\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,"}, {"sha": "56621c57eb8f7bed86f3b7c10f99b6fbd565acc1", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -201,7 +201,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                         |ty| tc_ty(tcx, &ty, cache))\n                 }\n \n-                ty::TyTuple(ref tys) => {\n+                ty::TyTuple(ref tys, _) => {\n                     TypeContents::union(&tys[..],\n                                         |ty| tc_ty(tcx, *ty, cache))\n                 }"}, {"sha": "a0eae33c4402b20c5a03478840ae208efe05bc54", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -1384,23 +1384,24 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n-    pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        self.mk_ty(TyTuple(self.intern_type_list(ts)))\n+    pub fn intern_tup(self, ts: &[Ty<'tcx>], defaulted: bool) -> Ty<'tcx> {\n+        self.mk_ty(TyTuple(self.intern_type_list(ts), defaulted))\n     }\n \n-    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n-        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts))))\n+    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I,\n+                                                     defaulted: bool) -> I::Output {\n+        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts), defaulted)))\n     }\n \n     pub fn mk_nil(self) -> Ty<'tcx> {\n-        self.intern_tup(&[])\n+        self.intern_tup(&[], false)\n     }\n \n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n         if self.sess.features.borrow().never_type {\n             self.types.never\n         } else {\n-            self.mk_nil()\n+            self.intern_tup(&[], true)\n         }\n     }\n "}, {"sha": "3ab3fc899e78c6754305f18f307f6534c3cc5378", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyNever => self.to_string(),\n-            ty::TyTuple(ref tys) if tys.is_empty() => self.to_string(),\n+            ty::TyTuple(ref tys, _) if tys.is_empty() => self.to_string(),\n \n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n             ty::TyArray(_, n) => format!(\"array of {} elements\", n),\n@@ -209,7 +209,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n                     |p| format!(\"trait {}\", tcx.item_path_str(p.def_id())))\n             }\n             ty::TyClosure(..) => \"closure\".to_string(),\n-            ty::TyTuple(_) => \"tuple\".to_string(),\n+            ty::TyTuple(..) => \"tuple\".to_string(),\n             ty::TyInfer(ty::TyVar(_)) => \"inferred type\".to_string(),\n             ty::TyInfer(ty::IntVar(_)) => \"integral variable\".to_string(),\n             ty::TyInfer(ty::FloatVar(_)) => \"floating-point variable\".to_string(),"}, {"sha": "981cf0897a034f2f68e1d600bdaac3e4448bbe31", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -72,7 +72,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             Some(ClosureSimplifiedType(def_id))\n         }\n         ty::TyNever => Some(NeverSimplifiedType),\n-        ty::TyTuple(ref tys) => {\n+        ty::TyTuple(ref tys, _) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n         ty::TyFnDef(.., ref f) | ty::TyFnPtr(ref f) => {"}, {"sha": "2012917f93a87e91669d74d8b61442ee97763e9f", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -151,7 +151,7 @@ impl FlagComputation {\n                 self.add_ty(m.ty);\n             }\n \n-            &ty::TyTuple(ref ts) => {\n+            &ty::TyTuple(ref ts, _) => {\n                 self.add_tys(&ts[..]);\n             }\n "}, {"sha": "18a3f1a218d854e00d9e2f4204152234b08ba18f", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             },\n \n             TyNever => DefIdForest::full(tcx),\n-            TyTuple(ref tys) => {\n+            TyTuple(ref tys, _) => {\n                 DefIdForest::union(tcx, tys.iter().map(|ty| {\n                     ty.uninhabited_from(visited, tcx)\n                 }))"}, {"sha": "f45f00b4dec96bbf20590469c44687b98858a625", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -319,9 +319,9 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyRawPtr(mt) |\n         ty::TyRef(_, mt) => characteristic_def_id_of_type(mt.ty),\n \n-        ty::TyTuple(ref tys) => tys.iter()\n-                                   .filter_map(|ty| characteristic_def_id_of_type(ty))\n-                                   .next(),\n+        ty::TyTuple(ref tys, _) => tys.iter()\n+                                      .filter_map(|ty| characteristic_def_id_of_type(ty))\n+                                      .next(),\n \n         ty::TyFnDef(def_id, ..) |\n         ty::TyClosure(def_id, _) => Some(def_id),"}, {"sha": "ff3ac3586a78778b69a84b0bbd9b8ec9b2347f27", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -791,7 +791,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n                     Some(&variant.memory_index[..]))\n             }\n             // Can we use one of the fields in this tuple?\n-            (&Univariant { ref variant, .. }, &ty::TyTuple(tys)) => {\n+            (&Univariant { ref variant, .. }, &ty::TyTuple(tys, _)) => {\n                 Struct::non_zero_field_paths(infcx, tys.iter().cloned(),\n                     Some(&variant.memory_index[..]))\n             }\n@@ -1157,7 +1157,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                 Univariant { variant: st, non_zero: false }\n             }\n \n-            ty::TyTuple(tys) => {\n+            ty::TyTuple(tys, _) => {\n                 // FIXME(camlorn): if we ever allow unsized tuples, this needs to be checked.\n                 // See the univariant case below to learn how.\n                 let st = Struct::new(dl,"}, {"sha": "c9ae3b3df028c80ddb07bf7034087ed4f0c36dc5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -197,6 +197,17 @@ impl AssociatedItem {\n             AssociatedKind::Type => Def::AssociatedTy(self.def_id),\n         }\n     }\n+\n+    /// Tests whether the associated item admits a non-trivial implementation\n+    /// for !\n+    pub fn relevant_for_never<'tcx>(&self) -> bool {\n+        match self.kind {\n+            AssociatedKind::Const => true,\n+            AssociatedKind::Type => true,\n+            // FIXME(canndrew): Be more thorough here, check if any argument is uninhabited.\n+            AssociatedKind::Method => !self.method_has_self_argument,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Copy, RustcEncodable, RustcDecodable)]\n@@ -1603,7 +1614,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             _ if tys.references_error() => tcx.types.err,\n             0 => tcx.types.bool,\n             1 => tys[0],\n-            _ => tcx.intern_tup(&tys[..])\n+            _ => tcx.intern_tup(&tys[..], false)\n         };\n \n         let old = tcx.adt_sized_constraint.borrow().get(&self.did).cloned();\n@@ -1638,7 +1649,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![ty]\n             }\n \n-            TyTuple(ref tys) => {\n+            TyTuple(ref tys, _) => {\n                 match tys.last() {\n                     None => vec![],\n                     Some(ty) => self.sized_constraint_for_ty(tcx, stack, ty)\n@@ -1652,7 +1663,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                        .subst(tcx, substs);\n                 debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\",\n                        ty, adt_ty);\n-                if let ty::TyTuple(ref tys) = adt_ty.sty {\n+                if let ty::TyTuple(ref tys, _) = adt_ty.sty {\n                     tys.iter().flat_map(|ty| {\n                         self.sized_constraint_for_ty(tcx, stack, ty)\n                     }).collect()\n@@ -2010,6 +2021,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn trait_relevant_for_never(self, did: DefId) -> bool {\n+        self.associated_items(did).any(|item| {\n+            item.relevant_for_never()\n+        })\n+    }\n+\n     pub fn custom_coerce_unsized_kind(self, did: DefId) -> adjustment::CustomCoerceUnsized {\n         self.custom_coerce_unsized_kinds.memoize(did, || {\n             let (kind, src) = if did.krate != LOCAL_CRATE {"}, {"sha": "adedf78bba7c013e922cbc40cb89fcbaf67e9ced", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -447,10 +447,11 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_slice(t))\n         }\n \n-        (&ty::TyTuple(as_), &ty::TyTuple(bs)) =>\n+        (&ty::TyTuple(as_, a_defaulted), &ty::TyTuple(bs, b_defaulted)) =>\n         {\n             if as_.len() == bs.len() {\n-                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)))?)\n+                let defaulted = a_defaulted || b_defaulted;\n+                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)), defaulted)?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(\n                     expected_found(relation, &as_.len(), &bs.len())))"}, {"sha": "aa74e7cc0d0430c809f0195b34fcf98a4bdc2170", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -474,7 +474,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAdt(tid, substs) => ty::TyAdt(tid, substs.fold_with(folder)),\n             ty::TyDynamic(ref trait_ty, ref region) =>\n                 ty::TyDynamic(trait_ty.fold_with(folder), region.fold_with(folder)),\n-            ty::TyTuple(ts) => ty::TyTuple(ts.fold_with(folder)),\n+            ty::TyTuple(ts, defaulted) => ty::TyTuple(ts.fold_with(folder), defaulted),\n             ty::TyFnDef(def_id, substs, f) => {\n                 ty::TyFnDef(def_id,\n                             substs.fold_with(folder),\n@@ -511,7 +511,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAdt(_, substs) => substs.visit_with(visitor),\n             ty::TyDynamic(ref trait_ty, ref reg) =>\n                 trait_ty.visit_with(visitor) || reg.visit_with(visitor),\n-            ty::TyTuple(ts) => ts.visit_with(visitor),\n+            ty::TyTuple(ts, _) => ts.visit_with(visitor),\n             ty::TyFnDef(_, substs, ref f) => {\n                 substs.visit_with(visitor) || f.visit_with(visitor)\n             }"}, {"sha": "9bba4c6e37a69dda4b77460bd6a0f5e5fd4b6d22", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -151,7 +151,11 @@ pub enum TypeVariants<'tcx> {\n     TyNever,\n \n     /// A tuple type.  For example, `(i32, bool)`.\n-    TyTuple(&'tcx Slice<Ty<'tcx>>),\n+    /// The bool indicates whether this is a unit tuple and was created by\n+    /// defaulting a diverging type variable with feature(never_type) disabled.\n+    /// It's only purpose is for raising future-compatibility warnings for when\n+    /// diverging type variables start defaulting to ! instead of ().\n+    TyTuple(&'tcx Slice<Ty<'tcx>>, bool),\n \n     /// The projection of an associated type.  For example,\n     /// `<T as Trait<..>>::N`.\n@@ -961,7 +965,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_nil(&self) -> bool {\n         match self.sty {\n-            TyTuple(ref tys) => tys.is_empty(),\n+            TyTuple(ref tys, _) => tys.is_empty(),\n             _ => false\n         }\n     }\n@@ -973,6 +977,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    // Test whether this is a `()` which was produced by defaulting a\n+    // diverging type variable with feature(never_type) disabled.\n+    pub fn is_defaulted_unit(&self) -> bool {\n+        match self.sty {\n+            TyTuple(_, true) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Checks whether a type is visibly uninhabited from a particular module.\n     /// # Example\n     /// ```rust\n@@ -1355,7 +1368,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TySlice(_) |\n             TyRawPtr(_) |\n             TyNever |\n-            TyTuple(_) |\n+            TyTuple(..) |\n             TyParam(_) |\n             TyInfer(_) |\n             TyError => {"}, {"sha": "b01b77bbcf8a5c5e184b9a03ab06df54e037f2b9", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // Don't use `struct_variant`, this may be a univariant enum.\n                 adt.variants[0].fields.get(i).map(|f| f.ty(self, substs))\n             }\n-            (&TyTuple(ref v), None) => v.get(i).cloned(),\n+            (&TyTuple(ref v, _), None) => v.get(i).cloned(),\n             _ => None\n         }\n     }\n@@ -466,8 +466,9 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n                     self.def_id(d);\n                 }\n             }\n-            TyTuple(tys) => {\n+            TyTuple(tys, defaulted) => {\n                 self.hash(tys.len());\n+                self.hash(defaulted);\n             }\n             TyParam(p) => {\n                 self.hash(p.idx);\n@@ -675,7 +676,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                                                seen: &mut Vec<Ty<'tcx>>, ty: Ty<'tcx>)\n                                                -> Representability {\n             match ty.sty {\n-                TyTuple(ref ts) => {\n+                TyTuple(ref ts, _) => {\n                     find_nonrepresentable(tcx, sp, seen, ts.iter().cloned())\n                 }\n                 // Fixed-length vectors."}, {"sha": "01f31e5024c0dfeaf258100b77b17e136193a493", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -112,7 +112,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyClosure(_, ref substs) => {\n             stack.extend(substs.substs.types().rev());\n         }\n-        ty::TyTuple(ts) => {\n+        ty::TyTuple(ts, _) => {\n             stack.extend(ts.iter().cloned().rev());\n         }\n         ty::TyFnDef(_, substs, ref ft) => {"}, {"sha": "8a5bd6862cf4552c099b431fa344c81142dc7876", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     self.require_sized(subty, traits::SliceOrArrayElem);\n                 }\n \n-                ty::TyTuple(ref tys) => {\n+                ty::TyTuple(ref tys, _) => {\n                     if let Some((_last, rest)) = tys.split_last() {\n                         for elem in rest {\n                             self.require_sized(elem, traits::TupleElem);"}, {"sha": "5d6ee1a277a5f88049c9d68a33dc1f462a76066a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -156,7 +156,7 @@ pub fn parameterized(f: &mut fmt::Formatter,\n \n     if !verbose && fn_trait_kind.is_some() && projections.len() == 1 {\n         let projection_ty = projections[0].ty;\n-        if let TyTuple(ref args) = substs.type_at(1).sty {\n+        if let TyTuple(ref args, _) = substs.type_at(1).sty {\n             return fn_sig(f, args, false, projection_ty);\n         }\n     }\n@@ -724,7 +724,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 write!(f, \"{}\", tm)\n             }\n             TyNever => write!(f, \"!\"),\n-            TyTuple(ref tys) => {\n+            TyTuple(ref tys, _) => {\n                 write!(f, \"(\")?;\n                 let mut tys = tys.iter();\n                 if let Some(&ty) = tys.next() {"}, {"sha": "dbab3bca52b4eccc5caba872e2d2d476de468cdf", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -423,7 +423,7 @@ fn add_fragment_siblings_for_extension<'a, 'tcx>(this: &MoveData<'tcx>,\n     };\n \n     match parent_ty.sty {\n-        ty::TyTuple(ref v) => {\n+        ty::TyTuple(ref v, _) => {\n             let tuple_idx = match *origin_field_name {\n                 mc::PositionalField(tuple_idx) => tuple_idx,\n                 mc::NamedField(_) =>"}, {"sha": "d2f744bde2d63d33444202a38a1515d3fec1ae50", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -713,7 +713,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx).collect();\n                 self.open_drop_for_tuple(c, &tys)\n             }\n-            ty::TyTuple(tys) => {\n+            ty::TyTuple(tys, _) => {\n                 self.open_drop_for_tuple(c, tys)\n             }\n             ty::TyAdt(def, _) if def.is_box() => {"}, {"sha": "7a64ff7114a7eaba36871218c566db2e58c54c2e", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -721,7 +721,7 @@ fn pat_constructors(_cx: &mut MatchCheckCtxt,\n fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize {\n     debug!(\"constructor_arity({:?}, {:?})\", ctor, ty);\n     match ty.sty {\n-        ty::TyTuple(ref fs) => fs.len(),\n+        ty::TyTuple(ref fs, _) => fs.len(),\n         ty::TySlice(..) | ty::TyArray(..) => match *ctor {\n             Slice(length) => length,\n             ConstantValue(_) => 0,\n@@ -745,7 +745,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n {\n     debug!(\"constructor_sub_pattern_tys({:?}, {:?})\", ctor, ty);\n     match ty.sty {\n-        ty::TyTuple(ref fs) => fs.into_iter().map(|t| *t).collect(),\n+        ty::TyTuple(ref fs, _) => fs.into_iter().map(|t| *t).collect(),\n         ty::TySlice(ty) | ty::TyArray(ty, _) => match *ctor {\n             Slice(length) => repeat(ty).take(length).collect(),\n             ConstantValue(_) => vec![],"}, {"sha": "609fb3e39d62cc8406987ca1ebd8e6fffb3d0e03", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n             PatKind::Tuple(ref subpatterns, ddpos) => {\n                 let ty = self.tables.node_id_to_type(pat.id);\n                 match ty.sty {\n-                    ty::TyTuple(ref tys) => {\n+                    ty::TyTuple(ref tys, _) => {\n                         let subpatterns =\n                             subpatterns.iter()\n                                        .enumerate_and_adjust(tys.len(), ddpos)"}, {"sha": "5481de1811d78b91b411b6b470b288bec54dc154", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_pair(&self, ty1: Ty<'tcx>, ty2: Ty<'tcx>) -> Ty<'tcx> {\n-        self.infcx.tcx.intern_tup(&[ty1, ty2])\n+        self.infcx.tcx.intern_tup(&[ty1, ty2], false)\n     }\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n@@ -803,8 +803,8 @@ fn walk_ty() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let uint_ty = tcx.types.usize;\n-        let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n-        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty]);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty], false);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty], false);\n         let walked: Vec<_> = tup2_ty.walk().collect();\n         assert_eq!(walked,\n                    [tup2_ty, tup1_ty, int_ty, uint_ty, int_ty, uint_ty, tup1_ty, int_ty,\n@@ -818,8 +818,8 @@ fn walk_ty_skip_subtree() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let uint_ty = tcx.types.usize;\n-        let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n-        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty]);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty], false);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty], false);\n \n         // types we expect to see (in order), plus a boolean saying\n         // whether to skip the subtree."}, {"sha": "8fb1740e66eacbfccf65cd8991bcd67aaea28130", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -219,6 +219,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LIFETIME_UNDERSCORE),\n             reference: \"issue #36892 <https://github.com/rust-lang/rust/issues/36892>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n+            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/35112>\","}, {"sha": "e42e038ea4d6c5a53779943ccb140522a9e3f442", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -532,7 +532,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                            consider using a `*const libc::c_char`\")\n             }\n \n-            ty::TyTuple(_) => {\n+            ty::TyTuple(..) => {\n                 FfiUnsafe(\"found Rust tuple type in foreign module; \\\n                            consider using a struct instead\")\n             }"}, {"sha": "28ce9126019ebdebb86da7436e62674b52e30474", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n \n         let t = cx.tables.expr_ty(&expr);\n         let warned = match t.sty {\n-            ty::TyTuple(ref tys) if tys.is_empty() => return,\n+            ty::TyTuple(ref tys, _) if tys.is_empty() => return,\n             ty::TyNever => return,\n             ty::TyBool => return,\n             ty::TyAdt(def, _) => {"}, {"sha": "dad1d713168cd43e39c66608a1909ba8440d9f4c", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n-            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty]);\n+            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty], false);\n             let result_value = self.temp(result_tup);\n \n             self.cfg.push_assign(block, source_info,"}, {"sha": "529fe564af02bc54e4dce16e0e046298fe381816", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -282,7 +282,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         })\n                     }\n                 }\n-                ty::TyTuple(tys) => {\n+                ty::TyTuple(tys, _) => {\n                     return match tys.get(field.index()) {\n                         Some(&ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {"}, {"sha": "41f91a1d2acc17ac234f00824cd88655868bde26", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -1440,7 +1440,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                             }.lower(self.tcx));\n                         }\n                     }\n-                    ty::TyTuple(_) => {}\n+                    ty::TyTuple(..) => {}\n                     _ => span_bug!(ex.span,\n                                    \"Expected struct or tuple type, found {:?}\",\n                                    ty),"}, {"sha": "a476b1d29e5fb823ef8ffb9a605c2ab474210ba5", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -367,7 +367,7 @@ impl FnType {\n             assert!(!sig.variadic && extra_args.is_empty());\n \n             match sig.inputs().last().unwrap().sty {\n-                ty::TyTuple(ref tupled_arguments) => {\n+                ty::TyTuple(ref tupled_arguments, _) => {\n                     inputs = &sig.inputs()[0..sig.inputs().len() - 1];\n                     &tupled_arguments[..]\n                 }"}, {"sha": "bc1e07e708c248e5dc051b450ec4fa6d5230ff85", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -72,7 +72,7 @@ pub fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n                 monomorphize::field_ty(cx.tcx(), substs, f)\n             }).collect::<Vec<_>>()\n         },\n-        ty::TyTuple(fields) => fields.to_vec(),\n+        ty::TyTuple(fields, _) => fields.to_vec(),\n         ty::TyClosure(def_id, substs) => {\n             if variant_index > 0 { bug!(\"{} is a closure, which only has one variant\", t);}\n             substs.upvar_tys(def_id, cx.tcx()).collect()"}, {"sha": "c6b86c6ba48deed1ee9f5a775409b5e0c8f6fbb2", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -485,7 +485,7 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n         }\n     };\n     let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n-    let tuple_input_ty = tcx.intern_tup(sig.inputs());\n+    let tuple_input_ty = tcx.intern_tup(sig.inputs(), false);\n     let sig = tcx.mk_fn_sig(\n         [bare_fn_ty_maybe_ref, tuple_input_ty].iter().cloned(),\n         sig.output(),"}, {"sha": "89f5c00e9c11a6c6bf1e911f6c6e3e61880a75f9", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -823,7 +823,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                 output.push(TransItem::DropGlue(DropGlueKind::Ty(inner_type)));\n             }\n         }\n-        ty::TyTuple(args) => {\n+        ty::TyTuple(args, _) => {\n             for arg in args {\n                 let arg = glue::get_drop_glue_type(scx, arg);\n                 if scx.type_needs_drop(arg) {"}, {"sha": "725b0e06e30888fbbab359915defb8c38da90169", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -93,7 +93,7 @@ pub fn type_pair_fields<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)\n                 }\n             }))\n         }\n-        ty::TyTuple(tys) => {\n+        ty::TyTuple(tys, _) => {\n             if tys.len() != 2 {\n                 return None;\n             }"}, {"sha": "c83e2f4854bf5cda8cbfd195df2b58d6462b0a84", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -383,7 +383,7 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     // return type\n     signature_metadata.push(match signature.output().sty {\n-        ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n+        ty::TyTuple(ref tys, _) if tys.is_empty() => ptr::null_mut(),\n         _ => type_metadata(cx, signature.output(), span)\n     });\n \n@@ -528,7 +528,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyFloat(_) => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n-        ty::TyTuple(ref elements) if elements.is_empty() => {\n+        ty::TyTuple(ref elements, _) if elements.is_empty() => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n         ty::TyArray(typ, len) => {\n@@ -603,7 +603,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                     usage_site_span).finalize(cx)\n             }\n         },\n-        ty::TyTuple(ref elements) => {\n+        ty::TyTuple(ref elements, _) => {\n             prepare_tuple_metadata(cx,\n                                    t,\n                                    &elements[..],\n@@ -706,7 +706,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let (name, encoding) = match t.sty {\n         ty::TyNever => (\"!\", DW_ATE_unsigned),\n-        ty::TyTuple(ref elements) if elements.is_empty() =>\n+        ty::TyTuple(ref elements, _) if elements.is_empty() =>\n             (\"()\", DW_ATE_unsigned),\n         ty::TyBool => (\"bool\", DW_ATE_boolean),\n         ty::TyChar => (\"char\", DW_ATE_unsigned_char),"}, {"sha": "501f891befa8dafa279002972a0610e9571ac39d", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -295,7 +295,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         // Return type -- llvm::DIBuilder wants this at index 0\n         signature.push(match sig.output().sty {\n-            ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n+            ty::TyTuple(ref tys, _) if tys.is_empty() => ptr::null_mut(),\n             _ => type_metadata(cx, sig.output(), syntax_pos::DUMMY_SP)\n         });\n \n@@ -311,7 +311,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n \n         if abi == Abi::RustCall && !sig.inputs().is_empty() {\n-            if let ty::TyTuple(args) = sig.inputs()[sig.inputs().len() - 1].sty {\n+            if let ty::TyTuple(args, _) = sig.inputs()[sig.inputs().len() - 1].sty {\n                 for &argument_type in args {\n                     signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n                 }"}, {"sha": "018bbb6e97d345167e46c9edfec272fa803f58f4", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -48,7 +48,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, def.did, qualified, output);\n             push_type_params(cx, substs, output);\n         },\n-        ty::TyTuple(component_types) => {\n+        ty::TyTuple(component_types, _) => {\n             output.push('(');\n             for &component_type in component_types {\n                 push_debuginfo_type_name(cx, component_type, true, output);"}, {"sha": "fdefd37549ced1251245822615473da33c8f46ab", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -442,7 +442,7 @@ fn drop_structural_ty<'a, 'tcx>(\n             cx = tvec::slice_for_each(&cx, ptr.llval, unit_ty, ptr.llextra,\n                 |bb, vv| drop_ty(bb, LvalueRef::new_sized_ty(vv, unit_ty)));\n         }\n-        ty::TyTuple(ref args) => {\n+        ty::TyTuple(ref args, _) => {\n             for (i, arg) in args.iter().enumerate() {\n                 let llfld_a = ptr.trans_field_ptr(&cx, i);\n                 drop_ty(&cx, LvalueRef::new_sized_ty(llfld_a, *arg));"}, {"sha": "027779aca63e4e03f1432873278301674aedebc2", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         let tuple = self.trans_operand(bcx, operand);\n \n         let arg_types = match tuple.ty.sty {\n-            ty::TyTuple(ref tys) => tys,\n+            ty::TyTuple(ref tys, _) => tys,\n             _ => span_bug!(self.mir.span,\n                            \"bad final argument to \\\"rust-call\\\" fn {:?}\", tuple.ty)\n         };"}, {"sha": "c8a680d25195a023d823328b35b0325892ccec61", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -735,7 +735,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let rhs = self.const_operand(rhs, span)?;\n                 let ty = lhs.ty;\n                 let val_ty = op.ty(tcx, lhs.ty, rhs.ty);\n-                let binop_ty = tcx.intern_tup(&[val_ty, tcx.types.bool]);\n+                let binop_ty = tcx.intern_tup(&[val_ty, tcx.types.bool], false);\n                 let (lhs, rhs) = (lhs.llval, rhs.llval);\n                 assert!(!ty.is_fp());\n "}, {"sha": "8a0a97a56343955c8fd258b09097da0b76912171", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -384,7 +384,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             // individual LLVM function arguments.\n \n             let tupled_arg_tys = match arg_ty.sty {\n-                ty::TyTuple(ref tys) => tys,\n+                ty::TyTuple(ref tys, _) => tys,\n                 _ => bug!(\"spread argument isn't a tuple?!\")\n             };\n "}, {"sha": "81b241b4851756a2441c572254900f3a1331afd3", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                                              lhs.immediate(), rhs.immediate(),\n                                                              lhs.ty);\n                 let val_ty = op.ty(bcx.tcx(), lhs.ty, rhs.ty);\n-                let operand_ty = bcx.tcx().intern_tup(&[val_ty, bcx.tcx().types.bool]);\n+                let operand_ty = bcx.tcx().intern_tup(&[val_ty, bcx.tcx().types.bool], false);\n                 let operand = OperandRef {\n                     val: result,\n                     ty: operand_ty"}, {"sha": "04a6cb27501b3eab4000d02358d4d2103ca67948", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 self.push_def_path(adt_def.did, output);\n                 self.push_type_params(substs, iter::empty(), output);\n             },\n-            ty::TyTuple(component_types) => {\n+            ty::TyTuple(component_types, _) => {\n                 output.push('(');\n                 for &component_type in component_types {\n                     self.push_type_name(component_type, output);"}, {"sha": "87af3b6c5e1535bc4748624e367d36b73deb446b", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -74,7 +74,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n             Type::array(&llty, size)\n         }\n \n-        ty::TyTuple(ref tys) if tys.is_empty() => {\n+        ty::TyTuple(ref tys, _) if tys.is_empty() => {\n             Type::nil(cx)\n         }\n \n@@ -276,7 +276,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n         let sig = cx.tcx().erase_late_bound_regions_and_normalize(&f.sig);\n         FnType::new(cx, f.abi, &sig, &[]).llvm_type(cx).ptr_to()\n       }\n-      ty::TyTuple(ref tys) if tys.is_empty() => Type::nil(cx),\n+      ty::TyTuple(ref tys, _) if tys.is_empty() => Type::nil(cx),\n       ty::TyTuple(..) => {\n           adt::type_of(cx, t)\n       }"}, {"sha": "a3373f6da28526b17e2ae4f1bc65777404ad689e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -421,7 +421,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             span: output_span\n         };\n \n-        (self.tcx().mk_ty(ty::TyTuple(inputs)), output_binding)\n+        (self.tcx().mk_ty(ty::TyTuple(inputs, false)), output_binding)\n     }\n \n     /// Instantiates the path for the given trait reference, assuming that it's\n@@ -1170,7 +1170,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 tcx.types.never\n             },\n             hir::TyTup(ref fields) => {\n-                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)))\n+                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)), false)\n             }\n             hir::TyBareFn(ref bf) => {\n                 require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);"}, {"sha": "feed5752cf8fb6c3b92bbeb8dd7ccfb0eb93229a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let mut expected_len = elements.len();\n                 if ddpos.is_some() {\n                     // Require known type only when `..` is present\n-                    if let ty::TyTuple(ref tys) =\n+                    if let ty::TyTuple(ref tys, _) =\n                             self.structurally_resolved_type(pat.span, expected).sty {\n                         expected_len = tys.len();\n                     }\n@@ -176,7 +176,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     //       from all tuple elements isn't trivial.\n                     TypeVariableOrigin::TypeInference(pat.span)));\n                 let element_tys = tcx.mk_type_list(element_tys_iter);\n-                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys));\n+                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys, false));\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat(elem, &element_tys[i]);"}, {"sha": "7979edbf5e27a1c7c78536a1e8272b6662680db0", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n         fn_ty.sig.0 = self.tcx.mk_fn_sig(\n-            iter::once(self.tcx.intern_tup(fn_ty.sig.skip_binder().inputs())),\n+            iter::once(self.tcx.intern_tup(fn_ty.sig.skip_binder().inputs(), false)),\n             fn_ty.sig.skip_binder().output(),\n             fn_ty.sig.variadic()\n         );\n@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                arg_param_ty);\n \n         let input_tys = match arg_param_ty.sty {\n-            ty::TyTuple(tys) => tys.into_iter(),\n+            ty::TyTuple(tys, _) => tys.into_iter(),\n             _ => {\n                 return None;\n             }"}, {"sha": "f701bc3220848d452b0b51aa913751d676ab9137", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -489,7 +489,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n             Ok(())\n         }\n \n-        ty::TyTuple(tys) => {\n+        ty::TyTuple(tys, _) => {\n             for ty in tys {\n                 iterate_over_potentially_unsafe_regions_in_type(cx, context, ty, depth+1)?\n             }"}, {"sha": "cb4e85e842c2a8f3727cfad82a312fcfb7a3aecf", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -87,7 +87,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             \"cxchg\" | \"cxchgweak\" => (1, vec![tcx.mk_mut_ptr(param(ccx, 0)),\n                                               param(ccx, 0),\n                                               param(ccx, 0)],\n-                                      tcx.intern_tup(&[param(ccx, 0), tcx.types.bool])),\n+                                      tcx.intern_tup(&[param(ccx, 0), tcx.types.bool], false)),\n             \"load\" => (1, vec![tcx.mk_imm_ptr(param(ccx, 0))],\n                        param(ccx, 0)),\n             \"store\" => (1, vec![tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)],\n@@ -272,7 +272,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)],\n-                tcx.intern_tup(&[param(ccx, 0), tcx.types.bool])),\n+                tcx.intern_tup(&[param(ccx, 0), tcx.types.bool], false)),\n \n             \"unchecked_div\" | \"unchecked_rem\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n@@ -420,7 +420,7 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n \n     match *expected {\n         Void => match t.sty {\n-            ty::TyTuple(ref v) if v.is_empty() => {},\n+            ty::TyTuple(ref v, _) if v.is_empty() => {},\n             _ => simple_error(&format!(\"`{}`\", t), \"()\"),\n         },\n         // (The width we pass to LLVM doesn't concern the type checker.)\n@@ -494,7 +494,7 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n         }\n         Aggregate(_flatten, ref expected_contents) => {\n             match t.sty {\n-                ty::TyTuple(contents) => {\n+                ty::TyTuple(contents, _) => {\n                     if contents.len() != expected_contents.len() {\n                         simple_error(&format!(\"tuple with length {}\", contents.len()),\n                                      &format!(\"tuple with length {}\", expected_contents.len()));"}, {"sha": "c4a366c2f17fe1ed336ac4bab56cd6c31a68551e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -1947,7 +1947,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Apply \"fallbacks\" to some types\n-    /// ! gets replaced with (), unconstrained ints with i32, and unconstrained floats with f64.\n+    /// unconstrained types get replaced with ! or  () (depending on whether\n+    /// feature(never_type) is enabled), unconstrained ints with i32, and\n+    /// unconstrained floats with f64.\n     fn default_type_parameters(&self) {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n@@ -2408,7 +2410,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n+                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..], false)],\n             };\n \n             self.check_argument_types(sp, &err_inputs[..], &[], args_no_rcvr,\n@@ -2505,16 +2507,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let formal_tys = if tuple_arguments == TupleArguments {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n-                ty::TyTuple(arg_types) if arg_types.len() != args.len() => {\n+                ty::TyTuple(arg_types, _) if arg_types.len() != args.len() => {\n                     parameter_count_error(tcx.sess, sp_args, arg_types.len(), args.len(),\n                                           \"E0057\", false, def_span);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n                 }\n-                ty::TyTuple(arg_types) => {\n+                ty::TyTuple(arg_types, _) => {\n                     expected_arg_tys = match expected_arg_tys.get(0) {\n                         Some(&ty) => match ty.sty {\n-                            ty::TyTuple(ref tys) => &tys,\n+                            ty::TyTuple(ref tys, _) => &tys,\n                             _ => &[]\n                         },\n                         None => &[]\n@@ -3072,7 +3074,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     })\n                 }\n-                ty::TyTuple(ref v) => {\n+                ty::TyTuple(ref v, _) => {\n                     tuple_like = true;\n                     v.get(idx.node).cloned()\n                 }\n@@ -3864,7 +3866,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           hir::ExprTup(ref elts) => {\n             let flds = expected.only_has_type(self).and_then(|ty| {\n                 match ty.sty {\n-                    ty::TyTuple(ref flds) => Some(&flds[..]),\n+                    ty::TyTuple(ref flds, _) => Some(&flds[..]),\n                     _ => None\n                 }\n             });\n@@ -3882,7 +3884,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 t\n             });\n-            let tuple = tcx.mk_tup(elt_ts_iter);\n+            let tuple = tcx.mk_tup(elt_ts_iter, false);\n             if tuple.references_error() {\n                 tcx.types.err\n             } else {\n@@ -3923,7 +3925,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               },\n                               base_t);\n                           // Try to give some advice about indexing tuples.\n-                          if let ty::TyTuple(_) = base_t.sty {\n+                          if let ty::TyTuple(..) = base_t.sty {\n                               let mut needs_note = true;\n                               // If the index is an integer, we can show the actual\n                               // fixed expression:"}, {"sha": "860f6d98370ad1926a192e20b1c164c1f99f9c0b", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -338,7 +338,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(generics, mt, variance);\n             }\n \n-            ty::TyTuple(subtys) => {\n+            ty::TyTuple(subtys, _) => {\n                 for &subty in subtys {\n                     self.add_constraints_from_ty(generics, subty, variance);\n                 }"}, {"sha": "dc2aa1f138d62d04eb74b385b1875aa9feb02c75", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -655,7 +655,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n         Some(did) if cx.tcx.lang_items.fn_trait_kind(did).is_some() => {\n             assert_eq!(types.len(), 1);\n             let inputs = match types[0].sty {\n-                ty::TyTuple(ref tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                ty::TyTuple(ref tys, _) => tys.iter().map(|t| t.clean(cx)).collect(),\n                 _ => {\n                     return PathParameters::AngleBracketed {\n                         lifetimes: lifetimes,\n@@ -667,7 +667,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n             let output = None;\n             // FIXME(#20299) return type comes from a projection now\n             // match types[1].sty {\n-            //     ty::TyTuple(ref v) if v.is_empty() => None, // -> ()\n+            //     ty::TyTuple(ref v, _) if v.is_empty() => None, // -> ()\n             //     _ => Some(types[1].clean(cx))\n             // };\n             PathParameters::Parenthesized {\n@@ -710,7 +710,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         // collect any late bound regions\n         let mut late_bounds = vec![];\n         for ty_s in self.input_types().skip(1) {\n-            if let ty::TyTuple(ts) = ty_s.sty {\n+            if let ty::TyTuple(ts, _) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n                         if let &ty::Region::ReLateBound(..) = *reg {\n@@ -1895,7 +1895,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     Never\n                 }\n             }\n-            ty::TyTuple(ref t) => Tuple(t.clean(cx)),\n+            ty::TyTuple(ref t, _) => Tuple(t.clean(cx)),\n \n             ty::TyProjection(ref data) => data.clean(cx),\n "}, {"sha": "5213a189714dd52fd865acae8421b0c15f9536ac", "filename": "src/test/compile-fail/defaulted-unit-warning.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8ce9efb9ff27af430d398ca472049e3595aaa6/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefaulted-unit-warning.rs?ref=4f8ce9efb9ff27af430d398ca472049e3595aaa6", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+#![allow(unreachable_code)]\n+#![deny(resolve_trait_on_defaulted_unit)]\n+\n+trait Deserialize: Sized {\n+    fn deserialize() -> Result<Self, String>;\n+}\n+\n+impl Deserialize for () {\n+    fn deserialize() -> Result<(), String> {\n+        Ok(())\n+    }\n+}\n+\n+fn doit() -> Result<(), String> {\n+    let _ = match Deserialize::deserialize() {\n+        //~^ ERROR code relies on type\n+        //~| WARNING previously accepted\n+        Ok(x) => x,\n+        Err(e) => return Err(e),\n+    };\n+    Ok(())\n+}\n+\n+trait ImplementedForUnitButNotNever {}\n+\n+impl ImplementedForUnitButNotNever for () {}\n+\n+fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n+\n+fn smeg() {\n+    let _x = return;\n+    foo(_x);\n+    //~^ ERROR code relies on type\n+    //~| WARNING previously accepted\n+}\n+\n+fn main() {\n+    let _ = doit();\n+}\n+"}]}