{"sha": "7064033bf6bc1ba1938eb72c909887ab013d902b", "node_id": "C_kwDOAAsO6NoAKDcwNjQwMzNiZjZiYzFiYTE5MzhlYjcyYzkwOTg4N2FiMDEzZDkwMmI", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-27T21:22:58Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-06T15:55:15Z"}, "message": "remove ItemLikeVisitor impl for ContraintContext\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "bfd18a64e916cb0d3c07180c7e65cbd6635ba6d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd18a64e916cb0d3c07180c7e65cbd6635ba6d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7064033bf6bc1ba1938eb72c909887ab013d902b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7064033bf6bc1ba1938eb72c909887ab013d902b", "html_url": "https://github.com/rust-lang/rust/commit/7064033bf6bc1ba1938eb72c909887ab013d902b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7064033bf6bc1ba1938eb72c909887ab013d902b/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a251644fa2adde5f46eea8d342b7e60e4716039", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a251644fa2adde5f46eea8d342b7e60e4716039", "html_url": "https://github.com/rust-lang/rust/commit/9a251644fa2adde5f46eea8d342b7e60e4716039"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "47a17b3206bf0d3a821ba17f7a14afa648d23d8d", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7064033bf6bc1ba1938eb72c909887ab013d902b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7064033bf6bc1ba1938eb72c909887ab013d902b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=7064033bf6bc1ba1938eb72c909887ab013d902b", "patch": "@@ -5,7 +5,7 @@\n \n use hir::def_id::{DefId, LocalDefId};\n use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::def::DefKind;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -62,61 +62,71 @@ pub fn add_constraints_from_crate<'a, 'tcx>(\n         constraints: Vec::new(),\n     };\n \n-    tcx.hir().visit_all_item_likes(&mut constraint_cx);\n+    let crate_items = tcx.hir_crate_items(());\n+\n+    for id in crate_items.items() {\n+        constraint_cx.check_item(id);\n+    }\n+\n+    for id in crate_items.trait_items() {\n+        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+            constraint_cx.check_node_helper(id.hir_id());\n+        }\n+    }\n+\n+    for id in crate_items.impl_items() {\n+        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+            constraint_cx.check_node_helper(id.hir_id());\n+        }\n+    }\n+\n+    for id in crate_items.foreign_items() {\n+        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+            constraint_cx.check_node_helper(id.hir_id());\n+        }\n+    }\n \n     constraint_cx\n }\n \n-impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        match item.kind {\n-            hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n-                self.visit_node_helper(item.hir_id());\n-\n-                if let hir::VariantData::Tuple(..) = *struct_def {\n-                    self.visit_node_helper(struct_def.ctor_hir_id().unwrap());\n+impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n+    fn check_item(&mut self, id: hir::ItemId) {\n+        let def_kind = self.tcx().hir().def_kind(id.def_id);\n+        match def_kind {\n+            DefKind::Struct | DefKind::Union => {\n+                let item = self.tcx().hir().item(id);\n+\n+                if let hir::ItemKind::Struct(ref struct_def, _)\n+                | hir::ItemKind::Union(ref struct_def, _) = item.kind\n+                {\n+                    self.check_node_helper(item.hir_id());\n+\n+                    if let hir::VariantData::Tuple(..) = *struct_def {\n+                        self.check_node_helper(struct_def.ctor_hir_id().unwrap());\n+                    }\n                 }\n             }\n+            DefKind::Enum => {\n+                let item = self.tcx().hir().item(id);\n \n-            hir::ItemKind::Enum(ref enum_def, _) => {\n-                self.visit_node_helper(item.hir_id());\n+                if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n+                    self.check_node_helper(item.hir_id());\n \n-                for variant in enum_def.variants {\n-                    if let hir::VariantData::Tuple(..) = variant.data {\n-                        self.visit_node_helper(variant.data.ctor_hir_id().unwrap());\n+                    for variant in enum_def.variants {\n+                        if let hir::VariantData::Tuple(..) = variant.data {\n+                            self.check_node_helper(variant.data.ctor_hir_id().unwrap());\n+                        }\n                     }\n                 }\n             }\n-\n-            hir::ItemKind::Fn(..) => {\n-                self.visit_node_helper(item.hir_id());\n+            DefKind::Fn => {\n+                self.check_node_helper(id.hir_id());\n             }\n-\n             _ => {}\n         }\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n-            self.visit_node_helper(trait_item.hir_id());\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        if let hir::ImplItemKind::Fn(..) = impl_item.kind {\n-            self.visit_node_helper(impl_item.hir_id());\n-        }\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n-        if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n-            self.visit_node_helper(foreign_item.hir_id());\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n-    fn visit_node_helper(&mut self, id: hir::HirId) {\n+    fn check_node_helper(&mut self, id: hir::HirId) {\n         let tcx = self.terms_cx.tcx;\n         let def_id = tcx.hir().local_def_id(id);\n         self.build_constraints_for_item(def_id);"}]}