{"sha": "9dd3d29ec848efd753667292277fd9f297d7db8d", "node_id": "C_kwDOAAsO6NoAKDlkZDNkMjllYzg0OGVmZDc1MzY2NzI5MjI3N2ZkOWYyOTdkN2RiOGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-27T07:24:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-27T07:24:39Z"}, "message": "Auto merge of #103601 - compiler-errors:no-opaque-probe-in-nll-relate, r=oli-obk\n\nRemove `commit_if_ok` probe from NLL type relation\n\nIt was not really necessary to add the `commit_if_ok` in #100092 -- I added it to protect us against weird inference error messages due to recursive RPIT calls, but we are always on the error path when this happens anyways, and I can't come up with an example that makes this manifest.\n\nFixes #103599\n\nr? `@oli-obk` since you reviewed #100092, feel free to re-roll.\n\n:b: :loudspeaker:  beta-nominating this since it's on beta (which forks in ~a week~ two days :fearful:) -- worst case we could revert the original PR on beta and land this on nightly, to give it some extra soak time...", "tree": {"sha": "6393506c984e64e78f554a9205deb89f8499cf8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6393506c984e64e78f554a9205deb89f8499cf8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dd3d29ec848efd753667292277fd9f297d7db8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd3d29ec848efd753667292277fd9f297d7db8d", "html_url": "https://github.com/rust-lang/rust/commit/9dd3d29ec848efd753667292277fd9f297d7db8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dd3d29ec848efd753667292277fd9f297d7db8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "html_url": "https://github.com/rust-lang/rust/commit/44fcfb0a9606fa08ea293a71f2e6d470227ef9df"}, {"sha": "901649eeb7a42d521b222ee42701cc06655e9cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/901649eeb7a42d521b222ee42701cc06655e9cd8", "html_url": "https://github.com/rust-lang/rust/commit/901649eeb7a42d521b222ee42701cc06655e9cd8"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "bd4a11550921a3b047eff18211a48379aa1b478e", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dd3d29ec848efd753667292277fd9f297d7db8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd3d29ec848efd753667292277fd9f297d7db8d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=9dd3d29ec848efd753667292277fd9f297d7db8d", "patch": "@@ -592,7 +592,7 @@ where\n             (&ty::Infer(ty::TyVar(vid)), _) => self.relate_ty_var((vid, b)),\n \n             (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {\n-                infcx.commit_if_ok(|_| infcx.super_combine_tys(self, a, b)).or_else(|err| {\n+                infcx.super_combine_tys(self, a, b).or_else(|err| {\n                     self.tcx().sess.delay_span_bug(\n                         self.delegate.span(),\n                         \"failure to relate an opaque to itself should result in an error later on\","}, {"sha": "043ae67f2e15cf7236dfff22f6feb5d7b74c1df5", "filename": "src/test/ui/impl-trait/issue-103599.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dd3d29ec848efd753667292277fd9f297d7db8d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd3d29ec848efd753667292277fd9f297d7db8d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103599.rs?ref=9dd3d29ec848efd753667292277fd9f297d7db8d", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+trait T {}\n+\n+fn wrap(x: impl T) -> impl T {\n+    //~^ WARN function cannot return without recursing\n+    wrap(wrap(x))\n+}\n+\n+fn main() {}"}, {"sha": "82038c1dceb370747f8b04cfff6322487815d508", "filename": "src/test/ui/impl-trait/issue-103599.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9dd3d29ec848efd753667292277fd9f297d7db8d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dd3d29ec848efd753667292277fd9f297d7db8d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103599.stderr?ref=9dd3d29ec848efd753667292277fd9f297d7db8d", "patch": "@@ -0,0 +1,14 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-103599.rs:5:1\n+   |\n+LL | fn wrap(x: impl T) -> impl T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |\n+LL |     wrap(wrap(x))\n+   |          ------- recursive call site\n+   |\n+   = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}