{"sha": "469fe7a1a3878342bce0e20100b526cc3a54b7c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWZlN2ExYTM4NzgzNDJiY2UwZTIwMTAwYjUyNmNjM2E1NGI3YzM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-05T16:44:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-05T16:44:28Z"}, "message": "Rollup merge of #40988 - eugene-bulkin:ascii-docs, r=frewsxcv\n\nAPI Docs: ascii\n\nAdd/update docs for the `ascii` module per #29341.\n\nr? @steveklabnik", "tree": {"sha": "b6376470f2d849628c4b0039caf45d5be9ed3a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6376470f2d849628c4b0039caf45d5be9ed3a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469fe7a1a3878342bce0e20100b526cc3a54b7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469fe7a1a3878342bce0e20100b526cc3a54b7c3", "html_url": "https://github.com/rust-lang/rust/commit/469fe7a1a3878342bce0e20100b526cc3a54b7c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469fe7a1a3878342bce0e20100b526cc3a54b7c3/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0aefe31f41d2a272f8f388d4be72c1754165fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aefe31f41d2a272f8f388d4be72c1754165fa7", "html_url": "https://github.com/rust-lang/rust/commit/b0aefe31f41d2a272f8f388d4be72c1754165fa7"}, {"sha": "a5d775d2b6b0b5f8e595d83b2fc10d74036aa36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d775d2b6b0b5f8e595d83b2fc10d74036aa36a", "html_url": "https://github.com/rust-lang/rust/commit/a5d775d2b6b0b5f8e595d83b2fc10d74036aa36a"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "b36253862094f4acf1c6aff41f1c89dd23193edb", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/469fe7a1a3878342bce0e20100b526cc3a54b7c3/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469fe7a1a3878342bce0e20100b526cc3a54b7c3/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=469fe7a1a3878342bce0e20100b526cc3a54b7c3", "patch": "@@ -9,6 +9,20 @@\n // except according to those terms.\n \n //! Operations on ASCII strings and characters.\n+//!\n+//! Most string operations in Rust act on UTF-8 strings. However, at times it\n+//! makes more sense to only consider the ASCII character set for a specific\n+//! operation.\n+//!\n+//! The [`AsciiExt`] trait provides methods that allow for character\n+//! operations that only act on the ASCII subset and leave non-ASCII characters\n+//! alone.\n+//!\n+//! The [`escape_default`] function provides an iterator over the bytes of an\n+//! escaped version of the character given.\n+//!\n+//! [`AsciiExt`]: trait.AsciiExt.html\n+//! [`escape_default`]: fn.escape_default.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -53,11 +67,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'a';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 97;\n     ///\n     /// assert!(ascii.is_ascii());\n-    /// assert!(!utf8.is_ascii());\n+    /// assert!(!non_ascii.is_ascii());\n     /// assert!(int_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -79,11 +93,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'a';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 97;\n     ///\n     /// assert_eq!('A', ascii.to_ascii_uppercase());\n-    /// assert_eq!('\u2764', utf8.to_ascii_uppercase());\n+    /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// assert_eq!(65, int_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n@@ -108,11 +122,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'A';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 65;\n     ///\n     /// assert_eq!('a', ascii.to_ascii_lowercase());\n-    /// assert_eq!('\u2764', utf8.to_ascii_lowercase());\n+    /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// assert_eq!(97, int_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n@@ -934,8 +948,12 @@ impl AsciiExt for char {\n     }\n }\n \n-/// An iterator over the escaped version of a byte, constructed via\n-/// `std::ascii::escape_default`.\n+/// An iterator over the escaped version of a byte.\n+///\n+/// This `struct` is created by the [`escape_default`] function. See its\n+/// documentation for more.\n+///\n+/// [`escape_default`]: fn.escape_default.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {\n     range: Range<usize>,\n@@ -966,6 +984,38 @@ pub struct EscapeDefault {\n ///\n /// assert_eq!(b'\\\\', escaped.next().unwrap());\n /// assert_eq!(b't', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\r');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'r', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\n');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'n', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\'');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\\'', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\"');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\"', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\\\');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\x9d');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'x', escaped.next().unwrap());\n+/// assert_eq!(b'9', escaped.next().unwrap());\n+/// assert_eq!(b'd', escaped.next().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {"}]}