{"sha": "adc0dc5871ac49543ae94827e7c4d411756e3d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYzBkYzU4NzFhYzQ5NTQzYWU5NDgyN2U3YzRkNDExNzU2ZTNkNDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T21:56:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-01T21:56:27Z"}, "message": "Rollup merge of #64950 - nnethercote:simplify-interners, r=varkor,spastorino\n\nSimplify interners\n\nSome code readability improvements.", "tree": {"sha": "978f8c357723da483f92ac6791f82f5f55172f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978f8c357723da483f92ac6791f82f5f55172f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc0dc5871ac49543ae94827e7c4d411756e3d47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdk8uLCRBK7hj4Ov3rIwAAdHIIADK13vS5I1j5NU3cuPbjThPw\nZhVt8OqvSZb7xfxMj2mVj0mxDjzvLfd05/urZeW79+i4hfctLLjRI7sl0bzJNMSx\nSeRjpcONscSHwECN98g+eMnsxAKJV1zlHUDH6JYbD0Ch1L42qmxgaeTf1oQLH8M5\nTsoXYC8irxp7zXTBFzfXP0i8oXjhlIB3xESFjyROh4KGnOx6TEP+zyAMsPaemRgZ\nxTlJ4/Hgpocg3Ox5R/tzqrdepMinobedYtBGIO8edAXfVVnNp5gLxtXw/5uffRei\ne8Spk1RCxIZ48AftwyLmdr/b8u/kAeCAF+r+UxDF8JXr/SCPE8Qlot08pIMc6ig=\n=OIX7\n-----END PGP SIGNATURE-----\n", "payload": "tree 978f8c357723da483f92ac6791f82f5f55172f74\nparent 66148f6393d24da662bce6df3e7c6e3f2ee58bba\nparent b2ae3f2a6b4d6e8c6a02173aa7db9a6370c3bc9c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569966987 +0200\ncommitter GitHub <noreply@github.com> 1569966987 +0200\n\nRollup merge of #64950 - nnethercote:simplify-interners, r=varkor,spastorino\n\nSimplify interners\n\nSome code readability improvements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc0dc5871ac49543ae94827e7c4d411756e3d47", "html_url": "https://github.com/rust-lang/rust/commit/adc0dc5871ac49543ae94827e7c4d411756e3d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc0dc5871ac49543ae94827e7c4d411756e3d47/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66148f6393d24da662bce6df3e7c6e3f2ee58bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/66148f6393d24da662bce6df3e7c6e3f2ee58bba", "html_url": "https://github.com/rust-lang/rust/commit/66148f6393d24da662bce6df3e7c6e3f2ee58bba"}, {"sha": "b2ae3f2a6b4d6e8c6a02173aa7db9a6370c3bc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ae3f2a6b4d6e8c6a02173aa7db9a6370c3bc9c", "html_url": "https://github.com/rust-lang/rust/commit/b2ae3f2a6b4d6e8c6a02173aa7db9a6370c3bc9c"}], "stats": {"total": 69, "additions": 22, "deletions": 47}, "files": [{"sha": "87b9917f340da3e9debbac2100c0d0bc90135a23", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 22, "deletions": 47, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/adc0dc5871ac49543ae94827e7c4d411756e3d47/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc0dc5871ac49543ae94827e7c4d411756e3d47/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=adc0dc5871ac49543ae94827e7c4d411756e3d47", "patch": "@@ -2189,90 +2189,65 @@ impl<'tcx> Borrow<[Goal<'tcx>]> for Interned<'tcx, List<Goal<'tcx>>> {\n     }\n }\n \n-macro_rules! intern_method {\n-    ($lt_tcx:tt, $name:ident: $method:ident($alloc:ty,\n-                                            $alloc_method:expr,\n-                                            $alloc_to_key:expr) -> $ty:ty) => {\n-        impl<$lt_tcx> TyCtxt<$lt_tcx> {\n-            pub fn $method(self, v: $alloc) -> &$lt_tcx $ty {\n-                let key = ($alloc_to_key)(&v);\n-\n-                self.interners.$name.intern_ref(key, || {\n-                    Interned($alloc_method(&self.interners.arena, v))\n-\n-                }).0\n-            }\n-        }\n-    }\n-}\n-\n macro_rules! direct_interners {\n-    ($lt_tcx:tt, $($name:ident: $method:ident($ty:ty)),+) => {\n-        $(impl<$lt_tcx> PartialEq for Interned<$lt_tcx, $ty> {\n+    ($($name:ident: $method:ident($ty:ty)),+) => {\n+        $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n             fn eq(&self, other: &Self) -> bool {\n                 self.0 == other.0\n             }\n         }\n \n-        impl<$lt_tcx> Eq for Interned<$lt_tcx, $ty> {}\n+        impl<'tcx> Eq for Interned<'tcx, $ty> {}\n \n-        impl<$lt_tcx> Hash for Interned<$lt_tcx, $ty> {\n+        impl<'tcx> Hash for Interned<'tcx, $ty> {\n             fn hash<H: Hasher>(&self, s: &mut H) {\n                 self.0.hash(s)\n             }\n         }\n \n-        intern_method!(\n-            $lt_tcx,\n-            $name: $method($ty,\n-                           |a: &$lt_tcx SyncDroplessArena, v| -> &$lt_tcx $ty { a.alloc(v) },\n-                           |x| x) -> $ty);)+\n+        impl<'tcx> TyCtxt<'tcx> {\n+            pub fn $method(self, v: $ty) -> &'tcx $ty {\n+                self.interners.$name.intern_ref(&v, || {\n+                    Interned(self.interners.arena.alloc(v))\n+                }).0\n+            }\n+        })+\n     }\n }\n \n pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n     x.has_type_flags(ty::TypeFlags::KEEP_IN_LOCAL_TCX)\n }\n \n-direct_interners!('tcx,\n+direct_interners!(\n     region: mk_region(RegionKind),\n     goal: mk_goal(GoalKind<'tcx>),\n     const_: mk_const(Const<'tcx>)\n );\n \n macro_rules! slice_interners {\n     ($($field:ident: $method:ident($ty:ty)),+) => (\n-        $(intern_method!( 'tcx, $field: $method(\n-            &[$ty],\n-            |a, v| List::from_arena(a, v),\n-            Deref::deref) -> List<$ty>);)+\n+        $(impl<'tcx> TyCtxt<'tcx> {\n+            pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n+                self.interners.$field.intern_ref(v, || {\n+                    Interned(List::from_arena(&self.interners.arena, v))\n+                }).0\n+            }\n+        })+\n     );\n }\n \n slice_interners!(\n-    existential_predicates: _intern_existential_predicates(ExistentialPredicate<'tcx>),\n-    predicates: _intern_predicates(Predicate<'tcx>),\n     type_list: _intern_type_list(Ty<'tcx>),\n     substs: _intern_substs(GenericArg<'tcx>),\n+    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo),\n+    existential_predicates: _intern_existential_predicates(ExistentialPredicate<'tcx>),\n+    predicates: _intern_predicates(Predicate<'tcx>),\n     clauses: _intern_clauses(Clause<'tcx>),\n     goal_list: _intern_goals(Goal<'tcx>),\n     projs: _intern_projs(ProjectionKind)\n );\n \n-// This isn't a perfect fit: `CanonicalVarInfo` slices are always\n-// allocated in the global arena, so this `intern_method!` macro is\n-// overly general. However, we just return `false` for the code that checks\n-// whether they belong in the thread-local arena, so no harm done, and\n-// seems better than open-coding the rest.\n-intern_method! {\n-    'tcx,\n-    canonical_var_infos: _intern_canonical_var_infos(\n-        &[CanonicalVarInfo],\n-        |a, v| List::from_arena(a, v),\n-        Deref::deref\n-    ) -> List<CanonicalVarInfo>\n-}\n-\n impl<'tcx> TyCtxt<'tcx> {\n     /// Given a `fn` type, returns an equivalent `unsafe fn` type;\n     /// that is, a `fn` type that is equivalent in every way for being"}]}