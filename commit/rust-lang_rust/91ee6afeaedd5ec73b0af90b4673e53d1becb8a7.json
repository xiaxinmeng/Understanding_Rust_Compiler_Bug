{"sha": "91ee6afeaedd5ec73b0af90b4673e53d1becb8a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZWU2YWZlYWVkZDVlYzczYjBhZjkwYjQ2NzNlNTNkMWJlY2I4YTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T08:35:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T19:36:29Z"}, "message": "rustdoc: Set up the compiler session properly in prep for running resolve", "tree": {"sha": "bfbf05c91f800c4111c6cdc630db3ef3b36b76fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfbf05c91f800c4111c6cdc630db3ef3b36b76fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7", "html_url": "https://github.com/rust-lang/rust/commit/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38908581f7d34066ece145bcedcbe8bbddee9bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/38908581f7d34066ece145bcedcbe8bbddee9bcc", "html_url": "https://github.com/rust-lang/rust/commit/38908581f7d34066ece145bcedcbe8bbddee9bcc"}], "stats": {"total": 129, "additions": 104, "deletions": 25}, "files": [{"sha": "769c8ea96ba0957859aef724385577f803b4e27f", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 88, "deletions": 24, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=91ee6afeaedd5ec73b0af90b4673e53d1becb8a7", "patch": "@@ -7,8 +7,14 @@\n      Rustdoc from its non-sendableness.\"\n )];\n \n+import rustc::driver::session;\n+import rustc::driver::driver;\n+import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n import rustc::middle::ast_map;\n+import rustc::back::link;\n+import rustc::util::filesearch;\n+import rustc::front;\n \n export ctxt;\n export ctxt_handler;\n@@ -29,29 +35,62 @@ type srv = {\n };\n \n fn mk_srv_from_str(source: str) -> srv {\n+    let sess = build_session();\n     {\n-        ctxt: build_ctxt(parse::from_str(source))\n+        ctxt: build_ctxt(sess, parse::from_str_sess(sess, source))\n     }\n }\n \n fn mk_srv_from_file(file: str) -> srv {\n+    let sess = build_session();\n     {\n-        ctxt: build_ctxt(parse::from_file(file))\n+        ctxt: build_ctxt(sess, parse::from_file_sess(sess, file))\n     }\n }\n \n-fn build_ctxt(ast: @ast::crate) -> ctxt {\n+fn build_ctxt(sess: session::session, ast: @ast::crate) -> ctxt {\n \n     import rustc::front::config;\n \n     let ast = config::strip_unconfigured_items(ast);\n+    let ast = front::test::modify_for_testing(sess, ast);\n+    let ast_map = ast_map::map_crate(*ast);\n \n     {\n         ast: ast,\n-        ast_map: ast_map::map_crate(*ast)\n+        ast_map: ast_map,\n     }\n }\n \n+fn build_session() -> session::session {\n+    let sopts: @session::options = @{\n+        crate_type: session::lib_crate,\n+        static: false,\n+        libcore: false,\n+        optimize: 0u,\n+        debuginfo: false,\n+        extra_debuginfo: false,\n+        verify: false,\n+        lint_opts: [],\n+        save_temps: false,\n+        stats: false,\n+        time_passes: false,\n+        time_llvm_passes: false,\n+        output_type: link::output_type_exe,\n+        addl_lib_search_paths: [],\n+        maybe_sysroot: none,\n+        target_triple: driver::host_triple(),\n+        cfg: [],\n+        test: false,\n+        parse_only: false,\n+        no_trans: false,\n+        do_gc: false,\n+        no_asm_comments: false,\n+        warn_unused_imports: false\n+    };\n+    driver::build_session(sopts, \".\", diagnostic::emit)\n+}\n+\n #[test]\n fn should_prune_unconfigured_items() {\n     let source = \"#[cfg(shut_up_and_leave_me_alone)]fn a() { }\";\n@@ -61,30 +100,55 @@ fn should_prune_unconfigured_items() {\n     }\n }\n \n+#[test]\n+#[ignore]\n+fn srv_should_build_ast_map() {\n+    // FIXME\n+    /*let source = \"fn a() { }\";\n+    let srv = mk_srv_from_str(source);\n+    exec(srv) {|ctxt|\n+        assert ctxt.ast_map.size() != 0u\n+    };*/\n+}\n+\n+#[test]\n+#[ignore]\n+fn srv_should_build_reexport_map() {\n+    // FIXME\n+    /*let source = \"import a::b; export b; mod a { mod b { } }\";\n+    let srv = mk_srv_from_str(source);\n+    exec(srv) {|ctxt|\n+        assert ctxt.exp_map.size() != 0u\n+    };*/\n+}\n+\n+#[test]\n+fn srv_should_resolve_external_crates() {\n+    let source = \"use std;\\\n+                  fn f() -> std::sha1::sha1 {\\\n+                  std::sha1::mk_sha1() }\";\n+    // Just testing that resolve doesn't crash\n+    mk_srv_from_str(source);\n+}\n+\n+#[test]\n+fn srv_should_resolve_core_crate() {\n+    let source = \"fn a() -> option { fail }\";\n+    // Just testing that resolve doesn't crash\n+    mk_srv_from_str(source);\n+}\n+\n fn exec<T>(\n     srv: srv,\n     f: fn~(ctxt: ctxt) -> T\n ) -> T {\n     f(srv.ctxt)\n }\n \n-#[cfg(test)]\n-mod tests {\n-\n-    #[test]\n-    fn srv_should_build_ast_map() {\n-        let source = \"fn a() { }\";\n-        let srv = mk_srv_from_str(source);\n-        exec(srv) {|ctxt|\n-            assert ctxt.ast_map.size() != 0u\n-        };\n-    }\n-\n-    #[test]\n-    fn srv_should_return_request_result() {\n-        let source = \"fn a() { }\";\n-        let srv = mk_srv_from_str(source);\n-        let result = exec(srv) {|_ctxt| 1000};\n-        assert result == 1000;\n-    }\n-}\n\\ No newline at end of file\n+#[test]\n+fn srv_should_return_request_result() {\n+    let source = \"fn a() { }\";\n+    let srv = mk_srv_from_str(source);\n+    let result = exec(srv) {|_ctxt| 1000};\n+    assert result == 1000;\n+}"}, {"sha": "5bc867dd036ca3f1fda8f2e9fdce684030164f5d", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ee6afeaedd5ec73b0af90b4673e53d1becb8a7/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=91ee6afeaedd5ec73b0af90b4673e53d1becb8a7", "patch": "@@ -1,11 +1,13 @@\n #[doc = \"AST-parsing helpers\"];\n \n+import rustc::driver::driver;\n+import rustc::driver::session;\n import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n import rustc::syntax::codemap;\n import rustc::syntax::parse::parser;\n \n-export from_file, from_str;\n+export from_file, from_str, from_file_sess, from_str_sess;\n \n fn new_parse_sess() -> parser::parse_sess {\n     let cm = codemap::new_codemap();\n@@ -29,3 +31,16 @@ fn from_str(source: str) -> @ast::crate {\n     parser::parse_crate_from_source_str(\n         \"-\", @source, [], new_parse_sess())\n }\n+\n+fn from_file_sess(sess: session::session, file: str) -> @ast::crate {\n+    parser::parse_crate_from_file(file, cfg(sess), sess.parse_sess)\n+}\n+\n+fn from_str_sess(sess: session::session, source: str) -> @ast::crate {\n+    parser::parse_crate_from_source_str(\n+        \"-\", @source, cfg(sess), sess.parse_sess)\n+}\n+\n+fn cfg(sess: session::session) -> ast::crate_cfg {\n+    driver::default_configuration(sess, \"rustdoc\", \"<anon>\")\n+}\n\\ No newline at end of file"}]}