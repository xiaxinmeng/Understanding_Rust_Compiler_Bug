{"sha": "44d27ba28df30f80d039f0486cac46d7fb265fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDI3YmEyOGRmMzBmODBkMDM5ZjA0ODZjYWM0NmQ3ZmIyNjVmYTM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-12T13:32:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-12T13:32:12Z"}, "message": "Change `indirect_structural_match` lint to allow-by-default.\n\nThis is a way to address the regression aspect of rust-lang/rust#62614 in the\nshort term without actually fixing the bug. (My thinking is that the bug that\nthis lint detects has gone undetected for this long, it can wait a bit longer\nuntil I or someone else has a chance to put in a proper fix that accounts for\nrust-lang/rust#62614.)", "tree": {"sha": "c96630c229523aefebba8f42ab00ecaffaa8e888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96630c229523aefebba8f42ab00ecaffaa8e888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d27ba28df30f80d039f0486cac46d7fb265fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d27ba28df30f80d039f0486cac46d7fb265fa3", "html_url": "https://github.com/rust-lang/rust/commit/44d27ba28df30f80d039f0486cac46d7fb265fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d27ba28df30f80d039f0486cac46d7fb265fa3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e0d8790dc7cffc4466fe3c9784a582d6367027", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e0d8790dc7cffc4466fe3c9784a582d6367027", "html_url": "https://github.com/rust-lang/rust/commit/00e0d8790dc7cffc4466fe3c9784a582d6367027"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "d1cae76de60a1b0a052eb87210729eef24971c6f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d27ba28df30f80d039f0486cac46d7fb265fa3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d27ba28df30f80d039f0486cac46d7fb265fa3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=44d27ba28df30f80d039f0486cac46d7fb265fa3", "patch": "@@ -350,7 +350,8 @@ declare_lint! {\n \n declare_lint! {\n     pub INDIRECT_STRUCTURAL_MATCH,\n-    Warn,\n+    // defaulting to allow until rust-lang/rust#62614 is fixed.\n+    Allow,\n     \"pattern with const indirectly referencing non-`#[structural_match]` type\"\n }\n \n@@ -451,6 +452,7 @@ declare_lint_pass! {\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n+        INDIRECT_STRUCTURAL_MATCH,\n     ]\n }\n "}, {"sha": "dca8aaef1500d84484f8f0c5dba4495bc0b4c2e1", "filename": "src/test/ui/rfc1445/allow-use-behind-cousin-variant.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/44d27ba28df30f80d039f0486cac46d7fb265fa3/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d27ba28df30f80d039f0486cac46d7fb265fa3/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs?ref=44d27ba28df30f80d039f0486cac46d7fb265fa3", "patch": "@@ -0,0 +1,59 @@\n+// rust-lang/rust#62614: we want to allow matching on constants of types that\n+// have non-structural-match variants, *if* the constant itself does not use\n+// any such variant.\n+\n+// NOTE: for now, deliberately leaving the lint `indirect_structural_match` set\n+// to its default, so that we will not issue a diangostic even if\n+// rust-lang/rust#62614 remains an open issue.\n+\n+// run-pass\n+\n+struct Sum(u32, u32);\n+\n+impl PartialEq for Sum {\n+    fn eq(&self, other: &Self) -> bool { self.0 + self.1 == other.0 + other.1 }\n+}\n+\n+impl Eq for Sum { }\n+\n+#[derive(PartialEq, Eq)]\n+enum Eek {\n+    TheConst,\n+    UnusedByTheConst(Sum)\n+}\n+\n+const THE_CONST: Eek = Eek::TheConst;\n+const SUM_THREE: Eek = Eek::UnusedByTheConst(Sum(3,0));\n+\n+const EEK_ZERO: &[Eek] = &[];\n+const EEK_ONE: &[Eek] = &[THE_CONST];\n+\n+pub fn main() {\n+    match Eek::UnusedByTheConst(Sum(1,2)) {\n+        ref sum if sum == &SUM_THREE => { println!(\"Hello 0\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match Eek::TheConst {\n+        THE_CONST => { println!(\"Hello 1\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+\n+    match & &Eek::TheConst {\n+        & & THE_CONST => { println!(\"Hello 2\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match & & &[][..] {\n+        & & EEK_ZERO => { println!(\"Hello 3\"); }\n+        & & EEK_ONE => { println!(\"Gbye\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match & & &[Eek::TheConst][..] {\n+        & & EEK_ZERO => { println!(\"Gby\"); }\n+        & & EEK_ONE => { println!(\"Hello 4\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+}"}]}