{"sha": "014333fbd422f56628a2b5b707d192cef838afc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDMzM2ZiZDQyMmY1NjYyOGEyYjViNzA3ZDE5MmNlZjgzOGFmYzM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-13T08:46:49Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-16T17:30:56Z"}, "message": "Stabilize rvalue promotion to 'static.", "tree": {"sha": "ed4f2943607c52e31191871b405035451d1c223e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4f2943607c52e31191871b405035451d1c223e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014333fbd422f56628a2b5b707d192cef838afc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014333fbd422f56628a2b5b707d192cef838afc3", "html_url": "https://github.com/rust-lang/rust/commit/014333fbd422f56628a2b5b707d192cef838afc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014333fbd422f56628a2b5b707d192cef838afc3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c88624682ddb5768cca4dacc8482e9bc966261fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c88624682ddb5768cca4dacc8482e9bc966261fc", "html_url": "https://github.com/rust-lang/rust/commit/c88624682ddb5768cca4dacc8482e9bc966261fc"}], "stats": {"total": 187, "additions": 88, "deletions": 99}, "files": [{"sha": "266d429a48468371d2d90669f6a30dd659bb4bdb", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -1 +1 @@\n-Subproject commit 1abfbaa70313fdf527cf799ffd9b9a096a62105c\n+Subproject commit 266d429a48468371d2d90669f6a30dd659bb4bdb"}, {"sha": "2583d350ebe11d4f6df184e238a471c27334a8b4", "filename": "src/doc/unstable-book/src/language-features/rvalue-static-promotion.md", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c88624682ddb5768cca4dacc8482e9bc966261fc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md", "raw_url": "https://github.com/rust-lang/rust/raw/c88624682ddb5768cca4dacc8482e9bc966261fc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md?ref=c88624682ddb5768cca4dacc8482e9bc966261fc", "patch": "@@ -1,23 +0,0 @@\n-# `rvalue_static_promotion`\n-\n-The tracking issue for this feature is: [#38865]\n-\n-[#38865]: https://github.com/rust-lang/rust/issues/38865\n-\n-------------------------\n-\n-The `rvalue_static_promotion` feature allows directly creating `'static` references to\n-constant `rvalue`s, which in particular allowing for more concise code in the common case\n-in which a `'static` reference is all that's needed.\n-\n-\n-## Examples\n-\n-```rust\n-#![feature(rvalue_static_promotion)]\n-\n-fn main() {\n-    let DEFAULT_VALUE: &'static u32 = &42;\n-    assert_eq!(*DEFAULT_VALUE, 42);\n-}\n-```"}, {"sha": "c8a7f8c4aaf8c8d3369744ed65730379ac348a6d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -873,10 +873,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let promotable = self.tcx.rvalue_promotable_to_static.borrow().get(&id).cloned()\n                                    .unwrap_or(false);\n \n-        // When the corresponding feature isn't toggled, only promote `[T; 0]`.\n+        // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n             ty::TyArray(_, 0) => true,\n-            _ => promotable && self.tcx.sess.features.borrow().rvalue_static_promotion,\n+            _ => promotable,\n         };\n \n         // Compute maximum lifetime of this rvalue. This is 'static if"}, {"sha": "801343689b728f37f93700d16d979a45fd14ea7e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -345,9 +345,6 @@ declare_features! (\n     // Allows `repr(align(u16))` struct attribute (RFC 1358)\n     (active, repr_align, \"1.17.0\", Some(33626)),\n \n-    // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n-    (active, rvalue_static_promotion, \"1.15.1\", Some(38865)),\n-\n     // Used to preserve symbols (see llvm.used)\n     (active, used, \"1.18.0\", Some(40289)),\n \n@@ -457,6 +454,8 @@ declare_features! (\n     (accepted, associated_consts, \"1.20.0\", Some(29646)),\n     // Usage of the `compile_error!` macro\n     (accepted, compile_error, \"1.20.0\", Some(40872)),\n+    // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n+    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "f7514df800d99d0895e0d9d7ce58ce36c2e9f60f", "filename": "src/test/compile-fail/borrowck/borrowck-borrow-from-temporary.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrow-from-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrow-from-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrow-from-temporary.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -11,10 +11,12 @@\n // Test lifetimes are linked properly when we take reference\n // to interior.\n \n+fn id<T>(x: T) -> T { x }\n+\n struct Foo(isize);\n \n fn foo<'a>() -> &'a isize {\n-    let &Foo(ref x) = &Foo(3); //~ ERROR borrowed value does not live long enough\n+    let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n     x\n }\n "}, {"sha": "f33d0a71481d2d18905dca6aa338aa4dd7cb9cdf", "filename": "src/test/compile-fail/feature-gate-rvalue_static_promotion.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c88624682ddb5768cca4dacc8482e9bc966261fc/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rvalue_static_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88624682ddb5768cca4dacc8482e9bc966261fc/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rvalue_static_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rvalue_static_promotion.rs?ref=c88624682ddb5768cca4dacc8482e9bc966261fc", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[allow(unused_variables)]\n-fn main() {\n-    let x: &'static u32 = &42; //~ error: does not live long enough\n-    let y: &'static Option<u32> = &None; //~ error: does not live long enough\n-}"}, {"sha": "3045c06ca4c18e9e428fcba772a535235fb0ce0f", "filename": "src/test/compile-fail/issue-11493.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -10,7 +10,9 @@\n \n // This file must never have a trailing newline\n \n+fn id<T>(x: T) -> T { x }\n+\n fn main() {\n     let x = Some(3);\n-    let y = x.as_ref().unwrap_or(&5); //~ ERROR: borrowed value does not live long enough\n+    let y = x.as_ref().unwrap_or(&id(5)); //~ ERROR: borrowed value does not live long enough\n }"}, {"sha": "9264305e6ea5c55eb13263148d00cdcd520ed32b", "filename": "src/test/compile-fail/issue-17545.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(fn_traits)]\n \n+fn id<T>(x: T) -> T { x }\n+\n pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n     bar.call((\n-        &(), //~ ERROR borrowed value does not live long enough\n+        &id(()), //~ ERROR borrowed value does not live long enough\n     ));\n }\n fn main() {}"}, {"sha": "9b7ed463499ded297d51d51eafe702561a5321d5", "filename": "src/test/compile-fail/issue-17718-constants-not-static.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn id<T>(x: T) -> T { x }\n+\n const FOO: usize = 3;\n \n-fn foo() -> &'static usize { &FOO }\n+fn foo() -> &'static usize { &id(FOO) }\n //~^ ERROR: borrowed value does not live long enough\n \n fn main() {"}, {"sha": "731d4fb2bf693ea2f1cccda229569f21aa19fc89", "filename": "src/test/compile-fail/issue-27592.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-27592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fissue-27592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27592.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Regression test for issue #27591.\n+// Regression test for issue #27592.\n \n fn write<'a, F: ::std::ops::FnOnce()->::std::fmt::Arguments<'a> + 'a>(fcn: F) {\n     use std::fmt::Write;\n@@ -23,7 +23,7 @@ impl ::std::fmt::Write for Stream {\n }\n \n fn main() {\n-    write(|| format_args!(\"{}\", \"Hello world\"));\n+    write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n     //~^ ERROR borrowed value does not live long enough\n     //~| ERROR borrowed value does not live long enough\n }"}, {"sha": "46c486c63a35e87f8c9f362f23c9f2b5c08daef8", "filename": "src/test/compile-fail/regions-lifetime-of-struct-or-enum-variant.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-of-struct-or-enum-variant.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -12,19 +12,23 @@\n // are treated as rvalues and their lifetime is not bounded to\n // the static scope.\n \n+fn id<T>(x: T) -> T { x }\n+\n struct Test;\n \n enum MyEnum {\n     Variant1\n }\n \n fn structLifetime<'a>() -> &'a Test {\n-  let testValue = &Test; //~ ERROR borrowed value does not live long enough\n+  let testValue = &id(Test);\n+  //~^ ERROR borrowed value does not live long enough\n   testValue\n }\n \n fn variantLifetime<'a>() -> &'a MyEnum {\n-  let testValue = &MyEnum::Variant1; //~ ERROR borrowed value does not live long enough\n+  let testValue = &id(MyEnum::Variant1);\n+  //~^ ERROR borrowed value does not live long enough\n   testValue\n }\n "}, {"sha": "c7cd3ced98d2397c23da9e76259916b6ea3e5a18", "filename": "src/test/compile-fail/regions-ret.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn id<T>(x: T) -> T { x }\n+\n fn f(_x: &isize) -> &isize {\n-    return &3; //~ ERROR borrowed value does not live long enough\n+    return &id(3); //~ ERROR borrowed value does not live long enough\n }\n \n fn main() {"}, {"sha": "031091c45234a872738a21c7c24e7a8387a2f88f", "filename": "src/test/compile-fail/regions-var-type-out-of-scope.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn id<T>(x: T) -> T { x }\n+\n fn foo(cond: bool) {\n     // Here we will infer a type that uses the\n     // region of the if stmt then block:\n     let mut x;\n \n     if cond {\n-        x = &3; //~ ERROR borrowed value does not live long enough\n+        x = &id(3); //~ ERROR borrowed value does not live long enough\n         assert_eq!(*x, 3);\n     }\n }"}, {"sha": "8d9f442b81d948ad58bcf17f733755bed4c290fe", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn id<T>(x: T) -> T { x }\n+\n struct StateMachineIter<'a> {\n     statefn: &'a StateMachineFunc<'a>\n }\n@@ -23,19 +25,19 @@ impl<'a> Iterator for StateMachineIter<'a> {\n }\n \n fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n-    self_.statefn = &(state2 as StateMachineFunc);\n+    self_.statefn = &id(state2 as StateMachineFunc);\n     //~^ ERROR borrowed value does not live long enough\n     return Some(\"state1\");\n }\n \n fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n-    self_.statefn = &(state3 as StateMachineFunc);\n+    self_.statefn = &id(state3 as StateMachineFunc);\n     //~^ ERROR borrowed value does not live long enough\n     return Some(\"state2\");\n }\n \n fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n-    self_.statefn = &(finished as StateMachineFunc);\n+    self_.statefn = &id(finished as StateMachineFunc);\n     //~^ ERROR borrowed value does not live long enough\n     return Some(\"state3\");\n }\n@@ -46,7 +48,8 @@ fn finished(_: &mut StateMachineIter) -> Option<(&'static str)> {\n \n fn state_iter() -> StateMachineIter<'static> {\n     StateMachineIter {\n-        statefn: &(state1 as StateMachineFunc) //~ ERROR borrowed value does not live long enough\n+        statefn: &id(state1 as StateMachineFunc)\n+        //~^ ERROR borrowed value does not live long enough\n     }\n }\n "}, {"sha": "90ed401659c87b7f9b777f24a62e327eb9ba23f6", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(box_syntax)]\n \n+fn id<T>(x: T) -> T { x }\n+\n fn f<T:'static>(_: T) {}\n \n fn main() {\n     let x: Box<_> = box 3;\n     f(x);\n-    let x = &3; //~ ERROR borrowed value does not live long enough\n+    let x = &id(3); //~ ERROR borrowed value does not live long enough\n     f(x);\n }"}, {"sha": "e57491930a45b74bd1c563e8eb091cb2ba4adfec", "filename": "src/test/run-pass/rvalue-static-promotion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frvalue-static-promotion.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rvalue_static_promotion)]\n-\n #[allow(unused_variables)]\n fn main() {\n     let x: &'static u32 = &42;"}, {"sha": "1c904648f9e7b9827edb922dc8b7ce0b9663c4d4", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    let x = [1].iter();\n+    let x = vec![1].iter();\n }\n \n fn main() {"}, {"sha": "6316c06666003ca42b7c2d328166ad51ddef4fb5", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -1,14 +1,15 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion.rs:12:23\n+  --> $DIR/borrowck-let-suggestion.rs:12:27\n    |\n-12 |     let x = [1].iter();\n-   |             ---       ^ temporary value dropped here while still borrowed\n+12 |     let x = vec![1].iter();\n+   |             -------       ^ temporary value dropped here while still borrowed\n    |             |\n    |             temporary value created here\n 13 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n+   = note: this error originates in a macro outside of the current crate\n \n error: aborting due to previous error\n "}, {"sha": "9e316b989a4752284ae065a3b309ec056447afcc", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn id<T>(x: T) -> T { x }\n+\n fn f() {\n     let old = ['o'];         // statement 0\n     let mut v1 = Vec::new(); // statement 1\n@@ -21,7 +23,7 @@ fn f() {\n \n     let mut v3 = Vec::new(); // statement 5\n \n-    v3.push(&'x');           // statement 6\n+    v3.push(&id('x'));           // statement 6\n     //~^ ERROR borrowed value does not live long enough\n     //~| NOTE temporary value created here\n     //~| NOTE temporary value only lives until here\n@@ -31,7 +33,7 @@ fn f() {\n \n         let mut v4 = Vec::new(); // (sub) statement 0\n \n-        v4.push(&'y');\n+        v4.push(&id('y'));\n         //~^ ERROR borrowed value does not live long enough\n         //~| NOTE temporary value created here\n         //~| NOTE temporary value only lives until here\n@@ -42,7 +44,7 @@ fn f() {\n \n     let mut v5 = Vec::new(); // statement 8\n \n-    v5.push(&'z');\n+    v5.push(&id('z'));\n     //~^ ERROR borrowed value does not live long enough\n     //~| NOTE temporary value created here\n     //~| NOTE temporary value only lives until here"}, {"sha": "86c6f28ef1c873f70e4f2629739580bc0e5c6b76", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -1,49 +1,49 @@\n error[E0597]: `young[..]` does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:52:1\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:54:1\n    |\n-19 |     v2.push(&young[0]);      // statement 4\n+21 |     v2.push(&young[0]);      // statement 4\n    |              -------- borrow occurs here\n ...\n-52 | }\n+54 | }\n    | ^ `young[..]` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:24:18\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:26:22\n    |\n-24 |     v3.push(&'x');           // statement 6\n-   |              --- ^ temporary value dropped here while still borrowed\n+26 |     v3.push(&id('x'));           // statement 6\n+   |              ------- ^ temporary value dropped here while still borrowed\n    |              |\n    |              temporary value created here\n ...\n-52 | }\n+54 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:34:22\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:36:26\n    |\n-34 |         v4.push(&'y');\n-   |                  --- ^ temporary value dropped here while still borrowed\n+36 |         v4.push(&id('y'));\n+   |                  ------- ^ temporary value dropped here while still borrowed\n    |                  |\n    |                  temporary value created here\n ...\n-40 |     }                       // (statement 7)\n+42 |     }                       // (statement 7)\n    |     - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:45:18\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:47:22\n    |\n-45 |     v5.push(&'z');\n-   |              --- ^ temporary value dropped here while still borrowed\n+47 |     v5.push(&id('z'));\n+   |              ------- ^ temporary value dropped here while still borrowed\n    |              |\n    |              temporary value created here\n ...\n-52 | }\n+54 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime"}, {"sha": "871e0af50bfc6cad967347b1c496a7732353ee45", "filename": "src/test/ui/span/issue-15480.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn id<T>(x: T) -> T { x }\n+\n fn main() {\n     let v = vec![\n-        &3\n+        &id(3)\n     ];\n \n     for &&x in &v {"}, {"sha": "7f4ca19241cd2f0a53df527dd440c5c5e226f6ab", "filename": "src/test/ui/span/issue-15480.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/issue-15480.rs:14:6\n+  --> $DIR/issue-15480.rs:16:6\n    |\n-13 |         &3\n-   |          - temporary value created here\n-14 |     ];\n+15 |         &id(3)\n+   |          ----- temporary value created here\n+16 |     ];\n    |      ^ temporary value dropped here while still borrowed\n ...\n-19 | }\n+21 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime"}, {"sha": "99b0d6ed2964c10eccc696fcde8e955226da5512", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -10,14 +10,16 @@\n \n #![feature(box_syntax)]\n \n+fn id<T>(x: T) -> T { x }\n+\n trait Foo { }\n \n impl<'a> Foo for &'a isize { }\n \n fn main() {\n     let blah;\n     {\n-        let ss: &isize = &1;\n+        let ss: &isize = &id(1);\n         blah = box ss as Box<Foo>;\n     }\n }"}, {"sha": "6a3625441b49edbf0058462ddae91e4d48e69e1f", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:22:5\n+  --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:24:5\n    |\n-20 |         let ss: &isize = &1;\n-   |                           - temporary value created here\n-21 |         blah = box ss as Box<Foo>;\n-22 |     }\n+22 |         let ss: &isize = &id(1);\n+   |                           ----- temporary value created here\n+23 |         blah = box ss as Box<Foo>;\n+24 |     }\n    |     ^ temporary value dropped here while still borrowed\n-23 | }\n+25 | }\n    | - temporary value needs to live until here\n \n error: aborting due to previous error"}, {"sha": "1b022f23246628d56f27037501a2c37c6f5c0192", "filename": "src/test/ui/span/slice-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     let y;\n     {\n-        let x: &[isize] = &[1, 2, 3, 4, 5];\n+        let x: &[isize] = &vec![1, 2, 3, 4, 5];\n         y = &x[1..];\n     }\n }"}, {"sha": "5e8edf80df69eedae6978811efa22de797d0d9c6", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/014333fbd422f56628a2b5b707d192cef838afc3/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=014333fbd422f56628a2b5b707d192cef838afc3", "patch": "@@ -1,13 +1,15 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/slice-borrow.rs:18:5\n    |\n-16 |         let x: &[isize] = &[1, 2, 3, 4, 5];\n-   |                            --------------- temporary value created here\n+16 |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n+   |                            ------------------- temporary value created here\n 17 |         y = &x[1..];\n 18 |     }\n    |     ^ temporary value dropped here while still borrowed\n 19 | }\n    | - temporary value needs to live until here\n+   |\n+   = note: this error originates in a macro outside of the current crate\n \n error: aborting due to previous error\n "}]}