{"sha": "8c62fa057527fc07afabb201bb31428409ef4d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjJmYTA1NzUyN2ZjMDdhZmFiYjIwMWJiMzE0Mjg0MDllZjRkOGE=", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-31T06:50:57Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-08-28T07:16:34Z"}, "message": "Treat macros as HIR items", "tree": {"sha": "b406fd584e223518dc4588c93d7b814a1bbe8489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b406fd584e223518dc4588c93d7b814a1bbe8489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c62fa057527fc07afabb201bb31428409ef4d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c62fa057527fc07afabb201bb31428409ef4d8a", "html_url": "https://github.com/rust-lang/rust/commit/8c62fa057527fc07afabb201bb31428409ef4d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c62fa057527fc07afabb201bb31428409ef4d8a/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac50a53359328a5d7f2f558833e63d59d372e4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac50a53359328a5d7f2f558833e63d59d372e4f7", "html_url": "https://github.com/rust-lang/rust/commit/ac50a53359328a5d7f2f558833e63d59d372e4f7"}], "stats": {"total": 418, "additions": 162, "deletions": 256}, "files": [{"sha": "af23324cbefdb1531c9e1d9c74561b177a702a2b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -4146,6 +4146,7 @@ dependencies = [\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "cc87078d54b3f5fcfc5955d93d56373cdb8c5084", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -170,7 +170,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_item_id_use_tree(use_tree, i.id, &mut vec);\n                 vec\n             }\n-            ItemKind::MacroDef(..) => SmallVec::new(),\n             ItemKind::Fn(..) | ItemKind::Impl(box ImplKind { of_trait: None, .. }) => {\n                 smallvec![i.id]\n             }\n@@ -212,28 +211,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-\n-        if let ItemKind::MacroDef(MacroDef { ref body, macro_rules }) = i.kind {\n-            if !macro_rules || self.sess.contains_name(&i.attrs, sym::macro_export) {\n-                let hir_id = self.lower_node_id(i.id);\n-                self.lower_attrs(hir_id, &i.attrs);\n-                let body = P(self.lower_mac_args(body));\n-                self.insert_macro_def(hir::MacroDef {\n-                    ident,\n-                    vis,\n-                    def_id: hir_id.expect_owner(),\n-                    span: i.span,\n-                    ast: MacroDef { body, macro_rules },\n-                });\n-            } else {\n-                for a in i.attrs.iter() {\n-                    let a = self.lower_attr(a);\n-                    self.non_exported_macro_attrs.push(a);\n-                }\n-            }\n-            return None;\n-        }\n-\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n         let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n@@ -465,7 +442,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_generics(generics, ImplTraitContext::disallowed()),\n                 self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n             ),\n-            ItemKind::MacroDef(..) | ItemKind::MacCall(..) => {\n+            ItemKind::MacroDef(MacroDef { ref body, macro_rules }) => {\n+                let body = P(self.lower_mac_args(body));\n+\n+                hir::ItemKind::Macro(ast::MacroDef { body, macro_rules })\n+            }\n+            ItemKind::MacCall(..) => {\n                 panic!(\"`TyMac` should have been expanded by now\")\n             }\n         }"}, {"sha": "bd2c9f41a5378ef7d511269b1ef9891f0d673484", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -103,7 +103,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// The items being lowered are collected here.\n     owners: IndexVec<LocalDefId, Option<hir::OwnerNode<'hir>>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n-    non_exported_macro_attrs: Vec<ast::Attribute>,\n \n     trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n \n@@ -330,7 +329,6 @@ pub fn lower_crate<'a, 'hir>(\n         trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         attrs: BTreeMap::default(),\n-        non_exported_macro_attrs: Vec::new(),\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n         is_in_loop_condition: false,\n@@ -551,7 +549,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         let krate = hir::Crate {\n-            non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             owners: self.owners,\n             bodies: self.bodies,\n             body_ids,\n@@ -600,13 +597,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         id\n     }\n \n-    fn insert_macro_def(&mut self, item: hir::MacroDef<'hir>) {\n-        let def_id = item.def_id;\n-        let item = self.arena.alloc(item);\n-        self.owners.ensure_contains_elem(def_id, || None);\n-        self.owners[def_id] = Some(hir::OwnerNode::MacroDef(item));\n-    }\n-\n     fn allocate_hir_id_counter(&mut self, owner: NodeId) -> hir::HirId {\n         // Set up the counter if needed.\n         self.item_local_id_counters.entry(owner).or_insert(0);"}, {"sha": "f729973ddc62e1ccdab4f51531a644f2214da04b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -578,6 +578,33 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n     }\n \n+    fn print_mac_def(\n+        &mut self,\n+        macro_def: &ast::MacroDef,\n+        ident: &Ident,\n+        sp: &Span,\n+        print_visibility: impl FnOnce(&mut Self),\n+    ) {\n+        let (kw, has_bang) = if macro_def.macro_rules {\n+            (\"macro_rules\", true)\n+        } else {\n+            print_visibility(self);\n+            (\"macro\", false)\n+        };\n+        self.print_mac_common(\n+            Some(MacHeader::Keyword(kw)),\n+            has_bang,\n+            Some(*ident),\n+            macro_def.body.delim(),\n+            &macro_def.body.inner_tokens(),\n+            true,\n+            *sp,\n+        );\n+        if macro_def.body.need_semicolon() {\n+            self.word(\";\");\n+        }\n+    }\n+\n     fn print_path(&mut self, path: &ast::Path, colons_before_params: bool, depth: usize) {\n         self.maybe_print_comment(path.span.lo());\n \n@@ -1305,24 +1332,9 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n-                let (kw, has_bang) = if macro_def.macro_rules {\n-                    (\"macro_rules\", true)\n-                } else {\n-                    self.print_visibility(&item.vis);\n-                    (\"macro\", false)\n-                };\n-                self.print_mac_common(\n-                    Some(MacHeader::Keyword(kw)),\n-                    has_bang,\n-                    Some(item.ident),\n-                    macro_def.body.delim(),\n-                    &macro_def.body.inner_tokens(),\n-                    true,\n-                    item.span,\n-                );\n-                if macro_def.body.need_semicolon() {\n-                    self.word(\";\");\n-                }\n+                self.print_mac_def(macro_def, &item.ident, &item.span, |state| {\n+                    state.print_visibility(&item.vis)\n+                });\n             }\n         }\n         self.ann.post(self, AnnNode::Item(item))"}, {"sha": "0801a1bde2264b545fce729dbc1f2d68af61a982", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -35,7 +35,6 @@ macro_rules! arena_types {\n             [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n             [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n             [] local: rustc_hir::Local<$tcx>,\n-            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n             [few] mod_: rustc_hir::Mod<$tcx>,\n             [] param: rustc_hir::Param<$tcx>,\n             [] pat: rustc_hir::Pat<$tcx>,"}, {"sha": "a166337c0dfc30b265e7e4389a487d81f80fde87", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -670,9 +670,6 @@ pub struct ModuleItems {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n #[derive(Debug)]\n pub struct Crate<'hir> {\n-    // Attributes from non-exported macros, kept only for collecting the library feature list.\n-    pub non_exported_macro_attrs: &'hir [Attribute],\n-\n     pub owners: IndexVec<LocalDefId, Option<OwnerNode<'hir>>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n     pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n@@ -768,32 +765,6 @@ impl Crate<'_> {\n             _ => None,\n         })\n     }\n-\n-    pub fn exported_macros<'hir>(&'hir self) -> impl Iterator<Item = &'hir MacroDef<'hir>> + 'hir {\n-        self.owners.iter().filter_map(|owner| match owner {\n-            Some(OwnerNode::MacroDef(macro_def)) => Some(*macro_def),\n-            _ => None,\n-        })\n-    }\n-}\n-\n-/// A macro definition, in this crate or imported from another.\n-///\n-/// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n-#[derive(Debug)]\n-pub struct MacroDef<'hir> {\n-    pub ident: Ident,\n-    pub vis: Visibility<'hir>,\n-    pub def_id: LocalDefId,\n-    pub span: Span,\n-    pub ast: ast::MacroDef,\n-}\n-\n-impl MacroDef<'_> {\n-    #[inline]\n-    pub fn hir_id(&self) -> HirId {\n-        HirId::make_owner(self.def_id)\n-    }\n }\n \n /// A block of statements `{ .. }`, which may have a label (in this case the\n@@ -2602,7 +2573,7 @@ pub struct PolyTraitRef<'hir> {\n \n pub type Visibility<'hir> = Spanned<VisibilityKind<'hir>>;\n \n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum VisibilityKind<'hir> {\n     Public,\n     Crate(CrateSugar),\n@@ -2791,6 +2762,8 @@ pub enum ItemKind<'hir> {\n     Const(&'hir Ty<'hir>, BodyId),\n     /// A function declaration.\n     Fn(FnSig<'hir>, Generics<'hir>, BodyId),\n+    /// A MBE macro definition (`macro_rules!` or `macro`).\n+    Macro(ast::MacroDef),\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n@@ -2856,6 +2829,7 @@ impl ItemKind<'_> {\n             ItemKind::Static(..) => \"static item\",\n             ItemKind::Const(..) => \"constant item\",\n             ItemKind::Fn(..) => \"function\",\n+            ItemKind::Macro(..) => \"macro\",\n             ItemKind::Mod(..) => \"module\",\n             ItemKind::ForeignMod { .. } => \"extern block\",\n             ItemKind::GlobalAsm(..) => \"global asm item\","}, {"sha": "f4fbfd2692ca58866fa87f1bb223a8cdb8bac8f2", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -466,9 +466,6 @@ pub trait Visitor<'v>: Sized {\n         walk_assoc_type_binding(self, type_binding)\n     }\n     fn visit_attribute(&mut self, _id: HirId, _attr: &'v Attribute) {}\n-    fn visit_macro_def(&mut self, macro_def: &'v MacroDef<'v>) {\n-        walk_macro_def(self, macro_def)\n-    }\n     fn visit_vis(&mut self, vis: &'v Visibility<'v>) {\n         walk_vis(self, vis)\n     }\n@@ -484,19 +481,13 @@ pub trait Visitor<'v>: Sized {\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n     let top_mod = krate.module();\n     visitor.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);\n-    walk_list!(visitor, visit_macro_def, krate.exported_macros());\n     for (&id, attrs) in krate.attrs.iter() {\n         for a in *attrs {\n             visitor.visit_attribute(id, a)\n         }\n     }\n }\n \n-pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef<'v>) {\n-    visitor.visit_id(macro_def.hir_id());\n-    visitor.visit_ident(macro_def.ident);\n-}\n-\n pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod<'v>, mod_hir_id: HirId) {\n     visitor.visit_id(mod_hir_id);\n     for &item_id in module.item_ids {\n@@ -586,6 +577,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             item.span,\n             item.hir_id(),\n         ),\n+        ItemKind::Macro(_) => {\n+            visitor.visit_id(item.hir_id());\n+        }\n         ItemKind::Mod(ref module) => {\n             // `visit_mod()` takes care of visiting the `Item`'s `HirId`.\n             visitor.visit_mod(module, item.span, item.hir_id())"}, {"sha": "422a1064874c5c879d1f5de4f18b6b51671a5f5c", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, MacroDef, Mod,\n-    TraitItem, TraitItemId, Ty, VisibilityKind,\n+    BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem,\n+    TraitItemId, Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::DefPathHash;\n@@ -190,16 +190,3 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n         });\n     }\n }\n-\n-impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for MacroDef<'_> {\n-    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let MacroDef { ident, def_id: _, ref ast, ref vis, span } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            ast.hash_stable(hcx, hasher);\n-            vis.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}"}, {"sha": "29c948fe31845745a81074eabe2a0192fd01347b", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -111,6 +111,7 @@ impl Target {\n             ItemKind::Static(..) => Target::Static,\n             ItemKind::Const(..) => Target::Const,\n             ItemKind::Fn(..) => Target::Fn,\n+            ItemKind::Macro(..) => Target::MacroDef,\n             ItemKind::Mod(..) => Target::Mod,\n             ItemKind::ForeignMod { .. } => Target::ForeignMod,\n             ItemKind::GlobalAsm(..) => Target::GlobalAsm,"}, {"sha": "89e7f8c1de6b286c128e263eb9d9e4b1b1b148ee", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -642,6 +642,11 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n+            hir::ItemKind::Macro(ref macro_def) => {\n+                self.print_mac_def(macro_def, &item.ident, &item.span, |state| {\n+                    state.print_visibility(&item.vis)\n+                });\n+            }\n             hir::ItemKind::Mod(ref _mod) => {\n                 self.head(visibility_qualified(&item.vis, \"mod\"));\n                 self.print_ident(item.ident);"}, {"sha": "a5b4fa15921b859ba5bff01303b5f4b3c5dd18b3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -585,24 +585,6 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'_>, krate: &hir::Crate<'_>) {\n         self.check_missing_docs_attrs(cx, CRATE_DEF_ID, krate.module().inner, \"the\", \"crate\");\n-\n-        for macro_def in krate.exported_macros() {\n-            // Non exported macros should be skipped, since `missing_docs` only\n-            // applies to externally visible items.\n-            if !cx.access_levels.is_exported(macro_def.def_id) {\n-                continue;\n-            }\n-\n-            let attrs = cx.tcx.hir().attrs(macro_def.hir_id());\n-            let has_doc = attrs.iter().any(has_doc);\n-            if !has_doc {\n-                cx.struct_span_lint(\n-                    MISSING_DOCS,\n-                    cx.tcx.sess.source_map().guess_head_span(macro_def.span),\n-                    |lint| lint.build(\"missing documentation for macro\").emit(),\n-                );\n-            }\n-        }\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n@@ -636,6 +618,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n             hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Fn(..)\n+            | hir::ItemKind::Macro(..)\n             | hir::ItemKind::Mod(..)\n             | hir::ItemKind::Enum(..)\n             | hir::ItemKind::Struct(..)"}, {"sha": "30400da86b4b0b042e93496fda12993057e650ba", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -453,10 +453,6 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n         lint_callback!(cx, check_crate, krate);\n \n         hir_visit::walk_crate(cx, krate);\n-        for attr in krate.non_exported_macro_attrs {\n-            // This HIR ID is a lie, since the macro ID isn't available.\n-            cx.visit_attribute(hir::CRATE_HIR_ID, attr);\n-        }\n \n         lint_callback!(cx, check_crate_post, krate);\n     })"}, {"sha": "90bf34ee863b874226f5b300943f939d6e433337", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -37,9 +37,6 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n     let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n-    for macro_def in krate.exported_macros() {\n-        builder.levels.register_id(macro_def.hir_id());\n-    }\n     intravisit::walk_crate(&mut builder, krate);\n     builder.levels.pop(push);\n "}, {"sha": "dd44e0cb1fa90872c1f64cad00ddb3d52bd75eb3", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -1100,7 +1100,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let vis = self.get_visibility(child_index);\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n-                    callback(Export { res, ident, vis, span });\n+\n+                    // FIXME: Macros are currently encoded twice, once as items and once as\n+                    // reexports. We ignore the items here and only use the reexports.\n+                    if !matches!(kind, DefKind::Macro(..)) {\n+                        callback(Export { res, ident, vis, span });\n+                    }\n+\n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n                     match kind {"}, {"sha": "2cd4fe3b7062160bd061755e8259e255f822f7ef", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -448,9 +448,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n \n         krate.visit_all_item_likes(&mut self.as_deep_visitor());\n-        for macro_def in krate.exported_macros() {\n-            self.visit_macro_def(macro_def);\n-        }\n     }\n \n     fn encode_def_path_table(&mut self) {\n@@ -1385,6 +1382,9 @@ impl EncodeContext<'a, 'tcx> {\n \n                 EntryKind::Fn(self.lazy(data))\n             }\n+            hir::ItemKind::Macro(ref macro_def) => {\n+                EntryKind::MacroDef(self.lazy(macro_def.clone()))\n+            }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.def_id, m);\n             }\n@@ -1539,13 +1539,6 @@ impl EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    /// Serialize the text of exported macros\n-    fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n-        let def_id = macro_def.def_id.to_def_id();\n-        record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n-        self.encode_ident_span(def_id, macro_def.ident);\n-    }\n-\n     fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {\n         record!(self.tables.kind[def_id] <- kind);\n         if encode_type {\n@@ -1915,9 +1908,6 @@ impl Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n         intravisit::walk_generics(self, generics);\n         self.encode_info_for_generics(generics);\n     }\n-    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n-        self.encode_info_for_macro_def(macro_def);\n-    }\n }\n \n impl EncodeContext<'a, 'tcx> {\n@@ -1972,6 +1962,7 @@ impl EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n             | hir::ItemKind::Fn(..)\n+            | hir::ItemKind::Macro(..)\n             | hir::ItemKind::Mod(..)\n             | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..)"}, {"sha": "1351b4950f143cb9714bd4cc95fbe2ca7ba208ee", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -394,20 +394,6 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         }\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'hir MacroDef<'hir>) {\n-        // Exported macros are visited directly from the crate root,\n-        // so they do not have `parent_node` set.\n-        // Find the correct enclosing module from their DefKey.\n-        let def_key = self.definitions.def_key(macro_def.def_id);\n-        let parent = def_key.parent.map_or(hir::CRATE_HIR_ID, |local_def_index| {\n-            self.definitions.local_def_id_to_hir_id(LocalDefId { local_def_index })\n-        });\n-        self.insert_owner(macro_def.def_id, OwnerNode::MacroDef(macro_def));\n-        self.with_parent(parent, |this| {\n-            this.insert_nested(macro_def.def_id);\n-        });\n-    }\n-\n     fn visit_variant(&mut self, v: &'hir Variant<'hir>, g: &'hir Generics<'hir>, item_id: HirId) {\n         self.insert(v.span, v.id, Node::Variant(v));\n         self.with_parent(v.id, |this| {"}, {"sha": "82c2f32b824188ade29f231355d48b3a2e8b7b40", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_hir::intravisit;\n-use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n@@ -218,6 +217,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Static(..) => DefKind::Static,\n                 ItemKind::Const(..) => DefKind::Const,\n                 ItemKind::Fn(..) => DefKind::Fn,\n+                ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),\n                 ItemKind::Mod(..) => DefKind::Mod,\n                 ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n                 ItemKind::TyAlias(..) => DefKind::TyAlias,\n@@ -543,15 +543,6 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn visit_exported_macros_in_krate<V>(&self, visitor: &mut V)\n-    where\n-        V: Visitor<'hir>,\n-    {\n-        for macro_def in self.krate().exported_macros() {\n-            visitor.visit_macro_def(macro_def);\n-        }\n-    }\n-\n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n     pub fn parent_iter(&self, current_id: HirId) -> ParentHirIterator<'_, 'hir> {\n@@ -1013,7 +1004,6 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);\n     tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);\n-    tcx.untracked_crate.non_exported_macro_attrs.hash_stable(&mut hcx, &mut stable_hasher);\n \n     let crate_hash: Fingerprint = stable_hasher.finish();\n     Svh::new(crate_hash.to_smaller_hash())\n@@ -1062,6 +1052,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n                 ItemKind::Static(..) => \"static\",\n                 ItemKind::Const(..) => \"const\",\n                 ItemKind::Fn(..) => \"fn\",\n+                ItemKind::Macro(..) => \"macro\",\n                 ItemKind::Mod(..) => \"mod\",\n                 ItemKind::ForeignMod { .. } => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\","}, {"sha": "4cb362238c1c5106b6aa5029ec7d88188d9b00d3", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -1149,6 +1149,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n         match item.kind {\n             hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::Use(..)\n+            | hir::ItemKind::Macro(..)\n             | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Trait(..)"}, {"sha": "d3dac35d2c9e5a326a8de3272ffeeb180fac824c", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -1723,6 +1723,16 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n+        // Historically we've run more checks on non-exported than exported macros,\n+        // so this lets us continue to run them while maintaining backwards compatibility.\n+        // In the long run, the checks should be harmonized.\n+        if let ItemKind::Macro(ref macro_def) = item.kind {\n+            let def_id = item.def_id.to_def_id();\n+            if macro_def.macro_rules && !self.tcx.has_attr(def_id, sym::macro_export) {\n+                check_non_exported_macro_for_invalid_attrs(self.tcx, item);\n+            }\n+        }\n+\n         let target = Target::from_item(item);\n         self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));\n         intravisit::walk_item(self, item)\n@@ -1795,11 +1805,6 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_attributes(macro_def.hir_id(), &macro_def.span, Target::MacroDef, None);\n-        intravisit::walk_macro_def(self, macro_def);\n-    }\n-\n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         self.check_attributes(param.hir_id, &param.span, Target::Param, None);\n \n@@ -1848,7 +1853,9 @@ fn check_invalid_crate_level_attr(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n     }\n }\n \n-fn check_invalid_macro_level_attr(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n+fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>) {\n+    let attrs = tcx.hir().attrs(item.hir_id());\n+\n     for attr in attrs {\n         if attr.has_name(sym::inline) {\n             struct_span_err!(\n@@ -1869,8 +1876,6 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n-        tcx.hir().visit_exported_macros_in_krate(check_attr_visitor);\n-        check_invalid_macro_level_attr(tcx, tcx.hir().krate().non_exported_macro_attrs);\n     }\n }\n "}, {"sha": "3f12a744be0e819cc69ad20f2813ce0fbfd18d21", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -107,10 +107,6 @@ fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol\n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n-    for m in tcx.hir().krate().exported_macros() {\n-        collector.observe_item(m.def_id);\n-    }\n-\n     collector.items\n }\n "}, {"sha": "b8ce973185c8d73011338ae1e4abe9d5f1b6dbbf", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -244,11 +244,6 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_attribute(&mut self, _: hir::HirId, attr: &'v ast::Attribute) {\n         self.record(\"Attribute\", Id::Attr(attr.id), attr);\n     }\n-\n-    fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef<'v>) {\n-        self.record(\"MacroDef\", Id::Node(macro_def.hir_id()), macro_def);\n-        hir_visit::walk_macro_def(self, macro_def)\n-    }\n }\n \n impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {"}, {"sha": "7d15ca1e8f798a2299f5e9201d8abe6a7814798e", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -127,9 +127,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n fn get_lib_features(tcx: TyCtxt<'_>, (): ()) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n-    for attr in krate.non_exported_macro_attrs {\n-        collector.visit_attribute(rustc_hir::CRATE_HIR_ID, attr);\n-    }\n+\n     intravisit::walk_crate(&mut collector, krate);\n     collector.lib_features\n }"}, {"sha": "7d22426609c14e2e443677e0beeba6b8f7f67c4c", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -263,6 +263,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     | hir::ItemKind::Use(..)\n                     | hir::ItemKind::OpaqueTy(..)\n                     | hir::ItemKind::TyAlias(..)\n+                    | hir::ItemKind::Macro(..)\n                     | hir::ItemKind::Mod(..)\n                     | hir::ItemKind::ForeignMod { .. }\n                     | hir::ItemKind::Impl { .. }"}, {"sha": "a88393cea828593f0ac8696284af222226a4d808", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -538,19 +538,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         );\n     }\n \n-    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.annotate(\n-            md.def_id,\n-            md.span,\n-            None,\n-            AnnotationKind::Required,\n-            InheritDeprecation::Yes,\n-            InheritConstStability::No,\n-            InheritStability::No,\n-            |_| {},\n-        );\n-    }\n-\n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n         let kind = match &p.kind {\n             // Allow stability attributes on default generic arguments.\n@@ -662,11 +649,6 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         self.check_missing_stability(i.def_id, i.span);\n         intravisit::walk_foreign_item(self, i);\n     }\n-\n-    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_missing_stability(md.def_id, md.span);\n-    }\n-\n     // Note that we don't need to `check_missing_stability` for default generic parameters,\n     // as we assume that any default generic parameters without attributes are automatically\n     // stable (assuming they have not inherited instability from their parent)."}, {"sha": "6ac2915c3452688b40b1d98ac57f040b10a8f486", "filename": "compiler/rustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2FCargo.toml?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -5,6 +5,7 @@ edition = \"2018\"\n \n [dependencies]\n rustc_middle = { path = \"../rustc_middle\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }"}, {"sha": "079a9ed878a7f387b1465f4859302c7d14701a6d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 67, "deletions": 47, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -6,6 +6,7 @@\n #![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n \n+use rustc_ast::MacroDef;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -26,7 +27,7 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, Const, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::traits::const_evaluatable::{self, AbstractConst};\n \n@@ -462,6 +463,43 @@ impl EmbargoVisitor<'tcx> {\n         }\n     }\n \n+    // We have to make sure that the items that macros might reference\n+    // are reachable, since they might be exported transitively.\n+    fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {\n+        // Non-opaque macros cannot make other items more accessible than they already are.\n+\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+        let attrs = self.tcx.hir().attrs(hir_id);\n+        if attr::find_transparency(&attrs, md.macro_rules).0 != Transparency::Opaque {\n+            return;\n+        }\n+\n+        let item_def_id = local_def_id.to_def_id();\n+        let macro_module_def_id =\n+            ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();\n+        if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n+            // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).\n+            return;\n+        }\n+\n+        if self.get(local_def_id).is_none() {\n+            return;\n+        }\n+\n+        // Since we are starting from an externally visible module,\n+        // all the parents in the loop below are also guaranteed to be modules.\n+        let mut module_def_id = macro_module_def_id;\n+        loop {\n+            let changed_reachability =\n+                self.update_macro_reachable(module_def_id, macro_module_def_id);\n+            if changed_reachability || module_def_id == CRATE_DEF_ID {\n+                break;\n+            }\n+            module_def_id =\n+                ty::DefIdTree::parent(self.tcx, module_def_id.to_def_id()).unwrap().expect_local();\n+        }\n+    }\n+\n     /// Updates the item as being reachable through a macro defined in the given\n     /// module. Returns `true` if the level has changed.\n     fn update_macro_reachable(\n@@ -511,16 +549,26 @@ impl EmbargoVisitor<'tcx> {\n         }\n         match def_kind {\n             // No type privacy, so can be directly marked as reachable.\n-            DefKind::Const\n-            | DefKind::Macro(_)\n-            | DefKind::Static\n-            | DefKind::TraitAlias\n-            | DefKind::TyAlias => {\n+            DefKind::Const | DefKind::Static | DefKind::TraitAlias | DefKind::TyAlias => {\n                 if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n                     self.update(def_id, level);\n                 }\n             }\n \n+            // Hygine isn't really implemented for `macro_rules!` macros at the\n+            // moment. Accordingly, marking them as reachable is unwise. `macro` macros\n+            // have normal  hygine, so we can treat them like other items without type\n+            // privacy and mark them reachable.\n+            DefKind::Macro(_) => {\n+                let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                let item = self.tcx.hir().expect_item(hir_id);\n+                if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }) = item.kind {\n+                    if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n+                        self.update(def_id, level);\n+                    }\n+                }\n+            }\n+\n             // We can't use a module name as the final segment of a path, except\n             // in use statements. Since re-export checking doesn't consider\n             // hygiene these don't need to be marked reachable. The contents of\n@@ -644,6 +692,12 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Impl { .. } => {\n                 Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels)\n             }\n+            // Only exported `macro_rules!` items are public, but they always are.\n+            hir::ItemKind::Macro(MacroDef { macro_rules: true, .. }) => {\n+                let def_id = item.def_id.to_def_id();\n+                let is_macro_export = self.tcx.has_attr(def_id, sym::macro_export);\n+                if is_macro_export { Some(AccessLevel::Public) } else { None }\n+            }\n             // Foreign modules inherit level from parents.\n             hir::ItemKind::ForeignMod { .. } => self.prev_level,\n             // Other `pub` items inherit levels from parents.\n@@ -652,6 +706,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::Fn(..)\n+            | hir::ItemKind::Macro(..)\n             | hir::ItemKind::Mod(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Struct(..)\n@@ -708,13 +763,17 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n+            hir::ItemKind::Macro(ref macro_def) => {\n+                self.update_reachability_from_macro(item.def_id, macro_def);\n+            }\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n                     if foreign_item.vis.node.is_pub() {\n                         self.update(foreign_item.id.def_id, item_level);\n                     }\n                 }\n             }\n+\n             hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::Use(..)\n             | hir::ItemKind::Static(..)\n@@ -730,7 +789,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         // Mark all items in interfaces of reachable items as reachable.\n         match item.kind {\n             // The interface is empty.\n-            hir::ItemKind::ExternCrate(..) => {}\n+            hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}\n             // All nested items are checked by `visit_item`.\n             hir::ItemKind::Mod(..) => {}\n             // Re-exports are handled in `visit_mod`. However, in order to avoid looping over\n@@ -885,45 +944,6 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n         intravisit::walk_mod(self, m, id);\n     }\n-\n-    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        // Non-opaque macros cannot make other items more accessible than they already are.\n-        let attrs = self.tcx.hir().attrs(md.hir_id());\n-        if attr::find_transparency(&attrs, md.ast.macro_rules).0 != Transparency::Opaque {\n-            // `#[macro_export]`-ed `macro_rules!` are `Public` since they\n-            // ignore their containing path to always appear at the crate root.\n-            if md.ast.macro_rules {\n-                self.update(md.def_id, Some(AccessLevel::Public));\n-            }\n-            return;\n-        }\n-\n-        let macro_module_def_id =\n-            ty::DefIdTree::parent(self.tcx, md.def_id.to_def_id()).unwrap().expect_local();\n-        if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {\n-            // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).\n-            return;\n-        }\n-\n-        let level = if md.vis.node.is_pub() { self.get(macro_module_def_id) } else { None };\n-        let new_level = self.update(md.def_id, level);\n-        if new_level.is_none() {\n-            return;\n-        }\n-\n-        // Since we are starting from an externally visible module,\n-        // all the parents in the loop below are also guaranteed to be modules.\n-        let mut module_def_id = macro_module_def_id;\n-        loop {\n-            let changed_reachability =\n-                self.update_macro_reachable(module_def_id, macro_module_def_id);\n-            if changed_reachability || module_def_id == CRATE_DEF_ID {\n-                break;\n-            }\n-            module_def_id =\n-                ty::DefIdTree::parent(self.tcx, module_def_id.to_def_id()).unwrap().expect_local();\n-        }\n-    }\n }\n \n impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n@@ -1981,7 +2001,7 @@ impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {\n             // Checked in resolve.\n             hir::ItemKind::Use(..) => {}\n             // No subitems.\n-            hir::ItemKind::GlobalAsm(..) => {}\n+            hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}\n             // Subitems of these items have inherited publicity.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Static(..)"}, {"sha": "bc2c46ec0aa7c2754cbd71d0967a0d5a3c2fe273", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -740,6 +740,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n             hir::ItemKind::ExternCrate(_)\n             | hir::ItemKind::Use(..)\n+            | hir::ItemKind::Macro(..)\n             | hir::ItemKind::Mod(..)\n             | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..) => {"}, {"sha": "7864b47ab0a7f429decd27730ceaeffef2f3da2d", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -416,6 +416,14 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 Ok(sig)\n             }\n+            hir::ItemKind::Macro(_) => {\n+                let mut text = \"macro\".to_owned();\n+                let name = self.ident.to_string();\n+                text.push_str(&name);\n+                text.push_str(&\"! {}\");\n+\n+                Ok(text_sig(text))\n+            }\n             hir::ItemKind::Mod(ref _mod) => {\n                 let mut text = \"mod \".to_owned();\n                 let name = self.ident.to_string();"}, {"sha": "145a0c5413bb81d3e65038f966a1bde5a9ee2b1a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -746,6 +746,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n         // These don't define types.\n         hir::ItemKind::ExternCrate(_)\n         | hir::ItemKind::Use(..)\n+        | hir::ItemKind::Macro(_)\n         | hir::ItemKind::Mod(_)\n         | hir::ItemKind::GlobalAsm(_) => {}\n         hir::ItemKind::ForeignMod { items, .. } => {"}, {"sha": "41277b22da0e034281487848d107834f1f71e621", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -427,6 +427,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n+                | ItemKind::Macro(..)\n                 | ItemKind::Mod(..)\n                 | ItemKind::ForeignMod { .. }\n                 | ItemKind::GlobalAsm(..)"}, {"sha": "da86d28ee0b2d6f5f8ef288514ed4ace70de2d86", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c62fa057527fc07afabb201bb31428409ef4d8a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c62fa057527fc07afabb201bb31428409ef4d8a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=8c62fa057527fc07afabb201bb31428409ef4d8a", "patch": "@@ -123,6 +123,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Enum(..)\n             | hir::ItemKind::Mod(..)\n+            | hir::ItemKind::Macro(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::Trait(..)"}]}