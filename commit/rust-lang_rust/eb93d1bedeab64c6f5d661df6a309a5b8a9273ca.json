{"sha": "eb93d1bedeab64c6f5d661df6a309a5b8a9273ca", "node_id": "C_kwDOAAsO6NoAKGViOTNkMWJlZGVhYjY0YzZmNWQ2NjFkZjZhMzA5YTViOGE5MjczY2E", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-11-25T19:37:14Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-12-07T19:29:50Z"}, "message": "Improve code readability", "tree": {"sha": "2b1908c37f7ea82871e8f8c9bc36e8cc79cac634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1908c37f7ea82871e8f8c9bc36e8cc79cac634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca", "html_url": "https://github.com/rust-lang/rust/commit/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c46173895430c63066731440e00faf0ab2195dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c46173895430c63066731440e00faf0ab2195dd", "html_url": "https://github.com/rust-lang/rust/commit/9c46173895430c63066731440e00faf0ab2195dd"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "eaf149a43005b63fa249a10be15df1e54db3aec8", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=eb93d1bedeab64c6f5d661df6a309a5b8a9273ca", "patch": "@@ -137,7 +137,7 @@ pub(super) fn write_shared(\n         Ok((ret, krates))\n     }\n \n-    /// Read a file and return all lines that match the <code>\"{crate}\":{data},\\</code> format,\n+    /// Read a file and return all lines that match the <code>\"{crate}\":{data},\\ </code> format,\n     /// and return a tuple `(Vec<DataString>, Vec<CrateNameString>)`.\n     ///\n     /// This forms the payload of files that look like this:"}, {"sha": "fd50e59460d332b868e8711c963df092033282a1", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb93d1bedeab64c6f5d661df6a309a5b8a9273ca/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=eb93d1bedeab64c6f5d661df6a309a5b8a9273ca", "patch": "@@ -187,6 +187,16 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n+    #[inline]\n+    fn add_to_current_mod(\n+        &mut self,\n+        item: &'tcx hir::Item<'_>,\n+        renamed: Option<Symbol>,\n+        parent_id: Option<hir::HirId>,\n+    ) {\n+        self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n+    }\n+\n     fn visit_item_inner(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n@@ -247,7 +257,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         }\n                     }\n \n-                    self.modules.last_mut().unwrap().items.push((item, renamed, parent_id));\n+                    self.add_to_current_mod(item, renamed, parent_id);\n                 }\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -267,7 +277,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let nonexported = !self.cx.tcx.has_attr(def_id, sym::macro_export);\n \n                 if is_macro_2_0 || nonexported || self.inlining {\n-                    self.modules.last_mut().unwrap().items.push((item, renamed, None));\n+                    self.add_to_current_mod(item, renamed, None);\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n@@ -283,20 +293,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n-                self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n+                self.add_to_current_mod(item, renamed, parent_id);\n             }\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if name != kw::Underscore {\n-                    self.modules.last_mut().unwrap().items.push((item, renamed, parent_id));\n+                    self.add_to_current_mod(item, renamed, parent_id);\n                 }\n             }\n             hir::ItemKind::Impl(impl_) => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located.\n                 if !self.inlining && impl_.of_trait.is_none() {\n-                    self.modules.last_mut().unwrap().items.push((item, None, None));\n+                    self.add_to_current_mod(item, None, None);\n                 }\n             }\n         }\n@@ -333,15 +343,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n         for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n-                if let Some(local_def_id) = def_id.as_local() {\n-                    if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n-                        if inserted.insert(def_id) {\n-                            let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                            top_level_module.items.push((item, None, None));\n-                        }\n-                    }\n-                }\n+            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n+                let Some(local_def_id) = def_id.as_local() &&\n+                self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n+                inserted.insert(def_id)\n+            {\n+                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                    top_level_module.items.push((item, None, None));\n             }\n         }\n "}]}