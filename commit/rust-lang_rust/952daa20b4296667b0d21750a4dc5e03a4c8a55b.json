{"sha": "952daa20b4296667b0d21750a4dc5e03a4c8a55b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MmRhYTIwYjQyOTY2NjdiMGQyMTc1MGE0ZGM1ZTAzYTRjOGE1NWI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-08T03:44:47Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-09T19:25:22Z"}, "message": "rustc_middle: use IndexSet in OnDiskCache", "tree": {"sha": "d00a89879c48ce266dd3c0b299a40d6f4a1f8879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00a89879c48ce266dd3c0b299a40d6f4a1f8879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952daa20b4296667b0d21750a4dc5e03a4c8a55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952daa20b4296667b0d21750a4dc5e03a4c8a55b", "html_url": "https://github.com/rust-lang/rust/commit/952daa20b4296667b0d21750a4dc5e03a4c8a55b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952daa20b4296667b0d21750a4dc5e03a4c8a55b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa6e44c8d2da446966b99765202ac2f6fe2e3ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa6e44c8d2da446966b99765202ac2f6fe2e3ee", "html_url": "https://github.com/rust-lang/rust/commit/2fa6e44c8d2da446966b99765202ac2f6fe2e3ee"}], "stats": {"total": 22, "additions": 5, "deletions": 17}, "files": [{"sha": "08b0bfecf49099ec0642a466c1e3d4c80fdc8dec", "filename": "src/librustc_middle/ty/query/on_disk_cache.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/952daa20b4296667b0d21750a4dc5e03a4c8a55b/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952daa20b4296667b0d21750a4dc5e03a4c8a55b/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs?ref=952daa20b4296667b0d21750a4dc5e03a4c8a55b", "patch": "@@ -5,7 +5,7 @@ use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, OnceCell};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Diagnostic;\n@@ -212,7 +212,6 @@ impl<'sess> OnDiskCache<'sess> {\n                 type_shorthands: Default::default(),\n                 predicate_shorthands: Default::default(),\n                 interpret_allocs: Default::default(),\n-                interpret_allocs_inverse: Vec::new(),\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,\n                 hygiene_context: &hygiene_encode_context,\n@@ -267,15 +266,15 @@ impl<'sess> OnDiskCache<'sess> {\n                 let mut interpret_alloc_index = Vec::new();\n                 let mut n = 0;\n                 loop {\n-                    let new_n = encoder.interpret_allocs_inverse.len();\n+                    let new_n = encoder.interpret_allocs.len();\n                     // If we have found new IDs, serialize those too.\n                     if n == new_n {\n                         // Otherwise, abort.\n                         break;\n                     }\n                     interpret_alloc_index.reserve(new_n - n);\n                     for idx in n..new_n {\n-                        let id = encoder.interpret_allocs_inverse[idx];\n+                        let id = encoder.interpret_allocs[idx];\n                         let pos = encoder.position() as u32;\n                         interpret_alloc_index.push(pos);\n                         interpret::specialized_encode_alloc_id(&mut encoder, tcx, id)?;\n@@ -767,8 +766,7 @@ struct CacheEncoder<'a, 'tcx, E: ty_codec::TyEncoder> {\n     encoder: &'a mut E,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n-    interpret_allocs: FxHashMap<interpret::AllocId, usize>,\n-    interpret_allocs_inverse: Vec<interpret::AllocId>,\n+    interpret_allocs: FxIndexSet<interpret::AllocId>,\n     source_map: CachingSourceMapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n     hygiene_context: &'a HygieneEncodeContext,\n@@ -807,17 +805,7 @@ where\n     E: 'a + TyEncoder,\n {\n     fn specialized_encode(&mut self, alloc_id: &interpret::AllocId) -> Result<(), Self::Error> {\n-        use std::collections::hash_map::Entry;\n-        let index = match self.interpret_allocs.entry(*alloc_id) {\n-            Entry::Occupied(e) => *e.get(),\n-            Entry::Vacant(e) => {\n-                let idx = self.interpret_allocs_inverse.len();\n-                self.interpret_allocs_inverse.push(*alloc_id);\n-                e.insert(idx);\n-                idx\n-            }\n-        };\n-\n+        let (index, _) = self.interpret_allocs.insert_full(*alloc_id);\n         index.encode(self)\n     }\n }"}]}