{"sha": "8d932160d92137e0a7d556a5ff7cfae4e68d5781", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOTMyMTYwZDkyMTM3ZTBhN2Q1NTZhNWZmN2NmYWU0ZTY4ZDU3ODE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T19:04:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T19:14:46Z"}, "message": "rt: Remove box annihilator", "tree": {"sha": "03fa0754ddea4dda8d5415f5f4ac59b9bd6cbae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03fa0754ddea4dda8d5415f5f4ac59b9bd6cbae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d932160d92137e0a7d556a5ff7cfae4e68d5781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d932160d92137e0a7d556a5ff7cfae4e68d5781", "html_url": "https://github.com/rust-lang/rust/commit/8d932160d92137e0a7d556a5ff7cfae4e68d5781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d932160d92137e0a7d556a5ff7cfae4e68d5781/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a469a3524d6f59255dd4482eb966fb4a9ec99b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/a469a3524d6f59255dd4482eb966fb4a9ec99b54", "html_url": "https://github.com/rust-lang/rust/commit/a469a3524d6f59255dd4482eb966fb4a9ec99b54"}], "stats": {"total": 260, "additions": 1, "deletions": 259}, "files": [{"sha": "e2e166ff2d63303f067d3c8ce407056509c29f73", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d932160d92137e0a7d556a5ff7cfae4e68d5781/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8d932160d92137e0a7d556a5ff7cfae4e68d5781/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=8d932160d92137e0a7d556a5ff7cfae4e68d5781", "patch": "@@ -72,7 +72,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_shape.cpp \\\n               rt/rust_abi.cpp \\\n               rt/rust_debug.cpp \\\n-              rt/rust_box_annihilator.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\"}, {"sha": "7bad8e72e20e0936e729cee45cddc195328e9caf", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d932160d92137e0a7d556a5ff7cfae4e68d5781/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d932160d92137e0a7d556a5ff7cfae4e68d5781/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=8d932160d92137e0a7d556a5ff7cfae4e68d5781", "patch": "@@ -44,8 +44,6 @@ struct StackSegment {\n \n extern mod rustrt {\n     #[legacy_exports];\n-    fn rust_annihilate_box(ptr: *Word);\n-\n     #[rust_stack]\n     fn rust_call_tydesc_glue(root: *Word, tydesc: *Word, field: size_t);\n \n@@ -330,7 +328,7 @@ pub fn cleanup_stack_for_failure() {\n             roots.insert(*root, ());\n \n             if ptr::is_null(tydesc) {\n-                rustrt::rust_annihilate_box(*root);\n+                // XXX: Destroy this box\n             } else {\n                 rustrt::rust_call_tydesc_glue(*root, tydesc, 3 as size_t);\n             }"}, {"sha": "be93b7d42391ecdaaa9dc148bc7bc25c00be9175", "filename": "src/rt/rust_box_annihilator.cpp", "status": "removed", "additions": 0, "deletions": 235, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/a469a3524d6f59255dd4482eb966fb4a9ec99b54/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a469a3524d6f59255dd4482eb966fb4a9ec99b54/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=a469a3524d6f59255dd4482eb966fb4a9ec99b54", "patch": "@@ -1,235 +0,0 @@\n-\n-#include \"rust_globals.h\"\n-#include \"rust_task.h\"\n-#include \"rust_shape.h\"\n-#include \"rust_box_annihilator.h\"\n-\n-class annihilator : public shape::data<annihilator,shape::ptr> {\n-    friend class shape::data<annihilator,shape::ptr>;\n-\n-    annihilator(const annihilator &other, const shape::ptr &in_dp)\n-        : shape::data<annihilator,shape::ptr>(other.task, other.align,\n-                                        other.sp,\n-                                        other.tables, in_dp) {}\n-\n-    annihilator(const annihilator &other,\n-          const uint8_t *in_sp,\n-          const rust_shape_tables *in_tables = NULL)\n-        : shape::data<annihilator,shape::ptr>(other.task,\n-                                        other.align,\n-                                        in_sp,\n-                                        in_tables ? in_tables : other.tables,\n-                                        other.dp) {}\n-\n-    annihilator(const annihilator &other,\n-          const uint8_t *in_sp,\n-          const rust_shape_tables *in_tables,\n-          shape::ptr in_dp)\n-        : shape::data<annihilator,shape::ptr>(other.task,\n-                                        other.align,\n-                                        in_sp,\n-                                        in_tables,\n-                                        in_dp) {}\n-\n-    annihilator(rust_task *in_task,\n-          bool in_align,\n-          const uint8_t *in_sp,\n-          const rust_shape_tables *in_tables,\n-          uint8_t *in_data)\n-        : shape::data<annihilator,shape::ptr>(in_task, in_align, in_sp,\n-                                              in_tables,\n-                                              shape::ptr(in_data)) {}\n-\n-    void walk_vec2(bool is_pod) {\n-        void *vec = shape::get_dp<void *>(dp);\n-        walk_vec2(is_pod, get_vec_data_range(dp));\n-        task->kernel->free(vec);\n-    }\n-\n-    void walk_unboxed_vec2(bool is_pod) {\n-        walk_vec2(is_pod, get_unboxed_vec_data_range(dp));\n-    }\n-\n-    void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n-        walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n-    }\n-\n-    void walk_vec2(bool is_pod,\n-                  const std::pair<shape::ptr,shape::ptr> &data_range) {\n-\n-        if (is_pod)\n-            return;\n-\n-        annihilator sub(*this, data_range.first);\n-        shape::ptr data_end = sub.end_dp = data_range.second;\n-        while (sub.dp < data_end) {\n-            sub.walk_reset();\n-            sub.align = true;\n-        }\n-    }\n-\n-    void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n-        shape::data<annihilator,shape::ptr>\n-          ::walk_variant1(tinfo, tag_variant);\n-    }\n-\n-    void walk_rptr2() { }\n-\n-    void walk_slice2(bool, bool) { }\n-\n-    void walk_uniq2() {\n-        void *x = *((void **)dp);\n-        // free contents first:\n-        shape::data<annihilator,shape::ptr>::walk_uniq_contents1();\n-        // now free the ptr:\n-        task->kernel->free(x);\n-    }\n-\n-    void walk_box2() {\n-        // In annihilator phase, do not walk the box contents.  There is an\n-        // outer loop walking all remaining boxes, and this box may well\n-        // have been freed already!\n-    }\n-\n-    void walk_fn2(char code) {\n-        switch (code) {\n-          case shape::SHAPE_UNIQ_FN: {\n-              fn_env_pair pair = *(fn_env_pair*)dp;\n-\n-              if (pair.env) {\n-                  // free closed over data:\n-                  shape::data<annihilator,shape::ptr>::walk_fn_contents1();\n-\n-                  // now free the ptr:\n-                  task->kernel->free(pair.env);\n-              }\n-              break;\n-          }\n-          case shape::SHAPE_BOX_FN: {\n-              // the box will be visited separately:\n-              shape::bump_dp<void*>(dp); // skip over the code ptr\n-              walk_box2();               // walk over the environment ptr\n-              break;\n-          }\n-          case shape::SHAPE_BARE_FN:         // Does not close over data.\n-          case shape::SHAPE_STACK_FN: break; // Not reachable from heap.\n-          default: abort();\n-        }\n-    }\n-\n-    void walk_obj2() {\n-        return;\n-    }\n-\n-    void walk_trait2() {\n-        walk_box2();\n-    }\n-\n-    void walk_tydesc2(char kind) {\n-        switch(kind) {\n-          case shape::SHAPE_TYDESC:\n-          case shape::SHAPE_SEND_TYDESC:\n-            break;\n-          default: abort();\n-        }\n-    }\n-\n-    struct run_dtor_args {\n-        const shape::rust_fn *dtor;\n-        void *data;\n-    };\n-\n-    typedef void (*dtor)(void **retptr, void *dptr);\n-\n-    static void run_dtor(run_dtor_args *args) {\n-        dtor f = (dtor)args->dtor;\n-        f(NULL, args->data);\n-    }\n-\n-    void walk_res2(const shape::rust_fn *dtor, const uint8_t *end_sp) {\n-        void *data = (void*)(uintptr_t)dp;\n-        // Switch back to the Rust stack to run the destructor\n-        run_dtor_args args = {dtor, data};\n-        task->call_on_rust_stack((void*)&args, (void*)run_dtor);\n-\n-        while (this->sp != end_sp) {\n-            this->walk();\n-            align = true;\n-        }\n-    }\n-\n-    void walk_subcontext2(annihilator &sub) { sub.walk(); }\n-\n-    void walk_uniq_contents2(annihilator &sub) { sub.walk(); }\n-\n-    void walk_struct2(const uint8_t *end_sp) {\n-        while (this->sp != end_sp) {\n-            this->walk();\n-            align = true;\n-        }\n-    }\n-\n-    void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n-                      const std::pair<const uint8_t *,const uint8_t *>\n-                      variant_ptr_and_end) {\n-        annihilator sub(*this, variant_ptr_and_end.first);\n-\n-        const uint8_t *variant_end = variant_ptr_and_end.second;\n-        while (sub.sp < variant_end) {\n-            sub.walk();\n-            align = true;\n-        }\n-    }\n-\n-    template<typename T>\n-    inline void walk_number2() { /* no-op */ }\n-\n-public:\n-    static void do_annihilate(rust_task *task, rust_opaque_box *box);\n-};\n-\n-void\n-annihilator::do_annihilate(rust_task *task, rust_opaque_box *box) {\n-    const type_desc *tydesc = box->td;\n-    uint8_t *p = (uint8_t*) box_body(box);\n-    shape::arena arena;\n-\n-    annihilator annihilator(task, true, tydesc->shape,\n-                            tydesc->shape_tables, p);\n-    annihilator.walk();\n-    // NB: A reference count of -1 indicates that this box lives on the\n-    // exchange heap. Otherwise it lives on the task-local heap.\n-    if (box->ref_count + 1 == 0) {\n-        task->kernel->free(box);\n-    } else {\n-        task->boxed.free(box);\n-    }\n-}\n-\n-void\n-annihilate_box(rust_task *task, rust_opaque_box *box) {\n-    annihilator::do_annihilate(task, box);\n-}\n-\n-void\n-annihilate_boxes(rust_task *task) {\n-    LOG(task, gc, \"annihilating boxes for task %p\", task);\n-\n-    boxed_region *boxed = &task->boxed;\n-    rust_opaque_box *box = boxed->first_live_alloc();\n-    while (box != NULL) {\n-        rust_opaque_box *tmp = box;\n-        box = box->next;\n-        annihilate_box(task, tmp);\n-    }\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "7064c36547e88442b74c6724edea0773431a54bf", "filename": "src/rt/rust_box_annihilator.h", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a469a3524d6f59255dd4482eb966fb4a9ec99b54/src%2Frt%2Frust_box_annihilator.h", "raw_url": "https://github.com/rust-lang/rust/raw/a469a3524d6f59255dd4482eb966fb4a9ec99b54/src%2Frt%2Frust_box_annihilator.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.h?ref=a469a3524d6f59255dd4482eb966fb4a9ec99b54", "patch": "@@ -1,12 +0,0 @@\n-#ifndef RUST_BOX_ANNIHILATOR_H\n-#define RUST_BOX_ANNIHILATOR_H\n-\n-#include \"rust_task.h\"\n-\n-void\n-annihilate_box(rust_task *task, rust_opaque_box *box);\n-\n-void\n-annihilate_boxes(rust_task *task);\n-\n-#endif"}, {"sha": "55c467751145f82f85ea0e520ed4cb0c8f5284f2", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d932160d92137e0a7d556a5ff7cfae4e68d5781/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d932160d92137e0a7d556a5ff7cfae4e68d5781/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8d932160d92137e0a7d556a5ff7cfae4e68d5781", "patch": "@@ -7,7 +7,6 @@\n #include \"sync/timer.h\"\n #include \"rust_abi.h\"\n #include \"rust_port.h\"\n-#include \"rust_box_annihilator.h\"\n \n #include <time.h>\n \n@@ -748,12 +747,6 @@ rust_set_exit_status(intptr_t code) {\n     task->kernel->set_exit_status((int)code);\n }\n \n-extern \"C\" CDECL void\n-rust_annihilate_box(rust_opaque_box *ptr) {\n-    rust_task *task = rust_get_current_task();\n-    annihilate_box(task, ptr);\n-}\n-\n extern void log_console_on();\n \n extern \"C\" CDECL void"}, {"sha": "06f02e758f81943a44fd111228074b4495deb649", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d932160d92137e0a7d556a5ff7cfae4e68d5781/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/8d932160d92137e0a7d556a5ff7cfae4e68d5781/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=8d932160d92137e0a7d556a5ff7cfae4e68d5781", "patch": "@@ -200,7 +200,6 @@ rust_task_deref\n rust_call_tydesc_glue\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n-rust_annihilate_box\n rust_gc_metadata\n rust_uv_ip4_port\n rust_uv_ip6_port"}]}