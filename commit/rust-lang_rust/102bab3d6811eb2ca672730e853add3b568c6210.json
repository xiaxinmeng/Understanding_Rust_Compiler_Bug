{"sha": "102bab3d6811eb2ca672730e853add3b568c6210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMmJhYjNkNjgxMWViMmNhNjcyNzMwZTg1M2FkZDNiNTY4YzYyMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-06T15:31:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-06T15:31:58Z"}, "message": "Auto merge of #33225 - michaelwoerister:fix-debuginfo-struct-ns, r=eddyb\n\ndebuginfo: Fix regression in namespace handling for struct types.\n\nFixes a small regression that has been introduced in recent refactorings.\n\nFixes #33193\n\nr? @eddyb", "tree": {"sha": "a973a7cef5da11e75a023ffeabb7d3ecbcd38964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a973a7cef5da11e75a023ffeabb7d3ecbcd38964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/102bab3d6811eb2ca672730e853add3b568c6210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/102bab3d6811eb2ca672730e853add3b568c6210", "html_url": "https://github.com/rust-lang/rust/commit/102bab3d6811eb2ca672730e853add3b568c6210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/102bab3d6811eb2ca672730e853add3b568c6210/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5158f3b282287624232ac6935569e440bb182664", "url": "https://api.github.com/repos/rust-lang/rust/commits/5158f3b282287624232ac6935569e440bb182664", "html_url": "https://github.com/rust-lang/rust/commit/5158f3b282287624232ac6935569e440bb182664"}, {"sha": "bb0e5254ae59ef135f3feb82964a918b36d6d13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0e5254ae59ef135f3feb82964a918b36d6d13d", "html_url": "https://github.com/rust-lang/rust/commit/bb0e5254ae59ef135f3feb82964a918b36d6d13d"}], "stats": {"total": 174, "additions": 124, "deletions": 50}, "files": [{"sha": "cc20751a0b023adf2a7258baedd88fa082b83cf0", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/102bab3d6811eb2ca672730e853add3b568c6210/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102bab3d6811eb2ca672730e853add3b568c6210/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=102bab3d6811eb2ca672730e853add3b568c6210", "patch": "@@ -1159,12 +1159,12 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let struct_name = compute_debuginfo_type_name(cx, struct_type, false);\n     let struct_llvm_type = type_of::in_memory_type_of(cx, struct_type);\n \n-    let (variant, substs) = match struct_type.sty {\n-        ty::TyStruct(def, substs) => (def.struct_variant(), substs),\n+    let (struct_def_id, variant, substs) = match struct_type.sty {\n+        ty::TyStruct(def, substs) => (def.did, def.struct_variant(), substs),\n         _ => bug!(\"prepare_struct_metadata on a non-struct\")\n     };\n \n-    let (containing_scope, _) = get_namespace_and_span_for_item(cx, variant.did);\n+    let (containing_scope, _) = get_namespace_and_span_for_item(cx, struct_def_id);\n \n     let struct_metadata_stub = create_struct_stub(cx,\n                                                   struct_llvm_type,"}, {"sha": "3fd4cf57b2a802c63847a444a0991f3af3f77e28", "filename": "src/test/debuginfo/struct-namespace.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/102bab3d6811eb2ca672730e853add3b568c6210/src%2Ftest%2Fdebuginfo%2Fstruct-namespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102bab3d6811eb2ca672730e853add3b568c6210/src%2Ftest%2Fdebuginfo%2Fstruct-namespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-namespace.rs?ref=102bab3d6811eb2ca672730e853add3b568c6210", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2013-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-gdb\n+// compile-flags:-g\n+// min-lldb-version: 310\n+\n+// Check that structs get placed in the correct namespace\n+\n+// lldb-command:run\n+// lldb-command:p struct1\n+// lldb-check:(struct_namespace::Struct1) $0 = [...]\n+// lldb-command:p struct2\n+// lldb-check:(struct_namespace::Struct2) $1 = [...]\n+\n+// lldb-command:p mod1_struct1\n+// lldb-check:(struct_namespace::mod1::Struct1) $2 = [...]\n+// lldb-command:p mod1_struct2\n+// lldb-check:(struct_namespace::mod1::Struct2) $3 = [...]\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+struct Struct1 {\n+    a: u32,\n+    b: u64,\n+}\n+\n+struct Struct2(u32);\n+\n+mod mod1 {\n+\n+    pub struct Struct1 {\n+        pub a: u32,\n+        pub b: u64,\n+    }\n+\n+    pub struct Struct2(pub u32);\n+}\n+\n+\n+fn main() {\n+    let struct1 = Struct1 {\n+        a: 0,\n+        b: 1,\n+    };\n+\n+    let struct2 = Struct2(2);\n+\n+    let mod1_struct1 = mod1::Struct1 {\n+        a: 3,\n+        b: 4,\n+    };\n+\n+    let mod1_struct2 = mod1::Struct2(5);\n+\n+    zzz(); // #break\n+}\n+\n+#[inline(never)]\n+fn zzz() {()}"}, {"sha": "19f706dc1d72ae59fd50331bcdd844c9ae3951c6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/102bab3d6811eb2ca672730e853add3b568c6210/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102bab3d6811eb2ca672730e853add3b568c6210/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=102bab3d6811eb2ca672730e853add3b568c6210", "patch": "@@ -880,58 +880,62 @@ fn cleanup_debug_info_options(options: &Option<String>) -> Option<String> {\n \n fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String]) {\n     let num_check_lines = check_lines.len();\n-    if num_check_lines > 0 {\n+\n+    let mut check_line_index = 0;\n+    for line in debugger_run_result.stdout.lines() {\n+        if check_line_index >= num_check_lines {\n+            break;\n+        }\n+\n+        if check_single_line(line, &(check_lines[check_line_index])[..]) {\n+            check_line_index += 1;\n+        }\n+    }\n+    if check_line_index != num_check_lines && num_check_lines > 0 {\n+        fatal_proc_rec(None, &format!(\"line not found in debugger output: {}\",\n+                                check_lines[check_line_index]),\n+                      debugger_run_result);\n+    }\n+\n+    fn check_single_line(line: &str, check_line: &str) -> bool {\n         // Allow check lines to leave parts unspecified (e.g., uninitialized\n-        // bits in the wrong case of an enum) with the notation \"[...]\".\n-        let check_fragments: Vec<Vec<String>> =\n-            check_lines.iter().map(|s| {\n-                s\n-                 .trim()\n-                 .split(\"[...]\")\n-                 .map(str::to_owned)\n-                 .collect()\n-            }).collect();\n-        // check if each line in props.check_lines appears in the\n-        // output (in order)\n-        let mut i = 0;\n-        for line in debugger_run_result.stdout.lines() {\n-            let mut rest = line.trim();\n-            let mut first = true;\n-            let mut failed = false;\n-            for frag in &check_fragments[i] {\n-                let found = if first {\n-                    if rest.starts_with(frag) {\n-                        Some(0)\n-                    } else {\n-                        None\n-                    }\n-                } else {\n-                    rest.find(frag)\n-                };\n-                match found {\n-                    None => {\n-                        failed = true;\n-                        break;\n-                    }\n-                    Some(i) => {\n-                        rest = &rest[(i + frag.len())..];\n-                    }\n-                }\n-                first = false;\n-            }\n-            if !failed && rest.is_empty() {\n-                i += 1;\n+        // bits in the  wrong case of an enum) with the notation \"[...]\".\n+        let line = line.trim();\n+        let check_line = check_line.trim();\n+        let can_start_anywhere = check_line.starts_with(\"[...]\");\n+        let can_end_anywhere = check_line.ends_with(\"[...]\");\n+\n+        let check_fragments: Vec<&str> = check_line.split(\"[...]\")\n+                                                   .filter(|frag| !frag.is_empty())\n+                                                   .collect();\n+        if check_fragments.is_empty() {\n+            return true;\n+        }\n+\n+        let (mut rest, first_fragment) = if can_start_anywhere {\n+            match line.find(check_fragments[0]) {\n+                Some(pos) => (&line[pos + check_fragments[0].len() ..], 1),\n+                None => return false\n             }\n-            if i == num_check_lines {\n-                // all lines checked\n-                break;\n+        } else {\n+            (line, 0)\n+        };\n+\n+        for fragment_index in first_fragment .. check_fragments.len() {\n+            let current_fragment = check_fragments[fragment_index];\n+            match rest.find(current_fragment) {\n+                Some(pos) => {\n+                    rest = &rest[pos + current_fragment.len() .. ];\n+                }\n+                None => return false\n             }\n         }\n-        if i != num_check_lines {\n-            fatal_proc_rec(None, &format!(\"line not found in debugger output: {}\",\n-                                    check_lines.get(i).unwrap()),\n-                          debugger_run_result);\n+\n+        if !can_end_anywhere && !rest.is_empty() {\n+            return false;\n         }\n+\n+        return true;\n     }\n }\n "}]}