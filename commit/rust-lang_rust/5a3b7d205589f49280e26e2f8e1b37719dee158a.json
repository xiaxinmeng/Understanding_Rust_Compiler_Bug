{"sha": "5a3b7d205589f49280e26e2f8e1b37719dee158a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhM2I3ZDIwNTU4OWY0OTI4MGUyNmUyZjhlMWIzNzcxOWRlZTE1OGE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-03T15:57:04Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:24Z"}, "message": "Add tests", "tree": {"sha": "54ad0a4a5307aed95e7205157340a4837f0b4bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ad0a4a5307aed95e7205157340a4837f0b4bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a3b7d205589f49280e26e2f8e1b37719dee158a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3b7d205589f49280e26e2f8e1b37719dee158a", "html_url": "https://github.com/rust-lang/rust/commit/5a3b7d205589f49280e26e2f8e1b37719dee158a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a3b7d205589f49280e26e2f8e1b37719dee158a/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb", "html_url": "https://github.com/rust-lang/rust/commit/c0f3c06c6da71dc1dc84bc7240d1b26c3ee7facb"}], "stats": {"total": 377, "additions": 312, "deletions": 65}, "files": [{"sha": "78f3e4a9b4328d3ed631e1e9bcdbbb62e4df8661", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=5a3b7d205589f49280e26e2f8e1b37719dee158a", "patch": "@@ -22,11 +22,27 @@ enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n }\n \n+macro_rules! match_empty {\n+    ($e:expr) => {\n+        match $e {}\n+    };\n+}\n+macro_rules! match_false {\n+    ($e:expr) => {\n+        match $e {\n+            _ if false => {}\n+        }\n+    };\n+}\n+\n fn foo(x: Foo) {\n-    match x {} // ok\n+    match_empty!(x); // ok\n     match x {\n         _ => {}, //~ ERROR unreachable pattern\n     }\n+    match x {\n+        _ if false => {}, //~ ERROR unreachable pattern\n+    }\n }\n \n fn main() {\n@@ -39,18 +55,33 @@ fn main() {\n         Some(_) => {} //~ ERROR unreachable pattern\n     }\n \n-    match 0u8 {}\n+    match_empty!(0u8);\n     //~^ ERROR type `u8` is non-empty\n-    match NonEmptyStruct(true) {}\n+    match_empty!(NonEmptyStruct(true));\n     //~^ ERROR type `NonEmptyStruct` is non-empty\n-    match (NonEmptyUnion1 { foo: () }) {}\n+    match_empty!((NonEmptyUnion1 { foo: () }));\n     //~^ ERROR type `NonEmptyUnion1` is non-empty\n-    match (NonEmptyUnion2 { foo: () }) {}\n+    match_empty!((NonEmptyUnion2 { foo: () }));\n     //~^ ERROR type `NonEmptyUnion2` is non-empty\n-    match NonEmptyEnum1::Foo(true) {}\n+    match_empty!(NonEmptyEnum1::Foo(true));\n     //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n-    match NonEmptyEnum2::Foo(true) {}\n+    match_empty!(NonEmptyEnum2::Foo(true));\n     //~^ ERROR multiple patterns of type `NonEmptyEnum2` are not handled\n-    match NonEmptyEnum5::V1 {}\n+    match_empty!(NonEmptyEnum5::V1);\n     //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n+\n+    match_false!(0u8);\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyStruct(true));\n+    //~^ ERROR `_` not covered\n+    match_false!((NonEmptyUnion1 { foo: () }));\n+    //~^ ERROR `_` not covered\n+    match_false!((NonEmptyUnion2 { foo: () }));\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyEnum1::Foo(true));\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyEnum2::Foo(true));\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyEnum5::V1);\n+    //~^ ERROR `_` not covered\n }"}, {"sha": "8af74f6e52bc7ef55222176824719ac968dafe11", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 117, "deletions": 25, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=5a3b7d205589f49280e26e2f8e1b37719dee158a", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:28:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:41:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,65 +11,71 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:35:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:44:9\n+   |\n+LL |         _ if false => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:51:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:39:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:55:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:42:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:58:18\n    |\n-LL |     match 0u8 {}\n-   |           ^^^\n+LL |     match_empty!(0u8);\n+   |                  ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:44:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:60:18\n    |\n-LL |     match NonEmptyStruct(true) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^\n+LL |     match_empty!(NonEmptyStruct(true));\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:46:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:62:18\n    |\n-LL |     match (NonEmptyUnion1 { foo: () }) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match_empty!((NonEmptyUnion1 { foo: () }));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:48:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:64:18\n    |\n-LL |     match (NonEmptyUnion2 { foo: () }) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:50:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:66:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n    | |     --- variant not covered\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n-LL |       match NonEmptyEnum1::Foo(true) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       match_empty!(NonEmptyEnum1::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:52:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:68:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -79,24 +85,110 @@ LL | |     Bar,\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n-LL |       match NonEmptyEnum2::Foo(true) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       match_empty!(NonEmptyEnum2::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n-  --> $DIR/match-empty-exhaustive_patterns.rs:54:11\n+  --> $DIR/match-empty-exhaustive_patterns.rs:70:18\n+   |\n+LL | / enum NonEmptyEnum5 {\n+LL | |     V1, V2, V3, V4, V5,\n+LL | | }\n+   | |_- `NonEmptyEnum5` defined here\n+...\n+LL |       match_empty!(NonEmptyEnum5::V1);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:73:18\n+   |\n+LL |     match_false!(0u8);\n+   |                  ^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:75:18\n+   |\n+LL | struct NonEmptyStruct(bool);\n+   | ---------------------------- `NonEmptyStruct` defined here\n+...\n+LL |     match_false!(NonEmptyStruct(true));\n+   |                  ^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:77:18\n+   |\n+LL | / union NonEmptyUnion1 {\n+LL | |     foo: (),\n+LL | | }\n+   | |_- `NonEmptyUnion1` defined here\n+...\n+LL |       match_false!((NonEmptyUnion1 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n+   |\n+LL | / union NonEmptyUnion2 {\n+LL | |     foo: (),\n+LL | |     bar: (),\n+LL | | }\n+   | |_- `NonEmptyUnion2` defined here\n+...\n+LL |       match_false!((NonEmptyUnion2 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n+   |\n+LL | / enum NonEmptyEnum1 {\n+LL | |     Foo(bool),\n+LL | | }\n+   | |_- `NonEmptyEnum1` defined here\n+...\n+LL |       match_false!(NonEmptyEnum1::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n+   |\n+LL | / enum NonEmptyEnum2 {\n+LL | |     Foo(bool),\n+LL | |     Bar,\n+LL | | }\n+   | |_- `NonEmptyEnum2` defined here\n+...\n+LL |       match_false!(NonEmptyEnum2::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n LL | | }\n    | |_- `NonEmptyEnum5` defined here\n ...\n-LL |       match NonEmptyEnum5::V1 {}\n-   |             ^^^^^^^^^^^^^^^^^\n+LL |       match_false!(NonEmptyEnum5::V1);\n+   |                    ^^^^^^^^^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "80b761728b8aa2d3b4528ff74f8c3c7a696f98a5", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=5a3b7d205589f49280e26e2f8e1b37719dee158a", "patch": "@@ -21,11 +21,23 @@ enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n }\n \n-fn foo1(x: Foo) {\n-    match x {} // ok\n+macro_rules! match_empty {\n+    ($e:expr) => {\n+        match $e {}\n+    };\n+}\n+macro_rules! match_false {\n+    ($e:expr) => {\n+        match $e {\n+            _ if false => {}\n+        }\n+    };\n }\n \n-fn foo2(x: Foo) {\n+fn foo(x: Foo) {\n+    match_empty!(x); // ok\n+    match_false!(x); // Not detected as unreachable nor exhaustive.\n+    //~^ ERROR non-exhaustive patterns: `_` not covered\n     match x {\n         _ => {}, // Not detected as unreachable, see #55123.\n     }\n@@ -42,18 +54,33 @@ fn main() {\n         Some(_) => {}\n     }\n \n-    match 0u8 {}\n+    match_empty!(0u8);\n     //~^ ERROR type `u8` is non-empty\n-    match NonEmptyStruct(true) {}\n+    match_empty!(NonEmptyStruct(true));\n     //~^ ERROR type `NonEmptyStruct` is non-empty\n-    match (NonEmptyUnion1 { foo: () }) {}\n+    match_empty!((NonEmptyUnion1 { foo: () }));\n     //~^ ERROR type `NonEmptyUnion1` is non-empty\n-    match (NonEmptyUnion2 { foo: () }) {}\n+    match_empty!((NonEmptyUnion2 { foo: () }));\n     //~^ ERROR type `NonEmptyUnion2` is non-empty\n-    match NonEmptyEnum1::Foo(true) {}\n+    match_empty!(NonEmptyEnum1::Foo(true));\n     //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n-    match NonEmptyEnum2::Foo(true) {}\n+    match_empty!(NonEmptyEnum2::Foo(true));\n     //~^ ERROR multiple patterns of type `NonEmptyEnum2` are not handled\n-    match NonEmptyEnum5::V1 {}\n+    match_empty!(NonEmptyEnum5::V1);\n     //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n+\n+    match_false!(0u8);\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyStruct(true));\n+    //~^ ERROR `_` not covered\n+    match_false!((NonEmptyUnion1 { foo: () }));\n+    //~^ ERROR `_` not covered\n+    match_false!((NonEmptyUnion2 { foo: () }));\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyEnum1::Foo(true));\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyEnum2::Foo(true));\n+    //~^ ERROR `_` not covered\n+    match_false!(NonEmptyEnum5::V1);\n+    //~^ ERROR `_` not covered\n }"}, {"sha": "b0532de66fd380bd886f316bb557659c9e1c67f7", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 119, "deletions": 22, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3b7d205589f49280e26e2f8e1b37719dee158a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=5a3b7d205589f49280e26e2f8e1b37719dee158a", "patch": "@@ -1,51 +1,62 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:39:18\n+   |\n+LL | enum Foo {}\n+   | ----------- `Foo` defined here\n+...\n+LL |     match_false!(x); // Not detected as unreachable nor exhaustive.\n+   |                  ^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty.rs:45:11\n+  --> $DIR/match-empty.rs:57:18\n    |\n-LL |     match 0u8 {}\n-   |           ^^^\n+LL |     match_empty!(0u8);\n+   |                  ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty.rs:47:11\n+  --> $DIR/match-empty.rs:59:18\n    |\n-LL |     match NonEmptyStruct(true) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^\n+LL |     match_empty!(NonEmptyStruct(true));\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty.rs:49:11\n+  --> $DIR/match-empty.rs:61:18\n    |\n-LL |     match (NonEmptyUnion1 { foo: () }) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match_empty!((NonEmptyUnion1 { foo: () }));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty.rs:51:11\n+  --> $DIR/match-empty.rs:63:18\n    |\n-LL |     match (NonEmptyUnion2 { foo: () }) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     match_empty!((NonEmptyUnion2 { foo: () }));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n-  --> $DIR/match-empty.rs:53:11\n+  --> $DIR/match-empty.rs:65:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n    | |     --- variant not covered\n LL | | }\n    | |_- `NonEmptyEnum1` defined here\n ...\n-LL |       match NonEmptyEnum1::Foo(true) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       match_empty!(NonEmptyEnum1::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n-  --> $DIR/match-empty.rs:55:11\n+  --> $DIR/match-empty.rs:67:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -55,24 +66,110 @@ LL | |     Bar,\n LL | | }\n    | |_- `NonEmptyEnum2` defined here\n ...\n-LL |       match NonEmptyEnum2::Foo(true) {}\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       match_empty!(NonEmptyEnum2::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n-  --> $DIR/match-empty.rs:57:11\n+  --> $DIR/match-empty.rs:69:18\n+   |\n+LL | / enum NonEmptyEnum5 {\n+LL | |     V1, V2, V3, V4, V5,\n+LL | | }\n+   | |_- `NonEmptyEnum5` defined here\n+...\n+LL |       match_empty!(NonEmptyEnum5::V1);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:72:18\n+   |\n+LL |     match_false!(0u8);\n+   |                  ^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:74:18\n+   |\n+LL | struct NonEmptyStruct(bool);\n+   | ---------------------------- `NonEmptyStruct` defined here\n+...\n+LL |     match_false!(NonEmptyStruct(true));\n+   |                  ^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:76:18\n+   |\n+LL | / union NonEmptyUnion1 {\n+LL | |     foo: (),\n+LL | | }\n+   | |_- `NonEmptyUnion1` defined here\n+...\n+LL |       match_false!((NonEmptyUnion1 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:78:18\n+   |\n+LL | / union NonEmptyUnion2 {\n+LL | |     foo: (),\n+LL | |     bar: (),\n+LL | | }\n+   | |_- `NonEmptyUnion2` defined here\n+...\n+LL |       match_false!((NonEmptyUnion2 { foo: () }));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:80:18\n+   |\n+LL | / enum NonEmptyEnum1 {\n+LL | |     Foo(bool),\n+LL | | }\n+   | |_- `NonEmptyEnum1` defined here\n+...\n+LL |       match_false!(NonEmptyEnum1::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:82:18\n+   |\n+LL | / enum NonEmptyEnum2 {\n+LL | |     Foo(bool),\n+LL | |     Bar,\n+LL | | }\n+   | |_- `NonEmptyEnum2` defined here\n+...\n+LL |       match_false!(NonEmptyEnum2::Foo(true));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/match-empty.rs:84:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n LL | | }\n    | |_- `NonEmptyEnum5` defined here\n ...\n-LL |       match NonEmptyEnum5::V1 {}\n-   |             ^^^^^^^^^^^^^^^^^\n+LL |       match_false!(NonEmptyEnum5::V1);\n+   |                    ^^^^^^^^^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}]}