{"sha": "d17db64b8dffd1bcc5c1ceebb091a048874244b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2RiNjRiOGRmZmQxYmNjNWMxY2VlYmIwOTFhMDQ4ODc0MjQ0YjU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-29T23:43:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-29T23:43:39Z"}, "message": "Rollup merge of #75852 - camelid:patch-3, r=jyn514\n\nSwitch to intra-doc links in `core::hash`\n\nPart of #75080.\n\n@rustbot modify labels: A-intra-doc-links T-doc T-rustdoc", "tree": {"sha": "1f3b21d82905e858b2698d64616cf7391eead1ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3b21d82905e858b2698d64616cf7391eead1ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17db64b8dffd1bcc5c1ceebb091a048874244b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSugrCRBK7hj4Ov3rIwAAdHIIAD2xfe9VcT7Y264IyhLfluMi\n5+l0Nl+7D8q+04gLc+qMgQzybGdSCGnzch4O+ChNw8ib5+LsoXbnMh77x6mycu5P\nUiF/Uj2qlpEZdLrZ8hiTz+/5trcivSKl4Pih2FW+7ywMvKaHVNxW9OmLAQKjKYoq\nef4U2M2YUQ+j8gTXj6m43Y/J1hsXq1vcrjHWxSKBNqF/gJsZ+bvgYPRcM8SmZxsG\nI9W8AD0oHkqtlCpbZxbv6Blo919e571SL+UlXK/V/30cbWRB7KtofeJnqDa4HZOI\nfOvGCV5bOIYpuf/rM/ZTS/b5BtvnospNteD/D5szT+xuvm/Fu0MSk8l3o51zfLA=\n=tWI6\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f3b21d82905e858b2698d64616cf7391eead1ff\nparent 027b2f1e0672849593f1c012102a70669f34d47c\nparent f0722c06a7f684502c06dd687383a2c589c5564f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1598744619 +0200\ncommitter GitHub <noreply@github.com> 1598744619 +0200\n\nRollup merge of #75852 - camelid:patch-3, r=jyn514\n\nSwitch to intra-doc links in `core::hash`\n\nPart of #75080.\n\n@rustbot modify labels: A-intra-doc-links T-doc T-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17db64b8dffd1bcc5c1ceebb091a048874244b5", "html_url": "https://github.com/rust-lang/rust/commit/d17db64b8dffd1bcc5c1ceebb091a048874244b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17db64b8dffd1bcc5c1ceebb091a048874244b5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027b2f1e0672849593f1c012102a70669f34d47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/027b2f1e0672849593f1c012102a70669f34d47c", "html_url": "https://github.com/rust-lang/rust/commit/027b2f1e0672849593f1c012102a70669f34d47c"}, {"sha": "f0722c06a7f684502c06dd687383a2c589c5564f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0722c06a7f684502c06dd687383a2c589c5564f", "html_url": "https://github.com/rust-lang/rust/commit/f0722c06a7f684502c06dd687383a2c589c5564f"}], "stats": {"total": 31, "additions": 8, "deletions": 23}, "files": [{"sha": "f53ba98143842d5f50ca9f40918a8f9f8e6ecb8a", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d17db64b8dffd1bcc5c1ceebb091a048874244b5/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17db64b8dffd1bcc5c1ceebb091a048874244b5/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=d17db64b8dffd1bcc5c1ceebb091a048874244b5", "patch": "@@ -39,8 +39,6 @@\n //! If you need more control over how a value is hashed, you need to implement\n //! the [`Hash`] trait:\n //!\n-//! [`Hash`]: trait.Hash.html\n-//!\n //! ```rust\n //! use std::collections::hash_map::DefaultHasher;\n //! use std::hash::{Hash, Hasher};\n@@ -149,11 +147,9 @@ mod sip;\n /// Thankfully, you won't need to worry about upholding this property when\n /// deriving both [`Eq`] and `Hash` with `#[derive(PartialEq, Eq, Hash)]`.\n ///\n-/// [`Eq`]: ../../std/cmp/trait.Eq.html\n-/// [`Hasher`]: trait.Hasher.html\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n-/// [`hash`]: #tymethod.hash\n+/// [`hash`]: Hash::hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the given [`Hasher`].\n@@ -168,8 +164,6 @@ pub trait Hash {\n     /// 7920.hash(&mut hasher);\n     /// println!(\"Hash is {:x}!\", hasher.finish());\n     /// ```\n-    ///\n-    /// [`Hasher`]: trait.Hasher.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn hash<H: Hasher>(&self, state: &mut H);\n \n@@ -186,8 +180,6 @@ pub trait Hash {\n     /// Hash::hash_slice(&numbers, &mut hasher);\n     /// println!(\"Hash is {:x}!\", hasher.finish());\n     /// ```\n-    ///\n-    /// [`Hasher`]: trait.Hasher.html\n     #[stable(feature = \"hash_slice\", since = \"1.3.0\")]\n     fn hash_slice<H: Hasher>(data: &[Self], state: &mut H)\n     where\n@@ -239,10 +231,9 @@ pub use macros::Hash;\n /// println!(\"Hash is {:x}!\", hasher.finish());\n /// ```\n ///\n-/// [`Hash`]: trait.Hash.html\n-/// [`finish`]: #tymethod.finish\n-/// [`write`]: #tymethod.write\n-/// [`write_u8`]: #method.write_u8\n+/// [`finish`]: Hasher::finish\n+/// [`write`]: Hasher::write\n+/// [`write_u8`]: Hasher::write_u8\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hasher {\n     /// Returns the hash value for the values written so far.\n@@ -264,7 +255,7 @@ pub trait Hasher {\n     /// println!(\"Hash is {:x}!\", hasher.finish());\n     /// ```\n     ///\n-    /// [`write`]: #tymethod.write\n+    /// [`write`]: Hasher::write\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn finish(&self) -> u64;\n \n@@ -433,8 +424,7 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n /// assert_eq!(hasher_1.finish(), hasher_2.finish());\n /// ```\n ///\n-/// [`build_hasher`]: #tymethod.build_hasher\n-/// [`Hasher`]: trait.Hasher.html\n+/// [`build_hasher`]: BuildHasher::build_hasher\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n pub trait BuildHasher {\n@@ -456,8 +446,6 @@ pub trait BuildHasher {\n     /// let s = RandomState::new();\n     /// let new_s = s.build_hasher();\n     /// ```\n-    ///\n-    /// [`Hasher`]: trait.Hasher.html\n     #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n     fn build_hasher(&self) -> Self::Hasher;\n }\n@@ -470,7 +458,7 @@ pub trait BuildHasher {\n /// defined.\n ///\n /// Any `BuildHasherDefault` is [zero-sized]. It can be created with\n-/// [`default`][method.Default]. When using `BuildHasherDefault` with [`HashMap`] or\n+/// [`default`][method.default]. When using `BuildHasherDefault` with [`HashMap`] or\n /// [`HashSet`], this doesn't need to be done, since they implement appropriate\n /// [`Default`] instances themselves.\n ///\n@@ -503,10 +491,7 @@ pub trait BuildHasher {\n /// let hash_map = HashMap::<u32, u32, MyBuildHasher>::default();\n /// ```\n ///\n-/// [`BuildHasher`]: trait.BuildHasher.html\n-/// [`Default`]: ../default/trait.Default.html\n-/// [method.default]: #method.default\n-/// [`Hasher`]: trait.Hasher.html\n+/// [method.default]: BuildHasherDefault::default\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [zero-sized]: https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts"}]}