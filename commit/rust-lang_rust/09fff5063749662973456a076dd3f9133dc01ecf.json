{"sha": "09fff5063749662973456a076dd3f9133dc01ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZmZmNTA2Mzc0OTY2Mjk3MzQ1NmEwNzZkZDNmOTEzM2RjMDFlY2Y=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-04T13:24:21Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-09T14:50:51Z"}, "message": "resolve: Factor out some common binding creation functionality", "tree": {"sha": "bfb3f429d6a370177bf0348d5ed26b9e98586218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfb3f429d6a370177bf0348d5ed26b9e98586218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09fff5063749662973456a076dd3f9133dc01ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09fff5063749662973456a076dd3f9133dc01ecf", "html_url": "https://github.com/rust-lang/rust/commit/09fff5063749662973456a076dd3f9133dc01ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09fff5063749662973456a076dd3f9133dc01ecf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a7c8be8b30e017e0673c77c188ae53bf6c6667", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a7c8be8b30e017e0673c77c188ae53bf6c6667", "html_url": "https://github.com/rust-lang/rust/commit/41a7c8be8b30e017e0673c77c188ae53bf6c6667"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "2d7048fe5c1649c15aa68b813ee8f8083fcc1adb", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/09fff5063749662973456a076dd3f9133dc01ecf/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09fff5063749662973456a076dd3f9133dc01ecf/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=09fff5063749662973456a076dd3f9133dc01ecf", "patch": "@@ -492,6 +492,10 @@ impl<'a> Resolver<'a> {\n         // Go through all the scopes and try to resolve the name.\n         let break_result = self.visit_scopes(scope_set, parent_scope, orig_ident,\n                                              |this, scope, use_prelude, ident| {\n+            let ok = |res, span, arenas| Ok((\n+                (res, ty::Visibility::Public, span, ExpnId::root()).to_name_binding(arenas),\n+                Flags::empty(),\n+            ));\n             let result = match scope {\n                 Scope::DeriveHelpers => {\n                     let mut result = Err(Determinacy::Determined);\n@@ -500,10 +504,8 @@ impl<'a> Resolver<'a> {\n                         match this.resolve_macro_path(derive, Some(MacroKind::Derive),\n                                                       parent_scope, true, force) {\n                             Ok((Some(ext), _)) => if ext.helper_attrs.contains(&ident.name) {\n-                                let binding = (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n-                                               ty::Visibility::Public, derive.span, ExpnId::root())\n-                                               .to_name_binding(this.arenas);\n-                                result = Ok((binding, Flags::empty()));\n+                                let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n+                                result = ok(res, derive.span, this.arenas);\n                                 break;\n                             }\n                             Ok(_) | Err(Determinacy::Determined) => {}\n@@ -571,12 +573,9 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n                 Scope::RegisteredAttrs => match this.registered_attrs.get(&ident).cloned() {\n-                    Some(ident) => {\n-                        let binding = (Res::NonMacroAttr(NonMacroAttrKind::Registered),\n-                                       ty::Visibility::Public, ident.span, ExpnId::root())\n-                                       .to_name_binding(this.arenas);\n-                        Ok((binding, Flags::empty()))\n-                    }\n+                    Some(ident) => ok(\n+                        Res::NonMacroAttr(NonMacroAttrKind::Registered), ident.span, this.arenas\n+                    ),\n                     None => Err(Determinacy::Determined)\n                 }\n                 Scope::MacroUsePrelude => match this.macro_use_prelude.get(&ident.name).cloned() {\n@@ -586,19 +585,14 @@ impl<'a> Resolver<'a> {\n                     ))\n                 }\n                 Scope::BuiltinAttrs => if is_builtin_attr_name(ident.name) {\n-                    let binding = (Res::NonMacroAttr(NonMacroAttrKind::Builtin),\n-                                   ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n-                                   .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::empty()))\n+                    ok(Res::NonMacroAttr(NonMacroAttrKind::Builtin), DUMMY_SP, this.arenas)\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n                 Scope::LegacyPluginHelpers => if this.session.plugin_attributes.borrow().iter()\n                                                      .any(|(name, _)| ident.name == *name) {\n-                    let binding = (Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper),\n-                                   ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n-                                   .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::empty()))\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n+                    ok(res, DUMMY_SP, this.arenas)\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n@@ -609,12 +603,7 @@ impl<'a> Resolver<'a> {\n                     )),\n                 }\n                 Scope::ToolPrelude => match this.registered_tools.get(&ident).cloned() {\n-                    Some(ident) => {\n-                        let binding = (Res::ToolMod,\n-                                       ty::Visibility::Public, ident.span, ExpnId::root())\n-                                       .to_name_binding(this.arenas);\n-                        Ok((binding, Flags::empty()))\n-                    }\n+                    Some(ident) => ok(Res::ToolMod, ident.span, this.arenas),\n                     None => Err(Determinacy::Determined)\n                 }\n                 Scope::StdLibPrelude => {\n@@ -637,11 +626,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::BuiltinTypes => match this.primitive_type_table.primitive_types\n                                                  .get(&ident.name).cloned() {\n-                    Some(prim_ty) => {\n-                        let binding = (Res::PrimTy(prim_ty), ty::Visibility::Public,\n-                                       DUMMY_SP, ExpnId::root()).to_name_binding(this.arenas);\n-                        Ok((binding, Flags::empty()))\n-                    }\n+                    Some(prim_ty) => ok(Res::PrimTy(prim_ty), DUMMY_SP, this.arenas),\n                     None => Err(Determinacy::Determined)\n                 }\n             };"}]}