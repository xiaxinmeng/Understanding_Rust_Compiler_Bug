{"sha": "b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGEyNmNkZDFkMDg2YTNjYTdmZmFlMzViNzNiNzJmOWNlODViOGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-22T08:56:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-22T08:56:04Z"}, "message": "Produce nice array lengths on a best effort basis", "tree": {"sha": "05a5dbda1321c25544986ef8d5b2f05d71025df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a5dbda1321c25544986ef8d5b2f05d71025df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqzb6QACgkQpp+NIls6\n19myDRAAru5w65r6oQbMqoOa4koC5wiL8LVYdfM+rCbV7ZE1QGxMPlrQVmrZ7SUl\njSrQzCfSyttxH1cyZywiMmmCH9OeLaWAyuDJPwPDSNaRGCupCIUbnP9x2ZKKn1oJ\nAIJn2p27aW9j0OAOdwezz82ZQTx26yPgQsZfrG2gLb+AKSnjF6TORF3KAs6QtWxc\n4jqmeVEVCYRa1pqc4aKCNBZGmb14g9kRRcnRqjxTRgegxApJ2d0HtljmLo+iu0ZD\nueJhOOUl5lZcwSEFuRkXwTgbQ/XOmWvFc4pB+eaMg7Ul0KKG3gWyRO0LNdaIg7vS\nUaJBKcWG0Rtz2G+PTfe7B93KRSFcLQlbeA58v7A4Ri5T5uFsTnUaxWMD6/0TUcVd\nid96yeG8UY+rpM/f2lFdM+JftUnw986QtFzOexZbt43SWn/Wci1EvnEn69eaUpoF\nXzPdmSutUSSpDWI5DLES5P4qhNYOkqwgxs2kDZ6qZGSBGkqYIMFm2/x4v8cUvRhb\npFi4GVxcqjyKXfB9ySMrkr3UQWtnpdqo/HadWnd65jae2X1mBPaiIA+2l1mVIU7n\nLX29K2JjLFLSTusT4/FWyhVfKRi83tFcDjwzPu/QslaLza2G2wXxFA4GcMO6JDX4\n9oQlVWa5AFjUu8Ql2eG3/fPRSBmvDcL+/mY+DLrnoq5XICO8GtY=\n=Jqtp\n-----END PGP SIGNATURE-----", "payload": "tree 05a5dbda1321c25544986ef8d5b2f05d71025df3\nparent df76629da77b58cd9a63d41b7bc1cc987dcc2bb8\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521708964 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521708964 +0100\n\nProduce nice array lengths on a best effort basis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "html_url": "https://github.com/rust-lang/rust/commit/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df76629da77b58cd9a63d41b7bc1cc987dcc2bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/df76629da77b58cd9a63d41b7bc1cc987dcc2bb8", "html_url": "https://github.com/rust-lang/rust/commit/df76629da77b58cd9a63d41b7bc1cc987dcc2bb8"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "79d5cf7935941bd99f384bca1ef96bdd096583d9", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "patch": "@@ -443,10 +443,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             4\n         };\n+\n+        let normalize = |candidate| self.tcx.global_tcx().infer_ctxt().enter(|ref infcx| {\n+            let normalized = infcx\n+                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n+                .normalize(candidate)\n+                .ok();\n+            match normalized {\n+                Some(normalized) => format!(\"\\n  {:?}\", normalized.value),\n+                None => format!(\"\\n  {:?}\", candidate),\n+            }\n+        });\n+\n         err.help(&format!(\"the following implementations were found:{}{}\",\n-                          &impl_candidates[0..end].iter().map(|candidate| {\n-                              format!(\"\\n  {:?}\", candidate)\n-                          }).collect::<String>(),\n+                          &impl_candidates[0..end].iter().map(normalize).collect::<String>(),\n                           if impl_candidates.len() > 5 {\n                               format!(\"\\nand {} others\", impl_candidates.len() - 4)\n                           } else {"}, {"sha": "056f1278c47c75b3b44825cf43158ba6abbccd9d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "patch": "@@ -1177,8 +1177,8 @@ define_print! {\n                         ConstVal::Value(Value::ByVal(PrimVal::Bytes(sz))) => {\n                             write!(f, \"{}\", sz)?;\n                         }\n-                        ConstVal::Unevaluated(_def_id, substs) => {\n-                            write!(f, \"<unevaluated{:?}>\", &substs[..])?;\n+                        ConstVal::Unevaluated(_def_id, _substs) => {\n+                            write!(f, \"_\")?;\n                         }\n                         _ => {\n                             write!(f, \"{:?}\", sz)?;"}, {"sha": "169a12ef92e987c1f8b6ad24aae7026ee01f52dd", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "patch": "@@ -46,7 +46,7 @@ error[E0223]: ambiguous associated type\n LL | type A = [u8; 4]::AssocTy;\n    |          ^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n-   = note: specify the type using the syntax `<[u8; <unevaluated[]>] as Trait>::AssocTy`\n+   = note: specify the type using the syntax `<[u8; _] as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:15:10"}, {"sha": "a6ed9f32106fb53500075d944a9a7833f269f9a3", "filename": "src/test/ui/unevaluated_fixed_size_array_len.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.rs?ref=b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/49208\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+impl Foo for [(); 1] {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    <[(); 0] as Foo>::foo() //~ ERROR E0277\n+}"}, {"sha": "6e959da99397b9b31f31f3638a21c8ef40ffb40e", "filename": "src/test/ui/unevaluated_fixed_size_array_len.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr?ref=b48a26cdd1d086a3ca7ffae35b73b72f9ce85b8f", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `[(); 0]: Foo` is not satisfied\n+  --> $DIR/unevaluated_fixed_size_array_len.rs:22:5\n+   |\n+LL |     <[(); 0] as Foo>::foo() //~ ERROR E0277\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[(); 0]`\n+   |\n+   = help: the following implementations were found:\n+             <[(); 1] as Foo>\n+note: required by `Foo::foo`\n+  --> $DIR/unevaluated_fixed_size_array_len.rs:14:5\n+   |\n+LL |     fn foo();\n+   |     ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}