{"sha": "70433955f4531f2742ddeb986e6ac19a8fd4792f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDMzOTU1ZjQ1MzFmMjc0MmRkZWI5ODZlNmFjMTlhOGZkNDc5MmY=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-23T12:20:38Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-23T12:20:38Z"}, "message": "implement contains_zero method", "tree": {"sha": "2a41b158bc39450cb00051e35269b2be6bad4013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a41b158bc39450cb00051e35269b2be6bad4013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70433955f4531f2742ddeb986e6ac19a8fd4792f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70433955f4531f2742ddeb986e6ac19a8fd4792f", "html_url": "https://github.com/rust-lang/rust/commit/70433955f4531f2742ddeb986e6ac19a8fd4792f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70433955f4531f2742ddeb986e6ac19a8fd4792f/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d50abd024901176f8b21081713bf4a2779d9aadb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50abd024901176f8b21081713bf4a2779d9aadb", "html_url": "https://github.com/rust-lang/rust/commit/d50abd024901176f8b21081713bf4a2779d9aadb"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "7986d1d9cb28358cc6ef1ca7ffc70d56f73450ed", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70433955f4531f2742ddeb986e6ac19a8fd4792f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70433955f4531f2742ddeb986e6ac19a8fd4792f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=70433955f4531f2742ddeb986e6ac19a8fd4792f", "patch": "@@ -462,15 +462,14 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             load: &'ll Value,\n             scalar: &abi::Scalar,\n         ) {\n-            let vr = scalar.valid_range;\n             match scalar.value {\n                 abi::Int(..) => {\n                     let range = scalar.valid_range_exclusive(bx);\n                     if range.start != range.end {\n                         bx.range_metadata(load, range);\n                     }\n                 }\n-                abi::Pointer if vr.start < vr.end && !vr.contains(0) => {\n+                abi::Pointer if !scalar.valid_range.contains_zero() => {\n                     bx.nonnull_metadata(load);\n                 }\n                 _ => {}"}, {"sha": "c6caab3e798fa2def4ee04560daa7a5c02968e6b", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70433955f4531f2742ddeb986e6ac19a8fd4792f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70433955f4531f2742ddeb986e6ac19a8fd4792f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=70433955f4531f2742ddeb986e6ac19a8fd4792f", "patch": "@@ -2857,10 +2857,8 @@ where\n                 return;\n             }\n \n-            if scalar.valid_range.start < scalar.valid_range.end {\n-                if scalar.valid_range.start > 0 {\n-                    attrs.set(ArgAttribute::NonNull);\n-                }\n+            if !scalar.valid_range.contains_zero() {\n+                attrs.set(ArgAttribute::NonNull);\n             }\n \n             if let Some(pointee) = layout.pointee_info_at(cx, offset) {"}, {"sha": "5ce8906e6ac63b619652f4b2c3ee713d4283b7e2", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70433955f4531f2742ddeb986e6ac19a8fd4792f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70433955f4531f2742ddeb986e6ac19a8fd4792f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=70433955f4531f2742ddeb986e6ac19a8fd4792f", "patch": "@@ -688,7 +688,7 @@ impl Primitive {\n ///\n /// This is intended specifically to mirror LLVM\u2019s `!range` metadata,\n /// semantics.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n #[derive(HashStable_Generic)]\n pub struct AllocationRange {\n     pub start: u128,\n@@ -705,6 +705,13 @@ impl AllocationRange {\n             self.start <= v || v <= self.end\n         }\n     }\n+\n+    /// Returns `true` if zero is contained in the range.\n+    /// Equal to `range.contains(0)` but should be faster.\n+    #[inline]\n+    pub fn contains_zero(&self) -> bool {\n+        !(self.start <= self.end && self.start != 0)\n+    }\n }\n \n /// Information about one scalar component of a Rust type.\n@@ -1222,9 +1229,8 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     {\n         let scalar_allows_raw_init = move |s: &Scalar| -> bool {\n             if zero {\n-                let range = &s.valid_range;\n                 // The range must contain 0.\n-                range.contains(0) || (range.start > range.end) // wrap-around allows 0\n+                s.valid_range.contains_zero()\n             } else {\n                 // The range must include all values. `valid_range_exclusive` handles\n                 // the wrap-around using target arithmetic; with wrap-around then the full"}]}