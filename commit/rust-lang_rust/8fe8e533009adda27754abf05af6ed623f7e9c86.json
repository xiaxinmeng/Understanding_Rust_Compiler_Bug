{"sha": "8fe8e533009adda27754abf05af6ed623f7e9c86", "node_id": "C_kwDOAAsO6NoAKDhmZThlNTMzMDA5YWRkYTI3NzU0YWJmMDVhZjZlZDYyM2Y3ZTljODY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-16T00:47:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T11:24:31Z"}, "message": "Replace `mk_foo` calls with `infer_foo` where possible.\n\nThere are several `mk_foo`/`intern_foo` pairs, where the former takes an\niterator and the latter takes a slice. (This naming convention is bad,\nbut that's a fix for another PR.)\n\nThis commit changes several `mk_foo` occurrences into `intern_foo`,\navoiding the need for some `.iter()`/`.into_iter()` calls. Affected\ncases:\n- mk_type_list\n- mk_tup\n- mk_substs\n- mk_const_list", "tree": {"sha": "d8e373f11ccc0fe4838ab64986bc66995c30beb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8e373f11ccc0fe4838ab64986bc66995c30beb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe8e533009adda27754abf05af6ed623f7e9c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe8e533009adda27754abf05af6ed623f7e9c86", "html_url": "https://github.com/rust-lang/rust/commit/8fe8e533009adda27754abf05af6ed623f7e9c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe8e533009adda27754abf05af6ed623f7e9c86/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58bd0e290764f31afa45147dff743a20b4d2bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58bd0e290764f31afa45147dff743a20b4d2bfe", "html_url": "https://github.com/rust-lang/rust/commit/f58bd0e290764f31afa45147dff743a20b4d2bfe"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b4a2537b5ea93bcee6e177177fb1160f4a48521f", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=8fe8e533009adda27754abf05af6ed623f7e9c86", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n                 }\n             } else {\n-                let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+                let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n                 let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n                 let lhs = lhs.load_scalar(fx);\n                 let rhs = rhs.load_scalar(fx);\n@@ -78,7 +78,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n-            let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+            let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n             let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n                 let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);"}, {"sha": "cbac2e667652b9a66f09735228be2bd253c5f695", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=8fe8e533009adda27754abf05af6ed623f7e9c86", "patch": "@@ -191,7 +191,7 @@ fn llvm_add_sub<'tcx>(\n     // carry0 | carry1 -> carry or borrow respectively\n     let cb_out = fx.bcx.ins().bor(cb0, cb1);\n \n-    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n+    let layout = fx.layout_of(fx.tcx.intern_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n     let val = CValue::by_val_pair(cb_out, c, layout);\n     ret.write_cvalue(fx, val);\n }"}, {"sha": "26327107df4c5069f3acffb50a17d3b930e84578", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=8fe8e533009adda27754abf05af6ed623f7e9c86", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     report.def_id,\n-                    tcx.mk_substs([GenericArg::from(main_ret_ty)].iter()),\n+                    tcx.intern_substs(&[GenericArg::from(main_ret_ty)]),\n                 )\n                 .unwrap()\n                 .unwrap()"}, {"sha": "05905a7bcdf30bb2cfbbfb4542ad2c9bf87bd548", "filename": "src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8e533009adda27754abf05af6ed623f7e9c86/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=8fe8e533009adda27754abf05af6ed623f7e9c86", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let out_layout = fx.layout_of(fx.tcx.mk_tup([in_lhs.layout().ty, fx.tcx.types.bool].iter()));\n+    let out_layout = fx.layout_of(fx.tcx.intern_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n "}]}