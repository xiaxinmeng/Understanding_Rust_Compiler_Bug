{"sha": "43ad7ad7a0f6139c25606435828d835c26091fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWQ3YWQ3YTBmNjEzOWMyNTYwNjQzNTgyOGQ4MzVjMjYwOTFmZGY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-08-19T03:15:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-08-19T20:18:02Z"}, "message": "Re-jig binop formatting\n\nand misc other fixes from the reviews.", "tree": {"sha": "65d3192294aa293259e1a7de3c307c20690cc5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d3192294aa293259e1a7de3c307c20690cc5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ad7ad7a0f6139c25606435828d835c26091fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ad7ad7a0f6139c25606435828d835c26091fdf", "html_url": "https://github.com/rust-lang/rust/commit/43ad7ad7a0f6139c25606435828d835c26091fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ad7ad7a0f6139c25606435828d835c26091fdf/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0fd0e1190c5d79bbc9c493ce739c8f8416d688", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0fd0e1190c5d79bbc9c493ce739c8f8416d688", "html_url": "https://github.com/rust-lang/rust/commit/df0fd0e1190c5d79bbc9c493ce739c8f8416d688"}], "stats": {"total": 113, "additions": 67, "deletions": 46}, "files": [{"sha": "0cdaf060714dd5d233f3b198d44bb375244cc7ac", "filename": "src/expr.rs", "status": "modified", "additions": 51, "deletions": 37, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/43ad7ad7a0f6139c25606435828d835c26091fdf/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad7ad7a0f6139c25606435828d835c26091fdf/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=43ad7ad7a0f6139c25606435828d835c26091fdf", "patch": "@@ -165,7 +165,7 @@ impl Rewrite for ast::Block {\n     }\n }\n \n-// TODO(#18): implement pattern formatting\n+// FIXME(#18): implement pattern formatting\n impl Rewrite for ast::Pat {\n     fn rewrite(&self, context: &RewriteContext, _: usize, _: usize) -> Option<String> {\n         context.codemap.span_to_snippet(self.span).ok()\n@@ -435,15 +435,11 @@ impl Rewrite for ast::Arm {\n         };\n \n         // Patterns\n-        let pat_strs = pats.iter().map(|p| p.rewrite(context,\n+        let pat_strs = try_opt!(pats.iter().map(|p| p.rewrite(context,\n                                                      // 5 = ` => {`\n                                                      width - 5,\n                                                      offset + context.config.tab_spaces))\n-                           .collect::<Vec<_>>();\n-        if pat_strs.iter().any(|p| p.is_none()) {\n-            return None;\n-        }\n-        let pat_strs = pat_strs.into_iter().map(|p| p.unwrap()).collect::<Vec<_>>();\n+                                           .collect::<Option<Vec<_>>>());\n \n         let mut total_width = pat_strs.iter().fold(0, |a, p| a + p.len());\n         // Add ` | `.len().\n@@ -488,18 +484,19 @@ impl Rewrite for ast::Arm {\n         }\n \n         let comma = if let ast::ExprBlock(_) = body.node {\n-            String::new()\n+            \"\"\n         } else {\n-            \",\".to_owned()\n+            \",\"\n         };\n+        let nested_indent = context.block_indent + context.config.tab_spaces;\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n         if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n             if let Some(ref body_str) = body.rewrite(context,\n                                                      budget,\n-                                                     offset + context.config.tab_spaces) {\n+                                                     nested_indent) {\n                 if first_line_width(body_str) <= budget {\n                     return Some(format!(\"{}{} => {}{}\",\n                                         attr_str.trim_left(),\n@@ -518,7 +515,7 @@ impl Rewrite for ast::Arm {\n \n         let body_str = try_opt!(body.rewrite(context,\n                                              width - context.config.tab_spaces,\n-                                             offset + context.config.tab_spaces));\n+                                             nested_indent));\n         Some(format!(\"{}{} =>\\n{}{},\",\n                      attr_str.trim_left(),\n                      pats_str,\n@@ -533,16 +530,17 @@ fn rewrite_guard(context: &RewriteContext,\n                  width: usize,\n                  offset: usize,\n                  // The amount of space used up on this line for the pattern in\n-                 // the arm.\n+                 // the arm (excludes offset).\n                  pattern_width: usize)\n                  -> Option<String> {\n     if let &Some(ref guard) = guard {\n+        // First try to fit the guard string on the same line as the pattern.\n         // 4 = ` if `, 5 = ` => {`\n         let overhead = pattern_width + 4 + 5;\n         if overhead < width {\n             let cond_str = guard.rewrite(context,\n                                          width - overhead,\n-                                         offset + context.config.tab_spaces);\n+                                         offset + pattern_width + 4);\n             if let Some(cond_str) = cond_str {\n                 return Some(format!(\" if {}\", cond_str));\n             }\n@@ -653,7 +651,7 @@ fn rewrite_call(context: &RewriteContext,\n                 -> Option<String> {\n     debug!(\"rewrite_call, width: {}, offset: {}\", width, offset);\n \n-    // TODO using byte lens instead of char lens (and probably all over the place too)\n+    // FIXME using byte lens instead of char lens (and probably all over the place too)\n     // 2 is for parens\n     let max_callee_width = try_opt!(width.checked_sub(2));\n     let callee_str = try_opt!(callee.rewrite(context, max_callee_width, offset));\n@@ -710,7 +708,7 @@ fn rewrite_paren(context: &RewriteContext,\n                  -> Option<String> {\n     debug!(\"rewrite_paren, width: {}, offset: {}\", width, offset);\n     // 1 is for opening paren, 2 is for opening+closing, we want to keep the closing\n-    // paren on the same line as the subexpr\n+    // paren on the same line as the subexpr.\n     let subexpr_str = subexpr.rewrite(context, width-2, offset+1);\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n     subexpr_str.map(|s| format!(\"({})\", s))\n@@ -880,36 +878,52 @@ fn rewrite_binary_op(context: &RewriteContext,\n \n     let operator_str = context.codemap.span_to_snippet(op.span).unwrap();\n \n-    // 1 = space between lhs expr and operator\n-    let max_width = try_opt!(context.config.max_width.checked_sub(operator_str.len() + offset + 1));\n-    let mut result = try_opt!(lhs.rewrite(context, max_width, offset));\n-\n-    result.push(' ');\n-    result.push_str(&operator_str);\n-\n-    // 1 = space between operator and rhs\n-    let used_width = result.len() + 1;\n-    let remaining_width = match result.rfind('\\n') {\n-        Some(idx) => (offset + width + idx).checked_sub(used_width).unwrap_or(0),\n-        None => width.checked_sub(used_width).unwrap_or(0),\n-    };\n-\n     // Get \"full width\" rhs and see if it fits on the current line. This\n     // usually works fairly well since it tends to place operands of\n     // operations with high precendence close together.\n     let rhs_result = try_opt!(rhs.rewrite(context, width, offset));\n \n     // Second condition is needed in case of line break not caused by a\n     // shortage of space, but by end-of-line comments, for example.\n-    if rhs_result.len() > remaining_width || rhs_result.contains('\\n') {\n-        result.push('\\n');\n-        result.push_str(&make_indent(offset));\n-    } else {\n-        result.push(' ');\n-    };\n+    // Note that this is non-conservative, but its just to see if it's even\n+    // worth trying to put everything on one line.\n+    if rhs_result.len() + 2 + operator_str.len() < width && !rhs_result.contains('\\n') {\n+        // 1 = space between lhs expr and operator\n+        if let Some(mut result) = lhs.rewrite(context,\n+                                              width - 1 - operator_str.len(),\n+                                              offset) {\n \n-    result.push_str(&rhs_result);\n-    Some(result)\n+            result.push(' ');\n+            result.push_str(&operator_str);\n+            result.push(' ');\n+\n+            let remaining_width = width.checked_sub(last_line_width(&result)).unwrap_or(0);\n+\n+            if rhs_result.len() <= remaining_width {\n+                result.push_str(&rhs_result);\n+                return Some(result);\n+            }\n+\n+            if let Some(rhs_result) = rhs.rewrite(context,\n+                                                  remaining_width,\n+                                                  offset + result.len()) {\n+                if rhs_result.len() <= remaining_width {\n+                    result.push_str(&rhs_result);\n+                    return Some(result);\n+                }\n+            }\n+        }\n+    }\n+\n+    // We have to use multiple lines.\n+\n+    // Re-evaluate the lhs because we have more space now:\n+    let budget = try_opt!(context.config.max_width.checked_sub(offset + 1 + operator_str.len()));\n+    Some(format!(\"{} {}\\n{}{}\",\n+                 try_opt!(lhs.rewrite(context, budget, offset)),\n+                 operator_str,\n+                 make_indent(offset),\n+                 rhs_result))\n }\n \n fn rewrite_unary_op(context: &RewriteContext,"}, {"sha": "4efd919649a5bd3b5a8b5f2edc7d4df0e860ff8a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad7ad7a0f6139c25606435828d835c26091fdf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad7ad7a0f6139c25606435828d835c26091fdf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=43ad7ad7a0f6139c25606435828d835c26091fdf", "patch": "@@ -246,7 +246,7 @@ fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n \n         for (c, b) in text.chars() {\n             if c == '\\r' {\n-                continuecontinue\n+                continue;\n             }\n \n             // Add warnings for bad todos/ fixmes"}, {"sha": "3bdb08cc0d282dcc29994317853a81ca15f28be3", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43ad7ad7a0f6139c25606435828d835c26091fdf/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad7ad7a0f6139c25606435828d835c26091fdf/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=43ad7ad7a0f6139c25606435828d835c26091fdf", "patch": "@@ -159,7 +159,7 @@ fn get_path_separator(codemap: &CodeMap,\n         if c == ':' {\n             return \"::\";\n         } else if c.is_whitespace() || c == '<' {\n-            continuecontinue\n+            continue;\n         } else {\n             return \"\";\n         }\n@@ -190,8 +190,9 @@ fn rewrite_segment(segment: &ast::PathSegment,\n     let offset = offset + ident_len;\n \n     let params = match segment.parameters {\n-        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() > 0 || data.types.len() > 0 ||\n-            data.bindings.len() > 0 => {\n+        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() > 0 ||\n+                                                                   data.types.len() > 0 ||\n+                                                                   data.bindings.len() > 0 => {\n             let param_list = data.lifetimes.iter()\n                                            .map(SegmentParam::LifeTime)\n                                            .chain(data.types.iter()"}, {"sha": "dfbf0032011216426d02f8916667dc7ea78c43e0", "filename": "tests/target/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43ad7ad7a0f6139c25606435828d835c26091fdf/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad7ad7a0f6139c25606435828d835c26091fdf/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=43ad7ad7a0f6139c25606435828d835c26091fdf", "patch": "@@ -5,8 +5,8 @@ fn foo() -> bool {\n     let referenced = &5;\n \n     let very_long_variable_name = (a + first + simple + test);\n-    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB +\n-                                   b + c);\n+    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA +\n+                                   BBBBBBBBBBBBBBBBB + b + c);\n \n     //FIXME this exceeds width limit. Needs assignments reformatting\n     let is_internalxxxx = self.codemap.span_to_filename(s) == self.codemap.span_to_filename(m.inner);\n@@ -15,10 +15,12 @@ fn foo() -> bool {\n                    (bbbbbb - function_call(x, *very_long_pointer, y)) + 1000;\n \n     some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 +\n-                                                         40000 / 1002200000000 - 50000 * sqrt(-1),\n+                                                         40000 / 1002200000000 -\n+                                                         50000 * sqrt(-1),\n                                                          trivial_value);\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-             a + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+             a +\n+             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n              aaaaa)))))))));\n \n     {"}, {"sha": "e5f1fad967a92ae4e850e3984769918e44609861", "filename": "tests/target/match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43ad7ad7a0f6139c25606435828d835c26091fdf/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad7ad7a0f6139c25606435828d835c26091fdf/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=43ad7ad7a0f6139c25606435828d835c26091fdf", "patch": "@@ -36,12 +36,16 @@ fn foo() {\n         Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n \n         _ => {}\n+        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() > 0 ||\n+                                                                   data.types.len() > 0 ||\n+                                                                   data.bindings.len() > 0 => {\n+        }\n     }\n \n     let whatever = match something {\n         /// DOC COMMENT!\n         Some(_) => 42,\n-        // COmment on an attribute.\n+        // Comment on an attribute.\n         #[an_attribute]\n         // Comment after an attribute.\n         None => 0,"}]}