{"sha": "689c71193ac2bac0366c917f38f3a553f12ff895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWM3MTE5M2FjMmJhYzAzNjZjOTE3ZjM4ZjNhNTUzZjEyZmY4OTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-15T18:21:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T07:06:28Z"}, "message": "remove cur_frame from memory (validation is gone, new validation will not need it)", "tree": {"sha": "7f7335a426a706798488e8b10c05cecc95a9f8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7335a426a706798488e8b10c05cecc95a9f8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689c71193ac2bac0366c917f38f3a553f12ff895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689c71193ac2bac0366c917f38f3a553f12ff895", "html_url": "https://github.com/rust-lang/rust/commit/689c71193ac2bac0366c917f38f3a553f12ff895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689c71193ac2bac0366c917f38f3a553f12ff895/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7483ea817648d0b8faa49d49e5df69fb66b2638d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7483ea817648d0b8faa49d49e5df69fb66b2638d", "html_url": "https://github.com/rust-lang/rust/commit/7483ea817648d0b8faa49d49e5df69fb66b2638d"}], "stats": {"total": 14, "additions": 0, "deletions": 14}, "files": [{"sha": "3a1f0db227f733813575c80b790e3c340a72aa20", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/689c71193ac2bac0366c917f38f3a553f12ff895/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c71193ac2bac0366c917f38f3a553f12ff895/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=689c71193ac2bac0366c917f38f3a553f12ff895", "patch": "@@ -604,8 +604,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             }\n         }\n \n-        self.memory.cur_frame = self.cur_frame();\n-\n         if self.stack.len() > self.stack_limit {\n             err!(StackFrameLimitReached)\n         } else {\n@@ -619,10 +617,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n-        if !self.stack.is_empty() {\n-            // TODO: Is this the correct time to start considering these accesses as originating from the returned-to stack frame?\n-            self.memory.cur_frame = self.cur_frame();\n-        }\n         match frame.return_to_block {\n             StackPopCleanup::MarkStatic(mutable) => {\n                 if let Place::Ptr(MemPlace { ptr, .. }) = frame.return_place {"}, {"sha": "9cd82d84d7d03d25c55d6064d4b46d7122f87559", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/689c71193ac2bac0366c917f38f3a553f12ff895/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c71193ac2bac0366c917f38f3a553f12ff895/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=689c71193ac2bac0366c917f38f3a553f12ff895", "patch": "@@ -43,9 +43,6 @@ pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations).\n     alloc_map: FxHashMap<AllocId, Allocation>,\n \n-    /// The current stack frame.  Used to check accesses against locks.\n-    pub cur_frame: usize,\n-\n     pub tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n }\n \n@@ -63,14 +60,12 @@ impl<'a, 'mir, 'tcx, M> PartialEq for Memory<'a, 'mir, 'tcx, M>\n             data,\n             alloc_kind,\n             alloc_map,\n-            cur_frame,\n             tcx: _,\n         } = self;\n \n         *data == other.data\n             && *alloc_kind == other.alloc_kind\n             && *alloc_map == other.alloc_map\n-            && *cur_frame == other.cur_frame\n     }\n }\n \n@@ -83,12 +78,10 @@ impl<'a, 'mir, 'tcx, M> Hash for Memory<'a, 'mir, 'tcx, M>\n             data,\n             alloc_kind: _,\n             alloc_map: _,\n-            cur_frame,\n             tcx: _,\n         } = self;\n \n         data.hash(state);\n-        cur_frame.hash(state);\n \n         // We ignore some fields which don't change between evaluation steps.\n \n@@ -114,7 +107,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             alloc_kind: FxHashMap::default(),\n             alloc_map: FxHashMap::default(),\n             tcx,\n-            cur_frame: usize::max_value(),\n         }\n     }\n "}]}