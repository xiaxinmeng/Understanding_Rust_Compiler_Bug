{"sha": "7c9acf2f834c582d9cad4f7d0679a0697c591432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOWFjZjJmODM0YzU4MmQ5Y2FkNGY3ZDA2NzlhMDY5N2M1OTE0MzI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-25T12:03:57Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-25T12:03:57Z"}, "message": "Merge #897\n\n897: Add basic const/static type inference r=flodiebold a=vipentti\n\nThis adds basic const/static type inference discussed in #887.\r\n\r\nCurrently the inference does not work for const/static declared inside a block. In addition the inference does not work inside the bodies of const/static.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "5829e5a0e4567c532a5d430ed9406a8cd072f5ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5829e5a0e4567c532a5d430ed9406a8cd072f5ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c9acf2f834c582d9cad4f7d0679a0697c591432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9acf2f834c582d9cad4f7d0679a0697c591432", "html_url": "https://github.com/rust-lang/rust/commit/7c9acf2f834c582d9cad4f7d0679a0697c591432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c9acf2f834c582d9cad4f7d0679a0697c591432/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4f67df904252c5fbbf3b892bb2e8405778bc904a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f67df904252c5fbbf3b892bb2e8405778bc904a", "html_url": "https://github.com/rust-lang/rust/commit/4f67df904252c5fbbf3b892bb2e8405778bc904a"}, {"sha": "cff9a7dfadc6069bbc7b49c3ceb8497c78d426ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff9a7dfadc6069bbc7b49c3ceb8497c78d426ab", "html_url": "https://github.com/rust-lang/rust/commit/cff9a7dfadc6069bbc7b49c3ceb8497c78d426ab"}], "stats": {"total": 226, "additions": 206, "deletions": 20}, "files": [{"sha": "da0f1ec94d7be0d2b936b07d041eef008057c4fc", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -554,11 +554,26 @@ impl Const {\n         self.id.module(db)\n     }\n \n+    pub fn signature(&self, db: &impl HirDatabase) -> Arc<ConstSignature> {\n+        db.const_signature(*self)\n+    }\n+\n     /// The containing impl block, if this is a method.\n     pub fn impl_block(&self, db: &impl PersistentHirDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n         ImplBlock::containing(module_impls, (*self).into())\n     }\n+\n+    // TODO: move to a more general type for 'body-having' items\n+    /// Builds a resolver for code inside this item.\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        // take the outer scope...\n+        let r = self\n+            .impl_block(db)\n+            .map(|ib| ib.resolver(db))\n+            .unwrap_or_else(|| self.module(db).resolver(db));\n+        r\n+    }\n }\n \n impl Docs for Const {\n@@ -567,6 +582,23 @@ impl Docs for Const {\n     }\n }\n \n+/// The declared signature of a const.\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ConstSignature {\n+    pub(crate) name: Name,\n+    pub(crate) type_ref: TypeRef,\n+}\n+\n+impl ConstSignature {\n+    pub fn name(&self) -> &Name {\n+        &self.name\n+    }\n+\n+    pub fn type_ref(&self) -> &TypeRef {\n+        &self.type_ref\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Static {\n     pub(crate) id: StaticId,\n@@ -580,6 +612,16 @@ impl Static {\n     pub fn module(&self, db: &impl PersistentHirDatabase) -> Module {\n         self.id.module(db)\n     }\n+\n+    pub fn signature(&self, db: &impl HirDatabase) -> Arc<ConstSignature> {\n+        db.static_signature(*self)\n+    }\n+\n+    /// Builds a resolver for code inside this item.\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        // take the outer scope...\n+        self.module(db).resolver(db)\n+    }\n }\n \n impl Docs for Static {"}, {"sha": "24df9a1138fbd67ffc67b83509989e05eeefa163", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -1,3 +1,4 @@\n mod krate; // `crate` is invalid ident :(\n+mod konst; // `const` is invalid ident :(\n mod module;\n pub(crate) mod function;"}, {"sha": "ecf4c8122f4c771e55d788e618dcdecc2e437165", "filename": "crates/ra_hir/src/code_model_impl/konst.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkonst.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -0,0 +1,37 @@\n+use std::sync::Arc;\r\n+\r\n+use ra_syntax::ast::{self, NameOwner};\r\n+\r\n+use crate::{\r\n+    Name, AsName, Const, ConstSignature, Static,\r\n+    type_ref::{TypeRef},\r\n+    PersistentHirDatabase,\r\n+};\r\n+\r\n+fn const_signature_for<N: NameOwner>(\r\n+    node: &N,\r\n+    type_ref: Option<&ast::TypeRef>,\r\n+) -> Arc<ConstSignature> {\r\n+    let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\r\n+    let type_ref = TypeRef::from_ast_opt(type_ref);\r\n+    let sig = ConstSignature { name, type_ref };\r\n+    Arc::new(sig)\r\n+}\r\n+\r\n+impl ConstSignature {\r\n+    pub(crate) fn const_signature_query(\r\n+        db: &impl PersistentHirDatabase,\r\n+        konst: Const,\r\n+    ) -> Arc<ConstSignature> {\r\n+        let (_, node) = konst.source(db);\r\n+        const_signature_for(&*node, node.type_ref())\r\n+    }\r\n+\r\n+    pub(crate) fn static_signature_query(\r\n+        db: &impl PersistentHirDatabase,\r\n+        konst: Static,\r\n+    ) -> Arc<ConstSignature> {\r\n+        let (_, node) = konst.source(db);\r\n+        const_signature_for(&*node, node.type_ref())\r\n+    }\r\n+}\r"}, {"sha": "ec848f1b2d5dee616735a682d77149da788d42f7", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     SourceFileItems, SourceItemId, Crate, Module, HirInterner,\n     Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n+    Const, ConstSignature, Static,\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n     nameres::{ItemMap, lower::{LoweredModule, ImportSourceMap}},\n@@ -82,6 +83,12 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n \n     #[salsa::invoke(crate::type_alias::type_alias_ref_query)]\n     fn type_alias_ref(&self, typ: TypeAlias) -> Arc<TypeRef>;\n+\n+    #[salsa::invoke(crate::ConstSignature::const_signature_query)]\n+    fn const_signature(&self, konst: Const) -> Arc<ConstSignature>;\n+\n+    #[salsa::invoke(crate::ConstSignature::static_signature_query)]\n+    fn static_signature(&self, konst: Static) -> Arc<ConstSignature>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "edc1b4f57471bdbc609caeb78b949ab163a35b14", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -71,6 +71,6 @@ pub use self::code_model_api::{\n     Struct, Enum, EnumVariant,\n     Function, FnSignature,\n     StructField, FieldSource,\n-    Static, Const,\n+    Static, Const, ConstSignature,\n     Trait, TypeAlias,\n };"}, {"sha": "5e4d49ffbf137f15d0574ba32a1ef31ef986c445", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -393,17 +393,22 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             // Attempt to find an impl_item for the type which has a name matching\n             // the current segment\n             log::debug!(\"looking for path segment: {:?}\", segment);\n-            let item = ty.iterate_impl_items(self.db, |item| match item {\n+            let item: crate::ModuleDef = ty.iterate_impl_items(self.db, |item| match item {\n                 crate::ImplItem::Method(func) => {\n                     let sig = func.signature(self.db);\n                     if segment.name == *sig.name() {\n-                        return Some(func);\n+                        return Some(func.into());\n                     }\n                     None\n                 }\n \n-                // TODO: Resolve associated const\n-                crate::ImplItem::Const(_) => None,\n+                crate::ImplItem::Const(konst) => {\n+                    let sig = konst.signature(self.db);\n+                    if segment.name == *sig.name() {\n+                        return Some(konst.into());\n+                    }\n+                    None\n+                }\n \n                 // TODO: Resolve associated types\n                 crate::ImplItem::TypeAlias(_) => None,\n@@ -477,9 +482,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::TypeAlias(_) | TypableDef::Function(_) | TypableDef::Enum(_) => {\n-                (Ty::Unknown, None)\n-            }\n+            TypableDef::TypeAlias(_)\n+            | TypableDef::Function(_)\n+            | TypableDef::Enum(_)\n+            | TypableDef::Const(_)\n+            | TypableDef::Static(_) => (Ty::Unknown, None),\n         }\n     }\n "}, {"sha": "f4e055feba1d46e9e875d2a238ac5ffbce875963", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -11,6 +11,7 @@ use std::sync::Arc;\n use crate::{\n     Function, Struct, StructField, Enum, EnumVariant, Path, Name,\n     ModuleDef, TypeAlias,\n+    Const, Static,\n     HirDatabase,\n     type_ref::TypeRef,\n     name::KnownName,\n@@ -125,6 +126,7 @@ impl Ty {\n             TypableDef::Enum(e) => e.generic_params(db),\n             TypableDef::EnumVariant(var) => var.parent_enum(db).generic_params(db),\n             TypableDef::TypeAlias(t) => t.generic_params(db),\n+            TypableDef::Const(_) | TypableDef::Static(_) => GenericParams::default().into(),\n         };\n         let parent_param_count = def_generics.count_parent_params();\n         substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n@@ -163,6 +165,8 @@ impl Ty {\n             TypableDef::Function(_)\n             | TypableDef::Struct(_)\n             | TypableDef::Enum(_)\n+            | TypableDef::Const(_)\n+            | TypableDef::Static(_)\n             | TypableDef::TypeAlias(_) => last,\n             TypableDef::EnumVariant(_) => {\n                 // the generic args for an enum variant may be either specified\n@@ -197,12 +201,16 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::Enum(e), Namespace::Types) => type_for_enum(db, e),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n+        (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n+        (TypableDef::Static(c), Namespace::Values) => type_for_static(db, c),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::Const(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::Static(_), Namespace::Types) => Ty::Unknown,\n     }\n }\n \n@@ -233,6 +241,22 @@ fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n     Ty::FnDef { def: def.into(), sig, name, substs }\n }\n \n+/// Build the declared type of a const.\n+fn type_for_const(db: &impl HirDatabase, def: Const) -> Ty {\n+    let signature = def.signature(db);\n+    let resolver = def.resolver(db);\n+\n+    Ty::from_hir(db, &resolver, signature.type_ref())\n+}\n+\n+/// Build the declared type of a static.\n+fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n+    let signature = def.signature(db);\n+    let resolver = def.resolver(db);\n+\n+    Ty::from_hir(db, &resolver, signature.type_ref())\n+}\n+\n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     let var_data = def.variant_data(db);\n@@ -318,8 +342,10 @@ pub enum TypableDef {\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n+    Const(Const),\n+    Static(Static),\n }\n-impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, TypeAlias);\n+impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, TypeAlias, Const, Static);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n@@ -329,10 +355,9 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::Enum(e) => e.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n             ModuleDef::TypeAlias(t) => t.into(),\n-            ModuleDef::Const(_)\n-            | ModuleDef::Static(_)\n-            | ModuleDef::Module(_)\n-            | ModuleDef::Trait(_) => return None,\n+            ModuleDef::Const(v) => v.into(),\n+            ModuleDef::Static(v) => v.into(),\n+            ModuleDef::Module(_) | ModuleDef::Trait(_) => return None,\n         };\n         Some(res)\n     }"}, {"sha": "51f3fd4c0dc72f05c5619bed6b5514e8b6f205eb", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_const.snap", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_const.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_const.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_const.snap?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -1,14 +1,14 @@\n ---\n-created: \"2019-02-21T21:51:46.497925200Z\"\n+created: \"2019-02-25T08:36:33.885804400Z\"\n creator: insta@0.6.3\n source: crates/ra_hir/src/ty/tests.rs\n expression: \"&result\"\n ---\n [227; 305) '{     ...:ID; }': ()\n-[237; 238) 'x': [unknown]\n-[241; 252) 'Struct::FOO': [unknown]\n-[262; 263) 'y': [unknown]\n-[266; 275) 'Enum::BAR': [unknown]\n-[285; 286) 'z': [unknown]\n-[289; 302) 'TraitTest::ID': [unknown]\n+[237; 238) 'x': u32\n+[241; 252) 'Struct::FOO': u32\n+[262; 263) 'y': u32\n+[266; 275) 'Enum::BAR': u32\n+[285; 286) 'z': u32\n+[289; 302) 'TraitTest::ID': u32\n "}, {"sha": "a5eba39801d4f5f4c7528e4d2171f214075c15f8", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_const.snap", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_const.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_const.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_const.snap?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -0,0 +1,14 @@\n+---\n+created: \"2019-02-25T07:26:34.115351100Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[95; 213) '{     ...NST; }': ()\n+[138; 139) 'x': [unknown]\n+[142; 153) 'LOCAL_CONST': [unknown]\n+[163; 164) 'z': u32\n+[167; 179) 'GLOBAL_CONST': u32\n+[189; 191) 'id': u32\n+[194; 210) 'Foo::A..._CONST': u32\n+"}, {"sha": "5d90f56edacf0dd74d74b9a42890340ab501981e", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_static.snap", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_static.snap?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -0,0 +1,16 @@\n+---\n+created: \"2019-02-25T08:20:17.807316Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[85; 280) '{     ...MUT; }': ()\n+[173; 174) 'x': [unknown]\n+[177; 189) 'LOCAL_STATIC': [unknown]\n+[199; 200) 'y': [unknown]\n+[203; 219) 'LOCAL_...IC_MUT': [unknown]\n+[229; 230) 'z': u32\n+[233; 246) 'GLOBAL_STATIC': u32\n+[256; 257) 'w': u32\n+[260; 277) 'GLOBAL...IC_MUT': u32\n+"}, {"sha": "8de46a29eae149ad08176b22fede88fe88189434", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9acf2f834c582d9cad4f7d0679a0697c591432/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7c9acf2f834c582d9cad4f7d0679a0697c591432", "patch": "@@ -1006,6 +1006,43 @@ mod foo {\n     assert_eq!(\"i128\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_const() {\n+    check_inference(\n+        \"infer_const\",\n+        r#\"\n+struct Foo;\n+impl Foo { const ASSOC_CONST: u32 = 0; }\n+const GLOBAL_CONST: u32 = 101;\n+fn test() {\n+    const LOCAL_CONST: u32 = 99;\n+    let x = LOCAL_CONST;\n+    let z = GLOBAL_CONST;\n+    let id = Foo::ASSOC_CONST;\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_static() {\n+    check_inference(\n+        \"infer_static\",\n+        r#\"\n+static GLOBAL_STATIC: u32 = 101;\n+static mut GLOBAL_STATIC_MUT: u32 = 101;\n+fn test() {\n+    static LOCAL_STATIC: u32 = 99;\n+    static mut LOCAL_STATIC_MUT: u32 = 99;\n+    let x = LOCAL_STATIC;\n+    let y = LOCAL_STATIC_MUT;\n+    let z = GLOBAL_STATIC;\n+    let w = GLOBAL_STATIC_MUT;\n+}\n+\"#,\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n     let body_syntax_mapping = func.body_syntax_mapping(db);"}]}