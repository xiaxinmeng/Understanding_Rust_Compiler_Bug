{"sha": "82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZTVjOWM4ZTJjNGY0N2E4ZTEwOTBhZDhlNmJlNWExNmY4Mjc5NWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T19:35:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T19:35:06Z"}, "message": "Auto merge of #52383 - petrochenkov:pmns, r=alexcrichton\n\nresolve: Functions introducing procedural macros reserve a slot in the macro namespace as well\n\nSimilarly to https://github.com/rust-lang/rust/pull/52234, this gives us symmetry between internal and external views of a crate, but in this case it's always an error to call a procedural macro in the same crate in which it's defined.\n\nCloses https://github.com/rust-lang/rust/issues/52225", "tree": {"sha": "17ebf48a20a33d0dd196b291c954bf4502fbe3b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ebf48a20a33d0dd196b291c954bf4502fbe3b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "html_url": "https://github.com/rust-lang/rust/commit/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb8bde03cf0a024c076581824ccf5ede422a613d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb8bde03cf0a024c076581824ccf5ede422a613d", "html_url": "https://github.com/rust-lang/rust/commit/fb8bde03cf0a024c076581824ccf5ede422a613d"}, {"sha": "431aefb2d4d579b152f7f26f3e70d2fdc3db4bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/431aefb2d4d579b152f7f26f3e70d2fdc3db4bfb", "html_url": "https://github.com/rust-lang/rust/commit/431aefb2d4d579b152f7f26f3e70d2fdc3db4bfb"}], "stats": {"total": 258, "additions": 247, "deletions": 11}, "files": [{"sha": "fa9c5cefdf3d3bfacc020d79b3327f27860c4d1a", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -98,7 +98,8 @@ impl_stable_hash_for!(enum ::syntax::ast::AsmDialect {\n impl_stable_hash_for!(enum ::syntax::ext::base::MacroKind {\n     Bang,\n     Attr,\n-    Derive\n+    Derive,\n+    ProcMacroStub,\n });\n \n "}, {"sha": "29312912a2423a85c5371ada81ef20e087b496df", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -34,7 +34,7 @@ use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{Mutability, StmtKind, TraitItem, TraitItemKind, Variant};\n-use syntax::ext::base::SyntaxExtension;\n+use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n@@ -335,6 +335,24 @@ impl<'a> Resolver<'a> {\n             ItemKind::Fn(..) => {\n                 let def = Def::Fn(self.definitions.local_def_id(item.id));\n                 self.define(parent, ident, ValueNS, (def, vis, sp, expansion));\n+\n+                // Functions introducing procedural macros reserve a slot\n+                // in the macro namespace as well (see #52225).\n+                if attr::contains_name(&item.attrs, \"proc_macro\") ||\n+                   attr::contains_name(&item.attrs, \"proc_macro_attribute\") {\n+                    let def = Def::Macro(def.def_id(), MacroKind::ProcMacroStub);\n+                    self.define(parent, ident, MacroNS, (def, vis, sp, expansion));\n+                }\n+                if let Some(attr) = attr::find_by_name(&item.attrs, \"proc_macro_derive\") {\n+                    if let Some(trait_attr) =\n+                            attr.meta_item_list().and_then(|list| list.get(0).cloned()) {\n+                        if let Some(ident) = trait_attr.name().map(Ident::with_empty_ctxt) {\n+                            let sp = trait_attr.span;\n+                            let def = Def::Macro(def.def_id(), MacroKind::ProcMacroStub);\n+                            self.define(parent, ident, MacroNS, (def, vis, sp, expansion));\n+                        }\n+                    }\n+                }\n             }\n \n             // These items live in the type namespace."}, {"sha": "c99172efc7c5ef8994476bf81fb51f9fd86e45d8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -321,6 +321,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { attr: None, .. } => return Ok(None),\n             _ => self.resolve_invoc_to_def(invoc, scope, force)?,\n         };\n+        if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n+            self.report_proc_macro_stub(invoc.span());\n+            return Err(Determinacy::Determined);\n+        }\n         let def_id = def.def_id();\n \n         self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n@@ -338,9 +342,13 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Lrc<SyntaxExtension>, Determinacy> {\n-        self.resolve_macro_to_def(scope, path, kind, force).map(|def| {\n+        self.resolve_macro_to_def(scope, path, kind, force).and_then(|def| {\n+            if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n+                self.report_proc_macro_stub(path.span);\n+                return Err(Determinacy::Determined);\n+            }\n             self.unused_macros.remove(&def.def_id());\n-            self.get_macro(def)\n+            Ok(self.get_macro(def))\n         })\n     }\n \n@@ -363,6 +371,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n }\n \n impl<'a> Resolver<'a> {\n+    fn report_proc_macro_stub(&self, span: Span) {\n+        self.session.span_err(span,\n+                              \"can't use a procedural macro from the same crate that defines it\");\n+    }\n+\n     fn resolve_invoc_to_def(&mut self, invoc: &mut Invocation, scope: Mark, force: bool)\n                             -> Result<Def, Determinacy> {\n         let (attr, traits, item) = match invoc.kind {"}, {"sha": "5ec44fb58981858f90b3f0be9a52609c991f8856", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -571,6 +571,8 @@ pub enum MacroKind {\n     Attr,\n     /// A derive attribute macro - #[derive(Foo)]\n     Derive,\n+    /// A view of a procedural macro from the same crate that defines it.\n+    ProcMacroStub,\n }\n \n impl MacroKind {\n@@ -579,6 +581,7 @@ impl MacroKind {\n             MacroKind::Bang => \"macro\",\n             MacroKind::Attr => \"attribute macro\",\n             MacroKind::Derive => \"derive macro\",\n+            MacroKind::ProcMacroStub => \"crate-local procedural macro\",\n         }\n     }\n }"}, {"sha": "281ebaff272861614a6faeac8bfaea2cc720d650", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -232,7 +232,7 @@ pub enum InvocationKind {\n }\n \n impl Invocation {\n-    fn span(&self) -> Span {\n+    pub fn span(&self) -> Span {\n         match self.kind {\n             InvocationKind::Bang { span, .. } => span,\n             InvocationKind::Attr { attr: Some(ref attr), .. } => attr.span,"}, {"sha": "5031182d484d0d93a1d97d51db396aca621d12e7", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -146,11 +146,6 @@ impl<'a> CollectProcMacros<'a> {\n                                   \"cannot override a built-in #[derive] mode\");\n         }\n \n-        if self.derives.iter().any(|d| d.trait_name == trait_name) {\n-            self.handler.span_err(trait_attr.span(),\n-                                  \"derive mode defined twice in this crate\");\n-        }\n-\n         let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n             if !attr.check_name(\"attributes\") {\n                 self.handler.span_err(attr.span(), \"second argument must be `attributes`\")"}, {"sha": "8321c471b2a8a83836bec41fcc01ad7462dec9e5", "filename": "src/test/compile-fail-fulldeps/proc-macro/define-two.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -21,7 +21,7 @@ pub fn foo(input: TokenStream) -> TokenStream {\n     input\n }\n \n-#[proc_macro_derive(A)] //~ ERROR: derive mode defined twice in this crate\n+#[proc_macro_derive(A)] //~ ERROR the name `A` is defined multiple times\n pub fn bar(input: TokenStream) -> TokenStream {\n     input\n }"}, {"sha": "89d5f22da912afa7270b66d932614d9a54537ecf", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn my_macro(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn my_macro_attr(input: TokenStream, _: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(MyTrait)]\n+pub fn my_macro_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+fn check_bang1() {\n+    my_macro!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+}\n+fn check_bang2() {\n+    my_macro_attr!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+}\n+fn check_bang3() {\n+    MyTrait!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+}\n+\n+#[my_macro] //~ ERROR can't use a procedural macro from the same crate that defines it\n+fn check_attr1() {}\n+#[my_macro_attr] //~ ERROR can't use a procedural macro from the same crate that defines it\n+fn check_attr2() {}\n+#[MyTrait] //~ ERROR can't use a procedural macro from the same crate that defines it\n+fn check_attr3() {}\n+\n+#[derive(my_macro)] //~ ERROR can't use a procedural macro from the same crate that defines it\n+struct CheckDerive1;\n+#[derive(my_macro_attr)] //~ ERROR can't use a procedural macro from the same crate that defines it\n+struct CheckDerive2;\n+#[derive(MyTrait)] //~ ERROR can't use a procedural macro from the same crate that defines it\n+struct CheckDerive3;"}, {"sha": "58a7f97490515e1bd915970df21c581a6058ff03", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -0,0 +1,56 @@\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:35:5\n+   |\n+LL |     my_macro!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+   |     ^^^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:38:5\n+   |\n+LL |     my_macro_attr!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:41:5\n+   |\n+LL |     MyTrait!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+   |     ^^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:44:1\n+   |\n+LL | #[my_macro] //~ ERROR can't use a procedural macro from the same crate that defines it\n+   | ^^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:46:1\n+   |\n+LL | #[my_macro_attr] //~ ERROR can't use a procedural macro from the same crate that defines it\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:48:1\n+   |\n+LL | #[MyTrait] //~ ERROR can't use a procedural macro from the same crate that defines it\n+   | ^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:51:10\n+   |\n+LL | #[derive(my_macro)] //~ ERROR can't use a procedural macro from the same crate that defines it\n+   |          ^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:53:10\n+   |\n+LL | #[derive(my_macro_attr)] //~ ERROR can't use a procedural macro from the same crate that defines it\n+   |          ^^^^^^^^^^^^^\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:55:10\n+   |\n+LL | #[derive(MyTrait)] //~ ERROR can't use a procedural macro from the same crate that defines it\n+   |          ^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "21d625ae09d8b7f1af5a0b9ef1ab2a181611f458", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.rs?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro, decl_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn my_macro(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn my_macro_attr(input: TokenStream, _: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(MyTrait)]\n+pub fn my_macro_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+macro my_macro() {} //~ ERROR the name `my_macro` is defined multiple times\n+macro my_macro_attr() {} //~ ERROR the name `my_macro_attr` is defined multiple times\n+macro MyTrait() {} //~ ERROR the name `MyTrait` is defined multiple times\n+\n+#[proc_macro_derive(SameName)]\n+pub fn foo(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro]\n+pub fn SameName(input: TokenStream) -> TokenStream {\n+//~^ ERROR the name `SameName` is defined multiple times\n+    input\n+}"}, {"sha": "44b51edcc0b598114adc3612cb6f3b282cf407b7", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.stderr?ref=82e5c9c8e2c4f47a8e1090ad8e6be5a16f82795e", "patch": "@@ -0,0 +1,47 @@\n+error[E0428]: the name `my_macro` is defined multiple times\n+  --> $DIR/macro-namespace-reserved.rs:34:1\n+   |\n+LL | pub fn my_macro(input: TokenStream) -> TokenStream {\n+   | -------------------------------------------------- previous definition of the macro `my_macro` here\n+...\n+LL | macro my_macro() {} //~ ERROR the name `my_macro` is defined multiple times\n+   | ^^^^^^^^^^^^^^^^ `my_macro` redefined here\n+   |\n+   = note: `my_macro` must be defined only once in the macro namespace of this module\n+\n+error[E0428]: the name `my_macro_attr` is defined multiple times\n+  --> $DIR/macro-namespace-reserved.rs:35:1\n+   |\n+LL | pub fn my_macro_attr(input: TokenStream, _: TokenStream) -> TokenStream {\n+   | ----------------------------------------------------------------------- previous definition of the macro `my_macro_attr` here\n+...\n+LL | macro my_macro_attr() {} //~ ERROR the name `my_macro_attr` is defined multiple times\n+   | ^^^^^^^^^^^^^^^^^^^^^ `my_macro_attr` redefined here\n+   |\n+   = note: `my_macro_attr` must be defined only once in the macro namespace of this module\n+\n+error[E0428]: the name `MyTrait` is defined multiple times\n+  --> $DIR/macro-namespace-reserved.rs:36:1\n+   |\n+LL | #[proc_macro_derive(MyTrait)]\n+   |                     ------- previous definition of the macro `MyTrait` here\n+...\n+LL | macro MyTrait() {} //~ ERROR the name `MyTrait` is defined multiple times\n+   | ^^^^^^^^^^^^^^^ `MyTrait` redefined here\n+   |\n+   = note: `MyTrait` must be defined only once in the macro namespace of this module\n+\n+error[E0428]: the name `SameName` is defined multiple times\n+  --> $DIR/macro-namespace-reserved.rs:44:1\n+   |\n+LL | #[proc_macro_derive(SameName)]\n+   |                     -------- previous definition of the macro `SameName` here\n+...\n+LL | pub fn SameName(input: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SameName` redefined here\n+   |\n+   = note: `SameName` must be defined only once in the macro namespace of this module\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0428`."}]}