{"sha": "41c21685dd149fb95dededfb4edaf87c6603c099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYzIxNjg1ZGQxNDlmYjk1ZGVkZWRmYjRlZGFmODdjNjYwM2MwOTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-22T22:39:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-22T22:39:39Z"}, "message": "core::rt: Add SchedHandle type", "tree": {"sha": "5fd7cb57b64ad52a348dfa65f433fd40066e9bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd7cb57b64ad52a348dfa65f433fd40066e9bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41c21685dd149fb95dededfb4edaf87c6603c099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41c21685dd149fb95dededfb4edaf87c6603c099", "html_url": "https://github.com/rust-lang/rust/commit/41c21685dd149fb95dededfb4edaf87c6603c099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41c21685dd149fb95dededfb4edaf87c6603c099/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0cd55a1d7436dc9532ddf5cdad7d1f7e8f108f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cd55a1d7436dc9532ddf5cdad7d1f7e8f108f3", "html_url": "https://github.com/rust-lang/rust/commit/a0cd55a1d7436dc9532ddf5cdad7d1f7e8f108f3"}], "stats": {"total": 101, "additions": 78, "deletions": 23}, "files": [{"sha": "3f7b332e184b1657e4b051a3c6e189c04e3c7736", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 78, "deletions": 23, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/41c21685dd149fb95dededfb4edaf87c6603c099/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c21685dd149fb95dededfb4edaf87c6603c099/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=41c21685dd149fb95dededfb4edaf87c6603c099", "patch": "@@ -15,7 +15,7 @@ use cell::Cell;\n \n use super::work_queue::WorkQueue;\n use super::stack::{StackPool, StackSegment};\n-use super::rtio::{EventLoop, EventLoopObject};\n+use super::rtio::{EventLoop, EventLoopObject, RemoteCallbackObject};\n use super::context::Context;\n use super::task::Task;\n use rt::local_ptr;\n@@ -41,16 +41,19 @@ pub struct Scheduler {\n     priv cleanup_job: Option<CleanupJob>\n }\n \n-// XXX: Some hacks to put a &fn in Scheduler without borrowck\n-// complaining\n-type UnsafeTaskReceiver = sys::Closure;\n-trait ClosureConverter {\n-    fn from_fn(&fn(~Coroutine)) -> Self;\n-    fn to_fn(self) -> &fn(~Coroutine);\n+pub struct Coroutine {\n+    /// The segment of stack on which the task is currently running or,\n+    /// if the task is blocked, on which the task will resume execution\n+    priv current_stack_segment: StackSegment,\n+    /// These are always valid when the task is not running, unless\n+    /// the task is dead\n+    priv saved_context: Context,\n+    /// The heap, GC, unwinding, local storage, logging\n+    task: ~Task\n }\n-impl ClosureConverter for UnsafeTaskReceiver {\n-    fn from_fn(f: &fn(~Coroutine)) -> UnsafeTaskReceiver { unsafe { transmute(f) } }\n-    fn to_fn(self) -> &fn(~Coroutine) { unsafe { transmute(self) } }\n+\n+pub struct SchedHandle {\n+    priv remote: ~RemoteCallbackObject\n }\n \n enum CleanupJob {\n@@ -103,6 +106,17 @@ pub impl Scheduler {\n         return sched;\n     }\n \n+    fn make_handle(&mut self) -> SchedHandle {\n+        let remote = self.event_loop.remote_callback(wake_up);\n+\n+        return SchedHandle {\n+            remote: remote\n+        };\n+\n+        fn wake_up() {\n+        }\n+    }\n+\n     /// Schedule a task to be executed later.\n     ///\n     /// Pushes the task onto the work stealing queue and tells the event loop\n@@ -337,19 +351,6 @@ pub impl Scheduler {\n     }\n }\n \n-static MIN_STACK_SIZE: uint = 10000000; // XXX: Too much stack\n-\n-pub struct Coroutine {\n-    /// The segment of stack on which the task is currently running or,\n-    /// if the task is blocked, on which the task will resume execution\n-    priv current_stack_segment: StackSegment,\n-    /// These are always valid when the task is not running, unless\n-    /// the task is dead\n-    priv saved_context: Context,\n-    /// The heap, GC, unwinding, local storage, logging\n-    task: ~Task\n-}\n-\n pub impl Coroutine {\n     fn new(stack_pool: &mut StackPool, start: ~fn()) -> Coroutine {\n         Coroutine::with_task(stack_pool, ~Task::new(), start)\n@@ -358,6 +359,9 @@ pub impl Coroutine {\n     fn with_task(stack_pool: &mut StackPool,\n                   task: ~Task,\n                   start: ~fn()) -> Coroutine {\n+\n+        static MIN_STACK_SIZE: uint = 10000000; // XXX: Too much stack\n+\n         let start = Coroutine::build_start_wrapper(start);\n         let mut stack = stack_pool.take_segment(MIN_STACK_SIZE);\n         // NB: Context holds a pointer to that ~fn\n@@ -401,6 +405,18 @@ pub impl Coroutine {\n     }\n }\n \n+// XXX: Some hacks to put a &fn in Scheduler without borrowck\n+// complaining\n+type UnsafeTaskReceiver = sys::Closure;\n+trait ClosureConverter {\n+    fn from_fn(&fn(~Coroutine)) -> Self;\n+    fn to_fn(self) -> &fn(~Coroutine);\n+}\n+impl ClosureConverter for UnsafeTaskReceiver {\n+    fn from_fn(f: &fn(~Coroutine)) -> UnsafeTaskReceiver { unsafe { transmute(f) } }\n+    fn to_fn(self) -> &fn(~Coroutine) { unsafe { transmute(self) } }\n+}\n+\n #[cfg(test)]\n mod test {\n     use int;\n@@ -411,6 +427,7 @@ mod test {\n     use rt::local::Local;\n     use rt::test::*;\n     use super::*;\n+    use rt::thread::Thread;\n \n     #[test]\n     fn test_simple_scheduling() {\n@@ -551,4 +568,42 @@ mod test {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn handle() {\n+        use rt::comm::*;\n+\n+        do run_in_bare_thread {\n+            let (port, chan) = oneshot::<()>();\n+            let port_cell = Cell(port);\n+            let chan_cell = Cell(chan);\n+            let mut sched1 = ~UvEventLoop::new_scheduler();\n+            let handle1 = sched1.make_handle();\n+            let handle1_cell = Cell(handle1);\n+            let task1 = ~do Coroutine::new(&mut sched1.stack_pool) {\n+                chan_cell.take().send(());\n+            };\n+            sched1.enqueue_task(task1);\n+\n+            let mut sched2 = ~UvEventLoop::new_scheduler();\n+            let task2 = ~do Coroutine::new(&mut sched2.stack_pool) {\n+                port_cell.take().recv();\n+                // Release the other scheduler's handle so it can exit\n+                handle1_cell.take();\n+            };\n+            sched2.enqueue_task(task2);\n+\n+            let sched1_cell = Cell(sched1);\n+            let _thread1 = do Thread::start {\n+                let mut sched1 = sched1_cell.take();\n+                sched1.run();\n+            };\n+\n+            let sched2_cell = Cell(sched2);\n+            let _thread2 = do Thread::start {\n+                let mut sched2 = sched2_cell.take();\n+                sched2.run();\n+            };\n+        }\n+    }\n }"}]}