{"sha": "d77653e88bc552944cac2eca4a880b6ee8abc9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzY1M2U4OGJjNTUyOTQ0Y2FjMmVjYTRhODgwYjZlZThhYmM5YTI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T19:33:13Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in calculate_fake_borrows", "tree": {"sha": "9689cb3bb02cc7fc40db3608c681991373cc39dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9689cb3bb02cc7fc40db3608c681991373cc39dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77653e88bc552944cac2eca4a880b6ee8abc9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77653e88bc552944cac2eca4a880b6ee8abc9a2", "html_url": "https://github.com/rust-lang/rust/commit/d77653e88bc552944cac2eca4a880b6ee8abc9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77653e88bc552944cac2eca4a880b6ee8abc9a2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ffd3c64f9a55c675fc5e0efd88c309dbe6e8ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ffd3c64f9a55c675fc5e0efd88c309dbe6e8ee3", "html_url": "https://github.com/rust-lang/rust/commit/2ffd3c64f9a55c675fc5e0efd88c309dbe6e8ee3"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "d8b641fbe31f483dc1649f5aec61aa8d0dca704d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77653e88bc552944cac2eca4a880b6ee8abc9a2/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77653e88bc552944cac2eca4a880b6ee8abc9a2/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d77653e88bc552944cac2eca4a880b6ee8abc9a2", "patch": "@@ -1826,7 +1826,7 @@ newtype_index! {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct PlaceRef<'a, 'tcx> {\n     pub base: &'a PlaceBase<'tcx>,\n     pub projection: &'a Option<Box<Projection<'tcx>>>,"}, {"sha": "b58cef9cce1e7779886da6a9023d81f9f95a8324", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d77653e88bc552944cac2eca4a880b6ee8abc9a2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77653e88bc552944cac2eca4a880b6ee8abc9a2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d77653e88bc552944cac2eca4a880b6ee8abc9a2", "patch": "@@ -1280,7 +1280,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         fake_borrows: &'b FxHashSet<Place<'tcx>>,\n         temp_span: Span,\n-    ) -> Vec<(Place<'tcx>, Local)> {\n+    ) -> Vec<(PlaceRef<'b, 'tcx>, Local)> {\n         let tcx = self.hir.tcx();\n \n         debug!(\"add_fake_borrows fake_borrows = {:?}\", fake_borrows);\n@@ -1296,15 +1296,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // Insert a shallow borrow after a deref. For other\n                     // projections the borrow of prefix_cursor will\n                     // conflict with any mutation of base.\n-                    all_fake_borrows.push(Place {\n-                        base: place.base.clone(),\n-                        projection: base.clone(),\n+                    all_fake_borrows.push(PlaceRef {\n+                        base: &place.base,\n+                        projection: base,\n                     });\n                 }\n                 prefix_cursor = base;\n             }\n \n-            all_fake_borrows.push(place.clone());\n+            all_fake_borrows.push(place.as_place_ref());\n         }\n \n         // Deduplicate and ensure a deterministic order.\n@@ -1314,7 +1314,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"add_fake_borrows all_fake_borrows = {:?}\", all_fake_borrows);\n \n         all_fake_borrows.into_iter().map(|matched_place| {\n-            let fake_borrow_deref_ty = matched_place.ty(&self.local_decls, tcx).ty;\n+            let fake_borrow_deref_ty = Place::ty_from(\n+                matched_place.base,\n+                matched_place.projection,\n+                &self.local_decls,\n+                tcx,\n+            )\n+            .ty;\n             let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n             let fake_borrow_temp = self.local_decls.push(\n                 LocalDecl::new_temp(fake_borrow_ty, temp_span)\n@@ -1345,7 +1351,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         candidate: Candidate<'pat, 'tcx>,\n         guard: Option<Guard<'tcx>>,\n-        fake_borrows: &Vec<(Place<'tcx>, Local)>,\n+        fake_borrows: &Vec<(PlaceRef<'_, 'tcx>, Local)>,\n         scrutinee_span: Span,\n         region_scope: region::Scope,\n     ) -> BasicBlock {\n@@ -1480,7 +1486,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let borrow = Rvalue::Ref(\n                     re_erased,\n                     BorrowKind::Shallow,\n-                    place.clone(),\n+                    Place {\n+                        base: place.base.clone(),\n+                        projection: place.projection.clone(),\n+                    },\n                 );\n                 self.cfg.push_assign(\n                     block,"}]}