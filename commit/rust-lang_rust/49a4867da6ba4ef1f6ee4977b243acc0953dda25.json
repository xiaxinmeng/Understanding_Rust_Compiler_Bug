{"sha": "49a4867da6ba4ef1f6ee4977b243acc0953dda25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YTQ4NjdkYTZiYTRlZjFmNmVlNDk3N2IyNDNhY2MwOTUzZGRhMjU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-16T21:08:17Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-16T21:08:48Z"}, "message": "Pretty-print if-check", "tree": {"sha": "24c72f249fc391e432c1164fc1245a6a91665f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24c72f249fc391e432c1164fc1245a6a91665f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49a4867da6ba4ef1f6ee4977b243acc0953dda25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49a4867da6ba4ef1f6ee4977b243acc0953dda25", "html_url": "https://github.com/rust-lang/rust/commit/49a4867da6ba4ef1f6ee4977b243acc0953dda25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49a4867da6ba4ef1f6ee4977b243acc0953dda25/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cefd86d41a3ebf01b54d67f75e0b0446c252b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cefd86d41a3ebf01b54d67f75e0b0446c252b9a", "html_url": "https://github.com/rust-lang/rust/commit/7cefd86d41a3ebf01b54d67f75e0b0446c252b9a"}], "stats": {"total": 83, "additions": 46, "deletions": 37}, "files": [{"sha": "351eb0f82de17d7bf6e956f9835b3266ea272489", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/49a4867da6ba4ef1f6ee4977b243acc0953dda25/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a4867da6ba4ef1f6ee4977b243acc0953dda25/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=49a4867da6ba4ef1f6ee4977b243acc0953dda25", "patch": "@@ -480,6 +480,48 @@ fn print_block(&ps s, ast::block blk) {\n     }\n }\n \n+fn print_if(&ps s, &@ast::expr test, &ast::block block,\n+            &option::t[@ast::expr] elseopt, &str chk) {\n+    head(s, \"if\");\n+    word_space(s, chk);\n+    popen(s);\n+    print_expr(s, test);\n+    pclose(s);\n+    space(s.s);\n+    print_block(s, block);\n+    fn do_else(&ps s, option::t[@ast::expr] els) {\n+        alt (els) {\n+            case (some(?_else)) {\n+                alt (_else.node) {\n+                    case (\n+                          // \"another else-if\"\n+                          ast::expr_if(?i, ?t, ?e, _)) {\n+                        cbox(s, indent_unit - 1u);\n+                        ibox(s, 0u);\n+                        word(s.s, \" else if \");\n+                        popen(s);\n+                        print_expr(s, i);\n+                        pclose(s);\n+                        space(s.s);\n+                        print_block(s, t);\n+                        do_else(s, e);\n+                    }\n+                    case (\n+                          // \"final else\"\n+                          ast::expr_block(?b, _)) {\n+                        cbox(s, indent_unit - 1u);\n+                        ibox(s, 0u);\n+                        word(s.s, \" else \");\n+                        print_block(s, b);\n+                    }\n+                }\n+            }\n+            case (_) {/* fall through */ }\n+        }\n+    }\n+    do_else(s, elseopt);\n+}\n+\n fn print_expr(&ps s, &@ast::expr expr) {\n     maybe_print_comment(s, expr.span.lo);\n     ibox(s, indent_unit);\n@@ -587,43 +629,10 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_type(s, *ty);\n         }\n         case (ast::expr_if(?test, ?block, ?elseopt, _)) {\n-            head(s, \"if\");\n-            popen(s);\n-            print_expr(s, test);\n-            pclose(s);\n-            space(s.s);\n-            print_block(s, block);\n-            fn do_else(&ps s, option::t[@ast::expr] els) {\n-                alt (els) {\n-                    case (some(?_else)) {\n-                        alt (_else.node) {\n-                            case (\n-                                 // \"another else-if\"\n-                                 ast::expr_if(?i, ?t, ?e, _)) {\n-                                cbox(s, indent_unit - 1u);\n-                                ibox(s, 0u);\n-                                word(s.s, \" else if \");\n-                                popen(s);\n-                                print_expr(s, i);\n-                                pclose(s);\n-                                space(s.s);\n-                                print_block(s, t);\n-                                do_else(s, e);\n-                            }\n-                            case (\n-                                 // \"final else\"\n-                                 ast::expr_block(?b, _)) {\n-                                cbox(s, indent_unit - 1u);\n-                                ibox(s, 0u);\n-                                word(s.s, \" else \");\n-                                print_block(s, b);\n-                            }\n-                        }\n-                    }\n-                    case (_) {/* fall through */ }\n-                }\n-            }\n-            do_else(s, elseopt);\n+            print_if(s, test, block, elseopt, \"\");\n+        }\n+        case (ast::expr_if_check(?test, ?block, ?elseopt, _)) {\n+            print_if(s, test, block, elseopt, \"check\");\n         }\n         case (ast::expr_while(?test, ?block, _)) {\n             head(s, \"while\");"}]}