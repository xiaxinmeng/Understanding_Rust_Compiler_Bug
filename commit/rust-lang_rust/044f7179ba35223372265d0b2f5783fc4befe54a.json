{"sha": "044f7179ba35223372265d0b2f5783fc4befe54a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NGY3MTc5YmEzNTIyMzM3MjI2NWQwYjJmNTc4M2ZjNGJlZmU1NGE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-10T19:20:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T19:20:15Z"}, "message": "Rollup merge of #76568 - GuillaumeGomez:add-missing-examples, r=jyn514\n\nAdd missing examples on core traits' method\n\nLinked to #76450.\n\nr? @jyn514", "tree": {"sha": "3ef86b07ab33ad3bd749b2393c7b566a44d6e205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef86b07ab33ad3bd749b2393c7b566a44d6e205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044f7179ba35223372265d0b2f5783fc4befe54a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWnxvCRBK7hj4Ov3rIwAAdHIIAIasDqXbsAZckIpmJ8kqOLqO\nSzoODNpifoYSvlBs+jgA2JYzNrj9RlVMS0fog4LHEidzS+lRSUrDqXY51SlfvQOD\nkP8qBhWm/3WTVV/6WUE0wkRtEl91+HJy0WfgWC2svPrK1q6YC3W7lgfqVPm3psjv\nwtmI56CRZbvJcqZS0igufhbh48I8U9VhoSa4vfZgFWSxMnmLDKaQS4D20/g5IGFD\nLmwBvqH22EDKxslZf0hvL5x54WOygMCKHMSPdk9pEHxVF3UPQlQ98LrYFRWkcQQE\n+4ymYTtEyhtD1q3BfVmpPV30LDWKd9ddaYOUKrHBfKnkchp8kDMG+ueO9NytMpc=\n=3p9g\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ef86b07ab33ad3bd749b2393c7b566a44d6e205\nparent c8f9c728c292da553076785fed12875fdd26b798\nparent d7a97070517f20fa6533ff29fdc2945908fc58d7\nauthor Tyler Mandry <tmandry@gmail.com> 1599765615 -0700\ncommitter GitHub <noreply@github.com> 1599765615 -0700\n\nRollup merge of #76568 - GuillaumeGomez:add-missing-examples, r=jyn514\n\nAdd missing examples on core traits' method\n\nLinked to #76450.\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044f7179ba35223372265d0b2f5783fc4befe54a", "html_url": "https://github.com/rust-lang/rust/commit/044f7179ba35223372265d0b2f5783fc4befe54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044f7179ba35223372265d0b2f5783fc4befe54a/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f9c728c292da553076785fed12875fdd26b798", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f9c728c292da553076785fed12875fdd26b798", "html_url": "https://github.com/rust-lang/rust/commit/c8f9c728c292da553076785fed12875fdd26b798"}, {"sha": "d7a97070517f20fa6533ff29fdc2945908fc58d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a97070517f20fa6533ff29fdc2945908fc58d7", "html_url": "https://github.com/rust-lang/rust/commit/d7a97070517f20fa6533ff29fdc2945908fc58d7"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "bdf93baa1b8f9acf5181247807e9c36a9b24e675", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/044f7179ba35223372265d0b2f5783fc4befe54a/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044f7179ba35223372265d0b2f5783fc4befe54a/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=044f7179ba35223372265d0b2f5783fc4befe54a", "patch": "@@ -78,6 +78,12 @@ pub trait Add<Rhs = Self> {\n     type Output;\n \n     /// Performs the `+` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 + 1, 13);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn add(self, rhs: Rhs) -> Self::Output;\n@@ -178,6 +184,12 @@ pub trait Sub<Rhs = Self> {\n     type Output;\n \n     /// Performs the `-` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 - 1, 11);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sub(self, rhs: Rhs) -> Self::Output;\n@@ -300,6 +312,12 @@ pub trait Mul<Rhs = Self> {\n     type Output;\n \n     /// Performs the `*` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 * 2, 24);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn mul(self, rhs: Rhs) -> Self::Output;\n@@ -426,6 +444,12 @@ pub trait Div<Rhs = Self> {\n     type Output;\n \n     /// Performs the `/` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 / 2, 6);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn div(self, rhs: Rhs) -> Self::Output;\n@@ -513,6 +537,12 @@ pub trait Rem<Rhs = Self> {\n     type Output;\n \n     /// Performs the `%` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// assert_eq!(12 % 10, 2);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rem(self, rhs: Rhs) -> Self::Output;\n@@ -612,6 +642,13 @@ pub trait Neg {\n     type Output;\n \n     /// Performs the unary `-` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let x: i32 = 12;\n+    /// assert_eq!(-x, -12);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn neg(self) -> Self::Output;\n@@ -673,6 +710,14 @@ neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"+=\")]\n pub trait AddAssign<Rhs = Self> {\n     /// Performs the `+=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x += 1;\n+    /// assert_eq!(x, 13);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn add_assign(&mut self, rhs: Rhs);\n }\n@@ -731,6 +776,14 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"-=\")]\n pub trait SubAssign<Rhs = Self> {\n     /// Performs the `-=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x -= 1;\n+    /// assert_eq!(x, 11);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn sub_assign(&mut self, rhs: Rhs);\n }\n@@ -780,6 +833,14 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"*=\")]\n pub trait MulAssign<Rhs = Self> {\n     /// Performs the `*=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x *= 2;\n+    /// assert_eq!(x, 24);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn mul_assign(&mut self, rhs: Rhs);\n }\n@@ -829,6 +890,14 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"/=\")]\n pub trait DivAssign<Rhs = Self> {\n     /// Performs the `/=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x /= 2;\n+    /// assert_eq!(x, 6);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn div_assign(&mut self, rhs: Rhs);\n }\n@@ -881,6 +950,14 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[doc(alias = \"%=\")]\n pub trait RemAssign<Rhs = Self> {\n     /// Performs the `%=` operation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut x: u32 = 12;\n+    /// x %= 10;\n+    /// assert_eq!(x, 2);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn rem_assign(&mut self, rhs: Rhs);\n }"}]}