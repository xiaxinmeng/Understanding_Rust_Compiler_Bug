{"sha": "5d8402817044ac4039c7315e70565d6b0414b9d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODQwMjgxNzA0NGFjNDAzOWM3MzE1ZTcwNTY1ZDZiMDQxNGI5ZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-30T08:01:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T08:01:00Z"}, "message": "Merge #4562\n\n4562: Assist: replace anonymous lifetime with a named one r=matklad a=jbalint\n\n(fixes #4523)\n\nCo-authored-by: Jess Balint <jbalint@gmail.com>", "tree": {"sha": "cf79ec5d7d09e1e5e1dafca0e14e63d3ed409f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf79ec5d7d09e1e5e1dafca0e14e63d3ed409f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8402817044ac4039c7315e70565d6b0414b9d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0hK8CRBK7hj4Ov3rIwAAdHIIABKv+isLmkcU0CKE+r7m9xAx\nikWkfsO5AQATrnk6I2MESEFct6ZbM44vUzBz9mflcmqMC1QK70NUQ5l8XAB91Wju\nnxa6xJCEDC8gnr77hmrro28SPsBsXzDgVxmy0MbcGd3bD9S2sDBjOS0W4I+eOB11\nl8U9LapaRIDonQh9uMAO/pdCmF9n2mZirEHRFIWgJOxQQRADU2thr0h028Pv1kId\ndNbt1vmp+VNVO4C7OXzUyrDPdPEWuyv4Quha1NC0hAot+LebDPGr0tset0QPCCcb\nY4dnRObLrxPQI6g/MSYpc2yOGaO+01aQLBGvY9RJl251zn0wxe9uvcmPmk/Rn1c=\n=S20T\n-----END PGP SIGNATURE-----\n", "payload": "tree cf79ec5d7d09e1e5e1dafca0e14e63d3ed409f1f\nparent 11f74f28271279e998f28d62034bffe9cf7610a3\nparent bd8aa04bae5280c9b5248413f2370f0773ac73aa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590825660 +0000\ncommitter GitHub <noreply@github.com> 1590825660 +0000\n\nMerge #4562\n\n4562: Assist: replace anonymous lifetime with a named one r=matklad a=jbalint\n\n(fixes #4523)\n\nCo-authored-by: Jess Balint <jbalint@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8402817044ac4039c7315e70565d6b0414b9d3", "html_url": "https://github.com/rust-lang/rust/commit/5d8402817044ac4039c7315e70565d6b0414b9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8402817044ac4039c7315e70565d6b0414b9d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f74f28271279e998f28d62034bffe9cf7610a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f74f28271279e998f28d62034bffe9cf7610a3", "html_url": "https://github.com/rust-lang/rust/commit/11f74f28271279e998f28d62034bffe9cf7610a3"}, {"sha": "bd8aa04bae5280c9b5248413f2370f0773ac73aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8aa04bae5280c9b5248413f2370f0773ac73aa", "html_url": "https://github.com/rust-lang/rust/commit/bd8aa04bae5280c9b5248413f2370f0773ac73aa"}], "stats": {"total": 354, "additions": 354, "deletions": 0}, "files": [{"sha": "999aec421b08e316f4166799e70f4ce14fa1e95e", "filename": "crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/5d8402817044ac4039c7315e70565d6b0414b9d3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8402817044ac4039c7315e70565d6b0414b9d3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs?ref=5d8402817044ac4039c7315e70565d6b0414b9d3", "patch": "@@ -0,0 +1,303 @@\n+use crate::{assist_context::AssistBuilder, AssistContext, AssistId, Assists};\n+use ast::{NameOwner, ParamList, TypeAscriptionOwner, TypeParamList, TypeRef};\n+use ra_syntax::{ast, ast::TypeParamsOwner, AstNode, SyntaxKind, TextRange, TextSize};\n+use rustc_hash::FxHashSet;\n+\n+static ASSIST_NAME: &str = \"change_lifetime_anon_to_named\";\n+static ASSIST_LABEL: &str = \"Give anonymous lifetime a name\";\n+\n+// Assist: change_lifetime_anon_to_named\n+//\n+// Change an anonymous lifetime to a named lifetime.\n+//\n+// ```\n+// impl Cursor<'_<|>> {\n+//     fn node(self) -> &SyntaxNode {\n+//         match self {\n+//             Cursor::Replace(node) | Cursor::Before(node) => node,\n+//         }\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// impl<'a> Cursor<'a> {\n+//     fn node(self) -> &SyntaxNode {\n+//         match self {\n+//             Cursor::Replace(node) | Cursor::Before(node) => node,\n+//         }\n+//     }\n+// }\n+// ```\n+// FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n+// FIXME: should also add support for the case fun(f: &Foo) -> &<|>Foo\n+pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let lifetime_token = ctx\n+        .find_token_at_offset(SyntaxKind::LIFETIME)\n+        .filter(|lifetime| lifetime.text() == \"'_\")?;\n+    if let Some(fn_def) = lifetime_token.ancestors().find_map(ast::FnDef::cast) {\n+        generate_fn_def_assist(acc, &fn_def, lifetime_token.text_range())\n+    } else if let Some(impl_def) = lifetime_token.ancestors().find_map(ast::ImplDef::cast) {\n+        // only allow naming the last anonymous lifetime\n+        lifetime_token.next_token().filter(|tok| tok.kind() == SyntaxKind::R_ANGLE)?;\n+        generate_impl_def_assist(acc, &impl_def, lifetime_token.text_range())\n+    } else {\n+        None\n+    }\n+}\n+\n+/// Generate the assist for the fn def case\n+fn generate_fn_def_assist(\n+    acc: &mut Assists,\n+    fn_def: &ast::FnDef,\n+    lifetime_loc: TextRange,\n+) -> Option<()> {\n+    let param_list: ParamList = fn_def.param_list()?;\n+    let new_lifetime_param = generate_unique_lifetime_param_name(&fn_def.type_param_list())?;\n+    let end_of_fn_ident = fn_def.name()?.ident_token()?.text_range().end();\n+    let self_param =\n+        // use the self if it's a reference and has no explicit lifetime\n+        param_list.self_param().filter(|p| p.lifetime_token().is_none() && p.amp_token().is_some());\n+    // compute the location which implicitly has the same lifetime as the anonymous lifetime\n+    let loc_needing_lifetime = if let Some(self_param) = self_param {\n+        // if we have a self reference, use that\n+        Some(self_param.self_token()?.text_range().start())\n+    } else {\n+        // otherwise, if there's a single reference parameter without a named liftime, use that\n+        let fn_params_without_lifetime: Vec<_> = param_list\n+            .params()\n+            .filter_map(|param| match param.ascribed_type() {\n+                Some(TypeRef::ReferenceType(ascribed_type))\n+                    if ascribed_type.lifetime_token() == None =>\n+                {\n+                    Some(ascribed_type.amp_token()?.text_range().end())\n+                }\n+                _ => None,\n+            })\n+            .collect();\n+        match fn_params_without_lifetime.len() {\n+            1 => Some(fn_params_without_lifetime.into_iter().nth(0)?),\n+            0 => None,\n+            // multiple unnnamed is invalid. assist is not applicable\n+            _ => return None,\n+        }\n+    };\n+    acc.add(AssistId(ASSIST_NAME), ASSIST_LABEL, lifetime_loc, |builder| {\n+        add_lifetime_param(fn_def, builder, end_of_fn_ident, new_lifetime_param);\n+        builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n+        loc_needing_lifetime.map(|loc| builder.insert(loc, format!(\"'{} \", new_lifetime_param)));\n+    })\n+}\n+\n+/// Generate the assist for the impl def case\n+fn generate_impl_def_assist(\n+    acc: &mut Assists,\n+    impl_def: &ast::ImplDef,\n+    lifetime_loc: TextRange,\n+) -> Option<()> {\n+    let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.type_param_list())?;\n+    let end_of_impl_kw = impl_def.impl_token()?.text_range().end();\n+    acc.add(AssistId(ASSIST_NAME), ASSIST_LABEL, lifetime_loc, |builder| {\n+        add_lifetime_param(impl_def, builder, end_of_impl_kw, new_lifetime_param);\n+        builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n+    })\n+}\n+\n+/// Given a type parameter list, generate a unique lifetime parameter name\n+/// which is not in the list\n+fn generate_unique_lifetime_param_name(\n+    existing_type_param_list: &Option<TypeParamList>,\n+) -> Option<char> {\n+    match existing_type_param_list {\n+        Some(type_params) => {\n+            let used_lifetime_params: FxHashSet<_> = type_params\n+                .lifetime_params()\n+                .map(|p| p.syntax().text().to_string()[1..].to_owned())\n+                .collect();\n+            (b'a'..=b'z').map(char::from).find(|c| !used_lifetime_params.contains(&c.to_string()))\n+        }\n+        None => Some('a'),\n+    }\n+}\n+\n+/// Add the lifetime param to `builder`. If there are type parameters in `type_params_owner`, add it to the end. Otherwise\n+/// add new type params brackets with the lifetime parameter at `new_type_params_loc`.\n+fn add_lifetime_param<TypeParamsOwner: ast::TypeParamsOwner>(\n+    type_params_owner: &TypeParamsOwner,\n+    builder: &mut AssistBuilder,\n+    new_type_params_loc: TextSize,\n+    new_lifetime_param: char,\n+) {\n+    match type_params_owner.type_param_list() {\n+        // add the new lifetime parameter to an existing type param list\n+        Some(type_params) => {\n+            builder.insert(\n+                (u32::from(type_params.syntax().text_range().end()) - 1).into(),\n+                format!(\", '{}\", new_lifetime_param),\n+            );\n+        }\n+        // create a new type param list containing only the new lifetime parameter\n+        None => {\n+            builder.insert(new_type_params_loc, format!(\"<'{}>\", new_lifetime_param));\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn test_example_case() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl Cursor<'_<|>> {\n+                fn node(self) -> &SyntaxNode {\n+                    match self {\n+                        Cursor::Replace(node) | Cursor::Before(node) => node,\n+                    }\n+                }\n+            }\"#,\n+            r#\"impl<'a> Cursor<'a> {\n+                fn node(self) -> &SyntaxNode {\n+                    match self {\n+                        Cursor::Replace(node) | Cursor::Before(node) => node,\n+                    }\n+                }\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_example_case_simplified() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl Cursor<'_<|>> {\"#,\n+            r#\"impl<'a> Cursor<'a> {\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_example_case_cursor_after_tick() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl Cursor<'<|>_> {\"#,\n+            r#\"impl<'a> Cursor<'a> {\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_example_case_cursor_before_tick() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl Cursor<<|>'_> {\"#,\n+            r#\"impl<'a> Cursor<'a> {\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_not_applicable_cursor_position() {\n+        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<'_><|> {\"#);\n+        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<|><'_> {\"#);\n+    }\n+\n+    #[test]\n+    fn test_not_applicable_lifetime_already_name() {\n+        check_assist_not_applicable(change_lifetime_anon_to_named, r#\"impl Cursor<'a<|>> {\"#);\n+        check_assist_not_applicable(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun<'a>() -> X<'a<|>>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_with_type_parameter() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl<T> Cursor<T, '_<|>>\"#,\n+            r#\"impl<T, 'a> Cursor<T, 'a>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_with_existing_lifetime_name_conflict() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl<'a, 'b> Cursor<'a, 'b, '_<|>>\"#,\n+            r#\"impl<'a, 'b, 'c> Cursor<'a, 'b, 'c>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_return_value_anon_lifetime_param() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun() -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'a>() -> X<'a>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_return_value_anon_reference_lifetime() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun() -> &'_<|> X\"#,\n+            r#\"fn my_fun<'a>() -> &'a X\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_param_anon_lifetime() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun(x: X<'_<|>>)\"#,\n+            r#\"fn my_fun<'a>(x: X<'a>)\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_add_lifetime_to_params() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun(f: &Foo) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'a>(f: &'a Foo) -> X<'a>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_add_lifetime_to_params_in_presence_of_other_lifetime() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun<'other>(f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'other, 'a>(f: &'a Foo, b: &'other Bar) -> X<'a>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_not_applicable_without_self_and_multiple_unnamed_param_lifetimes() {\n+        // this is not permitted under lifetime elision rules\n+        check_assist_not_applicable(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun(f: &Foo, b: &Bar) -> X<'_<|>>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_add_lifetime_to_self_ref_param() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun<'other>(&self, f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'other, 'a>(&'a self, f: &Foo, b: &'other Bar) -> X<'a>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_function_add_lifetime_to_param_with_non_ref_self() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"fn my_fun<'other>(self, f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'other, 'a>(self, f: &'a Foo, b: &'other Bar) -> X<'a>\"#,\n+        );\n+    }\n+}"}, {"sha": "3f8f7ffbfc528710004cf96cb3760d71ec6a6990", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d8402817044ac4039c7315e70565d6b0414b9d3/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8402817044ac4039c7315e70565d6b0414b9d3/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=5d8402817044ac4039c7315e70565d6b0414b9d3", "patch": "@@ -112,6 +112,7 @@ mod handlers {\n     mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n+    mod change_lifetime_anon_to_named;\n     mod change_return_type_to_result;\n     mod change_visibility;\n     mod early_return;\n@@ -151,6 +152,7 @@ mod handlers {\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n+            change_lifetime_anon_to_named::change_lifetime_anon_to_named,\n             change_return_type_to_result::change_return_type_to_result,\n             change_visibility::change_visibility,\n             early_return::convert_to_guarded_return,"}, {"sha": "abffbf97cfcf0675a2496b0c4d0de8907a00fd65", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5d8402817044ac4039c7315e70565d6b0414b9d3/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8402817044ac4039c7315e70565d6b0414b9d3/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5d8402817044ac4039c7315e70565d6b0414b9d3", "patch": "@@ -268,6 +268,31 @@ pub mod std { pub mod collections { pub struct HashMap { } } }\n     )\n }\n \n+#[test]\n+fn doctest_change_lifetime_anon_to_named() {\n+    check_doc_test(\n+        \"change_lifetime_anon_to_named\",\n+        r#####\"\n+impl Cursor<'_<|>> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\"#####,\n+        r#####\"\n+impl<'a> Cursor<'a> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_change_return_type_to_result() {\n     check_doc_test("}, {"sha": "a1058ecde9773b72c7f630b640b10d3d9b488acd", "filename": "docs/user/assists.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d8402817044ac4039c7315e70565d6b0414b9d3/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d8402817044ac4039c7315e70565d6b0414b9d3/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=5d8402817044ac4039c7315e70565d6b0414b9d3", "patch": "@@ -259,6 +259,30 @@ fn main() {\n }\n ```\n \n+## `change_lifetime_anon_to_named`\n+\n+Change an anonymous lifetime to a named lifetime.\n+\n+```rust\n+// BEFORE\n+impl Cursor<'_\u2503> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+\n+// AFTER\n+impl<'a> Cursor<'a> {\n+    fn node(self) -> &SyntaxNode {\n+        match self {\n+            Cursor::Replace(node) | Cursor::Before(node) => node,\n+        }\n+    }\n+}\n+```\n+\n ## `change_return_type_to_result`\n \n Change the function's return type to Result."}]}