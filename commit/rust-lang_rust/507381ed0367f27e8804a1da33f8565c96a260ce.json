{"sha": "507381ed0367f27e8804a1da33f8565c96a260ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzM4MWVkMDM2N2YyN2U4ODA0YTFkYTMzZjg1NjVjOTZhMjYwY2U=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-13T21:38:31Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-14T15:35:58Z"}, "message": "Fix ICE and report a human readable error", "tree": {"sha": "e19eef85fd9dc45d65a0587eaaeee25be2321e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e19eef85fd9dc45d65a0587eaaeee25be2321e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507381ed0367f27e8804a1da33f8565c96a260ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507381ed0367f27e8804a1da33f8565c96a260ce", "html_url": "https://github.com/rust-lang/rust/commit/507381ed0367f27e8804a1da33f8565c96a260ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507381ed0367f27e8804a1da33f8565c96a260ce/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f19cadf9508963ca3af9c9b184b65f4e0ff70e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f19cadf9508963ca3af9c9b184b65f4e0ff70e4", "html_url": "https://github.com/rust-lang/rust/commit/8f19cadf9508963ca3af9c9b184b65f4e0ff70e4"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "ab82f28c8bff4d1b1c0a7ceb29a5706993a29da9", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=507381ed0367f27e8804a1da33f8565c96a260ce", "patch": "@@ -58,6 +58,8 @@ pub enum CastKind {\n }\n \n impl<'tcx> CastTy<'tcx> {\n+    /// Returns `Some` for integral/pointer casts.\n+    /// casts like unsizing casts will return `None`\n     pub fn from_ty(t: Ty<'tcx>) -> Option<CastTy<'tcx>> {\n         match t.sty {\n             ty::Bool => Some(CastTy::Int(IntTy::Bool)),"}, {"sha": "edcae4648b72c4eff5e56d66fe4b2a686a178439", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=507381ed0367f27e8804a1da33f8565c96a260ce", "patch": "@@ -148,7 +148,7 @@ fn check_rvalue(\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n             check_place(tcx, mir, place, span, PlaceMode::Read)\n         }\n-        Rvalue::Cast(_, operand, cast_ty) => {\n+        Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n             let cast_in = CastTy::from_ty(operand.ty(mir, tcx)).expect(\"bad input type for cast\");\n             let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n@@ -163,6 +163,10 @@ fn check_rvalue(\n                 _ => check_operand(tcx, mir, operand, span),\n             }\n         }\n+        Rvalue::Cast(_, _, _) => Err((\n+            span,\n+            \"only int casts are allowed in const fn\".into(),\n+        )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n             check_operand(tcx, mir, lhs, span)?;\n@@ -177,8 +181,11 @@ fn check_rvalue(\n                 ))\n             }\n         }\n-        // checked by regular const fn checks\n-        Rvalue::NullaryOp(..) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::Box, _) => Err((\n+            span,\n+            \"heap allocations are not allowed in const fn\".into(),\n+        )),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(mir, tcx);\n             if ty.is_integral() || ty.is_bool() {"}, {"sha": "3e42cb8c1b07480bb57ea6e5f5f854626b6c68b3", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs?ref=507381ed0367f27e8804a1da33f8565c96a260ce", "patch": "@@ -0,0 +1,5 @@\n+const fn foo(a: i32) -> Vec<i32> {\n+    vec![1, 2, 3] //~ ERROR heap allocations are not allowed in const fn\n+}\n+\n+fn main() {}"}, {"sha": "f6b704370b6f239890fa5d0add31898aaff8e74d", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/507381ed0367f27e8804a1da33f8565c96a260ce/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=507381ed0367f27e8804a1da33f8565c96a260ce", "patch": "@@ -0,0 +1,10 @@\n+error: heap allocations are not allowed in const fn\n+  --> $DIR/bad_const_fn_body_ice.rs:2:5\n+   |\n+LL |     vec![1, 2, 3] //~ ERROR heap allocations are not allowed in const fn\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}