{"sha": "40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2EzNTIxYWQxYjBiNDI5ODBmZjE2ZDViOWQxZDNkOGI2OGE1MGU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-09T13:00:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-09T13:09:19Z"}, "message": "rustdoc: Don't generate blanket impls when running --show-coverage\n\nget_blanket_impls is the slowest part of rustdoc, and the coverage pass\ncompletely ignores blanket impls. This stops running it at all, and also\nremoves some unnecessary checks in `calculate_doc_coverage` that ignored\nthe impl anyway.\n\nWe don't currently measure --show-coverage in perf.rlo, but I tested\nthis locally on cargo and it brought the time down from 2.9 to 1.6\nseconds.", "tree": {"sha": "7ed03f2cbf3e64dc0d6bf1e91721f533d23867cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed03f2cbf3e64dc0d6bf1e91721f533d23867cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "html_url": "https://github.com/rust-lang/rust/commit/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e1d22ddbc67b25141a735a22a8895a678b32ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e1d22ddbc67b25141a735a22a8895a678b32ca", "html_url": "https://github.com/rust-lang/rust/commit/69e1d22ddbc67b25141a735a22a8895a678b32ca"}], "stats": {"total": 52, "additions": 8, "deletions": 44}, "files": [{"sha": "fdac33fd60e2aef31de0c1d84b5cf6c99fcd2796", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "patch": "@@ -7,7 +7,6 @@ use crate::passes::Pass;\n use rustc_lint::builtin::MISSING_DOCS;\n use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n-use rustc_span::symbol::sym;\n use rustc_span::FileName;\n use serde::Serialize;\n \n@@ -193,48 +192,13 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 // don't count items in stripped modules\n                 return Some(i);\n             }\n-            clean::ImportItem(..) | clean::ExternCrateItem { .. } => {\n-                // docs on `use` and `extern crate` statements are not displayed, so they're not\n-                // worth counting\n-                return Some(i);\n-            }\n-            clean::ImplItem(ref impl_)\n-                if i.attrs\n-                    .other_attrs\n-                    .iter()\n-                    .any(|item| item.has_name(sym::automatically_derived))\n-                    || impl_.synthetic\n-                    || impl_.blanket_impl.is_some() =>\n-            {\n-                // built-in derives get the `#[automatically_derived]` attribute, and\n-                // synthetic/blanket impls are made up by rustdoc and can't be documented\n-                // FIXME(misdreavus): need to also find items that came out of a derive macro\n-                return Some(i);\n-            }\n-            clean::ImplItem(ref impl_) => {\n-                let filename = i.span.filename(self.ctx.sess());\n-                if let Some(ref tr) = impl_.trait_ {\n-                    debug!(\n-                        \"impl {:#} for {:#} in {}\",\n-                        tr.print(&self.ctx.cache, self.ctx.tcx),\n-                        impl_.for_.print(&self.ctx.cache, self.ctx.tcx),\n-                        filename,\n-                    );\n-\n-                    // don't count trait impls, the missing-docs lint doesn't so we shouldn't\n-                    // either\n-                    return Some(i);\n-                } else {\n-                    // inherent impls *can* be documented, and those docs show up, but in most\n-                    // cases it doesn't make sense, as all methods on a type are in one single\n-                    // impl block\n-                    debug!(\n-                        \"impl {:#} in {}\",\n-                        impl_.for_.print(&self.ctx.cache, self.ctx.tcx),\n-                        filename\n-                    );\n-                }\n-            }\n+            // docs on `use` and `extern crate` statements are not displayed, so they're not\n+            // worth counting\n+            clean::ImportItem(..) | clean::ExternCrateItem { .. } => {}\n+            // Don't count trait impls, the missing-docs lint doesn't so we shouldn't either.\n+            // Inherent impls *can* be documented, and those docs show up, but in most cases it\n+            // doesn't make sense, as all methods on a type are in one single impl block\n+            clean::ImplItem(_) => {}\n             _ => {\n                 let has_docs = !i.attrs.doc_strings.is_empty();\n                 let mut tests = Tests { found_tests: 0 };"}, {"sha": "f3a65cad46c47c33814b19b2d92ec4ec6a798b65", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "patch": "@@ -110,7 +110,6 @@ crate const DEFAULT_PASSES: &[ConditionalPass] = &[\n \n /// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n crate const COVERAGE_PASSES: &[ConditionalPass] = &[\n-    ConditionalPass::always(COLLECT_TRAIT_IMPLS),\n     ConditionalPass::new(STRIP_HIDDEN, WhenNotDocumentHidden),\n     ConditionalPass::new(STRIP_PRIVATE, WhenNotDocumentPrivate),\n     ConditionalPass::always(CALCULATE_DOC_COVERAGE),"}, {"sha": "2bcb50aea77d208cb1797c4619b8318fd5098b59", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=40ca3521ad1b0b42980ff16d5b9d1d3d8b68a50e", "patch": "@@ -16,6 +16,7 @@ pub trait ThisTrait {\n }\n \n /// so what happens if we take some struct...\n+#[derive(Clone)]\n pub struct SomeStruct;\n \n /// ...and slap this trait on it?"}]}