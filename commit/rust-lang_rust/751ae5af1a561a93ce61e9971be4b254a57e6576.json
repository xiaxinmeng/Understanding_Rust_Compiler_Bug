{"sha": "751ae5af1a561a93ce61e9971be4b254a57e6576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MWFlNWFmMWE1NjFhOTNjZTYxZTk5NzFiZTRiMjU0YTU3ZTY1NzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-09T15:04:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T11:24:21Z"}, "message": "Introduce `hir::Lit` not keeping the original token", "tree": {"sha": "52d932e129fa0abe476a885547270ac06e81c751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d932e129fa0abe476a885547270ac06e81c751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/751ae5af1a561a93ce61e9971be4b254a57e6576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/751ae5af1a561a93ce61e9971be4b254a57e6576", "html_url": "https://github.com/rust-lang/rust/commit/751ae5af1a561a93ce61e9971be4b254a57e6576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/751ae5af1a561a93ce61e9971be4b254a57e6576/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2834a403abe78f56d750a302807eab5206bb2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2834a403abe78f56d750a302807eab5206bb2c5", "html_url": "https://github.com/rust-lang/rust/commit/f2834a403abe78f56d750a302807eab5206bb2c5"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "20a2a1fd49bdebf53bc053b94ad68bef0b6393e0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -4100,7 +4100,7 @@ impl<'a> LoweringContext<'a> {\n                 let ohs = P(self.lower_expr(ohs));\n                 hir::ExprKind::Unary(op, ohs)\n             }\n-            ExprKind::Lit(ref l) => hir::ExprKind::Lit((*l).clone()),\n+            ExprKind::Lit(ref l) => hir::ExprKind::Lit(respan(l.span, l.node.clone())),\n             ExprKind::Cast(ref expr, ref ty) => {\n                 let expr = P(self.lower_expr(expr));\n                 hir::ExprKind::Cast(expr, self.lower_ty(ty, ImplTraitContext::disallowed()))"}, {"sha": "d645898692806c5925b86a792790fd2249cb08b7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -20,7 +20,7 @@ use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n-use syntax::ast::{Attribute, Label, Lit, StrStyle, FloatTy, IntTy, UintTy};\n+use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::ptr::P;\n@@ -1331,6 +1331,9 @@ impl BodyOwnerKind {\n     }\n }\n \n+/// A literal.\n+pub type Lit = Spanned<LitKind>;\n+\n /// A constant (expression) that's not an item or associated item,\n /// but needs its own `DefId` for type-checking, const-eval, etc.\n /// These are usually found nested inside types (e.g., array lengths)\n@@ -1353,7 +1356,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 80);\n+static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 72);\n \n impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {"}, {"sha": "b7260abb521ac412b09829c89a084528932c5add", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -15,6 +15,7 @@ use crate::hir;\n use crate::hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n use crate::hir::{GenericParam, GenericParamKind, GenericArg};\n \n+use std::ascii;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::io::{self, Write, Read};\n@@ -1276,6 +1277,64 @@ impl<'a> State<'a> {\n         self.print_expr_maybe_paren(expr, parser::PREC_PREFIX)\n     }\n \n+    fn print_literal(&mut self, lit: &hir::Lit) -> io::Result<()> {\n+        self.maybe_print_comment(lit.span.lo())?;\n+        if let Some(ltrl) = self.next_lit(lit.span.lo()) {\n+            return self.writer().word(ltrl.lit.clone());\n+        }\n+        match lit.node {\n+            hir::LitKind::Str(st, style) => self.print_string(&st.as_str(), style),\n+            hir::LitKind::Err(st) => {\n+                let st = st.as_str().escape_debug().to_string();\n+                let mut res = String::with_capacity(st.len() + 2);\n+                res.push('\\'');\n+                res.push_str(&st);\n+                res.push('\\'');\n+                self.writer().word(res)\n+            }\n+            hir::LitKind::Byte(byte) => {\n+                let mut res = String::from(\"b'\");\n+                res.extend(ascii::escape_default(byte).map(|c| c as char));\n+                res.push('\\'');\n+                self.writer().word(res)\n+            }\n+            hir::LitKind::Char(ch) => {\n+                let mut res = String::from(\"'\");\n+                res.extend(ch.escape_default());\n+                res.push('\\'');\n+                self.writer().word(res)\n+            }\n+            hir::LitKind::Int(i, t) => {\n+                match t {\n+                    ast::LitIntType::Signed(st) => {\n+                        self.writer().word(st.val_to_string(i as i128))\n+                    }\n+                    ast::LitIntType::Unsigned(ut) => {\n+                        self.writer().word(ut.val_to_string(i))\n+                    }\n+                    ast::LitIntType::Unsuffixed => {\n+                        self.writer().word(i.to_string())\n+                    }\n+                }\n+            }\n+            hir::LitKind::Float(ref f, t) => {\n+                self.writer().word(format!(\"{}{}\", &f, t.ty_to_string()))\n+            }\n+            hir::LitKind::FloatUnsuffixed(ref f) => self.writer().word(f.as_str().to_string()),\n+            hir::LitKind::Bool(val) => {\n+                if val { self.writer().word(\"true\") } else { self.writer().word(\"false\") }\n+            }\n+            hir::LitKind::ByteStr(ref v) => {\n+                let mut escaped: String = String::new();\n+                for &ch in v.iter() {\n+                    escaped.extend(ascii::escape_default(ch)\n+                                         .map(|c| c as char));\n+                }\n+                self.writer().word(format!(\"b\\\"{}\\\"\", escaped))\n+            }\n+        }\n+    }\n+\n     pub fn print_expr(&mut self, expr: &hir::Expr) -> io::Result<()> {\n         self.maybe_print_comment(expr.span.lo())?;\n         self.print_outer_attributes(&expr.attrs)?;"}, {"sha": "4e5718cc5ef2a275e5057e0c42097ba040b80548", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -181,6 +181,8 @@ impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Bool(value)\n });\n \n+impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n+\n impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });"}, {"sha": "38b6e2c197939769be2d3f3238bf2f9672b7df7c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -62,7 +62,7 @@ impl TypeLimits {\n /// Returns `true` iff the lint was overridden.\n fn lint_overflowing_range_endpoint<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    lit: &ast::Lit,\n+    lit: &hir::Lit,\n     lit_val: u128,\n     max: u128,\n     expr: &'tcx hir::Expr,\n@@ -132,7 +132,7 @@ fn uint_ty_range(uint_ty: ast::UintTy) -> (u128, u128) {\n     }\n }\n \n-fn get_bin_hex_repr(cx: &LateContext<'_, '_>, lit: &ast::Lit) -> Option<String> {\n+fn get_bin_hex_repr(cx: &LateContext<'_, '_>, lit: &hir::Lit) -> Option<String> {\n     let src = cx.sess().source_map().span_to_snippet(lit.span).ok()?;\n     let firstch = src.chars().next()?;\n \n@@ -249,7 +249,7 @@ fn lint_int_literal<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     type_limits: &TypeLimits,\n     e: &'tcx hir::Expr,\n-    lit: &ast::Lit,\n+    lit: &hir::Lit,\n     t: ast::IntTy,\n     v: u128,\n ) {\n@@ -301,7 +301,7 @@ fn lint_int_literal<'a, 'tcx>(\n fn lint_uint_literal<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     e: &'tcx hir::Expr,\n-    lit: &ast::Lit,\n+    lit: &hir::Lit,\n     t: ast::UintTy,\n ) {\n     let uint_type = if let ast::UintTy::Usize = t {\n@@ -363,7 +363,7 @@ fn lint_literal<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     type_limits: &TypeLimits,\n     e: &'tcx hir::Expr,\n-    lit: &ast::Lit,\n+    lit: &hir::Lit,\n ) {\n     match cx.tables.node_type(e.hir_id).sty {\n         ty::Int(t) => {"}, {"sha": "dc73ada1506c89be1bb8a550229eb1e0e45f798b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -3083,7 +3083,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     // AST fragment checking\n     fn check_lit(&self,\n-                 lit: &ast::Lit,\n+                 lit: &hir::Lit,\n                  expected: Expectation<'tcx>)\n                  -> Ty<'tcx>\n     {"}, {"sha": "a188f1a9368902929c15ba559becf7ee79858ae5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751ae5af1a561a93ce61e9971be4b254a57e6576/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=751ae5af1a561a93ce61e9971be4b254a57e6576", "patch": "@@ -1352,7 +1352,7 @@ pub enum StrStyle {\n }\n \n /// A literal.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Lit {\n     pub node: LitKind,\n     pub token: token::Lit,"}]}