{"sha": "48d07d13266d321a2be15a18d335cf642dbd685c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZDA3ZDEzMjY2ZDMyMWEyYmUxNWExOGQzMzVjZjY0MmRiZDY4NWM=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-16T14:20:35Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-16T14:20:35Z"}, "message": "Suggest borrowing if a trait implementation is found for &/&mut <type>", "tree": {"sha": "634cb5d0f1f157fba56b46e1da55b15e819d1205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/634cb5d0f1f157fba56b46e1da55b15e819d1205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48d07d13266d321a2be15a18d335cf642dbd685c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48d07d13266d321a2be15a18d335cf642dbd685c", "html_url": "https://github.com/rust-lang/rust/commit/48d07d13266d321a2be15a18d335cf642dbd685c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48d07d13266d321a2be15a18d335cf642dbd685c/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ecdfd115a353f65d4b21056b23c7074339be6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ecdfd115a353f65d4b21056b23c7074339be6e", "html_url": "https://github.com/rust-lang/rust/commit/94ecdfd115a353f65d4b21056b23c7074339be6e"}], "stats": {"total": 171, "additions": 154, "deletions": 17}, "files": [{"sha": "d090120406126ff33b5ac965d22c6ac420a3d1d3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 74, "deletions": 13, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/48d07d13266d321a2be15a18d335cf642dbd685c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d07d13266d321a2be15a18d335cf642dbd685c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=48d07d13266d321a2be15a18d335cf642dbd685c", "patch": "@@ -686,17 +686,42 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return false;\n         }\n \n+        // Blacklist traits for which it would be nonsensical to suggest borrowing.\n+        // For instance, immutable references are always Copy, so suggesting to\n+        // borrow would always succeed, but it's probably not what the user wanted.\n+        let blacklist: Vec<_> = [\n+            LangItem::Copy,\n+            LangItem::Clone,\n+            LangItem::Pin,\n+            LangItem::Unpin,\n+            LangItem::Sized,\n+            LangItem::Send,\n+        ]\n+        .iter()\n+        .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n+        .collect();\n+\n         let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n \n-        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &obligation.cause.code {\n-            // Try to apply the original trait binding obligation by borrowing.\n-            let self_ty = trait_ref.self_ty();\n-            let found = self_ty.to_string();\n-            let new_self_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, self_ty);\n-            let substs = self.tcx.mk_substs_trait(new_self_ty, &[]);\n-            let new_trait_ref = ty::TraitRef::new(obligation.parent_trait_ref.def_id(), substs);\n+        let found_ty = trait_ref.self_ty();\n+        let found_ty_str = found_ty.to_string();\n+        let imm_borrowed_found_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, found_ty);\n+        let imm_substs = self.tcx.mk_substs_trait(imm_borrowed_found_ty, &[]);\n+        let mut_borrowed_found_ty = self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, found_ty);\n+        let mut_substs = self.tcx.mk_substs_trait(mut_borrowed_found_ty, &[]);\n+\n+        // Try to apply the original trait binding obligation by borrowing.\n+        let mut try_borrowing = |new_trait_ref: ty::TraitRef<'tcx>,\n+                                 expected_trait_ref: ty::TraitRef<'tcx>,\n+                                 mtbl: bool,\n+                                 blacklist: &[DefId]|\n+         -> bool {\n+            if blacklist.contains(&expected_trait_ref.def_id) {\n+                return false;\n+            }\n+\n             let new_obligation = Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n@@ -713,8 +738,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n-                        found,\n-                        obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n+                        found_ty_str,\n+                        expected_trait_ref.print_only_trait_path(),\n                     );\n                     if has_custom_message {\n                         err.note(&msg);\n@@ -730,7 +755,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span,\n                         &format!(\n                             \"expected an implementor of trait `{}`\",\n-                            obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n+                            expected_trait_ref.print_only_trait_path(),\n                         ),\n                     );\n \n@@ -745,16 +770,52 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                         err.span_suggestion(\n                             span,\n-                            \"consider borrowing here\",\n-                            format!(\"&{}\", snippet),\n+                            &format!(\n+                                \"consider borrowing{} here\",\n+                                if mtbl { \" mutably\" } else { \"\" }\n+                            ),\n+                            format!(\"&{}{}\", if mtbl { \"mut \" } else { \"\" }, snippet),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n                     return true;\n                 }\n             }\n+            return false;\n+        };\n+\n+        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &obligation.cause.code {\n+            let expected_trait_ref = obligation.parent_trait_ref.skip_binder();\n+            let new_imm_trait_ref =\n+                ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs);\n+            let new_mut_trait_ref =\n+                ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs);\n+            if try_borrowing(new_imm_trait_ref, expected_trait_ref, false, &[]) {\n+                return true;\n+            } else {\n+                return try_borrowing(new_mut_trait_ref, expected_trait_ref, true, &[]);\n+            }\n+        } else if let ObligationCauseCode::BindingObligation(_, _)\n+        | ObligationCauseCode::ItemObligation(_) = &obligation.cause.code\n+        {\n+            if try_borrowing(\n+                ty::TraitRef::new(trait_ref.def_id, imm_substs),\n+                trait_ref,\n+                false,\n+                &blacklist[..],\n+            ) {\n+                return true;\n+            } else {\n+                return try_borrowing(\n+                    ty::TraitRef::new(trait_ref.def_id, mut_substs),\n+                    trait_ref,\n+                    true,\n+                    &blacklist[..],\n+                );\n+            }\n+        } else {\n+            false\n         }\n-        false\n     }\n \n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,"}, {"sha": "3cf744105695ed82917f7f05923c60c3ce26734f", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=48d07d13266d321a2be15a18d335cf642dbd685c", "patch": "@@ -21,10 +21,10 @@ LL | fn foo<X: Trait>(_: X) {}\n    |           ----- required by this bound in `foo`\n ...\n LL |   foo(s);\n-   |       ^ the trait `Trait` is not implemented for `S`\n-   |\n-   = help: the following implementations were found:\n-             <&'a mut S as Trait>\n+   |       ^\n+   |       |\n+   |       expected an implementor of trait `Trait`\n+   |       help: consider borrowing mutably here: `&mut s`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "050cf8c64b361eaa2438e11c34b003abeae65667", "filename": "src/test/ui/suggestions/issue-84973-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.rs?ref=48d07d13266d321a2be15a18d335cf642dbd685c", "patch": "@@ -0,0 +1,13 @@\n+// A slight variation of issue-84973.rs. Here, a mutable borrow is\n+// required (and the obligation kind is different).\n+\n+trait Tr {}\n+impl Tr for &mut i32 {}\n+\n+fn foo<T: Tr>(i: T) {}\n+\n+fn main() {\n+    let a: i32 = 32;\n+    foo(a);\n+    //~^ ERROR: the trait bound `i32: Tr` is not satisfied [E0277]\n+}"}, {"sha": "6394e58a2a910c6d57ab81c4fdb529770bbe3e4c", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=48d07d13266d321a2be15a18d335cf642dbd685c", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `i32: Tr` is not satisfied\n+  --> $DIR/issue-84973-2.rs:11:9\n+   |\n+LL | fn foo<T: Tr>(i: T) {}\n+   |           -- required by this bound in `foo`\n+...\n+LL |     foo(a);\n+   |         ^\n+   |         |\n+   |         expected an implementor of trait `Tr`\n+   |         help: consider borrowing mutably here: `&mut a`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "42468478ed9a24214ccbad6f3986a054b14dae79", "filename": "src/test/ui/suggestions/issue-84973.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.rs?ref=48d07d13266d321a2be15a18d335cf642dbd685c", "patch": "@@ -0,0 +1,33 @@\n+// Checks whether borrowing is suggested when a trait bound is not satisfied\n+// for found type `T`, but is for `&/&mut T`.\n+\n+fn main() {\n+    let f = Fancy{};\n+    let o = Other::new(f);\n+    //~^ ERROR: the trait bound `Fancy: SomeTrait` is not satisfied [E0277]\n+}\n+\n+struct Fancy {}\n+\n+impl <'a> SomeTrait for &'a Fancy {\n+}\n+\n+trait SomeTrait {}\n+\n+struct Other<'a, G> {\n+    a: &'a str,\n+    g: G,\n+}\n+\n+// Broadly copied from https://docs.rs/petgraph/0.5.1/src/petgraph/dot.rs.html#70\n+impl<'a, G> Other<'a, G>\n+where\n+    G: SomeTrait,\n+{\n+    pub fn new(g: G) -> Self {\n+        Other {\n+            a: \"hi\",\n+            g: g,\n+        }\n+    }\n+}"}, {"sha": "49fa94da8592304a44ae8fbc25a62c1220b94067", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48d07d13266d321a2be15a18d335cf642dbd685c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=48d07d13266d321a2be15a18d335cf642dbd685c", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n+  --> $DIR/issue-84973.rs:6:24\n+   |\n+LL |     let o = Other::new(f);\n+   |                        ^\n+   |                        |\n+   |                        expected an implementor of trait `SomeTrait`\n+   |                        help: consider borrowing here: `&f`\n+...\n+LL |     pub fn new(g: G) -> Self {\n+   |     ------------------------ required by `Other::<'a, G>::new`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}