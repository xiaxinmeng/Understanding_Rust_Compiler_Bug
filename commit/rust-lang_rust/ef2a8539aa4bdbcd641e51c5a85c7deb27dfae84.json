{"sha": "ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMmE4NTM5YWE0YmRiY2Q2NDFlNTFjNWE4NWM3ZGViMjdkZmFlODQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-04T03:14:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-29T17:19:58Z"}, "message": "review comments", "tree": {"sha": "be9d75040f5763446c4cf112806d93a92cd9eacd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be9d75040f5763446c4cf112806d93a92cd9eacd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "html_url": "https://github.com/rust-lang/rust/commit/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3521fe940324447de6bc54470647aaefe54a6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3521fe940324447de6bc54470647aaefe54a6bf", "html_url": "https://github.com/rust-lang/rust/commit/c3521fe940324447de6bc54470647aaefe54a6bf"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "f546acdb87859bf9135d2fdc7afdf1c0d95f14dc", "filename": "src/librustc/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -1,5 +1,7 @@\n //! Error Reporting for `impl` items that do not match the obligations from their `trait`.\n \n+use syntax_pos::Span;\n+use crate::ty::Ty;\n use crate::infer::{ValuePairs, Subtype};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n@@ -25,21 +27,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ) = (&sub_trace.values, &sup_trace.values) {\n                             if sup_expected_found == sub_expected_found {\n                                 let sp = var_origin.span();\n-                                let mut err = self.tcx().sess.struct_span_err(\n+                                self.emit_err(\n                                     sp,\n-                                    \"`impl` item doesn't match `trait` item\"\n-                                );\n-                                err.note(&format!(\n-                                    \"expected: {:?}\\n   found: {:?}\",\n                                     sub_expected_found.expected,\n                                     sub_expected_found.found,\n-                                ));\n-                                err.span_label(sp, &format!(\n-                                    \"found {:?}\",\n-                                    sub_expected_found.found,\n-                                ));\n-                                // FIXME: recover the `FnPtr`'s `HirId`/`Node` to point to it.\n-                                err.emit();\n+                                );\n                                 return Some(ErrorReported);\n                             }\n                         }\n@@ -50,4 +42,15 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         None\n     }\n+\n+    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>) {\n+        let mut err = self.tcx().sess.struct_span_err(\n+            sp,\n+            \"`impl` item signature doesn't match `trait` item signature\",\n+        );\n+        err.note(&format!(\"expected: {:?}\\n   found: {:?}\", expected, found));\n+        err.span_label(sp, &format!(\"found {:?}\", found));\n+        // FIXME: recover the `FnPtr`'s `HirId`/`Node` to point to it.\n+        err.emit();\n+    }\n }"}, {"sha": "60e1585a51a807e0032f83254f7fea78b401bf97", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -9,6 +9,6 @@ impl Deref for Struct {\n         unimplemented!();\n     }\n }\n-//~^^^^ ERROR `impl` item doesn't match `trait` item\n+//~^^^^ ERROR `impl` item signature doesn't match `trait` item signature\n \n fn main() {}"}, {"sha": "ea88cb14f0118ba0f2ecb5e5a9022d01ee511243", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -1,4 +1,4 @@\n-error: `impl` item doesn't match `trait` item\n+error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {"}, {"sha": "b9e02e967c126b6d48974e5a78d9d047709ba465", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -6,7 +6,7 @@ trait Get {\n }\n \n impl Get for i32 {\n-    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR `impl` item doesn't match `trait`\n+    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR `impl` item signature doesn't match\n         x //~ ERROR lifetime mismatch\n     }\n }"}, {"sha": "4b0af292bbc246be8760afab08284ee6234e7c02", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -1,4 +1,4 @@\n-error: `impl` item doesn't match `trait` item\n+error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {"}, {"sha": "2ce1a0f45465170d808a29005ed8d4f251c4069f", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -4,7 +4,7 @@ trait Foo {\n \n impl Foo for () {\n     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n-    //~^ ERROR `impl` item doesn't match `trait` item\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n         if x > y { x } else { y }\n     }\n }"}, {"sha": "cdb4c16eca35b278553d74624fe4bea4100b636d", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -1,4 +1,4 @@\n-error: `impl` item doesn't match `trait` item\n+error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/lifetime-mismatch-between-trait-and-impl.rs:6:5\n    |\n LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {"}, {"sha": "621626f3a0d9156291862425f07f62148a487004", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -52,6 +52,6 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR `impl` item doesn't match `trait` item\n+//~^ ERROR `impl` item signature doesn't match `trait` item signature\n \n pub fn main() { }"}, {"sha": "bc7604cdede5799c7c8ae06f703d48415e53869a", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=ef2a8539aa4bdbcd641e51c5a85c7deb27dfae84", "patch": "@@ -89,7 +89,7 @@ note: Use same sequence of generic type and region parameters that is on the str\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `impl` item doesn't match `trait` item\n+error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/reject-specialized-drops-8142.rs:54:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT"}]}