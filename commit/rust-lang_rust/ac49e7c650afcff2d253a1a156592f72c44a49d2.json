{"sha": "ac49e7c650afcff2d253a1a156592f72c44a49d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDllN2M2NTBhZmNmZjJkMjUzYTFhMTU2NTkyZjcyYzQ0YTQ5ZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T17:55:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T17:55:35Z"}, "message": "only collect backtrace when RUST_BACKTRACE is set; resolve symbols lazily when printing", "tree": {"sha": "ef278ea00d1c3c3b221677847202f8c6d583a950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef278ea00d1c3c3b221677847202f8c6d583a950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac49e7c650afcff2d253a1a156592f72c44a49d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac49e7c650afcff2d253a1a156592f72c44a49d2", "html_url": "https://github.com/rust-lang/rust/commit/ac49e7c650afcff2d253a1a156592f72c44a49d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac49e7c650afcff2d253a1a156592f72c44a49d2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726b027ba3d2658d1a7796f46ea404c7299b7c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/726b027ba3d2658d1a7796f46ea404c7299b7c0c", "html_url": "https://github.com/rust-lang/rust/commit/726b027ba3d2658d1a7796f46ea404c7299b7c0c"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "3eb598782717f4f6af09fd07879ca4a372db566c", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac49e7c650afcff2d253a1a156592f72c44a49d2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ac49e7c650afcff2d253a1a156592f72c44a49d2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ac49e7c650afcff2d253a1a156592f72c44a49d2", "patch": "@@ -2,7 +2,7 @@\n name = \"rustc_miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"backtrace 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\",\n  \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -21,9 +21,9 @@ dependencies = [\n [[package]]\n name = \"backtrace\"\n version = \"0.3.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+source = \"git+https://github.com/alexcrichton/backtrace-rs#3d96a9242ed2096984d15d177f4762b699bee6d4\"\n dependencies = [\n- \"backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -35,7 +35,7 @@ dependencies = [\n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+source = \"git+https://github.com/alexcrichton/backtrace-rs#3d96a9242ed2096984d15d177f4762b699bee6d4\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -290,8 +290,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n-\"checksum backtrace 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72f9b4182546f4b04ebc4ab7f84948953a118bd6021a1b6a6c909e3e94f6be76\"\n-\"checksum backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afccc5772ba333abccdf60d55200fa3406f8c59dcf54d5f7998c9107d3799c7c\"\n+\"checksum backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n+\"checksum backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n \"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\""}, {"sha": "c887890fabff315e74d5354b5efc6f7ab9b9d321", "filename": "miri/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac49e7c650afcff2d253a1a156592f72c44a49d2/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac49e7c650afcff2d253a1a156592f72c44a49d2/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=ac49e7c650afcff2d253a1a156592f72c44a49d2", "patch": "@@ -127,8 +127,8 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 tcx.sess.err(\"the evaluated program leaked memory\");\n             }\n         }\n-        Err(e) => {\n-            ecx.report(&e);\n+        Err(mut e) => {\n+            ecx.report(&mut e);\n         }\n     }\n }"}, {"sha": "1a64bb8c7c7973c69706500c711e330a6e3b52cb", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac49e7c650afcff2d253a1a156592f72c44a49d2/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ac49e7c650afcff2d253a1a156592f72c44a49d2/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=ac49e7c650afcff2d253a1a156592f72c44a49d2", "patch": "@@ -17,4 +17,4 @@ log = \"0.3.6\"\n log_settings = \"0.1.1\"\n lazy_static = \"0.2.8\"\n regex = \"0.2.2\"\n-backtrace = \"0.3\"\n+backtrace = { version = \"0.3\", git = \"https://github.com/alexcrichton/backtrace-rs\" }"}, {"sha": "f22d26ab8bf56b6a17705c7caa5aeb8a59d2c4de", "filename": "src/librustc_mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac49e7c650afcff2d253a1a156592f72c44a49d2/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac49e7c650afcff2d253a1a156592f72c44a49d2/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ferror.rs?ref=ac49e7c650afcff2d253a1a156592f72c44a49d2", "patch": "@@ -1,5 +1,5 @@\n use std::error::Error;\n-use std::fmt;\n+use std::{fmt, env};\n \n use rustc::mir;\n use rustc::ty::{FnSig, Ty, layout};\n@@ -15,14 +15,18 @@ use backtrace::Backtrace;\n #[derive(Debug)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx>,\n-    pub backtrace: Backtrace,\n+    pub backtrace: Option<Backtrace>,\n }\n \n impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n     fn from(kind: EvalErrorKind<'tcx>) -> Self {\n+        let backtrace = match env::var(\"RUST_BACKTRACE\") {\n+            Ok(ref val) if !val.is_empty() => Some(Backtrace::new_unresolved()),\n+            _ => None\n+        };\n         EvalError {\n             kind,\n-            backtrace: Backtrace::new(),\n+            backtrace,\n         }\n     }\n }"}, {"sha": "6f47dd035730f43cc206b78f5caad4cd99cde4e8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ac49e7c650afcff2d253a1a156592f72c44a49d2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac49e7c650afcff2d253a1a156592f72c44a49d2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ac49e7c650afcff2d253a1a156592f72c44a49d2", "patch": "@@ -1716,49 +1716,53 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub fn report(&self, e: &EvalError) {\n-        let mut trace_text = \"\\n################################\\nerror occurred in miri at\\n\".to_string();\n-        let mut skip_init = true;\n-        'frames: for (i, frame) in e.backtrace.frames().iter().enumerate() {\n-            for symbol in frame.symbols() {\n-                if let Some(name) = symbol.name() {\n-                    // unmangle the symbol via `to_string`\n-                    let name = name.to_string();\n-                    if name.starts_with(\"miri::after_analysis\") {\n-                        // don't report initialization gibberish\n-                        break 'frames;\n-                    } else if name.starts_with(\"backtrace::capture::Backtrace::new\")\n+    pub fn report(&self, e: &mut EvalError) {\n+        if let Some(ref mut backtrace) = e.backtrace {\n+            let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n+            let mut skip_init = true;\n+            backtrace.resolve();\n+            'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n+                for symbol in frame.symbols() {\n+                    if let Some(name) = symbol.name() {\n+                        // unmangle the symbol via `to_string`\n+                        let name = name.to_string();\n+                        if name.starts_with(\"miri::after_analysis\") {\n+                            // don't report initialization gibberish\n+                            break 'frames;\n+                        } else if name.starts_with(\"backtrace::capture::Backtrace::new\")\n                             // debug mode produces funky symbol names\n-                           || name.starts_with(\"backtrace::capture::{{impl}}::new\") {\n-                        // don't report backtrace internals\n-                        skip_init = false;\n-                        continue 'frames;\n+                            || name.starts_with(\"backtrace::capture::{{impl}}::new\") {\n+                            // don't report backtrace internals\n+                            skip_init = false;\n+                            continue 'frames;\n+                        }\n                     }\n                 }\n-            }\n-            if skip_init {\n-                continue;\n-            }\n-            write!(trace_text, \"{}\\n\", i).unwrap();\n-            for symbol in frame.symbols() {\n-                if let Some(name) = symbol.name() {\n-                    write!(trace_text, \"# {}\\n\", name).unwrap();\n-                } else {\n-                    write!(trace_text, \"# <unknown>\\n\").unwrap();\n-                }\n-                if let Some(file_path) = symbol.filename() {\n-                    write!(trace_text, \"{}\", file_path.display()).unwrap();\n-                } else {\n-                    write!(trace_text, \"<unknown_file>\").unwrap();\n+                if skip_init {\n+                    continue;\n                 }\n-                if let Some(line) = symbol.lineno() {\n-                    write!(trace_text, \":{}\\n\", line).unwrap();\n-                } else {\n-                    write!(trace_text, \"\\n\").unwrap();\n+                for symbol in frame.symbols() {\n+                    write!(trace_text, \"{}: \" , i).unwrap();\n+                    if let Some(name) = symbol.name() {\n+                        write!(trace_text, \"{}\\n\", name).unwrap();\n+                    } else {\n+                        write!(trace_text, \"<unknown>\\n\").unwrap();\n+                    }\n+                    write!(trace_text, \"\\tat \").unwrap();\n+                    if let Some(file_path) = symbol.filename() {\n+                        write!(trace_text, \"{}\", file_path.display()).unwrap();\n+                    } else {\n+                        write!(trace_text, \"<unknown_file>\").unwrap();\n+                    }\n+                    if let Some(line) = symbol.lineno() {\n+                        write!(trace_text, \":{}\\n\", line).unwrap();\n+                    } else {\n+                        write!(trace_text, \"\\n\").unwrap();\n+                    }\n                 }\n             }\n+            error!(\"{}\", trace_text);\n         }\n-        trace!(\"{}\", trace_text);\n         if let Some(frame) = self.stack().last() {\n             let block = &frame.mir.basic_blocks()[frame.block];\n             let span = if frame.stmt < block.statements.len() {"}]}