{"sha": "577d29c10aed2d6e024fb2a532898be904abd115", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2QyOWMxMGFlZDJkNmUwMjRmYjJhNTMyODk4YmU5MDRhYmQxMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-03T06:28:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-03T06:28:41Z"}, "message": "Auto merge of #49098 - matklad:find_map, r=KodrAus\n\nAdd Iterator::find_map\n\nI'd like to propose to add `find_map` method to the `Iterator`: an occasionally useful utility, which relates to `filter_map` in the same way that `find` relates to `filter`.\n\n`find_map` takes an `Option`-returning function, applies it to the elements of the iterator, and returns the first non-`None` result. In other words, `find_map(f) == filter_map(f).next()`.\n\nWhy do we want to add a function to the `Iterator`, which can be trivially expressed as a combination of existing ones? Observe that `find(f) == filter(f).next()`, so, by the same logic, `find` itself is unnecessary!\n\nThe more positive argument is that desugaring of  `find[_map]` in terms of `filter[_map]().next()` is not super obvious, because the `filter` operation reads as if it is applies to the whole collection, although in reality we are interested only in the first element. That is, the jump from \"I need a **single** result\" to \"let's use a function which maps **many** values to **many** values\" is a non-trivial speed-bump, and causes friction when reading and writing code.\n\nDoes the need for `find_map` arise in practice? Yes!\n\n* Anecdotally, I've more than once searched the docs for the function with `[T] -> (T -> Option<U>) -> Option<U>` signature.\n* The direct cause for this PR was [this](https://github.com/rust-lang/cargo/pull/5187/files/1291c50e86ed4b31db0c76de03a47a5d0074bbd7#r174934173) discussion in Cargo, which boils down to \"there's some pattern that we try to express here, but current approaches looks non-pretty\" (and the pattern is `filter_map`\n* There are several `filter_map().next` combos in Cargo: [[1]](https://github.com/rust-lang/cargo/blob/545a4a2c930916cc9c3dc1716fb7a33299e4062b/src/cargo/ops/cargo_new.rs#L585), [[2]](https://github.com/rust-lang/cargo/blob/545a4a2c930916cc9c3dc1716fb7a33299e4062b/src/cargo/core/resolver/mod.rs#L1130), [[3]](https://github.com/rust-lang/cargo/blob/545a4a2c930916cc9c3dc1716fb7a33299e4062b/src/cargo/ops/cargo_rustc/mod.rs#L1086).\n* I've also needed similar functionality in `Kotlin` several times. There, it is expressed as `mapNotNull {}.firstOrNull`, as can be seen [here](https://github.com/intellij-rust/intellij-rust/blob/ee8bdb4e073fd07142fc6e1853ca288c57495e69/src/main/kotlin/org/rust/cargo/project/model/impl/CargoProjectImpl.kt#L154), [here](https://github.com/intellij-rust/intellij-rust/blob/ee8bdb4e073fd07142fc6e1853ca288c57495e69/src/main/kotlin/org/rust/lang/core/resolve/ImplLookup.kt#L444) [here](https://github.com/intellij-rust/intellij-rust/blob/ee8bdb4e073fd07142fc6e1853ca288c57495e69/src/main/kotlin/org/rust/ide/inspections/RsLint.kt#L38) and [here](https://github.com/intellij-rust/intellij-rust/blob/ee8bdb4e073fd07142fc6e1853ca288c57495e69/src/main/kotlin/org/rust/cargo/toolchain/RustToolchain.kt#L74) (and maybe in some other cases as well)\n\nNote that it is definitely not among the most popular functions (it definitely is less popular than `find`), but, for example it (in case of Cargo) seems to be more popular than `rposition` (1 occurrence), `step_by` (zero occurrences) and `nth` (three occurrences as `nth(0)` which probably should be replaced with `next`).\n\nDo we necessary need this function in `std`? Could we move it to itertools? That is possible, but observe that `filter`, `filter_map`, `find` and `find_map` together really form a complete table:\n\n|||\n|-------|---------|\n| filter| find|\n|filter_map|find_map|\n\nIt would be somewhat unsatisfying to have one quarter of this table live elsewhere :) Also, if `Itertools` adds an `find_map` method, it would be more difficult to move it to std due to name collision.\n\nHm, at this point I've searched for `filter_map` the umpteenth time, and, strangely, this time I do find this RFC: https://github.com/rust-lang/rfcs/issues/1801. I guess this could be an implementation though? :)\n\nTo sum up:\n\nPro:\n  - complete the symmetry with existing method\n  - codify a somewhat common non-obvious pattern\n\nContra:\n  - niche use case\n  - we can, and do, live without it", "tree": {"sha": "6913ab8e9f0d2595bc07ab682d8d54dd3237344b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6913ab8e9f0d2595bc07ab682d8d54dd3237344b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577d29c10aed2d6e024fb2a532898be904abd115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577d29c10aed2d6e024fb2a532898be904abd115", "html_url": "https://github.com/rust-lang/rust/commit/577d29c10aed2d6e024fb2a532898be904abd115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577d29c10aed2d6e024fb2a532898be904abd115/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee891cfeabc0872624104611cc0a359f46447cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee891cfeabc0872624104611cc0a359f46447cc", "html_url": "https://github.com/rust-lang/rust/commit/5ee891cfeabc0872624104611cc0a359f46447cc"}, {"sha": "591dd5d992ef5c9eb6a37cf9870c5f094d6363e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/591dd5d992ef5c9eb6a37cf9870c5f094d6363e4", "html_url": "https://github.com/rust-lang/rust/commit/591dd5d992ef5c9eb6a37cf9870c5f094d6363e4"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "f039d1730eb3b9761599bebd399e98779ac92997", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/577d29c10aed2d6e024fb2a532898be904abd115/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d29c10aed2d6e024fb2a532898be904abd115/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=577d29c10aed2d6e024fb2a532898be904abd115", "patch": "@@ -1745,6 +1745,38 @@ pub trait Iterator {\n         }).break_value()\n     }\n \n+    /// Applies function to the elements of iterator and returns\n+    /// the first non-none result.\n+    ///\n+    /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iterator_find_map)]\n+    /// let a = [\"lol\", \"NaN\", \"2\", \"5\"];\n+    ///\n+    /// let mut first_number = a.iter().find_map(|s| s.parse().ok());\n+    ///\n+    /// assert_eq!(first_number, Some(2));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_find_map\",\n+               reason = \"unstable new API\",\n+               issue = \"49602\")]\n+    fn find_map<B, F>(&mut self, mut f: F) -> Option<B> where\n+        Self: Sized,\n+        F: FnMut(Self::Item) -> Option<B>,\n+    {\n+        self.try_for_each(move |x| {\n+            match f(x) {\n+                Some(x) => LoopState::Break(x),\n+                None => LoopState::Continue(()),\n+            }\n+        }).break_value()\n+    }\n+\n     /// Searches for an element in an iterator, returning its index.\n     ///\n     /// `position()` takes a closure that returns `true` or `false`. It applies"}, {"sha": "2abac0cf1d5b93bd01ca47407eb4e0b997e3ce69", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/577d29c10aed2d6e024fb2a532898be904abd115/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d29c10aed2d6e024fb2a532898be904abd115/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=577d29c10aed2d6e024fb2a532898be904abd115", "patch": "@@ -1146,6 +1146,33 @@ fn test_find() {\n     assert!(v.iter().find(|&&x| x % 12 == 0).is_none());\n }\n \n+#[test]\n+fn test_find_map() {\n+    let xs: &[isize] = &[];\n+    assert_eq!(xs.iter().find_map(half_if_even), None);\n+    let xs: &[isize] = &[3, 5];\n+    assert_eq!(xs.iter().find_map(half_if_even), None);\n+    let xs: &[isize] = &[4, 5];\n+    assert_eq!(xs.iter().find_map(half_if_even), Some(2));\n+    let xs: &[isize] = &[3, 6];\n+    assert_eq!(xs.iter().find_map(half_if_even), Some(3));\n+\n+    let xs: &[isize] = &[1, 2, 3, 4, 5, 6, 7];\n+    let mut iter = xs.iter();\n+    assert_eq!(iter.find_map(half_if_even), Some(1));\n+    assert_eq!(iter.find_map(half_if_even), Some(2));\n+    assert_eq!(iter.find_map(half_if_even), Some(3));\n+    assert_eq!(iter.next(), Some(&7));\n+\n+    fn half_if_even(x: &isize) -> Option<isize> {\n+        if x % 2 == 0 {\n+            Some(x / 2)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n #[test]\n fn test_position() {\n     let v = &[1, 3, 9, 27, 103, 14, 11];"}, {"sha": "6f6105553d4dec9747371783db720c5d1408af4f", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577d29c10aed2d6e024fb2a532898be904abd115/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577d29c10aed2d6e024fb2a532898be904abd115/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=577d29c10aed2d6e024fb2a532898be904abd115", "patch": "@@ -48,6 +48,7 @@\n #![feature(atomic_nand)]\n #![feature(reverse_bits)]\n #![feature(inclusive_range_fields)]\n+#![feature(iterator_find_map)]\n \n extern crate core;\n extern crate test;"}]}