{"sha": "fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZGIzODdmMGQ3ZTc2ZjMyNWE4NThlNDQ2M2VmZDVkN2VkM2VmYzM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T14:35:52Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T14:35:52Z"}, "message": "Merge #1237\n\n1237: Improve $ Handling in mbe parser r=matklad a=edwin0cheng\n\nThis PR improve the $ handling in mbe parser. In some rare case, the `$` may not be following an `ident` or a `Subtree`. ( For example, a macro_rules inside a macro rules). \r\n\r\nRelated issue: #1236\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "e30057667232f29d867dcf1432831e686a686b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e30057667232f29d867dcf1432831e686a686b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "html_url": "https://github.com/rust-lang/rust/commit/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b1febf2e6d4606a7e0eb422cdeba5dd286b10794", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1febf2e6d4606a7e0eb422cdeba5dd286b10794", "html_url": "https://github.com/rust-lang/rust/commit/b1febf2e6d4606a7e0eb422cdeba5dd286b10794"}, {"sha": "50f288db925c5473f45d43d355e6819032298d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f288db925c5473f45d43d355e6819032298d37", "html_url": "https://github.com/rust-lang/rust/commit/50f288db925c5473f45d43d355e6819032298d37"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "8e1e31e7d98f010f0ca4a281cb5a8b66f4358af8", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "patch": "@@ -34,11 +34,14 @@ fn parse_subtree(tt: &tt::Subtree, transcriber: bool) -> Result<crate::Subtree,\n     while let Some(tt) = p.eat() {\n         let child: crate::TokenTree = match tt {\n             tt::TokenTree::Leaf(leaf) => match leaf {\n-                tt::Leaf::Punct(tt::Punct { char: '$', .. }) => {\n+                tt::Leaf::Punct(tt::Punct { char: '$', spacing }) => {\n                     if p.at_ident().is_some() {\n                         crate::Leaf::from(parse_var(&mut p, transcriber)?).into()\n-                    } else {\n+                    } else if let Some(tt::TokenTree::Subtree(_)) = p.current() {\n                         parse_repeat(&mut p, transcriber)?.into()\n+                    } else {\n+                        // Treat it as normal punct\n+                        crate::Leaf::from(tt::Punct { char: '$', spacing: *spacing }).into()\n                     }\n                 }\n                 tt::Leaf::Punct(punct) => crate::Leaf::from(*punct).into(),\n@@ -89,7 +92,7 @@ fn mk_repeat(\n }\n \n fn parse_repeat(p: &mut TtCursor, transcriber: bool) -> Result<crate::Repeat, ParseError> {\n-    let subtree = p.eat_subtree().unwrap();\n+    let subtree = p.eat_subtree()?;\n     let mut subtree = parse_subtree(subtree, transcriber)?;\n     subtree.delimiter = crate::Delimiter::None;\n \n@@ -121,6 +124,8 @@ mod tests {\n         expect_err(\"invalid\", \"subtree\");\n \n         is_valid(\"($i:ident) => ()\");\n+        is_valid(\"($($i:ident)*) => ($_)\");\n+\n         expect_err(\"$i:ident => ()\", \"subtree\");\n         expect_err(\"($i:ident) ()\", \"`=`\");\n         expect_err(\"($($i:ident)_) => ()\", \"repeat\");"}]}