{"sha": "0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjcyN2RhOTFlN2ZmM2M4ZWQ1NTE4Y2I3ZTAwNWU4ZDRmOTM5YjA=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2020-04-27T17:02:47Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2020-04-29T18:06:51Z"}, "message": "Validate the location of `crate` in paths", "tree": {"sha": "4b1b78edb4d28b2ad98e40f054ab3efe58e33eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1b78edb4d28b2ad98e40f054ab3efe58e33eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "html_url": "https://github.com/rust-lang/rust/commit/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9ba1657daa9fd90c639dcd937da11b4f526675", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ba1657daa9fd90c639dcd937da11b4f526675", "html_url": "https://github.com/rust-lang/rust/commit/7a9ba1657daa9fd90c639dcd937da11b4f526675"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "3b5e05af92eb671c0540b2f92f24dfea2baa042f", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "patch": "@@ -1249,6 +1249,7 @@ pub struct PathSegment {\n }\n impl PathSegment {\n     pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n     pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }"}, {"sha": "a30bc97bb0e8dc9df648f029d41213b7ff6f592e", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "patch": "@@ -96,6 +96,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::RecordField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n                 ast::Visibility(it) => validate_visibility(it, &mut errors),\n                 ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n+                ast::PathSegment(it) => validate_crate_keyword_in_path_segment(it, &mut errors),\n                 _ => (),\n             }\n         }\n@@ -222,3 +223,41 @@ fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n         ));\n     }\n }\n+\n+fn validate_crate_keyword_in_path_segment(\n+    segment: ast::PathSegment,\n+    errors: &mut Vec<SyntaxError>,\n+) {\n+    const ERR_MSG: &str = \"The `crate` keyword is only allowed as the first segment of a path\";\n+\n+    let crate_token = match segment.crate_token() {\n+        None => return,\n+        Some(it) => it,\n+    };\n+\n+    // Disallow both ::crate and foo::crate\n+    let path = segment.parent_path();\n+    if segment.coloncolon_token().is_some() || path.qualifier().is_some() {\n+        errors.push(SyntaxError::new(ERR_MSG, crate_token.text_range()));\n+        return;\n+    }\n+\n+    // We now know that the path variable describes a complete path.\n+    // For expressions and types, validation is complete, but we still have\n+    // to handle UseItems like this:\n+    //      use foo:{crate};\n+    // so we crawl upwards looking for any preceding paths on `UseTree`s\n+    for node in path.syntax().ancestors().skip(1) {\n+        match_ast! {\n+            match node {\n+                ast::UseTree(it) => if let Some(tree_path) = it.path() {\n+                    if tree_path != path {\n+                        errors.push(SyntaxError::new(ERR_MSG, crate_token.text_range()));\n+                    }\n+                },\n+                ast::UseTreeList(_it) => continue,\n+                _ => return,\n+            }\n+        };\n+    }\n+}"}, {"sha": "8306f736102c551d2a103f72592d9e5c07f68667", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rast", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast?ref=0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "patch": "@@ -0,0 +1,76 @@\n+SOURCE_FILE@0..83\n+  USE_ITEM@0..12\n+    USE_KW@0..3 \"use\"\n+    WHITESPACE@3..4 \" \"\n+    USE_TREE@4..11\n+      PATH@4..11\n+        PATH_SEGMENT@4..11\n+          COLON2@4..6 \"::\"\n+          CRATE_KW@6..11 \"crate\"\n+    SEMICOLON@11..12 \";\"\n+  WHITESPACE@12..13 \"\\n\"\n+  USE_ITEM@13..39\n+    USE_KW@13..16 \"use\"\n+    WHITESPACE@16..17 \" \"\n+    USE_TREE@17..38\n+      USE_TREE_LIST@17..38\n+        L_CURLY@17..18 \"{\"\n+        USE_TREE@18..23\n+          PATH@18..23\n+            PATH_SEGMENT@18..23\n+              CRATE_KW@18..23 \"crate\"\n+        COMMA@23..24 \",\"\n+        WHITESPACE@24..25 \" \"\n+        USE_TREE@25..37\n+          PATH@25..28\n+            PATH_SEGMENT@25..28\n+              NAME_REF@25..28\n+                IDENT@25..28 \"foo\"\n+          COLON2@28..30 \"::\"\n+          USE_TREE_LIST@30..37\n+            L_CURLY@30..31 \"{\"\n+            USE_TREE@31..36\n+              PATH@31..36\n+                PATH_SEGMENT@31..36\n+                  CRATE_KW@31..36 \"crate\"\n+            R_CURLY@36..37 \"}\"\n+        R_CURLY@37..38 \"}\"\n+    SEMICOLON@38..39 \";\"\n+  WHITESPACE@39..40 \"\\n\"\n+  USE_ITEM@40..57\n+    USE_KW@40..43 \"use\"\n+    WHITESPACE@43..44 \" \"\n+    USE_TREE@44..56\n+      PATH@44..56\n+        PATH@44..49\n+          PATH_SEGMENT@44..49\n+            NAME_REF@44..49\n+              IDENT@44..49 \"hello\"\n+        COLON2@49..51 \"::\"\n+        PATH_SEGMENT@51..56\n+          CRATE_KW@51..56 \"crate\"\n+    SEMICOLON@56..57 \";\"\n+  WHITESPACE@57..58 \"\\n\"\n+  USE_ITEM@58..82\n+    USE_KW@58..61 \"use\"\n+    WHITESPACE@61..62 \" \"\n+    USE_TREE@62..81\n+      PATH@62..81\n+        PATH@62..74\n+          PATH@62..67\n+            PATH_SEGMENT@62..67\n+              NAME_REF@62..67\n+                IDENT@62..67 \"hello\"\n+          COLON2@67..69 \"::\"\n+          PATH_SEGMENT@69..74\n+            CRATE_KW@69..74 \"crate\"\n+        COLON2@74..76 \"::\"\n+        PATH_SEGMENT@76..81\n+          NAME_REF@76..81\n+            IDENT@76..81 \"there\"\n+    SEMICOLON@81..82 \";\"\n+  WHITESPACE@82..83 \"\\n\"\n+error 6..11: The `crate` keyword is only allowed as the first segment of a path\n+error 31..36: The `crate` keyword is only allowed as the first segment of a path\n+error 51..56: The `crate` keyword is only allowed as the first segment of a path\n+error 69..74: The `crate` keyword is only allowed as the first segment of a path"}, {"sha": "bead4c0b6eae142ad78cf414015b6658f2c006c7", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs?ref=0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "patch": "@@ -0,0 +1,4 @@\n+use ::crate;\n+use {crate, foo::{crate}};\n+use hello::crate;\n+use hello::crate::there;"}, {"sha": "98c8644e455e9c7c9bbd1e57c5c072f6a269875b", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af727da91e7ff3c8ed5518cb7e005e8d4f939b0/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=0af727da91e7ff3c8ed5518cb7e005e8d4f939b0", "patch": "@@ -595,7 +595,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             qualifier: Path,\n         }\n         struct PathSegment {\n-            T![::], T![<], NameRef, TypeArgList, ParamList, RetType, PathType, T![>]\n+            T![::], T![crate], T![<], NameRef, TypeArgList, ParamList, RetType, PathType, T![>]\n         }\n         struct TypeArgList {\n             T![::],"}]}