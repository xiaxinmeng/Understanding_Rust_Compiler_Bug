{"sha": "5645cd5b09fb6db849376872fd09fe31bf029b57", "node_id": "C_kwDOAAsO6NoAKDU2NDVjZDViMDlmYjZkYjg0OTM3Njg3MmZkMDlmZTMxYmYwMjliNTc", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-05T00:56:05Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-12T20:54:25Z"}, "message": "ADD - IntoDiagnostic conformance for TargetDataLayoutErrors in rustc_errors\n\nThis way we comply with the Coherence rule given that IntoDiagnostic trait is defined in rustc_errors, and almost all other crates depend on it.", "tree": {"sha": "548ca6c228918ea07bba705d0b4a6b702f68c03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548ca6c228918ea07bba705d0b4a6b702f68c03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5645cd5b09fb6db849376872fd09fe31bf029b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5645cd5b09fb6db849376872fd09fe31bf029b57", "html_url": "https://github.com/rust-lang/rust/commit/5645cd5b09fb6db849376872fd09fe31bf029b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5645cd5b09fb6db849376872fd09fe31bf029b57/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0983a9aac889d16722a12602ac678051e62c3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0983a9aac889d16722a12602ac678051e62c3fb", "html_url": "https://github.com/rust-lang/rust/commit/c0983a9aac889d16722a12602ac678051e62c3fb"}], "stats": {"total": 142, "additions": 70, "deletions": 72}, "files": [{"sha": "429bdd2777f912db3e7d3d57a17a1ca7074207fc", "filename": "compiler/rustc_error_messages/locales/en-US/errors.ftl", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -0,0 +1,13 @@\n+errors_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n+\n+errors_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n+\n+errors_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n+\n+errors_target_invalid_bits_size = {$err}"}, {"sha": "47127ea8e9ce8a5055fe2e6714c05cdbcf2bb10e", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -39,20 +39,6 @@ session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination`\n \n session_unsupported_dwarf_version = requested DWARF version {$dwarf_version} is greater than 5\n \n-session_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n-\n-session_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n-\n-session_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n-\n-session_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n-\n-session_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n-\n-session_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n-\n-session_target_invalid_bits_size = {$err}\n-\n session_target_stack_protector_not_supported = `-Z stack-protector={$stack_protector}` is not supported for target {$target_triple} and will be ignored\n \n session_split_debuginfo_unstable_platform = `-Csplit-debuginfo={$debuginfo}` is unstable on this platform"}, {"sha": "9465051dd103f5ea43b236d880081752d352f13c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -46,6 +46,7 @@ fluent_messages! {\n     compiletest => \"../locales/en-US/compiletest.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\",\n     driver => \"../locales/en-US/driver.ftl\",\n+    errors => \"../locales/en-US/errors.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n     hir_analysis => \"../locales/en-US/hir_analysis.ftl\",\n     infer => \"../locales/en-US/infer.ftl\","}, {"sha": "2a1a5d5afb049e6d07a5572fc3b5b6828b7492af", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -0,0 +1,53 @@\n+use crate::{fluent, DiagnosticBuilder, Handler, IntoDiagnostic};\n+use rustc_target::abi::TargetDataLayoutErrors;\n+\n+impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n+        let mut diag;\n+        match self {\n+            TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_address_space);\n+                diag.set_arg(\"addr_space\", addr_space);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_bits);\n+                diag.set_arg(\"kind\", kind);\n+                diag.set_arg(\"bit\", bit);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::MissingAlignment { cause } => {\n+                diag = handler.struct_fatal(fluent::errors::target_missing_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n+                diag = handler.struct_fatal(fluent::errors::target_inconsistent_architecture);\n+                diag.set_arg(\"dl\", dl);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n+                diag = handler.struct_fatal(fluent::errors::target_inconsistent_pointer_width);\n+                diag.set_arg(\"pointer_size\", pointer_size);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBitsSize { err } => {\n+                diag = handler.struct_fatal(fluent::errors::target_invalid_bits_size);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+        }\n+    }\n+}"}, {"sha": "955e85c3616b71ceaa6f4e051c982689853d208a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -51,6 +51,7 @@ use termcolor::{Color, ColorSpec};\n pub mod annotate_snippet_emitter_writer;\n mod diagnostic;\n mod diagnostic_builder;\n+mod diagnostic_impls;\n pub mod emitter;\n pub mod json;\n mod lock;"}, {"sha": "9ea54b69f47b003ba282fd6c83a92920d71cb3a3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -56,7 +56,6 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::cstore::CrateStoreDyn;\n-use rustc_session::errors::TargetDataLayoutErrorsWrapper;\n use rustc_session::lint::Lint;\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1249,7 +1248,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n+            s.emit_fatal(err);\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "f2ee52262adeea43b7cb3bdf3935370509efe3d3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -3,7 +3,6 @@\n \n pub use crate::options::*;\n \n-use crate::errors::TargetDataLayoutErrorsWrapper;\n use crate::search_paths::SearchPath;\n use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n@@ -900,7 +899,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.emit_fatal(TargetDataLayoutErrorsWrapper(err));\n+        sess.emit_fatal(err);\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "d12796f289e96ad0e328c297cd1ef5822bb2933c", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5645cd5b09fb6db849376872fd09fe31bf029b57/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=5645cd5b09fb6db849376872fd09fe31bf029b57", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::{\n };\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n-use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n \n #[derive(Diagnostic)]\n@@ -47,59 +46,6 @@ pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-pub struct TargetDataLayoutErrorsWrapper<'a>(pub TargetDataLayoutErrors<'a>);\n-\n-impl IntoDiagnostic<'_, !> for TargetDataLayoutErrorsWrapper<'_> {\n-    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n-        let mut diag;\n-        match self.0 {\n-            TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_address_space);\n-                diag.set_arg(\"addr_space\", addr_space);\n-                diag.set_arg(\"cause\", cause);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_bits);\n-                diag.set_arg(\"kind\", kind);\n-                diag.set_arg(\"bit\", bit);\n-                diag.set_arg(\"cause\", cause);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-            TargetDataLayoutErrors::MissingAlignment { cause } => {\n-                diag = handler.struct_fatal(fluent::session::target_missing_alignment);\n-                diag.set_arg(\"cause\", cause);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_alignment);\n-                diag.set_arg(\"cause\", cause);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n-                diag = handler.struct_fatal(fluent::session::target_inconsistent_architecture);\n-                diag.set_arg(\"dl\", dl);\n-                diag.set_arg(\"target\", target);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n-                diag = handler.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n-                diag.set_arg(\"pointer_size\", pointer_size);\n-                diag.set_arg(\"target\", target);\n-                diag\n-            }\n-            TargetDataLayoutErrors::InvalidBitsSize { err } => {\n-                diag = handler.struct_fatal(fluent::session::target_invalid_bits_size);\n-                diag.set_arg(\"err\", err);\n-                diag\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(session::not_circumvent_feature)]\n pub struct NotCircumventFeature;"}]}