{"sha": "6d620843f62b6cf3182528ffcaa877eba461bfbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNjIwODQzZjYyYjZjZjMxODI1MjhmZmNhYTg3N2ViYTQ2MWJmYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-10T11:04:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-10T11:04:51Z"}, "message": "Auto merge of #36341 - sagebind:thread_id, r=alexcrichton\n\nAdd ThreadId for comparing threads\n\nThis adds the capability to store and compare threads with the current calling thread via a new struct, `std::thread::ThreadId`. Addresses the need outlined in issue #21507.\n\nThis avoids the need to add any special checks to the existing thread structs and does not rely on the system to provide an identifier for a thread, since it seems that this approach is unreliable and undesirable. Instead, this simply uses a lazily-created, thread-local `usize` whose value is copied from a global atomic counter. The code should be simple enough that it should be as much reliable as the `#[thread_local]` attribute it uses (however much that is).\n\n`ThreadId`s can be compared directly for equality and have copy semantics.\n\nAlso see these other attempts:\n- rust-lang/rust#29457\n- rust-lang/rust#29448\n- rust-lang/rust#29447\n\nAnd this in the RFC repo: rust-lang/rfcs#1435", "tree": {"sha": "0556b5246e14a08e21735c1942854b23b7c819c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0556b5246e14a08e21735c1942854b23b7c819c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d620843f62b6cf3182528ffcaa877eba461bfbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d620843f62b6cf3182528ffcaa877eba461bfbb", "html_url": "https://github.com/rust-lang/rust/commit/6d620843f62b6cf3182528ffcaa877eba461bfbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d620843f62b6cf3182528ffcaa877eba461bfbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bfb1aba9d089a0464c03b3841e889c6ee7c4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bfb1aba9d089a0464c03b3841e889c6ee7c4f1", "html_url": "https://github.com/rust-lang/rust/commit/a7bfb1aba9d089a0464c03b3841e889c6ee7c4f1"}, {"sha": "032bffa5b8ae6c3977884c4e10fd6ab6a5dc5ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/032bffa5b8ae6c3977884c4e10fd6ab6a5dc5ef6", "html_url": "https://github.com/rust-lang/rust/commit/032bffa5b8ae6c3977884c4e10fd6ab6a5dc5ef6"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "150482e4af458456965992117273493227dea25f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6d620843f62b6cf3182528ffcaa877eba461bfbb/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d620843f62b6cf3182528ffcaa877eba461bfbb/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=6d620843f62b6cf3182528ffcaa877eba461bfbb", "patch": "@@ -166,6 +166,7 @@ use panicking;\n use str;\n use sync::{Mutex, Condvar, Arc};\n use sys::thread as imp;\n+use sys_common::mutex;\n use sys_common::thread_info;\n use sys_common::util;\n use sys_common::{AsInner, IntoInner};\n@@ -524,13 +525,53 @@ pub fn park_timeout(dur: Duration) {\n     *guard = false;\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// ThreadId\n+////////////////////////////////////////////////////////////////////////////////\n+\n+/// A unique identifier for a running thread.\n+///\n+/// A `ThreadId` is an opaque object that has a unique value for each thread\n+/// that creates one. `ThreadId`s do not correspond to a thread's system-\n+/// designated identifier.\n+#[unstable(feature = \"thread_id\", issue = \"21507\")]\n+#[derive(Eq, PartialEq, Copy, Clone)]\n+pub struct ThreadId(u64);\n+\n+impl ThreadId {\n+    // Generate a new unique thread ID.\n+    fn new() -> ThreadId {\n+        static GUARD: mutex::Mutex = mutex::Mutex::new();\n+        static mut COUNTER: u64 = 0;\n+\n+        unsafe {\n+            GUARD.lock();\n+\n+            // If we somehow use up all our bits, panic so that we're not\n+            // covering up subtle bugs of IDs being reused.\n+            if COUNTER == ::u64::MAX {\n+                GUARD.unlock();\n+                panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n+            }\n+\n+            let id = COUNTER;\n+            COUNTER += 1;\n+\n+            GUARD.unlock();\n+\n+            ThreadId(id)\n+        }\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Thread\n ////////////////////////////////////////////////////////////////////////////////\n \n /// The internal representation of a `Thread` handle\n struct Inner {\n     name: Option<CString>,      // Guaranteed to be UTF-8\n+    id: ThreadId,\n     lock: Mutex<bool>,          // true when there is a buffered unpark\n     cvar: Condvar,\n }\n@@ -551,6 +592,7 @@ impl Thread {\n         Thread {\n             inner: Arc::new(Inner {\n                 name: cname,\n+                id: ThreadId::new(),\n                 lock: Mutex::new(false),\n                 cvar: Condvar::new(),\n             })\n@@ -569,6 +611,12 @@ impl Thread {\n         }\n     }\n \n+    /// Gets the thread's unique identifier.\n+    #[unstable(feature = \"thread_id\", issue = \"21507\")]\n+    pub fn id(&self) -> ThreadId {\n+        self.inner.id\n+    }\n+\n     /// Gets the thread's name.\n     ///\n     /// # Examples\n@@ -977,6 +1025,17 @@ mod tests {\n         thread::sleep(Duration::from_millis(2));\n     }\n \n+    #[test]\n+    fn test_thread_id_equal() {\n+        assert!(thread::current().id() == thread::current().id());\n+    }\n+\n+    #[test]\n+    fn test_thread_id_not_equal() {\n+        let spawned_id = thread::spawn(|| thread::current().id()).join().unwrap();\n+        assert!(thread::current().id() != spawned_id);\n+    }\n+\n     // NOTE: the corresponding test for stderr is in run-pass/thread-stderr, due\n     // to the test harness apparently interfering with stderr configuration.\n }"}]}