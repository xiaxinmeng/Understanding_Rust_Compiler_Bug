{"sha": "e7a20c96b107f54651b83a67e9ea1925eb473708", "node_id": "C_kwDOAAsO6NoAKGU3YTIwYzk2YjEwN2Y1NDY1MWI4M2E2N2U5ZWExOTI1ZWI0NzM3MDg", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-11-13T13:50:13Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-11-13T13:50:13Z"}, "message": "Delete rustdoc::doctree\n\nSigned-off-by: hi-rustin <rustin.liu@gmail.com>", "tree": {"sha": "ea3f10150d72f0ec8332897d10744c9fd71196d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea3f10150d72f0ec8332897d10744c9fd71196d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a20c96b107f54651b83a67e9ea1925eb473708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a20c96b107f54651b83a67e9ea1925eb473708", "html_url": "https://github.com/rust-lang/rust/commit/e7a20c96b107f54651b83a67e9ea1925eb473708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a20c96b107f54651b83a67e9ea1925eb473708/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e018ce194ab16125747220676dd8a20aecd5196", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e018ce194ab16125747220676dd8a20aecd5196", "html_url": "https://github.com/rust-lang/rust/commit/3e018ce194ab16125747220676dd8a20aecd5196"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "70401065689834baff8bce7b4e0aedd31c47ec68", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7a20c96b107f54651b83a67e9ea1925eb473708/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a20c96b107f54651b83a67e9ea1925eb473708/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e7a20c96b107f54651b83a67e9ea1925eb473708", "patch": "@@ -36,8 +36,8 @@ use std::hash::Hash;\n use std::{mem, vec};\n \n use crate::core::{self, DocContext, ImplTraitParam};\n-use crate::doctree;\n use crate::formats::item_type::ItemType;\n+use crate::visit_ast::Module as DocModule;\n \n use utils::*;\n \n@@ -54,7 +54,7 @@ crate trait Clean<T> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> T;\n }\n \n-impl Clean<Item> for doctree::Module<'_> {\n+impl Clean<Item> for DocModule<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let mut items: Vec<Item> = vec![];\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));"}, {"sha": "8f1e8f277c5fe8795a7a7d8ca98471cf3e8df29c", "filename": "src/librustdoc/doctree.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e018ce194ab16125747220676dd8a20aecd5196/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e018ce194ab16125747220676dd8a20aecd5196/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=3e018ce194ab16125747220676dd8a20aecd5196", "patch": "@@ -1,27 +0,0 @@\n-//! This module is used to store stuff from Rust's AST in a more convenient\n-//! manner (and with prettier names) before cleaning.\n-use rustc_middle::ty::TyCtxt;\n-use rustc_span::{self, Span, Symbol};\n-\n-use rustc_hir as hir;\n-\n-#[derive(Debug)]\n-crate struct Module<'hir> {\n-    crate name: Symbol,\n-    crate where_inner: Span,\n-    crate mods: Vec<Module<'hir>>,\n-    crate id: hir::HirId,\n-    // (item, renamed)\n-    crate items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>)>,\n-    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n-}\n-\n-impl Module<'hir> {\n-    crate fn new(name: Symbol, id: hir::HirId, where_inner: Span) -> Module<'hir> {\n-        Module { name, id, where_inner, mods: Vec::new(), items: Vec::new(), foreigns: Vec::new() }\n-    }\n-\n-    crate fn where_outer(&self, tcx: TyCtxt<'_>) -> Span {\n-        tcx.hir().span(self.id)\n-    }\n-}"}, {"sha": "b6311abb5c3e821f053aa79b1832fa3012bf716e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7a20c96b107f54651b83a67e9ea1925eb473708/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a20c96b107f54651b83a67e9ea1925eb473708/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e7a20c96b107f54651b83a67e9ea1925eb473708", "patch": "@@ -109,7 +109,6 @@ mod config;\n mod core;\n mod docfs;\n mod doctest;\n-mod doctree;\n mod error;\n mod externalfiles;\n mod fold;"}, {"sha": "379de080ffd4d8833fe14b80a3857d3d35a7bda6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e7a20c96b107f54651b83a67e9ea1925eb473708/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a20c96b107f54651b83a67e9ea1925eb473708/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e7a20c96b107f54651b83a67e9ea1925eb473708", "patch": "@@ -11,12 +11,35 @@ use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::Span;\n \n use std::mem;\n \n use crate::clean::{self, cfg::Cfg, AttributesExt, NestedAttributesExt};\n use crate::core;\n-use crate::doctree::*;\n+\n+/// This module is used to store stuff from Rust's AST in a more convenient\n+/// manner (and with prettier names) before cleaning.\n+#[derive(Debug)]\n+crate struct Module<'hir> {\n+    crate name: Symbol,\n+    crate where_inner: Span,\n+    crate mods: Vec<Module<'hir>>,\n+    crate id: hir::HirId,\n+    // (item, renamed)\n+    crate items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>)>,\n+    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n+}\n+\n+impl Module<'hir> {\n+    crate fn new(name: Symbol, id: hir::HirId, where_inner: Span) -> Module<'hir> {\n+        Module { name, id, where_inner, mods: Vec::new(), items: Vec::new(), foreigns: Vec::new() }\n+    }\n+\n+    crate fn where_outer(&self, tcx: TyCtxt<'_>) -> Span {\n+        tcx.hir().span(self.id)\n+    }\n+}\n \n // FIXME: Should this be replaced with tcx.def_path_str?\n fn def_id_to_path(tcx: TyCtxt<'_>, did: DefId) -> Vec<String> {"}]}