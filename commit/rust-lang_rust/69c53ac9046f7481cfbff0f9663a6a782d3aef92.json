{"sha": "69c53ac9046f7481cfbff0f9663a6a782d3aef92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YzUzYWM5MDQ2Zjc0ODFjZmJmZjBmOTY2M2E2YTc4MmQzYWVmOTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T17:53:00Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T05:02:34Z"}, "message": "Run Rustfix on librustc", "tree": {"sha": "c8bde5a11eb593fec84f0ab5fb748f70153f9987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8bde5a11eb593fec84f0ab5fb748f70153f9987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c53ac9046f7481cfbff0f9663a6a782d3aef92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c53ac9046f7481cfbff0f9663a6a782d3aef92", "html_url": "https://github.com/rust-lang/rust/commit/69c53ac9046f7481cfbff0f9663a6a782d3aef92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c53ac9046f7481cfbff0f9663a6a782d3aef92/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8af0f4c1f121263e55da29854208db0ae1fea54", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8af0f4c1f121263e55da29854208db0ae1fea54", "html_url": "https://github.com/rust-lang/rust/commit/e8af0f4c1f121263e55da29854208db0ae1fea54"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "e56333aba9be571c5d52c738a81909b291b87a17", "filename": "src/librustc/dep_graph/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fdep_graph%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fdep_graph%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdebug.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -54,7 +54,7 @@ pub struct EdgeFilter {\n }\n \n impl EdgeFilter {\n-    pub fn new(test: &str) -> Result<EdgeFilter, Box<Error>> {\n+    pub fn new(test: &str) -> Result<EdgeFilter, Box<dyn Error>> {\n         let parts: Vec<_> = test.split(\"->\").collect();\n         if parts.len() != 2 {\n             Err(format!(\"expected a filter like `a&b -> c&d`, not `{}`\", test).into())"}, {"sha": "fa745bf165577cc3de2d14e6f1b7e8877c61ced6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -80,13 +80,13 @@ pub struct LoweringContext<'a> {\n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n     sess: &'a Session,\n \n-    cstore: &'a CrateStore,\n+    cstore: &'a dyn CrateStore,\n \n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n     parent_def: Option<DefIndex>,\n-    resolver: &'a mut Resolver,\n+    resolver: &'a mut dyn Resolver,\n     name_map: FxHashMap<Ident, Name>,\n \n     /// The items being lowered are collected here.\n@@ -177,10 +177,10 @@ enum ImplTraitContext {\n }\n \n pub fn lower_crate(sess: &Session,\n-                   cstore: &CrateStore,\n+                   cstore: &dyn CrateStore,\n                    dep_graph: &DepGraph,\n                    krate: &Crate,\n-                   resolver: &mut Resolver)\n+                   resolver: &mut dyn Resolver)\n                    -> hir::Crate {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to"}, {"sha": "9bbda9d74479b7e060c545a5bc32ebec0dff59f3", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     pub(super) fn finalize_and_compute_crate_hash(self,\n                                                   crate_disambiguator: CrateDisambiguator,\n-                                                  cstore: &CrateStore,\n+                                                  cstore: &dyn CrateStore,\n                                                   codemap: &CodeMap,\n                                                   commandline_args_hash: u64)\n                                                   -> (Vec<MapEntry<'hir>>, Svh) {"}, {"sha": "cdd6395747865576a1f6d6d876587c05241bf2e4", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -26,7 +26,7 @@ pub struct DefCollector<'a> {\n     definitions: &'a mut Definitions,\n     parent_def: Option<DefIndex>,\n     expansion: Mark,\n-    pub visit_macro_invoc: Option<&'a mut FnMut(MacroInvocationData)>,\n+    pub visit_macro_invoc: Option<&'a mut dyn FnMut(MacroInvocationData)>,\n }\n \n pub struct MacroInvocationData {"}, {"sha": "b5a757564242cc9d7f2ca9891c20cb439da7a113", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -1137,7 +1137,7 @@ impl Named for TraitItem { fn name(&self) -> Name { self.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.name } }\n \n pub fn map_crate<'hir>(sess: &::session::Session,\n-                       cstore: &::middle::cstore::CrateStore,\n+                       cstore: &dyn ::middle::cstore::CrateStore,\n                        forest: &'hir mut Forest,\n                        definitions: &'hir Definitions)\n                        -> Map<'hir> {"}, {"sha": "ed8cea3eb65634abca355cd2fa49500692f4bbbf", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -62,7 +62,7 @@ pub trait PpAnn {\n \n pub struct NoAnn;\n impl PpAnn for NoAnn {}\n-pub const NO_ANN: &'static PpAnn = &NoAnn;\n+pub const NO_ANN: &'static dyn PpAnn = &NoAnn;\n \n impl PpAnn for hir::Crate {\n     fn nested(&self, state: &mut State, nested: Nested) -> io::Result<()> {\n@@ -83,7 +83,7 @@ pub struct State<'a> {\n     literals: Peekable<vec::IntoIter<comments::Literal>>,\n     cur_cmnt: usize,\n     boxes: Vec<pp::Breaks>,\n-    ann: &'a (PpAnn + 'a),\n+    ann: &'a (dyn PpAnn + 'a),\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n@@ -126,9 +126,9 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                        sess: &ParseSess,\n                        krate: &hir::Crate,\n                        filename: FileName,\n-                       input: &mut Read,\n-                       out: Box<Write + 'a>,\n-                       ann: &'a PpAnn,\n+                       input: &mut dyn Read,\n+                       out: Box<dyn Write + 'a>,\n+                       ann: &'a dyn PpAnn,\n                        is_expanded: bool)\n                        -> io::Result<()> {\n     let mut s = State::new_from_input(cm, sess, filename, input, out, ann, is_expanded);\n@@ -145,9 +145,9 @@ impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a CodeMap,\n                           sess: &ParseSess,\n                           filename: FileName,\n-                          input: &mut Read,\n-                          out: Box<Write + 'a>,\n-                          ann: &'a PpAnn,\n+                          input: &mut dyn Read,\n+                          out: Box<dyn Write + 'a>,\n+                          ann: &'a dyn PpAnn,\n                           is_expanded: bool)\n                           -> State<'a> {\n         let (cmnts, lits) = comments::gather_comments_and_literals(sess, filename, input);\n@@ -167,8 +167,8 @@ impl<'a> State<'a> {\n     }\n \n     pub fn new(cm: &'a CodeMap,\n-               out: Box<Write + 'a>,\n-               ann: &'a PpAnn,\n+               out: Box<dyn Write + 'a>,\n+               ann: &'a dyn PpAnn,\n                comments: Option<Vec<comments::Comment>>,\n                literals: Option<Vec<comments::Literal>>)\n                -> State<'a> {\n@@ -184,7 +184,7 @@ impl<'a> State<'a> {\n     }\n }\n \n-pub fn to_string<F>(ann: &PpAnn, f: F) -> String\n+pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n     where F: FnOnce(&mut State) -> io::Result<()>\n {\n     let mut wr = Vec::new();"}, {"sha": "4dcab6a04ee20bdbe814f07d4ea9048cb7512487", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -49,7 +49,7 @@ pub fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n pub struct StableHashingContext<'gcx> {\n     sess: &'gcx Session,\n     definitions: &'gcx Definitions,\n-    cstore: &'gcx CrateStore,\n+    cstore: &'gcx dyn CrateStore,\n     body_resolver: BodyResolver<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n@@ -88,7 +88,7 @@ impl<'gcx> StableHashingContext<'gcx> {\n     pub fn new(sess: &'gcx Session,\n                krate: &'gcx hir::Crate,\n                definitions: &'gcx Definitions,\n-               cstore: &'gcx CrateStore)\n+               cstore: &'gcx dyn CrateStore)\n                -> Self {\n         let hash_spans_initial = !sess.opts.debugging_opts.incremental_ignore_spans;\n "}, {"sha": "ed89d1d2f57a54150165df2b490910a6e7779883", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -896,7 +896,7 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n-    fn for_each_region(&self, f: &mut FnMut(ty::Region<'tcx>)) {\n+    fn for_each_region(&self, f: &mut dyn FnMut(ty::Region<'tcx>)) {\n         match self {\n             &VerifyBound::AnyRegion(ref rs) | &VerifyBound::AllRegions(ref rs) => for &r in rs {\n                 f(r);"}, {"sha": "affd02aa51868a3ae6e05b31650e937ce48a7d85", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -280,8 +280,8 @@ pub trait EarlyLintPass: LintPass {\n }\n \n /// A lint pass boxed up as a trait object.\n-pub type EarlyLintPassObject = Box<EarlyLintPass + 'static>;\n-pub type LateLintPassObject = Box<for<'a, 'tcx> LateLintPass<'a, 'tcx> + 'static>;\n+pub type EarlyLintPassObject = Box<dyn EarlyLintPass + 'static>;\n+pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + 'static>;\n \n /// Identifies a lint known to the compiler.\n #[derive(Clone, Copy, Debug)]"}, {"sha": "bdb5ad525a75c7fa75ba38a6491c739f1845d820", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -225,10 +225,10 @@ pub struct ExternBodyNestedBodies {\n /// (it'd break incremental compilation) and should only be called pre-HIR (e.g.\n /// during resolve)\n pub trait CrateStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<Any>;\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>;\n \n     // access to the metadata loader\n-    fn metadata_loader(&self) -> &MetadataLoader;\n+    fn metadata_loader(&self) -> &dyn MetadataLoader;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -297,7 +297,7 @@ pub struct DummyCrateStore;\n \n #[allow(unused_variables)]\n impl CrateStore for DummyCrateStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<Any>\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n     fn visibility_untracked(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n@@ -351,7 +351,7 @@ impl CrateStore for DummyCrateStore {\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum> { bug!(\"postorder_cnums_untracked\") }\n \n     // access to the metadata loader\n-    fn metadata_loader(&self) -> &MetadataLoader { bug!(\"metadata_loader\") }\n+    fn metadata_loader(&self) -> &dyn MetadataLoader { bug!(\"metadata_loader\") }\n }\n \n pub trait CrateLoader {"}, {"sha": "e7055827c491fd6eb74f8252e118c07cc566aac2", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -319,7 +319,7 @@ fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<DependencyLis\n // also skip this step entirely.\n fn activate_injected_dep(injected: Option<CrateNum>,\n                          list: &mut DependencyList,\n-                         replaces_injected: &Fn(CrateNum) -> bool) {\n+                         replaces_injected: &dyn Fn(CrateNum) -> bool) {\n     for (i, slot) in list.iter().enumerate() {\n         let cnum = CrateNum::new(i + 1);\n         if !replaces_injected(cnum) {"}, {"sha": "28524678e9916bcc8f3bc35e590da1d9d6cfc7b1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -239,7 +239,7 @@ impl OverloadedCallType {\n // This is the code that actually walks the tree.\n pub struct ExprUseVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     mc: mc::MemCategorizationContext<'a, 'gcx, 'tcx>,\n-    delegate: &'a mut Delegate<'tcx>,\n+    delegate: &'a mut dyn Delegate<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -274,7 +274,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n     ///   `None` means that rvalues will be given more conservative lifetimes.\n     ///\n     /// See also `with_infer`, which is used *during* typeck.\n-    pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),\n+    pub fn new(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n-    pub fn with_infer(delegate: &'a mut (Delegate<'tcx>+'a),\n+    pub fn with_infer(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n                       infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n                       param_env: ty::ParamEnv<'tcx>,\n                       region_scope_tree: &'a region::ScopeTree,"}, {"sha": "d13b16dce89864f99ce699e5d1a842f213319dd1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -673,7 +673,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn write_vars<F>(&self,\n-                     wr: &mut Write,\n+                     wr: &mut dyn Write,\n                      ln: LiveNode,\n                      mut test: F)\n                      -> io::Result<()> where\n@@ -694,7 +694,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn ln_str(&self, ln: LiveNode) -> String {\n         let mut wr = Vec::new();\n         {\n-            let wr = &mut wr as &mut Write;\n+            let wr = &mut wr as &mut dyn Write;\n             write!(wr, \"[ln({:?}) of kind {:?} reads\", ln.get(), self.ir.lnk(ln));\n             self.write_vars(wr, ln, |idx| self.users[idx].reader);\n             write!(wr, \"  writes\");"}, {"sha": "f9ea544156ce3d661fb0ec8e9a0b012d8df76a9c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -35,7 +35,7 @@ impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n pub enum EvalErrorKind<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant\n-    MachineError(Box<Error>),\n+    MachineError(Box<dyn Error>),\n     FunctionPointerTyMismatch(FnSig<'tcx>, FnSig<'tcx>),\n     NoMirFor(String),\n     UnterminatedCString(MemoryPointer),\n@@ -248,7 +248,7 @@ impl<'tcx> Error for EvalError<'tcx> {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         use self::EvalErrorKind::*;\n         match self.kind {\n             MachineError(ref inner) => Some(&**inner),"}, {"sha": "f48006839441d7b83deff8c4693ca790214472b3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -341,7 +341,7 @@ macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [UNTRACKED]) => ({});\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [TRACKED]) => ({\n         if $sub_hashes.insert(stringify!($opt_name),\n-                              $opt_expr as &dep_tracking::DepTrackingHash).is_some() {\n+                              $opt_expr as &dyn dep_tracking::DepTrackingHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHash).is_some() {\n             bug!(\"Duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n         }\n     });\n@@ -1456,7 +1456,7 @@ pub enum OptionStability {\n }\n \n pub struct RustcOptGroup {\n-    pub apply: Box<Fn(&mut getopts::Options) -> &mut getopts::Options>,\n+    pub apply: Box<dyn Fn(&mut getopts::Options) -> &mut getopts::Options>,\n     pub name: &'static str,\n     pub stability: OptionStability,\n }\n@@ -2256,7 +2256,7 @@ mod dep_tracking {\n     }\n \n     // This is a stable hash because BTreeMap is a sorted container\n-    pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &DepTrackingHash>,\n+    pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &dyn DepTrackingHash>,\n                        hasher: &mut DefaultHasher,\n                        error_format: ErrorOutputType) {\n         for (key, sub_hash) in sub_hashes {"}, {"sha": "bd87a8f918ab37b767817917206466712dcb6df7", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -905,7 +905,7 @@ pub fn build_session_with_codemap(sopts: config::Options,\n                                   local_crate_source_file: Option<PathBuf>,\n                                   registry: errors::registry::Registry,\n                                   codemap: Lrc<codemap::CodeMap>,\n-                                  emitter_dest: Option<Box<Write + Send>>)\n+                                  emitter_dest: Option<Box<dyn Write + Send>>)\n                                   -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -924,7 +924,7 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n-    let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n+    let emitter: Box<dyn Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()),\n                      false, sopts.debugging_opts.teach)\n@@ -1123,7 +1123,7 @@ pub enum IncrCompSession {\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n-    let emitter: Box<Emitter> = match output {\n+    let emitter: Box<dyn Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n@@ -1138,7 +1138,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n-    let emitter: Box<Emitter> = match output {\n+    let emitter: Box<dyn Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }"}, {"sha": "b1d214206069939ee6e103e758b7181560967f6e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         item_name: ast::Name,\n                                         _impl_item_def_id: DefId,\n                                         trait_item_def_id: DefId,\n-                                        requirement: &fmt::Display)\n+                                        requirement: &dyn fmt::Display)\n                                         -> DiagnosticBuilder<'tcx>\n     {\n         let msg = \"impl has stricter requirements than trait\";"}, {"sha": "dbf15ad17079df2ebf9e85934fd011bbae8ee5a1", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -190,13 +190,13 @@ impl<'a, 'gcx, 'tcx> Children {\n         Ok(Inserted::BecameNewSibling(last_lint))\n     }\n \n-    fn iter_mut(&'a mut self) -> Box<Iterator<Item = &'a mut DefId> + 'a> {\n+    fn iter_mut(&'a mut self) -> Box<dyn Iterator<Item = &'a mut DefId> + 'a> {\n         let nonblanket = self.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter_mut());\n         Box::new(self.blanket_impls.iter_mut().chain(nonblanket))\n     }\n \n     fn filtered_mut(&'a mut self, sty: SimplifiedType)\n-                    -> Box<Iterator<Item = &'a mut DefId> + 'a> {\n+                    -> Box<dyn Iterator<Item = &'a mut DefId> + 'a> {\n         let nonblanket = self.nonblanket_impls.entry(sty).or_insert(vec![]).iter_mut();\n         Box::new(self.blanket_impls.iter_mut().chain(nonblanket))\n     }"}, {"sha": "d04c4771017318cda43639e45c5b80c7feeef420", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -799,7 +799,7 @@ pub struct GlobalCtxt<'tcx> {\n     global_arenas: &'tcx GlobalArenas<'tcx>,\n     global_interners: CtxtInterners<'tcx>,\n \n-    cstore: &'tcx CrateStore,\n+    cstore: &'tcx dyn CrateStore,\n \n     pub sess: &'tcx Session,\n \n@@ -883,7 +883,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// This is intended to only get used during the trans phase of the compiler\n     /// when satisfying the query for a particular codegen unit. Internally in\n     /// the query it'll send data along this channel to get processed later.\n-    pub tx_to_llvm_workers: mpsc::Sender<Box<Any + Send>>,\n+    pub tx_to_llvm_workers: mpsc::Sender<Box<dyn Any + Send>>,\n \n     output_filenames: Arc<OutputFilenames>,\n }\n@@ -1131,15 +1131,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n-                                  cstore: &'tcx CrateStore,\n+                                  cstore: &'tcx dyn CrateStore,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n                                   arenas: &'tcx AllArenas<'tcx>,\n                                   resolutions: ty::Resolutions,\n                                   hir: hir_map::Map<'tcx>,\n                                   on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n                                   crate_name: &str,\n-                                  tx: mpsc::Sender<Box<Any + Send>>,\n+                                  tx: mpsc::Sender<Box<dyn Any + Send>>,\n                                   output_filenames: &OutputFilenames,\n                                   f: F) -> R\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n@@ -1312,7 +1312,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     // Note that this is *untracked* and should only be used within the query\n     // system if the result is otherwise tracked through queries\n-    pub fn crate_data_as_rc_any(self, cnum: CrateNum) -> Lrc<Any> {\n+    pub fn crate_data_as_rc_any(self, cnum: CrateNum) -> Lrc<dyn Any> {\n         self.cstore.crate_data_as_rc_any(cnum)\n     }\n "}, {"sha": "4cc7406af721e8760f56a6d8f8274efb99c17463", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -277,7 +277,7 @@ pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     skipped_regions: &'a mut bool,\n     current_depth: u32,\n-    fld_r: &'a mut (FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx> + 'a),\n+    fld_r: &'a mut (dyn FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx> + 'a),\n }\n \n impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n@@ -330,7 +330,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> {\n struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     current_depth: u32,\n-    fld_r: &'a mut (FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+    fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n     map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n }\n "}, {"sha": "47ad7cbcb56f7087bc02f5a7c2f6a3e54ae585f1", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn calculate_dtor(\n         self,\n         adt_did: DefId,\n-        validate: &mut FnMut(Self, DefId) -> Result<(), ErrorReported>\n+        validate: &mut dyn FnMut(Self, DefId) -> Result<(), ErrorReported>\n     ) -> Option<ty::Destructor> {\n         let drop_trait = if let Some(def_id) = self.lang_items().drop_trait() {\n             def_id"}, {"sha": "bdb120ea59c8a9985d7ce9d91218e3bd04503223", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c53ac9046f7481cfbff0f9663a6a782d3aef92/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=69c53ac9046f7481cfbff0f9663a6a782d3aef92", "patch": "@@ -38,7 +38,7 @@ pub struct ErrorReported;\n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n \n lazy_static! {\n-    static ref DEFAULT_HOOK: Box<Fn(&panic::PanicInfo) + Sync + Send + 'static> = {\n+    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo) + Sync + Send + 'static> = {\n         let hook = panic::take_hook();\n         panic::set_hook(Box::new(panic_hook));\n         hook"}]}