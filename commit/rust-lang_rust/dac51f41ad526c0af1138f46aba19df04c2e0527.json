{"sha": "dac51f41ad526c0af1138f46aba19df04c2e0527", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzUxZjQxYWQ1MjZjMGFmMTEzOGY0NmFiYTE5ZGYwNGMyZTA1Mjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-13T23:48:29Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:20:45Z"}, "message": "various small fixes and tracing", "tree": {"sha": "1bb3079b58803a57d985059b4f3b1545d0b7b688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb3079b58803a57d985059b4f3b1545d0b7b688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac51f41ad526c0af1138f46aba19df04c2e0527", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/10ACgkQpp+NIls6\n19lAOA/7BR4sLBfNErQkH/GK0hB3zcgw4OdgutgbgQ8/u52Zm8C4uyvHTD9omeEC\nBYo/jNUNHF1nm4twgLTj06HD9Wpuu5uKGgZ9Lz6FQNmeLCaAcsSEdYNtwFDR6Q2q\n7F81dLsd3wCzJf1EeyUMbTKmTp3SUOdbA7lR362LNlFeer6gyBIQQvV1nWF8Vrtg\nNXPv48v8+pUy4gZFzwy2rqH6wfYaG5lcaP7gpl9UOgQuGefcJx+BR1bAz9D05du5\nNvbsv3ZLNRH8UALPP2VUjHA6KQq+AbdaiYiu488z3pT29ohbA0NM9pqlr9Gost4D\nPQohG579xU8u5ByHwX4TJIB4D/q01zRScmrIeAQ18BZUYlVcSCu+azlcuaaUoGBf\nzEPHbs2mhkyrdiCwoi7tG6Q2Y/wCM65w/qOnlsY51cPsn37RtA+FkVzhJfNANShP\n6yNga/EbhYao4gQonm5gVImoNQTV9Uhh6y03Q0dd4kXmuZrjrvVCUy/M8iekGH+V\nAg88BWtrLcc1i+j4fTAOQAeANawb9SKLwHq1+ZQOaBNxD73TGt9qlM/tdoJg0sBD\nEPVF6Bzux4BavQlehW2J55Pv4csP3xvKn3EO75Ndmgmfju2jlqCA3j3tJLgFFyhO\nHJVrtclatlnp4mNF8ZE6W1mIlXko/D+awsvXYO2/xSkemy1PGZU=\n=cJDI\n-----END PGP SIGNATURE-----", "payload": "tree 1bb3079b58803a57d985059b4f3b1545d0b7b688\nparent 046675d73569ab6a62f4b8b656ff5f2034107946\nauthor Ralf Jung <post@ralfj.de> 1499989709 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970845 +0200\n\nvarious small fixes and tracing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac51f41ad526c0af1138f46aba19df04c2e0527", "html_url": "https://github.com/rust-lang/rust/commit/dac51f41ad526c0af1138f46aba19df04c2e0527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac51f41ad526c0af1138f46aba19df04c2e0527/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046675d73569ab6a62f4b8b656ff5f2034107946", "url": "https://api.github.com/repos/rust-lang/rust/commits/046675d73569ab6a62f4b8b656ff5f2034107946", "html_url": "https://github.com/rust-lang/rust/commit/046675d73569ab6a62f4b8b656ff5f2034107946"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "b8be02bcba46e81cdf7759d53175251dc64a63e0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dac51f41ad526c0af1138f46aba19df04c2e0527/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac51f41ad526c0af1138f46aba19df04c2e0527/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=dac51f41ad526c0af1138f46aba19df04c2e0527", "patch": "@@ -363,7 +363,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if alloc.kind != kind {\n             return Err(EvalError::DeallocatedWrongMemoryKind(alloc.kind, kind));\n         }\n-        if !alloc.locks.is_empty() {\n+        if alloc.locks.values().any(|locks| !locks.is_empty()) {\n             return Err(EvalError::DeallocatedLockedMemory);\n         }\n         if let Some((size, align)) = size_and_align {\n@@ -524,7 +524,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     /// Acquire the lock for the given lifetime\n     pub(crate) fn acquire_lock(&mut self, ptr: MemoryPointer, len: u64, region: Option<CodeExtent>, kind: AccessKind) -> EvalResult<'tcx> {\n-        trace!(\"Acquiring {:?} lock at {:?}, size {}\", kind, ptr, len);\n+        trace!(\"Acquiring {:?} lock at {:?}, size {} for region {:?}\", kind, ptr, len, region);\n         if len == 0 {\n             return Ok(());\n         }\n@@ -536,9 +536,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n-    /// Release a lock prematurely\n+    /// Release a write lock prematurely\n     pub(crate) fn release_lock_until(&mut self, ptr: MemoryPointer, len: u64, release_until: Option<CodeExtent>) -> EvalResult<'tcx> {\n-        // TODO: More tracing.\n+        trace!(\"Releasing write lock at {:?}, size {} until {:?}\", ptr, len, release_until);\n         // Make sure there are no read locks and no *other* write locks here\n         if let Err(_) = self.check_locks(ptr, len, AccessKind::Write) {\n             return Err(EvalError::InvalidMemoryLockRelease { ptr, len });\n@@ -565,7 +565,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<CodeExtent>) {\n-        // TODO: More tracing.\n+        trace!(\"Releasing locks that expire at {:?}\", ending_region);\n         let cur_frame = self.cur_frame;\n         let has_ended =  |lock: &LockInfo| -> bool {\n             if lock.lifetime.frame != cur_frame {"}, {"sha": "4f7eb8eb6cc1c45f089638716f21cde9db6df8d7", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dac51f41ad526c0af1138f46aba19df04c2e0527/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac51f41ad526c0af1138f46aba19df04c2e0527/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=dac51f41ad526c0af1138f46aba19df04c2e0527", "patch": "@@ -7,8 +7,9 @@ use rustc::hir;\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir;\n use rustc::traits::Reveal;\n+use rustc::ty;\n use rustc::ty::layout::Layout;\n-use rustc::ty::{subst, self};\n+use rustc::ty::subst::{Subst, Substs};\n \n use error::{EvalResult, EvalError};\n use eval_context::{EvalContext, StackPopCleanup};\n@@ -133,12 +134,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // Validity checks.\n             Validate(ref op, ref lvalues) => {\n                 for operand in lvalues {\n+                    // We need to monomorphize ty *without* erasing lifetimes\n+                    let ty = operand.ty.subst(self.tcx, self.substs());\n+                    // TODO: do we have to self.tcx.normalize_associated_type(&{ty}) ?  That however seems to erase lifetimes.\n                     let lvalue = self.eval_lvalue(&operand.lval)?;\n-                    self.validate(lvalue, operand.ty, ValidationCtx::new(*op))?;\n+                    self.validate(lvalue, ty, ValidationCtx::new(*op))?;\n                 }\n             }\n-\n-            // Just a borrowck thing\n             EndRegion(ce) => {\n                 self.memory.locks_lifetime_ended(Some(ce));\n             }\n@@ -180,7 +182,7 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n     fn global_item(\n         &mut self,\n         def_id: DefId,\n-        substs: &'tcx subst::Substs<'tcx>,\n+        substs: &'tcx Substs<'tcx>,\n         span: Span,\n         mutability: Mutability,\n     ) {"}]}