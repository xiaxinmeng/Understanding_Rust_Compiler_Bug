{"sha": "4afe31030e6e7430955f8a9cbff2201f848ebcc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZmUzMTAzMGU2ZTc0MzA5NTVmOGE5Y2JmZjIyMDFmODQ4ZWJjYzA=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-07-02T21:48:10Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-07-02T21:48:10Z"}, "message": "Fix broken link by adding comma", "tree": {"sha": "421341c528ec39329e7e9691b28926a4fb0dcd2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421341c528ec39329e7e9691b28926a4fb0dcd2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4afe31030e6e7430955f8a9cbff2201f848ebcc0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4afe31030e6e7430955f8a9cbff2201f848ebcc0", "html_url": "https://github.com/rust-lang/rust/commit/4afe31030e6e7430955f8a9cbff2201f848ebcc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4afe31030e6e7430955f8a9cbff2201f848ebcc0/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169c988d09a9d4e46de2b7fead9489e94964c7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/169c988d09a9d4e46de2b7fead9489e94964c7c7", "html_url": "https://github.com/rust-lang/rust/commit/169c988d09a9d4e46de2b7fead9489e94964c7c7"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "80cc773ef4ebd7c15fe3c4cff856bc16315a9a5d", "filename": "src/doc/rust.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4afe31030e6e7430955f8a9cbff2201f848ebcc0/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4afe31030e6e7430955f8a9cbff2201f848ebcc0/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=4afe31030e6e7430955f8a9cbff2201f848ebcc0", "patch": "@@ -2541,7 +2541,7 @@ A temporary's lifetime equals the largest lifetime of any reference that points\n #### Moved and copied types\n \n When a [local variable](#memory-slots) is used\n-as an [rvalue](#lvalues-rvalues-and-temporaries)\n+as an [rvalue](#lvalues,-rvalues-and-temporaries)\n the variable will either be moved or copied, depending on its type.\n For types that contain [owning pointers](#pointer-types)\n or values that implement the special trait `Drop`,\n@@ -2564,7 +2564,7 @@ string, boolean value, or the unit value.\n ### Path expressions\n \n A [path](#paths) used as an expression context denotes either a local variable or an item.\n-Path expressions are [lvalues](#lvalues-rvalues-and-temporaries).\n+Path expressions are [lvalues](#lvalues,-rvalues-and-temporaries).\n \n ### Tuple expressions\n \n@@ -2677,7 +2677,7 @@ foo().x;\n (Struct {a: 10, b: 20}).a;\n ~~~~\n \n-A field access is an [lvalue](#lvalues-rvalues-and-temporaries) referring to the value of that field.\n+A field access is an [lvalue](#lvalues,-rvalues-and-temporaries) referring to the value of that field.\n When the type providing the field inherits mutabilty, it can be [assigned](#assignment-expressions) to.\n \n Also, if the type of the expression to the left of the dot is a pointer,\n@@ -2713,7 +2713,7 @@ idx_expr : expr '[' expr ']' ;\n \n [Vector](#vector-types)-typed expressions can be indexed by writing a\n square-bracket-enclosed expression (the index) after them. When the\n-vector is mutable, the resulting [lvalue](#lvalues-rvalues-and-temporaries) can be assigned to.\n+vector is mutable, the resulting [lvalue](#lvalues,-rvalues-and-temporaries) can be assigned to.\n \n Indices are zero-based, and may be of any integral type. Vector access\n is bounds-checked at run-time. When the check fails, it will put the\n@@ -2739,7 +2739,7 @@ before the expression they apply to.\n   : Negation. May only be applied to numeric types.\n * `*`\n   : Dereference. When applied to a [pointer](#pointer-types) it denotes the pointed-to location.\n-    For pointers to mutable locations, the resulting [lvalue](#lvalues-rvalues-and-temporaries) can be assigned to.\n+    For pointers to mutable locations, the resulting [lvalue](#lvalues,-rvalues-and-temporaries) can be assigned to.\n     On non-pointer types, it calls the `deref` method of the `std::ops::Deref` trait, or the\n     `deref_mut` method of the `std::ops::DerefMut` trait (if implemented by the type and required\n     for an outer expression that will or could mutate the dereference), and produces the\n@@ -2874,8 +2874,8 @@ fn avg(v: &[f64]) -> f64 {\n \n #### Assignment expressions\n \n-An _assignment expression_ consists of an [lvalue](#lvalues-rvalues-and-temporaries) expression followed by an\n-equals sign (`=`) and an [rvalue](#lvalues-rvalues-and-temporaries) expression.\n+An _assignment expression_ consists of an [lvalue](#lvalues,-rvalues-and-temporaries) expression followed by an\n+equals sign (`=`) and an [rvalue](#lvalues,-rvalues-and-temporaries) expression.\n \n Evaluating an assignment expression [either copies or moves](#moved-and-copied-types) its right-hand operand to its left-hand operand.\n \n@@ -3188,7 +3188,7 @@ fn main() {\n ~~~~\n \n A `match` behaves differently depending on whether or not the head expression\n-is an [lvalue or an rvalue](#lvalues-rvalues-and-temporaries).\n+is an [lvalue or an rvalue](#lvalues,-rvalues-and-temporaries).\n If the head expression is an rvalue, it is\n first evaluated into a temporary location, and the resulting value\n is sequentially compared to the patterns in the arms until a match\n@@ -3552,7 +3552,7 @@ There are four varieties of pointer in Rust:\n   : These point to memory _owned by some other value_.\n     References arise by (automatic) conversion from owning pointers, managed pointers,\n     or by applying the borrowing operator `&` to some other value,\n-    including [lvalues, rvalues or temporaries](#lvalues-rvalues-and-temporaries).\n+    including [lvalues, rvalues or temporaries](#lvalues,-rvalues-and-temporaries).\n     References are written `&content`, or in some cases `&'f content` for some lifetime-variable `f`,\n     for example `&int` means a reference to an integer.\n     Copying a reference is a \"shallow\" operation:\n@@ -3854,7 +3854,7 @@ references to any boxes; the remainder of its heap is immediately freed.\n A task's stack contains slots.\n \n A _slot_ is a component of a stack frame, either a function parameter,\n-a [temporary](#lvalues-rvalues-and-temporaries), or a local variable.\n+a [temporary](#lvalues,-rvalues-and-temporaries), or a local variable.\n \n A _local variable_ (or *stack-local* allocation) holds a value directly,\n allocated within the stack's memory. The value is a part of the stack frame."}]}