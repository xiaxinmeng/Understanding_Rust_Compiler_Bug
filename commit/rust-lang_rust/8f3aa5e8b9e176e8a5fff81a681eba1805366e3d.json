{"sha": "8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmM2FhNWU4YjllMTc2ZThhNWZmZjgxYTY4MWViYTE4MDUzNjZlM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-06T00:14:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-06T00:14:41Z"}, "message": "Auto merge of #88493 - chenyukang:fix-duplicated-diagnostic, r=estebank\n\nFix #88256 remove duplicated diagnostics\n\nFix #88256", "tree": {"sha": "9aff1d58e6d28e96d4d10d8f9dbebf569f66faf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aff1d58e6d28e96d4d10d8f9dbebf569f66faf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "html_url": "https://github.com/rust-lang/rust/commit/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7849e3e9dda60e8ec826ee245c6b180e73911b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/7849e3e9dda60e8ec826ee245c6b180e73911b37", "html_url": "https://github.com/rust-lang/rust/commit/7849e3e9dda60e8ec826ee245c6b180e73911b37"}, {"sha": "ca27f03ca8862344567dcc1e6ec01f29442835fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca27f03ca8862344567dcc1e6ec01f29442835fa", "html_url": "https://github.com/rust-lang/rust/commit/ca27f03ca8862344567dcc1e6ec01f29442835fa"}], "stats": {"total": 124, "additions": 59, "deletions": 65}, "files": [{"sha": "550c1c43530df6090c08f33d5f711f213e641c21", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -9,9 +9,10 @@ use rustc_lint_defs::Applicability;\n use rustc_serialize::json::Json;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n \n #[must_use]\n-#[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n+#[derive(Clone, Debug, Encodable, Decodable)]\n pub struct Diagnostic {\n     pub level: Level,\n     pub message: Vec<(String, Style)>,\n@@ -24,6 +25,10 @@ pub struct Diagnostic {\n     /// as a sort key to sort a buffer of diagnostics.  By default, it is the primary span of\n     /// `span` if there is one.  Otherwise, it is `DUMMY_SP`.\n     pub sort_span: Span,\n+\n+    /// If diagnostic is from Lint, custom hash function ignores notes\n+    /// otherwise hash is based on the all the fields\n+    pub is_lint: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n@@ -91,6 +96,7 @@ impl Diagnostic {\n             children: vec![],\n             suggestions: vec![],\n             sort_span: DUMMY_SP,\n+            is_lint: false,\n         }\n     }\n \n@@ -558,6 +564,11 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn set_is_lint(&mut self) -> &mut Self {\n+        self.is_lint = true;\n+        self\n+    }\n+\n     pub fn code(&mut self, s: DiagnosticId) -> &mut Self {\n         self.code = Some(s);\n         self\n@@ -617,6 +628,42 @@ impl Diagnostic {\n         let sub = SubDiagnostic { level, message, span, render_span };\n         self.children.push(sub);\n     }\n+\n+    /// Fields used for Hash, and PartialEq trait\n+    fn keys(\n+        &self,\n+    ) -> (\n+        &Level,\n+        &Vec<(String, Style)>,\n+        &Option<DiagnosticId>,\n+        &MultiSpan,\n+        &Vec<CodeSuggestion>,\n+        Option<&Vec<SubDiagnostic>>,\n+    ) {\n+        (\n+            &self.level,\n+            &self.message,\n+            &self.code,\n+            &self.span,\n+            &self.suggestions,\n+            (if self.is_lint { None } else { Some(&self.children) }),\n+        )\n+    }\n+}\n+\n+impl Hash for Diagnostic {\n+    fn hash<H>(&self, state: &mut H)\n+    where\n+        H: Hasher,\n+    {\n+        self.keys().hash(state);\n+    }\n+}\n+\n+impl PartialEq for Diagnostic {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.keys() == other.keys()\n+    }\n }\n \n impl SubDiagnostic {"}, {"sha": "c498ce7dbe426aaed3a4396265d9fa61cd3255b5", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -242,6 +242,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         sp: S,\n         msg: &str,\n     ) -> &mut Self);\n+    forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n \n     /// See [`Diagnostic::multipart_suggestion()`].\n     pub fn multipart_suggestion("}, {"sha": "60cb78d902ee60f9dd49c6dab680907be6f2c758", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -192,6 +192,7 @@ impl<'a> LintDiagnosticBuilder<'a> {\n     /// Return the inner DiagnosticBuilder, first setting the primary message to `msg`.\n     pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a> {\n         self.0.set_primary_message(msg);\n+        self.0.set_is_lint();\n         self.0\n     }\n "}, {"sha": "c66037e9a73ae6d01acbe5e466208575ff956df7", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -21,8 +21,6 @@ fn forbid_first(num: i32) -> i32 {\n     #![deny(unused)]\n     //~^ ERROR: deny(unused) incompatible with previous forbid\n     //~| WARNING being phased out\n-    //~| ERROR: deny(unused) incompatible with previous forbid\n-    //~| WARNING being phased out\n     #![warn(unused)]\n     #![allow(unused)]\n "}, {"sha": "5093715decfc1925e96768f19644de41d785fe20", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -14,16 +14,5 @@ LL | #![forbid(forbidden_lint_groups)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error: deny(unused) incompatible with previous forbid\n-  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n-   |\n-LL |     #![forbid(unused)]\n-   |               ------ `forbid` level set here\n-LL |     #![deny(unused)]\n-   |             ^^^^^^ overruled by previous forbid\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "ba330258d111fff04c092114e60f2c60dde5c321", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -17,10 +17,9 @@\n #![forbid(unused, non_snake_case)]\n #![forbid(forbidden_lint_groups)]\n \n-#[allow(unused_variables)] //~ ERROR incompatible with previous\n+#[allow(unused_variables)]\n //~^ ERROR incompatible with previous\n //~| WARNING this was previously accepted by the compiler\n-//~| WARNING this was previously accepted by the compiler\n fn foo() {}\n \n #[allow(unused)] //~ ERROR incompatible with previous"}, {"sha": "7814573210548e291b541a967bd2097625438b21", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -16,7 +16,7 @@ LL | #![forbid(forbidden_lint_groups)]\n    = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error: allow(unused) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:26:9\n+  --> $DIR/outer-forbid.rs:25:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n@@ -28,26 +28,14 @@ LL | #[allow(unused)]\n    = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error[E0453]: allow(nonstandard_style) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:30:9\n+  --> $DIR/outer-forbid.rs:29:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |                   -------------- `forbid` level set here\n ...\n LL | #[allow(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n \n-error: allow(unused_variables) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:20:9\n-   |\n-LL | #![forbid(unused, non_snake_case)]\n-   |           ------ `forbid` level set here\n-...\n-LL | #[allow(unused_variables)]\n-   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "7752a8a6ff2b4094a3089d3295d77b4d2a44f597", "filename": "src/tools/clippy/tests/ui/match_same_arms.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms.stderr?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -106,24 +106,6 @@ LL |         1 => 2,\n    |         ^\n    = help: ...or consider changing the match arm bodies\n \n-error: this `match` has identical arm bodies\n-  --> $DIR/match_same_arms.rs:33:14\n-   |\n-LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n-   |              ^\n-   |\n-note: same as this\n-  --> $DIR/match_same_arms.rs:32:14\n-   |\n-LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n-   |              ^\n-help: consider refactoring into `2 | 3`\n-  --> $DIR/match_same_arms.rs:32:9\n-   |\n-LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n-   |         ^\n-   = help: ...or consider changing the match arm bodies\n-\n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:50:55\n    |\n@@ -142,5 +124,5 @@ LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ...or consider changing the match arm bodies\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "34f762bbb923648996cb56af20e84dba18b4fb47", "filename": "src/tools/clippy/tests/ui/modulo_one.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -46,12 +46,6 @@ LL |     const ONE: u32 = 1 * 1;\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/modulo_one.rs:13:22\n-   |\n-LL |     const ONE: u32 = 1 * 1;\n-   |                      ^^^^^\n-\n error: any number modulo 1 will be 0\n   --> $DIR/modulo_one.rs:17:5\n    |\n@@ -70,5 +64,5 @@ error: any number modulo -1 will panic/overflow or result in 0\n LL |     INT_MIN % NEG_ONE; // also caught by rustc\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "dd6f2f6641d678b14b1d401fac951d98ce43f913", "filename": "src/tools/clippy/tests/ui/suspicious_operation_groupings.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -6,12 +6,6 @@ LL |         self.x == other.y && self.y == other.y && self.z == other.z\n    |\n    = note: `-D clippy::suspicious-operation-groupings` implied by `-D warnings`\n \n-error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:14:9\n-   |\n-LL |         self.x == other.y && self.y == other.y && self.z == other.z\n-   |         ^^^^^^^^^^^^^^^^^ help: did you mean: `self.x == other.x`\n-\n error: this sequence of operators looks suspiciously like a bug\n   --> $DIR/suspicious_operation_groupings.rs:27:20\n    |\n@@ -162,5 +156,5 @@ error: this sequence of operators looks suspiciously like a bug\n LL |     -(if -s1.a < -s2.a && -s1.a < -s2.b { s1.c } else { s2.a })\n    |                           ^^^^^^^^^^^^^ help: did you mean: `-s1.b < -s2.b`\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "2965b0928aadaf751663bad5017ecfbf93101057", "filename": "src/tools/rustfmt/src/syntux/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3aa5e8b9e176e8a5fff81a681eba1805366e3d/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fsession.rs?ref=8f3aa5e8b9e176e8a5fff81a681eba1805366e3d", "patch": "@@ -311,6 +311,7 @@ mod tests {\n                 suggestions: vec![],\n                 span: span.unwrap_or_else(MultiSpan::new),\n                 sort_span: DUMMY_SP,\n+                is_lint: false,\n             }\n         }\n "}]}