{"sha": "cde0f94a5272a1c00ebe04fc44e19e9e687c3fda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZTBmOTRhNTI3MmExYzAwZWJlMDRmYzQ0ZTE5ZTllNjg3YzNmZGE=", "commit": {"author": {"name": "Daan Sprenkels", "email": "dsprenkels@gmail.com", "date": "2016-05-30T12:54:22Z"}, "committer": {"name": "Daan Sprenkels", "email": "dsprenkels@gmail.com", "date": "2016-05-30T16:31:01Z"}, "message": "librustc_resolve: make sure pattern def gets recorded if `resolve_path` returns `Err(true)`\n\nIn 1a374b8, (pr #33046) fixed the error reporting of a specific\ncase, but the change that was introduced did not make sure that\n`record_def` was called in all cases, which lead to an ICE in [1].\nThis change restores the original `else` case, but keeps the changes\nthat were committed in 1a374b8.\n\nThis commit fixes issue #33293.\n\n[1] `rustc::middle::mem_categorization::MemCategorizationContext::cat_pattern_`", "tree": {"sha": "1bf358b39be96c630dfe8e1f713c71aa3b4e6582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf358b39be96c630dfe8e1f713c71aa3b4e6582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde0f94a5272a1c00ebe04fc44e19e9e687c3fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde0f94a5272a1c00ebe04fc44e19e9e687c3fda", "html_url": "https://github.com/rust-lang/rust/commit/cde0f94a5272a1c00ebe04fc44e19e9e687c3fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde0f94a5272a1c00ebe04fc44e19e9e687c3fda/comments", "author": {"login": "dsprenkels", "id": 439973, "node_id": "MDQ6VXNlcjQzOTk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/439973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsprenkels", "html_url": "https://github.com/dsprenkels", "followers_url": "https://api.github.com/users/dsprenkels/followers", "following_url": "https://api.github.com/users/dsprenkels/following{/other_user}", "gists_url": "https://api.github.com/users/dsprenkels/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsprenkels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsprenkels/subscriptions", "organizations_url": "https://api.github.com/users/dsprenkels/orgs", "repos_url": "https://api.github.com/users/dsprenkels/repos", "events_url": "https://api.github.com/users/dsprenkels/events{/privacy}", "received_events_url": "https://api.github.com/users/dsprenkels/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dsprenkels", "id": 439973, "node_id": "MDQ6VXNlcjQzOTk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/439973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsprenkels", "html_url": "https://github.com/dsprenkels", "followers_url": "https://api.github.com/users/dsprenkels/followers", "following_url": "https://api.github.com/users/dsprenkels/following{/other_user}", "gists_url": "https://api.github.com/users/dsprenkels/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsprenkels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsprenkels/subscriptions", "organizations_url": "https://api.github.com/users/dsprenkels/orgs", "repos_url": "https://api.github.com/users/dsprenkels/repos", "events_url": "https://api.github.com/users/dsprenkels/events{/privacy}", "received_events_url": "https://api.github.com/users/dsprenkels/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3e8c7863b5af9c85f13ec546d7897359acd32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3e8c7863b5af9c85f13ec546d7897359acd32f", "html_url": "https://github.com/rust-lang/rust/commit/8f3e8c7863b5af9c85f13ec546d7897359acd32f"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "36053d3c4ffa78da45e937b69d55541f6b335a2a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cde0f94a5272a1c00ebe04fc44e19e9e687c3fda/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde0f94a5272a1c00ebe04fc44e19e9e687c3fda/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cde0f94a5272a1c00ebe04fc44e19e9e687c3fda", "patch": "@@ -2422,13 +2422,16 @@ impl<'a> Resolver<'a> {\n                                 }\n                             }\n                         }\n-                    } else if let Err(false) = self.resolve_path(pat_id, &path, 0, ValueNS) {\n-                        resolve_error(\n-                            self,\n-                            path.span,\n-                            ResolutionError::UnresolvedEnumVariantStructOrConst(\n-                                &path.segments.last().unwrap().identifier.name.as_str())\n-                        );\n+                    } else {\n+                        if let Err(false) = self.resolve_path(pat_id, &path, 0, ValueNS) {\n+                            // No error has been reported, so we need to do this ourselves.\n+                            resolve_error(\n+                                self,\n+                                path.span,\n+                                ResolutionError::UnresolvedEnumVariantStructOrConst(\n+                                    &path.segments.last().unwrap().identifier.name.as_str())\n+                            );\n+                        }\n                         self.record_def(pattern.id, err_path_resolution());\n                     }\n                     visit::walk_path(self, path);"}]}