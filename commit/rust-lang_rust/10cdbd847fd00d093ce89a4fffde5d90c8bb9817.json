{"sha": "10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "node_id": "C_kwDOAAsO6NoAKDEwY2RiZDg0N2ZkMDBkMDkzY2U4OWE0ZmZmZGU1ZDkwYzhiYjk4MTc", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-11-03T18:45:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-10-05T15:25:44Z"}, "message": "Make cfg implicitly imply doc(cfg)\n\nThis is only active when the `doc_cfg` feature is active.\n\nThe implicit cfg can be overridden via #[doc(cfg(...))], so e.g. to\nhide a #[cfg] you can use something like:\n\n```rust\n #[cfg(unix)]\n #[doc(cfg(all()))]\npub struct Unix;\n```\n\n(since `all()` is always true, it is never shown in the docs)", "tree": {"sha": "565637fa1346110af2b1b1aa415cd1d1b2fe025a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565637fa1346110af2b1b1aa415cd1d1b2fe025a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "html_url": "https://github.com/rust-lang/rust/commit/10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074f63648bd2368d5ca19aed02b5763a144e5d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/074f63648bd2368d5ca19aed02b5763a144e5d05", "html_url": "https://github.com/rust-lang/rust/commit/074f63648bd2368d5ca19aed02b5763a144e5d05"}], "stats": {"total": 101, "additions": 92, "deletions": 9}, "files": [{"sha": "39493f6edf8c2b2dd35a1b0299ccc88309a3b35d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -318,10 +318,10 @@ fn merge_attrs(\n             } else {\n                 Attributes::from_ast(&both, None)\n             },\n-            both.cfg(cx.sess()),\n+            both.cfg(cx.tcx),\n         )\n     } else {\n-        (old_attrs.clean(cx), old_attrs.cfg(cx.sess()))\n+        (old_attrs.clean(cx), old_attrs.cfg(cx.tcx))\n     }\n }\n "}, {"sha": "41bc30fd3989efa67b98940da01be72f728eb47c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -1973,7 +1973,7 @@ fn clean_extern_crate(\n         def_id: crate_def_id.into(),\n         visibility: krate.vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },\n-        cfg: attrs.cfg(cx.sess()),\n+        cfg: attrs.cfg(cx.tcx),\n     }]\n }\n "}, {"sha": "288644ff2969f263dea2e138c0ff320da8da45f9", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -421,7 +421,7 @@ impl Item {\n             kind,\n             box ast_attrs.clean(cx),\n             cx,\n-            ast_attrs.cfg(cx.sess()),\n+            ast_attrs.cfg(cx.tcx),\n         )\n     }\n \n@@ -747,7 +747,7 @@ crate trait AttributesExt {\n \n     fn other_attrs(&self) -> Vec<ast::Attribute>;\n \n-    fn cfg(&self, sess: &Session) -> Option<Arc<Cfg>>;\n+    fn cfg(&self, tcx: TyCtxt<'_>) -> Option<Arc<Cfg>>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n@@ -772,8 +772,52 @@ impl AttributesExt for [ast::Attribute] {\n         self.iter().filter(|attr| attr.doc_str().is_none()).cloned().collect()\n     }\n \n-    fn cfg(&self, sess: &Session) -> Option<Arc<Cfg>> {\n-        let mut cfg = Cfg::True;\n+    fn cfg(&self, tcx: TyCtxt<'_>) -> Option<Arc<Cfg>> {\n+        let sess = tcx.sess;\n+        let doc_cfg_active = tcx.features().doc_cfg;\n+\n+        trait SingleExt {\n+            type Item;\n+            fn single(self) -> Option<Self::Item>;\n+        }\n+\n+        impl<T: IntoIterator> SingleExt for T {\n+            type Item = T::Item;\n+            fn single(self) -> Option<Self::Item> {\n+                let mut iter = self.into_iter();\n+                let item = iter.next()?;\n+                iter.next().is_none().then_some(())?;\n+                Some(item)\n+            }\n+        }\n+\n+        let mut cfg = if doc_cfg_active {\n+            let mut doc_cfg = self\n+                .iter()\n+                .filter(|attr| attr.has_name(sym::doc))\n+                .filter_map(|attr| Some(attr.meta_item_list()?.single()?))\n+                .filter(|attr| attr.has_name(sym::cfg))\n+                .filter_map(|attr| Some(attr.meta_item_list()?.single()?.meta_item()?.clone()))\n+                .peekable();\n+            if doc_cfg.peek().is_some() {\n+                doc_cfg\n+                    .filter_map(|attr| {\n+                        Cfg::parse(&attr).map_err(|e| sess.diagnostic().span_err(e.span, e.msg)).ok()\n+                    })\n+                    .fold(Cfg::True, |cfg, new_cfg| cfg & new_cfg)\n+            } else {\n+                self\n+                    .iter()\n+                    .filter(|attr| attr.has_name(sym::cfg))\n+                    .filter_map(|attr| Some(attr.meta_item_list()?.single()?.meta_item()?.clone()))\n+                    .filter_map(|attr| {\n+                        Cfg::parse(&attr).map_err(|e| sess.diagnostic().span_err(e.span, e.msg)).ok()\n+                    })\n+                    .fold(Cfg::True, |cfg, new_cfg| cfg & new_cfg)\n+            }\n+        } else {\n+            Cfg::True\n+        };\n \n         for attr in self.iter() {\n             // #[doc]"}, {"sha": "8cf7b50fbd978c646daf5f7895e1ae85893cb9b1", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -1123,7 +1123,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n         let ast_attrs = self.tcx.hir().attrs(hir_id);\n         let mut attrs = Attributes::from_ast(ast_attrs, None);\n \n-        if let Some(ref cfg) = ast_attrs.cfg(self.sess) {\n+        if let Some(ref cfg) = ast_attrs.cfg(self.tcx) {\n             if !cfg.matches(&self.sess.parse_sess, Some(&self.sess.features_untracked())) {\n                 return;\n             }"}, {"sha": "e68e12231716870da00489fc534aad11b7fb05eb", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -323,7 +323,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     let import_item = clean::Item {\n                         def_id: import_def_id.into(),\n                         attrs: import_attrs,\n-                        cfg: ast_attrs.cfg(cx.sess()),\n+                        cfg: ast_attrs.cfg(cx.tcx()),\n                         ..myitem.clone()\n                     };\n "}, {"sha": "d070ce22890d2f0f5c4a381a17142e0ea8ee8dbf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -5,6 +5,7 @@\n #![feature(rustc_private)]\n #![feature(array_methods)]\n #![feature(assert_matches)]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(box_syntax)]"}, {"sha": "92804d3729bba171c4558459f86a9a21815d03a3", "filename": "src/test/rustdoc/doc-cfg-implicit-gate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit-gate.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags:--cfg feature=\"worricow\"\n+#![crate_name = \"xenogenous\"]\n+\n+// @has 'xenogenous/struct.Worricow.html'\n+// @count   - '//*[@class=\"stab portability\"]' 0\n+#[cfg(feature = \"worricow\")]\n+pub struct Worricow;"}, {"sha": "36c2025785d0f87a8e76915fe7fcd3ce897b4fe8", "filename": "src/test/rustdoc/doc-cfg-implicit.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cdbd847fd00d093ce89a4fffde5d90c8bb9817/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-implicit.rs?ref=10cdbd847fd00d093ce89a4fffde5d90c8bb9817", "patch": "@@ -0,0 +1,31 @@\n+#![crate_name = \"funambulism\"]\n+#![feature(doc_cfg)]\n+\n+// @has 'funambulism/struct.Disorbed.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature disorbed'\n+// compile-flags:--cfg feature=\"disorbed\"\n+#[cfg(feature = \"disorbed\")]\n+pub struct Disorbed;\n+\n+// @has 'funambulism/struct.Aesthesia.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature aesthesia'\n+// compile-flags:--cfg feature=\"aesthesia\"\n+#[doc(cfg(feature = \"aesthesia\"))]\n+pub struct Aesthesia;\n+\n+// @has 'funambulism/struct.Pliothermic.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature pliothermic'\n+// compile-flags:--cfg feature=\"epopoeist\"\n+#[cfg(feature = \"epopoeist\")]\n+#[doc(cfg(feature = \"pliothermic\"))]\n+pub struct Pliothermic;\n+\n+// @has 'funambulism/struct.Simillimum.html'\n+// @count   - '//*[@class=\"stab portability\"]' 0\n+// compile-flags:--cfg feature=\"simillimum\"\n+#[cfg(feature = \"simillimum\")]\n+#[doc(cfg(all()))]\n+pub struct Simillimum;"}]}