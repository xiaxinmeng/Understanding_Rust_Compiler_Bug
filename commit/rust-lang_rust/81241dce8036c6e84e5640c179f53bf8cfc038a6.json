{"sha": "81241dce8036c6e84e5640c179f53bf8cfc038a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMjQxZGNlODAzNmM2ZTg0ZTU2NDBjMTc5ZjUzYmY4Y2ZjMDM4YTY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-08-11T09:53:04Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-08-11T10:13:27Z"}, "message": "Accept empty log level", "tree": {"sha": "4c6f7640c16422b0542c52bcfe6df3b746e6a0a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c6f7640c16422b0542c52bcfe6df3b746e6a0a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81241dce8036c6e84e5640c179f53bf8cfc038a6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81241dce8036c6e84e5640c179f53bf8cfc038a6", "html_url": "https://github.com/rust-lang/rust/commit/81241dce8036c6e84e5640c179f53bf8cfc038a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81241dce8036c6e84e5640c179f53bf8cfc038a6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c772cd391034ad29a444e748708df5a0bfff0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c772cd391034ad29a444e748708df5a0bfff0a2", "html_url": "https://github.com/rust-lang/rust/commit/9c772cd391034ad29a444e748708df5a0bfff0a2"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "d692c99e8c261cedb8eecdc12689f8f6e4d5b1e9", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81241dce8036c6e84e5640c179f53bf8cfc038a6/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81241dce8036c6e84e5640c179f53bf8cfc038a6/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=81241dce8036c6e84e5640c179f53bf8cfc038a6", "patch": "@@ -38,7 +38,7 @@ pub fn parse_logging_spec(spec: &str) -> Vec<LogDirective> {\n     for s in spec.split(',') {\n         if s.len() == 0 { continue }\n         let mut parts = s.split('=');\n-        let (log_level, name) = match (parts.next(), parts.next(), parts.next()) {\n+        let (log_level, name) = match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {\n             (Some(part0), None, None) => {\n                 // if the single argument is a log-level string or number,\n                 // treat that as a global fallback\n@@ -47,6 +47,7 @@ pub fn parse_logging_spec(spec: &str) -> Vec<LogDirective> {\n                     None => (::MAX_LOG_LEVEL, Some(part0)),\n                 }\n             }\n+            (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n             (Some(part0), Some(part1), None) => {\n                 match parse_log_level(part1) {\n                     Some(num) => (num, Some(part0)),\n@@ -120,6 +121,16 @@ mod tests {\n         assert_eq!(dirs[0].level, ::WARN);\n     }\n \n+    #[test]\n+    fn parse_logging_spec_empty_log_level() {\n+        // test parse_logging_spec with '' as log level\n+        let dirs = parse_logging_spec(\"crate1::mod1=wrong,crate2=\");\n+        let dirs = dirs.as_slice();\n+        assert_eq!(dirs.len(), 1);\n+        assert_eq!(dirs[0].name, Some(\"crate2\".to_string()));\n+        assert_eq!(dirs[0].level, ::MAX_LOG_LEVEL);\n+    }\n+\n     #[test]\n     fn parse_logging_spec_global() {\n         // test parse_logging_spec with no crate"}]}