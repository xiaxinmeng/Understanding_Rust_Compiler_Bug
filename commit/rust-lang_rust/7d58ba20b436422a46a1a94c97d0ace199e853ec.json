{"sha": "7d58ba20b436422a46a1a94c97d0ace199e853ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNThiYTIwYjQzNjQyMmE0NmExYTk0Yzk3ZDBhY2UxOTllODUzZWM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-01T18:14:05Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-01T18:14:05Z"}, "message": "Rustup to rust-lang/rust#70632", "tree": {"sha": "b1dfe148d24ae47fb2632509a646039ec67eb621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1dfe148d24ae47fb2632509a646039ec67eb621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d58ba20b436422a46a1a94c97d0ace199e853ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl6E2e0ACgkQLO/Nsn7Q\nvnlf9BAAqbZVivXH5B4WY3H88YXg7aosM5ECqQX8Rzaze/xs0iQm005ecN4xwNwd\nYQXw+UXp2owxLPUc2xS+gEfpoCNs6GxreDxj/F80fKDGCibuHHOAhvx6sR38q8Wy\n235lyxA2SF0xnEWKQWkRt3w7+40r0bqBhWpTu1w8RWoAOuklG0bHNjA0wpgVk2KW\nIld7//ljRXrEyZzXek1JkYNkkiHnjSf0FzJfnOGNR070BGNh9/Ig2bNkp1P0aFFj\ngQDng4MHP7u0t87pyTFbrLoCw9ucVOq8EYUTP5Cuiclt+0CkUFOO+lYu9AvibSIx\nWS3KoWHybkGFjp8g93mSF/vwiPkV/554boccwu3VGMTWOAlP5UYgyz9ARwPqGbda\nnDXpgxFcos6UKhvbcEVBc3NWyK4GcU9D+typ8rgf5VRX7g7ZhuMF6GQWgDf9dSOe\nvnPPE1DehcNVD4Ie5TfFAu2cE/wXMo0IkecPsWget32jJ9h2h5k0DyeuymwrZmNg\nt9oHpSQYX09K+i9ZlQb5ZRl36r1Fl52ZdjS1VnjULyAGdMKsObHG87DypYgJ5O8L\nHYeXFcWMF20c9jzkO/JCvrhMUHXnLhWkbMMzk6ezCTff/x+hkRR3orpXTmJzqcUc\nYNGpftwhHpeuRkJMoOd4r6rxWN/TSsFPABCprQvvDBCtUVZTaGk=\n=8JHK\n-----END PGP SIGNATURE-----", "payload": "tree b1dfe148d24ae47fb2632509a646039ec67eb621\nparent 63987aafba617fcd07a617e36727365430d97e76\nauthor flip1995 <hello@philkrones.com> 1585764845 +0200\ncommitter flip1995 <hello@philkrones.com> 1585764845 +0200\n\nRustup to rust-lang/rust#70632\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d58ba20b436422a46a1a94c97d0ace199e853ec", "html_url": "https://github.com/rust-lang/rust/commit/7d58ba20b436422a46a1a94c97d0ace199e853ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d58ba20b436422a46a1a94c97d0ace199e853ec/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63987aafba617fcd07a617e36727365430d97e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/63987aafba617fcd07a617e36727365430d97e76", "html_url": "https://github.com/rust-lang/rust/commit/63987aafba617fcd07a617e36727365430d97e76"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "33fba7df8d33660c13f03e7d397f586f76b09e63", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d58ba20b436422a46a1a94c97d0ace199e853ec/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d58ba20b436422a46a1a94c97d0ace199e853ec/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=7d58ba20b436422a46a1a94c97d0ace199e853ec", "patch": "@@ -280,6 +280,9 @@ pub fn vec_macro<'e>(cx: &LateContext<'_, '_>, expr: &'e hir::Expr<'_>) -> Optio\n \n                 None\n             }\n+            else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n+                Some(VecArgs::Vec(&[]))\n+            }\n             else {\n                 None\n             };"}, {"sha": "d443d63cc18615bfb5d37b22667bb62fcd3af9ce", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d58ba20b436422a46a1a94c97d0ace199e853ec/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d58ba20b436422a46a1a94c97d0ace199e853ec/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=7d58ba20b436422a46a1a94c97d0ace199e853ec", "patch": "@@ -131,5 +131,6 @@ pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n+pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}, {"sha": "8ea03fe42616c3339b09befee410f49e71fcd30a", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d58ba20b436422a46a1a94c97d0ace199e853ec/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7d58ba20b436422a46a1a94c97d0ace199e853ec/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=7d58ba20b436422a46a1a94c97d0ace199e853ec", "patch": "@@ -53,9 +53,7 @@ fn or_fun_call() {\n     with_default_type.unwrap_or_default();\n \n     let with_vec = Some(vec![1]);\n-    with_vec.unwrap_or_else(|| vec![]);\n-\n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+    with_vec.unwrap_or_default();\n \n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);"}, {"sha": "7599b945a9137ed63a21cc06ad70aeed0f5f6532", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d58ba20b436422a46a1a94c97d0ace199e853ec/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d58ba20b436422a46a1a94c97d0ace199e853ec/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=7d58ba20b436422a46a1a94c97d0ace199e853ec", "patch": "@@ -55,8 +55,6 @@ fn or_fun_call() {\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n \n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n-\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n "}, {"sha": "96d55771e6cef8c236e26836d2564c0a297a1ca3", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d58ba20b436422a46a1a94c97d0ace199e853ec/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d58ba20b436422a46a1a94c97d0ace199e853ec/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=7d58ba20b436422a46a1a94c97d0ace199e853ec", "patch": "@@ -42,38 +42,38 @@ error: use of `unwrap_or` followed by a call to `default`\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:56:14\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:56:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:61:21\n+  --> $DIR/or_fun_call.rs:59:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:64:19\n+  --> $DIR/or_fun_call.rs:62:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:67:21\n+  --> $DIR/or_fun_call.rs:65:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:70:21\n+  --> $DIR/or_fun_call.rs:68:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:95:35\n+  --> $DIR/or_fun_call.rs:93:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`"}]}