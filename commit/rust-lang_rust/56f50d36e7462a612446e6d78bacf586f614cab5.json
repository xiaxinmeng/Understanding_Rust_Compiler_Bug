{"sha": "56f50d36e7462a612446e6d78bacf586f614cab5", "node_id": "C_kwDOAAsO6NoAKDU2ZjUwZDM2ZTc0NjJhNjEyNDQ2ZTZkNzhiYWNmNTg2ZjYxNGNhYjU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T05:06:56Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:29Z"}, "message": "Move `FloatEqualityWithoutAbs` into `Operators` lint pass", "tree": {"sha": "6fa9d3ad4c785b2846dd41156235afbcfdeebb9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa9d3ad4c785b2846dd41156235afbcfdeebb9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56f50d36e7462a612446e6d78bacf586f614cab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56f50d36e7462a612446e6d78bacf586f614cab5", "html_url": "https://github.com/rust-lang/rust/commit/56f50d36e7462a612446e6d78bacf586f614cab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56f50d36e7462a612446e6d78bacf586f614cab5/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "html_url": "https://github.com/rust-lang/rust/commit/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a"}], "stats": {"total": 231, "additions": 110, "deletions": 121}, "files": [{"sha": "98aee7592ae80a496bde4da3e3f47327a7a547b3", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -1,116 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::{match_def_path, paths, sugg};\n-use if_chain::if_chain;\n-use rustc_ast::util::parser::AssocOp;\n-use rustc_errors::Applicability;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for statements of the form `(a - b) < f32::EPSILON` or\n-    /// `(a - b) < f64::EPSILON`. Notes the missing `.abs()`.\n-    ///\n-    /// ### Why is this bad?\n-    /// The code without `.abs()` is more likely to have a bug.\n-    ///\n-    /// ### Known problems\n-    /// If the user can ensure that b is larger than a, the `.abs()` is\n-    /// technically unnecessary. However, it will make the code more robust and doesn't have any\n-    /// large performance implications. If the abs call was deliberately left out for performance\n-    /// reasons, it is probably better to state this explicitly in the code, which then can be done\n-    /// with an allow.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n-    ///     (a - b) < f32::EPSILON\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n-    ///     (a - b).abs() < f32::EPSILON\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.48.0\"]\n-    pub FLOAT_EQUALITY_WITHOUT_ABS,\n-    suspicious,\n-    \"float equality check without `.abs()`\"\n-}\n-\n-declare_lint_pass!(FloatEqualityWithoutAbs => [FLOAT_EQUALITY_WITHOUT_ABS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        let lhs;\n-        let rhs;\n-\n-        // check if expr is a binary expression with a lt or gt operator\n-        if let ExprKind::Binary(op, left, right) = expr.kind {\n-            match op.node {\n-                BinOpKind::Lt => {\n-                    lhs = left;\n-                    rhs = right;\n-                },\n-                BinOpKind::Gt => {\n-                    lhs = right;\n-                    rhs = left;\n-                },\n-                _ => return,\n-            };\n-        } else {\n-            return;\n-        }\n-\n-        if_chain! {\n-\n-            // left hand side is a subtraction\n-            if let ExprKind::Binary(\n-                Spanned {\n-                    node: BinOpKind::Sub,\n-                    ..\n-                },\n-                val_l,\n-                val_r,\n-            ) = lhs.kind;\n-\n-            // right hand side matches either f32::EPSILON or f64::EPSILON\n-            if let ExprKind::Path(ref epsilon_path) = rhs.kind;\n-            if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n-            if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n-\n-            // values of the subtractions on the left hand side are of the type float\n-            let t_val_l = cx.typeck_results().expr_ty(val_l);\n-            let t_val_r = cx.typeck_results().expr_ty(val_r);\n-            if let ty::Float(_) = t_val_l.kind();\n-            if let ty::Float(_) = t_val_r.kind();\n-\n-            then {\n-                let sug_l = sugg::Sugg::hir(cx, val_l, \"..\");\n-                let sug_r = sugg::Sugg::hir(cx, val_r, \"..\");\n-                // format the suggestion\n-                let suggestion = format!(\"{}.abs()\", sugg::make_assoc(AssocOp::Subtract, &sug_l, &sug_r).maybe_par());\n-                // spans the lint\n-                span_lint_and_then(\n-                    cx,\n-                    FLOAT_EQUALITY_WITHOUT_ABS,\n-                    expr.span,\n-                    \"float equality check without `.abs()`\",\n-                    | diag | {\n-                        diag.span_suggestion(\n-                            lhs.span,\n-                            \"add `.abs()`\",\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "708038c8e22aa612a10fe9a31ae91aee621b722f", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=56f50d36e7462a612446e6d78bacf586f614cab5", "patch": "@@ -64,7 +64,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n-    LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(float_literal::EXCESSIVE_PRECISION),\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n@@ -257,6 +256,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::DURATION_SUBSEC),\n     LintId::of(operators::EQ_OP),\n     LintId::of(operators::ERASING_OP),\n+    LintId::of(operators::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(operators::OP_REF),"}, {"sha": "c0de13d1572da6065d2bcb5214b2674d903a1cd4", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=56f50d36e7462a612446e6d78bacf586f614cab5", "patch": "@@ -151,7 +151,6 @@ store.register_lints(&[\n     exit::EXIT,\n     explicit_write::EXPLICIT_WRITE,\n     fallible_impl_from::FALLIBLE_IMPL_FROM,\n-    float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n     float_literal::EXCESSIVE_PRECISION,\n     float_literal::LOSSY_FLOAT_LITERAL,\n     floating_point_arithmetic::IMPRECISE_FLOPS,\n@@ -432,6 +431,7 @@ store.register_lints(&[\n     operators::EQ_OP,\n     operators::ERASING_OP,\n     operators::FLOAT_ARITHMETIC,\n+    operators::FLOAT_EQUALITY_WITHOUT_ABS,\n     operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,\n     operators::MISREFACTORED_ASSIGN_OP,"}, {"sha": "f7558f8709810fe51d3475758f954fa76fa7fece", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=56f50d36e7462a612446e6d78bacf586f614cab5", "patch": "@@ -15,7 +15,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(drop_forget_ref::DROP_NON_DROP),\n     LintId::of(drop_forget_ref::FORGET_NON_DROP),\n     LintId::of(duplicate_mod::DUPLICATE_MOD),\n-    LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n@@ -28,6 +27,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n+    LintId::of(operators::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),"}, {"sha": "5e2ab9ddbecdcb397a2bdd7514022afaab703a47", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=56f50d36e7462a612446e6d78bacf586f614cab5", "patch": "@@ -227,7 +227,6 @@ mod exhaustive_items;\n mod exit;\n mod explicit_write;\n mod fallible_impl_from;\n-mod float_equality_without_abs;\n mod float_literal;\n mod floating_point_arithmetic;\n mod format;\n@@ -842,7 +841,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n     store.register_late_pass(|| Box::new(self_assignment::SelfAssignment));\n     store.register_late_pass(|| Box::new(manual_ok_or::ManualOkOr));\n-    store.register_late_pass(|| Box::new(float_equality_without_abs::FloatEqualityWithoutAbs));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n     store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n     let disallowed_methods = conf.disallowed_methods.clone();"}, {"sha": "a0a8b6aabd9e37b0237aeed23a6c3cc278fa11ab", "filename": "clippy_lints/src/operators/float_equality_without_abs.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Foperators%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Foperators%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Ffloat_equality_without_abs.rs?ref=56f50d36e7462a612446e6d78bacf586f614cab5", "patch": "@@ -0,0 +1,71 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{match_def_path, paths, sugg};\n+use if_chain::if_chain;\n+use rustc_ast::util::parser::AssocOp;\n+use rustc_errors::Applicability;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::source_map::Spanned;\n+\n+use super::FLOAT_EQUALITY_WITHOUT_ABS;\n+\n+pub(crate) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    lhs: &'tcx Expr<'_>,\n+    rhs: &'tcx Expr<'_>,\n+) {\n+    let (lhs, rhs) = match op {\n+        BinOpKind::Lt => (lhs, rhs),\n+        BinOpKind::Gt => (rhs, lhs),\n+        _ => return,\n+    };\n+\n+    if_chain! {\n+        // left hand side is a subtraction\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Sub,\n+                ..\n+            },\n+            val_l,\n+            val_r,\n+        ) = lhs.kind;\n+\n+        // right hand side matches either f32::EPSILON or f64::EPSILON\n+        if let ExprKind::Path(ref epsilon_path) = rhs.kind;\n+        if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n+        if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n+\n+        // values of the subtractions on the left hand side are of the type float\n+        let t_val_l = cx.typeck_results().expr_ty(val_l);\n+        let t_val_r = cx.typeck_results().expr_ty(val_r);\n+        if let ty::Float(_) = t_val_l.kind();\n+        if let ty::Float(_) = t_val_r.kind();\n+\n+        then {\n+            let sug_l = sugg::Sugg::hir(cx, val_l, \"..\");\n+            let sug_r = sugg::Sugg::hir(cx, val_r, \"..\");\n+            // format the suggestion\n+            let suggestion = format!(\"{}.abs()\", sugg::make_assoc(AssocOp::Subtract, &sug_l, &sug_r).maybe_par());\n+            // spans the lint\n+            span_lint_and_then(\n+                cx,\n+                FLOAT_EQUALITY_WITHOUT_ABS,\n+                expr.span,\n+                \"float equality check without `.abs()`\",\n+                | diag | {\n+                    diag.span_suggestion(\n+                        lhs.span,\n+                        \"add `.abs()`\",\n+                        suggestion,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            );\n+        }\n+    }\n+}"}, {"sha": "0786765119b66d18a5406f017aa43783dd6c9709", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f50d36e7462a612446e6d78bacf586f614cab5/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=56f50d36e7462a612446e6d78bacf586f614cab5", "patch": "@@ -9,6 +9,7 @@ mod double_comparison;\n mod duration_subsec;\n mod eq_op;\n mod erasing_op;\n+mod float_equality_without_abs;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n mod op_ref;\n@@ -383,6 +384,39 @@ declare_clippy_lint! {\n     \"using erasing operations, e.g., `x * 0` or `y & 0`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for statements of the form `(a - b) < f32::EPSILON` or\n+    /// `(a - b) < f64::EPSILON`. Notes the missing `.abs()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// The code without `.abs()` is more likely to have a bug.\n+    ///\n+    /// ### Known problems\n+    /// If the user can ensure that b is larger than a, the `.abs()` is\n+    /// technically unnecessary. However, it will make the code more robust and doesn't have any\n+    /// large performance implications. If the abs call was deliberately left out for performance\n+    /// reasons, it is probably better to state this explicitly in the code, which then can be done\n+    /// with an allow.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+    ///     (a - b) < f32::EPSILON\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+    ///     (a - b).abs() < f32::EPSILON\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.48.0\"]\n+    pub FLOAT_EQUALITY_WITHOUT_ABS,\n+    suspicious,\n+    \"float equality check without `.abs()`\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -401,6 +435,7 @@ impl_lint_pass!(Operators => [\n     EQ_OP,\n     OP_REF,\n     ERASING_OP,\n+    FLOAT_EQUALITY_WITHOUT_ABS,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -428,6 +463,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                 verbose_bit_mask::check(cx, e, op.node, lhs, rhs, self.verbose_bit_mask_threshold);\n                 double_comparison::check(cx, op.node, lhs, rhs, e.span);\n                 duration_subsec::check(cx, e, op.node, lhs, rhs);\n+                float_equality_without_abs::check(cx, e, op.node, lhs, rhs);\n             },\n             ExprKind::AssignOp(op, lhs, rhs) => {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);"}]}