{"sha": "2199d18e50b88702d48535678b5a6d7cfe75171f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTlkMThlNTBiODg3MDJkNDg1MzU2NzhiNWE2ZDdjZmU3NTE3MWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-13T00:24:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-15T23:03:14Z"}, "message": "mk: Split out a standard library package\n\nThis commit splits out the standard library from the current 'rustc' package\ninto a new 'rust-std' package. This is the basis for the work on easily\npackaging compilers that can cross-compile to new targets.", "tree": {"sha": "7df4627f035412adec4cd8dcca13e04ff98b1f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df4627f035412adec4cd8dcca13e04ff98b1f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2199d18e50b88702d48535678b5a6d7cfe75171f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2199d18e50b88702d48535678b5a6d7cfe75171f", "html_url": "https://github.com/rust-lang/rust/commit/2199d18e50b88702d48535678b5a6d7cfe75171f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2199d18e50b88702d48535678b5a6d7cfe75171f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3d390cf51545b880c5cd78585fa408c087f786", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3d390cf51545b880c5cd78585fa408c087f786", "html_url": "https://github.com/rust-lang/rust/commit/be3d390cf51545b880c5cd78585fa408c087f786"}], "stats": {"total": 138, "additions": 97, "deletions": 41}, "files": [{"sha": "eb94760e248f6ebea7df728c78e017d7adb7ffeb", "filename": "mk/dist.mk", "status": "modified", "additions": 73, "deletions": 27, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2199d18e50b88702d48535678b5a6d7cfe75171f/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2199d18e50b88702d48535678b5a6d7cfe75171f/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=2199d18e50b88702d48535678b5a6d7cfe75171f", "patch": "@@ -21,6 +21,7 @@\n # * dist-docs - Stage docs for upload\n \n PKG_NAME := $(CFG_PACKAGE_NAME)\n+STD_PKG_NAME := rust-std-$(CFG_PACKAGE_VERS)\n DOC_PKG_NAME := rust-docs-$(CFG_PACKAGE_VERS)\n MINGW_PKG_NAME := rust-mingw-$(CFG_PACKAGE_VERS)\n \n@@ -112,19 +113,25 @@ distcheck-tar-src: dist-tar-src\n # Unix binary installer tarballs\n ######################################################################\n \n-define DEF_INSTALLER\n+define DEF_START_INSTALLER\n+dist-install-dir-$(1)-%: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n+dist-install-dir-$(1)-%: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n+dist-install-dir-$(1)-%: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n+dist-install-dir-$(1)-%: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n+dist-install-dir-$(1)-%: PREPARE_CLEAN=true\n \n $$(eval $$(call DEF_PREPARE,dir-$(1)))\n+endef\n+\n+$(foreach target,$(CFG_TARGET),\\\n+  $(eval $(call DEF_START_INSTALLER,$(target))))\n \n-dist-install-dir-$(1): PREPARE_HOST=$(1)\n-dist-install-dir-$(1): PREPARE_TARGETS=$(2)\n-dist-install-dir-$(1): PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)-image\n-dist-install-dir-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-dist-install-dir-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-dist-install-dir-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-dist-install-dir-$(1): PREPARE_CLEAN=true\n-dist-install-dir-$(1): prepare-base-dir-$(1) docs\n+define DEF_INSTALLER\n+\n+dist-install-dir-$(1)-host: PREPARE_HOST=$(1)\n+dist-install-dir-$(1)-host: PREPARE_TARGETS=$(2)\n+dist-install-dir-$(1)-host: PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)-image\n+dist-install-dir-$(1)-host: prepare-base-dir-$(1)-host docs\n \t$$(Q)mkdir -p $$(PREPARE_DEST_DIR)/share/doc/rust\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)/share/doc/rust\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)/share/doc/rust\n@@ -141,14 +148,27 @@ prepare-overlay-$(1):\n # This tiny morsel of metadata is used by rust-packaging\n \t$$(Q)echo \"$(CFG_VERSION)\" > tmp/dist/$$(PKG_NAME)-$(1)-overlay/version\n \n-dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1) prepare-overlay-$(1)\n+dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1)-host prepare-overlay-$(1)\n \t@$(call E, build: $$@)\n-# Copy essential gcc components into installer\n-ifdef CFG_WINDOWSY_$(1)\n-ifeq ($$(findstring gnu,$(1)),gnu)\n-\t$$(Q)rm -Rf tmp/dist/win-rust-gcc-$(1)\n-\t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py tmp/dist/$$(PKG_NAME)-$(1)-image tmp/dist/win-rust-gcc-$(1) $(1)\n-\t$$(Q)cp -r $$(S)src/etc/third-party tmp/dist/$$(PKG_NAME)-$(1)-image/share/doc/\n+# On a 32-bit MinGW target we've got a few runtime DLL dependencies that we need\n+# to include. THe first argument to `make-win-dist` is where to put these DLLs\n+# (the image we're creating) and the second argument is a junk directory to\n+# ignore all the other MinGW stuff the script creates.\n+ifeq ($(2),i686-pc-windows-gnu)\n+\t$$(Q)rm -Rf tmp/dist/win-rust-gcc-$(2)\n+\t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py \\\n+\t\ttmp/dist/$$(STD_PKG_NAME)-$(2)-image \\\n+\t\ttmp/dist/win-rust-gcc-$(2) $(2)\n+endif\n+# On 32-bit MinGW we're always including a DLL which needs some extra licenses\n+# to distribute. On 64-bit MinGW we don't actually distribute anything requiring\n+# us to distribute a license but it's likely that the install will *also*\n+# include the rust-mingw package down below, which also need licenses, so to be\n+# safe we just inlude it here in all MinGW packages.\n+ifdef CFG_WINDOWSY_$(2)\n+ifeq ($$(findstring $(2),gnu),gnu)\n+\t$$(Q)cp -r $$(S)src/etc/third-party \\\n+\t\ttmp/dist/$$(STD_PKG_NAME)-$(2)-image/share/doc/\n endif\n endif\n \t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n@@ -183,11 +203,16 @@ dist/$$(DOC_PKG_NAME)-$(1).tar.gz: dist-doc-install-dir-$(1)\n \t\t--bulk-dirs=share/doc/rust/html\n \t$$(Q)rm -R tmp/dist/$$(DOC_PKG_NAME)-$(1)-image\n \n+# Creates the rust-mingw package, and the first argument to make-win-dist is a\n+# \"temporary directory\" which is just thrown away (this contains the runtime\n+# DLLs included in the rustc package above) and the second argument is where to\n+# place all the MinGW components (which is what we want).\n dist-mingw-install-dir-$(1):\n \t$$(Q)mkdir -p tmp/dist/rust-mingw-tmp-$(1)-image\n \t$$(Q)rm -Rf tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image\n \t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py \\\n-\t\ttmp/dist/rust-mingw-tmp-$(1)-image tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image $(1)\n+\t\ttmp/dist/rust-mingw-tmp-$(1)-image \\\n+\t\ttmp/dist/$$(MINGW_PKG_NAME)-$(1)-image $(1)\n \n dist/$$(MINGW_PKG_NAME)-$(1).tar.gz: dist-mingw-install-dir-$(1)\n \t@$(call E, build: $$@)\n@@ -205,15 +230,34 @@ dist/$$(MINGW_PKG_NAME)-$(1).tar.gz: dist-mingw-install-dir-$(1)\n \n endef\n \n-ifneq ($(CFG_ENABLE_DIST_HOST_ONLY),)\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call DEF_INSTALLER,$(host),$(host))))\n-else\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call DEF_INSTALLER,$(host),$(CFG_TARGET))))\n-endif\n+# $(1) - host\n+# $(2) - target\n+define DEF_INSTALLER_TARGETS\n+\n+dist-install-dir-$(2)-target: PREPARE_HOST=$(1)\n+dist-install-dir-$(2)-target: PREPARE_TARGETS=$(2)\n+dist-install-dir-$(2)-target: PREPARE_DEST_DIR=tmp/dist/$$(STD_PKG_NAME)-$(2)-image\n+dist-install-dir-$(2)-target: prepare-base-dir-$(2)-target\n \n-dist-install-dirs: $(foreach host,$(CFG_HOST),dist-install-dir-$(host))\n+dist/$$(STD_PKG_NAME)-$(2).tar.gz: dist-install-dir-$(2)-target\n+\t@$$(call E, build: $$@)\n+\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n+\t\t--product-name=Rust \\\n+\t\t--rel-manifest-dir=rustlib \\\n+\t\t--success-message=std-is-standing-at-the-ready. \\\n+\t\t--image-dir=tmp/dist/$$(STD_PKG_NAME)-$(2)-image \\\n+\t\t--work-dir=tmp/dist \\\n+\t\t--output-dir=dist \\\n+\t\t--package-name=$$(STD_PKG_NAME)-$(2) \\\n+\t\t--component-name=rust-std-$(2) \\\n+\t\t--legacy-manifest-dirs=rustlib,cargo\n+\t$$(Q)rm -R tmp/dist/$$(STD_PKG_NAME)-$(2)-image\n+endef\n+\n+$(foreach host,$(CFG_HOST),\\\n+  $(eval $(call DEF_INSTALLER,$(host))))\n+$(foreach target,$(CFG_TARGET),\\\n+  $(eval $(call DEF_INSTALLER_TARGETS,$(CFG_BUILD),$(target))))\n \n ifdef CFG_WINDOWSY_$(CFG_BUILD)\n define BUILD_MINGW_TARBALL\n@@ -230,7 +274,9 @@ ifeq ($(CFG_DISABLE_DOCS),)\n MAYBE_DOC_TARBALLS=$(foreach host,$(CFG_HOST),dist/$(DOC_PKG_NAME)-$(host).tar.gz)\n endif\n \n-dist-tar-bins: $(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).tar.gz) \\\n+dist-tar-bins: \\\n+\t$(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).tar.gz) \\\n+\t$(foreach target,$(CFG_TARGET),dist/$(STD_PKG_NAME)-$(target).tar.gz) \\\n \t$(MAYBE_DOC_TARBALLS) $(MAYBE_MINGW_TARBALLS)\n \n # Just try to run the compiler for the build host"}, {"sha": "8b8170220c9168a8db08ddf6884272cdf4346d14", "filename": "mk/install.mk", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2199d18e50b88702d48535678b5a6d7cfe75171f/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2199d18e50b88702d48535678b5a6d7cfe75171f/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=2199d18e50b88702d48535678b5a6d7cfe75171f", "patch": "@@ -8,6 +8,12 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+RUN_INSALLER = cd tmp/empty_dir && \\\n+\tsh ../../tmp/dist/$(1)/install.sh \\\n+\t\t--prefix=\"$(DESTDIR)$(CFG_PREFIX)\" \\\n+\t\t--libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" \\\n+\t\t--mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n+\n install:\n ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n # Build the dist as the original user\n@@ -16,9 +22,11 @@ else\n \t$(Q)$(MAKE) prepare_install\n endif\n ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(DOC_PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n+\t$(Q)$(call RUN_INSALLER,$(DOC_PKG_NAME)-$(CFG_BUILD)) --disable-ldconfig\n endif\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n+\t$(Q)$(foreach target,$(CFG_TARGET),\\\n+\t  ($(call RUN_INSALLER,$(STD_PKG_NAME)-$(target)) --disable-ldconfig);)\n+\t$(Q)$(call RUN_INSALLER,$(PKG_NAME)-$(CFG_BUILD))\n # Remove tmp files because it's a decent amount of disk space\n \t$(Q)rm -R tmp/dist\n \n@@ -32,9 +40,11 @@ else\n \t$(Q)$(MAKE) prepare_uninstall\n endif\n ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(DOC_PKG_NAME)-$(CFG_BUILD)/install.sh --uninstall --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n+\t$(Q)$(call RUN_INSALLER,$(DOC_PKG_NAME)-$(CFG_BUILD)) --uninstall\n endif\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --uninstall --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n+\t$(Q)$(call RUN_INSALLER,$(PKG_NAME)-$(CFG_BUILD)) --uninstall\n+\t$(Q)$(foreach target,$(CFG_TARGET),\\\n+\t  ($(call RUN_INSALLER,$(STD_PKG_NAME)-$(target)) --uninstall);)\n # Remove tmp files because it's a decent amount of disk space\n \t$(Q)rm -R tmp/dist\n "}, {"sha": "e263a6d2e4d32ab6c13c9d8484cfa3fa9c8295a6", "filename": "mk/prepare.mk", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2199d18e50b88702d48535678b5a6d7cfe75171f/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2199d18e50b88702d48535678b5a6d7cfe75171f/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=2199d18e50b88702d48535678b5a6d7cfe75171f", "patch": "@@ -185,16 +185,16 @@ INSTALL_DEBUGGER_SCRIPT_COMMANDS=$(if $(findstring windows,$(1)),\\\n \n define DEF_PREPARE\n \n-prepare-base-$(1): PREPARE_SOURCE_DIR=$$(PREPARE_HOST)/stage$$(PREPARE_STAGE)\n-prepare-base-$(1): PREPARE_SOURCE_BIN_DIR=$$(PREPARE_SOURCE_DIR)/bin\n-prepare-base-$(1): PREPARE_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_DIR)/$$(CFG_LIBDIR_RELATIVE)\n-prepare-base-$(1): PREPARE_SOURCE_MAN_DIR=$$(S)/man\n-prepare-base-$(1): PREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_DIR)/bin\n-prepare-base-$(1): PREPARE_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)\n-prepare-base-$(1): PREPARE_DEST_MAN_DIR=$$(PREPARE_DEST_DIR)/share/man/man1\n-prepare-base-$(1): prepare-everything-$(1)\n+prepare-base-$(1)-%: PREPARE_SOURCE_DIR=$$(PREPARE_HOST)/stage$$(PREPARE_STAGE)\n+prepare-base-$(1)-%: PREPARE_SOURCE_BIN_DIR=$$(PREPARE_SOURCE_DIR)/bin\n+prepare-base-$(1)-%: PREPARE_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_DIR)/$$(CFG_LIBDIR_RELATIVE)\n+prepare-base-$(1)-%: PREPARE_SOURCE_MAN_DIR=$$(S)/man\n+prepare-base-$(1)-%: PREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_DIR)/bin\n+prepare-base-$(1)-%: PREPARE_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)\n+prepare-base-$(1)-%: PREPARE_DEST_MAN_DIR=$$(PREPARE_DEST_DIR)/share/man/man1\n \n-prepare-everything-$(1): prepare-host-$(1) prepare-targets-$(1) prepare-debugger-scripts-$(1)\n+prepare-base-$(1)-target: prepare-target-$(1)\n+prepare-base-$(1)-host: prepare-host-$(1) prepare-debugger-scripts-$(1)\n \n prepare-host-$(1): prepare-host-tools-$(1)\n \n@@ -222,7 +222,7 @@ $$(foreach lib,$$(CRATES), \\\n   $$(foreach host,$$(CFG_HOST), \\\n     $$(eval $$(call DEF_PREPARE_HOST_LIB,$$(lib),$$(PREPARE_STAGE),$$(host),$(1)))))\n \n-prepare-targets-$(1): \\\n+prepare-target-$(1): \\\n         $$(foreach host,$$(CFG_HOST), \\\n            $$(foreach target,$$(CFG_TARGET), \\\n              prepare-target-$$(target)-host-$$(host)-$$(PREPARE_STAGE)-$(1)))"}]}