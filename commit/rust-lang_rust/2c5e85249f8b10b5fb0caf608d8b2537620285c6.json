{"sha": "2c5e85249f8b10b5fb0caf608d8b2537620285c6", "node_id": "C_kwDOAAsO6NoAKDJjNWU4NTI0OWY4YjEwYjVmYjBjYWY2MDhkOGIyNTM3NjIwMjg1YzY", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-28T22:10:45Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-05-08T12:37:14Z"}, "message": "Move lint expectation checking into a separate query (RFC 2383)", "tree": {"sha": "8d3d6e7b8e79d54df8b5eda69dbe45923b666a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3d6e7b8e79d54df8b5eda69dbe45923b666a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c5e85249f8b10b5fb0caf608d8b2537620285c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmJ3uXoACgkQ/Ny/Ka9k\n1gGaGQ//fWjxEJMrnP5TzKLQqGbYJJukZ4SQwuZdvYvINinVbQv4jChekm3AShlt\nsLNC4Mw9OH6JrLj04k9h9PgNntr9cVNK4RVMNbWC2E9iJs5954oS65mIKmSGVyOp\naBmzRXjSCHdFkDz9/s8PZ2RWJH7E/2uOAI352YDpRE+2BsqaKCgy5m+xjyZZkYy6\n4w0UmBgNDe1orBljEstikRkLCv1evEruYdgGQZAhhTWVKMPVWvWrn1SC4ouENvxv\nEez3wGUTVsuJwFng2s4kZ+XDLFuyU4lCcQcwA9nJkk/is7wdJCECgRYbNJgMVFac\nlm5ZdudxQC91xBZTfKJv+aywCDwjBJRwZrMGYYzFzZvcj89+DIJVpqRxtOkBfFqp\nFMkXNhHHSSe7p1dN9f54QDUaOj0DQnBv0io4XgPcvlC0MBbq0U4aOYrKki/4iBDq\npRd0B+tf+wNJ5bMPJhYLMOMAZEz2BsPEev4XKZkwpKP0AUzWtof8GcHwBZEGziru\n/ySW98wDlMMgFlrBnbCv6uYyiV2IQq0xQYbTuYE6UCR19hUHjpT75zMKX9S6hMPu\niyoXryXAyMDmgxaJFXkcIkEmaXmQLJD82ysa6bvqCo1428W8kfCX53Hu4SkernBZ\n81QfQJ81OM07lwUsBoFbOOL5CFNgQakZtPyaqg780nI6+oKlGik=\n=Q0wg\n-----END PGP SIGNATURE-----", "payload": "tree 8d3d6e7b8e79d54df8b5eda69dbe45923b666a47\nparent 7f03681cd941c7e18ee99549148b8aa6f468d7c2\nauthor xFrednet <xFrednet@gmail.com> 1648505445 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1652013434 +0200\n\nMove lint expectation checking into a separate query (RFC 2383)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5e85249f8b10b5fb0caf608d8b2537620285c6", "html_url": "https://github.com/rust-lang/rust/commit/2c5e85249f8b10b5fb0caf608d8b2537620285c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c5e85249f8b10b5fb0caf608d8b2537620285c6/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f03681cd941c7e18ee99549148b8aa6f468d7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f03681cd941c7e18ee99549148b8aa6f468d7c2", "html_url": "https://github.com/rust-lang/rust/commit/7f03681cd941c7e18ee99549148b8aa6f468d7c2"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "00119267e8561be4985be7d122ce95ab43793e0b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -1009,6 +1009,10 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                 });\n             }\n         );\n+\n+        // This check has to be run after all lints are done processing. We don't\n+        // define a lint filter, as all lint checks should have finished at this point.\n+        sess.time(\"check_lint_expectations\", || tcx.check_expectations(None));\n     });\n \n     Ok(())"}, {"sha": "dc48ac0a618e7b1574adc13346ab3bd252f4618a", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -1,10 +1,16 @@\n use crate::builtin;\n use rustc_hir::HirId;\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::{lint::LintExpectation, ty::TyCtxt};\n use rustc_session::lint::LintExpectationId;\n use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n \n-pub fn check_expectations(tcx: TyCtxt<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { check_expectations, ..*providers };\n+}\n+\n+fn check_expectations(tcx: TyCtxt<'_>, tool_filter: Option<Symbol>) {\n     if !tcx.sess.features_untracked().enabled(sym::lint_reasons) {\n         return;\n     }\n@@ -13,7 +19,9 @@ pub fn check_expectations(tcx: TyCtxt<'_>) {\n     let lint_expectations = &tcx.lint_levels(()).lint_expectations;\n \n     for (id, expectation) in lint_expectations {\n-        if !fulfilled_expectations.contains(id) {\n+        if !fulfilled_expectations.contains(id)\n+            && tool_filter.map_or(true, |filter| expectation.lint_tool == Some(filter))\n+        {\n             // This check will always be true, since `lint_expectations` only\n             // holds stable ids\n             if let LintExpectationId::Stable { hir_id, .. } = id {"}, {"sha": "0ce760b64d9ca0e889f01d8877421d0852fc4521", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -503,7 +503,4 @@ pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(\n             });\n         },\n     );\n-\n-    // This check has to be run after all lints are done processing for this crate\n-    tcx.sess.time(\"check_lint_expectations\", || crate::expect::check_expectations(tcx));\n }"}, {"sha": "257549bf1a1a47900bea026cf168fd709c2fbdc8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -371,7 +371,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                             };\n                             self.lint_expectations.push((\n                                 expect_id,\n-                                LintExpectation::new(reason, sp, is_unfulfilled_lint_expectations),\n+                                LintExpectation::new(\n+                                    reason,\n+                                    sp,\n+                                    is_unfulfilled_lint_expectations,\n+                                    tool_name,\n+                                ),\n                             ));\n                         }\n                         let src = LintLevelSource::Node(\n@@ -400,8 +405,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n-                                    self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n+                                    self.lint_expectations.push((\n+                                        expect_id,\n+                                        LintExpectation::new(reason, sp, false, tool_name),\n+                                    ));\n                                 }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n@@ -444,8 +451,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n-                                    self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n+                                    self.lint_expectations.push((\n+                                        expect_id,\n+                                        LintExpectation::new(reason, sp, false, tool_name),\n+                                    ));\n                                 }\n                             }\n                             Err((None, _)) => {\n@@ -550,8 +559,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                             }\n                         }\n                         if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp, false)));\n+                            self.lint_expectations.push((\n+                                expect_id,\n+                                LintExpectation::new(reason, sp, false, tool_name),\n+                            ));\n                         }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);"}, {"sha": "a965587afb71527b30a0d1376c4e93f7e9a74886", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -109,6 +109,7 @@ pub use rustc_session::lint::{LintArray, LintPass};\n \n pub fn provide(providers: &mut Providers) {\n     levels::provide(providers);\n+    expect::provide(providers);\n     *providers = Providers { lint_mod, ..*providers };\n }\n "}, {"sha": "c7c5f56867a5d461c07bb109b13f95a7fc120052", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -210,15 +210,20 @@ pub struct LintExpectation {\n     /// adjusted to include an additional note. Therefore, we have to track if\n     /// the expectation is for the lint.\n     pub is_unfulfilled_lint_expectations: bool,\n+    /// This will hold the name of the tool that this lint belongs to. For\n+    /// the lint `clippy::some_lint` the tool would be `clippy`, the same\n+    /// goes for `rustdoc`. This will be `None` for rustc lints\n+    pub lint_tool: Option<Symbol>,\n }\n \n impl LintExpectation {\n     pub fn new(\n         reason: Option<Symbol>,\n         emission_span: Span,\n         is_unfulfilled_lint_expectations: bool,\n+        lint_tool: Option<Symbol>,\n     ) -> Self {\n-        Self { reason, emission_span, is_unfulfilled_lint_expectations }\n+        Self { reason, emission_span, is_unfulfilled_lint_expectations, lint_tool }\n     }\n }\n "}, {"sha": "3936b3f0d684c94b9e695ba7be9e259253d2e953", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -157,6 +157,25 @@ rustc_queries! {\n         desc { \"running analysis passes on this crate\" }\n     }\n \n+    /// This query checks the fulfillment of collected lint expectations.\n+    /// All lint emitting queries have to be done before this is executed\n+    /// to ensure that all expectations can be fulfilled.\n+    ///\n+    /// This is an extra query to enable other drivers (like rustdoc) to\n+    /// only execute a small subset of the [`analysis`] query, while allowing\n+    /// lints to be expected. In rustc, this query will be executed as part of\n+    /// the [`analysis`] query and doesn't have to be called a second time.\n+    ///\n+    /// Tools can additionally pass in a tool filter. That will restrict the\n+    /// expectations to only trigger for lints starting with the listed tool\n+    /// name. This is useful for cases were not all linting code from rustc\n+    /// was called. With the default `none` all registered lints will also\n+    /// be checked for expectation fulfillment.\n+    query check_expectations(key: Option<Symbol>) -> () {\n+        eval_always\n+        desc { \"checking lint expectations (RFC 2383)\" }\n+    }\n+\n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n     /// associated generics.\n     query generics_of(key: DefId) -> ty::Generics {"}, {"sha": "6fbafeb1d32b3c40c51ce563d534e2a1488b29b9", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5e85249f8b10b5fb0caf608d8b2537620285c6/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=2c5e85249f8b10b5fb0caf608d8b2537620285c6", "patch": "@@ -435,6 +435,16 @@ impl Key for Symbol {\n     }\n }\n \n+impl Key for Option<Symbol> {\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {"}]}