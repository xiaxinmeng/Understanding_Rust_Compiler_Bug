{"sha": "4b79b8bfa139ca5f991aa08b405003f748d3caf6", "node_id": "C_kwDOAAsO6NoAKDRiNzliOGJmYTEzOWNhNWY5OTFhYTA4YjQwNTAwM2Y3NDhkM2NhZjY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-13T17:08:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T21:30:43Z"}, "message": "Only use special async fn case for actual async fns in borrowck diagnostics.", "tree": {"sha": "dc0d43c5dba03b773589b5b1eb333b274da4088d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc0d43c5dba03b773589b5b1eb333b274da4088d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b79b8bfa139ca5f991aa08b405003f748d3caf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b79b8bfa139ca5f991aa08b405003f748d3caf6", "html_url": "https://github.com/rust-lang/rust/commit/4b79b8bfa139ca5f991aa08b405003f748d3caf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b79b8bfa139ca5f991aa08b405003f748d3caf6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3", "html_url": "https://github.com/rust-lang/rust/commit/bc6a2c11ee34b46a1e2863a8522b6f7c2e4481c3"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "1db4b902f7150b9a4cfcdfd48002d52b16c9a12c", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b79b8bfa139ca5f991aa08b405003f748d3caf6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b79b8bfa139ca5f991aa08b405003f748d3caf6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=4b79b8bfa139ca5f991aa08b405003f748d3caf6", "patch": "@@ -254,6 +254,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// *user* has a name for. In that case, we'll be able to map\n     /// `fr` to a `Region<'tcx>`, and that region will be one of\n     /// named variants.\n+    #[tracing::instrument(level = \"trace\", skip(self))]\n     fn give_name_from_error_region(&self, fr: RegionVid) -> Option<RegionName> {\n         let error_region = self.to_error_region(fr)?;\n \n@@ -290,7 +291,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     if free_region.bound_region.is_named() {\n                         // A named region that is actually named.\n                         Some(RegionName { name, source: RegionNameSource::NamedFreeRegion(span) })\n-                    } else {\n+                    } else if let hir::IsAsync::Async = tcx.asyncness(self.mir_hir_id().owner) {\n                         // If we spuriously thought that the region is named, we should let the\n                         // system generate a true name for error messages. Currently this can\n                         // happen if we have an elided name in an async fn for example: the\n@@ -301,6 +302,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                             name,\n                             source: RegionNameSource::AnonRegionFromAsyncFn(span),\n                         })\n+                    } else {\n+                        None\n                     }\n                 }\n \n@@ -362,6 +365,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n+    #[tracing::instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_arguments(\n         &self,\n         fr: RegionVid,\n@@ -651,6 +655,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  | let x = Some(&22);\n     ///        - fully elaborated type of `x` is `Option<&'1 u32>`\n     /// ```\n+    #[tracing::instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_upvars(&self, fr: RegionVid) -> Option<RegionName> {\n         let upvar_index = self.regioncx.get_upvar_index_for_region(self.infcx.tcx, fr)?;\n         let (upvar_name, upvar_span) = self.regioncx.get_upvar_name_and_span_for_region(\n@@ -670,6 +675,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// must be a closure since, in a free fn, such an argument would\n     /// have to either also appear in an argument (if using elision)\n     /// or be early bound (named, not in argument).\n+    #[tracing::instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_output(&self, fr: RegionVid) -> Option<RegionName> {\n         let tcx = self.infcx.tcx;\n         let hir = tcx.hir();\n@@ -801,6 +807,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n     }\n \n+    #[tracing::instrument(level = \"trace\", skip(self))]\n     fn give_name_if_anonymous_region_appears_in_yield_ty(\n         &self,\n         fr: RegionVid,"}, {"sha": "cd84b6ef48471418c1126169e05944118a148479", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b79b8bfa139ca5f991aa08b405003f748d3caf6/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b79b8bfa139ca5f991aa08b405003f748d3caf6/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=4b79b8bfa139ca5f991aa08b405003f748d3caf6", "patch": "@@ -11,7 +11,7 @@ LL | |     }\n    |\n    = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n               found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n-note: the anonymous lifetime as defined here...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/issue-37884.rs:6:5\n    |\n LL |     fn next(&'a mut self) -> Option<Self::Item>"}]}