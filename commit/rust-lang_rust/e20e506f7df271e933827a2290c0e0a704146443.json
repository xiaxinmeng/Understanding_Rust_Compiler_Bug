{"sha": "e20e506f7df271e933827a2290c0e0a704146443", "node_id": "C_kwDOAAsO6NoAKGUyMGU1MDZmN2RmMjcxZTkzMzgyN2EyMjkwYzBlMGE3MDQxNDY0NDM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T11:11:45Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T17:27:20Z"}, "message": "Make `tcx.mk_const` more permissive wrt `kind` argument\n\n- Accept `impl Into`\n- Implement `From<>` for `ConstKind`\n\nNote: this adds a dependency on `derive_more` (MIT license). It allows\nto derive a lot of traits (like `From` here) that would be otherwise\ntedious to implement.", "tree": {"sha": "b38d265c8a3acc5b732cff8dbf45506679af0f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b38d265c8a3acc5b732cff8dbf45506679af0f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20e506f7df271e933827a2290c0e0a704146443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20e506f7df271e933827a2290c0e0a704146443", "html_url": "https://github.com/rust-lang/rust/commit/e20e506f7df271e933827a2290c0e0a704146443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20e506f7df271e933827a2290c0e0a704146443/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a09420ac48658cad726e0a6997687ceac4151e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a09420ac48658cad726e0a6997687ceac4151e3", "html_url": "https://github.com/rust-lang/rust/commit/8a09420ac48658cad726e0a6997687ceac4151e3"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "7d43dbc9e0640e35e88a129d78b2b46450ea3ffa", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e20e506f7df271e933827a2290c0e0a704146443/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e20e506f7df271e933827a2290c0e0a704146443/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e20e506f7df271e933827a2290c0e0a704146443", "patch": "@@ -870,6 +870,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"convert_case\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n+\n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n@@ -1060,6 +1066,19 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"derive_more\"\n+version = \"0.99.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\n+dependencies = [\n+ \"convert_case\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"rustc_version\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"diff\"\n version = \"0.1.13\"\n@@ -3979,6 +3998,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n+ \"derive_more\",\n  \"either\",\n  \"gsgdt\",\n  \"polonius-engine\","}, {"sha": "cf1ab47de861a1c078a3a103dd41768734246169", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20e506f7df271e933827a2290c0e0a704146443/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e20e506f7df271e933827a2290c0e0a704146443/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=e20e506f7df271e933827a2290c0e0a704146443", "patch": "@@ -8,6 +8,7 @@ edition = \"2021\"\n [dependencies]\n bitflags = \"1.2.1\"\n chalk-ir = \"0.87.0\"\n+derive_more = \"0.99.17\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n polonius-engine = \"0.13.0\""}, {"sha": "becc2b805dd1ee9ffb3ca9c50eb6b346e697a996", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20e506f7df271e933827a2290c0e0a704146443/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20e506f7df271e933827a2290c0e0a704146443/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=e20e506f7df271e933827a2290c0e0a704146443", "patch": "@@ -49,6 +49,7 @@ impl<'tcx> UnevaluatedConst<'tcx> {\n /// Represents a constant in Rust.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n+#[derive(derive_more::From)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ty::ParamConst),\n@@ -71,12 +72,19 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n+    #[from(ignore)]\n     Error(ErrorGuaranteed),\n \n     /// Expr which contains an expression which has partially evaluated items.\n     Expr(Expr<'tcx>),\n }\n \n+impl<'tcx> From<ty::ConstVid<'tcx>> for ConstKind<'tcx> {\n+    fn from(const_vid: ty::ConstVid<'tcx>) -> Self {\n+        InferConst::Var(const_vid).into()\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(HashStable, TyEncodable, TyDecodable, TypeVisitable, TypeFoldable)]\n pub enum Expr<'tcx> {"}, {"sha": "f422fdcc9aef6fbb6aa60759c8061a7418aaf641", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e20e506f7df271e933827a2290c0e0a704146443/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20e506f7df271e933827a2290c0e0a704146443/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e20e506f7df271e933827a2290c0e0a704146443", "patch": "@@ -2598,8 +2598,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_const(self, kind: ty::ConstKind<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const_internal(ty::ConstS { kind, ty })\n+    pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const_internal(ty::ConstS { kind: kind.into(), ty })\n     }\n \n     #[inline]"}]}