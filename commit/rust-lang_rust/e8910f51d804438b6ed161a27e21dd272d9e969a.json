{"sha": "e8910f51d804438b6ed161a27e21dd272d9e969a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTEwZjUxZDgwNDQzOGI2ZWQxNjFhMjdlMjFkZDI3MmQ5ZTk2OWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-29T14:40:30Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-30T17:46:15Z"}, "message": "Sync `Instance::resolve` with the projection code", "tree": {"sha": "f666e5dee72f050fa5b1f79eaa307fa88e814cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f666e5dee72f050fa5b1f79eaa307fa88e814cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8910f51d804438b6ed161a27e21dd272d9e969a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8910f51d804438b6ed161a27e21dd272d9e969a", "html_url": "https://github.com/rust-lang/rust/commit/e8910f51d804438b6ed161a27e21dd272d9e969a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8910f51d804438b6ed161a27e21dd272d9e969a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "103771ce57acc240bc01abf4f7365172935bc7fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/103771ce57acc240bc01abf4f7365172935bc7fb", "html_url": "https://github.com/rust-lang/rust/commit/103771ce57acc240bc01abf4f7365172935bc7fb"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "5f98850633075f5540ef1526b95983032c927aa5", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=e8910f51d804438b6ed161a27e21dd272d9e969a", "patch": "@@ -54,7 +54,6 @@ pub use self::project::{\n };\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n-pub use self::specialize::find_associated_item;\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};"}, {"sha": "aae0d46756331310c063f589ac859f2de4bd37de", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=e8910f51d804438b6ed161a27e21dd272d9e969a", "patch": "@@ -1016,7 +1016,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         .map_err(|ErrorReported| ())?;\n \n                 if node_item.is_final() {\n-                    // Non-specializable items are always projectable\n+                    // Non-specializable items are always projectable.\n                     true\n                 } else {\n                     // Only reveal a specializable default if we're past type-checking"}, {"sha": "fabd8c89b72af7e075e8476bf747495f9a6d26d9", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=e8910f51d804438b6ed161a27e21dd272d9e969a", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n use rustc_span::DUMMY_SP;\n@@ -112,48 +112,6 @@ pub fn translate_substs<'a, 'tcx>(\n     source_substs.rebase_onto(infcx.tcx, source_impl, target_substs)\n }\n \n-/// Given a selected impl described by `impl_data`, returns the\n-/// definition and substitutions for the method with the name `name`\n-/// the kind `kind`, and trait method substitutions `substs`, in\n-/// that impl, a less specialized impl, or the trait default,\n-/// whichever applies.\n-pub fn find_associated_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    item: &ty::AssocItem,\n-    substs: SubstsRef<'tcx>,\n-    impl_data: &super::VtableImplData<'tcx, ()>,\n-) -> (DefId, SubstsRef<'tcx>) {\n-    debug!(\"find_associated_item({:?}, {:?}, {:?}, {:?})\", param_env, item, substs, impl_data);\n-    assert!(!substs.needs_infer());\n-\n-    let trait_def_id = tcx.trait_id_of_impl(impl_data.impl_def_id).unwrap();\n-    let trait_def = tcx.trait_def(trait_def_id);\n-\n-    if let Ok(ancestors) = trait_def.ancestors(tcx, impl_data.impl_def_id) {\n-        match ancestors.leaf_def(tcx, item.ident, item.kind) {\n-            Some(node_item) => {\n-                let substs = tcx.infer_ctxt().enter(|infcx| {\n-                    let param_env = param_env.with_reveal_all();\n-                    let substs = substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n-                    let substs = translate_substs(\n-                        &infcx,\n-                        param_env,\n-                        impl_data.impl_def_id,\n-                        substs,\n-                        node_item.defining_node,\n-                    );\n-                    infcx.tcx.erase_regions(&substs)\n-                });\n-                (node_item.item.def_id, substs)\n-            }\n-            None => bug!(\"{:?} not found in {:?}\", item, impl_data.impl_def_id),\n-        }\n-    } else {\n-        (item.def_id, substs)\n-    }\n-}\n-\n /// Is `impl1` a specialization of `impl2`?\n ///\n /// Specialization is determined by the sets of types to which the impls apply;"}, {"sha": "2b7d7e7e637711b98f2499769621a6cc9ef0cdc6", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910f51d804438b6ed161a27e21dd272d9e969a/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=e8910f51d804438b6ed161a27e21dd272d9e969a", "patch": "@@ -1,9 +1,11 @@\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeFoldable};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_span::sym;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n+use traits::{Reveal, translate_substs};\n \n use log::debug;\n \n@@ -82,21 +84,49 @@ fn resolve_associated_item<'tcx>(\n     // the actual function:\n     match vtbl {\n         traits::VtableImpl(impl_data) => {\n-            let (def_id, substs) =\n-                traits::find_associated_item(tcx, param_env, trait_item, rcvr_substs, &impl_data);\n-\n-            let resolved_item = tcx.associated_item(def_id);\n+            debug!(\n+                \"resolving VtableImpl: {:?}, {:?}, {:?}, {:?}\",\n+                param_env, trait_item, rcvr_substs, impl_data\n+            );\n+            assert!(!rcvr_substs.needs_infer());\n+\n+            let trait_def_id = tcx.trait_id_of_impl(impl_data.impl_def_id).unwrap();\n+            let trait_def = tcx.trait_def(trait_def_id);\n+            let leaf_def = trait_def\n+                .ancestors(tcx, impl_data.impl_def_id)\n+                .ok()?\n+                .leaf_def(tcx, trait_item.ident, trait_item.kind)\n+                .unwrap_or_else(|| {\n+                    bug!(\"{:?} not found in {:?}\", trait_item, impl_data.impl_def_id);\n+                });\n+            let def_id = leaf_def.item.def_id;\n+\n+            let substs = tcx.infer_ctxt().enter(|infcx| {\n+                let param_env = param_env.with_reveal_all();\n+                let substs = rcvr_substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n+                let substs = translate_substs(\n+                    &infcx,\n+                    param_env,\n+                    impl_data.impl_def_id,\n+                    substs,\n+                    leaf_def.defining_node,\n+                );\n+                infcx.tcx.erase_regions(&substs)\n+            });\n \n             // Since this is a trait item, we need to see if the item is either a trait default item\n             // or a specialization because we can't resolve those unless we can `Reveal::All`.\n             // NOTE: This should be kept in sync with the similar code in\n             // `rustc_middle::traits::project::assemble_candidates_from_impls()`.\n-            let eligible = if !resolved_item.defaultness.is_default() {\n+            let eligible = if leaf_def.is_final() {\n+                // Non-specializable items are always projectable.\n                 true\n-            } else if param_env.reveal == traits::Reveal::All {\n-                !trait_ref.needs_subst()\n             } else {\n-                false\n+                // Only reveal a specializable default if we're past type-checking\n+                // and the obligation is monomorphic, otherwise passes such as\n+                // transmute checking and polymorphic MIR optimizations could\n+                // get a result which isn't correct for all monomorphizations.\n+                if param_env.reveal == Reveal::All { !trait_ref.needs_subst() } else { false }\n             };\n \n             if !eligible {"}]}