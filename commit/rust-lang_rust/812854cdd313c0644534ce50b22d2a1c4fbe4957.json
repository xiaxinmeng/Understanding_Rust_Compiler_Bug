{"sha": "812854cdd313c0644534ce50b22d2a1c4fbe4957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMjg1NGNkZDMxM2MwNjQ0NTM0Y2U1MGIyMmQyYTFjNGZiZTQ5NTc=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-12T17:42:45Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-12T20:01:55Z"}, "message": "Remove usage of `DUMMY_HIR_ID` in calls to `ObligationClause::misc`\n\nUse `ObligationClause::dummy()` when appropriate or replace\n`hir::DUMMY_HIR_ID` by `hir::CRATE_HIR_ID`, as used in\n`ObligationClause::dummy()`.", "tree": {"sha": "8d56010b4620c4673e8413eb2c1d6c8d01999aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d56010b4620c4673e8413eb2c1d6c8d01999aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/812854cdd313c0644534ce50b22d2a1c4fbe4957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/812854cdd313c0644534ce50b22d2a1c4fbe4957", "html_url": "https://github.com/rust-lang/rust/commit/812854cdd313c0644534ce50b22d2a1c4fbe4957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/812854cdd313c0644534ce50b22d2a1c4fbe4957/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1fbaccb822b6d52dc786589de7918d3c5effb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1fbaccb822b6d52dc786589de7918d3c5effb1", "html_url": "https://github.com/rust-lang/rust/commit/4d1fbaccb822b6d52dc786589de7918d3c5effb1"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "052de4a4e5b555682ea13162fb964a15449cf12c", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/812854cdd313c0644534ce50b22d2a1c4fbe4957/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812854cdd313c0644534ce50b22d2a1c4fbe4957/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=812854cdd313c0644534ce50b22d2a1c4fbe4957", "patch": "@@ -187,13 +187,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // to store all of the necessary region/lifetime bounds in the InferContext, as well as\n             // an additional sanity check.\n             let mut fulfill = FulfillmentContext::new();\n-            fulfill.register_bound(\n-                &infcx,\n-                full_env,\n-                ty,\n-                trait_did,\n-                ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID),\n-            );\n+            fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n             fulfill.select_all_or_error(&infcx).unwrap_or_else(|e| {\n                 panic!(\"Unable to fulfill trait {:?} for '{:?}': {:?}\", trait_did, ty, e)\n             });\n@@ -292,7 +286,7 @@ impl AutoTraitFinder<'tcx> {\n             user_env.caller_bounds.iter().cloned().collect();\n \n         let mut new_env = param_env;\n-        let dummy_cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+        let dummy_cause = ObligationCause::dummy();\n \n         while let Some(pred) = predicates.pop_front() {\n             infcx.clear_caches();\n@@ -615,7 +609,7 @@ impl AutoTraitFinder<'tcx> {\n         select: &mut SelectionContext<'_, 'tcx>,\n         only_projections: bool,\n     ) -> bool {\n-        let dummy_cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+        let dummy_cause = ObligationCause::dummy();\n \n         for (obligation, mut predicate) in nested.map(|o| (o.clone(), o.predicate)) {\n             let is_new_pred = fresh_preds.insert(self.clean_pred(select.infcx(), predicate));"}, {"sha": "f5f4a51eb54e21dda7fbb984eba12bf5e26a531a", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/812854cdd313c0644534ce50b22d2a1c4fbe4957/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812854cdd313c0644534ce50b22d2a1c4fbe4957/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=812854cdd313c0644534ce50b22d2a1c4fbe4957", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::middle::region;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, WithConstness};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::fmt::Debug;\n \n@@ -136,7 +136,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n     let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n     let obligation = Obligation {\n         param_env,\n-        cause: ObligationCause::misc(span, hir::DUMMY_HIR_ID),\n+        cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),\n         recursion_depth: 0,\n         predicate: trait_ref.without_const().to_predicate(),\n     };\n@@ -163,7 +163,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         // We can use a dummy node-id here because we won't pay any mind\n         // to region obligations that arise (there shouldn't really be any\n         // anyhow).\n-        let cause = ObligationCause::misc(span, hir::DUMMY_HIR_ID);\n+        let cause = ObligationCause::misc(span, hir::CRATE_HIR_ID);\n \n         fulfill_cx.register_bound(infcx, param_env, ty, def_id, cause);\n "}, {"sha": "d6d3e86a2c8d37dee0f3d781d6fb2de3f9737ffe", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/812854cdd313c0644534ce50b22d2a1c4fbe4957/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812854cdd313c0644534ce50b22d2a1c4fbe4957/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=812854cdd313c0644534ce50b22d2a1c4fbe4957", "patch": "@@ -1,10 +1,8 @@\n-use rustc_hir as hir;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n-use rustc_span::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{\n     normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution,\n@@ -27,7 +25,7 @@ fn normalize_projection_ty<'tcx>(\n         &goal,\n         |infcx, fulfill_cx, ParamEnvAnd { param_env, value: goal }| {\n             let selcx = &mut SelectionContext::new(infcx);\n-            let cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+            let cause = ObligationCause::dummy();\n             let mut obligations = vec![];\n             let answer = traits::normalize_projection_type(\n                 selcx,"}]}