{"sha": "0404788178af764e8c5be87cd60a7e02a93f6178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDQ3ODgxNzhhZjc2NGU4YzViZTg3Y2Q2MGE3ZTAyYTkzZjYxNzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T12:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T12:29:31Z"}, "message": "Rollup merge of #73317 - davidtwco:bootstrap-config-env-var, r=Mark-Simulacrum\n\nbootstrap: read config from $RUST_BOOTSTRAP_CONFIG\n\nThis PR modifies bootstrap so that `config.toml` is read first from `RUST_BOOTSTRAP_CONFIG`, then `--config` and finally `config.toml` in the current directory.\n\nThis is a subjective change, intended to improve the ergnomics when using \"development shells\" for rustc development (for example, using tools such as Nix) which set environment variables to ensure a reproducible environment (these development shells can then be version controlled, e.g. [my rustc shell](https://github.com/davidtwco/veritas/blob/6b74a5c170b6efb2c7b094352932f9158f97eec0/nix/shells/rustc.nix)). By optionally reading `config.toml` from an environment variable, a `config.toml` can be defined in the development shell and a path to it exposed in the `RUST_BOOTSTRAP_CONFIG` environment variable - avoiding the need to manually symlink the contents of this file to `config.toml` in the working directory.", "tree": {"sha": "9d233035c818e3df3e561ca9b2cc566934587144", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d233035c818e3df3e561ca9b2cc566934587144"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0404788178af764e8c5be87cd60a7e02a93f6178", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7K+rCRBK7hj4Ov3rIwAAdHIIAJdYADUfyI03why5UwWtLiY+\nwwrFHqToDBGd+4Zp4gXldsu2LriQ2W5ce7PDxlie1pUARngzqXS8e39+Mpl2oHi1\nWzHMlMosjd5F3LdyxybX+b1laISnvZgE1SA6JJTvJ+TDg8Mu8Mdf3w6r9ER6E/oc\nk8AUEGKC5RSEqZz7PvZkMTrfKdUlwK8kRLaLT5FNyOw/74sFgydiy0PF7cZv3fP2\n6qA7CDQxfiO+bsmHevAvtknw8pgZbq56hzLxFqwWSzSiNRi9HGcpmT5BajECCrQy\nbbpy6n49DD6yUYlWeNAWSTciD0PWsLAvdkSR7IAxBiwgzeNhP4loQaNz7FRjiVI=\n=iYb0\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d233035c818e3df3e561ca9b2cc566934587144\nparent 45aa36bae5b3cfcd0c585d1ab680a27ac3e92315\nparent 93022be9917a472f7a16410ce7cb2b76a5d3afdd\nauthor Ralf Jung <post@ralfj.de> 1592569771 +0200\ncommitter GitHub <noreply@github.com> 1592569771 +0200\n\nRollup merge of #73317 - davidtwco:bootstrap-config-env-var, r=Mark-Simulacrum\n\nbootstrap: read config from $RUST_BOOTSTRAP_CONFIG\n\nThis PR modifies bootstrap so that `config.toml` is read first from `RUST_BOOTSTRAP_CONFIG`, then `--config` and finally `config.toml` in the current directory.\n\nThis is a subjective change, intended to improve the ergnomics when using \"development shells\" for rustc development (for example, using tools such as Nix) which set environment variables to ensure a reproducible environment (these development shells can then be version controlled, e.g. [my rustc shell](https://github.com/davidtwco/veritas/blob/6b74a5c170b6efb2c7b094352932f9158f97eec0/nix/shells/rustc.nix)). By optionally reading `config.toml` from an environment variable, a `config.toml` can be defined in the development shell and a path to it exposed in the `RUST_BOOTSTRAP_CONFIG` environment variable - avoiding the need to manually symlink the contents of this file to `config.toml` in the working directory.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0404788178af764e8c5be87cd60a7e02a93f6178", "html_url": "https://github.com/rust-lang/rust/commit/0404788178af764e8c5be87cd60a7e02a93f6178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0404788178af764e8c5be87cd60a7e02a93f6178/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45aa36bae5b3cfcd0c585d1ab680a27ac3e92315", "url": "https://api.github.com/repos/rust-lang/rust/commits/45aa36bae5b3cfcd0c585d1ab680a27ac3e92315", "html_url": "https://github.com/rust-lang/rust/commit/45aa36bae5b3cfcd0c585d1ab680a27ac3e92315"}, {"sha": "93022be9917a472f7a16410ce7cb2b76a5d3afdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/93022be9917a472f7a16410ce7cb2b76a5d3afdd", "html_url": "https://github.com/rust-lang/rust/commit/93022be9917a472f7a16410ce7cb2b76a5d3afdd"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "969d16d11e81b7a578bbbcb769bf412a36da18ec", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0404788178af764e8c5be87cd60a7e02a93f6178/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0404788178af764e8c5be87cd60a7e02a93f6178/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0404788178af764e8c5be87cd60a7e02a93f6178", "patch": "@@ -894,7 +894,7 @@ def bootstrap(help_triggered):\n     build.clean = args.clean\n \n     try:\n-        toml_path = args.config or 'config.toml'\n+        toml_path = os.getenv('RUST_BOOTSTRAP_CONFIG') or args.config or 'config.toml'\n         if not os.path.exists(toml_path):\n             toml_path = os.path.join(build.rust_root, toml_path)\n \n@@ -947,6 +947,7 @@ def bootstrap(help_triggered):\n     env[\"SRC\"] = build.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n+    env[\"BOOTSTRAP_CONFIG\"] = toml_path\n     env[\"BUILD_DIR\"] = build.build_dir\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     env[\"CARGO\"] = build.cargo()"}, {"sha": "9017866788a3f96005aa3cf73485e83bb5fc13ae", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0404788178af764e8c5be87cd60a7e02a93f6178/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0404788178af764e8c5be87cd60a7e02a93f6178/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0404788178af764e8c5be87cd60a7e02a93f6178", "patch": "@@ -3,7 +3,7 @@\n //! This module implements the command-line parsing of the build system which\n //! has various flags to configure how it's run.\n \n-use std::fs;\n+use std::env;\n use std::path::PathBuf;\n use std::process;\n \n@@ -438,13 +438,7 @@ Arguments:\n         // Get any optional paths which occur after the subcommand\n         let paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n-        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n-            if fs::metadata(\"config.toml\").is_ok() {\n-                Some(PathBuf::from(\"config.toml\"))\n-            } else {\n-                None\n-            }\n-        });\n+        let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n \n         // All subcommands except `clean` can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {"}]}