{"sha": "0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNmJkNDJhYmIwYjYwODJkMjNlN2ZlODRiMDEyMWRmYTA0NzZiNzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-06T10:50:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:27:54Z"}, "message": "make `blame_span` deterministic", "tree": {"sha": "75c4dc8d332f554c027475a004d040ea56574086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c4dc8d332f554c027475a004d040ea56574086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "html_url": "https://github.com/rust-lang/rust/commit/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a118afe7ca742872f2064e26ddf97394d091ce3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a118afe7ca742872f2064e26ddf97394d091ce3b", "html_url": "https://github.com/rust-lang/rust/commit/a118afe7ca742872f2064e26ddf97394d091ce3b"}], "stats": {"total": 123, "additions": 71, "deletions": 52}, "files": [{"sha": "9a3076c0c32b7b61e28a61e3895de46bd600aa24", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -872,35 +872,50 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // be obvious to the user -- not to mention the naive notion\n         // of dependencies, which doesn't account for the locations of\n         // contraints at all. But it will do for now.\n-        for constraint in &self.constraints {\n-            if constraint.sub == fr2 && influenced_fr1[constraint.sup] {\n-                return constraint.span;\n-            }\n-        }\n-\n-        bug!(\n-            \"could not find any constraint to blame for {:?}: {:?}\",\n-            fr1,\n-            fr2\n-        );\n+        let relevant_constraint = self.constraints\n+                .iter()\n+                .filter_map(|constraint| {\n+                    if constraint.sub != fr2 {\n+                        None\n+                    } else {\n+                        influenced_fr1[constraint.sup]\n+                            .map(|distance| (distance, constraint.span))\n+                    }\n+                })\n+                .min() // constraining fr1 with fewer hops *ought* to be more obvious\n+                .map(|(_dist, span)| span);\n+\n+        relevant_constraint.unwrap_or_else(|| {\n+            bug!(\n+                \"could not find any constraint to blame for {:?}: {:?}\",\n+                fr1,\n+                fr2\n+            );\n+        })\n     }\n \n     /// Finds all regions whose values `'a` may depend on in some way.\n-    /// Basically if there exists a constraint `'a: 'b @ P`, then `'b`\n-    /// and `dependencies('b)` will be in the final set.\n+    /// For each region, returns either `None` (does not influence\n+    /// `'a`) or `Some(d)` which indicates that it influences `'a`\n+    /// with distinct `d` (minimum number of edges that must be\n+    /// traversed).\n     ///\n     /// Used during error reporting, extremely naive and inefficient.\n-    fn dependencies(&self, r0: RegionVid) -> IndexVec<RegionVid, bool> {\n-        let mut result_set = IndexVec::from_elem(false, &self.definitions);\n+    fn dependencies(&self, r0: RegionVid) -> IndexVec<RegionVid, Option<usize>> {\n+        let mut result_set = IndexVec::from_elem(None, &self.definitions);\n         let mut changed = true;\n-        result_set[r0] = true;\n+        result_set[r0] = Some(0); // distance 0 from `r0`\n \n         while changed {\n             changed = false;\n             for constraint in &self.constraints {\n-                if result_set[constraint.sup] {\n-                    if !result_set[constraint.sub] {\n-                        result_set[constraint.sub] = true;\n+                if let Some(n) = result_set[constraint.sup] {\n+                    let m = n + 1;\n+                    if result_set[constraint.sub]\n+                        .map(|distance| m < distance)\n+                        .unwrap_or(true)\n+                    {\n+                        result_set[constraint.sub] = Some(m);\n                         changed = true;\n                     }\n                 }\n@@ -1049,13 +1064,16 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n         value: &T,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>\n+        T: TypeFoldable<'tcx>,\n     {\n         infcx.tcx.fold_regions(value, &mut false, |r, _depth| {\n             if let ty::ReClosureBound(vid) = r {\n                 closure_mapping[*vid]\n             } else {\n-                bug!(\"subst_closure_mapping: encountered non-closure bound free region {:?}\", r)\n+                bug!(\n+                    \"subst_closure_mapping: encountered non-closure bound free region {:?}\",\n+                    r\n+                )\n             }\n         })\n     }"}, {"sha": "6562efeb6d893a628b9ad646a2f001ccad2c21b2", "filename": "src/test/compile-fail/mir_check_cast_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_closure.rs?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -14,9 +14,9 @@\n \n fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n     let g: fn(_, _) -> _ = |_x, y| y;\n+    //~^ ERROR free region `'b` does not outlive free region `'a`\n     g\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR free region `'b` does not outlive free region `'a`\n }\n \n fn main() {}"}, {"sha": "1736aea2d6de7604aad69d92284f174b46df9b90", "filename": "src/test/compile-fail/mir_check_cast_reify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -45,8 +45,8 @@ fn bar<'a>(x: &'a u32) -> &'static u32 {\n     // as part of checking the `ReifyFnPointer`.\n     let f: fn(_) -> _ = foo;\n     //~^ WARNING not reporting region error due to -Znll\n+    //~| ERROR free region `'_#1r` does not outlive free region `'static`\n     f(x)\n-    //~^ ERROR free region `'_#1r` does not outlive free region `'static`\n }\n \n fn main() {}"}, {"sha": "39eafa10040264f3cdd40fab10b2534085b0c7e8", "filename": "src/test/compile-fail/mir_check_cast_unsafe_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsafe_fn.rs?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -17,8 +17,8 @@ fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n     // in `g`. These are related via the `UnsafeFnPointer` cast.\n     let g: unsafe fn(_) -> _ = f;\n     //~^ WARNING not reporting region error due to -Znll\n+    //~| ERROR free region `'_#1r` does not outlive free region `'static`\n     unsafe { g(input) }\n-    //~^ ERROR free region `'_#1r` does not outlive free region `'static`\n }\n \n fn main() {}"}, {"sha": "50d7877de50d7be23e3cb9b9692fafd0f30ccb17", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -54,8 +54,8 @@ fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell\n             // Only works if 'x: 'y:\n             let p = x.get();\n             //~^ WARN not reporting region error due to -Znll\n+            //~| ERROR free region `'_#5r` does not outlive free region `'_#6r`\n             demand_y(x, y, p)\n-            //~^ ERROR free region `'_#5r` does not outlive free region `'_#6r`\n         },\n     );\n }"}, {"sha": "f90bc7c175a96ba2810d114eb42759770a056938", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -5,10 +5,10 @@ warning: not reporting region error due to -Znll\n    |                     ^^^^^^^\n \n error: free region `'_#5r` does not outlive free region `'_#6r`\n-  --> $DIR/propagate-approximated-fail-no-postdom.rs:57:25\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:55:17\n    |\n-57 |             demand_y(x, y, p)\n-   |                         ^\n+55 |             let p = x.get();\n+   |                 ^\n \n note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:53:9\n@@ -17,8 +17,8 @@ note: No external requirements\n 54 | |             // Only works if 'x: 'y:\n 55 | |             let p = x.get();\n 56 | |             //~^ WARN not reporting region error due to -Znll\n-57 | |             demand_y(x, y, p)\n-58 | |             //~^ ERROR free region `'_#5r` does not outlive free region `'_#6r`\n+57 | |             //~| ERROR free region `'_#5r` does not outlive free region `'_#6r`\n+58 | |             demand_y(x, y, p)\n 59 | |         },\n    | |_________^\n    |"}, {"sha": "4bae29ad32617128cbfa4b435b72266b83e8aef1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -24,10 +24,10 @@ note: External requirements\n    = note: where '_#1r: '_#2r\n \n error: free region `'_#1r` does not outlive free region `'_#2r`\n-  --> $DIR/propagate-approximated-ref.rs:53:38\n+  --> $DIR/propagate-approximated-ref.rs:53:29\n    |\n 53 |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                      ^^^^^^^\n+   |                             ^^^^^^^\n \n note: No external requirements\n   --> $DIR/propagate-approximated-ref.rs:52:1"}, {"sha": "502b344c89e448b2efcbb48fd689fd2eef8f8bc1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-empty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -5,10 +5,10 @@ warning: not reporting region error due to -Znll\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: free region `'_#6r` does not outlive free region `'_#4r`\n-  --> $DIR/propagate-approximated-to-empty.rs:41:21\n+  --> $DIR/propagate-approximated-to-empty.rs:41:18\n    |\n 41 |         demand_y(x, y, x.get())\n-   |                     ^\n+   |                  ^\n \n note: No external requirements\n   --> $DIR/propagate-approximated-to-empty.rs:39:47"}, {"sha": "43d61fdf1b5f820bab8cf588d855a3b741715f7b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -24,10 +24,10 @@ note: External requirements\n    = note: where '_#1r: '_#2r\n \n error: free region `'_#1r` does not outlive free region `'_#2r`\n-  --> $DIR/propagate-approximated-val.rs:46:37\n+  --> $DIR/propagate-approximated-val.rs:46:29\n    |\n 46 |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-   |                                     ^^^^^^\n+   |                             ^^^^^^\n \n note: No external requirements\n   --> $DIR/propagate-approximated-val.rs:45:1"}, {"sha": "a5be2b43f04bc02d6cdf125076df3258150611f9", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -40,6 +40,8 @@ where\n     T: Trait<'a>,\n {\n     establish_relationships(value, |value| {\n+        //~^ ERROR failed type test\n+\n         // This function call requires that\n         //\n         // (a) T: Trait<'a>\n@@ -52,7 +54,6 @@ where\n \n         require(value);\n         //~^ WARNING not reporting region error due to -Znll\n-        //~| ERROR failed type test\n     });\n }\n "}, {"sha": "e81c45ef7eda112702dbe6488471cf0d50b7b0f3", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d6bd42abb0b6082d23e7fe84b0121dfa0476b78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=0d6bd42abb0b6082d23e7fe84b0121dfa0476b78", "patch": "@@ -1,20 +1,20 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-from-trait-match.rs:53:9\n+  --> $DIR/propagate-from-trait-match.rs:55:9\n    |\n-53 |         require(value);\n+55 |         require(value);\n    |         ^^^^^^^\n \n note: External requirements\n   --> $DIR/propagate-from-trait-match.rs:42:36\n    |\n 42 |       establish_relationships(value, |value| {\n    |  ____________________________________^\n-43 | |         // This function call requires that\n-44 | |         //\n-45 | |         // (a) T: Trait<'a>\n+43 | |         //~^ ERROR failed type test\n+44 | |\n+45 | |         // This function call requires that\n ...  |\n-55 | |         //~| ERROR failed type test\n-56 | |     });\n+56 | |         //~^ WARNING not reporting region error due to -Znll\n+57 | |     });\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:16 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n@@ -26,17 +26,17 @@ note: External requirements\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-error: failed type test: TypeTest { generic_kind: T/#1, lower_bound: '_#3r, point: bb0[3], span: $DIR/propagate-from-trait-match.rs:42:36: 56:6, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n+error: failed type test: TypeTest { generic_kind: T/#1, lower_bound: '_#3r, point: bb0[3], span: $DIR/propagate-from-trait-match.rs:42:36: 57:6, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n   --> $DIR/propagate-from-trait-match.rs:42:36\n    |\n 42 |       establish_relationships(value, |value| {\n    |  ____________________________________^\n-43 | |         // This function call requires that\n-44 | |         //\n-45 | |         // (a) T: Trait<'a>\n+43 | |         //~^ ERROR failed type test\n+44 | |\n+45 | |         // This function call requires that\n ...  |\n-55 | |         //~| ERROR failed type test\n-56 | |     });\n+56 | |         //~^ WARNING not reporting region error due to -Znll\n+57 | |     });\n    | |_____^\n \n note: No external requirements\n@@ -47,8 +47,8 @@ note: No external requirements\n 40 | |     T: Trait<'a>,\n 41 | | {\n ...  |\n-56 | |     });\n-57 | | }\n+57 | |     });\n+58 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_from_trait_match[317d]::supply[0]) with substs ["}]}