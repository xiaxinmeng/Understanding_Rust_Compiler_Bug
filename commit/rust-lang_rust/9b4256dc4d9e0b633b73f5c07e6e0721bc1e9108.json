{"sha": "9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDI1NmRjNGQ5ZTBiNjMzYjczZjVjMDdlNmUwNzIxYmMxZTkxMDg=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-06T19:11:17Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-06T19:11:17Z"}, "message": "Add lib target filtering.", "tree": {"sha": "1ac56e3e771ad097afecb9c6917165fb6cb17fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ac56e3e771ad097afecb9c6917165fb6cb17fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "html_url": "https://github.com/rust-lang/rust/commit/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46084f8a96dc94cad06c269d93269e7c5f7e4fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/46084f8a96dc94cad06c269d93269e7c5f7e4fad", "html_url": "https://github.com/rust-lang/rust/commit/46084f8a96dc94cad06c269d93269e7c5f7e4fad"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "eaa43f2bdc7b6dd6a1a0d2cde02fa6785414a31b", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "patch": "@@ -404,7 +404,7 @@ pub fn handle_runnables(\n                 continue;\n             }\n         }\n-        if is_lib_target(&runnable, cargo_spec.as_ref()) {\n+        if should_skip_target(&runnable, cargo_spec.as_ref()) {\n             continue;\n         }\n \n@@ -812,7 +812,7 @@ pub fn handle_code_lens(\n     if snap.config.lens.runnable() {\n         // Gather runnables\n         for runnable in snap.analysis().runnables(file_id)? {\n-            if is_lib_target(&runnable, cargo_spec.as_ref()) {\n+            if should_skip_target(&runnable, cargo_spec.as_ref()) {\n                 continue;\n             }\n \n@@ -1185,6 +1185,11 @@ fn to_runnable_action(\n     file_id: FileId,\n     runnable: &Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n+    let cargo_spec = CargoTargetSpec::for_file(&snap, file_id).ok()?;\n+    if should_skip_target(runnable, cargo_spec.as_ref()) {\n+        return None;\n+    }\n+\n     to_proto::runnable(snap, file_id, runnable).ok().map(|r| {\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n@@ -1222,16 +1227,18 @@ fn prepare_hover_actions(\n         .collect()\n }\n \n-fn is_lib_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>) -> bool {\n-    // Do not suggest binary run on other target than binary\n-    if let RunnableKind::Bin = runnable.kind {\n-        if let Some(spec) = cargo_spec {\n-            match spec.target_kind {\n-                TargetKind::Bin => return true,\n-                _ => (),\n+fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>) -> bool {\n+    match runnable.kind {\n+        RunnableKind::Bin => {\n+            // Do not suggest binary run on other target than binary\n+            match &cargo_spec {\n+                Some(spec) => match spec.target_kind {\n+                    TargetKind::Bin => false,\n+                    _ => true,\n+                },\n+                None => true,\n             }\n         }\n+        _ => false,\n     }\n-\n-    false\n }"}]}