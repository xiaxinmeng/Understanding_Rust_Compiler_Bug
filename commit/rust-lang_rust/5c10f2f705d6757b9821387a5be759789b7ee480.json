{"sha": "5c10f2f705d6757b9821387a5be759789b7ee480", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMTBmMmY3MDVkNjc1N2I5ODIxMzg3YTViZTc1OTc4OWI3ZWU0ODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-05T11:04:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T11:04:58Z"}, "message": "Merge #7131\n\n7131: Created an assist for inlining a function's body into its caller r=matklad a=Michael-F-Bryan\n\nThis introduces an `inline_function` assist which will convert code like this:\r\n\r\n```rust\r\nfn add(a: u32, b: u32) -> u32 { a + b }\r\nfn main() {\r\n    let x = add<|>(1, 2);\r\n}\r\n```\r\n\r\nInto something like this:\r\n\r\n```rust\r\nfn add(a: u32, b: u32) -> u32 { a + b }\r\nfn main() {\r\n    let x = { \r\n        let a = 1; \r\n        let b = 2; \r\n        a + b \r\n    };\r\n}\r\n```\r\n\r\nFixes #6863.\n\nCo-authored-by: Michael-F-Bryan <michaelfbryan@gmail.com>", "tree": {"sha": "961570d2245c2e62ce7f20c2437fe5d8abb92166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/961570d2245c2e62ce7f20c2437fe5d8abb92166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c10f2f705d6757b9821387a5be759789b7ee480", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9EfaCRBK7hj4Ov3rIwAAdHIIAAvfM9ZyuBmURTXlBr/Z6Ajj\nFSbuV0WChPSG2GyEGgI3bWUj/PwQ9zVLmuVJdOcDF034ZdUgcQb1rE80qBWdIil1\n6QVgRSt6SsSLa4yIgP1Es2OTmWv5uZbtF9+z4Xh/wZCifl47WN5w+HMA26aLUglV\npnug2195OcOYMFn+v/uPOJP4T6v02l16WYAWgpfM4BqNcua47Qmk6sciJlHODrFD\n9+mGsImKitugv7zuGEBYCSiMOxzjyZY/rIwsfFPC9PE+cDNHOaiTO6vdW53zsqUl\nnOr8NruNGqjlTRzRsAnwB2QFodyWFiNd592NTqAkq29GwKwejcJkQJj9pB53w6s=\n=sbQN\n-----END PGP SIGNATURE-----\n", "payload": "tree 961570d2245c2e62ce7f20c2437fe5d8abb92166\nparent 4bc1ed7d592819bf2a29f7be376e0c09f190c345\nparent 7b4b4ef02681053299dda5111c0d4b0113e29224\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609844698 +0000\ncommitter GitHub <noreply@github.com> 1609844698 +0000\n\nMerge #7131\n\n7131: Created an assist for inlining a function's body into its caller r=matklad a=Michael-F-Bryan\n\nThis introduces an `inline_function` assist which will convert code like this:\r\n\r\n```rust\r\nfn add(a: u32, b: u32) -> u32 { a + b }\r\nfn main() {\r\n    let x = add<|>(1, 2);\r\n}\r\n```\r\n\r\nInto something like this:\r\n\r\n```rust\r\nfn add(a: u32, b: u32) -> u32 { a + b }\r\nfn main() {\r\n    let x = { \r\n        let a = 1; \r\n        let b = 2; \r\n        a + b \r\n    };\r\n}\r\n```\r\n\r\nFixes #6863.\n\nCo-authored-by: Michael-F-Bryan <michaelfbryan@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c10f2f705d6757b9821387a5be759789b7ee480", "html_url": "https://github.com/rust-lang/rust/commit/5c10f2f705d6757b9821387a5be759789b7ee480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c10f2f705d6757b9821387a5be759789b7ee480/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc1ed7d592819bf2a29f7be376e0c09f190c345", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc1ed7d592819bf2a29f7be376e0c09f190c345", "html_url": "https://github.com/rust-lang/rust/commit/4bc1ed7d592819bf2a29f7be376e0c09f190c345"}, {"sha": "7b4b4ef02681053299dda5111c0d4b0113e29224", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4b4ef02681053299dda5111c0d4b0113e29224", "html_url": "https://github.com/rust-lang/rust/commit/7b4b4ef02681053299dda5111c0d4b0113e29224"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "2edf252b7f3e040348bdb6001628994f2d0816c5", "filename": "crates/assists/src/handlers/inline_function.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/5c10f2f705d6757b9821387a5be759789b7ee480/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c10f2f705d6757b9821387a5be759789b7ee480/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs?ref=5c10f2f705d6757b9821387a5be759789b7ee480", "patch": "@@ -0,0 +1,202 @@\n+use ast::make;\n+use hir::{HasSource, PathResolution};\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, ArgListOwner},\n+    AstNode,\n+};\n+use test_utils::mark;\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: inline_function\n+//\n+// Inlines a function body.\n+//\n+// ```\n+// fn add(a: u32, b: u32) -> u32 { a + b }\n+// fn main() {\n+//     let x = add<|>(1, 2);\n+// }\n+// ```\n+// ->\n+// ```\n+// fn add(a: u32, b: u32) -> u32 { a + b }\n+// fn main() {\n+//     let x = {\n+//         let a = 1;\n+//         let b = 2;\n+//         a + b\n+//     };\n+// }\n+// ```\n+pub(crate) fn inline_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n+    let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n+    let path = path_expr.path()?;\n+\n+    let function = match ctx.sema.resolve_path(&path)? {\n+        PathResolution::Def(hir::ModuleDef::Function(f)) => f,\n+        _ => return None,\n+    };\n+\n+    let function_source = function.source(ctx.db())?;\n+    let arguments: Vec<_> = call.arg_list()?.args().collect();\n+    let parameters = function_parameter_patterns(&function_source.value)?;\n+\n+    if arguments.len() != parameters.len() {\n+        // Can't inline the function because they've passed the wrong number of\n+        // arguments to this function\n+        mark::hit!(inline_function_incorrect_number_of_arguments);\n+        return None;\n+    }\n+\n+    let new_bindings = parameters.into_iter().zip(arguments);\n+\n+    let body = function_source.value.body()?;\n+\n+    acc.add(\n+        AssistId(\"inline_function\", AssistKind::RefactorInline),\n+        format!(\"Inline `{}`\", path),\n+        call.syntax().text_range(),\n+        |builder| {\n+            let mut statements: Vec<ast::Stmt> = Vec::new();\n+\n+            for (pattern, value) in new_bindings {\n+                statements.push(make::let_stmt(pattern, Some(value)).into());\n+            }\n+\n+            statements.extend(body.statements());\n+\n+            let original_indentation = call.indent_level();\n+            let replacement = make::block_expr(statements, body.expr())\n+                .reset_indent()\n+                .indent(original_indentation);\n+\n+            builder.replace_ast(ast::Expr::CallExpr(call), ast::Expr::BlockExpr(replacement));\n+        },\n+    )\n+}\n+\n+fn function_parameter_patterns(value: &ast::Fn) -> Option<Vec<ast::Pat>> {\n+    let mut patterns = Vec::new();\n+\n+    for param in value.param_list()?.params() {\n+        let pattern = param.pat()?;\n+        patterns.push(pattern);\n+    }\n+\n+    Some(patterns)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn no_args_or_return_value_gets_inlined_without_block() {\n+        check_assist(\n+            inline_function,\n+            r#\"\n+fn foo() { println!(\"Hello, World!\"); }\n+fn main() {\n+    fo<|>o();\n+}\n+\"#,\n+            r#\"\n+fn foo() { println!(\"Hello, World!\"); }\n+fn main() {\n+    {\n+        println!(\"Hello, World!\");\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn args_with_side_effects() {\n+        check_assist(\n+            inline_function,\n+            r#\"\n+fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn main() {\n+    foo<|>(String::from(\"Michael\"));\n+}\n+\"#,\n+            r#\"\n+fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn main() {\n+    {\n+        let name = String::from(\"Michael\");\n+        println!(\"Hello, {}!\", name);\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn method_inlining_isnt_supported() {\n+        check_assist_not_applicable(\n+            inline_function,\n+            r\"\n+struct Foo;\n+impl Foo { fn bar(&self) {} }\n+\n+fn main() { Foo.bar<|>(); }\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_when_incorrect_number_of_parameters_are_provided() {\n+        mark::check!(inline_function_incorrect_number_of_arguments);\n+        check_assist_not_applicable(\n+            inline_function,\n+            r#\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() { let x = add<|>(42); }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn function_with_multiple_statements() {\n+        check_assist(\n+            inline_function,\n+            r#\"\n+fn foo(a: u32, b: u32) -> u32 {\n+    let x = a + b;\n+    let y = x - b;\n+    x * y\n+}\n+\n+fn main() {\n+    let x = foo<|>(1, 2);\n+}\n+\"#,\n+            r#\"\n+fn foo(a: u32, b: u32) -> u32 {\n+    let x = a + b;\n+    let y = x - b;\n+    x * y\n+}\n+\n+fn main() {\n+    let x = {\n+        let a = 1;\n+        let b = 2;\n+        let x = a + b;\n+        let y = x - b;\n+        x * y\n+    };\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "9c2a9573574c52ce8f72173149409bfeb4878df6", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c10f2f705d6757b9821387a5be759789b7ee480/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c10f2f705d6757b9821387a5be759789b7ee480/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=5c10f2f705d6757b9821387a5be759789b7ee480", "patch": "@@ -131,6 +131,7 @@ mod handlers {\n     mod generate_impl;\n     mod generate_new;\n     mod infer_function_return_type;\n+    mod inline_function;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n     mod invert_if;\n@@ -183,6 +184,7 @@ mod handlers {\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n             infer_function_return_type::infer_function_return_type,\n+            inline_function::inline_function,\n             inline_local_variable::inline_local_variable,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "b15352cf32ccb3cb6605ebe94c1a67ec47a8d69d", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c10f2f705d6757b9821387a5be759789b7ee480/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c10f2f705d6757b9821387a5be759789b7ee480/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5c10f2f705d6757b9821387a5be759789b7ee480", "patch": "@@ -530,6 +530,29 @@ fn foo() -> i32 { 42i32 }\n     )\n }\n \n+#[test]\n+fn doctest_inline_function() {\n+    check_doc_test(\n+        \"inline_function\",\n+        r#####\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() {\n+    let x = add<|>(1, 2);\n+}\n+\"#####,\n+        r#####\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() {\n+    let x = {\n+        let a = 1;\n+        let b = 2;\n+        a + b\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_local_variable() {\n     check_doc_test("}]}