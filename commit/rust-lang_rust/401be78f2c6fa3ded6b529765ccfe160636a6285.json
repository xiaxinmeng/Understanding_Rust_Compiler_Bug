{"sha": "401be78f2c6fa3ded6b529765ccfe160636a6285", "node_id": "C_kwDOAAsO6NoAKDQwMWJlNzhmMmM2ZmEzZGVkNmI1Mjk3NjVjY2ZlMTYwNjM2YTYyODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-03T22:42:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-03T22:42:50Z"}, "message": "Rollup merge of #97656 - EdwinRy:error_ast_low_type_contraint_parentheses, r=cjgillot\n\nAdd a suggestion to replace parentheses with angle brackets on associated trait constraint\n\nThis implements a requested suggestion FIXME in [`compiler/rustc_ast_lowering/src/lib.rs` ](https://github.com/rust-lang/rust/blob/9598b4b594c97dff66feb93522e22db500deea07/compiler/rustc_ast_lowering/src/lib.rs#L921)\n\nThe suggestion asks for the parentheses to either be replaced with angle brackets or removed completely depending on whether there are arguments provided within.\n\n![image](https://user-images.githubusercontent.com/20026256/171770414-ab60bfe2-ae27-44b0-964d-9ffcc32a7475.png)\n\n![image](https://user-images.githubusercontent.com/20026256/171770383-ca8a2766-b3aa-43e3-8ba4-ae18874886ce.png)\n\nr? `@oli-obk`", "tree": {"sha": "fd855a26f4fa61c8b044addfd9890c6473a8078c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd855a26f4fa61c8b044addfd9890c6473a8078c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401be78f2c6fa3ded6b529765ccfe160636a6285", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimo5qCRBK7hj4Ov3rIwAA6OYIACoLgF8uiCUn0nQxMGu4c+0O\nLDr8OWBsXs2/cwbedpxhwoxaSrKe0i8EvxLbkfRhUFgfLSqGu5aEEYzjSy4EVWDz\nyvndrZNfHotgbI7BvLdNuPipYzmBs5O0xxv3S/+8AzxTFJJQ2u4HbPb9lsfeftJZ\nU1EebXBAxgWCCjx/7khZjHf3O3pJbJrIbcx4SwP1DSIJXGFRpvez+jEpH+QJrilP\nqblFeyYCAALpXpobxRVo96i/QkrEjBp8wq569JWZCVb4CQuUI5uVyNP3nvMBAIPZ\n1VWdVM/ckDJvfkAOUAfFluc4gvhhIGmQR1V8igB0sqGDzfIgPs2LKZvRUVxzI2M=\n=Q612\n-----END PGP SIGNATURE-----\n", "payload": "tree fd855a26f4fa61c8b044addfd9890c6473a8078c\nparent e33c6edfc04d0ba5f4e0d996100263ee9d2fef79\nparent cd03fe18d8a24434c1510d08c88231fbe9d6b8bf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654296170 +0200\ncommitter GitHub <noreply@github.com> 1654296170 +0200\n\nRollup merge of #97656 - EdwinRy:error_ast_low_type_contraint_parentheses, r=cjgillot\n\nAdd a suggestion to replace parentheses with angle brackets on associated trait constraint\n\nThis implements a requested suggestion FIXME in [`compiler/rustc_ast_lowering/src/lib.rs` ](https://github.com/rust-lang/rust/blob/9598b4b594c97dff66feb93522e22db500deea07/compiler/rustc_ast_lowering/src/lib.rs#L921)\n\nThe suggestion asks for the parentheses to either be replaced with angle brackets or removed completely depending on whether there are arguments provided within.\n\n![image](https://user-images.githubusercontent.com/20026256/171770414-ab60bfe2-ae27-44b0-964d-9ffcc32a7475.png)\n\n![image](https://user-images.githubusercontent.com/20026256/171770383-ca8a2766-b3aa-43e3-8ba4-ae18874886ce.png)\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401be78f2c6fa3ded6b529765ccfe160636a6285", "html_url": "https://github.com/rust-lang/rust/commit/401be78f2c6fa3ded6b529765ccfe160636a6285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401be78f2c6fa3ded6b529765ccfe160636a6285/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e33c6edfc04d0ba5f4e0d996100263ee9d2fef79", "url": "https://api.github.com/repos/rust-lang/rust/commits/e33c6edfc04d0ba5f4e0d996100263ee9d2fef79", "html_url": "https://github.com/rust-lang/rust/commit/e33c6edfc04d0ba5f4e0d996100263ee9d2fef79"}, {"sha": "cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "html_url": "https://github.com/rust-lang/rust/commit/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "12fc1dbc4da5d2bd99615347e9ffc23c11a3567b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/401be78f2c6fa3ded6b529765ccfe160636a6285/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401be78f2c6fa3ded6b529765ccfe160636a6285/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=401be78f2c6fa3ded6b529765ccfe160636a6285", "patch": "@@ -46,7 +46,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n@@ -857,20 +857,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         itctx: ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n-\n         // lower generic arguments of identifier in constraint\n         let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n             let gen_args_ctor = match gen_args {\n                 GenericArgs::AngleBracketed(ref data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n-                    let mut err = self.sess.struct_span_err(\n-                        gen_args.span(),\n-                        \"parenthesized generic arguments cannot be used in associated type constraints\"\n-                    );\n-                    // FIXME: try to write a suggestion here\n-                    err.emit();\n+                    self.assoc_ty_contraint_param_error_emit(data);\n                     self.lower_angle_bracketed_parameter_data(\n                         &data.as_angle_bracketed_args(),\n                         ParamMode::Explicit,\n@@ -984,6 +978,42 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n+    fn assoc_ty_contraint_param_error_emit(&self, data: &ParenthesizedArgs) -> () {\n+        let mut err = self.sess.struct_span_err(\n+            data.span,\n+            \"parenthesized generic arguments cannot be used in associated type constraints\",\n+        );\n+        // Suggest removing empty parentheses: \"Trait()\" -> \"Trait\"\n+        if data.inputs.is_empty() {\n+            let parentheses_span =\n+                data.inputs_span.shrink_to_lo().to(data.inputs_span.shrink_to_hi());\n+            err.multipart_suggestion(\n+                \"remove these parentheses\",\n+                vec![(parentheses_span, String::new())],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n+        else {\n+            // Start of parameters to the 1st argument\n+            let open_param = data.inputs_span.shrink_to_lo().to(data\n+                .inputs\n+                .first()\n+                .unwrap()\n+                .span\n+                .shrink_to_lo());\n+            // End of last argument to end of parameters\n+            let close_param =\n+                data.inputs.last().unwrap().span.shrink_to_hi().to(data.inputs_span.shrink_to_hi());\n+            err.multipart_suggestion(\n+                &format!(\"use angle brackets instead\",),\n+                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,"}, {"sha": "c55b0530c9da89030b20455159b3c0765007a800", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/401be78f2c6fa3ded6b529765ccfe160636a6285/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401be78f2c6fa3ded6b529765ccfe160636a6285/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=401be78f2c6fa3ded6b529765ccfe160636a6285", "patch": "@@ -10,4 +10,9 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n \n+\n+fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+  //~^ ERROR: parenthesized generic arguments cannot be used\n+  //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n+\n fn main() {}"}, {"sha": "162214063e7d28851193fb38d220ec673bcfab84", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/401be78f2c6fa3ded6b529765ccfe160636a6285/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401be78f2c6fa3ded6b529765ccfe160636a6285/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=401be78f2c6fa3ded6b529765ccfe160636a6285", "patch": "@@ -9,6 +9,19 @@ error: parenthesized generic arguments cannot be used in associated type constra\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n+   |\n+help: use angle brackets instead\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |                            ~  ~\n+\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+   |                           ^--\n+   |                            |\n+   |                            help: remove these parentheses\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n@@ -40,6 +53,22 @@ note: associated type defined here, with 0 generic parameters\n LL |   type Y<'a>;\n    |        ^\n \n-error: aborting due to 4 previous errors\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+   |                           ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y('a) = ()>>) {}\n+   |                             ++\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}]}