{"sha": "e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "node_id": "C_kwDOAAsO6NoAKGUwMDk4YTVjYzNhODdkODU3ZTU5N2FmODI0ZDBjZTFlZDFhZDg1ZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T13:28:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T13:28:44Z"}, "message": "Auto merge of #105012 - WaffleLapkin:into, r=oli-obk\n\nMake `tcx.mk_const` more permissive wrt `kind` argument (`impl Into`)\n\nr? `@oli-obk` you've asked for this >:)", "tree": {"sha": "a3d1d4722f639c7dc9916d2878a16a291536ddde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3d1d4722f639c7dc9916d2878a16a291536ddde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "html_url": "https://github.com/rust-lang/rust/commit/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c372b1470109547e37dcc29ffd4723ac9f66f15d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c372b1470109547e37dcc29ffd4723ac9f66f15d", "html_url": "https://github.com/rust-lang/rust/commit/c372b1470109547e37dcc29ffd4723ac9f66f15d"}, {"sha": "a44eb3c3662b39ca715c8d7bedbc45c18579779e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a44eb3c3662b39ca715c8d7bedbc45c18579779e", "html_url": "https://github.com/rust-lang/rust/commit/a44eb3c3662b39ca715c8d7bedbc45c18579779e"}], "stats": {"total": 184, "additions": 86, "deletions": 98}, "files": [{"sha": "7d43dbc9e0640e35e88a129d78b2b46450ea3ffa", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -870,6 +870,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"convert_case\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n+\n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n@@ -1060,6 +1066,19 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"derive_more\"\n+version = \"0.99.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\n+dependencies = [\n+ \"convert_case\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"rustc_version\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"diff\"\n version = \"0.1.13\"\n@@ -3979,6 +3998,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n+ \"derive_more\",\n  \"either\",\n  \"gsgdt\",\n  \"polonius-engine\","}, {"sha": "ba0ce16bb81ae33d7c674a4b3b1c555c9bf5d7ad", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n-                self.tcx.mk_const(ty::ConstKind::Placeholder(placeholder_mapped), ty).into()\n+                self.tcx.mk_const(placeholder_mapped, ty).into()\n             }\n         }\n     }"}, {"sha": "cf895ed0d3e598ba23eb5effcb52345e75982045", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -753,7 +753,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                                 origin: var_value.origin,\n                                 val: ConstVariableValue::Unknown { universe: self.for_universe },\n                             });\n-                            Ok(self.tcx().mk_const_var(new_var_id, c.ty()))\n+                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }\n@@ -765,10 +765,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     substs,\n                     substs,\n                 )?;\n-                Ok(self.tcx().mk_const(\n-                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                    c.ty(),\n-                ))\n+                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n@@ -975,7 +972,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                                         },\n                                     },\n                                 );\n-                            Ok(self.tcx().mk_const_var(new_var_id, c.ty()))\n+                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }\n@@ -988,10 +985,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     substs,\n                 )?;\n \n-                Ok(self.tcx().mk_const(\n-                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                    c.ty(),\n-                ))\n+                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }"}, {"sha": "f6946929bd23f58dbdd62d37fbbcedb6572f3831", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n             Entry::Vacant(entry) => {\n                 let index = self.const_freshen_count;\n                 self.const_freshen_count += 1;\n-                let ct = self.infcx.tcx.mk_const_infer(freshener(index), ty);\n+                let ct = self.infcx.tcx.mk_const(freshener(index), ty);\n                 entry.insert(ct);\n                 ct\n             }"}, {"sha": "817ae10c7608712d9c3d581ceff14586e73ee990", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -94,13 +94,8 @@ impl<'tcx> InferCtxt<'tcx> {\n                 }))\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n-                self.tcx.mk_const(\n-                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n-                        universe: next_universe,\n-                        name: bound_var,\n-                    }),\n-                    ty,\n-                )\n+                self.tcx\n+                    .mk_const(ty::PlaceholderConst { universe: next_universe, name: bound_var }, ty)\n             },\n         };\n "}, {"sha": "2bcb47cc38399f85b07436e792a707f3ab68bf1f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -1065,7 +1065,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     }\n \n     pub fn next_const_var(&self, ty: Ty<'tcx>, origin: ConstVariableOrigin) -> ty::Const<'tcx> {\n-        self.tcx.mk_const_var(self.next_const_var_id(origin), ty)\n+        self.tcx.mk_const(self.next_const_var_id(origin), ty)\n     }\n \n     pub fn next_const_var_in_universe(\n@@ -1079,7 +1079,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             .borrow_mut()\n             .const_unification_table()\n             .new_key(ConstVarValue { origin, val: ConstVariableValue::Unknown { universe } });\n-        self.tcx.mk_const_var(vid, ty)\n+        self.tcx.mk_const(vid, ty)\n     }\n \n     pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {\n@@ -1195,7 +1195,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                         origin,\n                         val: ConstVariableValue::Unknown { universe: self.universe() },\n                     });\n-                self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()\n+                self.tcx.mk_const(const_var_id, self.tcx.type_of(param.def_id)).into()\n             }\n         }\n     }\n@@ -1580,7 +1580,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         span: Option<Span>,\n     ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n         match self.const_eval_resolve(param_env, unevaluated, span) {\n-            Ok(Some(val)) => Ok(ty::Const::from_value(self.tcx, val, ty)),\n+            Ok(Some(val)) => Ok(self.tcx.mk_const(val, ty)),\n             Ok(None) => {\n                 let tcx = self.tcx;\n                 let def_id = unevaluated.def.did;\n@@ -2049,10 +2049,10 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                     bug!(\"const `{ct}`'s type should not reference params or types\");\n                 }\n                 tcx.mk_const(\n-                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                    ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n                         name: ty::BoundVar::from_usize(idx),\n-                    }),\n+                    },\n                     ty,\n                 )\n                 .into()"}, {"sha": "f6bc4db0d59dfc5466f3927e3a6c10ce55d552c3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -1087,7 +1087,7 @@ where\n                             origin: var_value.origin,\n                             val: ConstVariableValue::Unknown { universe: self.universe },\n                         });\n-                        Ok(self.tcx().mk_const_var(new_var_id, a.ty()))\n+                        Ok(self.tcx().mk_const(new_var_id, a.ty()))\n                     }\n                 }\n             }"}, {"sha": "cf1ab47de861a1c078a3a103dd41768734246169", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -8,6 +8,7 @@ edition = \"2021\"\n [dependencies]\n bitflags = \"1.2.1\"\n chalk-ir = \"0.87.0\"\n+derive_more = \"0.99.17\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n polonius-engine = \"0.13.0\""}, {"sha": "20dde64e51b0118e52e0927fa631e0e989d50629", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -2527,8 +2527,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.item_name(def_id);\n-                let ty_const =\n-                    tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty);\n+                let ty_const = tcx.mk_const(ty::ParamConst::new(index, name), ty);\n                 debug!(?ty_const);\n \n                 return Self::Ty(ty_const);"}, {"sha": "c2be08e497e5bf85bc9174c7a05daf806eb91b51", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -76,10 +76,10 @@ impl<'tcx> Const<'tcx> {\n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n             None => tcx.mk_const(\n-                ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n+                ty::UnevaluatedConst {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                }),\n+                },\n                 ty,\n             ),\n         }\n@@ -134,18 +134,12 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.item_name(def_id);\n-                Some(tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty))\n+                Some(tcx.mk_const(ty::ParamConst::new(index, name), ty))\n             }\n             _ => None,\n         }\n     }\n \n-    /// Interns the given value as a constant.\n-    #[inline]\n-    pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {\n-        tcx.mk_const(ConstKind::Value(val), ty)\n-    }\n-\n     /// Panics if self.kind != ty::ConstKind::Value\n     pub fn to_valtree(self) -> ty::ValTree<'tcx> {\n         match self.kind() {\n@@ -154,26 +148,23 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    pub fn from_scalar_int(tcx: TyCtxt<'tcx>, i: ScalarInt, ty: Ty<'tcx>) -> Self {\n-        let valtree = ty::ValTree::from_scalar_int(i);\n-        Self::from_value(tcx, valtree, ty)\n-    }\n-\n     #[inline]\n     /// Creates a constant with the given integer value and interns it.\n     pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Self {\n         let size = tcx\n             .layout_of(ty)\n             .unwrap_or_else(|e| panic!(\"could not compute layout for {:?}: {:?}\", ty, e))\n             .size;\n-        Self::from_scalar_int(tcx, ScalarInt::try_from_uint(bits, size).unwrap(), ty.value)\n+        tcx.mk_const(\n+            ty::ValTree::from_scalar_int(ScalarInt::try_from_uint(bits, size).unwrap()),\n+            ty.value,\n+        )\n     }\n \n     #[inline]\n     /// Creates an interned zst constant.\n     pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n-        let valtree = ty::ValTree::zst();\n-        Self::from_value(tcx, valtree, ty)\n+        tcx.mk_const(ty::ValTree::zst(), ty)\n     }\n \n     #[inline]\n@@ -220,7 +211,7 @@ impl<'tcx> Const<'tcx> {\n     pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Const<'tcx> {\n         if let Some(val) = self.kind().try_eval_for_typeck(tcx, param_env) {\n             match val {\n-                Ok(val) => Const::from_value(tcx, val, self.ty()),\n+                Ok(val) => tcx.mk_const(val, self.ty()),\n                 Err(guar) => tcx.const_error_with_guaranteed(self.ty(), guar),\n             }\n         } else {"}, {"sha": "becc2b805dd1ee9ffb3ca9c50eb6b346e697a996", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -49,6 +49,7 @@ impl<'tcx> UnevaluatedConst<'tcx> {\n /// Represents a constant in Rust.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n+#[derive(derive_more::From)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ty::ParamConst),\n@@ -71,12 +72,19 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n+    #[from(ignore)]\n     Error(ErrorGuaranteed),\n \n     /// Expr which contains an expression which has partially evaluated items.\n     Expr(Expr<'tcx>),\n }\n \n+impl<'tcx> From<ty::ConstVid<'tcx>> for ConstKind<'tcx> {\n+    fn from(const_vid: ty::ConstVid<'tcx>) -> Self {\n+        InferConst::Var(const_vid).into()\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(HashStable, TyEncodable, TyDecodable, TypeVisitable, TypeFoldable)]\n pub enum Expr<'tcx> {"}, {"sha": "3590aae51c3dfac8ae1c7fefb95f8b7e13beb056", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -17,8 +17,8 @@ use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n-    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, FloatTy, FloatVar, FloatVid,\n-    GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n+    ClosureSizeProfileData, Const, ConstS, DefIdTree, FloatTy, FloatVar, FloatVid,\n+    GenericParamDefKind, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n     PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy,\n     Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut,\n     UintTy, Visibility,\n@@ -2604,13 +2604,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_const(self, kind: ty::ConstKind<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const_internal(ty::ConstS { kind, ty })\n-    }\n-\n-    #[inline]\n-    pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstKind::Infer(InferConst::Var(v)), ty)\n+    pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const_internal(ty::ConstS { kind: kind.into(), ty })\n     }\n \n     #[inline]\n@@ -2628,30 +2623,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Infer(it))\n     }\n \n-    #[inline]\n-    pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n-        self.mk_const(ty::ConstKind::Infer(ic), ty)\n-    }\n-\n     #[inline]\n     pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {\n         self.mk_ty(Param(ParamTy { index, name }))\n     }\n \n-    #[inline]\n-    pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstKind::Param(ParamConst { index, name }), ty)\n-    }\n-\n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n             GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n-            GenericParamDefKind::Const { .. } => {\n-                self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()\n-            }\n+            GenericParamDefKind::Const { .. } => self\n+                .mk_const(\n+                    ParamConst { index: param.index, name: param.name },\n+                    self.type_of(param.def_id),\n+                )\n+                .into(),\n         }\n     }\n "}, {"sha": "5303341ba443c6c285fc170b96aa81535641b3ad", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -1468,8 +1468,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             (ty::ValTree::Branch(_), ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) => {\n-                let contents =\n-                    self.tcx().destructure_const(ty::Const::from_value(self.tcx(), valtree, ty));\n+                let contents = self.tcx().destructure_const(self.tcx().mk_const(valtree, ty));\n                 let fields = contents.fields.iter().copied();\n                 match *ty.kind() {\n                     ty::Array(..) => {"}, {"sha": "c759fb6d5e4f4c50c05a7972032f83e6218f10b1", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -663,10 +663,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 au.substs,\n                 bu.substs,\n             )?;\n-            return Ok(tcx.mk_const(\n-                ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n-                a.ty(),\n-            ));\n+            return Ok(tcx.mk_const(ty::UnevaluatedConst { def: au.def, substs }, a.ty()));\n         }\n         // Before calling relate on exprs, it is necessary to ensure that the nested consts\n         // have identical types."}, {"sha": "32c0207cb680c2f89a51f255b1e8e47d792439ef", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty, span, literal }\n             }\n             ExprKind::ConstParam { param, def_id: _ } => {\n-                let const_param = tcx.mk_const(ty::ConstKind::Param(param), expr.ty);\n+                let const_param = tcx.mk_const(param, expr.ty);\n                 let literal = ConstantKind::Ty(const_param);\n \n                 Constant { user_ty: None, span, literal }"}, {"sha": "a9ed945d4a15a9b3356653fb623d40ed6b0ed6d5", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -61,5 +61,5 @@ pub(crate) fn lit_to_const<'tcx>(\n         _ => return Err(LitToConstError::TypeError),\n     };\n \n-    Ok(ty::Const::from_value(tcx, valtree, ty))\n+    Ok(tcx.mk_const(valtree, ty))\n }"}, {"sha": "8e04da4f9be2479aa584270611a9607279b495d8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -799,9 +799,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n-                                Ok(Some(valtree)) => {\n-                                    Ok(ty::Const::from_value(selcx.tcx(), valtree, c.ty()))\n-                                }\n+                                Ok(Some(valtree)) => Ok(selcx.tcx().mk_const(valtree, c.ty())),\n                                 Ok(None) => {\n                                     let tcx = self.tcx;\n                                     let def_id = unevaluated.def.did;"}, {"sha": "e33e89e9c5c3eeadc65ffa9fa1dc5cf53e75d2e8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -818,7 +818,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderConst { universe, name: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n-                self.infcx.tcx.mk_const(ty::ConstKind::Placeholder(p), ct.ty())\n+                self.infcx.tcx.mk_const(p, ct.ty())\n             }\n             _ => ct.super_fold_with(self),\n         }"}, {"sha": "f8ff31f971be66756353fd39b2f8805ff4c028f6", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::thir::visit;\n use rustc_middle::thir::visit::Visitor;\n use rustc_middle::ty::abstract_const::CastKind;\n-use rustc_middle::ty::{self, ConstKind, Expr, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Expr, TyCtxt, TypeVisitable};\n use rustc_middle::{mir, thir};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n@@ -32,10 +32,8 @@ pub(crate) fn destructure_const<'tcx>(\n     let (fields, variant) = match const_.ty().kind() {\n         ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n             // construct the consts for the elements of the array/slice\n-            let field_consts = branches\n-                .iter()\n-                .map(|b| tcx.mk_const(ty::ConstKind::Value(*b), *inner_ty))\n-                .collect::<Vec<_>>();\n+            let field_consts =\n+                branches.iter().map(|b| tcx.mk_const(*b, *inner_ty)).collect::<Vec<_>>();\n             debug!(?field_consts);\n \n             (field_consts, None)\n@@ -53,7 +51,7 @@ pub(crate) fn destructure_const<'tcx>(\n \n             for (field, field_valtree) in iter::zip(fields, branches) {\n                 let field_ty = field.ty(tcx, substs);\n-                let field_const = tcx.mk_const(ty::ConstKind::Value(*field_valtree), field_ty);\n+                let field_const = tcx.mk_const(*field_valtree, field_ty);\n                 field_consts.push(field_const);\n             }\n             debug!(?field_consts);\n@@ -62,9 +60,7 @@ pub(crate) fn destructure_const<'tcx>(\n         }\n         ty::Tuple(elem_tys) => {\n             let fields = iter::zip(*elem_tys, branches)\n-                .map(|(elem_ty, elem_valtree)| {\n-                    tcx.mk_const(ty::ConstKind::Value(*elem_valtree), elem_ty)\n-                })\n+                .map(|(elem_ty, elem_valtree)| tcx.mk_const(*elem_valtree, elem_ty))\n                 .collect::<Vec<_>>();\n \n             (fields, None)\n@@ -129,17 +125,17 @@ fn recurse_build<'tcx>(\n         }\n         &ExprKind::NonHirLiteral { lit, user_ty: _ } => {\n             let val = ty::ValTree::from_scalar_int(lit);\n-            ty::Const::from_value(tcx, val, node.ty)\n+            tcx.mk_const(val, node.ty)\n         }\n         &ExprKind::ZstLiteral { user_ty: _ } => {\n             let val = ty::ValTree::zst();\n-            ty::Const::from_value(tcx, val, node.ty)\n+            tcx.mk_const(val, node.ty)\n         }\n         &ExprKind::NamedConst { def_id, substs, user_ty: _ } => {\n             let uneval = ty::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n-            tcx.mk_const(ty::ConstKind::Unevaluated(uneval), node.ty)\n+            tcx.mk_const(uneval, node.ty)\n         }\n-        ExprKind::ConstParam { param, .. } => tcx.mk_const(ty::ConstKind::Param(*param), node.ty),\n+        ExprKind::ConstParam { param, .. } => tcx.mk_const(*param, node.ty),\n \n         ExprKind::Call { fun, args, .. } => {\n             let fun = recurse_build(tcx, body, *fun, root_span)?;\n@@ -149,16 +145,16 @@ fn recurse_build<'tcx>(\n                 new_args.push(recurse_build(tcx, body, id, root_span)?);\n             }\n             let new_args = tcx.mk_const_list(new_args.iter());\n-            tcx.mk_const(ConstKind::Expr(Expr::FunctionCall(fun, new_args)), node.ty)\n+            tcx.mk_const(Expr::FunctionCall(fun, new_args), node.ty)\n         }\n         &ExprKind::Binary { op, lhs, rhs } if check_binop(op) => {\n             let lhs = recurse_build(tcx, body, lhs, root_span)?;\n             let rhs = recurse_build(tcx, body, rhs, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::Binop(op, lhs, rhs)), node.ty)\n+            tcx.mk_const(Expr::Binop(op, lhs, rhs), node.ty)\n         }\n         &ExprKind::Unary { op, arg } if check_unop(op) => {\n             let arg = recurse_build(tcx, body, arg, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::UnOp(op, arg)), node.ty)\n+            tcx.mk_const(Expr::UnOp(op, arg), node.ty)\n         }\n         // This is necessary so that the following compiles:\n         //\n@@ -179,11 +175,11 @@ fn recurse_build<'tcx>(\n         // This is important so that `N as usize as usize` doesnt unify with `N as usize`. (untested)\n         &ExprKind::Use { source } => {\n             let arg = recurse_build(tcx, body, source, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::Cast(CastKind::Use, arg, node.ty)), node.ty)\n+            tcx.mk_const(Expr::Cast(CastKind::Use, arg, node.ty), node.ty)\n         }\n         &ExprKind::Cast { source } => {\n             let arg = recurse_build(tcx, body, source, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::Cast(CastKind::As, arg, node.ty)), node.ty)\n+            tcx.mk_const(Expr::Cast(CastKind::As, arg, node.ty), node.ty)\n         }\n         ExprKind::Borrow { arg, .. } => {\n             let arg_node = &body.exprs[*arg];"}, {"sha": "a7f4016728416b544aa5068d70ff66914768ab1e", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "patch": "@@ -98,6 +98,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"chalk-ir\",\n     \"chalk-solve\",\n     \"chrono\",\n+    \"convert_case\", // dependency of derive_more\n     \"compiler_builtins\",\n     \"cpufeatures\",\n     \"crc32fast\",\n@@ -108,6 +109,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"crypto-common\",\n     \"cstr\",\n     \"datafrog\",\n+    \"derive_more\",\n     \"difference\",\n     \"digest\",\n     \"displaydoc\","}]}