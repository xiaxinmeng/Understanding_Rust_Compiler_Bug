{"sha": "3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "node_id": "C_kwDOAAsO6NoAKDNhNDFmMjI2YzVjODk4MDZmMjNlZjY3NTAyZWEyOWJlZGY3ZDljZTg", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T14:02:00Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T14:02:00Z"}, "message": "Exploring emitting other sorts of `span`s", "tree": {"sha": "789c6f642babd08d33ef0f9771c469e956ff211a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789c6f642babd08d33ef0f9771c469e956ff211a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "html_url": "https://github.com/rust-lang/rust/commit/3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a41f226c5c89806f23ef67502ea29bedf7d9ce8/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9fa25e82b3af4691df275f53c73bc439e84d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9fa25e82b3af4691df275f53c73bc439e84d78", "html_url": "https://github.com/rust-lang/rust/commit/ab9fa25e82b3af4691df275f53c73bc439e84d78"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "48feb365ed8520c6220a7f644469cd065234187a", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a41f226c5c89806f23ef67502ea29bedf7d9ce8/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a41f226c5c89806f23ef67502ea29bedf7d9ce8/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs?ref=3a41f226c5c89806f23ef67502ea29bedf7d9ce8", "patch": "@@ -1,5 +1,6 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{diagnostics::{span_lint_and_help, span_lint_and_then, span_lint_and_sugg}, source::{indent_of, snippet}};\n use rustc_ast::Attribute;\n+use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::dep_graph::DepContext;\n@@ -50,14 +51,34 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutRepr {\n             };\n \n             if !has_repr_attr(cx, attrs) {\n-                span_lint_and_help(\n-                    cx,\n-                    TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n-                    lint_span,\n-                    \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n-                    None,\n-                    \"consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\",\n-                );\n+                let suggestion_span = item.span.shrink_to_lo();\n+                let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n+\n+                span_lint_and_sugg(cx, TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR, item.span, \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\", \"consider adding `#[repr(C)]` or another `repr` attribute\", format!(\"#[repr(C)]\\n{}\", snippet(cx, item.span.shrink_to_lo().to(item.ident.span), \"..\")), Applicability::MaybeIncorrect);\n+\n+                // span_lint_and_then(\n+                //     cx,\n+                //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n+                //     item.span,\n+                //     \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n+                //     |diag| {\n+                //         let sugg = format!(\"#[repr(C)]\\n{}\", indent);\n+                //         let sugg2 = format!(\"#[repr(C)]\\n{}\", item.ident.span);\n+                //         diag.span_suggestion(item.span,\n+                //                               \"consider adding `#[repr(C)]` or another `repr` attribute\",\n+                //                               sugg2,\n+                //                               Applicability::MaybeIncorrect);\n+                //     }\n+                // );\n+              \n+                // span_lint_and_help(\n+                //     cx,\n+                //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n+                //     lint_span,\n+                //     \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n+                //     None,\n+                //     \"consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\",\n+                // );\n             }\n         }\n     }\n@@ -91,7 +112,8 @@ fn has_repr_attr(cx: &LateContext<'tcx>, attrs: &[Attribute]) -> bool {\n     // NOTE: there's at least four other ways to do this but I liked this one the best. (All five agreed\n     // on all testcases (when i wrote this comment. I added a few since then).) Happy to use another;\n     // they're in the commit history if you want to look (or I can go find them).\n+    let sess = cx.tcx.sess(); // are captured values in closures evaluated once or every time?\n     attrs\n         .iter()\n-        .any(|attr| !rustc_attr::find_repr_attrs(cx.tcx.sess(), attr).is_empty())\n+        .any(|attr| !rustc_attr::find_repr_attrs(sess, attr).is_empty())\n }"}]}