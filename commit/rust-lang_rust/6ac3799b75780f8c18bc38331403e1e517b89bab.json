{"sha": "6ac3799b75780f8c18bc38331403e1e517b89bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzM3OTliNzU3ODBmOGMxOGJjMzgzMzE0MDNlMWU1MTdiODliYWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-17T23:24:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T01:27:46Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "eb26c741e10643d7ed35960a401bb233f16891e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb26c741e10643d7ed35960a401bb233f16891e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac3799b75780f8c18bc38331403e1e517b89bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac3799b75780f8c18bc38331403e1e517b89bab", "html_url": "https://github.com/rust-lang/rust/commit/6ac3799b75780f8c18bc38331403e1e517b89bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac3799b75780f8c18bc38331403e1e517b89bab/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b283881dcc45466d7fe0e14bf76f1d593f7e30b0", "html_url": "https://github.com/rust-lang/rust/commit/b283881dcc45466d7fe0e14bf76f1d593f7e30b0"}], "stats": {"total": 323, "additions": 155, "deletions": 168}, "files": [{"sha": "9f8f76e1fea6e2fe597d9661226921466ec4d9ce", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 22, "deletions": 40, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -57,13 +57,13 @@ place!\n ## Threads\n \n Rust's standard library provides a library for 'threads', which allow you to\n-run Rust code in parallel. Here's a basic example of using `Thread`:\n+run Rust code in parallel. Here's a basic example of using `std::thread`:\n \n ```\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n-    Thread::scoped(|| {\n+    thread::scoped(|| {\n         println!(\"Hello from a thread!\");\n     });\n }\n@@ -73,10 +73,10 @@ The `Thread::scoped()` method accepts a closure, which is executed in a new\n thread. It's called `scoped` because this thread returns a join guard:\n \n ```\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n-    let guard = Thread::scoped(|| {\n+    let guard = thread::scoped(|| {\n         println!(\"Hello from a thread!\");\n     });\n \n@@ -85,40 +85,22 @@ fn main() {\n ```\n \n When `guard` goes out of scope, it will block execution until the thread is\n-finished. If we didn't want this behaviour, we could use `Thread::spawn()`:\n+finished. If we didn't want this behaviour, we could use `thread::spawn()`:\n \n ```\n-use std::thread::Thread;\n+use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n \n fn main() {\n-    Thread::spawn(|| {\n+    thread::spawn(|| {\n         println!(\"Hello from a thread!\");\n     });\n \n     timer::sleep(Duration::milliseconds(50));\n }\n ```\n \n-Or call `.detach()`:\n-\n-```\n-use std::thread::Thread;\n-use std::old_io::timer;\n-use std::time::Duration;\n-\n-fn main() {\n-    let guard = Thread::scoped(|| {\n-        println!(\"Hello from a thread!\");\n-    });\n-\n-    guard.detach();\n-\n-    timer::sleep(Duration::milliseconds(50));\n-}\n-```\n-\n We need to `sleep` here because when `main()` ends, it kills all of the\n running threads.\n \n@@ -164,15 +146,15 @@ As an example, here is a Rust program that would have a data race in many\n languages. It will not compile:\n \n ```ignore\n-use std::thread::Thread;\n+use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n \n fn main() {\n     let mut data = vec![1u32, 2, 3];\n \n     for i in 0..2 {\n-        Thread::spawn(move || {\n+        thread::spawn(move || {\n             data[i] += 1;\n         });\n     }\n@@ -203,7 +185,7 @@ only one person at a time can mutate what's inside. For that, we can use the\n but for a different reason:\n \n ```ignore\n-use std::thread::Thread;\n+use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n use std::sync::Mutex;\n@@ -213,7 +195,7 @@ fn main() {\n \n     for i in 0..2 {\n         let data = data.lock().unwrap();\n-        Thread::spawn(move || {\n+        thread::spawn(move || {\n             data[i] += 1;\n         });\n     }\n@@ -255,7 +237,7 @@ We can use `Arc<T>` to fix this. Here's the working version:\n \n ```\n use std::sync::{Arc, Mutex};\n-use std::thread::Thread;\n+use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n \n@@ -264,7 +246,7 @@ fn main() {\n \n     for i in 0us..2 {\n         let data = data.clone();\n-        Thread::spawn(move || {\n+        thread::spawn(move || {\n             let mut data = data.lock().unwrap();\n             data[i] += 1;\n         });\n@@ -280,14 +262,14 @@ thread more closely:\n \n ```\n # use std::sync::{Arc, Mutex};\n-# use std::thread::Thread;\n+# use std::thread;\n # use std::old_io::timer;\n # use std::time::Duration;\n # fn main() {\n #     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n #     for i in 0us..2 {\n #         let data = data.clone();\n-Thread::spawn(move || {\n+thread::spawn(move || {\n     let mut data = data.lock().unwrap();\n     data[i] += 1;\n });\n@@ -315,7 +297,7 @@ than waiting for a specific time:\n \n ```\n use std::sync::{Arc, Mutex};\n-use std::thread::Thread;\n+use std::thread;\n use std::sync::mpsc;\n \n fn main() {\n@@ -326,7 +308,7 @@ fn main() {\n     for _ in 0..10 {\n         let (data, tx) = (data.clone(), tx.clone());\n \n-        Thread::spawn(move || {\n+        thread::spawn(move || {\n             let mut data = data.lock().unwrap();\n             *data += 1;\n \n@@ -348,7 +330,7 @@ is `Send` over the channel!\n \n ```\n use std::sync::{Arc, Mutex};\n-use std::thread::Thread;\n+use std::thread;\n use std::sync::mpsc;\n \n fn main() {\n@@ -357,7 +339,7 @@ fn main() {\n     for _ in 0..10 {\n         let tx = tx.clone();\n \n-        Thread::spawn(move || {\n+        thread::spawn(move || {\n             let answer = 42u32;\n \n             tx.send(answer);\n@@ -378,9 +360,9 @@ A `panic!` will crash the currently executing thread. You can use Rust's\n threads as a simple isolation mechanism:\n \n ```\n-use std::thread::Thread;\n+use std::thread;\n \n-let result = Thread::scoped(move || {\n+let result = thread::spawn(move || {\n     panic!(\"oops!\");\n }).join();\n "}, {"sha": "19ec245300d02ab325fec9e3cc6d834a5877201e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -87,8 +87,8 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n /// - symmetric: `a == b` implies `b == a`; and\n /// - transitive: `a == b` and `b == c` implies `a == c`.\n ///\n-/// This property cannot be checked by the compiler, and therefore `Eq` implies `PartialEq`, and\n-/// has no extra methods.\n+/// This property cannot be checked by the compiler, and therefore `Eq` implies\n+/// `PartialEq`, and has no extra methods.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // FIXME #13101: this method is used solely by #[deriving] to\n@@ -100,6 +100,7 @@ pub trait Eq: PartialEq<Self> {\n     // This should never be implemented by hand.\n     #[doc(hidden)]\n     #[inline(always)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn assert_receiver_is_total_eq(&self) {}\n }\n \n@@ -408,7 +409,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// let result = cmp::partial_min(std::f64::NAN, &1.0);\n+/// let result = cmp::partial_min(std::f64::NAN, 1.0);\n /// assert_eq!(result, None);\n /// ```\n #[inline]\n@@ -439,7 +440,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// ```\n /// use std::cmp;\n ///\n-/// let result = cmp::partial_max(std::f64::NAN, &1.0);\n+/// let result = cmp::partial_max(std::f64::NAN, 1.0);\n /// assert_eq!(result, None);\n /// ```\n #[inline]"}, {"sha": "c743119f4090911bb5d69e0d7383f82e1efc6fef", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -92,6 +92,7 @@\n #![feature(collections)]\n #![feature(int_uint)]\n #![feature(staged_api)]\n+#![feature(str_words)]\n #![cfg_attr(test, feature(rustc_private))]\n \n #[cfg(test)] #[macro_use] extern crate log;"}, {"sha": "234809e5284307ed6fafa46c8d292a08cc28c1ec", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -37,7 +37,6 @@\n #![feature(rustc_private)]\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(unicode)]\n \n extern crate arena;\n@@ -73,7 +72,7 @@ use rustc::metadata;\n use rustc::util::common::time;\n \n use std::cmp::Ordering::Equal;\n-use std::old_io;\n+use std::old_io::{self, stdio};\n use std::iter::repeat;\n use std::env;\n use std::sync::mpsc::channel;\n@@ -780,7 +779,7 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n         cfg = cfg.stack_size(STACK_SIZE);\n     }\n \n-    match cfg.scoped(move || { std::old_io::stdio::set_stderr(box w); f() }).join() {\n+    match cfg.spawn(move || { stdio::set_stderr(box w); f() }).unwrap().join() {\n         Ok(()) => { /* fallthrough */ }\n         Err(value) => {\n             // Thread panicked without emitting a fatal diagnostic"}, {"sha": "9934d9993d61df0b2b95e6bacc048fd181aa616d", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -939,7 +939,7 @@ fn run_work_multithreaded(sess: &Session,\n             }\n \n             tx.take().unwrap().send(()).unwrap();\n-        });\n+        }).unwrap();\n     }\n \n     let mut panicked = false;"}, {"sha": "bab734db126505efa94ec072d6bd92d91fb2f6de", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -34,6 +34,7 @@\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(unicode)]\n+#![feature(str_words)]\n \n extern crate arena;\n extern crate getopts;\n@@ -55,6 +56,7 @@ use std::env;\n use std::old_io::File;\n use std::old_io;\n use std::rc::Rc;\n+use std::sync::mpsc::channel;\n use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};\n@@ -125,8 +127,8 @@ pub fn main() {\n     let res = std::thread::Builder::new().stack_size(STACK_SIZE).scoped(move || {\n         let s = env::args().collect::<Vec<_>>();\n         main_args(&s)\n-    }).join();\n-    env::set_exit_status(res.ok().unwrap() as i32);\n+    }).unwrap().join();\n+    env::set_exit_status(res as i32);\n }\n \n pub fn opts() -> Vec<getopts::OptGroup> {\n@@ -365,12 +367,14 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     let cr = Path::new(cratefile);\n     info!(\"starting to run rustc\");\n \n-    let (mut krate, analysis) = std::thread::spawn(move || {\n+    let (tx, rx) = channel();\n+    std::thread::spawn(move || {\n         use rustc::session::config::Input;\n \n         let cr = cr;\n-        core::run_core(paths, cfgs, externs, Input::File(cr), triple)\n+        tx.send(core::run_core(paths, cfgs, externs, Input::File(cr), triple)).unwrap();\n     }).join().map_err(|_| \"rustc failed\").unwrap();\n+    let (mut krate, analysis) = rx.recv().unwrap();\n     info!(\"finished with rustc\");\n     let mut analysis = Some(analysis);\n     ANALYSISKEY.with(|s| {"}, {"sha": "f3a27877e5c58512fc8c6dce9dc08749141f12d5", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use boxed::Box;\n+use prelude::v1::*;\n+\n use cmp;\n use io;\n use mem;"}, {"sha": "a8355c340009f5aa2580b740f9b0fcf47dcadb2e", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -147,21 +147,16 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use prelude::v1::*;\n+\n use any::Any;\n-use boxed::Box;\n use cell::UnsafeCell;\n-use clone::Clone;\n use fmt;\n use io;\n-use marker::{Send, Sync};\n-use ops::{Drop, FnOnce};\n-use option::Option::{self, Some, None};\n-use result::Result::{Err, Ok};\n-use sync::{Mutex, Condvar, Arc};\n-use str::Str;\n-use string::String;\n+use marker;\n+use old_io::stdio;\n use rt::{self, unwind};\n-use old_io::{Writer, stdio};\n+use sync::{Mutex, Condvar, Arc};\n use thunk::Thunk;\n use time::Duration;\n \n@@ -264,7 +259,9 @@ impl Builder {\n     pub fn scoped<'a, T, F>(self, f: F) -> io::Result<JoinGuard<'a, T>> where\n         T: Send + 'a, F: FnOnce() -> T, F: Send + 'a\n     {\n-        self.spawn_inner(Thunk::new(f)).map(JoinGuard)\n+        self.spawn_inner(Thunk::new(f)).map(|inner| {\n+            JoinGuard { inner: inner, _marker: marker::PhantomData }\n+        })\n     }\n \n     fn spawn_inner<T: Send>(self, f: Thunk<(), T>) -> io::Result<JoinInner<T>> {\n@@ -643,7 +640,10 @@ impl Drop for JoinHandle {\n /// permission.\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct JoinGuard<'a, T: 'a>(JoinInner<T>);\n+pub struct JoinGuard<'a, T: 'a> {\n+    inner: JoinInner<T>,\n+    _marker: marker::PhantomData<&'a T>,\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Send + 'a> Sync for JoinGuard<'a, T> {}\n@@ -652,7 +652,7 @@ impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n     /// Extract a handle to the thread this guard will join on.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn thread(&self) -> &Thread {\n-        &self.0.thread\n+        &self.inner.thread\n     }\n \n     /// Wait for the associated thread to finish, returning the result of the thread's\n@@ -663,7 +663,7 @@ impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n     /// Panics on the child thread are propagated by panicking the parent.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn join(mut self) -> T {\n-        match self.0.join() {\n+        match self.inner.join() {\n             Ok(res) => res,\n             Err(_) => panic!(\"child thread {:?} panicked\", self.thread()),\n         }\n@@ -676,17 +676,17 @@ impl<T: Send> JoinGuard<'static, T> {\n     #[deprecated(since = \"1.0.0\", reason = \"use spawn instead\")]\n     #[unstable(feature = \"std_misc\")]\n     pub fn detach(mut self) {\n-        unsafe { imp::detach(self.0.native) };\n-        self.0.joined = true; // avoid joining in the destructor\n+        unsafe { imp::detach(self.inner.native) };\n+        self.inner.joined = true; // avoid joining in the destructor\n     }\n }\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: Send + 'a> Drop for JoinGuard<'a, T> {\n     fn drop(&mut self) {\n-        if !self.0.joined {\n-            unsafe { imp::join(self.0.native) };\n+        if !self.inner.joined {\n+            unsafe { imp::join(self.inner.native) };\n         }\n     }\n }"}, {"sha": "304f370a1993e0b44284401793c4389f98774d01", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -59,6 +59,7 @@\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(unicode)]\n+#![feature(std_misc)]\n #![feature(env)]\n #![cfg_attr(windows, feature(libc))]\n "}, {"sha": "62bf95d3b7bf13ea10b11a4838ba2f0ffa19fae1", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -75,7 +75,7 @@ use std::iter::repeat;\n use std::num::{Float, Int};\n use std::env;\n use std::sync::mpsc::{channel, Sender};\n-use std::thread::{self, Thread};\n+use std::thread;\n use std::thunk::{Thunk, Invoke};\n use std::time::Duration;\n \n@@ -895,7 +895,7 @@ pub fn run_test(opts: &TestOpts,\n                 cfg = cfg.stderr(box stderr as Box<Writer + Send>);\n             }\n \n-            let result_guard = cfg.scoped(move || { testfn.invoke(()) });\n+            let result_guard = cfg.spawn(move || { testfn.invoke(()) }).unwrap();\n             let stdout = reader.read_to_end().unwrap().into_iter().collect();\n             let test_result = calc_result(&desc, result_guard.join());\n             monitor_ch.send((desc.clone(), test_result, stdout)).unwrap();"}, {"sha": "b6d371e4b119fa932b6a615caee83cd5e50c0878", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -12,44 +12,44 @@ use std::{int, i8, i16, i32, i64};\n use std::thread;\n \n fn main() {\n-    assert!(thread::spawn(move|| int::MIN / -1).join().is_err());\n+    assert!(thread::spawn(move|| { int::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| i8::MIN / -1).join().is_err());\n+    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| i16::MIN / -1).join().is_err());\n+    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| i32::MIN / -1).join().is_err());\n+    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| i64::MIN / -1).join().is_err());\n+    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| 1is / 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1is / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n-    assert!(thread::spawn(move|| 1i8 / 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n-    assert!(thread::spawn(move|| 1i16 / 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n-    assert!(thread::spawn(move|| 1i32 / 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n-    assert!(thread::spawn(move|| 1i64 / 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n-    assert!(thread::spawn(move|| int::MIN % -1).join().is_err());\n+    assert!(thread::spawn(move|| { int::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| i8::MIN % -1).join().is_err());\n+    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| i16::MIN % -1).join().is_err());\n+    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| i32::MIN % -1).join().is_err());\n+    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| i64::MIN % -1).join().is_err());\n+    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| 1is % 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1is % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n-    assert!(thread::spawn(move|| 1i8 % 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n-    assert!(thread::spawn(move|| 1i16 % 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n-    assert!(thread::spawn(move|| 1i32 % 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n-    assert!(thread::spawn(move|| 1i64 % 0).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n }"}, {"sha": "a4f46cbd1874fade8cc21cc143f90a7f5cb0fe2d", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -13,9 +13,6 @@\n #![allow(dead_code)]\n #![deny(non_snake_case)]\n \n-use std::old_io::File;\n-use std::old_io::IoError;\n-\n mod foo {\n     pub enum Foo { Foo }\n }\n@@ -36,6 +33,7 @@ fn main() {\n         Foo => {}\n //~^ ERROR variable `Foo` should have a snake case name such as `foo`\n //~^^ WARN `Foo` is named the same as one of the variants of the type `foo::Foo`\n+//~^^^ WARN unused variable: `Foo`\n     }\n \n     test(1);"}, {"sha": "3a5ac5a10095742c13772734fc3e9f1c8914e458", "filename": "src/test/run-fail/panic-task-name-none.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-none.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -13,9 +13,8 @@\n use std::thread;\n \n fn main() {\n-    let r: Result<int,_> = thread::spawn(move|| {\n+    let r: Result<(),_> = thread::spawn(move|| {\n         panic!(\"test\");\n-        1\n     }).join();\n     assert!(r.is_ok());\n }"}, {"sha": "8cab9e05f96e87ca3f6569f7cfe461a284876f14", "filename": "src/test/run-fail/panic-task-name-owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -13,9 +13,9 @@\n use std::thread::Builder;\n \n fn main() {\n-    let r: Result<int,_> = Builder::new().name(\"owned name\".to_string()).scoped(move|| {\n+    let r: () = Builder::new().name(\"owned name\".to_string()).scoped(move|| {\n         panic!(\"test\");\n-        1\n-    }).join();\n-    assert!(r.is_ok());\n+        ()\n+    }).unwrap().join();\n+    panic!();\n }"}, {"sha": "96ae7e3d3368f2fdc5abed5d7c8fbbbdd5f16e85", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -27,7 +27,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::thread::Thread;\n+use std::thread;\n \n enum Conzabble {\n     Bickwick(Foo)\n@@ -48,5 +48,5 @@ pub fn fails() {\n }\n \n pub fn main() {\n-    Thread::scoped(fails).join();\n+    thread::spawn(fails).join();\n }"}, {"sha": "e66b5d21e17fabf498b081f82d788b015a246802", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use std::time::Duration;\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n-    Thread::scoped(move|| customtask()).join().ok().unwrap();\n+    thread::spawn(move|| customtask()).join().ok().unwrap();\n }\n \n fn customtask() {"}, {"sha": "9448e605937f728b36c2410841f3ec3d68af1054", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-use std::thread::Thread;\n+use std::thread;\n use std::mem;\n \n fn main() {\n@@ -20,7 +20,7 @@ fn main() {\n     // Check that both closures are capturing by value\n     assert_eq!(1, mem::size_of_val(&closure));\n \n-    Thread::scoped(move|| {\n+    thread::spawn(move|| {\n         let ok = closure;\n     }).join().ok().unwrap();\n }"}, {"sha": "0e42f2593f298d23442d1e626d571626f9b7bfc8", "filename": "src/test/run-pass/issue-16671.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16671.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -18,11 +18,11 @@\n // A var moved into a proc, that has a mutable loan path should\n // not trigger a misleading unused_mut warning.\n \n-use std::thread::Thread;\n+use std::thread;\n \n pub fn main() {\n     let mut stdin = std::old_io::stdin();\n-    Thread::spawn(move|| {\n+    thread::spawn(move|| {\n         let _ = stdin.read_to_end();\n     });\n }"}, {"sha": "b40a726a2c397223e3746eba91e9f1be0e09847f", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -10,14 +10,14 @@\n \n use std::old_io::println;\n use std::sync::mpsc::channel;\n-use std::thread::Thread;\n+use std::thread;\n \n pub fn main() {\n     let (tx, rx) = channel();\n \n     tx.send(\"hello, world\").unwrap();\n \n-    Thread::scoped(move|| {\n+    thread::spawn(move|| {\n         println(rx.recv().unwrap());\n     }).join().ok().unwrap();\n }"}, {"sha": "ef30f9182ba69b2dd77f2d810068b61e204366d4", "filename": "src/test/run-pass/issue-4448.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4448.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n use std::sync::mpsc::channel;\n-use std::thread::Thread;\n+use std::thread;\n \n pub fn main() {\n     let (tx, rx) = channel::<&'static str>();\n \n-    let t = Thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         assert_eq!(rx.recv().unwrap(), \"hello, world\");\n     });\n "}, {"sha": "72a1ec436f307d660d0e0b899e0e77bf8b0b6906", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -9,31 +9,31 @@\n // except according to those terms.\n \n use std::num::Int;\n-use std::thread::Thread;\n+use std::thread;\n \n // Avoid using constants, which would trigger compile-time errors.\n fn min_val<T: Int>() -> T { Int::min_value() }\n fn zero<T: Int>() -> T { Int::zero() }\n \n fn main() {\n-    assert!(Thread::scoped(move|| min_val::<isize>() / -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i8>() / -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i16>() / -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i32>() / -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i64>() / -1).join().is_err());\n-    assert!(Thread::scoped(move|| 1is / zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i8 / zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i16 / zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i32 / zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i64 / zero()).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<isize>() % -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i8>() % -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i16>() % -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i32>() % -1).join().is_err());\n-    assert!(Thread::scoped(move|| min_val::<i64>() % -1).join().is_err());\n-    assert!(Thread::scoped(move|| 1is % zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i8 % zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i16 % zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i32 % zero()).join().is_err());\n-    assert!(Thread::scoped(move|| 1i64 % zero()).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<isize>() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i8>() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i16>() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i32>() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i64>() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1is / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<isize>() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i8>() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i16>() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i32>() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { min_val::<i64>() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1is % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 % zero(); }).join().is_err());\n }"}, {"sha": "b03c4b5ff47badc1e096c0b85d9298cb9ca0f159", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -13,7 +13,7 @@\n \n use std::cell::Cell;\n use std::fmt;\n-use std::thread::Thread;\n+use std::thread;\n \n struct Foo(Cell<int>);\n \n@@ -27,7 +27,7 @@ impl fmt::Debug for Foo {\n }\n \n pub fn main() {\n-    Thread::scoped(move|| {\n+    thread::spawn(move|| {\n         let mut f = Foo(Cell::new(0));\n         println!(\"{:?}\", f);\n         let Foo(ref mut f) = f;"}, {"sha": "5ce32e4fe2ccb54975d20fe9c3db3dc826ace517", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: -Z no-landing-pads\n \n-use std::thread::Thread;\n+use std::thread;\n \n static mut HIT: bool = false;\n \n@@ -23,7 +23,7 @@ impl Drop for A {\n }\n \n fn main() {\n-    Thread::scoped(move|| -> () {\n+    thread::spawn(move|| -> () {\n         let _a = A;\n         panic!();\n     }).join().err().unwrap();"}, {"sha": "6da15b97acaae220453ed519593bd5c2e992251f", "filename": "src/test/run-pass/panic-in-dtor-drops-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fpanic-in-dtor-drops-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fpanic-in-dtor-drops-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-in-dtor-drops-fields.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::thread::Thread;\n+use std::thread;\n \n static mut dropped: bool = false;\n \n@@ -33,7 +33,7 @@ impl Drop for B {\n }\n \n pub fn main() {\n-    let ret = Thread::scoped(move|| {\n+    let ret = thread::spawn(move|| {\n         let _a = A { b: B { foo: 3 } };\n     }).join();\n     assert!(ret.is_err());"}, {"sha": "523b7528103ad55026b10a4306707b69943e052d", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::thread::Thread;\n+use std::thread;\n \n pub fn main() { test05(); }\n \n@@ -25,7 +25,7 @@ fn test05() {\n         println!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };\n-    Thread::scoped(move|| {\n+    thread::spawn(move|| {\n         test05_start(fn_to_send);\n     }).join().ok().unwrap();\n }"}, {"sha": "21c5a6fc83a123fc54f697b52516677716dfe6fc", "filename": "src/test/run-pass/sepcomp-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-unwind.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -19,7 +19,7 @@\n // In any case, this test should let us know if enabling parallel codegen ever\n // breaks unwinding.\n \n-use std::thread::Thread;\n+use std::thread;\n \n fn pad() -> uint { 0 }\n \n@@ -36,5 +36,5 @@ mod b {\n }\n \n fn main() {\n-    Thread::scoped(move|| { ::b::g() }).join().err().unwrap();\n+    thread::spawn(move|| { ::b::g() }).join().err().unwrap();\n }"}, {"sha": "639ffd56002ec381da9d7c0a10725b0bb11a0193", "filename": "src/test/run-pass/slice-panic-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-panic-1.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -10,7 +10,7 @@\n \n // Test that if a slicing expr[..] fails, the correct cleanups happen.\n \n-use std::thread::Thread;\n+use std::thread;\n \n struct Foo;\n \n@@ -26,6 +26,6 @@ fn foo() {\n }\n \n fn main() {\n-    let _ = Thread::scoped(move|| foo()).join();\n+    let _ = thread::spawn(move|| foo()).join();\n     unsafe { assert!(DTOR_COUNT == 2); }\n }"}, {"sha": "4a2038175d2e63b6ec8bfc7569c41a06813f44d9", "filename": "src/test/run-pass/slice-panic-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-panic-2.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -10,7 +10,7 @@\n \n // Test that if a slicing expr[..] fails, the correct cleanups happen.\n \n-use std::thread::Thread;\n+use std::thread;\n \n struct Foo;\n \n@@ -30,6 +30,6 @@ fn foo() {\n }\n \n fn main() {\n-    let _ = Thread::scoped(move|| foo()).join();\n+    let _ = thread::spawn(move|| foo()).join();\n     unsafe { assert!(DTOR_COUNT == 2); }\n }"}, {"sha": "bf2f03b3e6de9bf3da43927036129a99e95d90e4", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -14,7 +14,7 @@\n   Arnold.\n  */\n \n-use std::thread::Thread;\n+use std::thread;\n use std::sync::mpsc::{channel, Sender};\n \n type ctx = Sender<int>;\n@@ -25,6 +25,6 @@ fn iotask(_tx: &ctx, ip: String) {\n \n pub fn main() {\n     let (tx, _rx) = channel::<int>();\n-    let t = Thread::scoped(move|| iotask(&tx, \"localhost\".to_string()) );\n+    let t = thread::spawn(move|| iotask(&tx, \"localhost\".to_string()) );\n     t.join().ok().unwrap();\n }"}, {"sha": "90b47f4986bfb95ca5726c9220d040ca9184c09c", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::thread::Thread;\n+use std::thread;\n \n pub fn main() {\n-    Thread::scoped(move|| child(10)).join().ok().unwrap();\n+    thread::spawn(move|| child(10)).join().ok().unwrap();\n }\n \n fn child(i: int) { println!(\"{}\", i); assert!((i == 10)); }"}, {"sha": "91edb5fd9c1e837e162fd600b7d6e867663b9b0a", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::thread::Thread;\n+use std::thread;\n \n pub fn main() {\n-    let t = Thread::scoped(move|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) );\n+    let t = thread::spawn(move|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) );\n     t.join().ok().unwrap();\n }\n "}, {"sha": "1c263b19dd182cb25cba0ada0777b688aaad37df", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -20,9 +20,10 @@ fn main() {\n     let mut reader = ChanReader::new(rx);\n     let stderr = ChanWriter::new(tx);\n \n-    let res = thread::Builder::new().stderr(box stderr as Box<Writer + Send>).scoped(move|| -> () {\n+    let res = thread::Builder::new().stderr(box stderr as Box<Writer + Send>)\n+                                    .spawn(move|| -> () {\n         panic!(\"Hello, world!\")\n-    }).join();\n+    }).unwrap().join();\n     assert!(res.is_err());\n \n     let output = reader.read_to_string().unwrap();"}, {"sha": "053df3a57f329361b33707084f23e329b99dc7b8", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -23,7 +23,7 @@ use std::old_io::{fs, TempDir};\n use std::old_io;\n use std::os;\n use std::sync::mpsc::channel;\n-use std::thread::Thread;\n+use std::thread;\n \n fn test_tempdir() {\n     let path = {\n@@ -42,7 +42,7 @@ fn test_rm_tempdir() {\n         tx.send(tmp.path().clone()).unwrap();\n         panic!(\"panic to unwind past `tmp`\");\n     };\n-    let _ = Thread::scoped(f).join();\n+    thread::spawn(f).join();\n     let path = rx.recv().unwrap();\n     assert!(!path.exists());\n \n@@ -52,7 +52,7 @@ fn test_rm_tempdir() {\n         let _tmp = tmp;\n         panic!(\"panic to unwind past `tmp`\");\n     };\n-    let _ = Thread::scoped(f).join();\n+    thread::spawn(f).join();\n     assert!(!path.exists());\n \n     let path;\n@@ -61,7 +61,7 @@ fn test_rm_tempdir() {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n         // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n-        let tmp: TempDir = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n+        let tmp: TempDir = thread::scoped(f).join();\n         path = tmp.path().clone();\n         assert!(path.exists());\n     }\n@@ -85,7 +85,7 @@ fn test_rm_tempdir_close() {\n         tmp.close();\n         panic!(\"panic when unwinding past `tmp`\");\n     };\n-    let _ = Thread::scoped(f).join();\n+    thread::spawn(f).join();\n     let path = rx.recv().unwrap();\n     assert!(!path.exists());\n \n@@ -96,7 +96,7 @@ fn test_rm_tempdir_close() {\n         tmp.close();\n         panic!(\"panic when unwinding past `tmp`\");\n     };\n-    let _ = Thread::scoped(f).join();\n+    thread::spawn(f).join();\n     assert!(!path.exists());\n \n     let path;\n@@ -105,7 +105,7 @@ fn test_rm_tempdir_close() {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n         // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n-        let tmp: TempDir = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n+        let tmp: TempDir = thread::scoped(f).join();\n         path = tmp.path().clone();\n         assert!(path.exists());\n         tmp.close();\n@@ -179,7 +179,7 @@ pub fn test_rmdir_recursive_ok() {\n }\n \n pub fn dont_double_panic() {\n-    let r: Result<(), _> = Thread::scoped(move|| {\n+    let r: Result<(), _> = thread::spawn(move|| {\n         let tmpdir = TempDir::new(\"test\").unwrap();\n         // Remove the temporary directory so that TempDir sees\n         // an error on drop"}, {"sha": "bef9efa9eb68dc47b99cc01393ab056366732d59", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -12,7 +12,7 @@\n // Issue #787\n // Don't try to clean up uninitialized locals\n \n-use std::thread::Thread;\n+use std::thread;\n \n fn test_break() { loop { let _x: Box<int> = break; } }\n \n@@ -22,13 +22,13 @@ fn test_ret() { let _x: Box<int> = return; }\n \n fn test_panic() {\n     fn f() { let _x: Box<int> = panic!(); }\n-    Thread::scoped(move|| f() ).join().err().unwrap();\n+    thread::spawn(move|| f() ).join().err().unwrap();\n }\n \n fn test_panic_indirect() {\n     fn f() -> ! { panic!(); }\n     fn g() { let _x: Box<int> = f(); }\n-    Thread::scoped(move|| g() ).join().err().unwrap();\n+    thread::spawn(move|| g() ).join().err().unwrap();\n }\n \n pub fn main() {"}]}