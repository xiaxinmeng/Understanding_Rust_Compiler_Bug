{"sha": "f462b4c25720db832b125b828bb474dd03628747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjJiNGMyNTcyMGRiODMyYjEyNWI4MjhiYjQ3NGRkMDM2Mjg3NDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T11:35:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-07T17:03:41Z"}, "message": "memory reachable through globals is not a leak any more; adjust for better memory dumping", "tree": {"sha": "499baf034a90bd75b791d1365032a0492a63c47e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499baf034a90bd75b791d1365032a0492a63c47e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f462b4c25720db832b125b828bb474dd03628747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f462b4c25720db832b125b828bb474dd03628747", "html_url": "https://github.com/rust-lang/rust/commit/f462b4c25720db832b125b828bb474dd03628747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f462b4c25720db832b125b828bb474dd03628747/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d25589f0bdcbde0b270c6d251f3fe850e7759233", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25589f0bdcbde0b270c6d251f3fe850e7759233", "html_url": "https://github.com/rust-lang/rust/commit/d25589f0bdcbde0b270c6d251f3fe850e7759233"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "ab4fe4a2178d44d7321946d687648e685cef0283", "filename": "src/machine.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f462b4c25720db832b125b828bb474dd03628747/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f462b4c25720db832b125b828bb474dd03628747/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f462b4c25720db832b125b828bb474dd03628747", "patch": "@@ -6,6 +6,7 @@ use std::cell::RefCell;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n use std::time::Instant;\n+use std::fmt;\n \n use log::trace;\n use rand::rngs::StdRng;\n@@ -62,6 +63,31 @@ impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n     }\n }\n \n+impl MayLeak for MiriMemoryKind {\n+    #[inline(always)]\n+    fn may_leak(self) -> bool {\n+        use self::MiriMemoryKind::*;\n+        match self {\n+            Rust | C | WinHeap | Env => false,\n+            Machine | Global => true,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for MiriMemoryKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use self::MiriMemoryKind::*;\n+        match self {\n+            Rust => write!(f, \"Rust heap\"),\n+            C => write!(f, \"C heap\"),\n+            WinHeap => write!(f, \"Windows heap\"),\n+            Machine => write!(f, \"machine-managed memory\"),\n+            Env => write!(f, \"environment variable\"),\n+            Global => write!(f, \"global\"),\n+        }\n+    }\n+}\n+\n /// Extra per-allocation data\n #[derive(Debug, Clone)]\n pub struct AllocExtra {\n@@ -491,14 +517,3 @@ impl AllocationExtra<Tag> for AllocExtra {\n         }\n     }\n }\n-\n-impl MayLeak for MiriMemoryKind {\n-    #[inline(always)]\n-    fn may_leak(self) -> bool {\n-        use self::MiriMemoryKind::*;\n-        match self {\n-            Rust | C | WinHeap | Env => false,\n-            Machine | Global => true,\n-        }\n-    }\n-}"}, {"sha": "b12cbbf6e64f71e71fe37d77aced2e85e9cef871", "filename": "tests/run-pass/leak-in-static.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f462b4c25720db832b125b828bb474dd03628747/tests%2Frun-pass%2Fleak-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f462b4c25720db832b125b828bb474dd03628747/tests%2Frun-pass%2Fleak-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fleak-in-static.rs?ref=f462b4c25720db832b125b828bb474dd03628747", "patch": "@@ -0,0 +1,8 @@\n+static mut LEAKER: Option<Box<Vec<i32>>> = None;\n+\n+fn main() {\n+    // Having memory \"leaked\" in globals is allowed.\n+    unsafe {\n+        LEAKER = Some(Box::new(vec![0; 42]));\n+    }\n+}"}, {"sha": "7689b85f765037c8e15dd96d88fe074b363346a2", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f462b4c25720db832b125b828bb474dd03628747/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f462b4c25720db832b125b828bb474dd03628747/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=f462b4c25720db832b125b828bb474dd03628747", "patch": "@@ -77,9 +77,6 @@ fn main() {\n     test(None, |_old_val| { debug_assert!(false); loop {} });\n     test(None, |_old_val| { unsafe { (1 as *const i32).read() }; loop {} }); // trigger debug-assertion in libstd\n \n-    // Cleanup: reset to default hook.\n-    drop(std::panic::take_hook());\n-\n     eprintln!(\"Success!\"); // Make sure we get this in stderr\n }\n "}]}