{"sha": "27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZGRmMmNlYzgxMjZmYmYxYTI3MmNlZTZjZTZjYjFjMThiOTdlMmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-28T08:08:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: replace node_path_str with uses of def_path_str.", "tree": {"sha": "0657695a0aa5581749379384c631cbc99985463e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0657695a0aa5581749379384c631cbc99985463e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "html_url": "https://github.com/rust-lang/rust/commit/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f64f15fc0c530493206342d5e4c80f7643fc1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f64f15fc0c530493206342d5e4c80f7643fc1d", "html_url": "https://github.com/rust-lang/rust/commit/36f64f15fc0c530493206342d5e4c80f7643fc1d"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "600e7e21e9998fd0a7bf301d772ca326c34a93e4", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "patch": "@@ -1351,7 +1351,8 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n         // the user-friendly path, otherwise fall back to stringifying DefPath.\n         crate::ty::tls::with_opt(|tcx| {\n             if let Some(tcx) = tcx {\n-                tcx.node_path_str(id)\n+                let def_id = map.local_def_id(id);\n+                tcx.def_path_str(def_id)\n             } else if let Some(path) = map.def_path_from_id(id) {\n                 path.data.into_iter().map(|elem| {\n                     elem.data.to_string()"}, {"sha": "e9cd09aa539b181a90791f3a32a6054d5ca81486", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "patch": "@@ -4,7 +4,6 @@ use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use crate::ty::subst::{Kind, Subst, SubstsRef, UnpackedKind};\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n-use syntax::ast;\n use syntax::symbol::{keywords, Symbol};\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -217,12 +216,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .print_def_path(def_id, None, ns, iter::empty());\n         s\n     }\n-\n-    /// Returns a string identifying this local node-id.\n-    // FIXME(eddyb) remove in favor of calling `def_path_str` directly.\n-    pub fn node_path_str(self, id: ast::NodeId) -> String {\n-        self.def_path_str(self.hir().local_def_id(id))\n-    }\n }\n \n impl<P: Printer> PrintCx<'a, 'gcx, 'tcx, P> {"}, {"sha": "dde88a212408deee9f443ca006401849f905f1d0", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "patch": "@@ -471,7 +471,7 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n     }\n \n     fn node_path(&self, id: ast::NodeId) -> Option<String> {\n-        Some(self.tcx.node_path_str(id))\n+        Some(self.tcx.def_path_str(self.tcx.hir().local_def_id(id)))\n     }\n }\n "}, {"sha": "3fea515ae401e2a75b8e1fc3cc7a80409285ce0b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "patch": "@@ -429,7 +429,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         vis: ast::Visibility,\n         attrs: &'l [Attribute],\n     ) {\n-        let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n+        let qualname = format!(\"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id(id)));\n \n         if !self.span.filter_generated(ident.span) {\n             let sig = sig::assoc_const_signature(id, ident.name, typ, expr, &self.save_ctxt);\n@@ -470,7 +471,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     ) {\n         debug!(\"process_struct {:?} {:?}\", item, item.span);\n         let name = item.ident.to_string();\n-        let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+        let qualname = format!(\"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n \n         let kind = match item.node {\n             ast::ItemKind::Struct(_, _) => DefKind::Struct,\n@@ -682,7 +684,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         methods: &'l [ast::TraitItem],\n     ) {\n         let name = item.ident.to_string();\n-        let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+        let qualname = format!(\"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n         let mut val = name.clone();\n         if !generics.params.is_empty() {\n             val.push_str(&generic_params_to_string(&generics.params));\n@@ -1093,7 +1096,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             ast::TraitItemKind::Type(ref bounds, ref default_ty) => {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(trait_item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(trait_item.id)));\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n                     let span = self.span_from_span(trait_item.ident.span);\n@@ -1300,7 +1304,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n         // only get called for the root module of a crate.\n         assert_eq!(id, ast::CRATE_NODE_ID);\n \n-        let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n+        let qualname = format!(\"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id(id)));\n \n         let cm = self.tcx.sess.source_map();\n         let filename = cm.span_to_filename(span);\n@@ -1389,7 +1394,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 self.nest_scope(item.id, |v| visit::walk_mod(v, m));\n             }\n             Ty(ref ty, ref ty_params) => {\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n                 let value = ty_to_string(&ty);\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n@@ -1418,7 +1424,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 self.process_generic_params(ty_params, &qualname, item.id);\n             }\n             Existential(ref _bounds, ref ty_params) => {\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n                 // FIXME do something with _bounds\n                 let value = String::new();\n                 if !self.span.filter_generated(item.ident.span) {"}, {"sha": "7ad5b7ce8c73ebdf3a25dcb824c5bdb6a0b2af08", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=27ddf2cec8126fbf1a272cee6ce6cb1c18b97e2a", "patch": "@@ -134,7 +134,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_extern_item_data(&self, item: &ast::ForeignItem) -> Option<Data> {\n-        let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+        let qualname = format!(\"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n         match item.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 filter!(self.span_utils, item.ident.span);\n@@ -184,7 +185,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.node {\n             ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n                 Some(Data::DefData(Def {\n                     kind: DefKind::Function,\n@@ -202,7 +204,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, ..) => {\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n \n                 filter!(self.span_utils, item.ident.span);\n \n@@ -225,7 +228,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, _) => {\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);\n@@ -247,7 +251,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n \n                 let cm = self.tcx.sess.source_map();\n                 let filename = cm.span_to_filename(m.inner);\n@@ -274,7 +279,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n                 let name = item.ident.to_string();\n-                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                let qualname = format!(\"::{}\",\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n                 let variants_str = def.variants\n                     .iter()\n@@ -358,7 +364,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_field_data(&self, field: &ast::StructField, scope: NodeId) -> Option<Def> {\n         if let Some(ident) = field.ident {\n             let name = ident.to_string();\n-            let qualname = format!(\"::{}::{}\", self.tcx.node_path_str(scope), ident);\n+            let qualname = format!(\"::{}::{}\",\n+                self.tcx.def_path_str(self.tcx.hir().local_def_id(scope)),\n+                ident);\n             filter!(self.span_utils, ident.span);\n             let def_id = self.tcx.hir().local_def_id(field.id);\n             let typ = self.tcx.type_of(def_id).to_string();"}]}