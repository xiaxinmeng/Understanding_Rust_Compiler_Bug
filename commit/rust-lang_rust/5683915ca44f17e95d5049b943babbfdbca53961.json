{"sha": "5683915ca44f17e95d5049b943babbfdbca53961", "node_id": "C_kwDOAAsO6NoAKDU2ODM5MTVjYTQ0ZjE3ZTk1ZDUwNDliOTQzYmFiYmZkYmNhNTM5NjE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-01-27T03:57:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-27T03:57:55Z"}, "message": "Rollup merge of #107279 - compiler-errors:new-solver-evaluate, r=lcnr\n\nUse new solver during selection\n\nr? ``@lcnr``", "tree": {"sha": "006eff8dd1a66cdb15d60cda4685d5ebd6c5639c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006eff8dd1a66cdb15d60cda4685d5ebd6c5639c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5683915ca44f17e95d5049b943babbfdbca53961", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj00vDCRBK7hj4Ov3rIwAA1tUIAEo/LkyhQXD+ctt3Ht6SIz7z\nCoBHjJcusl2koPwl9Bp+ANN5aPRGtHcaA3dR6tGnex67AsRJD0000KrRNPpdjyym\n90HWugX7nNtnWtc0diRtL8i8eTLWkStUGDt3BW4tHCXfs8Tq7bcnrwu2dUjG5uD4\nZ6dRUKxhe6esgU6fBmlRHNdDBSkRR8Gd1/dYcpvLi+bM4UQO6D5jgdYdttQopOZA\nUdcrTvbOyHI+3+woixilM66QY5kXqiMUqYPhLdeOw3AnfzYTo2jQAUwCoSMm4zTj\n1+p6jO0npbd6hCYypH79aPJ8Bc37GLKtZ+e9Guo+2QPAcYJV8xptjsNnzT4gQns=\n=3+1D\n-----END PGP SIGNATURE-----\n", "payload": "tree 006eff8dd1a66cdb15d60cda4685d5ebd6c5639c\nparent 145241402d8d64173ebdab1615c369a834d179f4\nparent 9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493\nauthor Yuki Okushi <jtitor@2k36.org> 1674791875 +0900\ncommitter GitHub <noreply@github.com> 1674791875 +0900\n\nRollup merge of #107279 - compiler-errors:new-solver-evaluate, r=lcnr\n\nUse new solver during selection\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5683915ca44f17e95d5049b943babbfdbca53961", "html_url": "https://github.com/rust-lang/rust/commit/5683915ca44f17e95d5049b943babbfdbca53961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5683915ca44f17e95d5049b943babbfdbca53961/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145241402d8d64173ebdab1615c369a834d179f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/145241402d8d64173ebdab1615c369a834d179f4", "html_url": "https://github.com/rust-lang/rust/commit/145241402d8d64173ebdab1615c369a834d179f4"}, {"sha": "9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493", "html_url": "https://github.com/rust-lang/rust/commit/9b5a2a4a4861500d64b9f1ebbe6c1140eda0a493"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "1d23634b6aacf58762466cd987d387d2ea743525", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5683915ca44f17e95d5049b943babbfdbca53961/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683915ca44f17e95d5049b943babbfdbca53961/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=5683915ca44f17e95d5049b943babbfdbca53961", "patch": "@@ -38,6 +38,8 @@ use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n+use rustc_infer::traits::TraitEngine;\n+use rustc_infer::traits::TraitEngineExt;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n@@ -47,6 +49,7 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};\n@@ -544,10 +547,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.evaluation_probe(|this| {\n-            this.evaluate_predicate_recursively(\n-                TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n-                obligation.clone(),\n-            )\n+            if this.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+                this.evaluate_predicate_recursively(\n+                    TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n+                    obligation.clone(),\n+                )\n+            } else {\n+                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n+            }\n         })\n     }\n \n@@ -586,18 +593,40 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,\n     {\n-        let mut result = EvaluatedToOk;\n-        for obligation in predicates {\n-            let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n-            if let EvaluatedToErr = eval {\n-                // fast-path - EvaluatedToErr is the top of the lattice,\n-                // so we don't need to look on the other predicates.\n-                return Ok(EvaluatedToErr);\n-            } else {\n-                result = cmp::max(result, eval);\n+        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            let mut result = EvaluatedToOk;\n+            for obligation in predicates {\n+                let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n+                if let EvaluatedToErr = eval {\n+                    // fast-path - EvaluatedToErr is the top of the lattice,\n+                    // so we don't need to look on the other predicates.\n+                    return Ok(EvaluatedToErr);\n+                } else {\n+                    result = cmp::max(result, eval);\n+                }\n             }\n+            Ok(result)\n+        } else {\n+            self.evaluate_predicates_recursively_in_new_solver(predicates)\n         }\n-        Ok(result)\n+    }\n+\n+    /// Evaluates the predicates using the new solver when `-Ztrait-solver=next` is enabled\n+    fn evaluate_predicates_recursively_in_new_solver(\n+        &mut self,\n+        predicates: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n+    ) -> Result<EvaluationResult, OverflowError> {\n+        let mut fulfill_cx = crate::solve::FulfillmentCtxt::new();\n+        fulfill_cx.register_predicate_obligations(self.infcx, predicates);\n+        // True errors\n+        if !fulfill_cx.select_where_possible(self.infcx).is_empty() {\n+            return Ok(EvaluatedToErr);\n+        }\n+        if !fulfill_cx.select_all_or_error(self.infcx).is_empty() {\n+            return Ok(EvaluatedToAmbig);\n+        }\n+        // Regions and opaques are handled in the `evaluation_probe` by looking at the snapshot\n+        Ok(EvaluatedToOk)\n     }\n \n     #[instrument("}]}