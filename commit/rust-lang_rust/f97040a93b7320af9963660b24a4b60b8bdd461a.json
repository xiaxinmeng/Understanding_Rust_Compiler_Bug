{"sha": "f97040a93b7320af9963660b24a4b60b8bdd461a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzA0MGE5M2I3MzIwYWY5OTYzNjYwYjI0YTRiNjBiOGJkZDQ2MWE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T11:23:11Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T11:23:11Z"}, "message": "std::vec: remove unnecessary count parameter on {bytes,\nraw}::copy_memory.\n\nSlices carry their length with them, so we can just use that\ninformation.", "tree": {"sha": "cf1bfeab8124874a58945c15495553c8c4fccd3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1bfeab8124874a58945c15495553c8c4fccd3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97040a93b7320af9963660b24a4b60b8bdd461a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97040a93b7320af9963660b24a4b60b8bdd461a", "html_url": "https://github.com/rust-lang/rust/commit/f97040a93b7320af9963660b24a4b60b8bdd461a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97040a93b7320af9963660b24a4b60b8bdd461a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6df87c1d876895a7e313728b43d9710ae682bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6df87c1d876895a7e313728b43d9710ae682bb", "html_url": "https://github.com/rust-lang/rust/commit/8f6df87c1d876895a7e313728b43d9710ae682bb"}], "stats": {"total": 85, "additions": 33, "deletions": 52}, "files": [{"sha": "1b72b240b674bb4eaabb174e75e12ad8458b2a2b", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -175,7 +175,7 @@ impl Uuid {\n     pub fn new_v4() -> Uuid {\n         let ub = rand::task_rng().gen_vec(16);\n         let mut uuid = Uuid{ bytes: [0, .. 16] };\n-        vec::bytes::copy_memory(uuid.bytes, ub, 16);\n+        vec::bytes::copy_memory(uuid.bytes, ub);\n         uuid.set_variant(VariantRFC4122);\n         uuid.set_version(Version4Random);\n         uuid\n@@ -202,7 +202,7 @@ impl Uuid {\n         fields.data1 = to_be32(d1 as i32) as u32;\n         fields.data2 = to_be16(d2 as i16) as u16;\n         fields.data3 = to_be16(d3 as i16) as u16;\n-        vec::bytes::copy_memory(fields.data4, d4, 8);\n+        vec::bytes::copy_memory(fields.data4, d4);\n \n         unsafe {\n             transmute(fields)\n@@ -220,7 +220,7 @@ impl Uuid {\n \n         let mut uuid = Uuid{ bytes: [0, .. 16] };\n         unsafe {\n-            vec::raw::copy_memory(uuid.bytes, b, 16);\n+            vec::raw::copy_memory(uuid.bytes, b);\n         }\n         Some(uuid)\n     }\n@@ -442,11 +442,7 @@ impl Zero for Uuid {\n \n impl Clone for Uuid {\n     /// Returns a copy of the UUID\n-    fn clone(&self) -> Uuid {\n-        let mut clone = Uuid{ bytes: [0, .. 16] };\n-        vec::bytes::copy_memory(clone.bytes, self.bytes, 16);\n-        clone\n-    }\n+    fn clone(&self) -> Uuid { *self }\n }\n \n impl FromStr for Uuid {\n@@ -509,7 +505,7 @@ impl rand::Rand for Uuid {\n     fn rand<R: rand::Rng>(rng: &mut R) -> Uuid {\n         let ub = rng.gen_vec(16);\n         let mut uuid = Uuid{ bytes: [0, .. 16] };\n-        vec::bytes::copy_memory(uuid.bytes, ub, 16);\n+        vec::bytes::copy_memory(uuid.bytes, ub);\n         uuid.set_variant(VariantRFC4122);\n         uuid.set_version(Version4Random);\n         uuid"}, {"sha": "b3c4fbf110563ebf61b2b0583522c114dcd9bc88", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -136,16 +136,14 @@ impl FixedBuffer for FixedBuffer64 {\n             if input.len() >= buffer_remaining {\n                     copy_memory(\n                         self.buffer.mut_slice(self.buffer_idx, size),\n-                        input.slice_to(buffer_remaining),\n-                        buffer_remaining);\n+                        input.slice_to(buffer_remaining));\n                 self.buffer_idx = 0;\n                 func(self.buffer);\n                 i += buffer_remaining;\n             } else {\n                 copy_memory(\n                     self.buffer.mut_slice(self.buffer_idx, self.buffer_idx + input.len()),\n-                    input,\n-                    input.len());\n+                    input);\n                 self.buffer_idx += input.len();\n                 return;\n             }\n@@ -164,8 +162,7 @@ impl FixedBuffer for FixedBuffer64 {\n         let input_remaining = input.len() - i;\n         copy_memory(\n             self.buffer.mut_slice(0, input_remaining),\n-            input.slice_from(i),\n-            input.len() - i);\n+            input.slice_from(i));\n         self.buffer_idx += input_remaining;\n     }\n "}, {"sha": "06970561fac4f1652f3198c86ed16fa20dfedd51", "filename": "src/librustpkg/sha1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibrustpkg%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibrustpkg%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsha1.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -149,16 +149,14 @@ impl FixedBuffer for FixedBuffer64 {\n             if input.len() >= buffer_remaining {\n                     copy_memory(\n                         self.buffer.mut_slice(self.buffer_idx, size),\n-                        input.slice_to(buffer_remaining),\n-                        buffer_remaining);\n+                        input.slice_to(buffer_remaining));\n                 self.buffer_idx = 0;\n                 func(self.buffer);\n                 i += buffer_remaining;\n             } else {\n                 copy_memory(\n                     self.buffer.mut_slice(self.buffer_idx, self.buffer_idx + input.len()),\n-                    input,\n-                    input.len());\n+                    input);\n                 self.buffer_idx += input.len();\n                 return;\n             }\n@@ -177,8 +175,7 @@ impl FixedBuffer for FixedBuffer64 {\n         let input_remaining = input.len() - i;\n         copy_memory(\n             self.buffer.mut_slice(0, input_remaining),\n-            input.slice_from(i),\n-            input.len() - i);\n+            input.slice_from(i));\n         self.buffer_idx += input_remaining;\n     }\n "}, {"sha": "f6f1c538c7bd824e5147a325cf627964739df06c", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -293,7 +293,7 @@ impl<'a> ToCStr for &'a [u8] {\n unsafe fn with_c_str<T>(v: &[u8], checked: bool, f: |*libc::c_char| -> T) -> T {\n     if v.len() < BUF_LEN {\n         let mut buf: [u8, .. BUF_LEN] = intrinsics::uninit();\n-        vec::bytes::copy_memory(buf, v, v.len());\n+        vec::bytes::copy_memory(buf, v);\n         buf[v.len()] = 0;\n \n         buf.as_mut_buf(|buf, _| {"}, {"sha": "1922af3a3b7e51c4935ef4bc40c671fc6218ceb2", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -122,7 +122,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n                 return None;\n             }\n             let nread = num::min(available.len(), buf.len());\n-            vec::bytes::copy_memory(buf, available, nread);\n+            vec::bytes::copy_memory(buf, available.slice_to(nread));\n             nread\n         };\n         self.pos += nread;\n@@ -185,7 +185,7 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n             self.inner.write(buf);\n         } else {\n             let dst = self.buf.mut_slice_from(self.pos);\n-            vec::bytes::copy_memory(dst, buf, buf.len());\n+            vec::bytes::copy_memory(dst, buf);\n             self.pos += buf.len();\n         }\n     }"}, {"sha": "b3e5a9a0c86f156bfdba3b993b470ba752496927", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -57,7 +57,7 @@ impl<P: GenericPort<~[u8]>> Reader for PortReader<P> {\n                     let dst = buf.mut_slice_from(num_read);\n                     let src = prev.slice_from(self.pos);\n                     let count = cmp::min(dst.len(), src.len());\n-                    bytes::copy_memory(dst, src, count);\n+                    bytes::copy_memory(dst, src.slice_to(count));\n                     num_read += count;\n                     self.pos += count;\n                 },"}, {"sha": "efb55a436eaf41277ba4b2d2018a6b96e564ebb0", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -58,8 +58,7 @@ impl Writer for MemWriter {\n \n         // Do the necessary writes\n         if left.len() > 0 {\n-            vec::bytes::copy_memory(self.buf.mut_slice_from(self.pos),\n-                                    left, left.len());\n+            vec::bytes::copy_memory(self.buf.mut_slice_from(self.pos), left);\n         }\n         if right.len() > 0 {\n             self.buf.push_all(right);\n@@ -116,7 +115,7 @@ impl Reader for MemReader {\n             let input = self.buf.slice(self.pos, self.pos + write_len);\n             let output = buf.mut_slice(0, write_len);\n             assert_eq!(input.len(), output.len());\n-            vec::bytes::copy_memory(output, input, write_len);\n+            vec::bytes::copy_memory(output, input);\n         }\n         self.pos += write_len;\n         assert!(self.pos <= self.buf.len());\n@@ -175,8 +174,7 @@ impl<'a> Writer for BufWriter<'a> {\n             return;\n         }\n \n-        vec::bytes::copy_memory(self.buf.mut_slice_from(self.pos),\n-                                buf, buf.len());\n+        vec::bytes::copy_memory(self.buf.mut_slice_from(self.pos), buf);\n         self.pos += buf.len();\n     }\n }\n@@ -222,7 +220,7 @@ impl<'a> Reader for BufReader<'a> {\n             let input = self.buf.slice(self.pos, self.pos + write_len);\n             let output = buf.mut_slice(0, write_len);\n             assert_eq!(input.len(), output.len());\n-            vec::bytes::copy_memory(output, input, write_len);\n+            vec::bytes::copy_memory(output, input);\n         }\n         self.pos += write_len;\n         assert!(self.pos <= self.buf.len());"}, {"sha": "ffd62c7a7590369b71ef06bf47074b3c0320b3e6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -1631,16 +1631,15 @@ impl<T> OwnedVector<T> for ~[T] {\n             {\n                 let first_slice = self.slice(0, 1);\n                 let last_slice = self.slice(next_ln, ln);\n-                raw::copy_memory(cast::transmute(last_slice), first_slice, 1);\n+                raw::copy_memory(cast::transmute(last_slice), first_slice);\n             }\n \n             // Memcopy everything to the left one element\n             {\n                 let init_slice = self.slice(0, next_ln);\n                 let tail_slice = self.slice(1, ln);\n                 raw::copy_memory(cast::transmute(init_slice),\n-                                 tail_slice,\n-                                 next_ln);\n+                                 tail_slice);\n             }\n \n             // Set the new length. Now the vector is back to normal\n@@ -2312,18 +2311,14 @@ pub mod raw {\n     /**\n       * Copies data from one vector to another.\n       *\n-      * Copies `count` bytes from `src` to `dst`. The source and destination\n-      * may overlap.\n+      * Copies `src` to `dst`. The source and destination may overlap.\n       */\n     #[inline]\n-    pub unsafe fn copy_memory<T>(dst: &mut [T], src: &[T],\n-                                 count: uint) {\n-        assert!(dst.len() >= count);\n-        assert!(src.len() >= count);\n-\n-        dst.as_mut_buf(|p_dst, _len_dst| {\n-            src.as_imm_buf(|p_src, _len_src| {\n-                ptr::copy_memory(p_dst, p_src, count)\n+    pub unsafe fn copy_memory<T>(dst: &mut [T], src: &[T]) {\n+        dst.as_mut_buf(|p_dst, len_dst| {\n+            src.as_imm_buf(|p_src, len_src| {\n+                assert!(len_dst >= len_src)\n+                ptr::copy_memory(p_dst, p_src, len_src)\n             })\n         })\n     }\n@@ -2419,13 +2414,12 @@ pub mod bytes {\n     /**\n       * Copies data from one vector to another.\n       *\n-      * Copies `count` bytes from `src` to `dst`. The source and destination\n-      * may overlap.\n+      * Copies `src` to `dst`. The source and destination may overlap.\n       */\n     #[inline]\n-    pub fn copy_memory(dst: &mut [u8], src: &[u8], count: uint) {\n+    pub fn copy_memory(dst: &mut [u8], src: &[u8]) {\n         // Bound checks are done at vec::raw::copy_memory.\n-        unsafe { vec::raw::copy_memory(dst, src, count) }\n+        unsafe { vec::raw::copy_memory(dst, src) }\n     }\n \n     /**\n@@ -3651,7 +3645,7 @@ mod tests {\n         unsafe {\n             let mut a = [1, 2, 3, 4];\n             let b = [1, 2, 3, 4, 5];\n-            raw::copy_memory(a, b, 5);\n+            raw::copy_memory(a, b);\n         }\n     }\n "}, {"sha": "d0f91a358a70cc7c3e11c7ec000d315cad08030a", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97040a93b7320af9963660b24a4b60b8bdd461a/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=f97040a93b7320af9963660b24a4b60b8bdd461a", "patch": "@@ -95,11 +95,10 @@ impl RepeatFasta {\n             let mut buf = vec::from_elem(alu_len + LINE_LEN, 0u8);\n             let alu: &[u8] = self.alu.as_bytes();\n \n-            copy_memory(buf, alu, alu_len);\n+            copy_memory(buf, alu);\n             let buf_len = buf.len();\n             copy_memory(buf.mut_slice(alu_len, buf_len),\n-                        alu,\n-                        LINE_LEN);\n+                        alu.slice_to(LINE_LEN));\n \n             let mut pos = 0;\n             let mut bytes;"}]}