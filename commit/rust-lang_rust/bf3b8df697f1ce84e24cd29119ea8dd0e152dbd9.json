{"sha": "bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmM2I4ZGY2OTdmMWNlODRlMjRjZDI5MTE5ZWE4ZGQwZTE1MmRiZDk=", "commit": {"author": {"name": "Johannes Nixdorf", "email": "mixi@exherbo.org", "date": "2018-04-29T09:17:54Z"}, "committer": {"name": "Johannes Nixdorf", "email": "mixi@exherbo.org", "date": "2018-05-31T10:01:50Z"}, "message": "musl: don't use the included startfiles with -crt-static\n\nThis fixes (only for -crt-static) #36710.", "tree": {"sha": "f37c2efcdf46ca688197f04ec150952484e69606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37c2efcdf46ca688197f04ec150952484e69606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "html_url": "https://github.com/rust-lang/rust/commit/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/comments", "author": {"login": "mixi", "id": 93679, "node_id": "MDQ6VXNlcjkzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/93679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixi", "html_url": "https://github.com/mixi", "followers_url": "https://api.github.com/users/mixi/followers", "following_url": "https://api.github.com/users/mixi/following{/other_user}", "gists_url": "https://api.github.com/users/mixi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixi/subscriptions", "organizations_url": "https://api.github.com/users/mixi/orgs", "repos_url": "https://api.github.com/users/mixi/repos", "events_url": "https://api.github.com/users/mixi/events{/privacy}", "received_events_url": "https://api.github.com/users/mixi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mixi", "id": 93679, "node_id": "MDQ6VXNlcjkzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/93679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixi", "html_url": "https://github.com/mixi", "followers_url": "https://api.github.com/users/mixi/followers", "following_url": "https://api.github.com/users/mixi/following{/other_user}", "gists_url": "https://api.github.com/users/mixi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixi/subscriptions", "organizations_url": "https://api.github.com/users/mixi/orgs", "repos_url": "https://api.github.com/users/mixi/repos", "events_url": "https://api.github.com/users/mixi/events{/privacy}", "received_events_url": "https://api.github.com/users/mixi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a47b2d09d6caa5aeb5a7f6128869bd6eb12418d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47b2d09d6caa5aeb5a7f6128869bd6eb12418d2", "html_url": "https://github.com/rust-lang/rust/commit/a47b2d09d6caa5aeb5a7f6128869bd6eb12418d2"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "4e9910e58f391dcb79aca2626d2b1c57100cc53a", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "patch": "@@ -625,6 +625,11 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n+        if sess.crt_static() {\n+            cmd.args(args);\n+        }\n+    }\n     if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n         cmd.args(args);\n     }\n@@ -639,6 +644,12 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n+    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n+\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -660,6 +671,11 @@ fn link_natively(sess: &Session,\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n+    if sess.crt_static() {\n+        for obj in &sess.target.target.options.post_link_objects_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}, {"sha": "7a3f3c2a518bc7d065602ce42d30d3f9abc1ad1e", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "patch": "@@ -15,7 +15,8 @@ pub fn opts() -> TargetOptions {\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n+    base.pre_link_args_crt.insert(LinkerFlavor::Gcc, Vec::new());\n+    base.pre_link_args_crt.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -55,9 +56,9 @@ pub fn opts() -> TargetOptions {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n-    base.post_link_objects.push(\"crtn.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n+    base.post_link_objects_crt.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "e54cd773123c8e5b7b5d88ad4a2118d7ee2dd6ee", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "patch": "@@ -426,20 +426,22 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// Linker arguments that are unconditionally passed *before* any\n-    /// user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs, // ... unconditionally\n+    pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n     /// Objects to link before all others, always found within the\n     /// sysroot folder.\n-    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n+    pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n     /// Objects to link after all others, always found within the\n     /// sysroot folder.\n-    pub post_link_objects: Vec<String>,\n+    pub post_link_objects: Vec<String>, // ... unconditionally\n+    pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -639,6 +641,7 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n+            pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n@@ -672,8 +675,10 @@ impl Default for TargetOptions {\n             position_independent_executables: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n+            pre_link_objects_exe_crt: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n+            post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -892,10 +897,13 @@ impl Target {\n         key!(is_builtin, bool);\n         key!(linker, optional);\n         key!(pre_link_args, link_args);\n+        key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n+        key!(pre_link_objects_exe_crt, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n+        key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1097,10 +1105,13 @@ impl ToJson for Target {\n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(link_args - pre_link_args);\n+        target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n+        target_option_val!(pre_link_objects_exe_crt);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n+        target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}]}