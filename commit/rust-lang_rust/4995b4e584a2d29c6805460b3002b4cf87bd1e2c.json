{"sha": "4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "node_id": "C_kwDOAAsO6NoAKDQ5OTViNGU1ODRhMmQyOWM2ODA1NDYwYjMwMDJiNGNmODdiZDFlMmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T18:28:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T18:28:38Z"}, "message": "Auto merge of #9046 - xFrednet:rust-97660-expection-something-something, r=Jarcho\n\nFix `#[expect]` for most clippy lints\n\nThis PR fixes most `#[expect]` - lint interactions listed in rust-lang/rust#97660. [My comment in the issue](https://github.com/rust-lang/rust/issues/97660#issuecomment-1147269504) shows the current progress (Once this is merged). I plan to work on `duplicate_mod` and `multiple_inherent_impl` and leave the rest for later. I feel like stabilizing the feature is more important than fixing the last few nits, which currently also don't work with `#[allow]`.\n\n---\n\nchangelog: none\n\nr? `@Jarcho`\n\ncc: rust-lang/rust#97660", "tree": {"sha": "6af436ceef2159b4a8779da363614845cd335b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6af436ceef2159b4a8779da363614845cd335b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "html_url": "https://github.com/rust-lang/rust/commit/4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4130e16124e58ae6c6e6eb201ffced2c1964145", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4130e16124e58ae6c6e6eb201ffced2c1964145", "html_url": "https://github.com/rust-lang/rust/commit/a4130e16124e58ae6c6e6eb201ffced2c1964145"}, {"sha": "d11618e6fa73f7f99d5569349bca800cf2b126bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11618e6fa73f7f99d5569349bca800cf2b126bb", "html_url": "https://github.com/rust-lang/rust/commit/d11618e6fa73f7f99d5569349bca800cf2b126bb"}], "stats": {"total": 695, "additions": 464, "deletions": 231}, "files": [{"sha": "4bcbeacf9feb59abd13704dcfcaf163bb31a4628", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -78,10 +78,17 @@ declare_clippy_lint! {\n     /// Checks for `extern crate` and `use` items annotated with\n     /// lint attributes.\n     ///\n-    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]`,\n-    /// `#[allow(unreachable_pub)]`, `#[allow(clippy::wildcard_imports)]` and\n-    /// `#[allow(clippy::enum_glob_use)]` on `use` items and `#[allow(unused_imports)]` on\n-    /// `extern crate` items with a `#[macro_use]` attribute.\n+    /// This lint permits lint attributes for lints emitted on the items themself.\n+    /// For `use` items these lints are:\n+    /// * deprecated\n+    /// * unreachable_pub\n+    /// * unused_imports\n+    /// * clippy::enum_glob_use\n+    /// * clippy::macro_use_imports\n+    /// * clippy::wildcard_imports\n+    ///\n+    /// For `extern crate` items these lints are:\n+    /// * `unused_imports` on items with `#[macro_use]`\n     ///\n     /// ### Why is this bad?\n     /// Lint attributes have no effect on crate imports. Most\n@@ -347,7 +354,10 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                             || extract_clippy_lint(lint).map_or(false, |s| {\n                                                 matches!(\n                                                     s.as_str(),\n-                                                    \"wildcard_imports\" | \"enum_glob_use\" | \"redundant_pub_crate\",\n+                                                    \"wildcard_imports\"\n+                                                        | \"enum_glob_use\"\n+                                                        | \"redundant_pub_crate\"\n+                                                        | \"macro_use_imports\",\n                                                 )\n                                             })\n                                         {"}, {"sha": "526ee2f891a16c79192d523edeaf0313f0db7133", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{eq_expr_value, get_trait_def_id, paths};\n@@ -394,9 +394,10 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                         continue 'simplified;\n                     }\n                     if stats.terminals[i] != 0 && simplified_stats.terminals[i] == 0 {\n-                        span_lint_and_then(\n+                        span_lint_hir_and_then(\n                             self.cx,\n                             LOGIC_BUG,\n+                            e.hir_id,\n                             e.span,\n                             \"this boolean expression contains a logic bug\",\n                             |diag| {\n@@ -429,9 +430,10 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                 }\n             }\n             let nonminimal_bool_lint = |suggestions: Vec<_>| {\n-                span_lint_and_then(\n+                span_lint_hir_and_then(\n                     self.cx,\n                     NONMINIMAL_BOOL,\n+                    e.hir_id,\n                     e.span,\n                     \"this boolean expression can be simplified\",\n                     |diag| {"}, {"sha": "7a65b849a6643e5d77d87f8e8661b91471edd6dc", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_hir;\n use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n@@ -118,9 +118,10 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         });\n \n         for node in v.set {\n-            span_lint(\n+            span_lint_hir(\n                 cx,\n                 BOXED_LOCAL,\n+                node,\n                 cx.tcx.hir().span(node),\n                 \"local variable doesn't need to be boxed here\",\n             );"}, {"sha": "a6610ade37e56291400196d6ab02553ba11abe7f", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::{\n-    diagnostics::span_lint_and_sugg,\n+    diagnostics::span_lint_hir_and_then,\n     get_async_fn_body, is_async_fn,\n     source::{snippet_with_applicability, snippet_with_context, walk_span_to_context},\n     visitors::expr_visitor_no_bodies,\n@@ -43,31 +43,38 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ImplicitReturn => [IMPLICIT_RETURN]);\n \n-fn lint_return(cx: &LateContext<'_>, span: Span) {\n+fn lint_return(cx: &LateContext<'_>, emission_place: HirId, span: Span) {\n     let mut app = Applicability::MachineApplicable;\n     let snip = snippet_with_applicability(cx, span, \"..\", &mut app);\n-    span_lint_and_sugg(\n+    span_lint_hir_and_then(\n         cx,\n         IMPLICIT_RETURN,\n+        emission_place,\n         span,\n         \"missing `return` statement\",\n-        \"add `return` as shown\",\n-        format!(\"return {}\", snip),\n-        app,\n+        |diag| {\n+            diag.span_suggestion(span, \"add `return` as shown\", format!(\"return {}\", snip), app);\n+        },\n     );\n }\n \n-fn lint_break(cx: &LateContext<'_>, break_span: Span, expr_span: Span) {\n+fn lint_break(cx: &LateContext<'_>, emission_place: HirId, break_span: Span, expr_span: Span) {\n     let mut app = Applicability::MachineApplicable;\n     let snip = snippet_with_context(cx, expr_span, break_span.ctxt(), \"..\", &mut app).0;\n-    span_lint_and_sugg(\n+    span_lint_hir_and_then(\n         cx,\n         IMPLICIT_RETURN,\n+        emission_place,\n         break_span,\n         \"missing `return` statement\",\n-        \"change `break` to `return` as shown\",\n-        format!(\"return {}\", snip),\n-        app,\n+        |diag| {\n+            diag.span_suggestion(\n+                break_span,\n+                \"change `break` to `return` as shown\",\n+                format!(\"return {}\", snip),\n+                app,\n+            );\n+        },\n     );\n }\n \n@@ -152,7 +159,7 @@ fn lint_implicit_returns(\n                             // At this point sub_expr can be `None` in async functions which either diverge, or return\n                             // the unit type.\n                             if let Some(sub_expr) = sub_expr {\n-                                lint_break(cx, e.span, sub_expr.span);\n+                                lint_break(cx, e.hir_id, e.span, sub_expr.span);\n                             }\n                         } else {\n                             // the break expression is from a macro call, add a return to the loop\n@@ -166,10 +173,10 @@ fn lint_implicit_returns(\n             if add_return {\n                 #[expect(clippy::option_if_let_else)]\n                 if let Some(span) = call_site_span {\n-                    lint_return(cx, span);\n+                    lint_return(cx, expr.hir_id, span);\n                     LintLocation::Parent\n                 } else {\n-                    lint_return(cx, expr.span);\n+                    lint_return(cx, expr.hir_id, expr.span);\n                     LintLocation::Inner\n                 }\n             } else {\n@@ -198,10 +205,10 @@ fn lint_implicit_returns(\n         {\n             #[expect(clippy::option_if_let_else)]\n             if let Some(span) = call_site_span {\n-                lint_return(cx, span);\n+                lint_return(cx, expr.hir_id, span);\n                 LintLocation::Parent\n             } else {\n-                lint_return(cx, expr.span);\n+                lint_return(cx, expr.hir_id, expr.span);\n                 LintLocation::Inner\n             }\n         },"}, {"sha": "6b78c16206522562878a4fea3b5a75ddc832cfca", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n@@ -51,8 +51,9 @@ impl MacroRefData {\n #[derive(Default)]\n #[expect(clippy::module_name_repetitions)]\n pub struct MacroUseImports {\n-    /// the actual import path used and the span of the attribute above it.\n-    imports: Vec<(String, Span)>,\n+    /// the actual import path used and the span of the attribute above it. The value is\n+    /// the location, where the lint should be emitted.\n+    imports: Vec<(String, Span, hir::HirId)>,\n     /// the span of the macro reference, kept to ensure only one reference is used per macro call.\n     collected: FxHashSet<Span>,\n     mac_refs: Vec<MacroRefData>,\n@@ -91,7 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         if_chain! {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n-            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let hir_id = item.hir_id();\n+            let attrs = cx.tcx.hir().attrs(hir_id);\n             if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n             if let Res::Def(DefKind::Mod, id) = path.res;\n             if !id.is_local();\n@@ -100,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                     if let Res::Def(DefKind::Macro(_mac_type), mac_id) = kid.res {\n                         let span = mac_attr.span;\n                         let def_path = cx.tcx.def_path_str(mac_id);\n-                        self.imports.push((def_path, span));\n+                        self.imports.push((def_path, span, hir_id));\n                     }\n                 }\n             } else {\n@@ -138,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n     fn check_crate_post(&mut self, cx: &LateContext<'_>) {\n         let mut used = FxHashMap::default();\n         let mut check_dup = vec![];\n-        for (import, span) in &self.imports {\n+        for (import, span, hir_id) in &self.imports {\n             let found_idx = self.mac_refs.iter().position(|mac| import.ends_with(&mac.name));\n \n             if let Some(idx) = found_idx {\n@@ -151,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                     [] | [_] => return,\n                     [root, item] => {\n                         if !check_dup.contains(&(*item).to_string()) {\n-                            used.entry(((*root).to_string(), span))\n+                            used.entry(((*root).to_string(), span, hir_id))\n                                 .or_insert_with(Vec::new)\n                                 .push((*item).to_string());\n                             check_dup.push((*item).to_string());\n@@ -169,13 +171,13 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                                     }\n                                 })\n                                 .collect::<Vec<_>>();\n-                            used.entry(((*root).to_string(), span))\n+                            used.entry(((*root).to_string(), span, hir_id))\n                                 .or_insert_with(Vec::new)\n                                 .push(filtered.join(\"::\"));\n                             check_dup.extend(filtered);\n                         } else {\n                             let rest = rest.to_vec();\n-                            used.entry(((*root).to_string(), span))\n+                            used.entry(((*root).to_string(), span, hir_id))\n                                 .or_insert_with(Vec::new)\n                                 .push(rest.join(\"::\"));\n                             check_dup.extend(rest.iter().map(ToString::to_string));\n@@ -186,27 +188,33 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n \n         let mut suggestions = vec![];\n-        for ((root, span), path) in used {\n+        for ((root, span, hir_id), path) in used {\n             if path.len() == 1 {\n-                suggestions.push((span, format!(\"{}::{}\", root, path[0])));\n+                suggestions.push((span, format!(\"{}::{}\", root, path[0]), hir_id));\n             } else {\n-                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))));\n+                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \")), hir_id));\n             }\n         }\n \n         // If mac_refs is not empty we have encountered an import we could not handle\n         // such as `std::prelude::v1::foo` or some other macro that expands to an import.\n         if self.mac_refs.is_empty() {\n-            for (span, import) in suggestions {\n+            for (span, import, hir_id) in suggestions {\n                 let help = format!(\"use {};\", import);\n-                span_lint_and_sugg(\n+                span_lint_hir_and_then(\n                     cx,\n                     MACRO_USE_IMPORTS,\n+                    *hir_id,\n                     *span,\n                     \"`macro_use` attributes are no longer needed in the Rust 2018 edition\",\n-                    \"remove the attribute and import the macro directly, try\",\n-                    help,\n-                    Applicability::MaybeIncorrect,\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            *span,\n+                            \"remove the attribute and import the macro directly, try\",\n+                            help,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    },\n                 );\n             }\n         }"}, {"sha": "4278e98dc91facd694f9ad7d64d01d12a639ad4a", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,6 +1,6 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{is_doc_hidden, is_lint_allowed, meets_msrv, msrvs};\n+use clippy_utils::{is_doc_hidden, meets_msrv, msrvs};\n use rustc_ast::ast::{self, VisibilityKind};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -190,12 +190,13 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                 !self\n                     .constructed_enum_variants\n                     .contains(&(enum_id.to_def_id(), variant_id.to_def_id()))\n-                    && !is_lint_allowed(cx, MANUAL_NON_EXHAUSTIVE, cx.tcx.hir().local_def_id_to_hir_id(enum_id))\n             })\n         {\n-            span_lint_and_then(\n+            let hir_id = cx.tcx.hir().local_def_id_to_hir_id(enum_id);\n+            span_lint_hir_and_then(\n                 cx,\n                 MANUAL_NON_EXHAUSTIVE,\n+                hir_id,\n                 enum_span,\n                 \"this seems like a manual implementation of the non-exhaustive pattern\",\n                 |diag| {"}, {"sha": "25b73918c0a259de0c56324a028ea7e58d588e35", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,6 +1,6 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n-use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n use clippy_utils::visitors::contains_unsafe_block;\n@@ -166,15 +166,14 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             )\n             .filter(|arg| arg.mutability() == Mutability::Not)\n             {\n-                span_lint_and_sugg(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    &arg.build_msg(),\n-                    \"change this to\",\n-                    format!(\"{}{}\", arg.ref_prefix, arg.deref_ty.display(cx)),\n-                    Applicability::Unspecified,\n-                );\n+                span_lint_hir_and_then(cx, PTR_ARG, arg.emission_id, arg.span, &arg.build_msg(), |diag| {\n+                    diag.span_suggestion(\n+                        arg.span,\n+                        \"change this to\",\n+                        format!(\"{}{}\", arg.ref_prefix, arg.deref_ty.display(cx)),\n+                        Applicability::Unspecified,\n+                    );\n+                });\n             }\n         }\n     }\n@@ -221,7 +220,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n         let results = check_ptr_arg_usage(cx, body, &lint_args);\n \n         for (result, args) in results.iter().zip(lint_args.iter()).filter(|(r, _)| !r.skip) {\n-            span_lint_and_then(cx, PTR_ARG, args.span, &args.build_msg(), |diag| {\n+            span_lint_hir_and_then(cx, PTR_ARG, args.emission_id, args.span, &args.build_msg(), |diag| {\n                 diag.multipart_suggestion(\n                     \"change this to\",\n                     iter::once((args.span, format!(\"{}{}\", args.ref_prefix, args.deref_ty.display(cx))))\n@@ -315,6 +314,7 @@ struct PtrArgReplacement {\n \n struct PtrArg<'tcx> {\n     idx: usize,\n+    emission_id: hir::HirId,\n     span: Span,\n     ty_did: DefId,\n     ty_name: Symbol,\n@@ -419,10 +419,8 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if let [.., name] = path.segments;\n                 if cx.tcx.item_name(adt.did()) == name.ident.name;\n \n-                if !is_lint_allowed(cx, PTR_ARG, hir_ty.hir_id);\n-                if params.get(i).map_or(true, |p| !is_lint_allowed(cx, PTR_ARG, p.hir_id));\n-\n                 then {\n+                    let emission_id = params.get(i).map_or(hir_ty.hir_id, |param| param.hir_id);\n                     let (method_renames, deref_ty) = match cx.tcx.get_diagnostic_name(adt.did()) {\n                         Some(sym::Vec) => (\n                             [(\"clone\", \".to_owned()\")].as_slice(),\n@@ -455,21 +453,28 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                                 })\n                                 .and_then(|arg| snippet_opt(cx, arg.span))\n                                 .unwrap_or_else(|| substs.type_at(1).to_string());\n-                            span_lint_and_sugg(\n+                            span_lint_hir_and_then(\n                                 cx,\n                                 PTR_ARG,\n+                                emission_id,\n                                 hir_ty.span,\n                                 \"using a reference to `Cow` is not recommended\",\n-                                \"change this to\",\n-                                format!(\"&{}{}\", mutability.prefix_str(), ty_name),\n-                                Applicability::Unspecified,\n+                                |diag| {\n+                                    diag.span_suggestion(\n+                                        hir_ty.span,\n+                                        \"change this to\",\n+                                        format!(\"&{}{}\", mutability.prefix_str(), ty_name),\n+                                        Applicability::Unspecified,\n+                                    );\n+                                }\n                             );\n                             return None;\n                         },\n                         _ => return None,\n                     };\n                     return Some(PtrArg {\n                         idx: i,\n+                        emission_id,\n                         span: hir_ty.span,\n                         ty_did: adt.did(),\n                         ty_name: name.ident.name,"}, {"sha": "5ae04947b82d0bd789d4cea2c2ee78de34bf910a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n@@ -94,9 +94,10 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n             if !in_external_macro(cx.sess(), retexpr.span);\n             if !local.span.from_expansion();\n             then {\n-                span_lint_and_then(\n+                span_lint_hir_and_then(\n                     cx,\n                     LET_AND_RETURN,\n+                    retexpr.hir_id,\n                     retexpr.span,\n                     \"returning the result of a `let` binding from a block\",\n                     |err| {\n@@ -185,6 +186,7 @@ fn check_final_expr<'tcx>(\n                 if !borrows {\n                     emit_return_lint(\n                         cx,\n+                        inner.map_or(expr.hir_id, |inner| inner.hir_id),\n                         span.expect(\"`else return` is not possible\"),\n                         inner.as_ref().map(|i| i.span),\n                         replacement,\n@@ -220,50 +222,81 @@ fn check_final_expr<'tcx>(\n     }\n }\n \n-fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Span>, replacement: RetReplacement) {\n+fn emit_return_lint(\n+    cx: &LateContext<'_>,\n+    emission_place: HirId,\n+    ret_span: Span,\n+    inner_span: Option<Span>,\n+    replacement: RetReplacement,\n+) {\n     if ret_span.from_expansion() {\n         return;\n     }\n     match inner_span {\n         Some(inner_span) => {\n             let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n-                diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n-            });\n+            span_lint_hir_and_then(\n+                cx,\n+                NEEDLESS_RETURN,\n+                emission_place,\n+                ret_span,\n+                \"unneeded `return` statement\",\n+                |diag| {\n+                    let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+                    diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n+                },\n+            );\n         },\n         None => match replacement {\n             RetReplacement::Empty => {\n-                span_lint_and_sugg(\n+                span_lint_hir_and_then(\n                     cx,\n                     NEEDLESS_RETURN,\n+                    emission_place,\n                     ret_span,\n                     \"unneeded `return` statement\",\n-                    \"remove `return`\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            ret_span,\n+                            \"remove `return`\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n                 );\n             },\n             RetReplacement::Block => {\n-                span_lint_and_sugg(\n+                span_lint_hir_and_then(\n                     cx,\n                     NEEDLESS_RETURN,\n+                    emission_place,\n                     ret_span,\n                     \"unneeded `return` statement\",\n-                    \"replace `return` with an empty block\",\n-                    \"{}\".to_string(),\n-                    Applicability::MachineApplicable,\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            ret_span,\n+                            \"replace `return` with an empty block\",\n+                            \"{}\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n                 );\n             },\n             RetReplacement::Unit => {\n-                span_lint_and_sugg(\n+                span_lint_hir_and_then(\n                     cx,\n                     NEEDLESS_RETURN,\n+                    emission_place,\n                     ret_span,\n                     \"unneeded `return` statement\",\n-                    \"replace `return` with a unit value\",\n-                    \"()\".to_string(),\n-                    Applicability::MachineApplicable,\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            ret_span,\n+                            \"replace `return` with a unit value\",\n+                            \"()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n                 );\n             },\n         },"}, {"sha": "d3f9e5abfd739a2ba9e2b66cb132d49ca87ceb54", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::higher;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{path_to_local, usage::is_potentially_mutated};\n@@ -251,9 +251,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             unwrappable.kind.error_variant_pattern()\n                         };\n \n-                        span_lint_and_then(\n+                        span_lint_hir_and_then(\n                             self.cx,\n                             UNNECESSARY_UNWRAP,\n+                            expr.hir_id,\n                             expr.span,\n                             &format!(\n                                 \"called `{}` on `{}` after checking its variant with `{}`\",\n@@ -283,9 +284,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             },\n                         );\n                     } else {\n-                        span_lint_and_then(\n+                        span_lint_hir_and_then(\n                             self.cx,\n                             PANICKING_UNWRAP,\n+                            expr.hir_id,\n                             expr.span,\n                             &format!(\"this call to `{}()` will always panic\",\n                             method_name.ident.name),"}, {"sha": "beb8bbe75d102a46576b660cb065e6b835bbfb7e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1539,9 +1539,13 @@ pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tc\n     None\n }\n \n-/// Returns `true` if the lint is allowed in the current context\n+/// Returns `true` if the lint is allowed in the current context. This is useful for\n+/// skipping long running code when it's unnecessary\n ///\n-/// Useful for skipping long running code when it's unnecessary\n+/// This function should check the lint level for the same node, that the lint will\n+/// be emitted at. If the information is buffered to be emitted at a later point, please\n+/// make sure to use `span_lint_hir` functions to emit the lint. This ensures that\n+/// expectations at the checked nodes will be fulfilled.\n pub fn is_lint_allowed(cx: &LateContext<'_>, lint: &'static Lint, id: HirId) -> bool {\n     cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }"}, {"sha": "4639f00a8d83018670156e3a6d9f56a16996f2a4", "filename": "tests/ui/boxed_local.rs", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fboxed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fboxed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fboxed_local.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,4 +1,5 @@\n #![feature(box_syntax)]\n+#![feature(lint_reasons)]\n #![allow(\n     clippy::borrowed_box,\n     clippy::needless_pass_by_value,\n@@ -202,3 +203,7 @@ mod issue4804 {\n         fn foo(x: Box<u32>) {}\n     }\n }\n+\n+fn check_expect(#[expect(clippy::boxed_local)] x: Box<A>) {\n+    x.foo();\n+}", "previous_filename": "tests/ui/escape_analysis.rs"}, {"sha": "9036529f39c519c6043320c7982366f36614ffe1", "filename": "tests/ui/boxed_local.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fboxed_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fboxed_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fboxed_local.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,25 +1,25 @@\n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:40:13\n+  --> $DIR/boxed_local.rs:41:13\n    |\n LL | fn warn_arg(x: Box<A>) {\n    |             ^\n    |\n    = note: `-D clippy::boxed-local` implied by `-D warnings`\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:131:12\n+  --> $DIR/boxed_local.rs:132:12\n    |\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:195:44\n+  --> $DIR/boxed_local.rs:196:44\n    |\n LL |         fn default_impl_x(self: Box<Self>, x: Box<u32>) -> u32 {\n    |                                            ^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/escape_analysis.rs:202:16\n+  --> $DIR/boxed_local.rs:203:16\n    |\n LL |         fn foo(x: Box<u32>) {}\n    |                ^", "previous_filename": "tests/ui/escape_analysis.stderr"}, {"sha": "82dce81979fd9d906230acc53f557470331aab52", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n #![allow(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n@@ -84,3 +85,18 @@ fn main() {\n \n     assert!(x.is_ok(), \"{:?}\", x.unwrap_err()); // ok, it's a common test pattern\n }\n+\n+fn check_expect() {\n+    let x = Some(());\n+    if x.is_some() {\n+        #[expect(clippy::unnecessary_unwrap)]\n+        x.unwrap(); // unnecessary\n+        #[expect(clippy::unnecessary_unwrap)]\n+        x.expect(\"an error message\"); // unnecessary\n+    } else {\n+        #[expect(clippy::panicking_unwrap)]\n+        x.unwrap(); // will panic\n+        #[expect(clippy::panicking_unwrap)]\n+        x.expect(\"an error message\"); // will panic\n+    }\n+}"}, {"sha": "ef68827422233e2de992d615c047802bf23cbdad", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,19 +1,19 @@\n error: called `unwrap` on `x` after checking its variant with `is_some`\n-  --> $DIR/simple_conditionals.rs:39:9\n+  --> $DIR/simple_conditionals.rs:40:9\n    |\n LL |     if x.is_some() {\n    |     -------------- help: try: `if let Some(..) = x`\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/simple_conditionals.rs:1:35\n+  --> $DIR/simple_conditionals.rs:2:35\n    |\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `expect` on `x` after checking its variant with `is_some`\n-  --> $DIR/simple_conditionals.rs:40:9\n+  --> $DIR/simple_conditionals.rs:41:9\n    |\n LL |     if x.is_some() {\n    |     -------------- help: try: `if let Some(..) = x`\n@@ -22,7 +22,7 @@ LL |         x.expect(\"an error message\"); // unnecessary\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:42:9\n+  --> $DIR/simple_conditionals.rs:43:9\n    |\n LL |     if x.is_some() {\n    |        ----------- because of this check\n@@ -31,13 +31,13 @@ LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/simple_conditionals.rs:1:9\n+  --> $DIR/simple_conditionals.rs:2:9\n    |\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `expect()` will always panic\n-  --> $DIR/simple_conditionals.rs:43:9\n+  --> $DIR/simple_conditionals.rs:44:9\n    |\n LL |     if x.is_some() {\n    |        ----------- because of this check\n@@ -46,15 +46,15 @@ LL |         x.expect(\"an error message\"); // will panic\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:46:9\n+  --> $DIR/simple_conditionals.rs:47:9\n    |\n LL |     if x.is_none() {\n    |        ----------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: called `unwrap` on `x` after checking its variant with `is_none`\n-  --> $DIR/simple_conditionals.rs:48:9\n+  --> $DIR/simple_conditionals.rs:49:9\n    |\n LL |     if x.is_none() {\n    |     -------------- help: try: `if let Some(..) = x`\n@@ -63,7 +63,7 @@ LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: called `unwrap` on `x` after checking its variant with `is_some`\n-  --> $DIR/simple_conditionals.rs:7:13\n+  --> $DIR/simple_conditionals.rs:8:13\n    |\n LL |         if $a.is_some() {\n    |         --------------- help: try: `if let Some(..) = x`\n@@ -76,15 +76,15 @@ LL |     m!(x);\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: called `unwrap` on `x` after checking its variant with `is_ok`\n-  --> $DIR/simple_conditionals.rs:56:9\n+  --> $DIR/simple_conditionals.rs:57:9\n    |\n LL |     if x.is_ok() {\n    |     ------------ help: try: `if let Ok(..) = x`\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: called `expect` on `x` after checking its variant with `is_ok`\n-  --> $DIR/simple_conditionals.rs:57:9\n+  --> $DIR/simple_conditionals.rs:58:9\n    |\n LL |     if x.is_ok() {\n    |     ------------ help: try: `if let Ok(..) = x`\n@@ -93,7 +93,7 @@ LL |         x.expect(\"an error message\"); // unnecessary\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `unwrap_err()` will always panic\n-  --> $DIR/simple_conditionals.rs:58:9\n+  --> $DIR/simple_conditionals.rs:59:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n@@ -102,7 +102,7 @@ LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:60:9\n+  --> $DIR/simple_conditionals.rs:61:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n@@ -111,7 +111,7 @@ LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: this call to `expect()` will always panic\n-  --> $DIR/simple_conditionals.rs:61:9\n+  --> $DIR/simple_conditionals.rs:62:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n@@ -120,7 +120,7 @@ LL |         x.expect(\"an error message\"); // will panic\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `unwrap_err` on `x` after checking its variant with `is_ok`\n-  --> $DIR/simple_conditionals.rs:62:9\n+  --> $DIR/simple_conditionals.rs:63:9\n    |\n LL |     if x.is_ok() {\n    |     ------------ help: try: `if let Err(..) = x`\n@@ -129,15 +129,15 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:65:9\n+  --> $DIR/simple_conditionals.rs:66:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: called `unwrap_err` on `x` after checking its variant with `is_err`\n-  --> $DIR/simple_conditionals.rs:66:9\n+  --> $DIR/simple_conditionals.rs:67:9\n    |\n LL |     if x.is_err() {\n    |     ------------- help: try: `if let Err(..) = x`\n@@ -146,7 +146,7 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: called `unwrap` on `x` after checking its variant with `is_err`\n-  --> $DIR/simple_conditionals.rs:68:9\n+  --> $DIR/simple_conditionals.rs:69:9\n    |\n LL |     if x.is_err() {\n    |     ------------- help: try: `if let Ok(..) = x`\n@@ -155,7 +155,7 @@ LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: this call to `unwrap_err()` will always panic\n-  --> $DIR/simple_conditionals.rs:69:9\n+  --> $DIR/simple_conditionals.rs:70:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check"}, {"sha": "5e55b8b6739198d74b68dd706d80054528f9133b", "filename": "tests/ui/implicit_return.fixed", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fimplicit_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fimplicit_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.fixed?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![feature(lint_reasons)]\n #![warn(clippy::implicit_return)]\n #![allow(clippy::needless_return, clippy::needless_bool, unused, clippy::never_loop)]\n \n@@ -128,3 +128,13 @@ async fn foo() -> bool {\n }\n \n fn main() {}\n+\n+fn check_expect() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+\n+    #[expect(clippy::implicit_return)]\n+    true\n+}"}, {"sha": "76f0a98035209f63e1b33f5afa67fef1a91eb5f1", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![feature(lint_reasons)]\n #![warn(clippy::implicit_return)]\n #![allow(clippy::needless_return, clippy::needless_bool, unused, clippy::never_loop)]\n \n@@ -128,3 +128,13 @@ async fn foo() -> bool {\n }\n \n fn main() {}\n+\n+fn check_expect() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+\n+    #[expect(clippy::implicit_return)]\n+    true\n+}"}, {"sha": "dd6b1db5f70a0ed2cb50de66b676c24844defe9b", "filename": "tests/ui/logic_bug.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Flogic_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Flogic_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::logic_bug)]\n \n@@ -24,3 +25,10 @@ fn equality_stuff() {\n     let _ = a > b && a <= b;\n     let _ = a > b && a == b;\n }\n+\n+fn check_expect() {\n+    let a: i32 = unimplemented!();\n+    let b: i32 = unimplemented!();\n+    #[expect(clippy::logic_bug)]\n+    let _ = a < b && a >= b;\n+}"}, {"sha": "4021fbf45705324545b033c093050ec0de40cd42", "filename": "tests/ui/logic_bug.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Flogic_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Flogic_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,60 +1,60 @@\n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:10:13\n+  --> $DIR/logic_bug.rs:11:13\n    |\n LL |     let _ = a && b || a;\n    |             ^^^^^^^^^^^ help: it would look like the following: `a`\n    |\n    = note: `-D clippy::logic-bug` implied by `-D warnings`\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:10:18\n+  --> $DIR/logic_bug.rs:11:18\n    |\n LL |     let _ = a && b || a;\n    |                  ^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:12:13\n+  --> $DIR/logic_bug.rs:13:13\n    |\n LL |     let _ = false && a;\n    |             ^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:12:22\n+  --> $DIR/logic_bug.rs:13:22\n    |\n LL |     let _ = false && a;\n    |                      ^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:22:13\n+  --> $DIR/logic_bug.rs:23:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:22:13\n+  --> $DIR/logic_bug.rs:23:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:23:13\n+  --> $DIR/logic_bug.rs:24:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:23:13\n+  --> $DIR/logic_bug.rs:24:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:24:13\n+  --> $DIR/logic_bug.rs:25:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:24:13\n+  --> $DIR/logic_bug.rs:25:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^"}, {"sha": "e612480d264bdbc5ecf7fe7219dc8fb555c66cd5", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -4,6 +4,7 @@\n // run-rustfix\n // ignore-32bit\n \n+#![feature(lint_reasons)]\n #![allow(unused_imports, unreachable_code, unused_variables, dead_code, unused_attributes)]\n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]"}, {"sha": "b34817cc3b2696e2e939ce9de2cdd660185bce48", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -4,6 +4,7 @@\n // run-rustfix\n // ignore-32bit\n \n+#![feature(lint_reasons)]\n #![allow(unused_imports, unreachable_code, unused_variables, dead_code, unused_attributes)]\n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]"}, {"sha": "bf7b6edd0e314732cc71a469a23dc0a130aaa394", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,28 +1,28 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:18:5\n+  --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:20:5\n+  --> $DIR/macro_use_imports.rs:21:5\n    |\n LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:22:5\n+  --> $DIR/macro_use_imports.rs:25:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:24:5\n+  --> $DIR/macro_use_imports.rs:19:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8a1b05da9efc78231103984cfec6d253ee9e9e4f", "filename": "tests/ui/macro_use_imports_expect.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmacro_use_imports_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports_expect.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -0,0 +1,51 @@\n+// aux-build:macro_rules.rs\n+// aux-build:macro_use_helper.rs\n+// aux-build:proc_macro_derive.rs\n+// ignore-32bit\n+\n+#![feature(lint_reasons)]\n+#![allow(unused_imports, unreachable_code, unused_variables, dead_code, unused_attributes)]\n+#![allow(clippy::single_component_path_imports)]\n+#![warn(clippy::macro_use_imports)]\n+\n+#[macro_use]\n+extern crate macro_use_helper as mac;\n+\n+#[macro_use]\n+extern crate proc_macro_derive as mini_mac;\n+\n+mod a {\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mac;\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mini_mac;\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mac::inner;\n+    #[expect(clippy::macro_use_imports)]\n+    #[macro_use]\n+    use mac::inner::nested;\n+\n+    #[derive(ClippyMiniMacroTest)]\n+    struct Test;\n+\n+    fn test() {\n+        pub_macro!();\n+        inner_mod_macro!();\n+        pub_in_private_macro!(_var);\n+        function_macro!();\n+        let v: ty_macro!() = Vec::default();\n+\n+        inner::try_err!();\n+        inner::foofoo!();\n+        nested::string_add!();\n+    }\n+}\n+\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n+#[macro_use]\n+use a as b;\n+\n+fn main() {}"}, {"sha": "03b2433f6666b4b7af00e1a870b3731724129fef", "filename": "tests/ui/manual_non_exhaustive_enum.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmanual_non_exhaustive_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmanual_non_exhaustive_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_non_exhaustive_enum.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![warn(clippy::manual_non_exhaustive)]\n #![allow(unused)]\n \n@@ -75,4 +76,12 @@ fn foo(x: &mut UsedHidden) {\n     }\n }\n \n+#[expect(clippy::manual_non_exhaustive)]\n+enum ExpectLint {\n+    A,\n+    B,\n+    #[doc(hidden)]\n+    _C,\n+}\n+\n fn main() {}"}, {"sha": "144fe86df554ba41d59b64704728ed52668968b6", "filename": "tests/ui/manual_non_exhaustive_enum.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmanual_non_exhaustive_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fmanual_non_exhaustive_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_non_exhaustive_enum.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,5 +1,5 @@\n error: this seems like a manual implementation of the non-exhaustive pattern\n-  --> $DIR/manual_non_exhaustive_enum.rs:4:1\n+  --> $DIR/manual_non_exhaustive_enum.rs:5:1\n    |\n LL |   enum E {\n    |   ^-----\n@@ -15,13 +15,13 @@ LL | | }\n    |\n    = note: `-D clippy::manual-non-exhaustive` implied by `-D warnings`\n help: remove this variant\n-  --> $DIR/manual_non_exhaustive_enum.rs:8:5\n+  --> $DIR/manual_non_exhaustive_enum.rs:9:5\n    |\n LL |     _C,\n    |     ^^\n \n error: this seems like a manual implementation of the non-exhaustive pattern\n-  --> $DIR/manual_non_exhaustive_enum.rs:13:1\n+  --> $DIR/manual_non_exhaustive_enum.rs:14:1\n    |\n LL | / enum Ep {\n LL | |     A,\n@@ -32,7 +32,7 @@ LL | | }\n    | |_^\n    |\n help: remove this variant\n-  --> $DIR/manual_non_exhaustive_enum.rs:17:5\n+  --> $DIR/manual_non_exhaustive_enum.rs:18:5\n    |\n LL |     _C,\n    |     ^^"}, {"sha": "0bc0d0011efe00cd009475cb7972c3162cde1c62", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n #![feature(let_else)]\n #![allow(unused)]\n #![allow(\n@@ -227,4 +228,13 @@ fn needless_return_macro() -> String {\n     format!(\"Hello {}\", \"world!\")\n }\n \n+fn check_expect() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    #[expect(clippy::needless_return)]\n+    return true;\n+}\n+\n fn main() {}"}, {"sha": "eb9f72e8e7822fe8839060d77bc9ca237d1f5057", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n #![feature(let_else)]\n #![allow(unused)]\n #![allow(\n@@ -227,4 +228,13 @@ fn needless_return_macro() -> String {\n     return format!(\"Hello {}\", \"world!\");\n }\n \n+fn check_expect() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    #[expect(clippy::needless_return)]\n+    return true;\n+}\n+\n fn main() {}"}, {"sha": "83ff07638693c7ef5a6d861c84b58bf3486c0d2e", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,223 +1,223 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:26:5\n+  --> $DIR/needless_return.rs:27:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:30:5\n+  --> $DIR/needless_return.rs:31:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:35:9\n+  --> $DIR/needless_return.rs:36:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:37:9\n+  --> $DIR/needless_return.rs:38:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:43:17\n+  --> $DIR/needless_return.rs:44:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:45:13\n+  --> $DIR/needless_return.rs:46:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:52:9\n+  --> $DIR/needless_return.rs:53:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:54:16\n+  --> $DIR/needless_return.rs:55:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:58:5\n+  --> $DIR/needless_return.rs:59:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:62:5\n+  --> $DIR/needless_return.rs:63:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:67:9\n+  --> $DIR/needless_return.rs:68:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:69:9\n+  --> $DIR/needless_return.rs:70:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:76:14\n+  --> $DIR/needless_return.rs:77:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:85:13\n+  --> $DIR/needless_return.rs:86:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:87:14\n+  --> $DIR/needless_return.rs:88:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:100:9\n+  --> $DIR/needless_return.rs:101:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:102:9\n+  --> $DIR/needless_return.rs:103:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:124:32\n+  --> $DIR/needless_return.rs:125:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:129:13\n+  --> $DIR/needless_return.rs:130:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:131:20\n+  --> $DIR/needless_return.rs:132:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:137:32\n+  --> $DIR/needless_return.rs:138:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:146:5\n+  --> $DIR/needless_return.rs:147:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:150:5\n+  --> $DIR/needless_return.rs:151:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:155:9\n+  --> $DIR/needless_return.rs:156:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:157:9\n+  --> $DIR/needless_return.rs:158:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:163:17\n+  --> $DIR/needless_return.rs:164:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:165:13\n+  --> $DIR/needless_return.rs:166:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:172:9\n+  --> $DIR/needless_return.rs:173:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:174:16\n+  --> $DIR/needless_return.rs:175:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:178:5\n+  --> $DIR/needless_return.rs:179:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:182:5\n+  --> $DIR/needless_return.rs:183:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:187:9\n+  --> $DIR/needless_return.rs:188:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:189:9\n+  --> $DIR/needless_return.rs:190:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:196:14\n+  --> $DIR/needless_return.rs:197:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:209:9\n+  --> $DIR/needless_return.rs:210:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:211:9\n+  --> $DIR/needless_return.rs:212:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:227:5\n+  --> $DIR/needless_return.rs:228:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `format!(\"Hello {}\", \"world!\")`"}, {"sha": "24ae62bb05884104c59d25e7d20ed0260a35481d", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::nonminimal_bool)]\n \n@@ -50,3 +51,9 @@ fn issue4548() {\n \n     if i != j && f(i, j) != 0 || i == j && f(i, j) != 1 {}\n }\n+\n+fn check_expect() {\n+    let a: bool = unimplemented!();\n+    #[expect(clippy::nonminimal_bool)]\n+    let _ = !!a;\n+}"}, {"sha": "fc6a5ce1dc2eef4e6ffc2860aa19154b84c53614", "filename": "tests/ui/nonminimal_bool.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fnonminimal_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fnonminimal_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,49 +1,49 @@\n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:10:13\n+  --> $DIR/nonminimal_bool.rs:11:13\n    |\n LL |     let _ = !true;\n    |             ^^^^^ help: try: `false`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:11:13\n+  --> $DIR/nonminimal_bool.rs:12:13\n    |\n LL |     let _ = !false;\n    |             ^^^^^^ help: try: `true`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:12:13\n+  --> $DIR/nonminimal_bool.rs:13:13\n    |\n LL |     let _ = !!a;\n    |             ^^^ help: try: `a`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:13:13\n+  --> $DIR/nonminimal_bool.rs:14:13\n    |\n LL |     let _ = false || a;\n    |             ^^^^^^^^^^ help: try: `a`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:17:13\n+  --> $DIR/nonminimal_bool.rs:18:13\n    |\n LL |     let _ = !(!a && b);\n    |             ^^^^^^^^^^ help: try: `a || !b`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:18:13\n+  --> $DIR/nonminimal_bool.rs:19:13\n    |\n LL |     let _ = !(!a || b);\n    |             ^^^^^^^^^^ help: try: `a && !b`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:19:13\n+  --> $DIR/nonminimal_bool.rs:20:13\n    |\n LL |     let _ = !a && !(b && c);\n    |             ^^^^^^^^^^^^^^^ help: try: `!(a || b && c)`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:27:13\n+  --> $DIR/nonminimal_bool.rs:28:13\n    |\n LL |     let _ = a == b && c == 5 && a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -56,7 +56,7 @@ LL |     let _ = a == b && c == 5;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:28:13\n+  --> $DIR/nonminimal_bool.rs:29:13\n    |\n LL |     let _ = a == b || c == 5 || a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -69,7 +69,7 @@ LL |     let _ = a == b || c == 5;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:29:13\n+  --> $DIR/nonminimal_bool.rs:30:13\n    |\n LL |     let _ = a == b && c == 5 && b == a;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |     let _ = a == b && c == 5;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:30:13\n+  --> $DIR/nonminimal_bool.rs:31:13\n    |\n LL |     let _ = a != b || !(a != b || c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,7 +95,7 @@ LL |     let _ = a != b || c != d;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:31:13\n+  --> $DIR/nonminimal_bool.rs:32:13\n    |\n LL |     let _ = a != b && !(a != b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fd15001e540c6021d472bfd293fff12a53dec206", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n@@ -109,16 +110,20 @@ mod issue_5644 {\n         #[allow(clippy::ptr_arg)] _s: &String,\n         #[allow(clippy::ptr_arg)] _p: &PathBuf,\n         #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+        #[expect(clippy::ptr_arg)] _expect: &Cow<[i32]>,\n     ) {\n     }\n \n+    fn some_allowed(#[allow(clippy::ptr_arg)] _v: &Vec<u32>, _s: &String) {}\n+\n     struct S;\n     impl S {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n             #[allow(clippy::ptr_arg)] _s: &String,\n             #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+            #[expect(clippy::ptr_arg)] _expect: &Cow<[i32]>,\n         ) {\n         }\n     }\n@@ -129,6 +134,7 @@ mod issue_5644 {\n             #[allow(clippy::ptr_arg)] _s: &String,\n             #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+            #[expect(clippy::ptr_arg)] _expect: &Cow<[i32]>,\n         ) {\n         }\n     }"}, {"sha": "bbf731c6d01c0ec8e4b77df4c9c8d3250a8b8516", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,49 +1,49 @@\n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:7:14\n+  --> $DIR/ptr_arg.rs:8:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&mut Vec` instead of `&mut [_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:11:18\n+  --> $DIR/ptr_arg.rs:12:18\n    |\n LL | fn do_vec_mut(x: &mut Vec<i64>) {\n    |                  ^^^^^^^^^^^^^ help: change this to: `&mut [i64]`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:15:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n error: writing `&mut String` instead of `&mut str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:19:18\n+  --> $DIR/ptr_arg.rs:20:18\n    |\n LL | fn do_str_mut(x: &mut String) {\n    |                  ^^^^^^^^^^^ help: change this to: `&mut str`\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:23:15\n+  --> $DIR/ptr_arg.rs:24:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n error: writing `&mut PathBuf` instead of `&mut Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:27:19\n+  --> $DIR/ptr_arg.rs:28:19\n    |\n LL | fn do_path_mut(x: &mut PathBuf) {\n    |                   ^^^^^^^^^^^^ help: change this to: `&mut Path`\n \n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:35:18\n+  --> $DIR/ptr_arg.rs:36:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:48:14\n+  --> $DIR/ptr_arg.rs:49:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -59,7 +59,7 @@ LL |     let i = (e).clone();\n  ...\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:57:18\n+  --> $DIR/ptr_arg.rs:58:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -75,7 +75,7 @@ LL ~     x.to_owned()\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:65:19\n+  --> $DIR/ptr_arg.rs:66:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n    |                   ^^^^^^^^\n@@ -91,7 +91,7 @@ LL ~     x.to_path_buf()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:73:44\n+  --> $DIR/ptr_arg.rs:74:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -105,13 +105,19 @@ LL ~     let c = y;\n    |\n \n error: using a reference to `Cow` is not recommended\n-  --> $DIR/ptr_arg.rs:87:25\n+  --> $DIR/ptr_arg.rs:88:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n+  --> $DIR/ptr_arg.rs:117:66\n+   |\n+LL |     fn some_allowed(#[allow(clippy::ptr_arg)] _v: &Vec<u32>, _s: &String) {}\n+   |                                                                  ^^^^^^^ help: change this to: `&str`\n+\n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:140:21\n+  --> $DIR/ptr_arg.rs:146:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n    |                     ^^^^^^^^\n@@ -124,7 +130,7 @@ LL ~         let _ = vec.to_owned().clone();\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:145:23\n+  --> $DIR/ptr_arg.rs:151:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n    |                       ^^^^^^^^\n@@ -137,7 +143,7 @@ LL ~         let _ = path.to_path_buf().clone();\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:150:21\n+  --> $DIR/ptr_arg.rs:156:21\n    |\n LL |     fn foo_str(str: &PathBuf) {\n    |                     ^^^^^^^^\n@@ -150,10 +156,10 @@ LL ~         let _ = str.to_path_buf().clone();\n    |\n \n error: writing `&mut Vec` instead of `&mut [_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:156:29\n+  --> $DIR/ptr_arg.rs:162:29\n    |\n LL | fn mut_vec_slice_methods(v: &mut Vec<u32>) {\n    |                             ^^^^^^^^^^^^^ help: change this to: `&mut [u32]`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "da52c0acf93b0fd463f70b4af1f448ece365acfb", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n+#![feature(lint_reasons)]\n #![allow(clippy::implicit_clone, clippy::drop_non_drop)]\n use std::ffi::OsString;\n use std::path::Path;\n@@ -29,6 +30,10 @@ fn main() {\n     #[allow(clippy::redundant_clone)]\n     let _s = String::new().to_string();\n \n+    // Check that lint level works\n+    #[expect(clippy::redundant_clone)]\n+    let _s = String::new().to_string();\n+\n     let tup = (String::from(\"foo\"),);\n     let _t = tup.0;\n "}, {"sha": "5867d019dbb7d4742713541a5c81af848c24233a", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n+#![feature(lint_reasons)]\n #![allow(clippy::implicit_clone, clippy::drop_non_drop)]\n use std::ffi::OsString;\n use std::path::Path;\n@@ -29,6 +30,10 @@ fn main() {\n     #[allow(clippy::redundant_clone)]\n     let _s = String::new().to_string();\n \n+    // Check that lint level works\n+    #[expect(clippy::redundant_clone)]\n+    let _s = String::new().to_string();\n+\n     let tup = (String::from(\"foo\"),);\n     let _t = tup.0.clone();\n "}, {"sha": "aa1dd7cbb45cdb9f3e5aaf8ad0ffc4df8f5cdb52", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4995b4e584a2d29c6805460b3002b4cf87bd1e2c/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=4995b4e584a2d29c6805460b3002b4cf87bd1e2c", "patch": "@@ -1,180 +1,180 @@\n error: redundant clone\n-  --> $DIR/redundant_clone.rs:9:42\n+  --> $DIR/redundant_clone.rs:10:42\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |                                          ^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:9:14\n+  --> $DIR/redundant_clone.rs:10:14\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:12:15\n+  --> $DIR/redundant_clone.rs:13:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:12:14\n+  --> $DIR/redundant_clone.rs:13:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:15:15\n+  --> $DIR/redundant_clone.rs:16:15\n    |\n LL |     let _s = s.to_string();\n    |               ^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:15:14\n+  --> $DIR/redundant_clone.rs:16:14\n    |\n LL |     let _s = s.to_string();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:18:15\n+  --> $DIR/redundant_clone.rs:19:15\n    |\n LL |     let _s = s.to_owned();\n    |               ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:18:14\n+  --> $DIR/redundant_clone.rs:19:14\n    |\n LL |     let _s = s.to_owned();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:20:42\n+  --> $DIR/redundant_clone.rs:21:42\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n    |                                          ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:20:14\n+  --> $DIR/redundant_clone.rs:21:14\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:22:42\n+  --> $DIR/redundant_clone.rs:23:42\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n    |                                          ^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:22:14\n+  --> $DIR/redundant_clone.rs:23:14\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:24:29\n+  --> $DIR/redundant_clone.rs:25:29\n    |\n LL |     let _s = OsString::new().to_owned();\n    |                             ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:24:14\n+  --> $DIR/redundant_clone.rs:25:14\n    |\n LL |     let _s = OsString::new().to_owned();\n    |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:26:29\n+  --> $DIR/redundant_clone.rs:27:29\n    |\n LL |     let _s = OsString::new().to_os_string();\n    |                             ^^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:26:14\n+  --> $DIR/redundant_clone.rs:27:14\n    |\n LL |     let _s = OsString::new().to_os_string();\n    |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:33:19\n+  --> $DIR/redundant_clone.rs:38:19\n    |\n LL |     let _t = tup.0.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:33:14\n+  --> $DIR/redundant_clone.rs:38:14\n    |\n LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:65:25\n+  --> $DIR/redundant_clone.rs:70:25\n    |\n LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n    |                         ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:65:24\n+  --> $DIR/redundant_clone.rs:70:24\n    |\n LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n    |                        ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:122:15\n+  --> $DIR/redundant_clone.rs:127:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:122:14\n+  --> $DIR/redundant_clone.rs:127:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:123:15\n+  --> $DIR/redundant_clone.rs:128:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:123:14\n+  --> $DIR/redundant_clone.rs:128:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:133:19\n+  --> $DIR/redundant_clone.rs:138:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:133:18\n+  --> $DIR/redundant_clone.rs:138:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:145:14\n+  --> $DIR/redundant_clone.rs:150:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:145:13\n+  --> $DIR/redundant_clone.rs:150:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:199:11\n+  --> $DIR/redundant_clone.rs:204:11\n    |\n LL |     foo(&x.clone(), move || {\n    |           ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:199:10\n+  --> $DIR/redundant_clone.rs:204:10\n    |\n LL |     foo(&x.clone(), move || {\n    |          ^"}]}