{"sha": "e8524198e3931373f5e097dece21e36d21c4a537", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTI0MTk4ZTM5MzEzNzNmNWUwOTdkZWNlMjFlMzZkMjFjNGE1Mzc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-05T23:53:30Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-06T01:54:45Z"}, "message": "Feature-gate explicit unboxed closure method calls & manual impls,\ndetect UFCS drop and allow UFCS methods to have explicit type parameters.\n\nWork towards #18875.\n\nSince code could previously call the methods & implement the traits\nmanually, this is a\n\n[breaking-change]\n\nCloses #19586. Closes #19375.", "tree": {"sha": "bb850376f44e69f614b4426a89e7ca2ce7069f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb850376f44e69f614b4426a89e7ca2ce7069f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8524198e3931373f5e097dece21e36d21c4a537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8524198e3931373f5e097dece21e36d21c4a537", "html_url": "https://github.com/rust-lang/rust/commit/e8524198e3931373f5e097dece21e36d21c4a537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8524198e3931373f5e097dece21e36d21c4a537/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4573da6f4ffb276c31773679fd19581fc15ded8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4573da6f4ffb276c31773679fd19581fc15ded8f", "html_url": "https://github.com/rust-lang/rust/commit/4573da6f4ffb276c31773679fd19581fc15ded8f"}], "stats": {"total": 213, "additions": 199, "deletions": 14}, "files": [{"sha": "51bf7ba0a2aec3c23c8340c64f9d45be276ede4a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -59,7 +59,7 @@\n #![allow(unknown_features)]\n #![feature(globs, intrinsics, lang_items, macro_rules, phase)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n-#![feature(default_type_params)]\n+#![feature(default_type_params, unboxed_closures)]\n #![deny(missing_docs)]\n \n mod macros;"}, {"sha": "ee93c896433a18bf95a8621d4e2a05aef066a84d", "filename": "src/librustc_typeck/check/callee.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use CrateCtxt;\n+\n+/// Check that it is legal to call methods of the trait corresponding\n+/// to `trait_id` (this only cares about the trait, not the specific\n+/// method that is called)\n+pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: ast::DefId) {\n+    let tcx = ccx.tcx;\n+    let did = Some(trait_id);\n+    let li = &tcx.lang_items;\n+\n+    if did == li.drop_trait() {\n+        span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\");\n+    } else if !tcx.sess.features.borrow().unboxed_closures {\n+        // the #[feature(unboxed_closures)] feature isn't\n+        // activated so we need to enforce the closure\n+        // restrictions.\n+\n+        let method = if did == li.fn_trait() {\n+            \"call\"\n+        } else if did == li.fn_mut_trait() {\n+            \"call_mut\"\n+        } else if did == li.fn_once_trait() {\n+            \"call_once\"\n+        } else {\n+            return // not a closure method, everything is OK.\n+        };\n+\n+        span_err!(tcx.sess, span, E0174,\n+                  \"explicit use of unboxed closure method `{}` is experimental\",\n+                  method);\n+        span_help!(tcx.sess, span,\n+                   \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n+    }\n+}"}, {"sha": "b6a9e2cbc59eae956c6874d780a4832ea65c9022", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -10,7 +10,7 @@\n \n use super::probe;\n \n-use check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n+use check::{mod, FnCtxt, NoPreference, PreferMutLvalue, callee};\n use middle::subst::{mod, Subst};\n use middle::traits;\n use middle::ty::{mod, Ty};\n@@ -90,7 +90,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         let self_ty = self.adjust_self_ty(unadjusted_self_ty, &pick.adjustment);\n \n         // Make sure nobody calls `drop()` explicitly.\n-        self.enforce_drop_trait_limitations(&pick);\n+        self.enforce_illegal_method_limitations(&pick);\n \n         // Create substitutions for the method's type parameters.\n         let (rcvr_substs, method_origin) =\n@@ -624,14 +624,11 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         self.fcx.infcx()\n     }\n \n-    fn enforce_drop_trait_limitations(&self, pick: &probe::Pick) {\n+    fn enforce_illegal_method_limitations(&self, pick: &probe::Pick) {\n         // Disallow calls to the method `drop` defined in the `Drop` trait.\n         match pick.method_ty.container {\n             ty::TraitContainer(trait_def_id) => {\n-                if Some(trait_def_id) == self.tcx().lang_items.drop_trait() {\n-                    span_err!(self.tcx().sess, self.span, E0040,\n-                              \"explicit call to destructor\");\n-                }\n+                callee::check_legal_trait_for_method_call(self.fcx.ccx, self.span, trait_def_id)\n             }\n             ty::ImplContainer(..) => {\n                 // Since `drop` is a trait method, we expect that any"}, {"sha": "dc6de01ff90eb061ad2bc1abcc219d22ac61ebca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -130,6 +130,7 @@ pub mod demand;\n pub mod method;\n pub mod wf;\n mod closure;\n+mod callee;\n \n /// Fields that are part of a `FnCtxt` which are inherited by\n /// closures defined within the function.  For example:\n@@ -5088,8 +5089,17 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n \n         // Case 3. Reference to a method.\n-        def::DefStaticMethod(..) => {\n+        def::DefStaticMethod(_, providence) |\n+        def::DefMethod(_, _, providence) => {\n             assert!(path.segments.len() >= 2);\n+\n+            match providence {\n+                def::FromTrait(trait_did) => {\n+                    callee::check_legal_trait_for_method_call(fcx.ccx, span, trait_did)\n+                }\n+                def::FromImpl(_) => {}\n+            }\n+\n             segment_spaces = Vec::from_elem(path.segments.len() - 2, None);\n             segment_spaces.push(Some(subst::TypeSpace));\n             segment_spaces.push(Some(subst::FnSpace));\n@@ -5101,7 +5111,6 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefMod(..) |\n         def::DefForeignMod(..) |\n         def::DefLocal(..) |\n-        def::DefMethod(..) |\n         def::DefUse(..) |\n         def::DefRegion(..) |\n         def::DefLabel(..) |"}, {"sha": "8fd383802d1f0643f88179f80a2e420cf10f9dcc", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -211,6 +211,9 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                    trait_ref.repr(self.crate_context.tcx),\n                    token::get_ident(item.ident));\n \n+            enforce_trait_manually_implementable(self.crate_context.tcx,\n+                                                 item.span,\n+                                                 trait_ref.def_id);\n             self.add_trait_impl(trait_ref.def_id, impl_did);\n         }\n \n@@ -476,6 +479,28 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     }\n }\n \n+fn enforce_trait_manually_implementable(tcx: &ty::ctxt, sp: Span, trait_def_id: ast::DefId) {\n+    if tcx.sess.features.borrow().unboxed_closures {\n+        // the feature gate allows all of them\n+        return\n+    }\n+    let did = Some(trait_def_id);\n+    let li = &tcx.lang_items;\n+\n+    let trait_name = if did == li.fn_trait() {\n+        \"Fn\"\n+    } else if did == li.fn_mut_trait() {\n+        \"FnMut\"\n+    } else if did == li.fn_once_trait() {\n+        \"FnOnce\"\n+    } else {\n+        return // everything OK\n+    };\n+    span_err!(tcx.sess, sp, E0173, \"manual implementations of `{}` are experimental\", trait_name);\n+    span_help!(tcx.sess, sp,\n+               \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n+}\n+\n fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                            impl_id: ast::DefId,\n                                            impl_poly_type: &ty::Polytype<'tcx>,"}, {"sha": "e026fbd05c7f039c5ca6e4fc9c83d4f7a07744de", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -53,7 +53,7 @@ register_diagnostics!(\n     E0035,\n     E0036,\n     E0038,\n-    E0040,\n+    E0040, // explicit use of destructor method\n     E0044,\n     E0045,\n     E0046,\n@@ -147,5 +147,7 @@ register_diagnostics!(\n     E0168,\n     E0169,\n     E0171,\n-    E0172\n+    E0172,\n+    E0173, // manual implementations of unboxed closure traits are experimental\n+    E0174 // explicit use of unboxed closure methods are experimental\n )"}, {"sha": "6b334dd6ecdfc0689ca704d1ed00aa2380e1031e", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -20,5 +20,5 @@ impl Drop for Foo {\n \n fn main() {\n     let x = Foo { x: 3 };\n-    x.drop();   //~ ERROR explicit call to destructor\n+    x.drop();   //~ ERROR explicit use of destructor method\n }"}, {"sha": "d0dd0e68da6bd363ed54dd39cfd36b8c8c764175", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -24,7 +24,7 @@ impl Drop for Foo {\n \n impl Bar for Foo {\n     fn blah(&self) {\n-        self.drop();    //~ ERROR explicit call to destructor\n+        self.drop();    //~ ERROR explicit use of destructor method\n     }\n }\n "}, {"sha": "8999da5b1755552122936f015384a1c6be38cf17", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-manual-impls.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+struct Foo;\n+impl Fn<(), ()> for Foo { //~ ERROR manual implementations of `Fn` are experimental\n+    extern \"rust-call\" fn call(&self, args: ()) -> () {}\n+}\n+struct Bar;\n+impl FnMut<(), ()> for Bar { //~ ERROR manual implementations of `FnMut` are experimental\n+    extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n+}\n+struct Baz;\n+impl FnOnce<(), ()> for Baz { //~ ERROR manual implementations of `FnOnce` are experimental\n+    extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n+}\n+\n+fn main() {}"}, {"sha": "5a066c441cfe5fe1afc9ffa31789cb2077dcc40e", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-method-calls.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+fn foo<F: Fn<(), ()>>(mut f: F) {\n+    f.call(()); //~ ERROR explicit use of unboxed closure method `call`\n+    f.call_mut(()); //~ ERROR explicit use of unboxed closure method `call_mut`\n+    f.call_once(()); //~ ERROR explicit use of unboxed closure method `call_once`\n+}\n+\n+fn main() {}"}, {"sha": "8efaf00c9c8484560e796233e8f94f4a71290fcb", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-ufcs-calls.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+fn foo<F: Fn<(), ()>>(mut f: F, mut g: F) {\n+    Fn::call(&g, ()); //~ ERROR explicit use of unboxed closure method `call`\n+    FnMut::call_mut(&mut g, ()); //~ ERROR explicit use of unboxed closure method `call_mut`\n+    FnOnce::call_once(g, ()); //~ ERROR explicit use of unboxed closure method `call_once`\n+}\n+\n+fn main() {}"}, {"sha": "f4c653bd57323e56b67193e933f1628e74681b39", "filename": "src/test/compile-fail/illegal-ufcs-drop.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Fcompile-fail%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fillegal-ufcs-drop.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    Drop::drop(&mut Foo) //~ ERROR explicit use of destructor method\n+}"}, {"sha": "f4ad78da4877e24285648f6e577d66c4c21ded45", "filename": "src/test/run-pass/ufcs-type-params.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Frun-pass%2Fufcs-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8524198e3931373f5e097dece21e36d21c4a537/src%2Ftest%2Frun-pass%2Fufcs-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-type-params.rs?ref=e8524198e3931373f5e097dece21e36d21c4a537", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<T> {\n+    fn get(&self) -> T;\n+}\n+\n+impl Foo<i32> for i32 {\n+    fn get(&self) -> i32 { *self }\n+}\n+\n+fn main() {\n+    let x: i32 = 1;\n+    Foo::<i32>::get(&x)\n+}"}]}