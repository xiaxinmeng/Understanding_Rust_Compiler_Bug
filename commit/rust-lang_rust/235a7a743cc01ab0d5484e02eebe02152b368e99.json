{"sha": "235a7a743cc01ab0d5484e02eebe02152b368e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNWE3YTc0M2NjMDFhYjBkNTQ4NGUwMmVlYmUwMjE1MmIzNjhlOTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-12T03:35:48Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-10T05:54:22Z"}, "message": "Change `self` in an import list `use foo::{self, ...}` to only import a module or enum `foo`.", "tree": {"sha": "cd72af8b518f85614f70b406f4220f32a0c7eafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd72af8b518f85614f70b406f4220f32a0c7eafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/235a7a743cc01ab0d5484e02eebe02152b368e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/235a7a743cc01ab0d5484e02eebe02152b368e99", "html_url": "https://github.com/rust-lang/rust/commit/235a7a743cc01ab0d5484e02eebe02152b368e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/235a7a743cc01ab0d5484e02eebe02152b368e99/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee21e2594c0dfe07f074be0da95c95b5b65ed50", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee21e2594c0dfe07f074be0da95c95b5b65ed50", "html_url": "https://github.com/rust-lang/rust/commit/aee21e2594c0dfe07f074be0da95c95b5b65ed50"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "5be21bc62c56cefbacdecbf2320947f0b3559695", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=235a7a743cc01ab0d5484e02eebe02152b368e99", "patch": "@@ -168,6 +168,7 @@ impl<'a> Resolver<'a> {\n                             target: binding,\n                             source: source,\n                             result: self.per_ns(|_, _| Cell::new(Err(Undetermined))),\n+                            type_ns_only: false,\n                         };\n                         self.add_import_directive(\n                             module_path, subclass, view_path.span, item.id, vis, expansion,\n@@ -195,10 +196,10 @@ impl<'a> Resolver<'a> {\n \n                         for source_item in source_items {\n                             let node = source_item.node;\n-                            let (module_path, ident, rename) = {\n+                            let (module_path, ident, rename, type_ns_only) = {\n                                 if node.name.name != keywords::SelfValue.name() {\n                                     let rename = node.rename.unwrap_or(node.name);\n-                                    (module_path.clone(), node.name, rename)\n+                                    (module_path.clone(), node.name, rename, false)\n                                 } else {\n                                     let ident = *module_path.last().unwrap();\n                                     if ident.name == keywords::CrateRoot.name() {\n@@ -212,13 +213,14 @@ impl<'a> Resolver<'a> {\n                                     }\n                                     let module_path = module_path.split_last().unwrap().1;\n                                     let rename = node.rename.unwrap_or(ident);\n-                                    (module_path.to_vec(), ident, rename)\n+                                    (module_path.to_vec(), ident, rename, true)\n                                 }\n                             };\n                             let subclass = SingleImport {\n                                 target: rename,\n                                 source: ident,\n                                 result: self.per_ns(|_, _| Cell::new(Err(Undetermined))),\n+                                type_ns_only: type_ns_only,\n                             };\n                             let id = source_item.node.id;\n                             self.add_import_directive("}, {"sha": "1702a1441bf8d4c9031077e9e851bc4ebd30876f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=235a7a743cc01ab0d5484e02eebe02152b368e99", "patch": "@@ -41,6 +41,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         target: Ident,\n         source: Ident,\n         result: PerNS<Cell<Result<&'a NameBinding<'a>, Determinacy>>>,\n+        type_ns_only: bool,\n     },\n     GlobImport {\n         is_prelude: bool,\n@@ -503,8 +504,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         directive.imported_module.set(Some(module));\n-        let (source, target, result) = match directive.subclass {\n-            SingleImport { source, target, ref result } => (source, target, result),\n+        let (source, target, result, type_ns_only) = match directive.subclass {\n+            SingleImport { source, target, ref result, type_ns_only } =>\n+                (source, target, result, type_ns_only),\n             GlobImport { .. } => {\n                 self.resolve_glob_import(directive);\n                 return true;\n@@ -513,7 +515,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         let mut indeterminate = false;\n-        self.per_ns(|this, ns| {\n+        self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Err(Undetermined) = result[ns].get() {\n                 result[ns].set(this.resolve_ident_in_module(module, source, ns, false, None));\n             } else {\n@@ -573,8 +575,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             _ => return None,\n         };\n \n-        let (ident, result) = match directive.subclass {\n-            SingleImport { source, ref result, .. } => (source, result),\n+        let (ident, result, type_ns_only) = match directive.subclass {\n+            SingleImport { source, ref result, type_ns_only, .. } => (source, result, type_ns_only),\n             GlobImport { .. } if module.def_id() == directive.parent.def_id() => {\n                 // Importing a module into itself is not allowed.\n                 return Some(\"Cannot glob-import a module into itself.\".to_string());\n@@ -592,7 +594,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         let mut all_ns_err = true;\n-        self.per_ns(|this, ns| {\n+        self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Ok(binding) = result[ns].get() {\n                 all_ns_err = false;\n                 if this.record_use(ident, ns, binding, directive.span) {\n@@ -604,7 +606,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         if all_ns_err {\n             let mut all_ns_failed = true;\n-            self.per_ns(|this, ns| {\n+            self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n                 match this.resolve_ident_in_module(module, ident, ns, false, Some(span)) {\n                     Ok(_) => all_ns_failed = false,\n                     _ => {}"}, {"sha": "cd73a45641111c9e20260536ee83af89d873e459", "filename": "src/test/compile-fail/issue-28075.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs?ref=235a7a743cc01ab0d5484e02eebe02152b368e99", "patch": "@@ -18,7 +18,5 @@ extern crate lint_stability;\n \n use lint_stability::{unstable, deprecated}; //~ ERROR use of unstable library feature 'test_feature'\n \n-use lint_stability::unstable::{self as u}; //~ ERROR use of unstable library feature 'test_feature'\n-\n fn main() {\n }"}, {"sha": "f97fad7bd7490f7fd0310a3eb9c2356c2a223777", "filename": "src/test/compile-fail/issue-38293.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235a7a743cc01ab0d5484e02eebe02152b368e99/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs?ref=235a7a743cc01ab0d5484e02eebe02152b368e99", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `fn foo::bar::{self}` only imports `bar` in the type namespace.\n+\n+mod foo {\n+    pub fn f() { }\n+}\n+use foo::f::{self};\n+//~^ ERROR unresolved import\n+//~| NOTE no `f` in `foo`\n+\n+mod bar {\n+    pub fn baz() {}\n+    pub mod baz {}\n+}\n+use bar::baz::{self};\n+\n+fn main() {\n+    baz();\n+    //~^ ERROR unresolved name `baz`\n+    //~| NOTE unresolved name\n+    //~| HELP module `baz` cannot be used as an expression\n+}"}]}