{"sha": "28a11825de37532eade7ad250d097855f796a085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YTExODI1ZGUzNzUzMmVhZGU3YWQyNTBkMDk3ODU1Zjc5NmEwODU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-25T22:50:33Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-12T23:28:20Z"}, "message": "Add parallel abstractions", "tree": {"sha": "5fd6e658b94e0de6e73a98890d11e51365f3ed1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd6e658b94e0de6e73a98890d11e51365f3ed1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a11825de37532eade7ad250d097855f796a085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a11825de37532eade7ad250d097855f796a085", "html_url": "https://github.com/rust-lang/rust/commit/28a11825de37532eade7ad250d097855f796a085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a11825de37532eade7ad250d097855f796a085/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022dff47e3fecbd7355a88355b0ecf4943065074", "url": "https://api.github.com/repos/rust-lang/rust/commits/022dff47e3fecbd7355a88355b0ecf4943065074", "html_url": "https://github.com/rust-lang/rust/commit/022dff47e3fecbd7355a88355b0ecf4943065074"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "a62000e10c79f8374116269b5eeb45c534307cea", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=28a11825de37532eade7ad250d097855f796a085", "patch": "@@ -88,3 +88,33 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n         self.visitor.visit_impl_item(impl_item);\n     }\n }\n+\n+/// A parallel variant of ItemLikeVisitor\n+pub trait ParItemLikeVisitor<'hir> {\n+    fn visit_item(&self, item: &'hir Item);\n+    fn visit_trait_item(&self, trait_item: &'hir TraitItem);\n+    fn visit_impl_item(&self, impl_item: &'hir ImplItem);\n+}\n+\n+pub trait IntoVisitor<'hir> {\n+    type Visitor: Visitor<'hir>;\n+    fn into_visitor(&self) -> Self::Visitor;\n+}\n+\n+pub struct ParDeepVisitor<V>(pub V);\n+\n+impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n+    where V: IntoVisitor<'hir>\n+{\n+    fn visit_item(&self, item: &'hir Item) {\n+        self.0.into_visitor().visit_item(item);\n+    }\n+\n+    fn visit_trait_item(&self, trait_item: &'hir TraitItem) {\n+        self.0.into_visitor().visit_trait_item(trait_item);\n+    }\n+\n+    fn visit_impl_item(&self, impl_item: &'hir ImplItem) {\n+        self.0.into_visitor().visit_impl_item(impl_item);\n+    }\n+}"}, {"sha": "33076267dbc9d427009475ef677d8c99b3966b36", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=28a11825de37532eade7ad250d097855f796a085", "patch": "@@ -48,6 +48,7 @@ use ty::AdtKind;\n use ty::maps::Providers;\n \n use rustc_data_structures::indexed_vec;\n+use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n \n use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n use std::collections::BTreeMap;\n@@ -720,6 +721,31 @@ impl Crate {\n         }\n     }\n \n+    /// A parallel version of visit_all_item_likes\n+    pub fn par_visit_all_item_likes<'hir, V>(&'hir self, visitor: &V)\n+        where V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send\n+    {\n+        scope(|s| {\n+            s.spawn(|_| {\n+                par_iter(&self.items).for_each(|(_, item)| {\n+                    visitor.visit_item(item);\n+                });\n+            });\n+\n+            s.spawn(|_| {\n+                par_iter(&self.trait_items).for_each(|(_, trait_item)| {\n+                    visitor.visit_trait_item(trait_item);\n+                });\n+            });\n+\n+            s.spawn(|_| {\n+                par_iter(&self.impl_items).for_each(|(_, impl_item)| {\n+                    visitor.visit_impl_item(impl_item);\n+                });\n+            });\n+        });\n+    }\n+\n     pub fn body(&self, id: BodyId) -> &Body {\n         &self.bodies[&id]\n     }"}, {"sha": "6f1cbcad2f46c3bec9f83df0dd1614a4548d612c", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=28a11825de37532eade7ad250d097855f796a085", "patch": "@@ -16,6 +16,7 @@ serialize = { path = \"../libserialize\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n parking_lot_core = \"0.2.8\"\n+rustc-rayon = \"0.1.0\"\n \n [dependencies.parking_lot]\n version = \"0.5\""}, {"sha": "b2e7450e76cdf4a9063e4dbb9e5bf6c147d9165d", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=28a11825de37532eade7ad250d097855f796a085", "patch": "@@ -44,6 +44,7 @@ extern crate parking_lot;\n #[macro_use]\n extern crate cfg_if;\n extern crate stable_deref_trait;\n+extern crate rustc_rayon as rayon;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "3661763133014b593f42fd30f0bc1bbd345f3c44", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a11825de37532eade7ad250d097855f796a085/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=28a11825de37532eade7ad250d097855f796a085", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This mdoule defines types which are thread safe if cfg!(parallel_queries) is true.\n+//! This module defines types which are thread safe if cfg!(parallel_queries) is true.\n //!\n //! `Lrc` is an alias of either Rc or Arc.\n //!\n@@ -40,6 +40,29 @@ use std;\n use std::ops::{Deref, DerefMut};\n use owning_ref::{Erased, OwningRef};\n \n+pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n+    where A: FnOnce() -> RA,\n+          B: FnOnce() -> RB\n+{\n+    (oper_a(), oper_b())\n+}\n+\n+pub struct SerialScope;\n+\n+impl SerialScope {\n+    pub fn spawn<F>(&self, f: F)\n+        where F: FnOnce(&SerialScope)\n+    {\n+        f(self)\n+    }\n+}\n+\n+pub fn serial_scope<F, R>(f: F) -> R\n+    where F: FnOnce(&SerialScope) -> R\n+{\n+    f(&SerialScope)\n+}\n+\n cfg_if! {\n     if #[cfg(not(parallel_queries))] {\n         pub auto trait Send {}\n@@ -55,9 +78,19 @@ cfg_if! {\n             }\n         }\n \n+        pub use self::serial_join as join;\n+        pub use self::serial_scope as scope;\n+\n+        pub use std::iter::Iterator as ParallelIterator;\n+\n+        pub fn par_iter<T: IntoIterator>(t: T) -> T::IntoIter {\n+            t.into_iter()\n+        }\n+\n         pub type MetadataRef = OwningRef<Box<Erased>, [u8]>;\n \n         pub use std::rc::Rc as Lrc;\n+        pub use std::rc::Weak as Weak;\n         pub use std::cell::Ref as ReadGuard;\n         pub use std::cell::RefMut as WriteGuard;\n         pub use std::cell::RefMut as LockGuard;\n@@ -160,13 +193,22 @@ cfg_if! {\n         pub use parking_lot::MutexGuard as LockGuard;\n \n         pub use std::sync::Arc as Lrc;\n+        pub use std::sync::Weak as Weak;\n \n         pub use self::Lock as MTLock;\n \n         use parking_lot::Mutex as InnerLock;\n         use parking_lot::RwLock as InnerRwLock;\n \n         use std::thread;\n+        pub use rayon::{join, scope};\n+\n+        pub use rayon::iter::ParallelIterator;\n+        use rayon::iter::IntoParallelIterator;\n+\n+        pub fn par_iter<T: IntoParallelIterator>(t: T) -> T::Iter {\n+            t.into_par_iter()\n+        }\n \n         pub type MetadataRef = OwningRef<Box<Erased + Send + Sync>, [u8]>;\n "}]}