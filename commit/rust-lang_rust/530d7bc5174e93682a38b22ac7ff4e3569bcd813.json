{"sha": "530d7bc5174e93682a38b22ac7ff4e3569bcd813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMGQ3YmM1MTc0ZTkzNjgyYTM4YjIyYWM3ZmY0ZTM1NjliY2Q4MTM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-06T11:30:35Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-16T16:25:15Z"}, "message": "Add #[repr(transparent)] to some libcore types\n\n* `UnsafeCell`\n* `Cell`\n* `NonZero*`\n* `NonNull`\n* `Unique`", "tree": {"sha": "b3e20df02eeac01e46a7fc7e024977847ecf7a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3e20df02eeac01e46a7fc7e024977847ecf7a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530d7bc5174e93682a38b22ac7ff4e3569bcd813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530d7bc5174e93682a38b22ac7ff4e3569bcd813", "html_url": "https://github.com/rust-lang/rust/commit/530d7bc5174e93682a38b22ac7ff4e3569bcd813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530d7bc5174e93682a38b22ac7ff4e3569bcd813/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "253205658edc477a0b429f3ce25a92099dc7ddc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/253205658edc477a0b429f3ce25a92099dc7ddc4", "html_url": "https://github.com/rust-lang/rust/commit/253205658edc477a0b429f3ce25a92099dc7ddc4"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "f922f8f2d93bd70dd90f9d10ebf1e3170de00984", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=530d7bc5174e93682a38b22ac7ff4e3569bcd813", "patch": "@@ -235,6 +235,7 @@ use ptr;\n ///\n /// See the [module-level documentation](index.html) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(transparent)]\n pub struct Cell<T> {\n     value: UnsafeCell<T>,\n }\n@@ -1282,6 +1283,7 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// ```\n #[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(transparent)]\n pub struct UnsafeCell<T: ?Sized> {\n     value: T,\n }"}, {"sha": "2d227ebc8c21b145681d13130df0eaf25b1b7f43", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=530d7bc5174e93682a38b22ac7ff4e3569bcd813", "patch": "@@ -124,6 +124,7 @@\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n+#![cfg_attr(stage0, feature(repr_transparent))]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "cc36ea7f71391ed99f9eabf697c9475c97b126bd", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=530d7bc5174e93682a38b22ac7ff4e3569bcd813", "patch": "@@ -16,6 +16,7 @@ use ops::CoerceUnsized;\n /// NULL or 0 that might allow certain optimizations.\n #[lang = \"non_zero\"]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+#[repr(transparent)]\n pub(crate) struct NonZero<T>(pub(crate) T);\n \n impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}"}, {"sha": "3aeb11832180f24a022a1791ebf9f237d7b77b04", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=530d7bc5174e93682a38b22ac7ff4e3569bcd813", "patch": "@@ -48,6 +48,7 @@ macro_rules! nonzero_integers {\n             /// ```\n             #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n             #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+            #[repr(transparent)]\n             pub struct $Ty(NonZero<$Int>);\n \n             impl $Ty {\n@@ -123,6 +124,7 @@ nonzero_integers! {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]\n+#[repr(transparent)]\n pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n                        pub T);\n "}, {"sha": "0070defa953624231459f400f5028cf217056ffa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530d7bc5174e93682a38b22ac7ff4e3569bcd813/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=530d7bc5174e93682a38b22ac7ff4e3569bcd813", "patch": "@@ -2692,6 +2692,7 @@ impl<T: ?Sized> PartialOrd for *mut T {\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n #[doc(hidden)]\n+#[repr(transparent)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -2840,6 +2841,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+#[repr(transparent)]\n pub struct NonNull<T: ?Sized> {\n     pointer: NonZero<*const T>,\n }"}]}