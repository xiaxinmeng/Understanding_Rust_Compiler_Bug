{"sha": "6cda8e4eaac843471dd33d93d9d5cc892d29cc4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZGE4ZTRlYWFjODQzNDcxZGQzM2Q5M2Q5ZDVjYzg5MmQyOWNjNGM=", "commit": {"author": {"name": "Thomas Wickham", "email": "thomas@wickham.epimeros.org", "date": "2016-01-15T00:24:33Z"}, "committer": {"name": "Thomas Wickham", "email": "thomas@wickham.epimeros.org", "date": "2016-01-15T00:24:33Z"}, "message": "Doc:std::convert: be more specific + typo", "tree": {"sha": "452bbce48022088f02d584be98537463e5ea4690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452bbce48022088f02d584be98537463e5ea4690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cda8e4eaac843471dd33d93d9d5cc892d29cc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cda8e4eaac843471dd33d93d9d5cc892d29cc4c", "html_url": "https://github.com/rust-lang/rust/commit/6cda8e4eaac843471dd33d93d9d5cc892d29cc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cda8e4eaac843471dd33d93d9d5cc892d29cc4c/comments", "author": null, "committer": null, "parents": [{"sha": "58d2c7909f9f9310971fcd517fc895cb878b74c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d2c7909f9f9310971fcd517fc895cb878b74c3", "html_url": "https://github.com/rust-lang/rust/commit/58d2c7909f9f9310971fcd517fc895cb878b74c3"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "f67bfe34e8f6a82f30be1713b1f2067a80b29861", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6cda8e4eaac843471dd33d93d9d5cc892d29cc4c/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cda8e4eaac843471dd33d93d9d5cc892d29cc4c/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=6cda8e4eaac843471dd33d93d9d5cc892d29cc4c", "patch": "@@ -22,20 +22,18 @@\n //! - `from` is the more flexible way, which can convert values and references\n //!\n //! As a library writer, you should prefer implementing `From<T>` rather than\n-//! `Into<U>`, as `From` is more flexible (you can't `Into` a reference, where\n-//! you can impl `From` for a reference). `From` is also used for generic\n-//! implementations.\n+//! `Into<U>`, as `From` provides greater flexibility and offer the equivalent `Into`\n+//! implementation for free thanks to a blanket implementation in the standard library.\n //!\n-//! **Note:** these traits are for trivial conversion. **They must not fail**. If\n-//! they can fail, use a dedicated method which return an `Option<T>` or\n-//! a `Result<T, E>`.\n+//! **Note: these traits must not fail**. If the conversion can fail, you must use a dedicated\n+//! method which return an `Option<T>` or a `Result<T, E>`.\n //!\n //! # Generic impl\n //!\n //! - `AsRef` and `AsMut` auto-dereference if the inner type is a reference\n //! - `From<U> for T` implies `Into<T> for U`\n //! - `From` and `Into` are reflexive, which means that all types can `into()`\n-//! themselve and `from()` themselve\n+//!   themselves and `from()` themselves\n //!\n //! See each trait for usage examples.\n \n@@ -50,9 +48,8 @@ use marker::Sized;\n ///\n /// [book]: ../../book/borrow-and-asref.html\n ///\n-/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n-/// they can fail, use a dedicated method which return an `Option<T>` or\n-/// a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Examples\n ///\n@@ -73,7 +70,7 @@ use marker::Sized;\n /// # Generic Impls\n ///\n /// - `AsRef` auto-dereference if the inner type is a reference or a mutable\n-/// reference\n+/// reference (eg: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n@@ -84,14 +81,13 @@ pub trait AsRef<T: ?Sized> {\n \n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n-/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n-/// they can fail, use a dedicated method which return an `Option<T>` or\n-/// a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Generic Impls\n ///\n /// - `AsMut` auto-dereference if the inner type is a reference or a mutable\n-/// reference\n+/// reference (eg: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n@@ -102,9 +98,12 @@ pub trait AsMut<T: ?Sized> {\n \n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n-/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n-/// they can fail, use a dedicated method which return an `Option<T>` or\n-/// a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n+///\n+/// Library writer should not implement directly this trait, but should prefer the implementation\n+/// of the `From` trait, which offer greater flexibility and provide the equivalent `Into`\n+/// implementation for free thanks to a blanket implementation in the standard library.\n ///\n /// # Examples\n ///\n@@ -134,9 +133,8 @@ pub trait Into<T>: Sized {\n \n /// Construct `Self` via a conversion.\n ///\n-/// **Note:** these traits are for trivial conversion. **They must not fail**. If\n-/// they can fail, use a dedicated method which return an `Option<T>` or\n-/// a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n+/// return an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Examples\n ///"}]}