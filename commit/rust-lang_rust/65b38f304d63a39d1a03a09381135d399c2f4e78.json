{"sha": "65b38f304d63a39d1a03a09381135d399c2f4e78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjM4ZjMwNGQ2M2EzOWQxYTAzYTA5MzgxMTM1ZDM5OWMyZjRlNzg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-09T20:37:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-12T18:28:42Z"}, "message": "Autoderef in librustc_metadata", "tree": {"sha": "879256135393bdabfb108f24fe43d9944c3ab5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879256135393bdabfb108f24fe43d9944c3ab5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b38f304d63a39d1a03a09381135d399c2f4e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b38f304d63a39d1a03a09381135d399c2f4e78", "html_url": "https://github.com/rust-lang/rust/commit/65b38f304d63a39d1a03a09381135d399c2f4e78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b38f304d63a39d1a03a09381135d399c2f4e78/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53b7464e678395b5bc503d0855bfb29d0ac4ab8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53b7464e678395b5bc503d0855bfb29d0ac4ab8b", "html_url": "https://github.com/rust-lang/rust/commit/53b7464e678395b5bc503d0855bfb29d0ac4ab8b"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "3a0bd3aa2059d35c3d7ad2b281c2de96eddd2aad", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=65b38f304d63a39d1a03a09381135d399c2f4e78", "patch": "@@ -173,7 +173,7 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n         match *ii {\n           InlinedItem::Item(ref i) => {\n             debug!(\">>> DECODED ITEM >>>\\n{}\\n<<< DECODED ITEM <<<\",\n-                   ::rustc_front::print::pprust::item_to_string(&**i));\n+                   ::rustc_front::print::pprust::item_to_string(&i));\n           }\n           _ => { }\n         }\n@@ -1404,8 +1404,8 @@ fn test_simplification() {\n     ).unwrap())));\n     match (item_out, item_exp) {\n       (InlinedItem::Item(item_out), InlinedItem::Item(item_exp)) => {\n-        assert!(pprust::item_to_string(&*item_out) ==\n-                pprust::item_to_string(&*item_exp));\n+        assert!(pprust::item_to_string(&item_out) ==\n+                pprust::item_to_string(&item_exp));\n       }\n       _ => panic!()\n     }"}, {"sha": "35d7a0d4b9c27640be03ffd9839eecd49a2af58f", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=65b38f304d63a39d1a03a09381135d399c2f4e78", "patch": "@@ -264,7 +264,7 @@ impl<'a> CrateReader<'a> {\n                          incompatible with this version of rustc\",\n                         name,\n                         crate_rustc_version\n-                            .as_ref().map(|s|&**s)\n+                            .as_ref().map(|s| &**s)\n                             .unwrap_or(\"an old version of rustc\")\n             );\n         }\n@@ -494,7 +494,7 @@ impl<'a> CrateReader<'a> {\n         let source_name = format!(\"<{} macros>\", item.ident);\n         let mut macros = vec![];\n         decoder::each_exported_macro(ekrate.metadata.as_slice(),\n-                                     &*self.cstore.intr,\n+                                     &self.cstore.intr,\n             |name, attrs, span, body| {\n                 // NB: Don't use parse::parse_tts_from_source_str because it parses with\n                 // quote_depth > 0."}, {"sha": "9b534df075bef5dc5a1a751fb9680c23ff48642f", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=65b38f304d63a39d1a03a09381135d399c2f4e78", "patch": "@@ -40,64 +40,64 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_stability(&*cdata, def.index)\n+        decoder::get_stability(&cdata, def.index)\n     }\n \n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_deprecation(&*cdata, def.index)\n+        decoder::get_deprecation(&cdata, def.index)\n     }\n \n     fn closure_kind(&self, _tcx: &ty::ctxt<'tcx>, def_id: DefId) -> ty::ClosureKind\n     {\n         assert!(!def_id.is_local());\n         let cdata = self.get_crate_data(def_id.krate);\n-        decoder::closure_kind(&*cdata, def_id.index)\n+        decoder::closure_kind(&cdata, def_id.index)\n     }\n \n     fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx>\n     {\n         assert!(!def_id.is_local());\n         let cdata = self.get_crate_data(def_id.krate);\n-        decoder::closure_ty(&*cdata, def_id.index, tcx)\n+        decoder::closure_ty(&cdata, def_id.index, tcx)\n     }\n \n     fn item_variances(&self, def: DefId) -> ty::ItemVariances {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_item_variances(&*cdata, def.index)\n+        decoder::get_item_variances(&cdata, def.index)\n     }\n \n     fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_repr_attrs(&*cdata, def.index)\n+        decoder::get_repr_attrs(&cdata, def.index)\n     }\n \n     fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_type(&*cdata, def.index, tcx)\n+        decoder::get_type(&cdata, def.index, tcx)\n     }\n \n     fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_predicates(&*cdata, def.index, tcx)\n+        decoder::get_predicates(&cdata, def.index, tcx)\n     }\n \n     fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                              -> ty::GenericPredicates<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_super_predicates(&*cdata, def.index, tcx)\n+        decoder::get_super_predicates(&cdata, def.index, tcx)\n     }\n \n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>\n     {\n         let cdata = self.get_crate_data(def_id.krate);\n-        decoder::get_item_attrs(&*cdata, def_id.index)\n+        decoder::get_item_attrs(&cdata, def_id.index)\n     }\n \n     fn item_symbol(&self, def: DefId) -> String\n@@ -109,13 +109,13 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::TraitDef<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_trait_def(&*cdata, def.index, tcx)\n+        decoder::get_trait_def(&cdata, def.index, tcx)\n     }\n \n     fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_adt_def(&self.intr, &*cdata, def.index, tcx)\n+        decoder::get_adt_def(&self.intr, &cdata, def.index, tcx)\n     }\n \n     fn method_arg_names(&self, did: DefId) -> Vec<String>\n@@ -126,7 +126,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem> {\n         let cdata = self.get_crate_data(def.krate);\n-        let path = decoder::get_item_path(&*cdata, def.index);\n+        let path = decoder::get_item_path(&cdata, def.index);\n \n         cdata.with_local_path(|cpath| {\n             let mut r = Vec::with_capacity(cpath.len() + path.len());\n@@ -138,7 +138,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> {\n         let cdata = self.get_crate_data(def.krate);\n-        let path = decoder::get_item_path(&*cdata, def.index);\n+        let path = decoder::get_item_path(&cdata, def.index);\n \n         let mut r = Vec::with_capacity(path.len() + 1);\n         let crate_name = hir_map::PathMod(token::intern(&cdata.name));\n@@ -157,7 +157,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         let mut result = vec![];\n         let cdata = self.get_crate_data(def_id.krate);\n-        decoder::each_inherent_implementation_for_type(&*cdata, def_id.index,\n+        decoder::each_inherent_implementation_for_type(&cdata, def_id.index,\n                                                        |iid| result.push(iid));\n         result\n     }\n@@ -177,53 +177,53 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n                               -> Vec<Rc<ty::Method<'tcx>>>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_provided_trait_methods(self.intr.clone(), &*cdata, def.index, tcx)\n+        decoder::get_provided_trait_methods(self.intr.clone(), &cdata, def.index, tcx)\n     }\n \n     fn trait_item_def_ids(&self, def: DefId)\n                           -> Vec<ty::ImplOrTraitItemId>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_trait_item_def_ids(&*cdata, def.index)\n+        decoder::get_trait_item_def_ids(&cdata, def.index)\n     }\n \n     fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>\n     {\n         let cdata = self.get_crate_data(impl_def_id.krate);\n-        decoder::get_impl_items(&*cdata, impl_def_id.index)\n+        decoder::get_impl_items(&cdata, impl_def_id.index)\n     }\n \n     fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_impl_polarity(&*cdata, def.index)\n+        decoder::get_impl_polarity(&cdata, def.index)\n     }\n \n     fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                       -> Option<ty::TraitRef<'tcx>>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_impl_trait(&*cdata, def.index, tcx)\n+        decoder::get_impl_trait(&cdata, def.index, tcx)\n     }\n \n     fn custom_coerce_unsized_kind(&self, def: DefId)\n                                   -> Option<ty::adjustment::CustomCoerceUnsized>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_custom_coerce_unsized_kind(&*cdata, def.index)\n+        decoder::get_custom_coerce_unsized_kind(&cdata, def.index)\n     }\n \n     // FIXME: killme\n     fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                          -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_associated_consts(self.intr.clone(), &*cdata, def.index, tcx)\n+        decoder::get_associated_consts(self.intr.clone(), &cdata, def.index, tcx)\n     }\n \n     fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId) -> Option<DefId>\n     {\n         let cdata = self.get_crate_data(def_id.krate);\n-        decoder::get_trait_of_item(&*cdata, def_id.index, tcx)\n+        decoder::get_trait_of_item(&cdata, def_id.index, tcx)\n     }\n \n     fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n@@ -232,7 +232,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_impl_or_trait_item(\n             self.intr.clone(),\n-            &*cdata,\n+            &cdata,\n             def.index,\n             tcx)\n     }\n@@ -246,29 +246,29 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn is_defaulted_trait(&self, trait_def_id: DefId) -> bool\n     {\n         let cdata = self.get_crate_data(trait_def_id.krate);\n-        decoder::is_defaulted_trait(&*cdata, trait_def_id.index)\n+        decoder::is_defaulted_trait(&cdata, trait_def_id.index)\n     }\n \n     fn is_impl(&self, did: DefId) -> bool\n     {\n         let cdata = self.get_crate_data(did.krate);\n-        decoder::is_impl(&*cdata, did.index)\n+        decoder::is_impl(&cdata, did.index)\n     }\n \n     fn is_default_impl(&self, impl_did: DefId) -> bool {\n         let cdata = self.get_crate_data(impl_did.krate);\n-        decoder::is_default_impl(&*cdata, impl_did.index)\n+        decoder::is_default_impl(&cdata, impl_did.index)\n     }\n \n     fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool {\n         let cdata = self.get_crate_data(did.krate);\n-        decoder::is_extern_item(&*cdata, did.index, tcx)\n+        decoder::is_extern_item(&cdata, did.index, tcx)\n     }\n \n     fn is_static_method(&self, def: DefId) -> bool\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::is_static_method(&*cdata, def.index)\n+        decoder::is_static_method(&cdata, def.index)\n     }\n \n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool\n@@ -278,7 +278,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn is_typedef(&self, did: DefId) -> bool {\n         let cdata = self.get_crate_data(did.krate);\n-        decoder::is_typedef(&*cdata, did.index)\n+        decoder::is_typedef(&cdata, did.index)\n     }\n \n     fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n@@ -292,7 +292,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         let mut result = vec![];\n         let crate_data = self.get_crate_data(cnum);\n-        decoder::each_lang_item(&*crate_data, |did, lid| {\n+        decoder::each_lang_item(&crate_data, |did, lid| {\n             result.push((did, lid)); true\n         });\n         result\n@@ -302,7 +302,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n                           -> Vec<lang_items::LangItem>\n     {\n         let cdata = self.get_crate_data(cnum);\n-        decoder::get_missing_lang_items(&*cdata)\n+        decoder::get_missing_lang_items(&cdata)\n     }\n \n     fn is_staged_api(&self, cnum: ast::CrateNum) -> bool\n@@ -339,7 +339,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n                                 -> FnvHashMap<DefId, Vec<ast::Attribute>>\n     {\n-        decoder::get_struct_field_attrs(&*self.get_crate_data(cnum))\n+        decoder::get_struct_field_attrs(&self.get_crate_data(cnum))\n     }\n \n     fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>\n@@ -354,19 +354,19 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>\n     {\n         let cdata = self.get_crate_data(cnum);\n-        decoder::get_native_libraries(&*cdata)\n+        decoder::get_native_libraries(&cdata)\n     }\n \n     fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>\n     {\n         let cdata = self.get_crate_data(cnum);\n-        decoder::get_reachable_ids(&*cdata)\n+        decoder::get_reachable_ids(&cdata)\n     }\n \n     fn def_path(&self, def: DefId) -> hir_map::DefPath\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        let path = decoder::def_path(&*cdata, def.index);\n+        let path = decoder::def_path(&cdata, def.index);\n         let local_path = cdata.local_def_path();\n         local_path.into_iter().chain(path).collect()\n     }\n@@ -385,13 +385,13 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n     {\n         let cdata = self.get_crate_data(did.krate);\n-        decoder::get_tuple_struct_definition_if_ctor(&*cdata, did.index)\n+        decoder::get_tuple_struct_definition_if_ctor(&cdata, did.index)\n     }\n \n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>\n     {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::get_struct_field_names(&self.intr, &*cdata, def.index)\n+        decoder::get_struct_field_names(&self.intr, &cdata, def.index)\n     }\n \n     fn item_children(&self, def_id: DefId) -> Vec<ChildItem>\n@@ -400,7 +400,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let crate_data = self.get_crate_data(def_id.krate);\n         let get_crate_data = |cnum| self.get_crate_data(cnum);\n         decoder::each_child_of_item(\n-            self.intr.clone(), &*crate_data,\n+            self.intr.clone(), &crate_data,\n             def_id.index, get_crate_data,\n             |def, name, vis| result.push(ChildItem {\n                 def: def,\n@@ -416,7 +416,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let crate_data = self.get_crate_data(cnum);\n         let get_crate_data = |cnum| self.get_crate_data(cnum);\n         decoder::each_top_level_item_of_crate(\n-            self.intr.clone(), &*crate_data, get_crate_data,\n+            self.intr.clone(), &crate_data, get_crate_data,\n             |def, name, vis| result.push(ChildItem {\n                 def: def,\n                 name: name,\n@@ -430,18 +430,18 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         let cdata = self.get_crate_data(def.krate);\n         let decode_inlined_item = Box::new(astencode::decode_inlined_item);\n-        decoder::maybe_get_item_ast(&*cdata, tcx, def.index, decode_inlined_item)\n+        decoder::maybe_get_item_ast(&cdata, tcx, def.index, decode_inlined_item)\n     }\n \n     fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                           -> Option<Mir<'tcx>> {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::maybe_get_item_mir(&*cdata, tcx, def.index)\n+        decoder::maybe_get_item_mir(&cdata, tcx, def.index)\n     }\n \n     fn is_item_mir_available(&self, def: DefId) -> bool {\n         let cdata = self.get_crate_data(def.krate);\n-        decoder::is_item_mir_available(&*cdata, def.index)\n+        decoder::is_item_mir_available(&cdata, def.index)\n     }\n \n     fn crates(&self) -> Vec<ast::CrateNum>"}, {"sha": "a96da6bf4d66aaf85025f0dd98ff15d6f9775c6c", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=65b38f304d63a39d1a03a09381135d399c2f4e78", "patch": "@@ -138,7 +138,7 @@ impl CStore {\n         for (&k, v) in self.metas.borrow().iter() {\n             let origin = self.opt_used_crate_source(k);\n             origin.as_ref().map(|cs| { assert!(k == cs.cnum); });\n-            i(k, &**v, origin);\n+            i(k, &v, origin);\n         }\n     }\n "}, {"sha": "8295ffebda3e6508b62bcd20a509064abb2a0871", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=65b38f304d63a39d1a03a09381135d399c2f4e78", "patch": "@@ -655,7 +655,7 @@ fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n             None => {}\n             Some(child_item_doc) => {\n                 // Hand off the item to the callback.\n-                let child_name = item_name(&*intr, child_item_doc);\n+                let child_name = item_name(&intr, child_item_doc);\n                 let def_like = item_to_def_like(crate_data, child_item_doc, child_def_id);\n                 let visibility = item_visibility(child_item_doc);\n                 callback(def_like, child_name, visibility);\n@@ -677,7 +677,7 @@ fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,\n                 if let Some(impl_method_doc) = cdata.get_item(impl_item_def_id.index) {\n                     if let StaticMethod = item_family(impl_method_doc) {\n                         // Hand off the static method to the callback.\n-                        let static_method_name = item_name(&*intr, impl_method_doc);\n+                        let static_method_name = item_name(&intr, impl_method_doc);\n                         let static_method_def_like = item_to_def_like(cdata, impl_method_doc,\n                                                                       impl_item_def_id);\n                         callback(static_method_def_like,\n@@ -938,7 +938,7 @@ pub fn get_trait_name(intr: Rc<IdentInterner>,\n                       id: DefIndex)\n                       -> ast::Name {\n     let doc = cdata.lookup_item(id);\n-    item_name(&*intr, doc)\n+    item_name(&intr, doc)\n }\n \n pub fn is_static_method(cdata: Cmd, id: DefIndex) -> bool {\n@@ -967,7 +967,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n         _ => ImplContainer(container_id),\n     };\n \n-    let name = item_name(&*intr, item_doc);\n+    let name = item_name(&intr, item_doc);\n     let vis = item_visibility(item_doc);\n \n     match item_sort(item_doc) {\n@@ -1622,7 +1622,7 @@ fn doc_generics<'tcx>(base_doc: rbml::Doc,\n     for rp_doc in reader::tagged_docs(doc, tag_region_param_def) {\n         let ident_str_doc = reader::get_doc(rp_doc,\n                                             tag_region_param_def_ident);\n-        let name = item_name(&*token::get_ident_interner(), ident_str_doc);\n+        let name = item_name(&token::get_ident_interner(), ident_str_doc);\n         let def_id_doc = reader::get_doc(rp_doc,\n                                          tag_region_param_def_def_id);\n         let def_id = translated_def_id(cdata, def_id_doc);"}, {"sha": "207a680a13d80a5b48618acd1b48a704a169e1a8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b38f304d63a39d1a03a09381135d399c2f4e78/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=65b38f304d63a39d1a03a09381135d399c2f4e78", "patch": "@@ -964,7 +964,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n-        encode_method_argument_names(rbml_w, &**decl);\n+        encode_method_argument_names(rbml_w, &decl);\n         rbml_w.end_tag();\n       }\n       hir::ItemMod(ref m) => {\n@@ -1173,7 +1173,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                     encode_info_for_associated_const(ecx,\n                                                      rbml_w,\n                                                      index,\n-                                                     &*associated_const,\n+                                                     &associated_const,\n                                                      path.clone(),\n                                                      item.id,\n                                                      ast_item)\n@@ -1182,7 +1182,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                     encode_info_for_method(ecx,\n                                            rbml_w,\n                                            index,\n-                                           &**method_type,\n+                                           &method_type,\n                                            path.clone(),\n                                            false,\n                                            item.id,\n@@ -1192,7 +1192,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                     encode_info_for_associated_type(ecx,\n                                                     rbml_w,\n                                                     index,\n-                                                    &**associated_type,\n+                                                    &associated_type,\n                                                     path.clone(),\n                                                     item.id,\n                                                     ast_item)\n@@ -1290,7 +1290,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                 ty::MethodTraitItem(method_ty) => {\n                     let method_def_id = item_def_id.def_id();\n \n-                    encode_method_ty_fields(ecx, rbml_w, index, &*method_ty);\n+                    encode_method_ty_fields(ecx, rbml_w, index, &method_ty);\n \n                     let elem = ast_map::PathName(method_ty.name);\n                     encode_path(rbml_w,\n@@ -1396,13 +1396,13 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         if abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             encode_inlined_item(ecx, rbml_w, InlinedItemRef::Foreign(nitem));\n         }\n-        encode_attributes(rbml_w, &*nitem.attrs);\n+        encode_attributes(rbml_w, &nitem.attrs);\n         let stab = stability::lookup_stability(ecx.tcx, ecx.tcx.map.local_def_id(nitem.id));\n         let depr = stability::lookup_deprecation(ecx.tcx, ecx.tcx.map.local_def_id(nitem.id));\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n         encode_symbol(ecx, rbml_w, nitem.id);\n-        encode_method_argument_names(rbml_w, &*fndecl);\n+        encode_method_argument_names(rbml_w, &fndecl);\n       }\n       hir::ForeignItemStatic(_, mutbl) => {\n         if mutbl {\n@@ -1411,7 +1411,7 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             encode_family(rbml_w, 'c');\n         }\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, nitem.id);\n-        encode_attributes(rbml_w, &*nitem.attrs);\n+        encode_attributes(rbml_w, &nitem.attrs);\n         let stab = stability::lookup_stability(ecx.tcx, ecx.tcx.map.local_def_id(nitem.id));\n         let depr = stability::lookup_deprecation(ecx.tcx, ecx.tcx.map.local_def_id(nitem.id));\n         encode_stability(rbml_w, stab);\n@@ -1561,7 +1561,7 @@ fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n         rbml_w.start_tag(tag_meta_item_list);\n         rbml_w.wr_tagged_str(tag_meta_item_name, name);\n         for inner_item in items {\n-            encode_meta_item(rbml_w, &**inner_item);\n+            encode_meta_item(rbml_w, &inner_item);\n         }\n         rbml_w.end_tag();\n       }\n@@ -1573,7 +1573,7 @@ fn encode_attributes(rbml_w: &mut Encoder, attrs: &[ast::Attribute]) {\n     for attr in attrs {\n         rbml_w.start_tag(tag_attribute);\n         rbml_w.wr_tagged_u8(tag_attribute_is_sugared_doc, attr.node.is_sugared_doc as u8);\n-        encode_meta_item(rbml_w, &*attr.node.value);\n+        encode_meta_item(rbml_w, &attr.node.value);\n         rbml_w.end_tag();\n     }\n     rbml_w.end_tag();"}]}