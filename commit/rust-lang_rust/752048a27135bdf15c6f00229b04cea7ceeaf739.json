{"sha": "752048a27135bdf15c6f00229b04cea7ceeaf739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjA0OGEyNzEzNWJkZjE1YzZmMDAyMjliMDRjZWE3Y2VlYWY3Mzk=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-04T20:20:47Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:22Z"}, "message": "Handle more fallout\n\nos::args() no longer auto-borrows to &[~str].", "tree": {"sha": "fecf799c0aec269c9e4b7693b8fb2ae3899db541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fecf799c0aec269c9e4b7693b8fb2ae3899db541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752048a27135bdf15c6f00229b04cea7ceeaf739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752048a27135bdf15c6f00229b04cea7ceeaf739", "html_url": "https://github.com/rust-lang/rust/commit/752048a27135bdf15c6f00229b04cea7ceeaf739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752048a27135bdf15c6f00229b04cea7ceeaf739/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa82ef23b800a10209732e1af2558eea87e218e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa82ef23b800a10209732e1af2558eea87e218e8", "html_url": "https://github.com/rust-lang/rust/commit/fa82ef23b800a10209732e1af2558eea87e218e8"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "eaf6527ea829b9264852a17a56d20c98024e2dfd", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -282,7 +282,7 @@ mod __test {\n   #![!resolve_unexported]\n   extern crate test (name = \"test\", vers = \"...\");\n   fn main() {\n-    test::test_main_static(::os::args(), tests)\n+    test::test_main_static(::os::args().as_slice(), tests)\n   }\n \n   static tests : &'static [test::TestDescAndFn] = &[\n@@ -326,8 +326,8 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::Item {\n     let mainfn = (quote_item!(&cx.ext_cx,\n         pub fn main() {\n             #![main]\n-            #![allow(deprecated_owned_vector)]\n-            test::test_main_static(::std::os::args(), TESTS);\n+            use std::slice::Vector;\n+            test::test_main_static(::std::os::args().as_slice(), TESTS);\n         }\n     )).unwrap();\n "}, {"sha": "06996df169254e2dd5d478b767b8963dcc439870", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -380,7 +380,7 @@ impl fmt::Show for clean::Type {\n                            \"\".to_owned()\n                        } else {\n                            let mut m = decl.bounds.iter().map(|s| s.to_str());\n-                           \": \" + m.collect::<~[~str]>().connect(\" + \")\n+                           \": \" + m.collect::<Vec<~str>>().connect(\" + \")\n                        },\n                        arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n                        ret = decl.decl.output)"}, {"sha": "72b474147335c7002c5fc1f67ca46ea2f01537be", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -85,7 +85,7 @@ local_data_key!(pub analysiskey: core::CrateAnalysis)\n type Output = (clean::Crate, Vec<plugins::PluginJson> );\n \n pub fn main() {\n-    std::os::set_exit_status(main_args(std::os::args()));\n+    std::os::set_exit_status(main_args(std::os::args().as_slice()));\n }\n \n pub fn opts() -> Vec<getopts::OptGroup> {"}, {"sha": "8a783b6f378e2d82a4ffb97d7e97d506f86c7487", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -278,4 +278,7 @@ mod std {\n     pub use ty;\n     pub use unstable;\n     pub use vec;\n+\n+    // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n+    #[cfg(test)] pub use slice;\n }"}, {"sha": "a08d6bb0bf87fdb45ea3c309e80a0be2305225bd", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -36,8 +36,8 @@ fn random_char() -> char {\n \n fn main() {\n     let args = os::args();\n-    let rustc = args[1].as_slice();\n-    let tmpdir = Path::new(args[2].as_slice());\n+    let rustc = args.get(1).as_slice();\n+    let tmpdir = Path::new(args.get(2).as_slice());\n \n     let main_file = tmpdir.join(\"unicode_input_multiple_files_main.rs\");\n     let main_file_str = main_file.as_str().unwrap();"}, {"sha": "13f141008b7929775a1a979a8dace1317896b2fd", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -35,8 +35,8 @@ fn random_char() -> char {\n \n fn main() {\n     let args = os::args();\n-    let rustc = args[1].as_slice();\n-    let tmpdir = Path::new(args[2].as_slice());\n+    let rustc = args.get(1).as_slice();\n+    let tmpdir = Path::new(args.get(2).as_slice());\n \n     let main_file = tmpdir.join(\"span_main.rs\");\n     let main_file_str = main_file.as_str().unwrap();"}, {"sha": "989453d8570d169ae14b1dafb3d966dd479261c1", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -100,6 +100,7 @@ fn runtest(me: &str) {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() >= 2 && args[1].as_slice() == \"fail\" {\n         foo();\n     } else if args.len() >= 2 && args[1].as_slice() == \"double-fail\" {"}, {"sha": "c409852c6736cd63022a2cf9bbe2d4eb8266fede", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -24,6 +24,7 @@ use std::os;\n \n pub fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n \n     // Here, the rvalue `\"signal\".to_owned()` requires cleanup. Older versions\n     // of the code had a problem that the cleanup scope for this"}, {"sha": "38030eb6c1fdcb72cb0a1c70ffb114795958665f", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -17,6 +17,7 @@ use std::io::process;\n \n pub fn main () {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() > 1 && args[1] == \"child\".to_owned() {\n         for _ in range(0, 1000) {\n             println!(\"hello?\");"}, {"sha": "f66b943d85f64fbedc624ceb0e81923fc4e74b67", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -25,6 +25,7 @@ fn start(argc: int, argv: **u8) -> int {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n         if args[2].as_slice() == \"green\" {\n             child();\n@@ -48,6 +49,7 @@ fn main() {\n \n fn parent(flavor: ~str) {\n     let args = os::args();\n+    let args = args.as_slice();\n     let mut p = io::Process::new(args[0].as_slice(), [\"child\".to_owned(), flavor]).unwrap();\n     p.stdin.get_mut_ref().write_str(\"test1\\ntest2\\ntest3\").unwrap();\n     let out = p.wait_with_output();"}, {"sha": "f05b1932b738dd2916663b7655f628faabef65ec", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -10,6 +10,7 @@\n \n fn parse_args() -> ~str {\n     let args = ::std::os::args();\n+    let args = args.as_slice();\n     let mut n = 0;\n \n     while n < args.len() {"}, {"sha": "a5e632b94a28888c7437d2dae2d2ad10885d0e7c", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -22,6 +22,7 @@ use std::str;\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n         debug!(\"foo\");\n         debug!(\"bar\");"}, {"sha": "ac3a9ef2d533089cea13c32ad362136e1f05e3f5", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -34,6 +34,7 @@ fn loud_recurse() {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"silent\" {\n         silent_recurse();\n     } else if args.len() > 1 && args[1].as_slice() == \"loud\" {"}, {"sha": "e4a935eae7f431af3ebd99082bdc74d9ca9a266b", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -62,7 +62,7 @@ pub fn main() {\n \n     assert!(map.pop(&Slice(\"foo\")).is_some());\n     assert_eq!(map.move_iter().map(|(k, v)| k.to_str() + v.to_str())\n-                              .collect::<~[~str]>()\n+                              .collect::<Vec<~str>>()\n                               .concat(),\n                \"abc50bcd51cde52def53\".to_owned());\n }"}, {"sha": "a0459e6e8c1ada7d6d3f9fea5af9c2101b7543d6", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -25,6 +25,7 @@ use std::io::process::{Process, ExitSignal, ExitStatus};\n \n pub fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() >= 2 && args[1] == \"signal\".to_owned() {\n         // Raise a segfault.\n         unsafe { *(0 as *mut int) = 0; }"}, {"sha": "34d1f5e66c6782a66f700aad2b67933d8a5a94e5", "filename": "src/test/run-pass/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -25,6 +25,7 @@ fn test() {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     if args.len() > 1 && args[1].as_slice() == \"test\" {\n         return test();\n     }"}, {"sha": "794f810165dcb46380f3f1d011ed121ebc45dac7", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752048a27135bdf15c6f00229b04cea7ceeaf739/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=752048a27135bdf15c6f00229b04cea7ceeaf739", "patch": "@@ -20,7 +20,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for Vec<T> {\n     fn to_string(&self) -> ~str {\n-        format!(\"[{}]\", self.iter().map(|e| e.to_string()).collect::<~[~str]>().connect(\", \"))\n+        format!(\"[{}]\", self.iter().map(|e| e.to_string()).collect::<Vec<~str>>().connect(\", \"))\n     }\n }\n "}]}