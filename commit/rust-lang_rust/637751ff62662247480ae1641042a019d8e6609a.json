{"sha": "637751ff62662247480ae1641042a019d8e6609a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzc1MWZmNjI2NjIyNDc0ODBhZTE2NDEwNDJhMDE5ZDhlNjYwOWE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-01-31T13:46:09Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-05T16:34:24Z"}, "message": "Metadata collection lint: Basic lint collection\n\nWIP-2021-02-01\n\nWIP-2021-02-01\n\nWIP-2021-02-13", "tree": {"sha": "678da6645b9c92d02933c606c3a8e85c6ec7748b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/678da6645b9c92d02933c606c3a8e85c6ec7748b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637751ff62662247480ae1641042a019d8e6609a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637751ff62662247480ae1641042a019d8e6609a", "html_url": "https://github.com/rust-lang/rust/commit/637751ff62662247480ae1641042a019d8e6609a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637751ff62662247480ae1641042a019d8e6609a/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0baf6bf226062b52e9f13cb36190bd332fbd4dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0baf6bf226062b52e9f13cb36190bd332fbd4dce", "html_url": "https://github.com/rust-lang/rust/commit/0baf6bf226062b52e9f13cb36190bd332fbd4dce"}], "stats": {"total": 227, "additions": 226, "deletions": 1}, "files": [{"sha": "523bab1882836e9ddc5c0c6c81db7c0733f2bfdf", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -29,6 +29,7 @@ out\n \n # gh pages docs\n util/gh-pages/lints.json\n+**/metadata_collection.json\n \n # rustfmt backups\n *.rs.bk"}, {"sha": "bdee8e408213faf09a2ad2b32b2d33d451095a77", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -52,6 +52,7 @@ rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n deny-warnings = []\n integration = [\"tempfile\"]\n internal-lints = [\"clippy_lints/internal-lints\"]\n+metadata-collector-lint = [\"clippy_lints/metadata-collector-lint\"]\n \n [package.metadata.rust-analyzer]\n # This package uses #[feature(rustc_private)]"}, {"sha": "d1d56fc84f948f5b866632fa6bcab06ce48e395e", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -20,6 +20,7 @@ pulldown-cmark = { version = \"0.8\", default-features = false }\n quine-mc_cluskey = \"0.2.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n+serde_json = { version = \"1.0\", optional = true }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n semver = \"0.11\"\n@@ -32,6 +33,7 @@ url = { version = \"2.1.0\", features = [\"serde\"] }\n deny-warnings = []\n # build clippy with internal lints enabled, off by default\n internal-lints = [\"clippy_utils/internal-lints\"]\n+metadata-collector-lint = [\"serde_json\"]\n \n [package.metadata.rust-analyzer]\n # This crate uses #[feature(rustc_private)]"}, {"sha": "7668d4dd0b1054af0af58a752a11b9ed524ec6a1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -1004,6 +1004,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n         store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n     }\n+    #[cfg(feature = \"metadata-collector-lint\")]\n+    store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::default());\n+\n     store.register_late_pass(|| box utils::author::Author);\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n     store.register_late_pass(|| box serde_api::SerdeApi);"}, {"sha": "ee7be24eae8013f05680ef3b7056aae0a2c973a3", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -32,6 +32,9 @@ use rustc_typeck::hir_ty_to_ty;\n \n use std::borrow::{Borrow, Cow};\n \n+#[cfg(feature = \"metadata-collector-lint\")]\n+pub mod metadata_collector;\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for various things we like to keep tidy in clippy.\n     ///"}, {"sha": "dc4267697cba7a90693087d24e2c92d7c1d4e645", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -0,0 +1,206 @@\n+//! This lint is used to collect metadata about clippy lints. This metadata is exported as a json\n+//! file and then used to generate the [clippy lint list](https://rust-lang.github.io/rust-clippy/master/index.html)\n+//!\n+//! This module and therefor the entire lint is guarded by a feature flag called\n+//! `internal_metadata_lint`\n+//!\n+//! The metadata currently contains:\n+//! - [ ] TODO The lint declaration line for [#1303](https://github.com/rust-lang/rust-clippy/issues/1303)\n+//!   and [#6492](https://github.com/rust-lang/rust-clippy/issues/6492)\n+//! - [ ] TODO The Applicability for each lint for [#4310](https://github.com/rust-lang/rust-clippy/issues/4310)\n+\n+// # Applicability\n+// - TODO xFrednet 2021-01-17: Find all methods that take and modify applicability or predefine\n+//   them?\n+// - TODO xFrednet 2021-01-17: Find lint emit and collect applicability\n+// # NITs\n+// - TODO xFrednet 2021-02-13: Collect depreciations and maybe renames\n+\n+use if_chain::if_chain;\n+use rustc_hir::{ExprKind, Item, ItemKind, Mutability};\n+use rustc_lint::{CheckLintNameResult, LateContext, LateLintPass, LintContext, LintId};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{sym, Loc, Span};\n+use serde::Serialize;\n+use std::fs::OpenOptions;\n+use std::io::prelude::*;\n+\n+use crate::utils::internal_lints::is_lint_ref_type;\n+use crate::utils::span_lint;\n+\n+const OUTPUT_FILE: &str = \"metadata_collection.json\";\n+const BLACK_LISTED_LINTS: [&str; 2] = [\"lint_author\", \"deep_code_inspection\"];\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Collects metadata about clippy lints for the website.\n+    ///\n+    /// This lint will be used to report problems of syntax parsing. You should hopefully never\n+    /// see this but never say never I guess ^^\n+    ///\n+    /// **Why is this bad?** This is not a bad thing but definitely a hacky way to do it. See\n+    /// issue [#4310](https://github.com/rust-lang/rust-clippy/issues/4310) for a discussion\n+    /// about the implementation.\n+    ///\n+    /// **Known problems:** Hopefully none. It would be pretty uncool to have a problem here :)\n+    ///\n+    /// **Example output:**\n+    /// ```json,ignore\n+    /// {\n+    ///     \"id\": \"internal_metadata_collector\",\n+    ///     \"id_span\": {\n+    ///         \"path\": \"clippy_lints/src/utils/internal_lints/metadata_collector.rs\",\n+    ///         \"line\": 1\n+    ///     },\n+    ///     \"group\": \"clippy::internal\",\n+    ///     \"docs\": \" **What it does:** Collects metadata about clippy lints for the website. [...] \"\n+    /// }\n+    /// ```\n+    pub INTERNAL_METADATA_COLLECTOR,\n+    internal,\n+    \"A busy bee collection metadata about lints\"\n+}\n+\n+impl_lint_pass!(MetadataCollector => [INTERNAL_METADATA_COLLECTOR]);\n+\n+#[allow(clippy::module_name_repetitions)]\n+#[derive(Debug, Clone, Default)]\n+pub struct MetadataCollector {\n+    lints: Vec<LintMetadata>,\n+}\n+\n+impl Drop for MetadataCollector {\n+    fn drop(&mut self) {\n+        // You might ask: How hacky is this?\n+        // My answer:     YES\n+        let mut file = OpenOptions::new().write(true).create(true).open(OUTPUT_FILE).unwrap();\n+        writeln!(file, \"{}\", serde_json::to_string_pretty(&self.lints).unwrap()).unwrap();\n+    }\n+}\n+\n+#[derive(Debug, Clone, Serialize)]\n+struct LintMetadata {\n+    id: String,\n+    id_span: SerializableSpan,\n+    group: String,\n+    docs: String,\n+}\n+\n+#[derive(Debug, Clone, Serialize)]\n+struct SerializableSpan {\n+    path: String,\n+    line: usize,\n+}\n+\n+impl SerializableSpan {\n+    fn from_item(cx: &LateContext<'_>, item: &Item<'_>) -> Self {\n+        Self::from_span(cx, item.ident.span)\n+    }\n+\n+    fn from_span(cx: &LateContext<'_>, span: Span) -> Self {\n+        let loc: Loc = cx.sess().source_map().lookup_char_pos(span.lo());\n+\n+        Self {\n+            path: format!(\"{}\", loc.file.name),\n+            line: 1,\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for MetadataCollector {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        if_chain! {\n+            if let ItemKind::Static(ref ty, Mutability::Not, body_id) = item.kind;\n+            if is_lint_ref_type(cx, ty);\n+            let expr = &cx.tcx.hir().body(body_id).value;\n+            if let ExprKind::AddrOf(_, _, ref inner_exp) = expr.kind;\n+            if let ExprKind::Struct(_, _, _) = inner_exp.kind;\n+            then {\n+                let lint_name = item.ident.name.as_str().to_string().to_ascii_lowercase();\n+                if BLACK_LISTED_LINTS.contains(&lint_name.as_str()) {\n+                    return;\n+                }\n+\n+                let group: String;\n+                let result = cx.lint_store.check_lint_name(lint_name.as_str(), Some(sym::clippy));\n+                if let CheckLintNameResult::Tool(Ok(lint_lst)) = result {\n+                    if let Some(group_some) = get_lint_group(cx, lint_lst[0]) {\n+                        group = group_some;\n+                    } else {\n+                        lint_collection_error(cx, item, \"Unable to determine lint group\");\n+                        return;\n+                    }\n+                } else {\n+                    lint_collection_error(cx, item, \"Unable to find lint in lint_store\");\n+                    return;\n+                }\n+\n+                let docs: String;\n+                if let Some(docs_some) = extract_attr_docs(item) {\n+                    docs = docs_some;\n+                } else {\n+                    lint_collection_error(cx, item, \"could not collect the lint documentation\");\n+                    return;\n+                };\n+\n+                self.lints.push(LintMetadata {\n+                    id: lint_name,\n+                    id_span: SerializableSpan::from_item(cx, item),\n+                    group,\n+                    docs,\n+                });\n+            }\n+        }\n+    }\n+}\n+\n+/// This function collects all documentation that has been added to an item using\n+/// `#[doc = r\"\"]` attributes. Several attributes are aggravated using line breaks\n+///\n+/// ```ignore\n+/// #[doc = r\"Hello world!\"]\n+/// #[doc = r\"=^.^=\"]\n+/// struct SomeItem {}\n+/// ```\n+///\n+/// Would result in `Hello world!\\n=^.^=\\n`\n+fn extract_attr_docs(item: &Item<'_>) -> Option<String> {\n+    item.attrs\n+        .iter()\n+        .filter_map(|ref x| x.doc_str())\n+        .fold(None, |acc, sym| {\n+            let mut doc_str = sym.as_str().to_string();\n+            doc_str.push('\\n');\n+\n+            #[allow(clippy::option_if_let_else)] // See clippy#6737\n+            if let Some(mut x) = acc {\n+                x.push_str(&doc_str);\n+                Some(x)\n+            } else {\n+                Some(doc_str)\n+            }\n+\n+            // acc.map_or(Some(doc_str), |mut x| {\n+            //     x.push_str(&doc_str);\n+            //     Some(x)\n+            // })\n+        })\n+}\n+\n+fn get_lint_group(cx: &LateContext<'_>, lint_id: LintId) -> Option<String> {\n+    for (group_name, lints, _) in &cx.lint_store.get_lint_groups() {\n+        if lints.iter().any(|x| *x == lint_id) {\n+            return Some((*group_name).to_string());\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn lint_collection_error(cx: &LateContext<'_>, item: &Item<'_>, message: &str) {\n+    span_lint(\n+        cx,\n+        INTERNAL_METADATA_COLLECTOR,\n+        item.ident.span,\n+        &format!(\"Metadata collection error for `{}`: {}\", item.ident.name, message),\n+    );\n+}"}, {"sha": "b67448e3a57406be07c7589baec3e72f17a964b2", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -1,5 +1,5 @@\n pub mod author;\n pub mod conf;\n pub mod inspector;\n-#[cfg(feature = \"internal-lints\")]\n+#[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub mod internal_lints;"}, {"sha": "b0da0bfcc35766fb5a917d35cd659770ab9dd9e3", "filename": "tests/dogfood.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/637751ff62662247480ae1641042a019d8e6609a/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637751ff62662247480ae1641042a019d8e6609a/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=637751ff62662247480ae1641042a019d8e6609a", "patch": "@@ -1,3 +1,8 @@\n+//! This test is a part of quality control and makes clippy eat what it produces. Awesome lints and\n+//! long error messages\n+//!\n+//! See [Eating your own dog food](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) for context\n+\n // Dogfood cannot run on Windows\n #![cfg(not(windows))]\n #![feature(once_cell)]\n@@ -36,6 +41,10 @@ fn dogfood_clippy() {\n         command.args(&[\"-D\", \"clippy::internal\"]);\n     }\n \n+    if cfg!(feature = \"metadata-collector-lint\") {\n+        command.args(&[\"-D\", \"clippy::internal\"]);\n+    }\n+\n     let output = command.output().unwrap();\n \n     println!(\"status: {}\", output.status);"}]}