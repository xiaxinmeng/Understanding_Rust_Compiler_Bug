{"sha": "8dfb3ec8a45316365f6d950fe7d46e120cd42301", "node_id": "C_kwDOAAsO6NoAKDhkZmIzZWM4YTQ1MzE2MzY1ZjZkOTUwZmU3ZDQ2ZTEyMGNkNDIzMDE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-12-03T15:35:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-12-08T10:16:14Z"}, "message": "Add new lint to warn when #[must_use] attribute should be used on a method", "tree": {"sha": "23407f692210501810133a692a57e0a0be4a73e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23407f692210501810133a692a57e0a0be4a73e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dfb3ec8a45316365f6d950fe7d46e120cd42301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfb3ec8a45316365f6d950fe7d46e120cd42301", "html_url": "https://github.com/rust-lang/rust/commit/8dfb3ec8a45316365f6d950fe7d46e120cd42301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dfb3ec8a45316365f6d950fe7d46e120cd42301/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1a73b8943bd8051faef511f011904a2c186cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1a73b8943bd8051faef511f011904a2c186cd8", "html_url": "https://github.com/rust-lang/rust/commit/be1a73b8943bd8051faef511f011904a2c186cd8"}], "stats": {"total": 186, "additions": 186, "deletions": 0}, "files": [{"sha": "2f64cd0e914e5a9f2db8da2c5f6c241653c702a0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -3118,6 +3118,7 @@ Released 2018-09-13\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_unit_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n+[`return_self_not_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push"}, {"sha": "f836d6443cd48a51759d920b33d3da86514542c5", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -245,6 +245,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(reference::REF_IN_DEREF),\n     LintId::of(regex::INVALID_REGEX),\n     LintId::of(repeat_once::REPEAT_ONCE),\n+    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(returns::LET_AND_RETURN),\n     LintId::of(returns::NEEDLESS_RETURN),\n     LintId::of(self_assignment::SELF_ASSIGNMENT),"}, {"sha": "68889f4f50a44c95dd9b269b1efa2076b1a10176", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -422,6 +422,7 @@ store.register_lints(&[\n     regex::INVALID_REGEX,\n     regex::TRIVIAL_REGEX,\n     repeat_once::REPEAT_ONCE,\n+    return_self_not_must_use::RETURN_SELF_NOT_MUST_USE,\n     returns::LET_AND_RETURN,\n     returns::NEEDLESS_RETURN,\n     same_name_method::SAME_NAME_METHOD,"}, {"sha": "70dc925487902b7b17685825126228a657c9343f", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -17,6 +17,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n+    LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "c6b14ecac4318caec2336358741a3856173b42ae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -341,6 +341,7 @@ mod ref_option_ref;\n mod reference;\n mod regex;\n mod repeat_once;\n+mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n mod self_assignment;\n@@ -853,6 +854,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n+    store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1118da6c8cb57299cff3acb51bf8c2d0940a5367", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -0,0 +1,105 @@\n+use clippy_utils::{diagnostics::span_lint, must_use_attr, nth_arg, return_ty};\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::intravisit::FnKind;\n+use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// This lint warns when a method returning `Self` doesn't have the `#[must_use]` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// It prevents to \"forget\" to use the newly created value.\n+    ///\n+    /// ### Limitations\n+    /// This lint is only applied on methods taking a `self` argument. It would be mostly noise\n+    /// if it was added on constructors for example.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// pub struct Bar;\n+    ///\n+    /// impl Bar {\n+    ///     // Bad\n+    ///     pub fn bar(&self) -> Self {\n+    ///         Self\n+    ///     }\n+    ///\n+    ///     // Good\n+    ///     #[must_use]\n+    ///     pub fn foo(&self) -> Self {\n+    ///         Self\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub RETURN_SELF_NOT_MUST_USE,\n+    suspicious,\n+    \"missing `#[must_use]` annotation on a method returning `Self`\"\n+}\n+\n+declare_lint_pass!(ReturnSelfNotMustUse => [RETURN_SELF_NOT_MUST_USE]);\n+\n+fn check_method(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'tcx>, fn_def: LocalDefId, span: Span, hir_id: HirId) {\n+    if_chain! {\n+        // If it comes from an external macro, better ignore it.\n+        if !in_external_macro(cx.sess(), span);\n+        if decl.implicit_self.has_implicit_self();\n+        // We only show this warning for public exported methods.\n+        if cx.access_levels.is_exported(fn_def);\n+        if cx.tcx.visibility(fn_def.to_def_id()).is_public();\n+        // No need to warn if the attribute is already present.\n+        if must_use_attr(cx.tcx.hir().attrs(hir_id)).is_none();\n+        let ret_ty = return_ty(cx, hir_id);\n+        let self_arg = nth_arg(cx, hir_id, 0);\n+        // If `Self` has the same type as the returned type, then we want to warn.\n+        //\n+        // For this check, we don't want to remove the reference on the returned type because if\n+        // there is one, we shouldn't emit a warning!\n+        if self_arg.peel_refs() == ret_ty;\n+\n+        then {\n+            span_lint(\n+                cx,\n+                RETURN_SELF_NOT_MUST_USE,\n+                span,\n+                \"missing `#[must_use]` attribute on a method returning `Self`\",\n+            );\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl<'tcx>,\n+        _: &'tcx Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if_chain! {\n+            // We are only interested in methods, not in functions or associated functions.\n+            if matches!(kind, FnKind::Method(_, _, _));\n+            if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n+            if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n+            // We don't want this method to be te implementation of a trait because the\n+            // `#[must_use]` should be put on the trait definition directly.\n+            if cx.tcx.trait_id_of_impl(impl_def).is_none();\n+\n+            then {\n+                check_method(cx, decl, fn_def, span, hir_id);\n+            }\n+        }\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n+        if let TraitItemKind::Fn(ref sig, _) = item.kind {\n+            check_method(cx, sig.decl, item.def_id, item.span, item.hir_id());\n+        }\n+    }\n+}"}, {"sha": "779c812ca0bd4862b62b2f5fac3522401ddf97de", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -1329,6 +1329,13 @@ pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx>\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n+/// Convenience function to get the nth argument type of a function.\n+pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId, nth: usize) -> Ty<'tcx> {\n+    let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n+    let arg = cx.tcx.fn_sig(fn_def_id).input(nth);\n+    cx.tcx.erase_late_bound_regions(arg)\n+}\n+\n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(fun, _) = expr.kind {"}, {"sha": "bdf3f3d799582085b2b39a341445074f18e603b2", "filename": "tests/ui/return_self_not_must_use.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/tests%2Fui%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/tests%2Fui%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.rs?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -0,0 +1,42 @@\n+#![crate_type = \"lib\"]\n+\n+#[derive(Clone)]\n+pub struct Bar;\n+\n+pub trait Whatever {\n+    fn what(&self) -> Self;\n+    // There should be no warning here!\n+    fn what2(&self) -> &Self;\n+}\n+\n+impl Bar {\n+    // There should be no warning here!\n+    pub fn not_new() -> Self {\n+        Self\n+    }\n+    pub fn foo(&self) -> Self {\n+        Self\n+    }\n+    pub fn bar(self) -> Self {\n+        self\n+    }\n+    // There should be no warning here!\n+    fn foo2(&self) -> Self {\n+        Self\n+    }\n+    // There should be no warning here!\n+    pub fn foo3(&self) -> &Self {\n+        self\n+    }\n+}\n+\n+impl Whatever for Bar {\n+    // There should be no warning here!\n+    fn what(&self) -> Self {\n+        self.foo2()\n+    }\n+    // There should be no warning here!\n+    fn what2(&self) -> &Self {\n+        self\n+    }\n+}"}, {"sha": "3793a5559ba55394fcc6497bf113a88e5aadd6e0", "filename": "tests/ui/return_self_not_must_use.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8dfb3ec8a45316365f6d950fe7d46e120cd42301/tests%2Fui%2Freturn_self_not_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dfb3ec8a45316365f6d950fe7d46e120cd42301/tests%2Fui%2Freturn_self_not_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.stderr?ref=8dfb3ec8a45316365f6d950fe7d46e120cd42301", "patch": "@@ -0,0 +1,26 @@\n+error: missing `#[must_use]` attribute on a method returning `Self`\n+  --> $DIR/return_self_not_must_use.rs:7:5\n+   |\n+LL |     fn what(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::return-self-not-must-use` implied by `-D warnings`\n+\n+error: missing `#[must_use]` attribute on a method returning `Self`\n+  --> $DIR/return_self_not_must_use.rs:17:5\n+   |\n+LL | /     pub fn foo(&self) -> Self {\n+LL | |         Self\n+LL | |     }\n+   | |_____^\n+\n+error: missing `#[must_use]` attribute on a method returning `Self`\n+  --> $DIR/return_self_not_must_use.rs:20:5\n+   |\n+LL | /     pub fn bar(self) -> Self {\n+LL | |         self\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n+"}]}