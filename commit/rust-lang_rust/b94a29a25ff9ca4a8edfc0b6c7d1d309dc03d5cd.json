{"sha": "b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "node_id": "C_kwDOAAsO6NoAKGI5NGEyOWEyNWZmOWNhNGE4ZWRmYzBiNmM3ZDFkMzA5ZGMwM2Q1Y2Q", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-17T15:42:53Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-18T15:15:15Z"}, "message": "Implement `alloc::vec::IsZero` for `Option<$NUM>` types", "tree": {"sha": "6a52e6646a627f215034989abf845ea35157a12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a52e6646a627f215034989abf845ea35157a12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "html_url": "https://github.com/rust-lang/rust/commit/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34cc658eb477958e2b73e05586e7af66faefad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34cc658eb477958e2b73e05586e7af66faefad9", "html_url": "https://github.com/rust-lang/rust/commit/f34cc658eb477958e2b73e05586e7af66faefad9"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "ca75c3895f41f61547be83491e0c042102a4a927", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "patch": "@@ -106,6 +106,7 @@\n #![feature(const_size_of_val)]\n #![feature(const_align_of_val)]\n #![feature(const_ptr_read)]\n+#![feature(const_maybe_uninit_zeroed)]\n #![feature(const_maybe_uninit_write)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_refs_to_cell)]"}, {"sha": "2b6be14de792d48213baa65faa60c34ff0042b5f", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "patch": "@@ -147,6 +147,23 @@ impl_is_zero_option_of_nonzero!(\n     NonZeroIsize,\n );\n \n+macro_rules! impl_is_zero_option_of_num {\n+    ($($t:ty,)+) => {$(\n+        unsafe impl IsZero for Option<$t> {\n+            #[inline]\n+            fn is_zero(&self) -> bool {\n+                const {\n+                    let none: Self = unsafe { core::mem::MaybeUninit::zeroed().assume_init() };\n+                    assert!(none.is_none());\n+                }\n+                self.is_none()\n+            }\n+        }\n+    )+};\n+}\n+\n+impl_is_zero_option_of_num!(u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize,);\n+\n unsafe impl<T: IsZero> IsZero for Wrapping<T> {\n     #[inline]\n     fn is_zero(&self) -> bool {"}, {"sha": "9cc5bd4fd1a997789be548567c4d671031606c5f", "filename": "tests/codegen/vec-calloc.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/tests%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd/tests%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-calloc.rs?ref=b94a29a25ff9ca4a8edfc0b6c7d1d309dc03d5cd", "patch": "@@ -161,6 +161,23 @@ pub fn vec_option_bool(n: usize) -> Vec<Option<bool>> {\n     vec![Some(false); n]\n }\n \n+// CHECK-LABEL: @vec_option_i32\n+#[no_mangle]\n+pub fn vec_option_i32(n: usize) -> Vec<Option<i32>> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![None; n]\n+}\n+\n // Ensure that __rust_alloc_zeroed gets the right attributes for LLVM to optimize it away.\n // CHECK: declare noalias ptr @__rust_alloc_zeroed(i64, i64 allocalign) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n "}]}