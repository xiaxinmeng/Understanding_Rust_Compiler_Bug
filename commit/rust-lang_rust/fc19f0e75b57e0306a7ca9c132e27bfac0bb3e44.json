{"sha": "fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTlmMGU3NWI1N2UwMzA2YTdjYTljMTMyZTI3YmZhYzBiYjNlNDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-13T02:33:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-13T02:33:39Z"}, "message": "Rollup merge of #58998 - xTibor:doc_from_bytes, r=scottmcm\n\nFix documentation of from_ne_bytes and from_le_bytes\n\nCopypasta mistake, the documentation of `from_ne_bytes` and `from_le_bytes` used the big-endian variant in the example snippets.", "tree": {"sha": "a8f5685ea05b0b57e5fc5cac457b349129f80517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f5685ea05b0b57e5fc5cac457b349129f80517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJciGwDCRBK7hj4Ov3rIwAAdHIIAJcNiJCtvvk5+FRBhrJRD7A8\neVU7xeozbCakVBJFi4mRC4aUK5x/dTgjk7E/rBFbgJF9WiKxzHYXysdB/337qbm2\nMWMLCSXgCfXvCxsAqcB5je5T11vTqCXaO0Ddy/ehBqiL2/85rw2WKAbJ1OOmeWdM\n4+vqHT60jzN1rD51fNDHCupKHA0wWaPXk76mwtWu2A2wFNesI7lMCn5lD9nkCaab\n557zdrpFqpIbCPEfnyxwyPfv0xStGbJbyeS9nGS/ZpPcUecuXZ5z/bGvttlr0L3Y\nmGYNarw0TD0a2jKTC1jis6VCzkhqWNrV1c0sFGTqMrsOK/j/XZEkk/rIXEFXqKc=\n=bkXY\n-----END PGP SIGNATURE-----\n", "payload": "tree a8f5685ea05b0b57e5fc5cac457b349129f80517\nparent 2049d6f4d4062172893e8585affe82797635efc5\nparent 63f60b06a273072887938eea6785c1ff080e2721\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552444419 +0100\ncommitter GitHub <noreply@github.com> 1552444419 +0100\n\nRollup merge of #58998 - xTibor:doc_from_bytes, r=scottmcm\n\nFix documentation of from_ne_bytes and from_le_bytes\n\nCopypasta mistake, the documentation of `from_ne_bytes` and `from_le_bytes` used the big-endian variant in the example snippets.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "html_url": "https://github.com/rust-lang/rust/commit/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2049d6f4d4062172893e8585affe82797635efc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2049d6f4d4062172893e8585affe82797635efc5", "html_url": "https://github.com/rust-lang/rust/commit/2049d6f4d4062172893e8585affe82797635efc5"}, {"sha": "63f60b06a273072887938eea6785c1ff080e2721", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f60b06a273072887938eea6785c1ff080e2721", "html_url": "https://github.com/rust-lang/rust/commit/63f60b06a273072887938eea6785c1ff080e2721"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d93cfbc2a28acd571b4a621af2aa2875ffc58844", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "patch": "@@ -1979,10 +1979,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_le_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n@@ -2020,10 +2020,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_ne_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n@@ -3695,10 +3695,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_le_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n@@ -3736,10 +3736,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_ne_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]"}]}