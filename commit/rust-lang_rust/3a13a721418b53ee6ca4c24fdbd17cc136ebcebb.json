{"sha": "3a13a721418b53ee6ca4c24fdbd17cc136ebcebb", "node_id": "C_kwDOAAsO6NoAKDNhMTNhNzIxNDE4YjUzZWU2Y2E0YzI0ZmRiZDE3Y2MxMzZlYmNlYmI", "commit": {"author": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2021-11-17T15:31:56Z"}, "committer": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2021-11-27T13:57:19Z"}, "message": "Improve `unsafe` diagnostic", "tree": {"sha": "9eef75e555bd91134c68b48bdd280ca5a3a329d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eef75e555bd91134c68b48bdd280ca5a3a329d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb", "html_url": "https://github.com/rust-lang/rust/commit/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb/comments", "author": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84826fec957aa17b0e068775c1c5574f707d43b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/84826fec957aa17b0e068775c1c5574f707d43b0", "html_url": "https://github.com/rust-lang/rust/commit/84826fec957aa17b0e068775c1c5574f707d43b0"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "6e9eaf0c0f9473a966fbcb0fe3cabf79c103d9a0", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=3a13a721418b53ee6ca4c24fdbd17cc136ebcebb", "patch": "@@ -933,10 +933,32 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         unsafety: Unsafe,\n     ) -> PResult<'a, ItemInfo> {\n+        let sp_start = self.prev_token.span;\n         let abi = self.parse_abi(); // ABI?\n-        let items = self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No))?;\n-        let module = ast::ForeignMod { unsafety, abi, items };\n-        Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n+        match self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No)) {\n+            Ok(items) => {\n+                let module = ast::ForeignMod { unsafety, abi, items };\n+                Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n+            }\n+            Err(mut err) => {\n+                let current_qual_sp = self.prev_token.span;\n+                let current_qual_sp = current_qual_sp.to(sp_start);\n+                if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n+                    if err.message() == \"expected `{`, found keyword `unsafe`\" {\n+                        let invalid_qual_sp = self.token.uninterpolated_span();\n+                        let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n+\n+                        err.span_suggestion(\n+                                current_qual_sp.to(invalid_qual_sp),\n+                                &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n+                                format!(\"{} {}\", invalid_qual, current_qual),\n+                                Applicability::MachineApplicable,\n+                            ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n+                    }\n+                }\n+                Err(err)\n+            }\n+        }\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block)."}, {"sha": "f9c3ca763f26ea5728103dad29d7f723d551b3fd", "filename": "src/test/ui/parser/issues/issue-19398.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a13a721418b53ee6ca4c24fdbd17cc136ebcebb/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr?ref=3a13a721418b53ee6ca4c24fdbd17cc136ebcebb", "patch": "@@ -4,10 +4,15 @@ error: expected `{`, found keyword `unsafe`\n LL | trait T {\n    |         - while parsing this item list starting here\n LL |     extern \"Rust\" unsafe fn foo();\n-   |                   ^^^^^^ expected `{`\n+   |     --------------^^^^^^\n+   |     |             |\n+   |     |             expected `{`\n+   |     help: `unsafe` must come before `extern \"Rust\"`: `unsafe extern \"Rust\"`\n LL |\n LL | }\n    | - the item list ends here\n+   |\n+   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}]}