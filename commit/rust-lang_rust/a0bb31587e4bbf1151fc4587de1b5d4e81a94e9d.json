{"sha": "a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "node_id": "C_kwDOAAsO6NoAKGEwYmIzMTU4N2U0YmJmMTE1MWZjNDU4N2RlMWI1ZDRlODFhOTRlOWQ", "commit": {"author": {"name": "Eric Sampson", "email": "esampson@eaze.com", "date": "2021-10-04T07:18:31Z"}, "committer": {"name": "Eric Sampson", "email": "esampson@eaze.com", "date": "2021-10-04T07:18:31Z"}, "message": "Add enum variant references CodeLens.", "tree": {"sha": "c335cf84a4fad9a51255059f7908ae737d672969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c335cf84a4fad9a51255059f7908ae737d672969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "html_url": "https://github.com/rust-lang/rust/commit/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/comments", "author": {"login": "ericsampson", "id": 1183853, "node_id": "MDQ6VXNlcjExODM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1183853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsampson", "html_url": "https://github.com/ericsampson", "followers_url": "https://api.github.com/users/ericsampson/followers", "following_url": "https://api.github.com/users/ericsampson/following{/other_user}", "gists_url": "https://api.github.com/users/ericsampson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsampson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsampson/subscriptions", "organizations_url": "https://api.github.com/users/ericsampson/orgs", "repos_url": "https://api.github.com/users/ericsampson/repos", "events_url": "https://api.github.com/users/ericsampson/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsampson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ericsampson", "id": 1183853, "node_id": "MDQ6VXNlcjExODM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1183853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsampson", "html_url": "https://github.com/ericsampson", "followers_url": "https://api.github.com/users/ericsampson/followers", "following_url": "https://api.github.com/users/ericsampson/following{/other_user}", "gists_url": "https://api.github.com/users/ericsampson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsampson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsampson/subscriptions", "organizations_url": "https://api.github.com/users/ericsampson/orgs", "repos_url": "https://api.github.com/users/ericsampson/repos", "events_url": "https://api.github.com/users/ericsampson/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsampson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b7675fcc30d3e2c05eafc68a5724db66b58142c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7675fcc30d3e2c05eafc68a5724db66b58142c", "html_url": "https://github.com/rust-lang/rust/commit/4b7675fcc30d3e2c05eafc68a5724db66b58142c"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "6c75bf34923ace1f0d563dcb719abc7aa1adec62", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "patch": "@@ -5,7 +5,7 @@ use ide_db::{\n     helpers::visit_file_defs,\n     RootDatabase,\n };\n-use syntax::{ast::HasName, AstNode, TextRange};\n+use syntax::{ast::HasName, AstNode, TextRange, TextSize};\n \n use crate::{\n     fn_references::find_all_methods,\n@@ -40,6 +40,7 @@ pub struct AnnotationConfig {\n     pub annotate_impls: bool,\n     pub annotate_references: bool,\n     pub annotate_method_references: bool,\n+    pub annotate_enum_variant_references: bool,\n }\n \n pub(crate) fn annotations(\n@@ -63,18 +64,33 @@ pub(crate) fn annotations(\n \n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| match def {\n         Either::Left(def) => {\n-            let range = match def {\n+            let (range, ranges_variants) = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    konst.source(db).and_then(|node| name_range(&node, file_id))\n+                    (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![None])\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    trait_.source(db).and_then(|node| name_range(&node, file_id))\n+                    (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![None])\n                 }\n-                hir::ModuleDef::Adt(adt) => {\n-                    adt.source(db).and_then(|node| name_range(&node, file_id))\n-                }\n-                _ => None,\n+                hir::ModuleDef::Adt(adt) => match adt {\n+                    hir::Adt::Enum(enum_) => (\n+                        enum_.source(db).and_then(|node| name_range(&node, file_id)),\n+                        if config.annotate_enum_variant_references {\n+                            enum_\n+                                .variants(db)\n+                                .into_iter()\n+                                .map(|variant| {\n+                                    variant.source(db).and_then(|node| name_range(&node, file_id))\n+                                })\n+                                .collect()\n+                        } else {\n+                            vec![None]\n+                        },\n+                    ),\n+                    _ => (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![None]),\n+                },\n+                _ => (None, vec![None]),\n             };\n+\n             let (range, offset) = match range {\n                 Some(range) => (range, range.start()),\n                 None => return,\n@@ -99,6 +115,26 @@ pub(crate) fn annotations(\n                 });\n             }\n \n+            if config.annotate_enum_variant_references {\n+                let mut variants_metadata: Vec<(TextRange, TextSize)> = Vec::new();\n+                for range_variant in ranges_variants.into_iter() {\n+                    let (range, offset) = match range_variant {\n+                        Some(range) => (range, range.start()),\n+                        None => return,\n+                    };\n+                    variants_metadata.push((range, offset))\n+                }\n+                for variant_metadata in variants_metadata.into_iter() {\n+                    annotations.push(Annotation {\n+                        range: variant_metadata.0,\n+                        kind: AnnotationKind::HasReferences {\n+                            position: FilePosition { file_id, offset: variant_metadata.1 },\n+                            data: None,\n+                        },\n+                    });\n+                }\n+            }\n+\n             fn name_range<T: HasName>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n                 if node.file_id == file_id.into() {\n                     node.value.name().map(|it| it.syntax().text_range())\n@@ -173,6 +209,7 @@ mod tests {\n                     annotate_impls: true,\n                     annotate_references: true,\n                     annotate_method_references: true,\n+                    annotate_enum_variant_references: true,\n                 },\n                 file_id,\n             )"}, {"sha": "505123fc6af4b2ed7498b0289275b65f38641b81", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "patch": "@@ -225,9 +225,12 @@ config_data! {\n         /// Whether to show `Method References` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_methodReferences: bool = \"false\",\n-        /// Whether to show `References` lens. Only applies when\n-        /// `#rust-analyzer.lens.enable#` is set.\n+        /// Whether to show `References` lens for Struct, Enum, Union and Trait.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n         lens_references: bool = \"false\",\n+        /// Whether to show `References` lens for Enum Variants.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n+        lens_enumVariantReferences: bool = \"false\",\n         /// Internal config: use custom client-side commands even when the\n         /// client doesn't set the corresponding capability.\n         lens_forceCustomCommands: bool = \"true\",\n@@ -323,6 +326,7 @@ pub struct LensConfig {\n     pub implementations: bool,\n     pub method_refs: bool,\n     pub refs: bool, // for Struct, Enum, Union and Trait\n+    pub enum_variant_refs: bool,\n }\n \n impl LensConfig {\n@@ -339,7 +343,7 @@ impl LensConfig {\n     }\n \n     pub fn references(&self) -> bool {\n-        self.method_refs || self.refs\n+        self.method_refs || self.refs || self.enum_variant_refs\n     }\n }\n \n@@ -805,6 +809,7 @@ impl Config {\n             implementations: self.data.lens_enable && self.data.lens_implementations,\n             method_refs: self.data.lens_enable && self.data.lens_methodReferences,\n             refs: self.data.lens_enable && self.data.lens_references,\n+            enum_variant_refs: self.data.lens_enable && self.data.lens_enumVariantReferences,\n         }\n     }\n     pub fn hover_actions(&self) -> HoverActionsConfig {"}, {"sha": "412a52d1c36dd0b36bd430aecdfa7eb7140244fd", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "patch": "@@ -1135,6 +1135,7 @@ pub(crate) fn handle_code_lens(\n             annotate_impls: lens_config.implementations,\n             annotate_references: lens_config.refs,\n             annotate_method_references: lens_config.method_refs,\n+            annotate_enum_variant_references: lens_config.enum_variant_refs,\n         },\n         file_id,\n     )?;"}, {"sha": "9e08e638bbe9d96e6b2172a538c30bfdd8fe2019", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a0bb31587e4bbf1151fc4587de1b5d4e81a94e9d", "patch": "@@ -793,7 +793,12 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.lens.references\": {\n-                    \"markdownDescription\": \"Whether to show `References` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                    \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, Union and Trait. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.enumVariantReferences\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Enum Variants. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },"}]}