{"sha": "ec487bf3cfc9ce386da25169509fae8f2b4d4eec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNDg3YmYzY2ZjOWNlMzg2ZGEyNTE2OTUwOWZhZThmMmI0ZDRlZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T07:06:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T07:06:01Z"}, "message": "Auto merge of #82760 - WaffleLapkin:unleak_extend_from_within, r=kennytm\n\nFix leak in Vec::extend_from_within\n\nFixes #82533", "tree": {"sha": "d8468854e836ef1fad5b8b9146c272e98fd5dad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8468854e836ef1fad5b8b9146c272e98fd5dad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec487bf3cfc9ce386da25169509fae8f2b4d4eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec487bf3cfc9ce386da25169509fae8f2b4d4eec", "html_url": "https://github.com/rust-lang/rust/commit/ec487bf3cfc9ce386da25169509fae8f2b4d4eec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec487bf3cfc9ce386da25169509fae8f2b4d4eec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42888c15fd370b8bca4c5646ffc3aac3005dca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42888c15fd370b8bca4c5646ffc3aac3005dca8", "html_url": "https://github.com/rust-lang/rust/commit/f42888c15fd370b8bca4c5646ffc3aac3005dca8"}, {"sha": "1f031d95ded44337848f53e07aae05087ccf15f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f031d95ded44337848f53e07aae05087ccf15f1", "html_url": "https://github.com/rust-lang/rust/commit/1f031d95ded44337848f53e07aae05087ccf15f1"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "49758f672a89fd06512948f90b260849bb101e63", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ec487bf3cfc9ce386da25169509fae8f2b4d4eec/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec487bf3cfc9ce386da25169509fae8f2b4d4eec/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=ec487bf3cfc9ce386da25169509fae8f2b4d4eec", "patch": "@@ -1942,6 +1942,18 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]\n     #[inline]\n     pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n+        // SAFETY:\n+        // - len is ignored and so never changed\n+        let (init, spare, _) = unsafe { self.split_at_spare_mut_with_len() };\n+        (init, spare)\n+    }\n+\n+    /// Safety: changing returned .2 (&mut usize) is considered the same as calling `.set_len(_)`.\n+    ///\n+    /// This method is used to have unique access to all vec parts at once in `extend_from_within`.\n+    unsafe fn split_at_spare_mut_with_len(\n+        &mut self,\n+    ) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n         let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n         let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n         let spare_len = self.buf.capacity() - self.len;\n@@ -1953,7 +1965,7 @@ impl<T, A: Allocator> Vec<T, A> {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);\n             let spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n \n-            (initialized, spare)\n+            (initialized, spare, &mut self.len)\n         }\n     }\n }\n@@ -2165,22 +2177,23 @@ trait ExtendFromWithinSpec {\n \n impl<T: Clone, A: Allocator> ExtendFromWithinSpec for Vec<T, A> {\n     default unsafe fn spec_extend_from_within(&mut self, src: Range<usize>) {\n-        let initialized = {\n-            let (this, spare) = self.split_at_spare_mut();\n-\n-            // SAFETY:\n-            // - caller guaratees that src is a valid index\n-            let to_clone = unsafe { this.get_unchecked(src) };\n-\n-            to_clone.iter().cloned().zip(spare.iter_mut()).map(|(e, s)| s.write(e)).count()\n-        };\n+        // SAFETY:\n+        // - len is increased only after initializing elements\n+        let (this, spare, len) = unsafe { self.split_at_spare_mut_with_len() };\n \n         // SAFETY:\n-        // - elements were just initialized\n-        unsafe {\n-            let new_len = self.len() + initialized;\n-            self.set_len(new_len);\n-        }\n+        // - caller guaratees that src is a valid index\n+        let to_clone = unsafe { this.get_unchecked(src) };\n+\n+        to_clone\n+            .iter()\n+            .cloned()\n+            .zip(spare.iter_mut())\n+            .map(|(src, dst)| dst.write(src))\n+            // Note:\n+            // - Element was just initialized with `MaybeUninit::write`, so it's ok to increace len\n+            // - len is increased after each element to prevent leaks (see issue #82533)\n+            .for_each(|_| *len += 1);\n     }\n }\n "}, {"sha": "1ba2315ca73eb4ba314099abcd811a8dc521d5d2", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ec487bf3cfc9ce386da25169509fae8f2b4d4eec/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec487bf3cfc9ce386da25169509fae8f2b4d4eec/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=ec487bf3cfc9ce386da25169509fae8f2b4d4eec", "patch": "@@ -7,6 +7,7 @@ use std::mem::{size_of, swap};\n use std::ops::Bound::*;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::rc::Rc;\n+use std::sync::atomic::{AtomicU32, Ordering};\n use std::vec::{Drain, IntoIter};\n \n struct DropCounter<'a> {\n@@ -2100,3 +2101,44 @@ fn test_extend_from_within() {\n \n     assert_eq!(v, [\"a\", \"b\", \"c\", \"b\", \"c\", \"a\", \"b\"]);\n }\n+\n+// Regression test for issue #82533\n+#[test]\n+fn test_extend_from_within_panicing_clone() {\n+    struct Panic<'dc> {\n+        drop_count: &'dc AtomicU32,\n+        aaaaa: bool,\n+    }\n+\n+    impl Clone for Panic<'_> {\n+        fn clone(&self) -> Self {\n+            if self.aaaaa {\n+                panic!(\"panic! at the clone\");\n+            }\n+\n+            Self { ..*self }\n+        }\n+    }\n+\n+    impl Drop for Panic<'_> {\n+        fn drop(&mut self) {\n+            self.drop_count.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let count = core::sync::atomic::AtomicU32::new(0);\n+    let mut vec = vec![\n+        Panic { drop_count: &count, aaaaa: false },\n+        Panic { drop_count: &count, aaaaa: true },\n+        Panic { drop_count: &count, aaaaa: false },\n+    ];\n+\n+    // This should clone&append one Panic{..} at the end, and then panic while\n+    // cloning second Panic{..}. This means that `Panic::drop` should be called\n+    // 4 times (3 for items already in vector, 1 for just appended).\n+    //\n+    // Previously just appended item was leaked, making drop_count = 3, instead of 4.\n+    std::panic::catch_unwind(move || vec.extend_from_within(..)).unwrap_err();\n+\n+    assert_eq!(count.load(Ordering::SeqCst), 4);\n+}"}]}