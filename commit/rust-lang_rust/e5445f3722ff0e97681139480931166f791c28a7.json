{"sha": "e5445f3722ff0e97681139480931166f791c28a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NDQ1ZjM3MjJmZjBlOTc2ODExMzk0ODA5MzExNjZmNzkxYzI4YTc=", "commit": {"author": {"name": "Andy Wang", "email": "qian.wang19@imperial.ac.uk", "date": "2021-04-14T14:33:46Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:10:58Z"}, "message": "Emit RealFileName::Remapped on expanded relative path if working_dir has been remapped", "tree": {"sha": "b653d5af08864e98b15c83409d9711cc374b7956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b653d5af08864e98b15c83409d9711cc374b7956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5445f3722ff0e97681139480931166f791c28a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSp3IACgkQGBtJ+fOP\nM3RFWAwAgsvL9bpPiR+LyKNxNswYeWX3Dbd5n/cU5+dYfw1P4IXMHfZaeMqi/bhH\n6DdRzUFGc/9uXUsjwY500TAebWHm8ntAblA5izn5V0uu5dqqV2pq9JYNUTAsqJ75\npaOko2xsYjvhI39KQYLw8GBRLTGHjYwWJe2hLI9FznmyMTY/GZnmWu31g0rYClxa\njsQLc8yP3bmGLaFnuyIh9bdV0s1nF5PZRrC1SBlty+YIWr7LaSIQu2dDZc1vo+o4\nEPk9aVSV73IZq8ULZytTc5vKwvSpy7FQLB0AcsRHgnbFPg7NsKQ4kEkmyThBDdBq\nru5rkb2k+W4TRhnCk7PhBSlk+VvYNgcaefcQyhzpLR5q+MCEiJyG9s0geWLBsaUx\nZ7A8Bgu+XaOOJYF13Kw+dygZnFfr224bHHn52udmXIQrqQ5cAFdEVca1gIuvtQUM\ng6LYLlAx9/zAqGhGD/l+eyc5ihpSbEf2JoJECviAkhdSyyRxoAwmwp51UayjkiWs\njDPToeMa\n=6CCr\n-----END PGP SIGNATURE-----", "payload": "tree b653d5af08864e98b15c83409d9711cc374b7956\nparent 04079190835c04e8c671daef492144dfe06564ab\nauthor Andy Wang <qian.wang19@imperial.ac.uk> 1618410826 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620223858 +0100\n\nEmit RealFileName::Remapped on expanded relative path if working_dir has been remapped\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5445f3722ff0e97681139480931166f791c28a7", "html_url": "https://github.com/rust-lang/rust/commit/e5445f3722ff0e97681139480931166f791c28a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5445f3722ff0e97681139480931166f791c28a7/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04079190835c04e8c671daef492144dfe06564ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/04079190835c04e8c671daef492144dfe06564ab", "html_url": "https://github.com/rust-lang/rust/commit/04079190835c04e8c671daef492144dfe06564ab"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "a3e0dd8e3b9b6a1195958bca7f23990f7953c975", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e5445f3722ff0e97681139480931166f791c28a7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5445f3722ff0e97681139480931166f791c28a7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e5445f3722ff0e97681139480931166f791c28a7", "patch": "@@ -469,7 +469,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let source_map = self.tcx.sess.source_map();\n         let all_source_files = source_map.files();\n \n-        let working_dir = self.tcx.sess.working_dir.stable_name();\n         // By replacing the `Option` with `None`, we ensure that we can't\n         // accidentally serialize any more `Span`s after the source map encoding\n         // is done.\n@@ -488,23 +487,36 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             })\n             .map(|(_, source_file)| {\n                 let mut adapted = match source_file.name {\n-                    FileName::Real(ref name) => {\n-                        // Expand all local paths to absolute paths because\n-                        // any relative paths are potentially relative to a\n-                        // wrong directory.\n+                    FileName::Real(ref realname) => {\n                         let mut adapted = (**source_file).clone();\n-                        adapted.name = match name {\n+                        adapted.name = FileName::Real(match realname {\n                             RealFileName::LocalPath(local_path) => {\n-                                Path::new(&working_dir).join(local_path).into()\n+                                // Prepend path of working directory onto local path.\n+                                // because relative paths are potentially relative to a\n+                                // wrong directory.\n+                                let working_dir = &self.tcx.sess.working_dir;\n+                                if let RealFileName::LocalPath(absolute) = working_dir {\n+                                    // If working_dir has not been remapped, then we emit a\n+                                    // LocalPath variant as it's likely to be a valid path\n+                                    RealFileName::LocalPath(Path::new(absolute).join(local_path))\n+                                } else {\n+                                    // If working_dir has been remapped, then we emit\n+                                    // Remapped variant as the expanded path won't be valid\n+                                    RealFileName::Remapped {\n+                                        local_path: None,\n+                                        virtual_name: Path::new(working_dir.stable_name())\n+                                            .join(local_path),\n+                                    }\n+                                }\n                             }\n                             RealFileName::Remapped { local_path: _, virtual_name } => {\n-                                FileName::Real(RealFileName::Remapped {\n+                                RealFileName::Remapped {\n                                     // We do not want any local path to be exported into metadata\n                                     local_path: None,\n                                     virtual_name: virtual_name.clone(),\n-                                })\n+                                }\n                             }\n-                        };\n+                        });\n                         adapted.name_hash = {\n                             let mut hasher: StableHasher = StableHasher::new();\n                             adapted.name.hash(&mut hasher);"}]}