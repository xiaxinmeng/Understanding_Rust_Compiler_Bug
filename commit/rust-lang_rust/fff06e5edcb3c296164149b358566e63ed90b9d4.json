{"sha": "fff06e5edcb3c296164149b358566e63ed90b9d4", "node_id": "C_kwDOAAsO6NoAKGZmZjA2ZTVlZGNiM2MyOTYxNjQxNDliMzU4NTY2ZTYzZWQ5MGI5ZDQ", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-09T15:18:57Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-15T20:18:33Z"}, "message": "use AllocId and Ty in ExprKind::StaticRef and delay ConstValue construction", "tree": {"sha": "12d0e913a69a84ec886108b115349646234336fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d0e913a69a84ec886108b115349646234336fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff06e5edcb3c296164149b358566e63ed90b9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff06e5edcb3c296164149b358566e63ed90b9d4", "html_url": "https://github.com/rust-lang/rust/commit/fff06e5edcb3c296164149b358566e63ed90b9d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff06e5edcb3c296164149b358566e63ed90b9d4/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ff25e4467ad84f3f2e158b6969e5f71e72a287", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ff25e4467ad84f3f2e158b6969e5f71e72a287", "html_url": "https://github.com/rust-lang/rust/commit/54ff25e4467ad84f3f2e158b6969e5f71e72a287"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "a4e2a7c3e9169c7b9c74806fef716df4cf6526d5", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=fff06e5edcb3c296164149b358566e63ed90b9d4", "patch": "@@ -17,6 +17,7 @@ use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n+use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{\n     BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,\n };\n@@ -419,7 +420,8 @@ pub enum ExprKind<'tcx> {\n     /// This is only distinguished from `Literal` so that we can register some\n     /// info for diagnostics.\n     StaticRef {\n-        literal: Const<'tcx>,\n+        alloc_id: AllocId,\n+        ty: Ty<'tcx>,\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`.\n@@ -715,7 +717,11 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                         Some(&adt_def.variants[variant_index])\n                     }\n                     _ => self.ty.ty_adt_def().and_then(|adt| {\n-                        if !adt.is_enum() { Some(adt.non_enum_variant()) } else { None }\n+                        if !adt.is_enum() {\n+                            Some(adt.non_enum_variant())\n+                        } else {\n+                            None\n+                        }\n                     }),\n                 };\n "}, {"sha": "b3e2cb132a273b90d9984f7c61a9a3fdbab73386", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=fff06e5edcb3c296164149b358566e63ed90b9d4", "patch": "@@ -123,7 +123,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         }\n         Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n         Literal { literal, user_ty: _, const_id: _ } => visitor.visit_const(literal),\n-        StaticRef { literal, def_id: _ } => visitor.visit_const(literal),\n+        StaticRef { .. } => {}\n         InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n             for op in &**operands {\n                 use InlineAsmOperand::*;"}, {"sha": "0c0b0f2bd05affc985dad8dd83c21e488da36c4c", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=fff06e5edcb3c296164149b358566e63ed90b9d4", "patch": "@@ -1,6 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n+use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n@@ -26,11 +27,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 assert_eq!(literal.ty(), ty);\n                 Constant { span, user_ty, literal: literal.into() }\n             }\n-            ExprKind::StaticRef { literal, .. } => {\n-                let const_val = literal.val.try_to_value().unwrap_or_else(|| {\n-                    bug!(\"expected `ConstKind::Value`, but found {:?}\", literal.val)\n-                });\n-                let literal = ConstantKind::Val(const_val, literal.ty);\n+            ExprKind::StaticRef { alloc_id, ty, .. } => {\n+                let const_val =\n+                    ConstValue::Scalar(Scalar::from_pointer(alloc_id.into(), &this.tcx));\n+                let literal = ConstantKind::Val(const_val, ty);\n \n                 Constant { span, user_ty: None, literal }\n             }"}, {"sha": "829dec74803dd9e0d83bbdd70fde506c750460bf", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff06e5edcb3c296164149b358566e63ed90b9d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=fff06e5edcb3c296164149b358566e63ed90b9d4", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n@@ -943,15 +942,8 @@ impl<'tcx> Cx<'tcx> {\n                 let kind = if self.tcx.is_thread_local_static(id) {\n                     ExprKind::ThreadLocalRef(id)\n                 } else {\n-                    let ptr = self.tcx.create_static_alloc(id);\n-                    ExprKind::StaticRef {\n-                        literal: ty::Const::from_scalar(\n-                            self.tcx,\n-                            Scalar::from_pointer(ptr.into(), &self.tcx),\n-                            ty,\n-                        ),\n-                        def_id: id,\n-                    }\n+                    let alloc_id = self.tcx.create_static_alloc(id);\n+                    ExprKind::StaticRef { alloc_id, ty, def_id: id }\n                 };\n                 ExprKind::Deref {\n                     arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),"}]}