{"sha": "6ac229ca21b244451ec8325a5c2d96550c784a4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzIyOWNhMjFiMjQ0NDUxZWM4MzI1YTVjMmQ5NjU1MGM3ODRhNGE=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-03-19T21:49:51Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-03-21T19:54:42Z"}, "message": "Don't compute optimized PointerKind for unoptimized builds\n\nThis saves us both the Freeze/Unpin queries, and avoids placing\nnoalias attributes, which have a compile-time impact on LLVM\neven in optnone builds (due to always_inline functions).", "tree": {"sha": "66eafe2317e0973138fa65e3b220e8db53d92be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66eafe2317e0973138fa65e3b220e8db53d92be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac229ca21b244451ec8325a5c2d96550c784a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac229ca21b244451ec8325a5c2d96550c784a4a", "html_url": "https://github.com/rust-lang/rust/commit/6ac229ca21b244451ec8325a5c2d96550c784a4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac229ca21b244451ec8325a5c2d96550c784a4a/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ed64399e842ec80eadb4eeb620154df6cc6130", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ed64399e842ec80eadb4eeb620154df6cc6130", "html_url": "https://github.com/rust-lang/rust/commit/39ed64399e842ec80eadb4eeb620154df6cc6130"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "3a75a6d907d050c997d7be24025f1327f0afa5dc", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6ac229ca21b244451ec8325a5c2d96550c784a4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac229ca21b244451ec8325a5c2d96550c784a4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=6ac229ca21b244451ec8325a5c2d96550c784a4a", "patch": "@@ -11,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_session::{config::OptLevel, DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n@@ -2318,23 +2318,30 @@ where\n             ty::Ref(_, ty, mt) if offset.bytes() == 0 => {\n                 let address_space = addr_space_of_ty(ty);\n                 let tcx = cx.tcx();\n-                let kind = match mt {\n-                    hir::Mutability::Not => {\n-                        if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n-                            PointerKind::Frozen\n-                        } else {\n-                            PointerKind::Shared\n+                let kind = if tcx.sess.opts.optimize == OptLevel::No {\n+                    // Use conservative pointer kind if not optimizing. This saves us the\n+                    // Freeze/Unpin queries, and can save time in the codegen backend (noalias\n+                    // attributes in LLVM have compile-time cost even in unoptimized builds).\n+                    PointerKind::Shared\n+                } else {\n+                    match mt {\n+                        hir::Mutability::Not => {\n+                            if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n+                                PointerKind::Frozen\n+                            } else {\n+                                PointerKind::Shared\n+                            }\n                         }\n-                    }\n-                    hir::Mutability::Mut => {\n-                        // References to self-referential structures should not be considered\n-                        // noalias, as another pointer to the structure can be obtained, that\n-                        // is not based-on the original reference. We consider all !Unpin\n-                        // types to be potentially self-referential here.\n-                        if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n-                            PointerKind::UniqueBorrowed\n-                        } else {\n-                            PointerKind::Shared\n+                        hir::Mutability::Mut => {\n+                            // References to self-referential structures should not be considered\n+                            // noalias, as another pointer to the structure can be obtained, that\n+                            // is not based-on the original reference. We consider all !Unpin\n+                            // types to be potentially self-referential here.\n+                            if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n+                                PointerKind::UniqueBorrowed\n+                            } else {\n+                                PointerKind::Shared\n+                            }\n                         }\n                     }\n                 };"}, {"sha": "0c34bf1b914b0e835c46e4f7f73be04751410352", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac229ca21b244451ec8325a5c2d96550c784a4a/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac229ca21b244451ec8325a5c2d96550c784a4a/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=6ac229ca21b244451ec8325a5c2d96550c784a4a", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n // ignore-tidy-linelength\n // min-system-llvm-version: 12.0\n "}, {"sha": "8ca9b98eee2f9dadc42889d919ba57f4b0bd92ff", "filename": "src/test/codegen/noalias-unpin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac229ca21b244451ec8325a5c2d96550c784a4a/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac229ca21b244451ec8325a5c2d96550c784a4a/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs?ref=6ac229ca21b244451ec8325a5c2d96550c784a4a", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mutable-noalias=yes\n+// compile-flags: -O -Z mutable-noalias=yes\n \n #![crate_type = \"lib\"]\n "}, {"sha": "6ab28e87cb661efc4def8f4f328dd58b668ac9e3", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac229ca21b244451ec8325a5c2d96550c784a4a/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac229ca21b244451ec8325a5c2d96550c784a4a/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=6ac229ca21b244451ec8325a5c2d96550c784a4a", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n "}]}