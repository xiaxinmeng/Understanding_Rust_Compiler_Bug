{"sha": "20fbe22a64dcf0e2acbd80dbda50f492f2164760", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZmJlMjJhNjRkY2YwZTJhY2JkODBkYmRhNTBmNDkyZjIxNjQ3NjA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-18T14:46:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-18T14:46:36Z"}, "message": "Rollup merge of #79145 - camelid:clippy-fix-panics, r=flip1995\n\nFix handling of panic calls\n\nThis should make Clippy more resilient and will unblock #78343.\n\nThis PR is made against rust-lang/rust to avoid the need for a subtree\nsync at ``@flip1995's`` suggestion in rust-lang/rust-clippy#6310.\n\nr? ``@flip1995``\ncc ``@m-ou-se``", "tree": {"sha": "2a3b86c0b40702583a0a28a0e3839ef3fef08d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3b86c0b40702583a0a28a0e3839ef3fef08d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20fbe22a64dcf0e2acbd80dbda50f492f2164760", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftTPMCRBK7hj4Ov3rIwAAdHIIAGFFgQY+1DpY8Xp9LqCma6zk\ntE2hu9LlKQYsagdjpFn0Je3eFBcH5XjAhrS6j0jUvrcsjMnz72GYSrkPZBtGbCuf\nFW8slfeqx5pRXqH93MsuGB7KQ2FBAKw2lWmWADxOB0KH1xq2ZrFo5Kobur3+CM8T\nQ8HEJft+uwKzYuOuQEL9FRkG9dvJorzKU/t5xexKFc7cyQzbgRwZ30dtO/OcMQYS\n8snIAHsacy4ArV/eN0sOdX24T4nJef4JV+c5FZxLA2p67sOIT3CW0kcI4pqM8WO1\nkjb0RjoluCkX8D6/SrJhQGZUeQ7/8y1dJ4RzV6mrMTzLWikC+V5n3h0WghPFY5g=\n=FLme\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a3b86c0b40702583a0a28a0e3839ef3fef08d58\nparent 83fcbd576debaf614f7e3616b735301b9140409b\nparent 95eff664269adc18daca51b0de969b699a4ddb01\nauthor Mara Bos <m-ou.se@m-ou.se> 1605710796 +0100\ncommitter GitHub <noreply@github.com> 1605710796 +0100\n\nRollup merge of #79145 - camelid:clippy-fix-panics, r=flip1995\n\nFix handling of panic calls\n\nThis should make Clippy more resilient and will unblock #78343.\n\nThis PR is made against rust-lang/rust to avoid the need for a subtree\nsync at ``@flip1995's`` suggestion in rust-lang/rust-clippy#6310.\n\nr? ``@flip1995``\ncc ``@m-ou-se``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20fbe22a64dcf0e2acbd80dbda50f492f2164760", "html_url": "https://github.com/rust-lang/rust/commit/20fbe22a64dcf0e2acbd80dbda50f492f2164760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20fbe22a64dcf0e2acbd80dbda50f492f2164760/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83fcbd576debaf614f7e3616b735301b9140409b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83fcbd576debaf614f7e3616b735301b9140409b", "html_url": "https://github.com/rust-lang/rust/commit/83fcbd576debaf614f7e3616b735301b9140409b"}, {"sha": "95eff664269adc18daca51b0de969b699a4ddb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/95eff664269adc18daca51b0de969b699a4ddb01", "html_url": "https://github.com/rust-lang/rust/commit/95eff664269adc18daca51b0de969b699a4ddb01"}], "stats": {"total": 160, "additions": 106, "deletions": 54}, "files": [{"sha": "a2ccb0369c4a42c8dd25edae486b868f0d90deff", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,6 +1,5 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::paths;\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, snippet_opt, span_lint_and_help};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, snippet_opt, span_lint_and_help};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind, PatKind, UnOp};\n@@ -133,7 +132,7 @@ fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         if let ExprKind::Block(ref inner_block, _) = block_expr.kind;\n         if let Some(begin_panic_call) = &inner_block.expr;\n         // function call\n-        if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+        if let Some(args) = match_panic_call(cx, begin_panic_call);\n         if args.len() == 1;\n         // bind the second argument of the `assert!` macro if it exists\n         if let panic_message = snippet_opt(cx, args[0].span);"}, {"sha": "57702dafa6a0ce8a878102a15443db90afdea860", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,7 +1,7 @@\n //! checks for attributes\n \n use crate::utils::{\n-    first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_help,\n+    first_line_of_span, is_present_in_source, match_panic_def_id, snippet_opt, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n@@ -513,7 +513,7 @@ fn is_relevant_expr(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_>\n                 typeck_results\n                     .qpath_res(qpath, path_expr.hir_id)\n                     .opt_def_id()\n-                    .map_or(true, |fun_id| !match_def_path(cx, fun_id, &paths::BEGIN_PANIC))\n+                    .map_or(true, |fun_id| !match_panic_def_id(cx, fun_id))\n             } else {\n                 true\n             }"}, {"sha": "509a4a4e15f628162e78ba6bea9375af3d3c5e61", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,5 +1,7 @@\n-use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT};\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, match_def_path, method_chain_args, span_lint_and_then};\n+use crate::utils::paths::FROM_TRAIT;\n+use crate::utils::{\n+    is_expn_of, is_type_diagnostic_item, match_def_path, match_panic_def_id, method_chain_args, span_lint_and_then,\n+};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -84,8 +86,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n                 if let ExprKind::Call(ref func_expr, _) = expr.kind;\n                 if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.kind;\n                 if let Some(path_def_id) = path.res.opt_def_id();\n-                if match_def_path(self.lcx, path_def_id, &BEGIN_PANIC) ||\n-                    match_def_path(self.lcx, path_def_id, &BEGIN_PANIC_FMT);\n+                if match_panic_def_id(self.lcx, path_def_id);\n                 if is_expn_of(expr.span, \"unreachable\").is_none();\n                 then {\n                     self.result.push(expr.span);"}, {"sha": "ed7f3b9293dbf856904e597ba09e7e16012fa396", "filename": "src/tools/clippy/clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,8 +1,4 @@\n-use crate::utils::{\n-    fn_has_unsatisfiable_preds, match_def_path,\n-    paths::{BEGIN_PANIC, BEGIN_PANIC_FMT},\n-    snippet_opt, span_lint_and_then,\n-};\n+use crate::utils::{fn_has_unsatisfiable_preds, match_panic_def_id, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -109,8 +105,7 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             if_chain! {\n                 if let ExprKind::Path(qpath) = &expr.kind;\n                 if let Some(path_def_id) = cx.qpath_res(qpath, expr.hir_id).opt_def_id();\n-                if match_def_path(cx, path_def_id, &BEGIN_PANIC) ||\n-                    match_def_path(cx, path_def_id, &BEGIN_PANIC_FMT);\n+                if match_panic_def_id(cx, path_def_id);\n                 then { }\n                 else {\n                     lint(cx, expr.span, expr.span, LINT_RETURN)"}, {"sha": "3d888fe73257322453792f913648a410f0c51912", "filename": "src/tools/clippy/clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, paths, span_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, span_lint};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n@@ -93,27 +93,27 @@ declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED, UNREACHAB\n \n impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Block(ref block, _) = expr.kind;\n-            if let Some(ref ex) = block.expr;\n-            if let Some(params) = match_function_call(cx, ex, &paths::BEGIN_PANIC)\n-                .or_else(|| match_function_call(cx, ex, &paths::BEGIN_PANIC_FMT));\n-            then {\n-                let span = get_outer_span(expr);\n-                if is_expn_of(expr.span, \"unimplemented\").is_some() {\n-                    span_lint(cx, UNIMPLEMENTED, span,\n-                              \"`unimplemented` should not be present in production code\");\n-                } else if is_expn_of(expr.span, \"todo\").is_some() {\n-                    span_lint(cx, TODO, span,\n-                              \"`todo` should not be present in production code\");\n-                } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n-                    span_lint(cx, UNREACHABLE, span,\n-                              \"`unreachable` should not be present in production code\");\n-                } else if is_expn_of(expr.span, \"panic\").is_some() {\n-                    span_lint(cx, PANIC, span,\n-                              \"`panic` should not be present in production code\");\n-                    match_panic(params, expr, cx);\n-                }\n+        if let Some(params) = match_panic_call(cx, expr) {\n+            let span = get_outer_span(expr);\n+            if is_expn_of(expr.span, \"unimplemented\").is_some() {\n+                span_lint(\n+                    cx,\n+                    UNIMPLEMENTED,\n+                    span,\n+                    \"`unimplemented` should not be present in production code\",\n+                );\n+            } else if is_expn_of(expr.span, \"todo\").is_some() {\n+                span_lint(cx, TODO, span, \"`todo` should not be present in production code\");\n+            } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n+                span_lint(\n+                    cx,\n+                    UNREACHABLE,\n+                    span,\n+                    \"`unreachable` should not be present in production code\",\n+                );\n+            } else if is_expn_of(expr.span, \"panic\").is_some() {\n+                span_lint(cx, PANIC, span, \"`panic` should not be present in production code\");\n+                match_panic(params, expr, cx);\n             }\n         }\n     }"}, {"sha": "270fdc9bf462f6750621c2d83929528d7e933f30", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1196,7 +1196,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n /// Usage:\n ///\n /// ```rust,ignore\n-/// if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+/// if let Some(args) = match_function_call(cx, cmp_max_call, &paths::CMP_MAX);\n /// ```\n pub fn match_function_call<'tcx>(\n     cx: &LateContext<'tcx>,\n@@ -1231,6 +1231,24 @@ pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -\n     cx.match_def_path(did, &syms)\n }\n \n+pub fn match_panic_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx [Expr<'tcx>]> {\n+    match_function_call(cx, expr, &paths::BEGIN_PANIC)\n+        .or_else(|| match_function_call(cx, expr, &paths::BEGIN_PANIC_FMT))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANIC_ANY))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANICKING_PANIC))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANICKING_PANIC_FMT))\n+        .or_else(|| match_function_call(cx, expr, &paths::PANICKING_PANIC_STR))\n+}\n+\n+pub fn match_panic_def_id(cx: &LateContext<'_>, did: DefId) -> bool {\n+    match_def_path(cx, did, &paths::BEGIN_PANIC)\n+        || match_def_path(cx, did, &paths::BEGIN_PANIC_FMT)\n+        || match_def_path(cx, did, &paths::PANIC_ANY)\n+        || match_def_path(cx, did, &paths::PANICKING_PANIC)\n+        || match_def_path(cx, did, &paths::PANICKING_PANIC_FMT)\n+        || match_def_path(cx, did, &paths::PANICKING_PANIC_STR)\n+}\n+\n /// Returns the list of condition expressions and the list of blocks in a\n /// sequence of `if/else`.\n /// E.g., this returns `([a, b], [c, d, e])` for the expression"}, {"sha": "8f5fbfd9f846a5706a3a3e2cec2a5eb98c5854a3", "filename": "src/tools/clippy/clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -8,8 +8,8 @@ pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n-pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n-pub const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n+pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n+pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BOX: [&str; 3] = [\"alloc\", \"boxed\", \"Box\"];\n@@ -78,6 +78,10 @@ pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING: [&str; 4] = [\"std\", \"ffi\", \"os_str\", \"OsString\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n+pub(super) const PANICKING_PANIC: [&str; 3] = [\"core\", \"panicking\", \"panic\"];\n+pub(super) const PANICKING_PANIC_FMT: [&str; 3] = [\"core\", \"panicking\", \"panic_fmt\"];\n+pub(super) const PANICKING_PANIC_STR: [&str; 3] = [\"core\", \"panicking\", \"panic_str\"];\n+pub(super) const PANIC_ANY: [&str; 3] = [\"std\", \"panic\", \"panic_any\"];\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 2] = [\"parking_lot\", \"MutexGuard\"];\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWriteGuard\"];"}, {"sha": "77fcb8dfd02fd7460fd097e3c06570cb3cb41cc8", "filename": "src/tools/clippy/tests/ui/panicking_macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.rs?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,6 +1,8 @@\n #![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n #![allow(clippy::assertions_on_constants)]\n \n+extern crate core;\n+\n fn panic() {\n     let a = 2;\n     panic!();\n@@ -33,9 +35,18 @@ fn unreachable() {\n     let b = a + 2;\n }\n \n+fn core_versions() {\n+    use core::{panic, todo, unimplemented, unreachable};\n+    panic!();\n+    todo!();\n+    unimplemented!();\n+    unreachable!();\n+}\n+\n fn main() {\n     panic();\n     todo();\n     unimplemented();\n     unreachable();\n+    core_versions();\n }"}, {"sha": "83234c0ed92cc4fc93a53e30d2e22aa1f36d9bdb", "filename": "src/tools/clippy/tests/ui/panicking_macros.stderr", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20fbe22a64dcf0e2acbd80dbda50f492f2164760/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpanicking_macros.stderr?ref=20fbe22a64dcf0e2acbd80dbda50f492f2164760", "patch": "@@ -1,88 +1,112 @@\n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:6:5\n+  --> $DIR/panicking_macros.rs:8:5\n    |\n LL |     panic!();\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:7:5\n+  --> $DIR/panicking_macros.rs:9:5\n    |\n LL |     panic!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n-  --> $DIR/panicking_macros.rs:8:5\n+  --> $DIR/panicking_macros.rs:10:5\n    |\n LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:14:5\n+  --> $DIR/panicking_macros.rs:16:5\n    |\n LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:15:5\n+  --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^\n \n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:16:5\n+  --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:22:5\n+  --> $DIR/panicking_macros.rs:24:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:23:5\n+  --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:24:5\n+  --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `unreachable` should not be present in production code\n-  --> $DIR/panicking_macros.rs:30:5\n+  --> $DIR/panicking_macros.rs:32:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n \n error: `unreachable` should not be present in production code\n-  --> $DIR/panicking_macros.rs:31:5\n+  --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unreachable` should not be present in production code\n-  --> $DIR/panicking_macros.rs:32:5\n+  --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:40:5\n+   |\n+LL |     panic!();\n+   |     ^^^^^^^^^\n+\n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:41:5\n+   |\n+LL |     todo!();\n+   |     ^^^^^^^^\n+\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panicking_macros.rs:42:5\n+   |\n+LL |     unimplemented!();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:43:5\n+   |\n+LL |     unreachable!();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n "}]}