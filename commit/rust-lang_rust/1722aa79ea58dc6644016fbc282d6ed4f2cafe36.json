{"sha": "1722aa79ea58dc6644016fbc282d6ed4f2cafe36", "node_id": "C_kwDOAAsO6NoAKDE3MjJhYTc5ZWE1OGRjNjY0NDAxNmZiYzI4MmQ2ZWQ0ZjJjYWZlMzY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-31T12:11:58Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-31T14:07:15Z"}, "message": "Remove some dead code", "tree": {"sha": "71a97693df5289840490dd7465da9fa41898f5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a97693df5289840490dd7465da9fa41898f5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1722aa79ea58dc6644016fbc282d6ed4f2cafe36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1722aa79ea58dc6644016fbc282d6ed4f2cafe36", "html_url": "https://github.com/rust-lang/rust/commit/1722aa79ea58dc6644016fbc282d6ed4f2cafe36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1722aa79ea58dc6644016fbc282d6ed4f2cafe36/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca87073f68b61a1ccc0b2345a173d18067a2056", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca87073f68b61a1ccc0b2345a173d18067a2056", "html_url": "https://github.com/rust-lang/rust/commit/4ca87073f68b61a1ccc0b2345a173d18067a2056"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "481befa3618293f8b618ef64a41b3253fbb51ad4", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1722aa79ea58dc6644016fbc282d6ed4f2cafe36/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1722aa79ea58dc6644016fbc282d6ed4f2cafe36/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=1722aa79ea58dc6644016fbc282d6ed4f2cafe36", "patch": "@@ -369,13 +369,6 @@ impl<'tcx> ConstToPat<'tcx> {\n                 suffix: Box::new([]),\n             },\n             ty::Ref(_, pointee_ty, ..) => match *pointee_ty.kind() {\n-                // These are not allowed and will error elsewhere anyway.\n-                ty::Dynamic(..) => {\n-                    self.saw_const_match_error.set(true);\n-                    let err = InvalidPattern { span, non_sm_ty: ty };\n-                    tcx.sess.emit_err(err);\n-                    PatKind::Wild\n-                }\n                 // `&str` is represented as a valtree, let's keep using this\n                 // optimization for now.\n                 ty::Str => PatKind::Constant { value: mir::ConstantKind::Ty(tcx.mk_const(cv, ty)) },\n@@ -467,6 +460,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                         let err = UnsizedPattern { span, non_sm_ty: *pointee_ty };\n                         tcx.sess.emit_err(err);\n \n+                        // FIXME: introduce PatKind::Error to silence follow up diagnostics due to unreachable patterns.\n                         PatKind::Wild\n                     } else {\n                         let old = self.behind_reference.replace(true);"}, {"sha": "5317e13de2507f41d6d1416701698239f9427b03", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1722aa79ea58dc6644016fbc282d6ed4f2cafe36/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1722aa79ea58dc6644016fbc282d6ed4f2cafe36/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=1722aa79ea58dc6644016fbc282d6ed4f2cafe36", "patch": "@@ -53,11 +53,11 @@ use smallvec::{smallvec, SmallVec};\n use rustc_data_structures::captures::Captures;\n use rustc_hir::{HirId, RangeEnd};\n use rustc_index::Idx;\n+use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::mir;\n use rustc_middle::thir::{FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Ty, TyCtxt, VariantDef};\n-use rustc_middle::{middle::stability::EvalResult, mir::interpret::ConstValue};\n use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{FieldIdx, Integer, Size, VariantIdx, FIRST_VARIANT};\n@@ -142,13 +142,6 @@ impl IntRange {\n         let ty = value.ty();\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, ty) {\n             let val = match value {\n-                mir::ConstantKind::Val(ConstValue::Scalar(scalar), _) => {\n-                    // For this specific pattern we can skip a lot of effort and go\n-                    // straight to the result, after doing a bit of checking. (We\n-                    // could remove this branch and just fall through, which\n-                    // is more general but much slower.)\n-                    scalar.to_bits_or_ptr_internal(target_size).unwrap().left()\n-                }\n                 mir::ConstantKind::Ty(c) if let ty::ConstKind::Value(valtree) = c.kind() => {\n                     valtree.unwrap_leaf().to_bits(target_size).ok()\n                 },"}]}