{"sha": "713da45906321233e8cc66aac200c2517162d3a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxM2RhNDU5MDYzMjEyMzNlOGNjNjZhYWMyMDBjMjUxNzE2MmQzYTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-17T18:30:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-17T18:30:32Z"}, "message": "apply rustfmt", "tree": {"sha": "a2d404f725706e4a9e6d8fa9ec7ec347a2990f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d404f725706e4a9e6d8fa9ec7ec347a2990f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/713da45906321233e8cc66aac200c2517162d3a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYfmLIAAoJEFbW7qD8Z6xGsgAP/R4aye77y6443wT4/IkNoO3z\nRmacw1fa+NosC73rgManDd0J+1ylOxu41d2qpajPoh4CGVkLQCLONjQ6Zgtw4nZK\nXgR/KsHuLQTD8gq/5IwzhDne40YXrXdYIO6z+jajUCxMrvQON6QMgMwCpJ4wwpaE\nX2+2e4kkT8VwsOhLeM6pspBr0Qg/+AgsHMH5+wgKvCsMiaCCSIh7yM+ye5Cz3BDv\n28XcwIQmxf66A2TLuL77zqp9Kj/RGQBsNS6uyst0ZH2wY4jjtiXRuURV6eE6a7Yt\n1QjC6+uNYRZ9hxBMAtiluLau2g99ISR0hjEzJBlV3TMl77bNaHEmToKi5axUUlhL\nsHrzzjO8wXKc4xAP7e2qnBBEX1Qor9rjUQKK6Isq3VWjqw+/ZrIPa5gJHTotLCjF\nLl2+AEJqkVLhQzNGOVtwMPcRnTYn/BCLej+X/fec1Z+qqJQN3carFJkzHnm/OeDK\nXhDCEpwRBb4URQRI/bKRDcJUtCxre67FyNiWAJ4iMteLDWS5ZvwW03z0VYn+d84I\n6cLC+YKUW8K/a/aY5qs3mA4FZpu3oELhkueyJ0jDDf3hnrtFH+4G3m0xFi00Uf+n\npj4wYy29QJwjALLTkcjR2jNzL4ObTaZ4oEQg976ulEdWp0QgzQ4ix9Mil0ZXPA0A\ndqYYHoXj1000I+/Yfndy\n=Xfeg\n-----END PGP SIGNATURE-----", "payload": "tree a2d404f725706e4a9e6d8fa9ec7ec347a2990f89\nparent 7b836dd27c844383a3ee4834e8f52378bfd2d0f1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484677832 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484677832 +0100\n\napply rustfmt"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/713da45906321233e8cc66aac200c2517162d3a2", "html_url": "https://github.com/rust-lang/rust/commit/713da45906321233e8cc66aac200c2517162d3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/713da45906321233e8cc66aac200c2517162d3a2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b836dd27c844383a3ee4834e8f52378bfd2d0f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b836dd27c844383a3ee4834e8f52378bfd2d0f1", "html_url": "https://github.com/rust-lang/rust/commit/7b836dd27c844383a3ee4834e8f52378bfd2d0f1"}], "stats": {"total": 230, "additions": 101, "deletions": 129}, "files": [{"sha": "977a1d43d40397c7f15619898bfa706ad424755d", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -94,14 +94,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                                MISREFACTORED_ASSIGN_OP,\n                                                expr.span,\n                                                \"variable appears on both sides of an assignment operation\",\n-                                               |db| {\n-                                if let (Some(snip_a), Some(snip_r)) =\n-                                    (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span)) {\n-                                    db.span_suggestion(expr.span,\n+                                               |db| if let (Some(snip_a), Some(snip_r)) =\n+                                                   (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span)) {\n+                                                   db.span_suggestion(expr.span,\n                                                        \"replace it with\",\n                                                        format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r));\n-                                }\n-                            });\n+                                               });\n                         };\n                         // lhs op= l op r\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, l) {\n@@ -177,14 +175,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                                ASSIGN_OP_PATTERN,\n                                                expr.span,\n                                                \"manual implementation of an assign operation\",\n-                                               |db| {\n-                                if let (Some(snip_a), Some(snip_r)) =\n-                                    (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span)) {\n-                                    db.span_suggestion(expr.span,\n+                                               |db| if let (Some(snip_a), Some(snip_r)) =\n+                                                   (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span)) {\n+                                                   db.span_suggestion(expr.span,\n                                                        \"replace it with\",\n                                                        format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r));\n-                                }\n-                            });\n+                                               });\n                         }\n                     };\n                     // a = a op b"}, {"sha": "06e8e918264255be57f780d8672948f7c94bf776", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -240,7 +240,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n     match lit.node {\n         ExprLit(ref lit_ptr) => {\n             if let LitKind::Int(value, _) = lit_ptr.node {\n-                Some(value) //TODO: Handle sign\n+                Some(value) // TODO: Handle sign\n             } else {\n                 None\n             }"}, {"sha": "7ab3af17f4b8c8071ee147c3094026d3ddd0067b", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -384,11 +384,9 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                    NONMINIMAL_BOOL,\n                                    e.span,\n                                    \"this boolean expression can be simplified\",\n-                                   |db| {\n-                    for suggestion in &improvements {\n-                        db.span_suggestion(e.span, \"try\", suggest(self.cx, suggestion, &h2q.terminals));\n-                    }\n-                });\n+                                   |db| for suggestion in &improvements {\n+                                       db.span_suggestion(e.span, \"try\", suggest(self.cx, suggestion, &h2q.terminals));\n+                                   });\n             }\n         }\n     }"}, {"sha": "7ea6c7e4b21b6b537e1e0ecc98d0675fbfdb5b9d", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -270,12 +270,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 }\n             },\n             ExprUnary(op, ref operand) => {\n-                self.expr(operand).and_then(|o| {\n-                    match op {\n-                        UnNot => constant_not(o),\n-                        UnNeg => constant_negate(o),\n-                        UnDeref => Some(o),\n-                    }\n+                self.expr(operand).and_then(|o| match op {\n+                    UnNot => constant_not(o),\n+                    UnNeg => constant_negate(o),\n+                    UnDeref => Some(o),\n                 })\n             },\n             ExprBinary(op, ref left, ref right) => self.binop(op, left, right),"}, {"sha": "cf5b0208426e7dc1d64f132257747be44f88a130", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -173,8 +173,6 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                            EXPL_IMPL_CLONE_ON_COPY,\n                            item.span,\n                            \"you are implementing `Clone` explicitly on a `Copy` type\",\n-                           |db| {\n-            db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n-        });\n+                           |db| { db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\"); });\n     }\n }"}, {"sha": "72a4b3458fb1e36a0d4cf48efeaa1b49c11c5402", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -305,7 +305,8 @@ fn check_doc(cx: &EarlyContext, valid_idents: &[String], docs: &[(String, Span)]\n                             continue;\n                         }\n \n-                        try!(parser.jump_to('`')); // not a code block, just inline code\n+                        // not a code block, just inline code\n+                        try!(parser.jump_to('`'));\n                     },\n                     '~' => {\n                         if try!(check_block!(parser, '~', new_line)) {"}, {"sha": "2e9f6af5bd819ee1e77aeb24046e8a468a779212", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -206,13 +206,11 @@ impl<'a, 'tcx: 'a> EscapeDelegate<'a, 'tcx> {\n         // overflows.\n         match ty.sty {\n             ty::TyBox(inner) => {\n-                self.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n-                    if let Ok(layout) = inner.layout(&infcx) {\n-                        let size = layout.size(&self.target);\n-                        size.bytes() > self.too_large_for_stack\n-                    } else {\n-                        false\n-                    }\n+                self.tcx.infer_ctxt((), Reveal::All).enter(|infcx| if let Ok(layout) = inner.layout(&infcx) {\n+                    let size = layout.size(&self.target);\n+                    size.bytes() > self.too_large_for_stack\n+                } else {\n+                    false\n                 })\n             },\n             _ => false,"}, {"sha": "769ff99d550d9859f65acadc8ac3dd8c6eefe883", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -91,11 +91,13 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n                     return;\n                 }\n             }\n-            span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n-                if let Some(snippet) = snippet_opt(cx, caller.span) {\n-                    db.span_suggestion(expr.span, \"remove closure as shown:\", snippet);\n-                }\n-            });\n+            span_lint_and_then(cx,\n+                               REDUNDANT_CLOSURE,\n+                               expr.span,\n+                               \"redundant closure found\",\n+                               |db| if let Some(snippet) = snippet_opt(cx, caller.span) {\n+                                   db.span_suggestion(expr.span, \"remove closure as shown:\", snippet);\n+                               });\n         }\n     }\n }"}, {"sha": "e77251e0321e727ea7a47b7f0d3b124363297215", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -393,15 +393,13 @@ type TypedRanges = Vec<SpannedRange<ConstInt>>;\n /// `Uint` and `Int` probably don't make sense.\n fn type_ranges(ranges: &[SpannedRange<ConstVal>]) -> TypedRanges {\n     ranges.iter()\n-        .filter_map(|range| {\n-            if let (ConstVal::Integral(start), ConstVal::Integral(end)) = range.node {\n-                Some(SpannedRange {\n-                    span: range.span,\n-                    node: (start, end),\n-                })\n-            } else {\n-                None\n-            }\n+        .filter_map(|range| if let (ConstVal::Integral(start), ConstVal::Integral(end)) = range.node {\n+            Some(SpannedRange {\n+                span: range.span,\n+                node: (start, end),\n+            })\n+        } else {\n+            None\n         })\n         .collect()\n }"}, {"sha": "c6426abd65965cfd8e7273939cd8e612a43f6c2e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -1213,9 +1213,7 @@ fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr)\n                                SINGLE_CHAR_PATTERN,\n                                arg.span,\n                                \"single-character string constant used as pattern\",\n-                               |db| {\n-                db.span_suggestion(expr.span, \"try using a char instead:\", hint);\n-            });\n+                               |db| { db.span_suggestion(expr.span, \"try using a char instead:\", hint); });\n         }\n     }\n }"}, {"sha": "777ded8c2da89d48eff12e5532194dc3524d31e0", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -351,13 +351,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n fn check_nan(cx: &LateContext, path: &Path, span: Span) {\n-    path.segments.last().map(|seg| {\n-        if &*seg.name.as_str() == \"NAN\" {\n-            span_lint(cx,\n-                      CMP_NAN,\n-                      span,\n-                      \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\");\n-        }\n+    path.segments.last().map(|seg| if &*seg.name.as_str() == \"NAN\" {\n+        span_lint(cx,\n+                  CMP_NAN,\n+                  span,\n+                  \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\");\n     });\n }\n "}, {"sha": "0e4b0db3311056cf92510958af5e6009b9ef2a24", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -276,12 +276,10 @@ impl EarlyLintPass for MiscEarly {\n                                            REDUNDANT_CLOSURE_CALL,\n                                            expr.span,\n                                            \"Try not to call a closure in the expression where it is declared.\",\n-                                           |db| {\n-                            if decl.inputs.is_empty() {\n-                                let hint = snippet(cx, block.span, \"..\").into_owned();\n-                                db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n-                            }\n-                        });\n+                                           |db| if decl.inputs.is_empty() {\n+                                               let hint = snippet(cx, block.span, \"..\").into_owned();\n+                                               db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n+                                           });\n                     }\n                 }\n             },"}, {"sha": "c9ade60c339ae7e4bc70f1992d9f783a23c97ff5", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -74,9 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                                    NEEDLESS_BOOL,\n                                    e.span,\n                                    \"this if-then-else expression returns a bool literal\",\n-                                   |db| {\n-                    db.span_suggestion(e.span, \"you can reduce it to\", hint);\n-                });\n+                                   |db| { db.span_suggestion(e.span, \"you can reduce it to\", hint); });\n             };\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                 (RetBool(true), RetBool(true)) |\n@@ -123,19 +121,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n-                                       |db| {\n-                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n-                    });\n+                                       |db| { db.span_suggestion(e.span, \"try simplifying it as shown:\", hint); });\n                 },\n                 (Other, Bool(true)) => {\n                     let hint = snippet(cx, left_side.span, \"..\").into_owned();\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n-                                       |db| {\n-                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n-                    });\n+                                       |db| { db.span_suggestion(e.span, \"try simplifying it as shown:\", hint); });\n                 },\n                 (Bool(false), Other) => {\n                     let hint = Sugg::hir(cx, right_side, \"..\");"}, {"sha": "f53fcb60706eb38dbdc9f2e21d07537acbb0d6c9", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -120,9 +120,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         return;\n                     }\n                 }\n-                span_lint_and_then(cx, UNNECESSARY_OPERATION, stmt.span, \"statement can be reduced\", |db| {\n-                    db.span_suggestion(stmt.span, \"replace it with\", snippet);\n-                });\n+                span_lint_and_then(cx,\n+                                   UNNECESSARY_OPERATION,\n+                                   stmt.span,\n+                                   \"statement can be reduced\",\n+                                   |db| { db.span_suggestion(stmt.span, \"replace it with\", snippet); });\n             }\n         }\n     }"}, {"sha": "a06af1ead4c2b09bb8ec11aca54234594f649b09", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -74,8 +74,8 @@ fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<(OpenOp\n                         if lit { Argument::True } else { Argument::False }\n                     } else {\n                         return; // The function is called with a literal\n-                                // which is not a boolean literal. This is theoretically\n-                                // possible, but not very likely.\n+                        // which is not a boolean literal. This is theoretically\n+                        // possible, but not very likely.\n                     }\n                 },\n                 _ => Argument::Unknown,"}, {"sha": "403ab64f4408284d819f48e394c749bf17c45572", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -92,11 +92,13 @@ impl ReturnPass {\n         if in_external_macro(cx, inner_span) {\n             return;\n         }\n-        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n-            if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion(ret_span, \"remove `return` as shown:\", snippet);\n-            }\n-        });\n+        span_lint_and_then(cx,\n+                           NEEDLESS_RETURN,\n+                           ret_span,\n+                           \"unneeded return statement\",\n+                           |db| if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                               db.span_suggestion(ret_span, \"remove `return` as shown:\", snippet);\n+                           });\n     }\n \n     // Check for \"let x = EXPR; x\""}, {"sha": "f84e639d78d72bf8dd85e663d626c642e4b32fc5", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -250,9 +250,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                                &format!(\"`{}` is shadowed by itself in `{}`\",\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n-                               |db| {\n-                db.span_note(prev_span, \"previous binding is here\");\n-            });\n+                               |db| { db.span_note(prev_span, \"previous binding is here\"); });\n         } else if contains_self(cx, name, expr) {\n             span_lint_and_then(cx,\n                                SHADOW_REUSE,\n@@ -282,9 +280,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                            SHADOW_UNRELATED,\n                            span,\n                            &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n-                           |db| {\n-            db.span_note(prev_span, \"previous binding is here\");\n-        });\n+                           |db| { db.span_note(prev_span, \"previous binding is here\"); });\n     }\n }\n "}, {"sha": "2aef04e84c6efb171948cd311c36c38dde787b0d", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -106,29 +106,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                USELESS_TRANSMUTE,\n                                                e.span,\n                                                \"transmute from a reference to a pointer\",\n-                                               |db| {\n-                                if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                    let sugg = if ptr_ty == rty {\n-                                        arg.as_ty(to_ty)\n-                                    } else {\n-                                        arg.as_ty(cx.tcx.mk_ptr(rty)).as_ty(to_ty)\n-                                    };\n+                                               |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                                   let sugg = if ptr_ty == rty {\n+                                                       arg.as_ty(to_ty)\n+                                                   } else {\n+                                                       arg.as_ty(cx.tcx.mk_ptr(rty)).as_ty(to_ty)\n+                                                   };\n \n-                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n-                                }\n-                            })\n+                                                   db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                               })\n                         },\n                         (&ty::TyInt(_), &TyRawPtr(_)) |\n                         (&ty::TyUint(_), &TyRawPtr(_)) => {\n                             span_lint_and_then(cx,\n                                                USELESS_TRANSMUTE,\n                                                e.span,\n                                                \"transmute from an integer to a pointer\",\n-                                               |db| {\n-                                if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                    db.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()).to_string());\n-                                }\n-                            })\n+                                               |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                                   db.span_suggestion(e.span,\n+                                                                      \"try\",\n+                                                                      arg.as_ty(&to_ty.to_string()).to_string());\n+                                               })\n                         },\n                         (&ty::TyFloat(_), &TyRef(..)) |\n                         (&ty::TyFloat(_), &TyRawPtr(_)) |"}, {"sha": "87cf3c5442973df567424c4aec3f45abb8ea882e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -445,12 +445,10 @@ fn trim_multiline_inner(s: Cow<str>, ignore_first: bool, ch: char) -> Cow<str> {\n     if x > 0 {\n         Cow::Owned(s.lines()\n             .enumerate()\n-            .map(|(i, l)| {\n-                if (ignore_first && i == 0) || l.is_empty() {\n-                    l\n-                } else {\n-                    l.split_at(x).1\n-                }\n+            .map(|(i, l)| if (ignore_first && i == 0) || l.is_empty() {\n+                l\n+            } else {\n+                l.split_at(x).1\n             })\n             .collect::<Vec<_>>()\n             .join(\"\\n\"))\n@@ -467,12 +465,10 @@ pub fn get_parent_expr<'c>(cx: &'c LateContext, e: &Expr) -> Option<&'c Expr> {\n     if node_id == parent_id {\n         return None;\n     }\n-    map.find(parent_id).and_then(|node| {\n-        if let Node::NodeExpr(parent) = node {\n-            Some(parent)\n-        } else {\n-            None\n-        }\n+    map.find(parent_id).and_then(|node| if let Node::NodeExpr(parent) = node {\n+        Some(parent)\n+    } else {\n+        None\n     })\n }\n "}, {"sha": "46db4d803fe26cefe02ae900c535464f4c2fb98a", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -258,8 +258,9 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n     fn needs_paren(op: &AssocOp, other: &AssocOp, dir: Associativity) -> bool {\n         other.precedence() < op.precedence() ||\n         (other.precedence() == op.precedence() &&\n-         ((op != other && associativity(op) != dir) || (op == other && associativity(op) != Associativity::Both))) ||\n-        is_shift(op) && is_arith(other) || is_shift(other) && is_arith(op)\n+         ((op != other && associativity(op) != dir) ||\n+          (op == other && associativity(op) != Associativity::Both))) || is_shift(op) && is_arith(other) ||\n+        is_shift(other) && is_arith(op)\n     }\n \n     let lhs_paren = if let Sugg::BinOp(ref lop, _) = *lhs {\n@@ -433,13 +434,11 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n \n             let mut first = true;\n             let new_item = new_item.lines()\n-                .map(|l| {\n-                    if first {\n-                        first = false;\n-                        format!(\"{}\\n\", l)\n-                    } else {\n-                        format!(\"{}{}\\n\", indent, l)\n-                    }\n+                .map(|l| if first {\n+                    first = false;\n+                    format!(\"{}\\n\", l)\n+                } else {\n+                    format!(\"{}{}\\n\", indent, l)\n                 })\n                 .collect::<String>();\n "}, {"sha": "d518921b743bb93a9dc2d61e3dd6ea39c5aa0524", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713da45906321233e8cc66aac200c2517162d3a2/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=713da45906321233e8cc66aac200c2517162d3a2", "patch": "@@ -81,9 +81,11 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n         },\n     };\n \n-    span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n-        db.span_suggestion(span, \"you can use a slice directly\", snippet);\n-    });\n+    span_lint_and_then(cx,\n+                       USELESS_VEC,\n+                       span,\n+                       \"useless use of `vec!`\",\n+                       |db| { db.span_suggestion(span, \"you can use a slice directly\", snippet); });\n }\n \n /// Return the item type of the vector (ie. the `T` in `Vec<T>`)."}]}