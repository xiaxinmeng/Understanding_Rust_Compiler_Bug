{"sha": "90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzkzYzBmMTI2YTlkNWEwZmZhYjI5N2U5ZmVmOGJiYmVkNmFlNzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T05:37:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T07:28:49Z"}, "message": "extract parse_pat_deref", "tree": {"sha": "2da4de40c352de42efc04c4ac3a4b2f55b74c080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da4de40c352de42efc04c4ac3a4b2f55b74c080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "html_url": "https://github.com/rust-lang/rust/commit/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4af9d1ac25113362898ca598556db5eaa3d8f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4af9d1ac25113362898ca598556db5eaa3d8f31", "html_url": "https://github.com/rust-lang/rust/commit/a4af9d1ac25113362898ca598556db5eaa3d8f31"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "95678f9f7a1471efba3d4c1ce80b2f6247fb27aa", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "patch": "@@ -109,18 +109,7 @@ impl<'a> Parser<'a> {\n \n         let lo = self.token.span;\n         let pat = match self.token.kind {\n-            token::BinOp(token::And) | token::AndAnd => {\n-                // Parse &pat / &mut pat\n-                self.expect_and()?;\n-                let mutbl = self.parse_mutability();\n-                if let token::Lifetime(name) = self.token.kind {\n-                    let mut err = self.fatal(&format!(\"unexpected lifetime `{}` in pattern\", name));\n-                    err.span_label(self.token.span, \"unexpected lifetime\");\n-                    return Err(err);\n-                }\n-                let subpat = self.parse_pat_with_range_pat(false, expected)?;\n-                PatKind::Ref(subpat, mutbl)\n-            }\n+            token::BinOp(token::And) | token::AndAnd => self.parse_pat_deref(expected)?,\n             token::OpenDelim(token::Paren) => {\n                 // Parse a tuple or parenthesis pattern.\n                 let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n@@ -332,6 +321,21 @@ impl<'a> Parser<'a> {\n         Ok(pat)\n     }\n \n+    /// Parse `&pat` / `&mut pat`.\n+    fn parse_pat_deref(&mut self, expected: Option<&'static str>) -> PResult<'a, PatKind> {\n+        self.expect_and()?;\n+        let mutbl = self.parse_mutability();\n+\n+        if let token::Lifetime(name) = self.token.kind {\n+            let mut err = self.fatal(&format!(\"unexpected lifetime `{}` in pattern\", name));\n+            err.span_label(self.token.span, \"unexpected lifetime\");\n+            return Err(err);\n+        }\n+\n+        let subpat = self.parse_pat_with_range_pat(false, expected)?;\n+        Ok(PatKind::Ref(subpat, mutbl))\n+    }\n+\n     // Helper function to decide whether to parse as ident binding\n     // or to try to do something more complex like range patterns.\n     fn parse_as_ident(&mut self) -> bool {"}]}