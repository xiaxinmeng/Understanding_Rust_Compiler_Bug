{"sha": "45117c63884366ee82102a782a62a09fefff746b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTE3YzYzODg0MzY2ZWU4MjEwMmE3ODJhNjJhMDlmZWZmZjc0NmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-12T21:10:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-12T21:10:16Z"}, "message": "make various enums \"inherit\" from AdtDef", "tree": {"sha": "b66d9ca105e39b96b78bf7f3659d1858577a2c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66d9ca105e39b96b78bf7f3659d1858577a2c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45117c63884366ee82102a782a62a09fefff746b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45117c63884366ee82102a782a62a09fefff746b", "html_url": "https://github.com/rust-lang/rust/commit/45117c63884366ee82102a782a62a09fefff746b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45117c63884366ee82102a782a62a09fefff746b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "html_url": "https://github.com/rust-lang/rust/commit/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e"}], "stats": {"total": 277, "additions": 156, "deletions": 121}, "files": [{"sha": "56f2b7aa36d330a32de5ba44f5a5654973767e82", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -9,29 +9,9 @@ use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     type_ref::TypeRef,\n-    AsName, Crate, Enum, EnumVariant, FieldSource, HasSource, Name, Source, Struct, StructField,\n-    Union,\n+    AsName, Enum, EnumVariant, FieldSource, HasSource, Name, Source, Struct, StructField,\n };\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum AdtDef {\n-    Struct(Struct),\n-    Union(Union),\n-    Enum(Enum),\n-}\n-impl_froms!(AdtDef: Struct, Union, Enum);\n-\n-impl AdtDef {\n-    pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n-        match self {\n-            AdtDef::Struct(s) => s.module(db),\n-            AdtDef::Union(s) => s.module(db),\n-            AdtDef::Enum(e) => e.module(db),\n-        }\n-        .krate(db)\n-    }\n-}\n-\n impl Struct {\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.struct_data(self).variant_data.clone()"}, {"sha": "026753c9f617f2e4cd313fc039472c12b919d14c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -127,9 +127,7 @@ impl BuiltinType {\n pub enum ModuleDef {\n     Module(Module),\n     Function(Function),\n-    Struct(Struct),\n-    Union(Union),\n-    Enum(Enum),\n+    AdtDef(AdtDef),\n     // Can't be directly declared, but can be imported.\n     EnumVariant(EnumVariant),\n     Const(Const),\n@@ -141,9 +139,7 @@ pub enum ModuleDef {\n impl_froms!(\n     ModuleDef: Module,\n     Function,\n-    Struct,\n-    Union,\n-    Enum,\n+    AdtDef,\n     EnumVariant,\n     Const,\n     Static,\n@@ -152,6 +148,24 @@ impl_froms!(\n     BuiltinType\n );\n \n+impl From<Struct> for ModuleDef {\n+    fn from(it: Struct) -> ModuleDef {\n+        ModuleDef::AdtDef(AdtDef::Struct(it))\n+    }\n+}\n+\n+impl From<Enum> for ModuleDef {\n+    fn from(it: Enum) -> ModuleDef {\n+        ModuleDef::AdtDef(AdtDef::Enum(it))\n+    }\n+}\n+\n+impl From<Union> for ModuleDef {\n+    fn from(it: Union) -> ModuleDef {\n+        ModuleDef::AdtDef(AdtDef::Union(it))\n+    }\n+}\n+\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),\n     Module(ast::Module),\n@@ -500,6 +514,41 @@ impl EnumVariant {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AdtDef {\n+    Struct(Struct),\n+    Union(Union),\n+    Enum(Enum),\n+}\n+impl_froms!(AdtDef: Struct, Union, Enum);\n+\n+impl AdtDef {\n+    pub fn ty(self, db: &impl HirDatabase) -> Ty {\n+        match self {\n+            AdtDef::Struct(it) => it.ty(db),\n+            AdtDef::Union(it) => it.ty(db),\n+            AdtDef::Enum(it) => it.ty(db),\n+        }\n+    }\n+\n+    pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n+        match self {\n+            AdtDef::Struct(s) => s.module(db),\n+            AdtDef::Union(s) => s.module(db),\n+            AdtDef::Enum(e) => e.module(db),\n+        }\n+        .krate(db)\n+    }\n+\n+    pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n+        match self {\n+            AdtDef::Struct(it) => it.resolver(db),\n+            AdtDef::Union(it) => it.resolver(db),\n+            AdtDef::Enum(it) => it.resolver(db),\n+        }\n+    }\n+}\n+\n /// The defs which have a body.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum DefWithBody {"}, {"sha": "447b9264a42c2b311b2ae1b26d0fc7a9a4387b2c", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -4,14 +4,13 @@ use ra_syntax::ast;\n use rustc_hash::FxHashSet;\n \n use crate::{\n-    adt::AdtDef,\n     db::HirDatabase,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n     name,\n     path::{PathKind, PathSegment},\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Function, Name, Path,\n+    AdtDef, Function, Name, Path,\n };\n \n use super::{Expr, ExprId, RecordLitField};"}, {"sha": "0e89941f348b147016b8070fdc60402f0b9090ea", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -47,17 +47,33 @@ pub struct WherePredicate {\n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum GenericDef {\n     Function(Function),\n-    Struct(Struct),\n-    Union(Union),\n-    Enum(Enum),\n+    AdtDef(AdtDef),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n     ImplBlock(ImplBlock),\n     // enum variants cannot have generics themselves, but their parent enums\n     // can, and this makes some code easier to write\n     EnumVariant(EnumVariant),\n }\n-impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock, EnumVariant);\n+impl_froms!(GenericDef: Function, AdtDef, Trait, TypeAlias, ImplBlock, EnumVariant);\n+\n+impl From<Struct> for GenericDef {\n+    fn from(it: Struct) -> GenericDef {\n+        GenericDef::AdtDef(AdtDef::Struct(it))\n+    }\n+}\n+\n+impl From<Enum> for GenericDef {\n+    fn from(it: Enum) -> GenericDef {\n+        GenericDef::AdtDef(AdtDef::Enum(it))\n+    }\n+}\n+\n+impl From<Union> for GenericDef {\n+    fn from(it: Union) -> GenericDef {\n+        GenericDef::AdtDef(AdtDef::Union(it))\n+    }\n+}\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -69,20 +85,17 @@ impl GenericParams {\n             GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n             GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n             GenericDef::EnumVariant(it) => Some(it.parent_enum(db).into()),\n-            GenericDef::Struct(_)\n-            | GenericDef::Union(_)\n-            | GenericDef::Enum(_)\n-            | GenericDef::Trait(_) => None,\n+            GenericDef::AdtDef(_) | GenericDef::Trait(_) => None,\n             GenericDef::ImplBlock(_) => None,\n         };\n         generics.parent_params = parent.map(|p| db.generic_params(p));\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {\n             GenericDef::Function(it) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::Struct(it) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::Union(it) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::Enum(it) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::AdtDef(AdtDef::Struct(it)) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::AdtDef(AdtDef::Union(it)) => generics.fill(&it.source(db).ast, start),\n+            GenericDef::AdtDef(AdtDef::Enum(it)) => generics.fill(&it.source(db).ast, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.push(GenericParam { idx: start, name: SELF_TYPE, default: None });\n@@ -186,9 +199,7 @@ impl GenericDef {\n     pub(crate) fn resolver(&self, db: &impl HirDatabase) -> crate::Resolver {\n         match self {\n             GenericDef::Function(inner) => inner.resolver(db),\n-            GenericDef::Struct(inner) => inner.resolver(db),\n-            GenericDef::Union(inner) => inner.resolver(db),\n-            GenericDef::Enum(inner) => inner.resolver(db),\n+            GenericDef::AdtDef(adt) => adt.resolver(db),\n             GenericDef::Trait(inner) => inner.resolver(db),\n             GenericDef::TypeAlias(inner) => inner.resolver(db),\n             GenericDef::ImplBlock(inner) => inner.resolver(db),\n@@ -206,16 +217,6 @@ impl From<Container> for GenericDef {\n     }\n }\n \n-impl From<crate::adt::AdtDef> for GenericDef {\n-    fn from(adt: crate::adt::AdtDef) -> Self {\n-        match adt {\n-            AdtDef::Struct(s) => s.into(),\n-            AdtDef::Union(u) => u.into(),\n-            AdtDef::Enum(e) => e.into(),\n-        }\n-    }\n-}\n-\n pub trait HasGenericParams: Copy {\n     fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams>;\n }"}, {"sha": "87484d8926b77630d3aadc26114c7d5e789f0f48", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{ast::AttrsOwner, SmolStr};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    Crate, Enum, Function, HasSource, ImplBlock, Module, ModuleDef, Static, Struct, Trait,\n+    AdtDef, Crate, Enum, Function, HasSource, ImplBlock, Module, ModuleDef, Static, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -107,8 +107,12 @@ impl LangItems {\n                 ModuleDef::Trait(trait_) => {\n                     self.collect_lang_item(db, trait_, LangItemTarget::Trait)\n                 }\n-                ModuleDef::Enum(e) => self.collect_lang_item(db, e, LangItemTarget::Enum),\n-                ModuleDef::Struct(s) => self.collect_lang_item(db, s, LangItemTarget::Struct),\n+                ModuleDef::AdtDef(AdtDef::Enum(e)) => {\n+                    self.collect_lang_item(db, e, LangItemTarget::Enum)\n+                }\n+                ModuleDef::AdtDef(AdtDef::Struct(s)) => {\n+                    self.collect_lang_item(db, s, LangItemTarget::Struct)\n+                }\n                 ModuleDef::Function(f) => self.collect_lang_item(db, f, LangItemTarget::Function),\n                 ModuleDef::Static(s) => self.collect_lang_item(db, s, LangItemTarget::Static),\n                 _ => {}"}, {"sha": "2fe1a658ee4c1e3a09d25820ca97aff6feea2e33", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -57,7 +57,7 @@ use crate::{\n };\n \n pub use self::{\n-    adt::{AdtDef, VariantDef},\n+    adt::VariantDef,\n     either::Either,\n     expr::ExprScopes,\n     generics::{GenericParam, GenericParams, HasGenericParams},\n@@ -78,7 +78,7 @@ pub use self::{\n pub use self::code_model::{\n     docs::{DocDef, Docs, Documentation},\n     src::{HasBodySource, HasSource, Source},\n-    BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n+    AdtDef, BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n     EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef, ModuleSource,\n     Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "1efaad4bc4ec0353152087fed7d17094493a5a88", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -69,7 +69,8 @@ use crate::{\n     diagnostics::DiagnosticSink,\n     ids::MacroDefId,\n     nameres::diagnostics::DefDiagnostic,\n-    AstId, BuiltinType, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n+    AdtDef, AstId, BuiltinType, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path,\n+    PathKind, Trait,\n };\n \n pub(crate) use self::raw::{ImportSourceMap, RawItems};\n@@ -425,7 +426,7 @@ impl CrateDefMap {\n                         }\n                     }\n                 }\n-                ModuleDef::Enum(e) => {\n+                ModuleDef::AdtDef(AdtDef::Enum(e)) => {\n                     // enum variant\n                     tested_by!(can_import_enum_variant);\n                     match e.variant(db, &segment.name) {"}, {"sha": "ced1ebf1eb7bd0f009030bd83f9a273851a9fcf1", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -13,8 +13,8 @@ use crate::{\n         raw, Crate, CrateDefMap, CrateModuleId, ModuleData, ModuleDef, PerNs, ReachedFixedPoint,\n         Resolution, ResolveMode,\n     },\n-    AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, PathKind, Static,\n-    Struct, Trait, TypeAlias, Union,\n+    AdtDef, AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, PathKind,\n+    Static, Struct, Trait, TypeAlias, Union,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -314,7 +314,7 @@ where\n                             .push((module_id, import_id));\n                     }\n                 }\n-                Some(ModuleDef::Enum(e)) => {\n+                Some(ModuleDef::AdtDef(AdtDef::Enum(e))) => {\n                     tested_by!(glob_enum);\n                     // glob import from enum => just import all the variants\n                     let variants = e.variants(self.db);"}, {"sha": "25194511241971d1d380d16ecaf61997ca7be7a8", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     name::{Name, SELF_PARAM, SELF_TYPE},\n     nameres::{CrateDefMap, CrateModuleId, PerNs},\n     path::Path,\n-    Enum, MacroDef, ModuleDef, Struct, Trait,\n+    AdtDef, Enum, MacroDef, ModuleDef, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -143,7 +143,7 @@ impl Resolver {\n     ) -> Option<Struct> {\n         let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n         match res {\n-            Resolution::Def(ModuleDef::Struct(it)) => Some(it),\n+            Resolution::Def(ModuleDef::AdtDef(AdtDef::Struct(it))) => Some(it),\n             _ => None,\n         }\n     }\n@@ -152,7 +152,7 @@ impl Resolver {\n     pub(crate) fn resolve_known_enum(&self, db: &impl HirDatabase, path: &Path) -> Option<Enum> {\n         let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n         match res {\n-            Resolution::Def(ModuleDef::Enum(it)) => Some(it),\n+            Resolution::Def(ModuleDef::AdtDef(AdtDef::Enum(it))) => Some(it),\n             _ => None,\n         }\n     }"}, {"sha": "725eec8340e36e2d9224a41cb663a99ac8b0b2bd", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -668,7 +668,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // FIXME remove the duplication between here and `Ty::from_path`?\n         let substs = Ty::substs_from_path(self.db, resolver, path, def);\n         match def {\n-            TypableDef::Struct(s) => {\n+            TypableDef::AdtDef(AdtDef::Struct(s)) => {\n                 let ty = s.ty(self.db);\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(s.into()))\n@@ -678,10 +678,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::Union(_)\n+            TypableDef::AdtDef(AdtDef::Enum(_))\n+            | TypableDef::AdtDef(AdtDef::Union(_))\n             | TypableDef::TypeAlias(_)\n             | TypableDef::Function(_)\n-            | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n             | TypableDef::Static(_)\n             | TypableDef::BuiltinType(_) => (Ty::Unknown, None),"}, {"sha": "587dc12ee87bacb70c619659529b40a1ed03d321", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -172,9 +172,7 @@ impl Ty {\n     ) -> Substs {\n         let def_generic: Option<GenericDef> = match resolved {\n             TypableDef::Function(func) => Some(func.into()),\n-            TypableDef::Struct(s) => Some(s.into()),\n-            TypableDef::Union(u) => Some(u.into()),\n-            TypableDef::Enum(e) => Some(e.into()),\n+            TypableDef::AdtDef(adt) => Some(adt.into()),\n             TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n             TypableDef::TypeAlias(t) => Some(t.into()),\n             TypableDef::Const(_) | TypableDef::Static(_) | TypableDef::BuiltinType(_) => None,\n@@ -193,9 +191,7 @@ impl Ty {\n         let last = path.segments.last().expect(\"path should have at least one segment\");\n         let segment = match resolved {\n             TypableDef::Function(_)\n-            | TypableDef::Struct(_)\n-            | TypableDef::Union(_)\n-            | TypableDef::Enum(_)\n+            | TypableDef::AdtDef(_)\n             | TypableDef::Const(_)\n             | TypableDef::Static(_)\n             | TypableDef::TypeAlias(_)\n@@ -410,20 +406,20 @@ fn assoc_type_bindings_from_type_bound<'a>(\n pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace) -> Ty {\n     match (def, ns) {\n         (TypableDef::Function(f), Namespace::Values) => type_for_fn(db, f),\n-        (TypableDef::Struct(s), Namespace::Types) => type_for_adt(db, s),\n-        (TypableDef::Struct(s), Namespace::Values) => type_for_struct_constructor(db, s),\n-        (TypableDef::Enum(e), Namespace::Types) => type_for_adt(db, e),\n+        (TypableDef::AdtDef(AdtDef::Struct(s)), Namespace::Values) => {\n+            type_for_struct_constructor(db, s)\n+        }\n+        (TypableDef::AdtDef(adt), Namespace::Types) => type_for_adt(db, adt),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n-        (TypableDef::Union(u), Namespace::Types) => type_for_adt(db, u),\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n         (TypableDef::Static(c), Namespace::Values) => type_for_static(db, c),\n         (TypableDef::BuiltinType(t), Namespace::Types) => type_for_builtin(t),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n-        (TypableDef::Union(_), Namespace::Values) => Ty::Unknown,\n-        (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::AdtDef(AdtDef::Union(_)), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::AdtDef(AdtDef::Enum(_)), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::Const(_), Namespace::Types) => Ty::Unknown,\n@@ -608,34 +604,38 @@ fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum TypableDef {\n     Function(Function),\n-    Struct(Struct),\n-    Union(Union),\n-    Enum(Enum),\n+    AdtDef(AdtDef),\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n     Const(Const),\n     Static(Static),\n     BuiltinType(BuiltinType),\n }\n-impl_froms!(\n-    TypableDef: Function,\n-    Struct,\n-    Union,\n-    Enum,\n-    EnumVariant,\n-    TypeAlias,\n-    Const,\n-    Static,\n-    BuiltinType\n-);\n+impl_froms!(TypableDef: Function, AdtDef, EnumVariant, TypeAlias, Const, Static, BuiltinType);\n+\n+impl From<Struct> for TypableDef {\n+    fn from(it: Struct) -> TypableDef {\n+        TypableDef::AdtDef(AdtDef::Struct(it))\n+    }\n+}\n+\n+impl From<Enum> for TypableDef {\n+    fn from(it: Enum) -> TypableDef {\n+        TypableDef::AdtDef(AdtDef::Enum(it))\n+    }\n+}\n+\n+impl From<Union> for TypableDef {\n+    fn from(it: Union) -> TypableDef {\n+        TypableDef::AdtDef(AdtDef::Union(it))\n+    }\n+}\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n         let res = match def {\n             ModuleDef::Function(f) => f.into(),\n-            ModuleDef::Struct(s) => s.into(),\n-            ModuleDef::Union(u) => u.into(),\n-            ModuleDef::Enum(e) => e.into(),\n+            ModuleDef::AdtDef(adt) => adt.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n             ModuleDef::TypeAlias(t) => t.into(),\n             ModuleDef::Const(v) => v.into(),"}, {"sha": "df14f465a14bd80ac25fd2e00ebb0e48adb9203a", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Either, Resolution};\n+use hir::{AdtDef, Either, Resolution};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -37,19 +37,14 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 acc.add_resolution(ctx, name.to_string(), &res.def.map(hir::Resolution::Def));\n             }\n         }\n-        hir::ModuleDef::Enum(_)\n-        | hir::ModuleDef::Struct(_)\n-        | hir::ModuleDef::Union(_)\n-        | hir::ModuleDef::TypeAlias(_) => {\n-            if let hir::ModuleDef::Enum(e) = def {\n+        hir::ModuleDef::AdtDef(_) | hir::ModuleDef::TypeAlias(_) => {\n+            if let hir::ModuleDef::AdtDef(AdtDef::Enum(e)) = def {\n                 for variant in e.variants(ctx.db) {\n                     acc.add_enum_variant(ctx, variant);\n                 }\n             }\n             let ty = match def {\n-                hir::ModuleDef::Enum(e) => e.ty(ctx.db),\n-                hir::ModuleDef::Struct(s) => s.ty(ctx.db),\n-                hir::ModuleDef::Union(u) => u.ty(ctx.db),\n+                hir::ModuleDef::AdtDef(adt) => adt.ty(ctx.db),\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };"}, {"sha": "05db973e40e86b41700818a5e2b78d3affa62f2e", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -15,7 +15,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n             _ => continue,\n         };\n         match def {\n-            hir::ModuleDef::Enum(..)\n+            hir::ModuleDef::AdtDef(hir::AdtDef::Enum(..))\n             | hir::ModuleDef::EnumVariant(..)\n             | hir::ModuleDef::Const(..)\n             | hir::ModuleDef::Module(..) => (),"}, {"sha": "e9bf2b96d964faaa21805c8532d0b5e3669657c2", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -67,9 +67,15 @@ impl Completions {\n             Resolution::Def(Function(func)) => {\n                 return self.add_function_with_name(ctx, Some(local_name), *func);\n             }\n-            Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-            Resolution::Def(Union(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-            Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n+            Resolution::Def(AdtDef(hir::AdtDef::Struct(it))) => {\n+                (CompletionItemKind::Struct, it.docs(ctx.db))\n+            }\n+            Resolution::Def(AdtDef(hir::AdtDef::Union(it))) => {\n+                (CompletionItemKind::Struct, it.docs(ctx.db))\n+            }\n+            Resolution::Def(AdtDef(hir::AdtDef::Enum(it))) => {\n+                (CompletionItemKind::Enum, it.docs(ctx.db))\n+            }\n             Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n             Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n             Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),"}, {"sha": "b8085f07727c74e6293baef67d322c93f3949bd8", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -193,9 +193,7 @@ impl NavigationTarget {\n         let nav = match module_def {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n             hir::ModuleDef::Function(func) => NavigationTarget::from_def_source(db, func),\n-            hir::ModuleDef::Struct(it) => NavigationTarget::from_adt_def(db, it.into()),\n-            hir::ModuleDef::Enum(it) => NavigationTarget::from_adt_def(db, it.into()),\n-            hir::ModuleDef::Union(it) => NavigationTarget::from_adt_def(db, it.into()),\n+            hir::ModuleDef::AdtDef(it) => NavigationTarget::from_adt_def(db, it),\n             hir::ModuleDef::Const(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::Static(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::EnumVariant(it) => NavigationTarget::from_def_source(db, it),"}, {"sha": "f7b7cb8f8de96762957153fb0d02d029b55d54e9", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasSource, HirDisplay};\n+use hir::{AdtDef, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{\n@@ -129,9 +129,13 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                         }\n                     }\n                     hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Struct(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Union(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Enum(it) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::AdtDef(AdtDef::Struct(it)) => {\n+                        res.extend(from_def_source(db, it))\n+                    }\n+                    hir::ModuleDef::AdtDef(AdtDef::Union(it)) => {\n+                        res.extend(from_def_source(db, it))\n+                    }\n+                    hir::ModuleDef::AdtDef(AdtDef::Enum(it)) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),"}, {"sha": "ee7531d37dd876ed8b85e61fe9d4b40d5d85fba7", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45117c63884366ee82102a782a62a09fefff746b/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=45117c63884366ee82102a782a62a09fefff746b", "patch": "@@ -107,9 +107,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(AssocItem(hir::ImplItem::TypeAlias(_))) => \"type\",\n                         Some(Def(hir::ModuleDef::Module(_))) => \"module\",\n                         Some(Def(hir::ModuleDef::Function(_))) => \"function\",\n-                        Some(Def(hir::ModuleDef::Struct(_))) => \"type\",\n-                        Some(Def(hir::ModuleDef::Union(_))) => \"type\",\n-                        Some(Def(hir::ModuleDef::Enum(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::AdtDef(_))) => \"type\",\n                         Some(Def(hir::ModuleDef::EnumVariant(_))) => \"constant\",\n                         Some(Def(hir::ModuleDef::Const(_))) => \"constant\",\n                         Some(Def(hir::ModuleDef::Static(_))) => \"constant\","}]}