{"sha": "247a0184ff972f1205017185f6917a03b15e7be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0N2EwMTg0ZmY5NzJmMTIwNTAxNzE4NWY2OTE3YTAzYjE1ZTdiZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-18T17:29:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-18T17:29:58Z"}, "message": "Auto merge of #42738 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 7 pull requests\n\n- Successful merges: #42695, #42714, #42720, #42723, #42730, #42731, #42734\n- Failed merges: #42722", "tree": {"sha": "793deb872cd80120061280724c4d168d3b71d052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/793deb872cd80120061280724c4d168d3b71d052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247a0184ff972f1205017185f6917a03b15e7be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247a0184ff972f1205017185f6917a03b15e7be4", "html_url": "https://github.com/rust-lang/rust/commit/247a0184ff972f1205017185f6917a03b15e7be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247a0184ff972f1205017185f6917a03b15e7be4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28cc0c5a7b538452c7495b42b32e09b006c38b82", "url": "https://api.github.com/repos/rust-lang/rust/commits/28cc0c5a7b538452c7495b42b32e09b006c38b82", "html_url": "https://github.com/rust-lang/rust/commit/28cc0c5a7b538452c7495b42b32e09b006c38b82"}, {"sha": "3bed3bd146d3f306394da441fe4d34c724819e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bed3bd146d3f306394da441fe4d34c724819e53", "html_url": "https://github.com/rust-lang/rust/commit/3bed3bd146d3f306394da441fe4d34c724819e53"}], "stats": {"total": 362, "additions": 323, "deletions": 39}, "files": [{"sha": "61f46bfbe5bbf2f44c1a89e7679527751ea70a7d", "filename": "src/Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -251,6 +251,14 @@ dependencies = [\n  \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"collections\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc 0.0.0\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"compiler_builtins\"\n version = \"0.0.0\"\n@@ -1586,6 +1594,7 @@ dependencies = [\n  \"alloc_jemalloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n+ \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "f92e6f50eb3e2047cbaf8b3ab79f96ac307c169b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -550,6 +550,7 @@ pub fn rust_src(build: &Build) {\n         \"src/liballoc_jemalloc\",\n         \"src/liballoc_system\",\n         \"src/libbacktrace\",\n+        \"src/libcollections\",\n         \"src/libcompiler_builtins\",\n         \"src/libcore\",\n         \"src/liblibc\","}, {"sha": "30f631ca2df646d301e3c7fe562937c2817b67ce", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -254,7 +254,7 @@ pub fn std(build: &Build, stage: u32, target: &str) {\n     // for which docs must be built.\n     if !build.config.compiler_docs {\n         cargo.arg(\"--no-deps\");\n-        for krate in &[\"alloc\", \"core\", \"std\", \"std_unicode\"] {\n+        for krate in &[\"alloc\", \"collections\", \"core\", \"std\", \"std_unicode\"] {\n             cargo.arg(\"-p\").arg(krate);\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links."}, {"sha": "dc9dac73627880b864916fc24816c3a23fd185b5", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -242,11 +242,18 @@ Arguments:\n         let cwd = t!(env::current_dir());\n         let paths = matches.free[1..].iter().map(|p| cwd.join(p)).collect::<Vec<_>>();\n \n+        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n+            if fs::metadata(\"config.toml\").is_ok() {\n+                Some(PathBuf::from(\"config.toml\"))\n+            } else {\n+                None\n+            }\n+        });\n \n         // All subcommands can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {\n             let flags = Flags::parse(&[\"build\".to_string()]);\n-            let mut config = Config::default();\n+            let mut config = Config::parse(&flags.build, cfg_file.clone());\n             config.build = flags.build.clone();\n             let mut build = Build::new(flags, config);\n             metadata::build(&mut build);\n@@ -307,14 +314,6 @@ Arguments:\n         };\n \n \n-        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n-            if fs::metadata(\"config.toml\").is_ok() {\n-                Some(PathBuf::from(\"config.toml\"))\n-            } else {\n-                None\n-            }\n-        });\n-\n         let mut stage = matches.opt_str(\"stage\").map(|j| j.parse().unwrap());\n \n         if matches.opt_present(\"incremental\") {"}, {"sha": "78432b6a9659370cac1ae373770e795f0b8469b7", "filename": "src/doc/grammar.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -154,19 +154,19 @@ token : simple_token | ident | literal | symbol | whitespace token ;\n \n <p id=\"keyword-table-marker\"></p>\n \n-|          |          |          |          |         |\n-|----------|----------|----------|----------|---------|\n-| abstract | alignof  | as       | become   | box     |\n-| break    | const    | continue | crate    | do      |\n-| else     | enum     | extern   | false    | final   |\n-| fn       | for      | if       | impl     | in      |\n-| let      | loop     | macro    | match    | mod     |\n-| move     | mut      | offsetof | override | priv    |\n-| proc     | pub      | pure     | ref      | return  |\n-| Self     | self     | sizeof   | static   | struct  |\n-| super    | trait    | true     | type     | typeof  |\n-| unsafe   | unsized  | use      | virtual  | where   |\n-| while    | yield    |          |          |         |\n+|          |          |          |          |          |\n+|----------|----------|----------|----------|----------|\n+| _        | abstract | alignof  | as       | become   |\n+| box      | break    | const    | continue | crate    |\n+| do       | else     | enum     | extern   | false    |\n+| final    | fn       | for      | if       | impl     |\n+| in       | let      | loop     | macro    | match    |\n+| mod      | move     | mut      | offsetof | override |\n+| priv     | proc     | pub      | pure     | ref      |\n+| return   | Self     | self     | sizeof   | static   |\n+| struct   | super    | trait    | true     | type     |\n+| typeof   | unsafe   | unsized  | use      | virtual  |\n+| where    | while    | yield    |          |          |\n \n \n Each of these keywords has special meaning in its grammar, and all of them are"}, {"sha": "d7c368292115de3443d240922000229301324386", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -108,6 +108,7 @@\n     - [char_escape_debug](library-features/char-escape-debug.md)\n     - [coerce_unsized](library-features/coerce-unsized.md)\n     - [collection_placement](library-features/collection-placement.md)\n+    - [collections](library-features/collections.md)\n     - [collections_range](library-features/collections-range.md)\n     - [command_envs](library-features/command-envs.md)\n     - [compiler_builtins_lib](library-features/compiler-builtins-lib.md)"}, {"sha": "5c937833c9e26a4489893b4680a58285f3833a37", "filename": "src/doc/unstable-book/src/library-features/collections.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections.md", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcollections.md?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,5 @@\n+# `collections`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "800e36161d245b39f36c3e33e8c0bc1daaa91641", "filename": "src/libcollections/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibcollections%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibcollections%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2FCargo.toml?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"collections\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"collections\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+alloc = { path = \"../liballoc\" }\n+core = { path = \"../libcore\" }"}, {"sha": "de5d6df328cbd4fd7ca975e115c925b21c8b7fbe", "filename": "src/libcollections/lib.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"collections\"]\n+#![crate_type = \"rlib\"]\n+#![allow(unused_attributes)]\n+#![unstable(feature = \"collections\",\n+            reason = \"this library is unlikely to be stabilized in its current \\\n+                      form or name\",\n+            issue = \"27783\")]\n+#![rustc_deprecated(since = \"1.20.0\",\n+                    reason = \"collections moved to `alloc`\")]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n+       test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n+#![no_std]\n+#![needs_allocator]\n+#![deny(warnings)]\n+\n+#![feature(alloc)]\n+#![feature(collections_range)]\n+#![feature(macro_reexport)]\n+#![feature(needs_allocator)]\n+#![feature(staged_api)]\n+\n+//! Collection types\n+//!\n+//! See [`std::collections`](../std/collections/index.html) for a detailed\n+//! discussion of collections in Rust.\n+\n+#[macro_reexport(vec, format)]\n+extern crate alloc;\n+\n+pub use alloc::Bound;\n+\n+pub use alloc::binary_heap;\n+pub use alloc::borrow;\n+pub use alloc::fmt;\n+pub use alloc::linked_list;\n+pub use alloc::range;\n+pub use alloc::slice;\n+pub use alloc::str;\n+pub use alloc::string;\n+pub use alloc::vec;\n+pub use alloc::vec_deque;\n+\n+pub use alloc::btree_map;\n+pub use alloc::btree_set;\n+\n+#[doc(no_inline)]\n+pub use alloc::binary_heap::BinaryHeap;\n+#[doc(no_inline)]\n+pub use alloc::btree_map::BTreeMap;\n+#[doc(no_inline)]\n+pub use alloc::btree_set::BTreeSet;\n+#[doc(no_inline)]\n+pub use alloc::linked_list::LinkedList;\n+#[doc(no_inline)]\n+pub use alloc::vec_deque::VecDeque;\n+#[doc(no_inline)]\n+pub use alloc::string::String;\n+#[doc(no_inline)]\n+pub use alloc::vec::Vec;"}, {"sha": "5a007285e48735657bf07308064636051e87b3ea", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -618,7 +618,10 @@ impl<'a, 'b> StrSearcher<'a, 'b> {\n }\n \n unsafe impl<'a, 'b> Searcher<'a> for StrSearcher<'a, 'b> {\n-    fn haystack(&self) -> &'a str { self.haystack }\n+    #[inline]\n+    fn haystack(&self) -> &'a str {\n+        self.haystack\n+    }\n \n     #[inline]\n     fn next(&mut self) -> SearchStep {"}, {"sha": "98d90188312df752de79898db0671cc40db568e6", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -774,21 +774,26 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n         },\n         ty::TyRef(_, ref ty_and_mut) => vec![ty_and_mut.ty],\n         ty::TyAdt(adt, substs) => {\n-            adt.variants[ctor.variant_index_for_adt(adt)].fields.iter().map(|field| {\n-                let is_visible = adt.is_enum()\n-                    || field.vis.is_accessible_from(cx.module, cx.tcx);\n-                if is_visible {\n-                    field.ty(cx.tcx, substs)\n-                } else {\n-                    // Treat all non-visible fields as nil. They\n-                    // can't appear in any other pattern from\n-                    // this match (because they are private),\n-                    // so their type does not matter - but\n-                    // we don't want to know they are\n-                    // uninhabited.\n-                    cx.tcx.mk_nil()\n-                }\n-            }).collect()\n+            if adt.is_box() {\n+                // Use T as the sub pattern type of Box<T>.\n+                vec![substs[0].as_type().unwrap()]\n+            } else {\n+                adt.variants[ctor.variant_index_for_adt(adt)].fields.iter().map(|field| {\n+                    let is_visible = adt.is_enum()\n+                        || field.vis.is_accessible_from(cx.module, cx.tcx);\n+                    if is_visible {\n+                        field.ty(cx.tcx, substs)\n+                    } else {\n+                        // Treat all non-visible fields as nil. They\n+                        // can't appear in any other pattern from\n+                        // this match (because they are private),\n+                        // so their type does not matter - but\n+                        // we don't want to know they are\n+                        // uninhabited.\n+                        cx.tcx.mk_nil()\n+                    }\n+                }).collect()\n+            }\n         }\n         _ => vec![],\n     }"}, {"sha": "b516cbd08ca0202d35db93cf320751197e779fa1", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -15,6 +15,7 @@ alloc_jemalloc = { path = \"../liballoc_jemalloc\", optional = true }\n alloc_system = { path = \"../liballoc_system\" }\n panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n+collections = { path = \"../libcollections\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n rand = { path = \"../librand\" }"}, {"sha": "0bda06be9e8ca964575185441d3beff9f5d526f2", "filename": "src/test/compile-fail/issue-11740.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-11740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-11740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11740.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+struct Attr {\n+    name: String,\n+    value: String,\n+}\n+\n+struct Element {\n+    attrs: Vec<Box<Attr>>,\n+}\n+\n+impl Element {\n+    pub unsafe fn get_attr<'a>(&'a self, name: &str) {\n+        self.attrs\n+            .iter()\n+            .find(|attr| {\n+                      let attr: &&Box<Attr> = std::mem::transmute(attr);\n+                      true\n+                  });\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    let element = Element { attrs: Vec::new() };\n+    let _ = unsafe { element.get_attr(\"foo\") };\n+}"}, {"sha": "02b4932cea8c9c12e0cdba0c28c7247976d2380b", "filename": "src/test/compile-fail/issue-19601.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-19601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-19601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19601.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+trait A<T> {}\n+struct B<T> where B<T>: A<B<T>> { t: T }\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+}"}, {"sha": "d08f916b870c1159bf0c79bb03011b0842131aff", "filename": "src/test/compile-fail/issue-22603.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-22603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-22603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22603.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures, fn_traits, rustc_attrs)]\n+\n+struct Foo;\n+\n+impl<A> FnOnce<(A,)> for Foo {\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, (_,): (A,)) {\n+    }\n+}\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    println!(\"{:?}\", Foo(\"bar\"));\n+}"}, {"sha": "cba1c367bb9b2792b7d382fe4619c90e7e9e9e46", "filename": "src/test/compile-fail/issue-22789.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-22789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-22789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22789.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures, fn_traits, rustc_attrs)]\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    let k = |x: i32| { x + 1 };\n+    Fn::call(&k, (0,));\n+}"}, {"sha": "c128fb3b47959bb04cb7c64144192045b91efe4d", "filename": "src/test/compile-fail/issue-26614.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-26614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fcompile-fail%2Fissue-26614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26614.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+trait Mirror {\n+    type It;\n+}\n+\n+impl<T> Mirror for T {\n+    type It = Self;\n+}\n+\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    let c: <u32 as Mirror>::It = 5;\n+    const CCCC: <u32 as Mirror>::It = 5;\n+}"}, {"sha": "312835225edf5a51b8e4c406b473836b153f676b", "filename": "src/test/run-pass/issue-42679.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Frun-pass%2Fissue-42679.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Frun-pass%2Fissue-42679.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42679.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+#![feature(box_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum Test {\n+    Foo(usize),\n+    Bar(isize),\n+}\n+\n+fn main() {\n+    let a = box Test::Foo(10);\n+    let b = box Test::Bar(-20);\n+    match (a, b) {\n+        (_, box Test::Foo(_)) => unreachable!(),\n+        (box Test::Foo(x), b) => {\n+            assert_eq!(x, 10);\n+            assert_eq!(b, box Test::Bar(-20));\n+        },\n+        _ => unreachable!(),\n+    }\n+}"}, {"sha": "15ce79a054f26c2a33a91275309daac3f3437952", "filename": "src/test/ui/coercion-missing-tail-expected-type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.rs?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -14,6 +14,10 @@ fn plus_one(x: i32) -> i32 {\n     x + 1;\n }\n \n+fn foo() -> Result<u8, u64> {\n+    Ok(1);\n+}\n+\n fn main() {\n     let x = plus_one(5);\n     println!(\"X = {}\", x);"}, {"sha": "e96bc425e0b45fad9e2732758f5160d7cabec188", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/247a0184ff972f1205017185f6917a03b15e7be4/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=247a0184ff972f1205017185f6917a03b15e7be4", "patch": "@@ -15,5 +15,22 @@ help: consider removing this semicolon:\n 14 |     x + 1;\n    |          ^\n \n+error[E0308]: mismatched types\n+  --> $DIR/coercion-missing-tail-expected-type.rs:17:29\n+   |\n+17 |   fn foo() -> Result<u8, u64> {\n+   |  _____________________________^\n+18 | |     Ok(1);\n+19 | | }\n+   | |_^ expected enum `std::result::Result`, found ()\n+   |\n+   = note: expected type `std::result::Result<u8, u64>`\n+              found type `()`\n+help: consider removing this semicolon:\n+  --> $DIR/coercion-missing-tail-expected-type.rs:18:10\n+   |\n+18 |     Ok(1);\n+   |          ^\n+\n error: aborting due to previous error(s)\n "}]}