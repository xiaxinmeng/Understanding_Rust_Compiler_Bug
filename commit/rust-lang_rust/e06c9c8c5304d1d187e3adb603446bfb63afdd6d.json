{"sha": "e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNmM5YzhjNTMwNGQxZDE4N2UzYWRiNjAzNDQ2YmZiNjNhZmRkNmQ=", "commit": {"author": {"name": "Tibo", "email": "delor.thibault@gmail.com", "date": "2018-04-26T04:20:06Z"}, "committer": {"name": "Tibo", "email": "delor.thibault@gmail.com", "date": "2018-04-26T04:39:10Z"}, "message": "Allow `io::Error` to live longer before being wrapped in a `failure::Error`", "tree": {"sha": "e52efcbd335970de561be125f6c0bb16f3b930bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e52efcbd335970de561be125f6c0bb16f3b930bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEmVxnM0/G1oDSm5ipxT9CfVmUEWwFAlrhV/EACgkQxT9CfVmU\nEWzdNgf+J8c8emtjYynmjGyhFSh80F0GQtw6BAjw5+dBTtgeD6VuxltFZTpzx90p\njix4/fwpxGHcnCNLbwDhct6773eVJbRmpPayWChLFi3kZO6qfFuGM2j+8G/ylWaG\n+Mv2JxCtfb6NXcfwR7Xnm9u9RWtaDK+ogLiAN+KbgagNjsJNTu7JvBgX8Q+EO6D7\nd5Ku8F3pKOTe0jXbl6GI2J47vX2YYgn3qM5eX453LmAtH3ihPwyRMXQw/9Sjhea2\n9ghcMsB2UpbEt+hwSJfzcN6vOgISlyX1U3Ru9Anyk7HsSckPa44f2Puil9zfJ3aY\nROD8d/4XWLqJjtUcoanBMC4B2mWhIg==\n=or9P\n-----END PGP SIGNATURE-----", "payload": "tree e52efcbd335970de561be125f6c0bb16f3b930bf\nparent b7df23c3d5a3950ea6432acd71d34cd847a3be89\nauthor Tibo <delor.thibault@gmail.com> 1524716406 +1000\ncommitter Tibo <delor.thibault@gmail.com> 1524717550 +1000\n\nAllow `io::Error` to live longer before being wrapped in a `failure::Error`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "html_url": "https://github.com/rust-lang/rust/commit/e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e06c9c8c5304d1d187e3adb603446bfb63afdd6d/comments", "author": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7df23c3d5a3950ea6432acd71d34cd847a3be89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7df23c3d5a3950ea6432acd71d34cd847a3be89", "html_url": "https://github.com/rust-lang/rust/commit/b7df23c3d5a3950ea6432acd71d34cd847a3be89"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "3b9ca90350cfc779286d2605b85e0db841e4c488", "filename": "src/config/config_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e06c9c8c5304d1d187e3adb603446bfb63afdd6d/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06c9c8c5304d1d187e3adb603446bfb63afdd6d/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "patch": "@@ -305,12 +305,12 @@ macro_rules! create_config {\n             ///\n             /// Return a `Config` if the config could be read and parsed from\n             /// the file, Error otherwise.\n-            pub(super) fn from_toml_path(file_path: &Path) -> Result<Config, ::failure::Error> {\n+            pub(super) fn from_toml_path(file_path: &Path) -> Result<Config, Error> {\n                 let mut file = File::open(&file_path)?;\n                 let mut toml = String::new();\n                 file.read_to_string(&mut toml)?;\n                 Config::from_toml(&toml, file_path.parent().unwrap())\n-                    .map_err(::failure::err_msg)\n+                    .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n             }\n \n             /// Resolve the config for input in `dir`.\n@@ -322,12 +322,12 @@ macro_rules! create_config {\n             ///\n             /// Returns the `Config` to use, and the path of the project file if there was\n             /// one.\n-            pub(super) fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), ::failure::Error> {\n+            pub(super) fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), Error> {\n \n                 /// Try to find a project file in the given directory and its parents.\n                 /// Returns the path of a the nearest project file if one exists,\n                 /// or `None` if no project file was found.\n-                fn resolve_project_file(dir: &Path) -> Result<Option<PathBuf>, ::failure::Error> {\n+                fn resolve_project_file(dir: &Path) -> Result<Option<PathBuf>, Error> {\n                     let mut current = if dir.is_relative() {\n                         env::current_dir()?.join(dir)\n                     } else {"}, {"sha": "23897f3cc32aa37043ad32c7b6e3a87406b4232f", "filename": "src/config/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e06c9c8c5304d1d187e3adb603446bfb63afdd6d/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06c9c8c5304d1d187e3adb603446bfb63afdd6d/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=e06c9c8c5304d1d187e3adb603446bfb63afdd6d", "patch": "@@ -12,17 +12,14 @@ use regex::Regex;\n use std::cell::Cell;\n use std::default::Default;\n use std::fs::File;\n-use std::io::{ErrorKind, Read};\n+use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n-use FmtResult;\n-\n use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n pub use config::lists::*;\n pub use config::options::*;\n-use failure::Error;\n \n #[macro_use]\n pub mod config_type;\n@@ -155,7 +152,7 @@ create_config! {\n pub fn load_config(\n     file_path: Option<&Path>,\n     options: Option<&CliOptions>,\n-) -> FmtResult<(Config, Option<PathBuf>)> {\n+) -> Result<(Config, Option<PathBuf>), Error> {\n     let over_ride = match options {\n         Some(opts) => config_path(opts)?,\n         None => None,\n@@ -180,7 +177,7 @@ pub fn load_config(\n // Check for the presence of known config file names (`rustfmt.toml, `.rustfmt.toml`) in `dir`\n //\n // Return the path if a config file exists, empty if no file exists, and Error for IO errors\n-fn get_toml_path(dir: &Path) -> FmtResult<Option<PathBuf>> {\n+fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n     const CONFIG_FILE_NAMES: [&str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n     for config_file_name in &CONFIG_FILE_NAMES {\n         let config_file = dir.join(config_file_name);\n@@ -192,7 +189,7 @@ fn get_toml_path(dir: &Path) -> FmtResult<Option<PathBuf>> {\n             // find the project file yet, and continue searching.\n             Err(e) => {\n                 if e.kind() != ErrorKind::NotFound {\n-                    return Err(Error::from(e));\n+                    return Err(e);\n                 }\n             }\n             _ => {}\n@@ -201,11 +198,14 @@ fn get_toml_path(dir: &Path) -> FmtResult<Option<PathBuf>> {\n     Ok(None)\n }\n \n-fn config_path(options: &CliOptions) -> FmtResult<Option<PathBuf>> {\n-    let config_path_not_found = |path: &str| -> FmtResult<Option<PathBuf>> {\n-        Err(format_err!(\n-            \"Error: unable to find a config file for the given path: `{}`\",\n-            path\n+fn config_path(options: &CliOptions) -> Result<Option<PathBuf>, Error> {\n+    let config_path_not_found = |path: &str| -> Result<Option<PathBuf>, Error> {\n+        Err(Error::new(\n+            ErrorKind::NotFound,\n+            format!(\n+                \"Error: unable to find a config file for the given path: `{}`\",\n+                path\n+            ),\n         ))\n     };\n "}]}