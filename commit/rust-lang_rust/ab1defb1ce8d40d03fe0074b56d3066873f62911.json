{"sha": "ab1defb1ce8d40d03fe0074b56d3066873f62911", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMWRlZmIxY2U4ZDQwZDAzZmUwMDc0YjU2ZDMwNjY4NzNmNjI5MTE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-26T02:13:58Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-26T16:47:32Z"}, "message": "Make parsing about 0.3 seconds faster.", "tree": {"sha": "fa6db3760a5aa916a33232af70e0e1cf0b2aa0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6db3760a5aa916a33232af70e0e1cf0b2aa0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1defb1ce8d40d03fe0074b56d3066873f62911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1defb1ce8d40d03fe0074b56d3066873f62911", "html_url": "https://github.com/rust-lang/rust/commit/ab1defb1ce8d40d03fe0074b56d3066873f62911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1defb1ce8d40d03fe0074b56d3066873f62911/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c953dad0b915deb81cf03ce6919096e60bb1e6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c953dad0b915deb81cf03ce6919096e60bb1e6b8", "html_url": "https://github.com/rust-lang/rust/commit/c953dad0b915deb81cf03ce6919096e60bb1e6b8"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "e35b762f9720b2083f25671d69be1f00fd736844", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab1defb1ce8d40d03fe0074b56d3066873f62911/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1defb1ce8d40d03fe0074b56d3066873f62911/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=ab1defb1ce8d40d03fe0074b56d3066873f62911", "patch": "@@ -141,17 +141,18 @@ impl parser_common of parser_common for parser {\n     fn eat_keyword(word: ~str) -> bool {\n         self.require_keyword(word);\n \n-        // FIXME (#13042): this gratuitous use of @ is to\n-        // workaround LLVM bug.\n-        alt @self.token {\n-          @token::IDENT(sid, false) {\n+        let mut bump = false;\n+        let val = alt self.token {\n+          token::IDENT(sid, false) {\n             if str::eq(word, *self.get_str(sid)) {\n-                self.bump();\n-                ret true;\n-            } else { ret false; }\n+                bump = true;\n+                true\n+            } else { false }\n           }\n-          _ { ret false; }\n-        }\n+          _ { false }\n+        };\n+        if bump { self.bump() }\n+        val\n     }\n \n     fn expect_keyword(word: ~str) {"}, {"sha": "94e12e16185973da3d021a00f3201063998687e6", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab1defb1ce8d40d03fe0074b56d3066873f62911/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1defb1ce8d40d03fe0074b56d3066873f62911/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=ab1defb1ce8d40d03fe0074b56d3066873f62911", "patch": "@@ -14,7 +14,7 @@ iface reader {\n     fn next_token() -> {tok: token::token, sp: span};\n     fn fatal(~str) -> !;\n     fn span_diag() -> span_handler;\n-    fn interner() -> @interner<@~str>;\n+    pure fn interner() -> @interner<@~str>;\n     fn peek() -> {tok: token::token, sp: span};\n     fn dup() -> reader;\n }\n@@ -79,7 +79,7 @@ impl string_reader_as_reader of reader for string_reader {\n         self.span_diagnostic.span_fatal(copy self.peek_span, m)\n     }\n     fn span_diag() -> span_handler { self.span_diagnostic }\n-    fn interner() -> @interner<@~str> { self.interner }\n+    pure fn interner() -> @interner<@~str> { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         {tok: self.peek_tok, sp: self.peek_span}\n     }\n@@ -101,7 +101,7 @@ impl tt_reader_as_reader of reader for tt_reader {\n         self.sp_diag.span_fatal(copy self.cur_span, m);\n     }\n     fn span_diag() -> span_handler { self.sp_diag }\n-    fn interner() -> @interner<@~str> { self.interner }\n+    pure fn interner() -> @interner<@~str> { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         { tok: self.cur_tok, sp: self.cur_span }\n     }"}, {"sha": "21248b496a4712717be4440d63ab30926d930949", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab1defb1ce8d40d03fe0074b56d3066873f62911/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1defb1ce8d40d03fe0074b56d3066873f62911/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ab1defb1ce8d40d03fe0074b56d3066873f62911", "patch": "@@ -232,7 +232,7 @@ class parser {\n     fn warn(m: ~str) {\n         self.sess.span_diagnostic.span_warn(copy self.span, m)\n     }\n-    fn get_str(i: token::str_num) -> @~str {\n+    pure fn get_str(i: token::str_num) -> @~str {\n         interner::get(*self.reader.interner(), i)\n     }\n     fn get_id() -> node_id { next_node_id(self.sess) }"}]}