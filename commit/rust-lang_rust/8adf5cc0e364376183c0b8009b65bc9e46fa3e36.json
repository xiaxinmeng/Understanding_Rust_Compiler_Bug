{"sha": "8adf5cc0e364376183c0b8009b65bc9e46fa3e36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGY1Y2MwZTM2NDM3NjE4M2MwYjgwMDliNjViYzllNDZmYTNlMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-11T13:24:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-11T13:24:50Z"}, "message": "Goto for inner doc links works for module inner doc comments", "tree": {"sha": "58ec94a29bf262f2f90eaa9e63ca409d786fa01a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58ec94a29bf262f2f90eaa9e63ca409d786fa01a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8adf5cc0e364376183c0b8009b65bc9e46fa3e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8adf5cc0e364376183c0b8009b65bc9e46fa3e36", "html_url": "https://github.com/rust-lang/rust/commit/8adf5cc0e364376183c0b8009b65bc9e46fa3e36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8adf5cc0e364376183c0b8009b65bc9e46fa3e36/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c33ffecc1feea732f2ea18b3701c145adc73928", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c33ffecc1feea732f2ea18b3701c145adc73928", "html_url": "https://github.com/rust-lang/rust/commit/8c33ffecc1feea732f2ea18b3701c145adc73928"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "cd4afc8041d4b60299f5497a6a608ee006eb8bd8", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8adf5cc0e364376183c0b8009b65bc9e46fa3e36/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adf5cc0e364376183c0b8009b65bc9e46fa3e36/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=8adf5cc0e364376183c0b8009b65bc9e46fa3e36", "patch": "@@ -6,15 +6,13 @@ use ide_db::{\n     symbol_index, RootDatabase,\n };\n use syntax::{\n-    ast::{self, NameOwner},\n-    match_ast, AstNode, AstToken,\n-    SyntaxKind::*,\n-    SyntaxToken, TextSize, TokenAtOffset, T,\n+    ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextSize, TokenAtOffset, T,\n };\n \n use crate::{\n     display::{ToNav, TryToNav},\n     doc_links::extract_definitions_from_markdown,\n+    runnables::doc_owner_to_def,\n     FilePosition, NavigationTarget, RangeInfo, SymbolKind,\n };\n \n@@ -84,31 +82,23 @@ fn def_for_doc_comment(\n     doc_comment: &ast::Comment,\n ) -> Option<hir::ModuleDef> {\n     let parent = doc_comment.syntax().parent();\n-    let db = sema.db;\n     let (link, ns) = extract_positioned_link_from_comment(position, doc_comment)?;\n-    let link = &link;\n-    let name = match_ast! {\n-        match parent {\n-            ast::Name(name) => Some(name),\n-            ast::Fn(func) => func.name(),\n-            _ => None,\n-        }\n-    }?;\n-    let definition = NameClass::classify(&sema, &name).and_then(|d| d.defined(sema.db))?;\n-    match definition {\n+\n+    let def = doc_owner_to_def(sema, parent)?;\n+    match def {\n         Definition::ModuleDef(def) => match def {\n-            ModuleDef::Module(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::Function(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::Adt(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::Variant(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::Const(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::Static(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::Trait(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Module(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::Function(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::Adt(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::Variant(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::Const(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::Static(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::Trait(it) => it.resolve_doc_path(sema.db, &link, ns),\n+            ModuleDef::TypeAlias(it) => it.resolve_doc_path(sema.db, &link, ns),\n             ModuleDef::BuiltinType(_) => return None,\n         },\n-        Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n-        Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n+        Definition::Macro(it) => it.resolve_doc_path(sema.db, &link, ns),\n+        Definition::Field(it) => it.resolve_doc_path(sema.db, &link, ns),\n         Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::GenericParam(_)\n@@ -1212,7 +1202,7 @@ fn foo<'foo>(_: &'foo ()) {\n     }\n \n     #[test]\n-    fn goto_def_for_intra_rustdoc_link_same_file() {\n+    fn goto_def_for_intra_doc_link_same_file() {\n         check(\n             r#\"\n /// Blah, [`bar`](bar) .. [`foo`](foo)$0 has [`bar`](bar)\n@@ -1225,4 +1215,19 @@ pub fn foo() { }\n }\"#,\n         )\n     }\n+\n+    #[test]\n+    fn goto_def_for_intra_doc_link_inner() {\n+        check(\n+            r#\"\n+//- /main.rs\n+mod m;\n+struct S;\n+     //^\n+\n+//- /m.rs\n+//! [`super::S$0`]\n+\"#,\n+        )\n+    }\n }"}, {"sha": "f5ee7de86d33424f0477fcb27c4694e7e3f31f01", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8adf5cc0e364376183c0b8009b65bc9e46fa3e36/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adf5cc0e364376183c0b8009b65bc9e46fa3e36/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=8adf5cc0e364376183c0b8009b65bc9e46fa3e36", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use assists::utils::test_related_attribute;\n use cfg::CfgExpr;\n use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n-use ide_db::RootDatabase;\n+use ide_db::{defs::Definition, RootDatabase};\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner, ModuleItemOwner},\n@@ -110,7 +110,10 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n                     _ => None,\n                 }\n             };\n-            runnable.or_else(|| runnable_doctest(&sema, item))\n+            runnable.or_else(|| match doc_owner_to_def(&sema, item)? {\n+                Definition::ModuleDef(def) => module_def_doctest(&sema, def),\n+                _ => None,\n+            })\n         })\n         .collect()\n }\n@@ -170,20 +173,26 @@ pub(crate) fn runnable_mod(\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n-fn runnable_doctest(sema: &Semantics<RootDatabase>, item: SyntaxNode) -> Option<Runnable> {\n-    match_ast! {\n+// FIXME: figure out a proper API here.\n+pub(crate) fn doc_owner_to_def(\n+    sema: &Semantics<RootDatabase>,\n+    item: SyntaxNode,\n+) -> Option<Definition> {\n+    let res: hir::ModuleDef = match_ast! {\n         match item {\n-            ast::Fn(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::Struct(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::Enum(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::Union(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::Trait(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::Const(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::Static(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            ast::TypeAlias(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n-            _ => None,\n+            ast::SourceFile(it) => sema.scope(&item).module()?.into(),\n+            ast::Fn(it) => sema.to_def(&it)?.into(),\n+            ast::Struct(it) => sema.to_def(&it)?.into(),\n+            ast::Enum(it) => sema.to_def(&it)?.into(),\n+            ast::Union(it) => sema.to_def(&it)?.into(),\n+            ast::Trait(it) => sema.to_def(&it)?.into(),\n+            ast::Const(it) => sema.to_def(&it)?.into(),\n+            ast::Static(it) => sema.to_def(&it)?.into(),\n+            ast::TypeAlias(it) => sema.to_def(&it)?.into(),\n+            _ => return None,\n         }\n-    }\n+    };\n+    Some(Definition::ModuleDef(res))\n }\n \n fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Option<Runnable> {"}]}