{"sha": "20aba8f634c13fa2bb1b043b51a074769dc06f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYWJhOGY2MzRjMTNmYTJiYjFiMDQzYjUxYTA3NDc2OWRjMDZmNjY=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-10T16:54:02Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-15T23:50:11Z"}, "message": "added test, Operand::const_from_scalar, require_lang_item, & comments\n\nAddresses feedback from @oli-obk (Thanks!)", "tree": {"sha": "91166fde6d680c65a7aa992a5ab7fc90c2497358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91166fde6d680c65a7aa992a5ab7fc90c2497358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20aba8f634c13fa2bb1b043b51a074769dc06f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20aba8f634c13fa2bb1b043b51a074769dc06f66", "html_url": "https://github.com/rust-lang/rust/commit/20aba8f634c13fa2bb1b043b51a074769dc06f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20aba8f634c13fa2bb1b043b51a074769dc06f66/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ebd57c42439b3aedcb160f70b022a4f59f4afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ebd57c42439b3aedcb160f70b022a4f59f4afa", "html_url": "https://github.com/rust-lang/rust/commit/46ebd57c42439b3aedcb160f70b022a4f59f4afa"}], "stats": {"total": 223, "additions": 186, "deletions": 37}, "files": [{"sha": "11ae2cf72c4625d4c84be4d11b5337b617b02561", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=20aba8f634c13fa2bb1b043b51a074769dc06f66", "patch": "@@ -29,6 +29,7 @@ use rustc_macros::HashStable;\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n@@ -2218,6 +2219,33 @@ impl<'tcx> Operand<'tcx> {\n         })\n     }\n \n+    /// Convenience helper to make a literal-like constant from a given scalar value.\n+    /// Since this is used to synthesize MIR, assumes `user_ty` is None.\n+    pub fn const_from_scalar(\n+        tcx: TyCtxt<'tcx>,\n+        ty: Ty<'tcx>,\n+        val: Scalar,\n+        span: Span,\n+    ) -> Operand<'tcx> {\n+        debug_assert!({\n+            let param_env_and_ty = ty::ParamEnv::empty().and(ty);\n+            let type_size = tcx\n+                .layout_of(param_env_and_ty)\n+                .unwrap_or_else(|e| panic!(\"could not compute layout for {:?}: {:?}\", ty, e))\n+                .size;\n+            let scalar_size = abi::Size::from_bytes(match val {\n+                Scalar::Raw { size, .. } => size,\n+                _ => panic!(\"Invalid scalar type {:?}\", val),\n+            });\n+            scalar_size == type_size\n+        });\n+        Operand::Constant(box Constant {\n+            span,\n+            user_ty: None,\n+            literal: ty::Const::from_scalar(tcx, val, ty),\n+        })\n+    }\n+\n     pub fn to_copy(&self) -> Self {\n         match *self {\n             Operand::Copy(_) | Operand::Constant(_) => self.clone(),"}, {"sha": "ac28ccd181520f7092cb546e3fb83b014ef5f39e", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=20aba8f634c13fa2bb1b043b51a074769dc06f66", "patch": "@@ -389,6 +389,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 );\n                 self.copy_op(self.operand_index(args[0], index)?, dest)?;\n             }\n+            // FIXME(#73156): Handle source code coverage in const eval\n             sym::count_code_region => (),\n             _ => return Ok(false),\n         }"}, {"sha": "fda7ad731fa2793d0737acc45b0b2b76f1904e27", "filename": "src/librustc_mir/transform/instrument_coverage.rs", "status": "modified", "additions": 15, "deletions": 37, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs?ref=20aba8f634c13fa2bb1b043b51a074769dc06f66", "patch": "@@ -1,21 +1,17 @@\n use crate::transform::{MirPass, MirSource};\n use crate::util::patch::MirPatch;\n+use rustc_hir::lang_items;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n-use rustc_middle::ty::Ty;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n-use rustc_target::abi;\n \n+/// Inserts call to count_code_region() as a placeholder to be replaced during code generation with\n+/// the intrinsic llvm.instrprof.increment.\n pub struct InstrumentCoverage;\n \n-/**\n- * Inserts call to count_code_region() as a placeholder to be replaced during code generation with\n- * the intrinsic llvm.instrprof.increment.\n- */\n-\n impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.instrument_coverage {\n@@ -34,10 +30,17 @@ const INIT_FUNCTION_COUNTER: u32 = 0;\n pub fn instrument_coverage<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let span = body.span.shrink_to_lo();\n \n-    let count_code_region_fn =\n-        function_handle(tcx, span, tcx.lang_items().count_code_region_fn().unwrap());\n-    let counter_index =\n-        const_int_operand(tcx, span, tcx.types.u32, Scalar::from_u32(INIT_FUNCTION_COUNTER));\n+    let count_code_region_fn = function_handle(\n+        tcx,\n+        tcx.require_lang_item(lang_items::CountCodeRegionFnLangItem, None),\n+        span,\n+    );\n+    let counter_index = Operand::const_from_scalar(\n+        tcx,\n+        tcx.types.u32,\n+        Scalar::from_u32(INIT_FUNCTION_COUNTER),\n+        span,\n+    );\n \n     let mut patch = MirPatch::new(body);\n \n@@ -68,38 +71,13 @@ pub fn instrument_coverage<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     body.basic_blocks_mut().swap(next_block, new_block);\n }\n \n-fn function_handle<'tcx>(tcx: TyCtxt<'tcx>, span: Span, fn_def_id: DefId) -> Operand<'tcx> {\n+fn function_handle<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: DefId, span: Span) -> Operand<'tcx> {\n     let ret_ty = tcx.fn_sig(fn_def_id).output();\n     let ret_ty = ret_ty.no_bound_vars().unwrap();\n     let substs = tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(ret_ty)));\n     Operand::function_handle(tcx, fn_def_id, substs, span)\n }\n \n-fn const_int_operand<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    span: Span,\n-    ty: Ty<'tcx>,\n-    val: Scalar,\n-) -> Operand<'tcx> {\n-    debug_assert!({\n-        let param_env_and_ty = ty::ParamEnv::empty().and(ty);\n-        let type_size = tcx\n-            .layout_of(param_env_and_ty)\n-            .unwrap_or_else(|e| panic!(\"could not compute layout for {:?}: {:?}\", ty, e))\n-            .size;\n-        let scalar_size = abi::Size::from_bytes(match val {\n-            Scalar::Raw { size, .. } => size,\n-            _ => panic!(\"Invalid scalar type {:?}\", val),\n-        });\n-        scalar_size == type_size\n-    });\n-    Operand::Constant(box Constant {\n-        span,\n-        user_ty: None,\n-        literal: ty::Const::from_scalar(tcx, val, ty),\n-    })\n-}\n-\n fn placeholder_block<'tcx>(source_info: SourceInfo) -> BasicBlockData<'tcx> {\n     BasicBlockData {\n         statements: vec![],"}, {"sha": "e8c723b528a1a7520ffc8a8f5326d5b533aa031b", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=20aba8f634c13fa2bb1b043b51a074769dc06f66", "patch": "@@ -0,0 +1,19 @@\n+// Test that the initial version of Rust coverage injects count_code_region() placeholder calls,\n+// at the top of each function. The placeholders are later converted into LLVM instrprof.increment\n+// intrinsics, during codegen.\n+\n+// compile-flags: -Zinstrument-coverage\n+// EMIT_MIR rustc.main.InstrumentCoverage.diff\n+// EMIT_MIR rustc.bar.InstrumentCoverage.diff\n+fn main() {\n+    loop {\n+        if bar() {\n+            break;\n+        }\n+    }\n+}\n+\n+#[inline(never)]\n+fn bar() -> bool {\n+    true\n+}"}, {"sha": "d23bb93d951dcbd046b4a9c6954bd0a4ae3d521b", "filename": "src/test/mir-opt/instrument_coverage/rustc.bar.InstrumentCoverage.diff", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff?ref=20aba8f634c13fa2bb1b043b51a074769dc06f66", "patch": "@@ -0,0 +1,41 @@\n+- // MIR for `bar` before InstrumentCoverage\n++ // MIR for `bar` after InstrumentCoverage\n+  \n+  fn bar() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/instrument_coverage.rs:17:13: 17:17\n++     let mut _1: ();                      // in scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n+  \n+      bb0: {\n++         StorageLive(_1);                 // scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n++         _1 = const std::intrinsics::count_code_region(const 0u32) -> bb2; // scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n++                                          // ty::Const\n++                                          // + ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}\n++                                          // + val: Value(Scalar(<ZST>))\n++                                          // mir::Constant\n++                                          // + span: $DIR/instrument_coverage.rs:17:1: 17:1\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}, val: Value(Scalar(<ZST>)) }\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/instrument_coverage.rs:17:1: 17:1\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n++     }\n++ \n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_1);                 // scope 0 at $DIR/instrument_coverage.rs:18:5: 18:9\n+          _0 = const true;                 // scope 0 at $DIR/instrument_coverage.rs:18:5: 18:9\n+                                           // ty::Const\n+                                           // + ty: bool\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/instrument_coverage.rs:18:5: 18:9\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          return;                          // scope 0 at $DIR/instrument_coverage.rs:19:2: 19:2\n+      }\n+  }\n+  "}, {"sha": "d5d0f82495d1a113f3aad7f075adf130154b77b6", "filename": "src/test/mir-opt/instrument_coverage/rustc.main.InstrumentCoverage.diff", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/20aba8f634c13fa2bb1b043b51a074769dc06f66/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff?ref=20aba8f634c13fa2bb1b043b51a074769dc06f66", "patch": "@@ -0,0 +1,82 @@\n+- // MIR for `main` before InstrumentCoverage\n++ // MIR for `main` after InstrumentCoverage\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/instrument_coverage.rs:8:11: 8:11\n+      let mut _1: ();                      // in scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n+      let mut _2: bool;                    // in scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n+      let mut _3: !;                       // in scope 0 at $DIR/instrument_coverage.rs:10:18: 12:10\n++     let mut _4: ();                      // in scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n+  \n+      bb0: {\n+-         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n++         StorageLive(_4);                 // scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n++         _4 = const std::intrinsics::count_code_region(const 0u32) -> bb7; // scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n++                                          // ty::Const\n++                                          // + ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}\n++                                          // + val: Value(Scalar(<ZST>))\n++                                          // mir::Constant\n++                                          // + span: $DIR/instrument_coverage.rs:8:1: 8:1\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}, val: Value(Scalar(<ZST>)) }\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/instrument_coverage.rs:8:1: 8:1\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n+          _2 = const bar() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n+                                           // ty::Const\n+                                           // + ty: fn() -> bool {bar}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/instrument_coverage.rs:10:12: 10:15\n+                                           // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n+          switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/instrument_coverage.rs:10:9: 12:10\n+      }\n+  \n+      bb3: {\n+          falseEdges -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/instrument_coverage.rs:10:9: 12:10\n+      }\n+  \n+      bb4: {\n+          _1 = const ();                   // scope 0 at $DIR/instrument_coverage.rs:10:9: 12:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/instrument_coverage.rs:10:9: 12:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/instrument_coverage.rs:13:5: 13:6\n+          goto -> bb0;                     // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n+      }\n+  \n+      bb5: {\n+          _0 = const ();                   // scope 0 at $DIR/instrument_coverage.rs:11:13: 11:18\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/instrument_coverage.rs:11:13: 11:18\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/instrument_coverage.rs:13:5: 13:6\n+          return;                          // scope 0 at $DIR/instrument_coverage.rs:14:2: 14:2\n+      }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n++     }\n++ \n++     bb7: {\n++         StorageDead(_4);                 // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n++         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n+      }\n+  }\n+  "}]}