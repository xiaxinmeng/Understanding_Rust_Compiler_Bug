{"sha": "f735cd2f897c5497c5d538c927ea892f74c02c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzVjZDJmODk3YzU0OTdjNWQ1MzhjOTI3ZWE4OTJmNzRjMDJjNjI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:28Z"}, "message": "Rollup merge of #66334 - Mark-Simulacrum:sess-cstore, r=petrochenkov\n\nMove Session fields to CrateStore\n\n`allocator_kind` and `injected_panic_runtime` are both query-like, this moves them out of Session and into CrateStore, avoiding the `Once` they previously had by clearing separating initialization and de-initialization.", "tree": {"sha": "e44e15e05a80319997a1deadd93679c1dbe61189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44e15e05a80319997a1deadd93679c1dbe61189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f735cd2f897c5497c5d538c927ea892f74c02c62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzACICRBK7hj4Ov3rIwAAdHIIAALDx5e4z/aMmvyQKW9ds9ja\nBtNREEnspre4x49vts2++g+YdDd8FL1pnuEbfprrWGHq66um+JksYlFPafbNGIKk\njLFUEy+lqhEYYzeVfq+0YLpdZndyu9V4XlOxam1I86KjD3tkQfrMM31cQ2uvIiUf\naOWAxcaw0czXTC5ENanUS51GdAggOr4iNmYn5R2xQQcUPGFOl1ou2jS8zjopOhS+\nMgi2kj6M6R9uBXCxtduQRERFj/xyNG+AhLhJ7Vy4CNBGv9F3YHfeUtrQJ5q3jT7/\ng+eMFPT5K2Oig9qHvMVdoi9C2seOuf8/BjrTcnvo6rqwZdg9vz34epMrOjhwLQA=\n=mxl1\n-----END PGP SIGNATURE-----\n", "payload": "tree e44e15e05a80319997a1deadd93679c1dbe61189\nparent 5683fe5a48cb741a318a88990dd47744194a596f\nparent 2c6d6094840cd88422f50b2c7972199a00578319\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650568 +0900\ncommitter GitHub <noreply@github.com> 1573650568 +0900\n\nRollup merge of #66334 - Mark-Simulacrum:sess-cstore, r=petrochenkov\n\nMove Session fields to CrateStore\n\n`allocator_kind` and `injected_panic_runtime` are both query-like, this moves them out of Session and into CrateStore, avoiding the `Once` they previously had by clearing separating initialization and de-initialization.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f735cd2f897c5497c5d538c927ea892f74c02c62", "html_url": "https://github.com/rust-lang/rust/commit/f735cd2f897c5497c5d538c927ea892f74c02c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f735cd2f897c5497c5d538c927ea892f74c02c62/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5683fe5a48cb741a318a88990dd47744194a596f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5683fe5a48cb741a318a88990dd47744194a596f", "html_url": "https://github.com/rust-lang/rust/commit/5683fe5a48cb741a318a88990dd47744194a596f"}, {"sha": "2c6d6094840cd88422f50b2c7972199a00578319", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6d6094840cd88422f50b2c7972199a00578319", "html_url": "https://github.com/rust-lang/rust/commit/2c6d6094840cd88422f50b2c7972199a00578319"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "e5c80c3589494440012b3057142565836379efe3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -15,6 +15,7 @@ use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n+use syntax::expand::allocator::AllocatorKind;\n use rustc_target::spec::Target;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n@@ -227,6 +228,8 @@ pub trait CrateStore {\n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n+    fn injected_panic_runtime(&self) -> Option<CrateNum>;\n+    fn allocator_kind(&self) -> Option<AllocatorKind>;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "17708537893b334520c61eb846054194e9b98f95", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -2,7 +2,6 @@ pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n use self::code_stats::CodeStats;\n \n use crate::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n-use crate::hir::def_id::CrateNum;\n use rustc_data_structures::fingerprint::Fingerprint;\n \n use crate::lint;\n@@ -22,7 +21,6 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n@@ -102,12 +100,6 @@ pub struct Session {\n     /// The maximum number of stackframes allowed in const eval.\n     pub const_eval_stack_frame_limit: usize,\n \n-    /// The `metadata::creader` module may inject an allocator/`panic_runtime`\n-    /// dependency if it didn't already find one, and this tracks what was\n-    /// injected.\n-    pub allocator_kind: Once<Option<AllocatorKind>>,\n-    pub injected_panic_runtime: Once<Option<CrateNum>>,\n-\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n@@ -1182,8 +1174,6 @@ fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        allocator_kind: Once::new(),\n-        injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,"}, {"sha": "7ed54ef9467c3222f246f94dbbdc7c0e3e779ff7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -75,6 +75,7 @@ use syntax::source_map::MultiSpan;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n+use syntax::expand::allocator::AllocatorKind;\n \n pub struct AllArenas {\n     pub interner: SyncDroplessArena,\n@@ -1338,6 +1339,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(LOCAL_CRATE)\n     }\n \n+    pub fn injected_panic_runtime(self) -> Option<CrateNum> {\n+        self.cstore.injected_panic_runtime()\n+    }\n+\n+    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n+        self.cstore.allocator_kind()\n+    }\n+\n     pub fn features(self) -> &'tcx feature_gate::Features {\n         self.features_query(LOCAL_CRATE)\n     }"}, {"sha": "f8b3e0ffe5cd9774416126d04a0530aa715789e4", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -194,7 +194,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.sess.allocator_kind.get().is_some() {\n+    if tcx.allocator_kind().is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}, {"sha": "faa7b588e56e30d0b42b04602a3d75d262ecac98", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -549,7 +549,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n+    } else if let Some(kind) = tcx.allocator_kind() {\n         let llmod_id = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                        &[\"crate\"],\n                                                        Some(\"allocator\")).to_string();"}, {"sha": "b4dea19d3dc3ffdc78b7197e640e0d153d0dd663", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -531,7 +531,7 @@ impl<'a> CrateLoader<'a> {\n         });\n         if !any_non_rlib {\n             info!(\"panic runtime injection skipped, only generating rlib\");\n-            self.sess.injected_panic_runtime.set(None);\n+            self.cstore.injected_panic_runtime = None;\n             return\n         }\n \n@@ -563,7 +563,7 @@ impl<'a> CrateLoader<'a> {\n         // we just don't need one at all, then we're done here and there's\n         // nothing else to do.\n         if !needs_panic_runtime || runtime_found {\n-            self.sess.injected_panic_runtime.set(None);\n+            self.cstore.injected_panic_runtime = None;\n             return\n         }\n \n@@ -600,7 +600,7 @@ impl<'a> CrateLoader<'a> {\n                                    name, desired_strategy.desc()));\n         }\n \n-        self.sess.injected_panic_runtime.set(Some(cnum));\n+        self.cstore.injected_panic_runtime = Some(cnum);\n         self.inject_dependency_if(cnum, \"a panic runtime\",\n                                   &|data| data.root.needs_panic_runtime);\n     }\n@@ -722,7 +722,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_allocator_crate(&self, krate: &ast::Crate) {\n+    fn inject_allocator_crate(&mut self, krate: &ast::Crate) {\n         let has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n@@ -742,7 +742,7 @@ impl<'a> CrateLoader<'a> {\n             needs_allocator = needs_allocator || data.root.needs_allocator;\n         });\n         if !needs_allocator {\n-            self.sess.allocator_kind.set(None);\n+            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -758,7 +758,7 @@ impl<'a> CrateLoader<'a> {\n                 }\n             });\n         if all_rlib {\n-            self.sess.allocator_kind.set(None);\n+            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -795,7 +795,7 @@ impl<'a> CrateLoader<'a> {\n             }\n         });\n         if global_allocator.is_some() {\n-            self.sess.allocator_kind.set(Some(AllocatorKind::Global));\n+            self.cstore.allocator_kind = Some(AllocatorKind::Global);\n             return\n         }\n \n@@ -816,7 +816,7 @@ impl<'a> CrateLoader<'a> {\n                            add `#[global_allocator]` to a static item \\\n                            that implements the GlobalAlloc trait.\");\n         }\n-        self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));\n+        self.cstore.allocator_kind = Some(AllocatorKind::DefaultLib);\n     }\n \n     fn inject_dependency_if(&self,"}, {"sha": "54857ce1b82816b4e1403587bfcda2193d6eced0", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::svh::Svh;\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n \n@@ -101,6 +102,8 @@ crate struct CrateMetadata {\n #[derive(Clone)]\n pub struct CStore {\n     metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n+    pub(crate) injected_panic_runtime: Option<CrateNum>,\n+    pub(crate) allocator_kind: Option<AllocatorKind>,\n }\n \n pub enum LoadedMacro {\n@@ -116,6 +119,8 @@ impl Default for CStore {\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n             metas: IndexVec::from_elem_n(None, 1),\n+            injected_panic_runtime: None,\n+            allocator_kind: None,\n         }\n     }\n }"}, {"sha": "dbf7fede1469f7d71da81a4db565d495aaa85249", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -184,7 +184,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n     //\n     // Things like allocators and panic runtimes may not have been activated\n     // quite yet, so do so here.\n-    activate_injected_dep(*sess.injected_panic_runtime.get(), &mut ret,\n+    activate_injected_dep(tcx.injected_panic_runtime(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n \n     // When dylib B links to dylib A, then when using B we must also link to A.\n@@ -244,7 +244,6 @@ fn add_library(\n }\n \n fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n-    let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n         return None\n@@ -264,7 +263,7 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     // Our allocator/panic runtime may not have been linked above if it wasn't\n     // explicitly linked, which is the case for any injected dependency. Handle\n     // that here and activate them.\n-    activate_injected_dep(*sess.injected_panic_runtime.get(), &mut ret,\n+    activate_injected_dep(tcx.injected_panic_runtime(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n \n     Some(ret)"}, {"sha": "a6cb3864ca7d4e22cb280dd146530b8f98bc45d4", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f735cd2f897c5497c5d538c927ea892f74c02c62/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f735cd2f897c5497c5d538c927ea892f74c02c62", "patch": "@@ -31,6 +31,7 @@ use syntax::attr;\n use syntax::source_map;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n+use syntax::expand::allocator::AllocatorKind;\n use syntax_pos::{Span, FileName};\n \n macro_rules! provide {\n@@ -527,4 +528,12 @@ impl CrateStore for cstore::CStore {\n     {\n         rmeta::METADATA_HEADER\n     }\n+\n+    fn injected_panic_runtime(&self) -> Option<CrateNum> {\n+        self.injected_panic_runtime\n+    }\n+\n+    fn allocator_kind(&self) -> Option<AllocatorKind> {\n+        self.allocator_kind\n+    }\n }"}]}