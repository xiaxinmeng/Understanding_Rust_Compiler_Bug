{"sha": "f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOWVmNmVjNjZiMGEyMDRjNTJjYzY3YTZjOTFhNjlkYTY1YTU0MDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T01:48:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:45Z"}, "message": "Convert rest of the AST to istrs. Issue #855", "tree": {"sha": "e7cbbe4ccf72c51d25b05be37b1218b6bdbeecbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7cbbe4ccf72c51d25b05be37b1218b6bdbeecbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "html_url": "https://github.com/rust-lang/rust/commit/f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f603e912ee55c92a40a4b4ea22f20c545b72804f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f603e912ee55c92a40a4b4ea22f20c545b72804f", "html_url": "https://github.com/rust-lang/rust/commit/f603e912ee55c92a40a4b4ea22f20c545b72804f"}], "stats": {"total": 114, "additions": 66, "deletions": 48}, "files": [{"sha": "77f3cf671cc46b2ffcebd5571c1a3af5c68477ec", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -324,12 +324,12 @@ fn build_link_meta(sess: &session::session, c: &ast::crate, output: &istr,\n         for meta: @ast::meta_item in linkage_metas {\n             if attr::get_meta_item_name(meta) == ~\"name\" {\n                 alt attr::get_meta_item_value_str(meta) {\n-                  some(v) { name = some(istr::from_estr(v)); }\n+                  some(v) { name = some(v); }\n                   none. { cmh_items += [meta]; }\n                 }\n             } else if attr::get_meta_item_name(meta) == ~\"vers\" {\n                 alt attr::get_meta_item_value_str(meta) {\n-                  some(v) { vers = some(istr::from_estr(v)); }\n+                  some(v) { vers = some(v); }\n                   none. { cmh_items += [meta]; }\n                 }\n             } else { cmh_items += [meta]; }"}, {"sha": "8bc0ce941fb8267102936d83cf124ebb5c1fa598", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -81,7 +81,7 @@ fn get_meta_item_name(meta: &@ast::meta_item) -> ast::ident {\n \n // Gets the string value if the meta_item is a meta_name_value variant\n // containing a string, otherwise none\n-fn get_meta_item_value_str(meta: &@ast::meta_item) -> option::t<str> {\n+fn get_meta_item_value_str(meta: &@ast::meta_item) -> option::t<istr> {\n     alt meta.node {\n       ast::meta_name_value(_, v) {\n         alt v.node {\n@@ -196,7 +196,7 @@ fn span<@T>(item: &T) -> ast::spanned<T> {\n }\n \n fn mk_name_value_item_str(name: ast::ident, value: str) -> @ast::meta_item {\n-    let value_lit = span(ast::lit_str(value, ast::sk_rc));\n+    let value_lit = span(ast::lit_str(istr::from_estr(value), ast::sk_rc));\n     ret mk_name_value_item(name, value_lit);\n }\n "}, {"sha": "4d027c867bbe10995812323532df5cec2707bd69", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -2,6 +2,7 @@\n \n import std::option;\n import std::vec;\n+import std::istr;\n import syntax::ast;\n import syntax::ast_util;\n import syntax::ast_util::*;\n@@ -249,7 +250,8 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n     log #fmt[\"encoding %s\", ast_util::path_name_i(path)];\n \n     let name_lit: ast::lit =\n-        nospan(ast::lit_str(ast_util::path_name_i(path), ast::sk_rc));\n+        nospan(ast::lit_str(\n+            istr::from_estr(ast_util::path_name_i(path)), ast::sk_rc));\n     let name_expr: ast::expr =\n         {id: cx.next_node_id(),\n          node: ast::expr_lit(@name_lit),"}, {"sha": "f7b9473867b0dd2439ccc0abc0ceae1ccea1c997", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -68,11 +68,14 @@ fn visit_item(e: env, i: &@ast::item) {\n             ret;\n         }\n         let cstore = e.sess.get_cstore();\n-        if !cstore::add_used_library(cstore, m.native_name) { ret; }\n+        if !cstore::add_used_library(cstore,\n+                                     istr::to_estr(m.native_name)) { ret; }\n         for a: ast::attribute in\n             attr::find_attrs_by_name(i.attrs, ~\"link_args\") {\n             alt attr::get_meta_item_value_str(attr::attr_meta(a)) {\n-              some(linkarg) { cstore::add_used_link_args(cstore, linkarg); }\n+              some(linkarg) {\n+                cstore::add_used_link_args(cstore, istr::to_estr(linkarg));\n+              }\n               none. {/* fallthrough */ }\n             }\n         }\n@@ -133,19 +136,21 @@ fn find_library_crate(sess: &session::session, ident: &ast::ident,\n               some(i) {\n                 alt attr::get_meta_item_value_str(i) {\n                   some(n) { n }\n-                  _ { istr::to_estr(ident) }\n+                  _ { ident }\n                 }\n               }\n-              none. { istr::to_estr(ident) }\n+              none. { ident }\n             }\n         };\n \n     let nn = default_native_lib_naming(sess, sess.get_opts().static);\n     let x =\n-        find_library_crate_aux(nn, crate_name, metas, library_search_paths);\n+        find_library_crate_aux(nn, istr::to_estr(crate_name),\n+                               metas, library_search_paths);\n     if x != none || sess.get_opts().static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(nn2, crate_name, metas, library_search_paths);\n+    ret find_library_crate_aux(nn2, istr::to_estr(crate_name),\n+                               metas, library_search_paths);\n }\n \n fn find_library_crate_aux(nn: &{prefix: str, suffix: str}, crate_name: str,"}, {"sha": "d0f5f6452839ed536d17e904aadca061ab7134f7", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -465,7 +465,7 @@ fn encode_meta_item(ebml_w: &ebml::writer, mi: &meta_item) {\n             ebml_w.writer.write(istr::bytes(name));\n             ebml::end_tag(ebml_w);\n             ebml::start_tag(ebml_w, tag_meta_item_value);\n-            ebml_w.writer.write(str::bytes(value));\n+            ebml_w.writer.write(istr::bytes(value));\n             ebml::end_tag(ebml_w);\n             ebml::end_tag(ebml_w);\n           }"}, {"sha": "c0cf7c6b53b79c1ad19b4d8c2b75083f2e24d84e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -2523,16 +2523,16 @@ fn trans_crate_lit(cx: &@crate_ctxt, lit: &ast::lit) -> ValueRef {\n         }\n         ret C_integral(t, i as uint, s);\n       }\n-      ast::lit_float(fs) { ret C_float(istr::from_estr(fs)); }\n+      ast::lit_float(fs) { ret C_float(fs); }\n       ast::lit_mach_float(tm, s) {\n         let t = T_float();\n         alt tm { ast::ty_f32. { t = T_f32(); } ast::ty_f64. { t = T_f64(); } }\n-        ret C_floating(istr::from_estr(s), t);\n+        ret C_floating(s, t);\n       }\n       ast::lit_char(c) { ret C_integral(T_char(), c as uint, False); }\n       ast::lit_bool(b) { ret C_bool(b); }\n       ast::lit_nil. { ret C_nil(); }\n-      ast::lit_str(s, ast::sk_rc.) { ret C_str(cx, istr::from_estr(s)); }\n+      ast::lit_str(s, ast::sk_rc.) { ret C_str(cx, s); }\n       ast::lit_str(s, ast::sk_unique.) {\n         cx.sess.span_unimpl(lit.span, \"unique string in this context\");\n       }\n@@ -2541,7 +2541,9 @@ fn trans_crate_lit(cx: &@crate_ctxt, lit: &ast::lit) -> ValueRef {\n \n fn trans_lit(cx: &@block_ctxt, lit: &ast::lit) -> result {\n     alt lit.node {\n-      ast::lit_str(s, ast::sk_unique.) { ret trans_lit_istr(cx, s); }\n+      ast::lit_str(s, ast::sk_unique.) {\n+        ret trans_lit_istr(cx, istr::to_estr(s));\n+      }\n       _ { ret rslt(cx, trans_crate_lit(bcx_ccx(cx), lit)); }\n     }\n }"}, {"sha": "44ed863351ebf8188204e1f507d06d7b57e1c51b", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -237,7 +237,7 @@ tag blk_sort {\n type mac = spanned<mac_>;\n \n tag mac_ {\n-    mac_invoc(path, @expr, option::t<str>);\n+    mac_invoc(path, @expr, option::t<istr>);\n     mac_embed_type(@ty);\n     mac_embed_block(blk);\n     mac_ellipsis;\n@@ -246,13 +246,13 @@ tag mac_ {\n type lit = spanned<lit_>;\n \n tag lit_ {\n-    lit_str(str, seq_kind);\n+    lit_str(istr, seq_kind);\n     lit_char(char);\n     lit_int(int);\n     lit_uint(uint);\n     lit_mach_int(ty_mach, int);\n-    lit_float(str);\n-    lit_mach_float(ty_mach, str);\n+    lit_float(istr);\n+    lit_mach_float(ty_mach, istr);\n     lit_nil;\n     lit_bool(bool);\n }\n@@ -421,7 +421,7 @@ tag native_abi {\n }\n \n type native_mod =\n-    {native_name: str,\n+    {native_name: istr,\n      abi: native_abi,\n      view_items: [@view_item],\n      items: [@native_item]};\n@@ -494,7 +494,7 @@ type native_item =\n \n tag native_item_ {\n     native_item_ty;\n-    native_item_fn(option::t<str>, fn_decl, [ty_param]);\n+    native_item_fn(option::t<istr>, fn_decl, [ty_param]);\n }\n \n //"}, {"sha": "d9cdb54ad3045757dc4b0c1191ff6edc65195376", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -8,10 +8,10 @@ import std::map::new_str_hash;\n import codemap;\n \n type syntax_expander =\n-    fn(&ext_ctxt, span, @ast::expr, option::t<str>) -> @ast::expr;\n+    fn(&ext_ctxt, span, @ast::expr, &option::t<istr>) -> @ast::expr;\n type macro_def = {ident: str, ext: syntax_extension};\n type macro_definer =\n-    fn(&ext_ctxt, span, @ast::expr, option::t<str>) -> macro_def;\n+    fn(&ext_ctxt, span, @ast::expr, &option::t<istr>) -> macro_def;\n \n tag syntax_extension {\n     normal(syntax_expander);\n@@ -100,7 +100,7 @@ fn expr_to_str(cx: &ext_ctxt, expr: @ast::expr, error: str) -> str {\n     alt expr.node {\n       ast::expr_lit(l) {\n         alt l.node {\n-          ast::lit_str(s, _) { ret s; }\n+          ast::lit_str(s, _) { ret istr::to_estr(s); }\n           _ { cx.span_fatal(l.span, error); }\n         }\n       }"}, {"sha": "0ac2ef0debe6033d7c758ece21d07c34adb2f09e", "filename": "src/comp/syntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -3,7 +3,7 @@ import base::*;\n import syntax::ast;\n \n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option::t<str>) -> @ast::expr {\n+                     _body: &option::t<istr>) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "f2cd093edaeb5d82e5eb2f8873130aa824407c3f", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -12,7 +12,7 @@ import base::*;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option::t<str>) -> @ast::expr {\n+                     _body: &option::t<istr>) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }\n@@ -36,7 +36,7 @@ fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n }\n \n fn make_new_str(cx: &ext_ctxt, sp: codemap::span, s: str) -> @ast::expr {\n-    ret make_new_lit(cx, sp, ast::lit_str(s, ast::sk_rc));\n+    ret make_new_lit(cx, sp, ast::lit_str(istr::from_estr(s), ast::sk_rc));\n }\n //\n // Local Variables:"}, {"sha": "2173cfba40fbaf42aacc2cdb6268eb974d930fe6", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -17,7 +17,7 @@ import codemap::span;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: &ext_ctxt, sp: span, arg: @ast::expr,\n-                     _body: option::t<str>) -> @ast::expr {\n+                     _body: &option::t<istr>) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }\n@@ -52,7 +52,7 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n         ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n     }\n     fn make_new_str(cx: &ext_ctxt, sp: span, s: str) -> @ast::expr {\n-        let lit = ast::lit_str(s, ast::sk_rc);\n+        let lit = ast::lit_str(istr::from_estr(s), ast::sk_rc);\n         ret make_new_lit(cx, sp, lit);\n     }\n     fn make_new_int(cx: &ext_ctxt, sp: span, i: int) -> @ast::expr {"}, {"sha": "ec176dd2fa33849dfcaeddd59e023fbbc9a19d30", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -5,7 +5,7 @@ import base::*;\n import syntax::ast;\n \n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option::t<str>) -> @ast::expr {\n+                     _body: &option::t<istr>) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }\n@@ -18,8 +18,8 @@ fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n     }\n \n     ret make_new_lit(cx, sp,\n-                     ast::lit_str(istr::to_estr(expr_to_ident(cx, args[0u],\n-                                                \"expected an ident\")),\n+                     ast::lit_str(expr_to_ident(cx, args[0u],\n+                                                \"expected an ident\"),\n                                   ast::sk_rc));\n \n }"}, {"sha": "3cab1dbd915ec70fb2e9caed4791e2f41e5d3dea", "filename": "src/comp/syntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -4,7 +4,7 @@ import syntax::ast;\n import std::istr;\n \n fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option::t<str>) -> @ast::expr {\n+                     _body: &option::t<istr>) -> @ast::expr {\n \n     cx.print_backtrace();\n     std::io::stdout().write_line("}, {"sha": "eca20e2225eb323f9e4b5173495afcb170ec8ecf", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -688,7 +688,7 @@ fn p_t_s_r_actual_vector(cx: &ext_ctxt, elts: [@expr], _repeat_after: bool,\n }\n \n fn add_new_extension(cx: &ext_ctxt, sp: span, arg: @expr,\n-                     _body: option::t<str>) -> base::macro_def {\n+                     _body: &option::t<istr>) -> base::macro_def {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }\n@@ -768,7 +768,8 @@ fn add_new_extension(cx: &ext_ctxt, sp: span, arg: @expr,\n          ext: normal(ext)};\n \n     fn generic_extension(cx: &ext_ctxt, sp: span, arg: @expr,\n-                         _body: option::t<str>, clauses: [@clause]) -> @expr {\n+                         _body: &option::t<istr>,\n+                         clauses: [@clause]) -> @expr {\n         for c: @clause in clauses {\n             alt use_selectors_to_bind(c.params, arg) {\n               some(bindings) { ret transcribe(cx, bindings, c.body) }"}, {"sha": "ce3b917118ec011af485db3b2f48ea235c7708b7", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -696,20 +696,20 @@ fn parse_lit(p: &parser) -> ast::lit {\n           token::LIT_UINT(u) { p.bump(); lit = ast::lit_uint(u); }\n           token::LIT_FLOAT(s) {\n             p.bump();\n-            lit = ast::lit_float(p.get_str(s));\n+            lit = ast::lit_float(istr::from_estr(p.get_str(s)));\n           }\n           token::LIT_MACH_INT(tm, i) {\n             p.bump();\n             lit = ast::lit_mach_int(tm, i);\n           }\n           token::LIT_MACH_FLOAT(tm, s) {\n             p.bump();\n-            lit = ast::lit_mach_float(tm, p.get_str(s));\n+            lit = ast::lit_mach_float(tm, istr::from_estr(p.get_str(s)));\n           }\n           token::LIT_CHAR(c) { p.bump(); lit = ast::lit_char(c); }\n           token::LIT_STR(s) {\n             p.bump();\n-            lit = ast::lit_str(p.get_str(s), ast::sk_rc);\n+            lit = ast::lit_str(istr::from_estr(p.get_str(s)), ast::sk_rc);\n           }\n           token::LPAREN. {\n             p.bump();\n@@ -896,7 +896,8 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n             let sp = p.get_span();\n             p.bump();\n             let lit =\n-                @{node: ast::lit_str(p.get_str(s), ast::sk_unique),\n+                @{node: ast::lit_str(istr::from_estr(p.get_str(s)),\n+                                     ast::sk_unique),\n                   span: sp};\n             ex = ast::expr_lit(lit);\n           }\n@@ -1971,7 +1972,10 @@ fn parse_item_native_fn(p: &parser, attrs: &[ast::attribute]) ->\n     let t = parse_fn_header(p);\n     let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n     let link_name = none;\n-    if p.peek() == token::EQ { p.bump(); link_name = some(parse_str(p)); }\n+    if p.peek() == token::EQ {\n+        p.bump();\n+        link_name = some(istr::from_estr(parse_str(p)));\n+    }\n     let hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n     ret @{ident: t.ident,\n@@ -2006,7 +2010,7 @@ fn parse_native_mod_items(p: &parser, native_name: &str,\n         initial_attrs = [];\n         items += [parse_native_item(p, attrs)];\n     }\n-    ret {native_name: native_name,\n+    ret {native_name: istr::from_estr(native_name),\n          abi: abi,\n          view_items: view_items,\n          items: items};"}, {"sha": "9fff1a8be802d4465a55534a7ed463d0186b6a13", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09ef6ec66b0a204c52cc67a6c91a69da65a5407/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=f09ef6ec66b0a204c52cc67a6c91a69da65a5407", "patch": "@@ -371,7 +371,11 @@ fn print_native_item(s: &ps, item: &@ast::native_item) {\n                  decl.constraints);\n         alt lname {\n           none. { }\n-          some(ss) { space(s.s); word_space(s, \"=\"); print_string(s, ss); }\n+          some(ss) {\n+            space(s.s);\n+            word_space(s, \"=\");\n+            print_string(s, istr::to_estr(ss));\n+          }\n         }\n         end(s); // end head-ibox\n         word(s.s, \";\");\n@@ -426,9 +430,9 @@ fn print_item(s: &ps, item: &@ast::item) {\n         }\n         word_nbsp(s, \"mod\");\n         word_nbsp(s, istr::to_estr(item.ident));\n-        if !str::eq(nmod.native_name, istr::to_estr(item.ident)) {\n+        if !istr::eq(nmod.native_name, item.ident) {\n             word_space(s, \"=\");\n-            print_string(s, nmod.native_name);\n+            print_string(s, istr::to_estr(nmod.native_name));\n             nbsp(s);\n         }\n         bopen(s);\n@@ -1505,7 +1509,7 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n     alt lit.node {\n       ast::lit_str(st, kind) {\n         if kind == ast::sk_unique { word(s.s, \"~\"); }\n-        print_string(s, st);\n+        print_string(s, istr::to_estr(st));\n       }\n       ast::lit_char(ch) {\n         word(s.s,\n@@ -1514,14 +1518,14 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n       }\n       ast::lit_int(val) { word(s.s, istr::to_estr(int::str(val))); }\n       ast::lit_uint(val) { word(s.s, istr::to_estr(uint::str(val)) + \"u\"); }\n-      ast::lit_float(fstr) { word(s.s, fstr); }\n+      ast::lit_float(fstr) { word(s.s, istr::to_estr(fstr)); }\n       ast::lit_mach_int(mach, val) {\n         word(s.s, istr::to_estr(int::str(val as int)));\n         word(s.s, ast_util::ty_mach_to_str(mach));\n       }\n       ast::lit_mach_float(mach, val) {\n         // val is already a str\n-        word(s.s, val);\n+        word(s.s, istr::to_estr(val));\n         word(s.s, ast_util::ty_mach_to_str(mach));\n       }\n       ast::lit_nil. { word(s.s, \"()\"); }"}]}