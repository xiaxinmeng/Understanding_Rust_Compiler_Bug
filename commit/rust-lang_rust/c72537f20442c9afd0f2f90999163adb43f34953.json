{"sha": "c72537f20442c9afd0f2f90999163adb43f34953", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjUzN2YyMDQ0MmM5YWZkMGYyZjkwOTk5MTYzYWRiNDNmMzQ5NTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-02-18T01:23:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-02T22:34:07Z"}, "message": "std: Add `arch` and `simd` modules\n\nThis commit imports the `stdsimd` crate into the standard library,\ncreating an `arch` and `simd` module inside of both libcore and libstd.\nBoth of these modules are **unstable** and will continue to be so until\nRFC 2335 is stabilized.\n\nAs a brief recap, the modules are organized as so:\n\n* `arch` contains all current architectures with intrinsics, for example\n  `std::arch::x86`, `std::arch::x86_64`, `std::arch::arm`, etc. These\n  modules contain all of the intrinsics defined for the platform, like\n  `_mm_set1_epi8`.\n* In the standard library, the `arch` module also exports a\n  `is_target_feature_detected` macro which performs runtime detection to\n  determine whether a target feature is available at runtime.\n* The `simd` module contains experimental versions of strongly-typed\n  lane-aware SIMD primitives, to be fully fleshed out in a future RFC.\n\nThe main purpose of this commit is to start pulling in all these\nintrinsics and such into the standard library on nightly and allow\ntesting and such. This'll help allow users to easily kick the tires and\nsee if intrinsics work as well as allow us to test out all the\ninfrastructure for moving the intrinsics into the standard library.", "tree": {"sha": "ced867b730a0fbde2be5de42f069af5599f874c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced867b730a0fbde2be5de42f069af5599f874c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72537f20442c9afd0f2f90999163adb43f34953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72537f20442c9afd0f2f90999163adb43f34953", "html_url": "https://github.com/rust-lang/rust/commit/c72537f20442c9afd0f2f90999163adb43f34953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72537f20442c9afd0f2f90999163adb43f34953/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb18a92ad87852c4c5d6726b8fbe8c38deda4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb18a92ad87852c4c5d6726b8fbe8c38deda4ba", "html_url": "https://github.com/rust-lang/rust/commit/9cb18a92ad87852c4c5d6726b8fbe8c38deda4ba"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "5b7fd48129929d0fa3f33118b47fb10a78e7884e", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c72537f20442c9afd0f2f90999163adb43f34953/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/c72537f20442c9afd0f2f90999163adb43f34953/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=c72537f20442c9afd0f2f90999163adb43f34953", "patch": "@@ -50,3 +50,6 @@\n [submodule \"src/llvm-emscripten\"]\n \tpath = src/llvm-emscripten\n \turl = https://github.com/rust-lang/llvm\n+[submodule \"src/stdsimd\"]\n+\tpath = src/stdsimd\n+\turl = https://github.com/rust-lang-nursery/stdsimd"}, {"sha": "1efd605112dc2fb46f2c3c599ebc159c595d9348", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c72537f20442c9afd0f2f90999163adb43f34953/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72537f20442c9afd0f2f90999163adb43f34953/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c72537f20442c9afd0f2f90999163adb43f34953", "patch": "@@ -68,32 +68,39 @@\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n+#![feature(attr_literals)]\n #![feature(cfg_target_feature)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(doc_spotlight)]\n #![feature(fundamental)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(intrinsics)]\n+#![feature(iterator_flatten)]\n+#![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n+#![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n+#![feature(rustc_const_unstable)]\n+#![feature(simd_ffi)]\n #![feature(specialization)]\n #![feature(staged_api)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(target_feature)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![feature(doc_spotlight)]\n-#![feature(rustc_const_unstable)]\n-#![feature(iterator_repeat_with)]\n-#![feature(iterator_flatten)]\n+\n+#![cfg_attr(stage0, allow(unused_attributes))]\n \n #[prelude_import]\n #[allow(unused)]\n@@ -179,3 +186,21 @@ mod char_private;\n mod iter_private;\n mod tuple;\n mod unit;\n+\n+// Pull in the the `coresimd` crate directly into libcore. This is where all the\n+// architecture-specific (and vendor-specific) intrinsics are defined. AKA\n+// things like SIMD and such. Note that the actual source for all this lies in a\n+// different repository, rust-lang-nursery/stdsimd. That's why the setup here is\n+// a bit wonky.\n+#[path = \"../stdsimd/coresimd/mod.rs\"]\n+#[allow(missing_docs, missing_debug_implementations, dead_code)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))] // allow changes to how stdsimd works in stage0\n+mod coresimd;\n+\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))]\n+pub use coresimd::simd;\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))]\n+pub use coresimd::arch;"}, {"sha": "a7e1c0ce732e0adfdb14eb897216a0f13c2af200", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c72537f20442c9afd0f2f90999163adb43f34953/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72537f20442c9afd0f2f90999163adb43f34953/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c72537f20442c9afd0f2f90999163adb43f34953", "patch": "@@ -299,6 +299,7 @@\n #![feature(rand)]\n #![feature(raw)]\n #![feature(rustc_attrs)]\n+#![feature(stdsimd)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]\n@@ -501,6 +502,35 @@ mod memchr;\n // compiler\n pub mod rt;\n \n+// Pull in the the `stdsimd` crate directly into libstd. This is the same as\n+// libcore's arch/simd modules where the source of truth here is in a different\n+// repository, but we pull things in here manually to get it into libstd.\n+//\n+// Note that the #[cfg] here is intended to do two things. First it allows us to\n+// change the rustc implementation of intrinsics in stage0 by not compiling simd\n+// intrinsics in stage0. Next it doesn't compile anything in test mode as\n+// stdsimd has tons of its own tests which we don't want to run.\n+#[path = \"../stdsimd/stdsimd/mod.rs\"]\n+#[allow(missing_debug_implementations, missing_docs, dead_code)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+mod stdsimd;\n+\n+// A \"fake\" module needed by the `stdsimd` module to compile, not actually\n+// exported though.\n+#[cfg(not(stage0))]\n+mod coresimd {\n+    pub use core::arch;\n+    pub use core::simd;\n+}\n+\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+pub use stdsimd::simd;\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+pub use stdsimd::arch;\n+\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "678cbd325c84070c9dbe4303969fbd2734c0b4ee", "filename": "src/stdsimd", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=c72537f20442c9afd0f2f90999163adb43f34953", "patch": "@@ -0,0 +1 @@\n+Subproject commit 678cbd325c84070c9dbe4303969fbd2734c0b4ee"}, {"sha": "1def3048ce07150b2a4dc4023b46f76a131a0523", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c72537f20442c9afd0f2f90999163adb43f34953/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72537f20442c9afd0f2f90999163adb43f34953/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c72537f20442c9afd0f2f90999163adb43f34953", "patch": "@@ -71,6 +71,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/librustc/mir/interpret\",\n         \"src/librustc_mir/interpret\",\n         \"src/target\",\n+        \"src/stdsimd\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}