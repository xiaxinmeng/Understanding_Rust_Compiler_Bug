{"sha": "ae38f4866a9fd012a107270db1bf6aff765e8188", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzhmNDg2NmE5ZmQwMTJhMTA3MjcwZGIxYmY2YWZmNzY1ZTgxODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-02T08:14:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-02T08:14:57Z"}, "message": "Auto merge of #1092 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "9ac2a033237b32b206926e63931986a54f1a79f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac2a033237b32b206926e63931986a54f1a79f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae38f4866a9fd012a107270db1bf6aff765e8188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae38f4866a9fd012a107270db1bf6aff765e8188", "html_url": "https://github.com/rust-lang/rust/commit/ae38f4866a9fd012a107270db1bf6aff765e8188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae38f4866a9fd012a107270db1bf6aff765e8188/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde718f083dc299ed2abf9cbdb11284b203776bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde718f083dc299ed2abf9cbdb11284b203776bf", "html_url": "https://github.com/rust-lang/rust/commit/cde718f083dc299ed2abf9cbdb11284b203776bf"}, {"sha": "dcdd68b9364fb5410fccd5f66d334f6436273c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdd68b9364fb5410fccd5f66d334f6436273c4c", "html_url": "https://github.com/rust-lang/rust/commit/dcdd68b9364fb5410fccd5f66d334f6436273c4c"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "3a0cf96e132750c618127f839b3d28ac9efc6235", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -1 +1 @@\n-4007d4ef26eab44bdabc2b7574d032152264d3ad\n+f5c81e0a986e4285d3d0fd781a1bd475753eb12c"}, {"sha": "dbb14b7bb189a2ebd72cbf31cdad430b664bd883", "filename": "src/eval.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -24,6 +24,12 @@ pub struct MiriConfig {\n     pub seed: Option<u64>,\n }\n \n+/// Details of premature program termination.\n+pub enum TerminationInfo {\n+    Exit(i64),\n+    Abort,\n+}\n+\n /// Returns a freshly created `InterpCx`, along with an `MPlaceTy` representing\n /// the location where the return value of the `start` lang item will be\n /// written to.\n@@ -200,7 +206,15 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n         Err(mut e) => {\n             // Special treatment for some error kinds\n             let msg = match e.kind {\n-                InterpError::Exit(code) => return Some(code.into()),\n+                InterpError::MachineStop(ref info) => {\n+                    let info = info.downcast_ref::<TerminationInfo>()\n+                        .expect(\"invalid MachineStop payload\");\n+                    match info {\n+                        TerminationInfo::Exit(code) => return Some(*code),\n+                        TerminationInfo::Abort =>\n+                            format!(\"the evaluated program aborted execution\")\n+                    }\n+                }\n                 err_unsup!(NoMirFor(..)) =>\n                     format!(\"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\", e),\n                 _ => e.to_string()"}, {"sha": "05234e880f58cd961685f3624b3b50bab0afcacd", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -47,7 +47,7 @@ pub use crate::machine::{\n     PAGE_SIZE, STACK_ADDR, STACK_SIZE, NUM_CPUS,\n     MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n };\n-pub use crate::eval::{eval_main, create_ecx, MiriConfig};\n+pub use crate::eval::{eval_main, create_ecx, MiriConfig, TerminationInfo};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power."}, {"sha": "114931e435a4c6e982fbb116b387a6117ff409b3", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -152,9 +152,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"exit\" | \"ExitProcess\" => {\n-                // it's really u32 for ExitProcess, but we have to put it into the `Exit` error variant anyway\n+                // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n                 let code = this.read_scalar(args[0])?.to_i32()?;\n-                return Err(InterpError::Exit(code).into());\n+                let ti = Box::new(TerminationInfo::Exit(code.into()));\n+                return Err(InterpError::MachineStop(ti).into());\n             }\n             _ => {\n                 if let Some(p) = ret {"}, {"sha": "0cb51d593199ea83fe0bb2971ae24793d09ea30d", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -34,9 +34,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Handle diverging intrinsics.\n         let (dest, ret) = match intrinsic_name {\n             \"abort\" => {\n-                // FIXME: Add a better way of indicating 'abnormal' termination,\n-                // since this is not really an 'unsupported' behavior\n-                throw_unsup_format!(\"the evaluated program aborted!\");\n+                let ti = Box::new(TerminationInfo::Abort);\n+                return Err(InterpError::MachineStop(ti).into());\n             }\n             \"miri_start_panic\" => return this.handle_miri_start_panic(args, unwind),\n             _ => {"}, {"sha": "759762196b758ffa17f3ec7f26a93403b7a55f1a", "filename": "tests/compile-fail/double_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/tests%2Fcompile-fail%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/tests%2Fcompile-fail%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdouble_panic.rs?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -1,4 +1,4 @@\n- //error-pattern: the evaluated program aborted\n+ // error-pattern: the evaluated program aborted\n struct Foo;\n impl Drop for Foo {\n     fn drop(&mut self) {"}, {"sha": "4c8b4cba9005ff4262a326b6bb3dc5e4b151ae6e", "filename": "tests/run-pass/catch_panic.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae38f4866a9fd012a107270db1bf6aff765e8188/tests%2Frun-pass%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38f4866a9fd012a107270db1bf6aff765e8188/tests%2Frun-pass%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcatch_panic.rs?ref=ae38f4866a9fd012a107270db1bf6aff765e8188", "patch": "@@ -70,17 +70,13 @@ fn test(do_panic: impl FnOnce(usize) -> !) {\n         do_panic_counter(do_panic)\n     })).expect_err(\"do_panic() did not panic!\");\n \n-    // See if we can extract panic message.\n-    match res.downcast::<String>() {\n-        Ok(s) => {\n-            eprintln!(\"Caught panic message (String): {}\", s);\n-        }\n-        Err(res) =>\n-            if let Ok(s) = res.downcast::<&str>() {\n-                eprintln!(\"Caught panic message (&str): {}\", s);\n-            } else {\n-                eprintln!(\"Failed get caught panic message.\");\n-            }\n+    // See if we can extract the panic message.\n+    if let Some(s) = res.downcast_ref::<String>() {\n+        eprintln!(\"Caught panic message (String): {}\", s);\n+    } else if let Some(s) = res.downcast_ref::<&str>() {\n+        eprintln!(\"Caught panic message (&str): {}\", s);\n+    } else {\n+        eprintln!(\"Failed get caught panic message.\");\n     }\n \n     // Test flags."}]}