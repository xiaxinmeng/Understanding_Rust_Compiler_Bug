{"sha": "1316281f2d9ee2ae0aa635741a418e32b59dcc26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMTYyODFmMmQ5ZWUyYWUwYWE2MzU3NDFhNDE4ZTMyYjU5ZGNjMjY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-02T15:10:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-02T15:10:42Z"}, "message": "Rollup merge of #42310 - scottmcm:deprecate-range-stepby, r=alexcrichton\n\nDeprecate range-specific `step_by`\n\nDeprecation attributes and test updates only.\n\nWas replaced by an any-iterator version in https://github.com/rust-lang/rust/pull/41439\n\nLast follow-up (this release) to https://github.com/rust-lang/rust/pull/42110#issuecomment-303210138\n\nr? @alexcrichton", "tree": {"sha": "82b5454721067116b37ab84f229f66604b56940c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b5454721067116b37ab84f229f66604b56940c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1316281f2d9ee2ae0aa635741a418e32b59dcc26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1316281f2d9ee2ae0aa635741a418e32b59dcc26", "html_url": "https://github.com/rust-lang/rust/commit/1316281f2d9ee2ae0aa635741a418e32b59dcc26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1316281f2d9ee2ae0aa635741a418e32b59dcc26/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7", "html_url": "https://github.com/rust-lang/rust/commit/551dd7c7a2ae1fa94eff953fd418b5bc664eb9a7"}, {"sha": "15dff84dc3a640be4b6e49f45614c7d1806c8f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/15dff84dc3a640be4b6e49f45614c7d1806c8f56", "html_url": "https://github.com/rust-lang/rust/commit/15dff84dc3a640be4b6e49f45614c7d1806c8f56"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "8af8786994e407ba321a207805b7182d5debaddf", "filename": "src/libcollections/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=1316281f2d9ee2ae0aa635741a418e32b59dcc26", "patch": "@@ -16,12 +16,12 @@\n #![feature(collections)]\n #![feature(const_fn)]\n #![feature(exact_size_is_empty)]\n+#![feature(iterator_step_by)]\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(rand)]\n #![feature(slice_rotate)]\n #![feature(splice)]\n-#![feature(step_by)]\n #![feature(str_escape)]\n #![feature(test)]\n #![feature(unboxed_closures)]"}, {"sha": "a992351653d7b996e2f2100c57f5c8c1c4ee82a1", "filename": "src/libcollections/tests/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcollections%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcollections%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec_deque.rs?ref=1316281f2d9ee2ae0aa635741a418e32b59dcc26", "patch": "@@ -510,7 +510,8 @@ fn test_from_iter() {\n     let u: Vec<_> = deq.iter().cloned().collect();\n     assert_eq!(u, v);\n \n-    let seq = (0..).step_by(2).take(256);\n+    // FIXME #27741: Remove `.skip(0)` when Range::step_by is fully removed\n+    let seq = (0..).skip(0).step_by(2).take(256);\n     let deq: VecDeque<_> = seq.collect();\n     for (i, &x) in deq.iter().enumerate() {\n         assert_eq!(2 * i, x);"}, {"sha": "34563c88d0ad13b0b6685c01c736371a728644e1", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=1316281f2d9ee2ae0aa635741a418e32b59dcc26", "patch": "@@ -313,6 +313,9 @@ pub use self::iterator::Iterator;\n pub use self::range::Step;\n #[unstable(feature = \"step_by\", reason = \"recent addition\",\n            issue = \"27741\")]\n+#[rustc_deprecated(since = \"1.19.0\",\n+                   reason = \"replaced by `iter::StepBy`\")]\n+#[allow(deprecated)]\n pub use self::range::StepBy as DeprecatedStepBy;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9aea4477fb7fc604027231739c7045074b1aebeb", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=1316281f2d9ee2ae0aa635741a418e32b59dcc26", "patch": "@@ -252,6 +252,9 @@ step_impl_no_between!(u128 i128);\n #[derive(Clone, Debug)]\n #[unstable(feature = \"step_by\", reason = \"recent addition\",\n            issue = \"27741\")]\n+#[rustc_deprecated(since = \"1.19.0\",\n+                   reason = \"replaced by `iter::StepBy`\")]\n+#[allow(deprecated)]\n pub struct StepBy<A, R> {\n     step_by: A,\n     range: R,\n@@ -272,6 +275,9 @@ impl<A: Step> ops::RangeFrom<A> {\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n+    #[rustc_deprecated(since = \"1.19.0\",\n+                       reason = \"replaced by `Iterator::step_by`\")]\n+    #[allow(deprecated)]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -297,6 +303,9 @@ impl<A: Step> ops::Range<A> {\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n+    #[rustc_deprecated(since = \"1.19.0\",\n+                       reason = \"replaced by `Iterator::step_by`\")]\n+    #[allow(deprecated)]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -321,6 +330,9 @@ impl<A: Step> ops::RangeInclusive<A> {\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n+    #[rustc_deprecated(since = \"1.19.0\",\n+                       reason = \"replaced by `Iterator::step_by`\")]\n+    #[allow(deprecated)]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -331,6 +343,7 @@ impl<A: Step> ops::RangeInclusive<A> {\n \n #[unstable(feature = \"step_by\", reason = \"recent addition\",\n            issue = \"27741\")]\n+#[allow(deprecated)]\n impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n     A: Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -351,11 +364,13 @@ impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n+#[allow(deprecated)]\n impl<A> FusedIterator for StepBy<A, ops::RangeFrom<A>>\n     where A: Clone, for<'a> &'a A: Add<&'a A, Output = A> {}\n \n #[unstable(feature = \"step_by\", reason = \"recent addition\",\n            issue = \"27741\")]\n+#[allow(deprecated)]\n impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n     type Item = A;\n \n@@ -393,11 +408,13 @@ impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n+#[allow(deprecated)]\n impl<A: Step + Clone> FusedIterator for StepBy<A, ops::Range<A>> {}\n \n #[unstable(feature = \"inclusive_range\",\n            reason = \"recently added, follows RFC\",\n            issue = \"28237\")]\n+#[allow(deprecated)]\n impl<A: Step + Clone> Iterator for StepBy<A, ops::RangeInclusive<A>> {\n     type Item = A;\n \n@@ -437,6 +454,7 @@ impl<A: Step + Clone> Iterator for StepBy<A, ops::RangeInclusive<A>> {\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n+#[allow(deprecated)]\n impl<A: Step + Clone> FusedIterator for StepBy<A, ops::RangeInclusive<A>> {}\n \n macro_rules! range_exact_iter_impl {"}, {"sha": "4f9951cd1539931c06dfad7d0e0fb64fb9f51a53", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1316281f2d9ee2ae0aa635741a418e32b59dcc26/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=1316281f2d9ee2ae0aa635741a418e32b59dcc26", "patch": "@@ -12,6 +12,15 @@ use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n \n+// FIXME #27741: This is here to simplify calling Iterator::step_by. Remove\n+// once Range::step_by is completely gone (not just deprecated).\n+trait IterEx: Sized {\n+    fn iter_step_by(self, n: usize) -> StepBy<Self>;\n+}\n+impl<I:Iterator> IterEx for I {\n+    fn iter_step_by(self, n: usize) -> StepBy<Self> { self.step_by(n) }\n+}\n+\n #[test]\n fn test_lt() {\n     let empty: [isize; 0] = [];\n@@ -67,7 +76,7 @@ fn test_multi_iter() {\n \n #[test]\n fn test_counter_from_iter() {\n-    let it = (0..).step_by(5).take(10);\n+    let it = (0..).iter_step_by(5).take(10);\n     let xs: Vec<isize> = FromIterator::from_iter(it);\n     assert_eq!(xs, [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n }\n@@ -85,7 +94,7 @@ fn test_iterator_chain() {\n     }\n     assert_eq!(i, expected.len());\n \n-    let ys = (30..).step_by(10).take(4);\n+    let ys = (30..).iter_step_by(10).take(4);\n     let it = xs.iter().cloned().chain(ys);\n     let mut i = 0;\n     for x in it {\n@@ -147,15 +156,13 @@ fn test_iterator_chain_find() {\n #[test]\n fn test_iterator_step_by() {\n     // Identity\n-    // Replace with (0..).step_by(1) after Range::step_by gets removed\n-    let mut it = Iterator::step_by((0..), 1).take(3);\n+    let mut it = (0..).iter_step_by(1).take(3);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(1));\n     assert_eq!(it.next(), Some(2));\n     assert_eq!(it.next(), None);\n \n-    // Replace with (0..).step_by(3) after Range::step_by gets removed\n-    let mut it = Iterator::step_by((0..), 3).take(4);\n+    let mut it = (0..).iter_step_by(3).take(4);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(3));\n     assert_eq!(it.next(), Some(6));\n@@ -166,8 +173,7 @@ fn test_iterator_step_by() {\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {\n-    // Replace with (0..).step_by(0) after Range::step_by gets removed\n-    let mut it = Iterator::step_by((0..), 0);\n+    let mut it = (0..).iter_step_by(0);\n     it.next();\n }\n \n@@ -246,7 +252,7 @@ fn test_iterator_step_by_size_hint() {\n \n #[test]\n fn test_filter_map() {\n-    let it = (0..).step_by(1).take(10)\n+    let it = (0..).iter_step_by(1).take(10)\n         .filter_map(|x| if x % 2 == 0 { Some(x*x) } else { None });\n     assert_eq!(it.collect::<Vec<usize>>(), [0*0, 2*2, 4*4, 6*6, 8*8]);\n }\n@@ -648,7 +654,7 @@ fn test_iterator_scan() {\n fn test_iterator_flat_map() {\n     let xs = [0, 3, 6];\n     let ys = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    let it = xs.iter().flat_map(|&x| (x..).step_by(1).take(3));\n+    let it = xs.iter().flat_map(|&x| (x..).iter_step_by(1).take(3));\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, ys[i]);\n@@ -674,13 +680,13 @@ fn test_inspect() {\n #[test]\n fn test_cycle() {\n     let cycle_len = 3;\n-    let it = (0..).step_by(1).take(cycle_len).cycle();\n+    let it = (0..).iter_step_by(1).take(cycle_len).cycle();\n     assert_eq!(it.size_hint(), (usize::MAX, None));\n     for (i, x) in it.take(100).enumerate() {\n         assert_eq!(i % cycle_len, x);\n     }\n \n-    let mut it = (0..).step_by(1).take(0).cycle();\n+    let mut it = (0..).iter_step_by(1).take(0).cycle();\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n }\n@@ -759,7 +765,7 @@ fn test_iterator_min() {\n \n #[test]\n fn test_iterator_size_hint() {\n-    let c = (0..).step_by(1);\n+    let c = (0..).iter_step_by(1);\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let v2 = &[10, 11, 12];\n     let vi = v.iter();\n@@ -1081,6 +1087,8 @@ fn test_range() {\n \n #[test]\n fn test_range_step() {\n+    #![allow(deprecated)]\n+\n     assert_eq!((0..20).step_by(5).collect::<Vec<isize>>(), [0, 5, 10, 15]);\n     assert_eq!((20..0).step_by(-5).collect::<Vec<isize>>(), [20, 15, 10, 5]);\n     assert_eq!((20..0).step_by(-6).collect::<Vec<isize>>(), [20, 14, 8, 2]);"}]}