{"sha": "ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "node_id": "C_kwDOAAsO6NoAKGZmN2MzYjg1NGRmM2Y2MTM4MDI2MWZhMmQzMmNkNGMwODQzZWJjODM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-16T01:11:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-16T01:59:41Z"}, "message": "Don't install default opaque projection predicates in RPITIT associated type's param-env", "tree": {"sha": "26f558e576f0cc33aac1af6c456a980417fc6c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f558e576f0cc33aac1af6c456a980417fc6c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "html_url": "https://github.com/rust-lang/rust/commit/ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "html_url": "https://github.com/rust-lang/rust/commit/0949da8f4e309ac5e5035250bd662dfdbd5c32b4"}], "stats": {"total": 99, "additions": 78, "deletions": 21}, "files": [{"sha": "c063b76622763bab7a375bec3b604d632058ee4b", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1545,21 +1545,27 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n     {\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): Even with the new lowering\n+        // strategy, we can't just call `check_associated_item` on the new RPITITs,\n+        // because tests like `tests/ui/async-await/in-trait/implied-bounds.rs` will fail.\n+        // That's because we need to check that the bounds of the RPITIT hold using\n+        // the special substs that we create during opaque type lowering, otherwise we're\n+        // getting a bunch of early bound and free regions mixed up... Haven't looked too\n+        // deep into this, though.\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n-                // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) we should just check\n-                // `tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder`. Right now\n-                // `check_associated_type_bounds` is not called for RPITITs synthesized as\n-                // associated types. See `check_mod_type_wf` to see how synthesized associated\n-                // types are missed due to iterating over HIR.\n-                && tcx.is_impl_trait_in_trait(proj.def_id)\n-                && tcx.impl_trait_in_trait_parent_fn(proj.def_id) == fn_def_id.to_def_id()\n+                // RPITITs are always eagerly normalized into opaques, so always look for an\n+                // opaque here.\n+                && let ty::Alias(ty::Opaque, opaque_ty) = ty.kind()\n+                && let Some(opaque_def_id) = opaque_ty.def_id.as_local()\n+                && let opaque = tcx.hir().expect_item(opaque_def_id).expect_opaque_ty()\n+                && let hir::OpaqueTyOrigin::FnReturn(source) | hir::OpaqueTyOrigin::AsyncFn(source) = opaque.origin\n+                && source == fn_def_id\n             {\n-                let span = tcx.def_span(proj.def_id);\n-                let bounds = wfcx.tcx().explicit_item_bounds(proj.def_id);\n+                let span = tcx.def_span(opaque_ty.def_id);\n+                let bounds = wfcx.tcx().explicit_item_bounds(opaque_ty.def_id);\n                 let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n-                    let bound = ty::EarlyBinder(bound).subst(tcx, proj.substs);\n+                    let bound = ty::EarlyBinder(bound).subst(tcx, opaque_ty.substs);\n                     let normalized_bound = wfcx.normalize(span, None, bound);\n                     traits::wf::predicate_obligations(\n                         wfcx.infcx,"}, {"sha": "9fed1e57c92131f9bbe7a471e20c80115f8da433", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -117,16 +117,22 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n-    // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n-    // synthesized associated type doesn't have extra predicates to assume.\n-    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n-        return tcx.param_env(fn_def_id);\n-    }\n-\n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n+    // When computing the param_env of an RPITIT, use predicates of the containing function,\n+    // *except* for the additional assumption that the RPITIT normalizes to the trait method's\n+    // default opaque type. This is needed to properly check the item bounds of the assoc\n+    // type hold (`check_type_bounds`), since that method already installs a similar projection\n+    // bound, so they will conflict.\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): I don't like this, we should\n+    // at least be making sure that the generics in RPITITs and their parent fn don't\n+    // get out of alignment, or else we do actually need to substitute these predicates.\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        predicates = tcx.predicates_of(fn_def_id).instantiate_identity(tcx).predicates;\n+    }\n+\n     // Finally, we have to normalize the bounds in the environment, in\n     // case they contain any associated type projections. This process\n     // can yield errors if the put in illegal associated types, like\n@@ -160,7 +166,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n \n     let local_did = def_id.as_local();\n-    let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): This isn't correct for\n+    // RPITITs in const trait fn.\n+    let hir_id = local_did.and_then(|def_id| tcx.opt_local_def_id_to_hir_id(def_id));\n \n     // FIXME(consts): This is not exactly in line with the constness query.\n     let constness = match hir_id {"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:3:12\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "163bb4fcf773daca83158c50d70b7d0ca259cae8", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/default-body-type-err-2.rs:8:9\n+  --> $DIR/default-body-type-err-2.rs:10:9\n    |\n LL |         42\n    |         ^^- help: try using a conversion method: `.to_string()`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.stderr"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/default-body-type-err-2.rs:10:9\n+   |\n+LL |         42\n+   |         ^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         expected `String`, found integer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "623237763100dd7741e88fe5050366650cd9b66f", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![allow(incomplete_features)]\n #![feature(async_fn_in_trait)]"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n-  --> $DIR/default-body-type-err.rs:7:22\n+  --> $DIR/default-body-type-err.rs:10:22\n    |\n LL |     fn lol(&self) -> impl Deref<Target = String> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err.stderr"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n+  --> $DIR/default-body-type-err.rs:10:22\n+   |\n+LL |     fn lol(&self) -> impl Deref<Target = String> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`\n+LL |\n+LL |         &1i32\n+   |         ----- return type was inferred to be `&i32` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "9bd5b7779898b5e0a55d225ef4a84fb7be7ceb01", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![allow(incomplete_features)]\n #![feature(return_position_impl_trait_in_trait)]\n "}, {"sha": "ab6a51c6bcb84d8842eaad3e0c91e66125b88833", "filename": "tests/ui/impl-trait/in-trait/default-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff7c3b854df3f61380261fa2d32cd4c0843ebc83/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=ff7c3b854df3f61380261fa2d32cd4c0843ebc83", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}]}