{"sha": "e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MGY0ZWVhYWRjZWEwYzFkY2MyOGUxNWRmZTkxZGQzODM5M2E2ZGE=", "commit": {"author": {"name": "Colin Finck", "email": "colin.finck@rwth-aachen.de", "date": "2018-07-30T13:50:51Z"}, "committer": {"name": "Colin Finck", "email": "colin.finck@rwth-aachen.de", "date": "2018-07-30T13:50:51Z"}, "message": "Add targets for HermitCore (https://hermitcore.org) to the Rust compiler and port libstd to it.\n\nAs a start, the port uses the simplest possible configuration (no jemalloc, abort on panic)\nand makes use of existing Unix-specific code wherever possible.\nIt adds targets for x86_64 (current main HermitCore platform) and aarch64 (HermitCore platform\nunder development).\n\nTogether with the patches to \"liblibc\" and \"llvm\", this enables HermitCore applications to be\nwritten in Rust.", "tree": {"sha": "c61ad5332011435e2efb2ac7feaebd227d82ffbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c61ad5332011435e2efb2ac7feaebd227d82ffbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "html_url": "https://github.com/rust-lang/rust/commit/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/comments", "author": {"login": "ColinFinck", "id": 8110912, "node_id": "MDQ6VXNlcjgxMTA5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8110912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColinFinck", "html_url": "https://github.com/ColinFinck", "followers_url": "https://api.github.com/users/ColinFinck/followers", "following_url": "https://api.github.com/users/ColinFinck/following{/other_user}", "gists_url": "https://api.github.com/users/ColinFinck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColinFinck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColinFinck/subscriptions", "organizations_url": "https://api.github.com/users/ColinFinck/orgs", "repos_url": "https://api.github.com/users/ColinFinck/repos", "events_url": "https://api.github.com/users/ColinFinck/events{/privacy}", "received_events_url": "https://api.github.com/users/ColinFinck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ColinFinck", "id": 8110912, "node_id": "MDQ6VXNlcjgxMTA5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8110912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColinFinck", "html_url": "https://github.com/ColinFinck", "followers_url": "https://api.github.com/users/ColinFinck/followers", "following_url": "https://api.github.com/users/ColinFinck/following{/other_user}", "gists_url": "https://api.github.com/users/ColinFinck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColinFinck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColinFinck/subscriptions", "organizations_url": "https://api.github.com/users/ColinFinck/orgs", "repos_url": "https://api.github.com/users/ColinFinck/repos", "events_url": "https://api.github.com/users/ColinFinck/events{/privacy}", "received_events_url": "https://api.github.com/users/ColinFinck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bbcd005b30582d07f1a39dcf50f77b54e055828", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bbcd005b30582d07f1a39dcf50f77b54e055828", "html_url": "https://github.com/rust-lang/rust/commit/7bbcd005b30582d07f1a39dcf50f77b54e055828"}], "stats": {"total": 592, "additions": 576, "deletions": 16}, "files": [{"sha": "39768301b9d2c5ffb25a3b54754ad5e338893759", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -174,7 +174,7 @@ mod platform {\n         }\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\"))]\n+    #[cfg(any(target_os = \"android\", target_os = \"hermit\", target_os = \"redox\", target_os = \"solaris\"))]\n     #[inline]\n     unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n         // On android we currently target API level 9 which unfortunately\n@@ -197,7 +197,7 @@ mod platform {\n         libc::memalign(layout.align(), layout.size()) as *mut u8\n     }\n \n-    #[cfg(not(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\")))]\n+    #[cfg(not(any(target_os = \"android\", target_os = \"hermit\", target_os = \"redox\", target_os = \"solaris\")))]\n     #[inline]\n     unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n         let mut out = ptr::null_mut();"}, {"sha": "6b81c62e48b87c57077f64a2f170ade5732414eb", "filename": "src/librustc_target/spec/aarch64_unknown_hermit.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_hermit.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::hermit_base::opts();\n+    base.max_atomic_width = Some(128);\n+    base.abi_blacklist = super::arm_base::abi_blacklist();\n+    base.linker = Some(\"aarch64-hermit-gcc\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"aarch64-unknown-hermit\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"hermit\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "2a24f771e92897811a9c5ad1ed48fd0c547ee038", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![\n+        \"-Wl,-Bstatic\".to_string(),\n+        \"-Wl,--no-dynamic-linker\".to_string(),\n+        \"-Wl,--gc-sections\".to_string(),\n+        \"-Wl,--as-needed\".to_string(),\n+    ]);\n+\n+    TargetOptions {\n+        exe_allocation_crate: None,\n+        executables: true,\n+        has_elf_tls: true,\n+        linker_is_gnu: true,\n+        no_default_libraries: false,\n+        panic_strategy: PanicStrategy::Abort,\n+        position_independent_executables: false,\n+        pre_link_args: args,\n+        relocation_model: \"static\".to_string(),\n+        target_family: Some(\"unix\".to_string()),\n+        tls_model: \"local-exec\".to_string(),\n+        .. Default::default()\n+    }\n+}"}, {"sha": "6c2d16d6a17eb7d9298fbf1582c498db30ca41e2", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -62,6 +62,7 @@ mod cloudabi_base;\n mod dragonfly_base;\n mod freebsd_base;\n mod haiku_base;\n+mod hermit_base;\n mod linux_base;\n mod linux_musl_base;\n mod openbsd_base;\n@@ -373,6 +374,9 @@ supported_targets! {\n     (\"armv7-unknown-cloudabi-eabihf\", armv7_unknown_cloudabi_eabihf),\n     (\"i686-unknown-cloudabi\", i686_unknown_cloudabi),\n     (\"x86_64-unknown-cloudabi\", x86_64_unknown_cloudabi),\n+\n+    (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n+    (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "9f9f2e6ec43e9bbde72d01e86f94c6b5d639fc60", "filename": "src/librustc_target/spec/x86_64_unknown_hermit.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::hermit_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.linker = Some(\"x86_64-hermit-gcc\".to_string());\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-hermit\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"hermit\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "d2e751668a67b1bf6f4f27dda2b516f84bde687b", "filename": "src/libstd/os/hermit/fs.rs", "status": "added", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhermit%2Ffs.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -0,0 +1,389 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::hermit::raw;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned [`stat`] are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    ///\n+    /// [`stat`]: ../../../../std/os/linux/raw/struct.stat.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let stat = meta.as_raw_stat();\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    /// Returns the device ID on which this file resides.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_dev());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ino());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    /// Returns the file type and mode.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mode());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    /// Returns the number of hard links to file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_nlink());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    /// Returns the user ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_uid());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    /// Returns the group ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_gid());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    /// Returns the device ID that this file represents. Only relevant for special file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_rdev());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    /// Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n+    ///\n+    /// The size of a symbolic link is the length of the pathname it contains,\n+    /// without a terminating null byte.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_size());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    /// Returns the last access time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_atime());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    /// Returns the last access time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_atime_nsec());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    /// Returns the last modification time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mtime());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    /// Returns the last modification time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mtime_nsec());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    /// Returns the last status change time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ctime());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    /// Returns the last status change time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ctime_nsec());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    /// Returns the \"preferred\" blocksize for efficient filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_blksize());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    /// Returns the number of blocks allocated to the file, 512-byte units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_blocks());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat64\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "fcb22cdad641f1bbd3f6fc8cf43755ab088d00ad", "filename": "src/libstd/os/hermit/mod.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhermit%2Fmod.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! HermitCore-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod raw;\n+pub mod fs;"}, {"sha": "282afe0b6e1c028d401511242cbea6aa31251c8b", "filename": "src/libstd/os/hermit/raw.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fhermit%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fhermit%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhermit%2Fraw.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! HermitCore-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n+#![allow(missing_debug_implementations)]\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub use libc::pthread_t;\n+\n+#[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub use libc::{dev_t, mode_t, off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};"}, {"sha": "c384ec9168ac4428889fd2ea5df4760f3f1ddd65", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -47,6 +47,7 @@ cfg_if! {\n         #[cfg(target_os = \"solaris\")]    pub mod solaris;\n         #[cfg(target_os = \"emscripten\")] pub mod emscripten;\n         #[cfg(target_os = \"fuchsia\")]    pub mod fuchsia;\n+        #[cfg(target_os = \"hermit\")]     pub mod hermit;\n \n         #[cfg(any(target_os = \"redox\", unix))]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7e32ec1347e9e7be99f48221c64a793d4e2f72ee", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -66,7 +66,8 @@ impl DoubleEndedIterator for Args {\n           target_os = \"emscripten\",\n           target_os = \"haiku\",\n           target_os = \"l4re\",\n-          target_os = \"fuchsia\"))]\n+          target_os = \"fuchsia\",\n+          target_os = \"hermit\"))]\n mod imp {\n     use os::unix::prelude::*;\n     use ptr;"}, {"sha": "b3ac9e5c140f4392db1f27d99e8043883dd939c6", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -41,13 +41,15 @@ impl Condvar {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"l4re\",\n-              target_os = \"android\"))]\n+              target_os = \"android\",\n+              target_os = \"hermit\"))]\n     pub unsafe fn init(&mut self) {}\n \n     #[cfg(not(any(target_os = \"macos\",\n                   target_os = \"ios\",\n                   target_os = \"l4re\",\n-                  target_os = \"android\")))]\n+                  target_os = \"android\",\n+                  target_os = \"hermit\")))]\n     pub unsafe fn init(&mut self) {\n         use mem;\n         let mut attr: libc::pthread_condattr_t = mem::uninitialized();\n@@ -83,7 +85,7 @@ impl Condvar {\n     // where we configure condition variable to use monotonic clock (instead of\n     // default system clock). This approach avoids all problems that result\n     // from changes made to the system time.\n-    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\")))]\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\", target_os = \"hermit\")))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n         use mem;\n \n@@ -113,7 +115,7 @@ impl Condvar {\n     // This implementation is modeled after libcxx's condition_variable\n     // https://github.com/llvm-mirror/libcxx/blob/release_35/src/condition_variable.cpp#L46\n     // https://github.com/llvm-mirror/libcxx/blob/release_35/include/__mutex_base#L367\n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\", target_os = \"hermit\"))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, mut dur: Duration) -> bool {\n         use ptr;\n         use time::Instant;"}, {"sha": "ad116c57f557e1c73fe8ae440073d2641d671fa7", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -172,3 +172,14 @@ pub mod os {\n     pub const EXE_SUFFIX: &'static str = \"\";\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n+\n+#[cfg(target_os = \"hermit\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"hermit\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}"}, {"sha": "c13a0fea1e05c8f09b1aa29956f28d7d1dcc5b61", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -20,7 +20,7 @@\n // fallback implementation to use as well.\n //\n // Due to rust-lang/rust#18804, make sure this is not generic!\n-#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\"))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n     use libc;\n     use mem;"}, {"sha": "7a89d9857bbcf341c95c3a8955b82933e6c26560", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -325,12 +325,12 @@ impl DirEntry {\n         lstat(&self.path())\n     }\n \n-    #[cfg(any(target_os = \"solaris\", target_os = \"haiku\"))]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"haiku\", target_os = \"hermit\"))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         lstat(&self.path()).map(|m| m.file_type())\n     }\n \n-    #[cfg(not(any(target_os = \"solaris\", target_os = \"haiku\")))]\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"haiku\", target_os = \"hermit\")))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -352,7 +352,8 @@ impl DirEntry {\n               target_os = \"solaris\",\n               target_os = \"haiku\",\n               target_os = \"l4re\",\n-              target_os = \"fuchsia\"))]\n+              target_os = \"fuchsia\",\n+              target_os = \"hermit\"))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n     }\n@@ -383,7 +384,8 @@ impl DirEntry {\n               target_os = \"linux\",\n               target_os = \"emscripten\",\n               target_os = \"l4re\",\n-              target_os = \"haiku\"))]\n+              target_os = \"haiku\",\n+              target_os = \"hermit\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()"}, {"sha": "c738003caf1d9b220a980c1006b79f7ce6eeeb5d", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -28,6 +28,7 @@ use libc;\n #[cfg(all(not(dox), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n #[cfg(all(not(dox), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n #[cfg(all(not(dox), target_os = \"l4re\"))]      pub use os::linux as platform;\n+#[cfg(all(not(dox), target_os = \"hermit\"))]    pub use os::hermit as platform;\n \n pub use self::rand::hashmap_random_keys;\n pub use libc::strlen;"}, {"sha": "1d92e8fc97c7aa5690389bc17a75f5f942f75ebb", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -47,6 +47,7 @@ extern {\n                    target_os = \"netbsd\",\n                    target_os = \"openbsd\",\n                    target_os = \"android\",\n+                   target_os = \"hermit\",\n                    target_env = \"newlib\"),\n                link_name = \"__errno\")]\n     #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n@@ -376,7 +377,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\"))]\n+#[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\", target_os = \"hermit\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     use io::ErrorKind;\n     Err(io::Error::new(ErrorKind::Other, \"Not yet implemented!\"))"}, {"sha": "f3a45d24657399dd33cdd564bc1b09c95f0c1dfc", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -138,7 +138,8 @@ impl Thread {\n               target_os = \"solaris\",\n               target_os = \"haiku\",\n               target_os = \"l4re\",\n-              target_os = \"emscripten\"))]\n+              target_os = \"emscripten\",\n+              target_os = \"hermit\"))]\n     pub fn set_name(_name: &CStr) {\n         // Newlib, Illumos, Haiku, and Emscripten have no way to set a thread name.\n     }"}, {"sha": "0b1fb726357e1056d8685ce50e338843d842c5a8", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -345,9 +345,9 @@ mod inner {\n         }\n     }\n \n-    #[cfg(not(target_os = \"dragonfly\"))]\n+    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"hermit\")))]\n     pub type clock_t = libc::c_int;\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"dragonfly\", target_os = \"hermit\"))]\n     pub type clock_t = libc::c_ulong;\n \n     fn now(clock: clock_t) -> Timespec {"}, {"sha": "bbce87a7c9adf699d81c27099087c2815cccdc57", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -109,6 +109,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"x86_64-sun-solaris\",\n     \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n+    \"x86_64-unknown-hermit\",\n     \"x86_64-unknown-linux-gnu\",\n     \"x86_64-unknown-linux-gnux32\",\n     \"x86_64-unknown-linux-musl\","}, {"sha": "2a716970ca7b9a03edead9992cc41fa2dc203e0b", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=e50f4eeaadcea0c1dcc28e15dfe91dd38393a6da", "patch": "@@ -25,6 +25,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"freebsd\", \"freebsd\"),\n     (\"fuchsia\", \"fuchsia\"),\n     (\"haiku\", \"haiku\"),\n+    (\"hermit\", \"hermit\"),\n     (\"ios\", \"ios\"),\n     (\"l4re\", \"l4re\"),\n     (\"linux\", \"linux\"),"}]}