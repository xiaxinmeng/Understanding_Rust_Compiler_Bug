{"sha": "b4defec768e179f0cf3e83faaa5b1c4dac9e050a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZGVmZWM3NjhlMTc5ZjBjZjNlODNmYWFhNWIxYzRkYWM5ZTA1MGE=", "commit": {"author": {"name": "Ashley Mannix", "email": "kodraus@hey.com", "date": "2021-01-18T11:53:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-18T11:53:28Z"}, "message": "Rollup merge of #81105 - LingMan:init_directly, r=nagisa\n\nInitialize a few variables directly\n\nCurrently they are declared as `mut`, get initialized to a default value, and\nthen possibly overwritten.\n\nBy initializing to the final value directly, they don't need to be `mut` and\nit's clear that they don't get mutated elsewhere later on.", "tree": {"sha": "2f97a0b5f89983c3100289c524ea65805b33a60b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f97a0b5f89983c3100289c524ea65805b33a60b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4defec768e179f0cf3e83faaa5b1c4dac9e050a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBXa4CRBK7hj4Ov3rIwAAdHIIAGi3cFAJMOaPn87R9E/RbXEX\noC9qXMxTqTAW9mUFoxTbIrMnORrXbhiWDaPxC28Aj9ju72sExVUvcAtrJnCcalGj\nbF38cW1Bec2qQTqSL5GaBkNP1iXPahPOuwiMaeQALbvWW6IuHLrNDSnYXtDNrOTO\nvnk4EWS85mBKr49jucTLVTCO9QDufa/9eBcYu3qg47WYU9TFc+Bq+GnU1HZ/Bhnb\nX4Ql681hhBmgahUxaCHIImitFLI8JzPbqjvYEscmKIOV84Lf3712Ox259zkqYO7F\niOtUhJtJ6E7hBRooIxYXgCyaZJ1hZQL2cVaO+liWtQ+YiSyYILOZZxY4Bqrrtd0=\n=ZA0g\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f97a0b5f89983c3100289c524ea65805b33a60b\nparent d3ff9ac8e8899f06a32e85d9d1a8ec7b2abd6765\nparent 0a74e17211b9ba95555790be3a0a16a562d74280\nauthor Ashley Mannix <kodraus@hey.com> 1610970808 +1000\ncommitter GitHub <noreply@github.com> 1610970808 +1000\n\nRollup merge of #81105 - LingMan:init_directly, r=nagisa\n\nInitialize a few variables directly\n\nCurrently they are declared as `mut`, get initialized to a default value, and\nthen possibly overwritten.\n\nBy initializing to the final value directly, they don't need to be `mut` and\nit's clear that they don't get mutated elsewhere later on.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4defec768e179f0cf3e83faaa5b1c4dac9e050a", "html_url": "https://github.com/rust-lang/rust/commit/b4defec768e179f0cf3e83faaa5b1c4dac9e050a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4defec768e179f0cf3e83faaa5b1c4dac9e050a/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ff9ac8e8899f06a32e85d9d1a8ec7b2abd6765", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ff9ac8e8899f06a32e85d9d1a8ec7b2abd6765", "html_url": "https://github.com/rust-lang/rust/commit/d3ff9ac8e8899f06a32e85d9d1a8ec7b2abd6765"}, {"sha": "0a74e17211b9ba95555790be3a0a16a562d74280", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a74e17211b9ba95555790be3a0a16a562d74280", "html_url": "https://github.com/rust-lang/rust/commit/0a74e17211b9ba95555790be3a0a16a562d74280"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "64cc113dffe7ef9889b17c17f24cbb8a66250d76", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4defec768e179f0cf3e83faaa5b1c4dac9e050a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4defec768e179f0cf3e83faaa5b1c4dac9e050a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=b4defec768e179f0cf3e83faaa5b1c4dac9e050a", "patch": "@@ -1398,12 +1398,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn lifetime_deletion_span(&self, name: Ident, generics: &hir::Generics<'_>) -> Option<Span> {\n         generics.params.iter().enumerate().find_map(|(i, param)| {\n             if param.name.ident() == name {\n-                let mut in_band = false;\n-                if let hir::GenericParamKind::Lifetime { kind } = param.kind {\n-                    if let hir::LifetimeParamKind::InBand = kind {\n-                        in_band = true;\n-                    }\n-                }\n+                let in_band = matches!(\n+                    param.kind,\n+                    hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::InBand }\n+                );\n                 if in_band {\n                     Some(param.span)\n                 } else if generics.params.len() == 1 {\n@@ -1433,12 +1431,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         lifetime: &hir::Lifetime,\n     ) {\n         let name = lifetime.name.ident();\n-        let mut remove_decl = None;\n-        if let Some(parent_def_id) = self.tcx.parent(def_id) {\n-            if let Some(generics) = self.tcx.hir().get_generics(parent_def_id) {\n-                remove_decl = self.lifetime_deletion_span(name, generics);\n-            }\n-        }\n+        let remove_decl = self\n+            .tcx\n+            .parent(def_id)\n+            .and_then(|parent_def_id| self.tcx.hir().get_generics(parent_def_id))\n+            .and_then(|generics| self.lifetime_deletion_span(name, generics));\n \n         let mut remove_use = None;\n         let mut elide_use = None;"}]}