{"sha": "ecd7b48b25740160a6b8942085e8417acf7ebb28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDdiNDhiMjU3NDAxNjBhNmI4OTQyMDg1ZTg0MTdhY2Y3ZWJiMjg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-05T21:35:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-05T21:35:27Z"}, "message": "Rollup merge of #41678 - GuillaumeGomez:rustdoc-test-warnings, r=alexcrichton\n\nAdd option to display warnings in rustdoc\n\nPart of #41574.\n\nr? @alexcrichton\n\nThe output for this file:\n\n```rust\n/// ```\n/// fn foo(x: u32) {}\n///\n/// foo(2);\n/// let x = 1;\n/// panic!();\n/// ```\nfn foo() {}\n\n/// ```\n/// fn foo(x: u32) {}\n///\n/// foo(2);\n/// let x = 1;\n/// ```\nfn foo2() {}\n\n/// ```\n/// fn foo(x: u32) {}\n///\n/// foo(2);\n/// let x = 1;\n/// panic!();\n/// ```\nfn foo3() {}\n\nfn main() {\n}\n```\n\nis the following:\n\n```\n> ./build/x86_64-apple-darwin/stage1/bin/rustdoc -Z unstable-options --display-warnings --test test.rs\n\nrunning 3 tests\ntest test.rs - foo (line 1) ... FAILED\ntest test.rs - foo3 (line 18) ... FAILED\ntest test.rs - foo2 (line 10) ... ok\n\nsuccesses:\n\n---- test.rs - foo2 (line 10) stdout ----\n\twarning: unused variable: `x`\n --> <anon>:2:8\n  |\n2 | fn foo(x: u32) {}\n  |        ^\n  |\n  = note: #[warn(unused_variables)] on by default\n\nwarning: unused variable: `x`\n --> <anon>:5:5\n  |\n5 | let x = 1;\n  |     ^\n  |\n  = note: #[warn(unused_variables)] on by default\n\nsuccesses:\n    test.rs - foo2 (line 10)\n\nfailures:\n\n---- test.rs - foo (line 1) stdout ----\n\twarning: unused variable: `x`\n --> <anon>:2:8\n  |\n2 | fn foo(x: u32) {}\n  |        ^\n  |\n  = note: #[warn(unused_variables)] on by default\n\nwarning: unused variable: `x`\n --> <anon>:5:5\n  |\n5 | let x = 1;\n  |     ^\n  |\n  = note: #[warn(unused_variables)] on by default\n\nthread 'rustc' panicked at 'test executable failed:\n\nthread 'main' panicked at 'explicit panic', <anon>:6\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n', src/librustdoc/test.rs:317\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n---- test.rs - foo3 (line 18) stdout ----\n\twarning: unused variable: `x`\n --> <anon>:2:8\n  |\n2 | fn foo(x: u32) {}\n  |        ^\n  |\n  = note: #[warn(unused_variables)] on by default\n\nwarning: unused variable: `x`\n --> <anon>:5:5\n  |\n5 | let x = 1;\n  |     ^\n  |\n  = note: #[warn(unused_variables)] on by default\n\nthread 'rustc' panicked at 'test executable failed:\n\nthread 'main' panicked at 'explicit panic', <anon>:6\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n', src/librustdoc/test.rs:317\n\nfailures:\n    test.rs - foo (line 1)\n    test.rs - foo3 (line 18)\n\ntest result: FAILED. 1 passed; 2 failed; 0 ignored; 0 measured\n```", "tree": {"sha": "4fff80df6682530283aaa76ae64f69da38a9b739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fff80df6682530283aaa76ae64f69da38a9b739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd7b48b25740160a6b8942085e8417acf7ebb28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd7b48b25740160a6b8942085e8417acf7ebb28", "html_url": "https://github.com/rust-lang/rust/commit/ecd7b48b25740160a6b8942085e8417acf7ebb28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd7b48b25740160a6b8942085e8417acf7ebb28/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b091d6ed428a5edb67ad24850374e75e7f615c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/b091d6ed428a5edb67ad24850374e75e7f615c93", "html_url": "https://github.com/rust-lang/rust/commit/b091d6ed428a5edb67ad24850374e75e7f615c93"}, {"sha": "d5863e99853c22c649a1787f40c47b60795ea93d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5863e99853c22c649a1787f40c47b60795ea93d", "html_url": "https://github.com/rust-lang/rust/commit/d5863e99853c22c649a1787f40c47b60795ea93d"}], "stats": {"total": 106, "additions": 89, "deletions": 17}, "files": [{"sha": "9e2d85163335c6f066a493070c8b53aa968e2ef0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -104,7 +104,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 externs: config::Externs,\n                 input: Input,\n                 triple: Option<String>,\n-                maybe_sysroot: Option<PathBuf>) -> (clean::Crate, RenderInfo)\n+                maybe_sysroot: Option<PathBuf>,\n+                allow_warnings: bool) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -119,7 +120,7 @@ pub fn run_core(search_paths: SearchPaths,\n         maybe_sysroot: maybe_sysroot,\n         search_paths: search_paths,\n         crate_types: vec![config::CrateTypeRlib],\n-        lint_opts: vec![(warning_lint, lint::Allow)],\n+        lint_opts: if !allow_warnings { vec![(warning_lint, lint::Allow)] } else { vec![] },\n         lint_cap: Some(lint::Allow),\n         externs: externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),"}, {"sha": "1156fadf8c02c146dd01b4b5539c067dc67745fb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -173,6 +173,7 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                          or `#![doc(html_playground_url=...)]`\",\n                         \"URL\")),\n         unstable(optflag(\"\", \"enable-commonmark\", \"to enable commonmark doc rendering/testing\")),\n+        unstable(optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")),\n     ]\n }\n \n@@ -280,14 +281,16 @@ pub fn main_args(args: &[String]) -> isize {\n     let crate_name = matches.opt_str(\"crate-name\");\n     let playground_url = matches.opt_str(\"playground-url\");\n     let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n+    let display_warnings = matches.opt_present(\"display-warnings\");\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n-            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot, render_type)\n+            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot, render_type,\n+                                  display_warnings)\n         }\n         (true, false) => {\n             return test::run(input, cfgs, libs, externs, test_args, crate_name, maybe_sysroot,\n-                             render_type)\n+                             render_type, display_warnings)\n         }\n         (false, true) => return markdown::render(input,\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -389,13 +392,15 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n \n     let cr = PathBuf::from(cratefile);\n     info!(\"starting to run rustc\");\n+    let display_warnings = matches.opt_present(\"display-warnings\");\n \n     let (tx, rx) = channel();\n     rustc_driver::monitor(move || {\n         use rustc::session::config::Input;\n \n         let (mut krate, renderinfo) =\n-            core::run_core(paths, cfgs, externs, Input::File(cr), triple, maybe_sysroot);\n+            core::run_core(paths, cfgs, externs, Input::File(cr), triple, maybe_sysroot,\n+                           display_warnings);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "057ce69d9de8bcf925f59cb3a9c7700763202d40", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -150,7 +150,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            render_type: RenderType) -> isize {\n+            render_type: RenderType, display_warnings: bool) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -166,6 +166,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n-    testing::test_main(&test_args, collector.tests);\n+    testing::test_main(&test_args, collector.tests,\n+                       testing::Options::new().display_output(display_warnings));\n     0\n }"}, {"sha": "d5237d629cfc1e7f8f40f2a9c3c9b53c6bdb0825", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -58,7 +58,8 @@ pub fn run(input: &str,\n            mut test_args: Vec<String>,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n-           render_type: RenderType)\n+           render_type: RenderType,\n+           display_warnings: bool)\n            -> isize {\n     let input_path = PathBuf::from(input);\n     let input = config::Input::File(input_path.clone());\n@@ -127,7 +128,8 @@ pub fn run(input: &str,\n     test_args.insert(0, \"rustdoctest\".to_string());\n \n     testing::test_main(&test_args,\n-                       collector.tests.into_iter().collect());\n+                       collector.tests.into_iter().collect(),\n+                       testing::Options::new().display_output(display_warnings));\n     0\n }\n "}, {"sha": "91746a2edd9b2a62abc70b84d7647ce277b5174a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -442,7 +442,7 @@ We're going to be building a module that looks more or less like:\n mod __test {\n   extern crate test (name = \"test\", vers = \"...\");\n   fn main() {\n-    test::test_main_static(&::os::args()[], tests)\n+    test::test_main_static(&::os::args()[], tests, test::Options::new())\n   }\n \n   static tests : &'static [test::TestDescAndFn] = &[\n@@ -478,7 +478,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     //        pub fn main() {\n     //            #![main]\n     //            use std::slice::AsSlice;\n-    //            test::test_main_static(::std::os::args().as_slice(), TESTS);\n+    //            test::test_main_static(::std::os::args().as_slice(), TESTS, test::Options::new());\n     //        }\n \n     let sp = ignored_span(cx, DUMMY_SP);"}, {"sha": "35f2fbca69f8df2613da9e0ca38174e7002459a9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -76,7 +76,7 @@ pub mod test {\n     pub use {Bencher, TestName, TestResult, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n              TrFailedMsg, TrIgnored, TrOk, Metric, MetricMap, StaticTestFn, StaticTestName,\n              DynTestName, DynTestFn, run_test, test_main, test_main_static, filter_tests,\n-             parse_opts, StaticBenchFn, ShouldPanic};\n+             parse_opts, StaticBenchFn, ShouldPanic, Options};\n }\n \n pub mod stats;\n@@ -252,14 +252,34 @@ impl Clone for MetricMap {\n     }\n }\n \n+/// In case we want to add other options as well, just add them in this struct.\n+#[derive(Copy, Clone, Debug)]\n+pub struct Options {\n+    display_output: bool,\n+}\n+\n+impl Options {\n+    pub fn new() -> Options {\n+        Options {\n+            display_output: false,\n+        }\n+    }\n+\n+    pub fn display_output(mut self, display_output: bool) -> Options {\n+        self.display_output = display_output;\n+        self\n+    }\n+}\n+\n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n-pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>) {\n-    let opts = match parse_opts(args) {\n+pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n+    let mut opts = match parse_opts(args) {\n         Some(Ok(o)) => o,\n         Some(Err(msg)) => panic!(\"{:?}\", msg),\n         None => return,\n     };\n+    opts.options = options;\n     if opts.list {\n         if let Err(e) = list_tests_console(&opts, tests) {\n             panic!(\"io error when listing tests: {:?}\", e);\n@@ -301,16 +321,17 @@ pub fn test_main_static(tests: &[TestDescAndFn]) {\n                                }\n                            })\n                            .collect();\n-    test_main(&args, owned_tests)\n+    test_main(&args, owned_tests, Options::new())\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub enum ColorConfig {\n     AutoColor,\n     AlwaysColor,\n     NeverColor,\n }\n \n+#[derive(Debug)]\n pub struct TestOpts {\n     pub list: bool,\n     pub filter: Option<String>,\n@@ -324,6 +345,7 @@ pub struct TestOpts {\n     pub quiet: bool,\n     pub test_threads: Option<usize>,\n     pub skip: Vec<String>,\n+    pub options: Options,\n }\n \n impl TestOpts {\n@@ -342,6 +364,7 @@ impl TestOpts {\n             quiet: false,\n             test_threads: None,\n             skip: vec![],\n+            options: Options::new(),\n         }\n     }\n }\n@@ -481,6 +504,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         quiet: quiet,\n         test_threads: test_threads,\n         skip: matches.opt_strs(\"skip\"),\n+        options: Options::new(),\n     };\n \n     Some(Ok(test_opts))\n@@ -521,7 +545,9 @@ struct ConsoleTestState<T> {\n     measured: usize,\n     metrics: MetricMap,\n     failures: Vec<(TestDesc, Vec<u8>)>,\n+    not_failures: Vec<(TestDesc, Vec<u8>)>,\n     max_name_len: usize, // number of columns to fill when aligning names\n+    options: Options,\n }\n \n impl<T: Write> ConsoleTestState<T> {\n@@ -547,7 +573,9 @@ impl<T: Write> ConsoleTestState<T> {\n             measured: 0,\n             metrics: MetricMap::new(),\n             failures: Vec::new(),\n+            not_failures: Vec::new(),\n             max_name_len: 0,\n+            options: opts.options,\n         })\n     }\n \n@@ -703,9 +731,38 @@ impl<T: Write> ConsoleTestState<T> {\n         Ok(())\n     }\n \n+    pub fn write_outputs(&mut self) -> io::Result<()> {\n+        self.write_plain(\"\\nsuccesses:\\n\")?;\n+        let mut successes = Vec::new();\n+        let mut stdouts = String::new();\n+        for &(ref f, ref stdout) in &self.not_failures {\n+            successes.push(f.name.to_string());\n+            if !stdout.is_empty() {\n+                stdouts.push_str(&format!(\"---- {} stdout ----\\n\\t\", f.name));\n+                let output = String::from_utf8_lossy(stdout);\n+                stdouts.push_str(&output);\n+                stdouts.push_str(\"\\n\");\n+            }\n+        }\n+        if !stdouts.is_empty() {\n+            self.write_plain(\"\\n\")?;\n+            self.write_plain(&stdouts)?;\n+        }\n+\n+        self.write_plain(\"\\nsuccesses:\\n\")?;\n+        successes.sort();\n+        for name in &successes {\n+            self.write_plain(&format!(\"    {}\\n\", name))?;\n+        }\n+        Ok(())\n+    }\n+\n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n         assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n \n+        if self.options.display_output {\n+            self.write_outputs()?;\n+        }\n         let success = self.failed == 0;\n         if !success {\n             self.write_failures()?;\n@@ -824,7 +881,10 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n                 st.write_log_result(&test, &result)?;\n                 st.write_result(&result)?;\n                 match result {\n-                    TrOk => st.passed += 1,\n+                    TrOk => {\n+                        st.passed += 1;\n+                        st.not_failures.push((test, stdout));\n+                    }\n                     TrIgnored => st.ignored += 1,\n                     TrMetrics(mm) => {\n                         let tname = test.name;\n@@ -901,6 +961,8 @@ fn should_sort_failures_before_printing_them() {\n         max_name_len: 10,\n         metrics: MetricMap::new(),\n         failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n+        options: Options::new(),\n+        not_failures: Vec::new(),\n     };\n \n     st.write_failures().unwrap();"}, {"sha": "6fc7f9f07ac174c407a235adc4e173aea6bf8476", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd7b48b25740160a6b8942085e8417acf7ebb28/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=ecd7b48b25740160a6b8942085e8417acf7ebb28", "patch": "@@ -336,6 +336,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         test_threads: None,\n         skip: vec![],\n         list: false,\n+        options: test::Options::new(),\n     }\n }\n "}]}