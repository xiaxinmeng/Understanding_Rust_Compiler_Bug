{"sha": "35701d8caab0eff01b73d5335ac4b8e63f6ff689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzAxZDhjYWFiMGVmZjAxYjczZDUzMzVhYzRiOGU2M2Y2ZmY2ODk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T17:24:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T17:24:53Z"}, "message": "Move global_asm into CodegenCx", "tree": {"sha": "1af52d6fe53ab5151807c862a59dc6e65e7b0a9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af52d6fe53ab5151807c862a59dc6e65e7b0a9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35701d8caab0eff01b73d5335ac4b8e63f6ff689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35701d8caab0eff01b73d5335ac4b8e63f6ff689", "html_url": "https://github.com/rust-lang/rust/commit/35701d8caab0eff01b73d5335ac4b8e63f6ff689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35701d8caab0eff01b73d5335ac4b8e63f6ff689/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "url": "https://api.github.com/repos/rust-lang/rust/commits/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "html_url": "https://github.com/rust-lang/rust/commit/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "0f76e8d2195be6f819cf3ab6e5cb9bcc2a618037", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=35701d8caab0eff01b73d5335ac4b8e63f6ff689", "patch": "@@ -112,21 +112,11 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n \n     let module = new_module(tcx, cgu_name.as_str().to_string());\n \n-    let mut global_asm = Vec::new();\n     let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n-    super::codegen_mono_items(&mut cx, &mut global_asm, mono_items);\n-    let (mut module, debug, mut unwind_context) = tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n+    super::codegen_mono_items(&mut cx, mono_items);\n+    let (mut module, global_asm, debug, mut unwind_context) = tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);\n \n-    let global_asm = global_asm.into_iter().map(|hir_id| {\n-        let item = tcx.hir().expect_item(hir_id);\n-        if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n-            asm.as_str().to_string()\n-        } else {\n-            bug!(\"Expected GlobalAsm found {:?}\", item);\n-        }\n-    }).collect::<Vec<String>>().join(\"\\n\");\n-\n     let codegen_result = emit_module(\n         tcx,\n         cgu.name().as_str().to_string(),"}, {"sha": "b27ad7b438472d32c6f201828beed07ed7b3ae79", "filename": "src/driver/jit.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=35701d8caab0eff01b73d5335ac4b8e63f6ff689", "patch": "@@ -54,15 +54,13 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let mut cx = crate::CodegenCx::new(tcx, jit_module, false);\n \n-    let (mut jit_module, _debug, mut unwind_context) = super::time(tcx, \"codegen mono items\", || {\n-        let mut global_asm = Vec::new();\n-        super::codegen_mono_items(&mut cx, &mut global_asm, mono_items);\n-        for hir_id in global_asm {\n-            let item = tcx.hir().expect_item(hir_id);\n-            tcx.sess.span_err(item.span, \"Global asm is not supported in JIT mode\");\n-        }\n+    let (mut jit_module, global_asm, _debug, mut unwind_context) = super::time(tcx, \"codegen mono items\", || {\n+        super::codegen_mono_items(&mut cx, mono_items);\n         tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n     });\n+    if !global_asm.is_empty() {\n+        tcx.sess.fatal(\"Global asm is not supported in JIT mode\");\n+    }\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n "}, {"sha": "f8446cbeddddbed5dcb6f2d9b0769ccea0fe03cb", "filename": "src/driver/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=35701d8caab0eff01b73d5335ac4b8e63f6ff689", "patch": "@@ -1,6 +1,5 @@\n use std::any::Any;\n \n-use rustc_hir::HirId;\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n@@ -32,7 +31,6 @@ pub(crate) fn codegen_crate(\n \n fn codegen_mono_items<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx, impl Backend + 'static>,\n-    global_asm: &mut Vec<HirId>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n@@ -51,13 +49,12 @@ fn codegen_mono_items<'tcx>(\n \n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-        trans_mono_item(cx, global_asm, mono_item, linkage);\n+        trans_mono_item(cx, mono_item, linkage);\n     }\n }\n \n fn trans_mono_item<'tcx, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'tcx, B>,\n-    global_asm: &mut Vec<HirId>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {\n@@ -94,7 +91,13 @@ fn trans_mono_item<'tcx, B: Backend + 'static>(\n             crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n         }\n         MonoItem::GlobalAsm(hir_id) => {\n-            global_asm.push(hir_id);\n+            let item = tcx.hir().expect_item(hir_id);\n+            if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n+                cx.global_asm.push_str(&*asm.as_str());\n+                cx.global_asm.push_str(\"\\n\\n\");\n+            } else {\n+                bug!(\"Expected GlobalAsm found {:?}\", item);\n+            }\n         }\n     }\n }"}, {"sha": "804a58de26fe47d17e2b05bf344720f0b34f6b36", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35701d8caab0eff01b73d5335ac4b8e63f6ff689/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=35701d8caab0eff01b73d5335ac4b8e63f6ff689", "patch": "@@ -123,6 +123,7 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n struct CodegenCx<'tcx, B: Backend + 'static> {\n     tcx: TyCtxt<'tcx>,\n     module: Module<B>,\n+    global_asm: String,\n     constants_cx: ConstantCx,\n     cached_context: Context,\n     vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n@@ -148,6 +149,7 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n         CodegenCx {\n             tcx,\n             module,\n+            global_asm: String::new(),\n             constants_cx: ConstantCx::default(),\n             cached_context: Context::new(),\n             vtables: FxHashMap::default(),\n@@ -156,9 +158,9 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n         }\n     }\n \n-    fn finalize(mut self) -> (Module<B>, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n+    fn finalize(mut self) -> (Module<B>, String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n         self.constants_cx.finalize(self.tcx, &mut self.module);\n-        (self.module, self.debug_context, self.unwind_context)\n+        (self.module, self.global_asm, self.debug_context, self.unwind_context)\n     }\n }\n "}]}