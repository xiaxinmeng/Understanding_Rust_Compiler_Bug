{"sha": "4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNjBkN2UzYTYwZTE0M2IyNzRlN2ZiZmUzOTFiMGIzM2I0MGVhNjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T18:51:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T18:51:04Z"}, "message": "rustc: \"foo\" is now a static string", "tree": {"sha": "7c9fea12e393e86d92285d1c5381b0ca16645b24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9fea12e393e86d92285d1c5381b0ca16645b24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "html_url": "https://github.com/rust-lang/rust/commit/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfd4fb8ea3000af665de8be5f72f0712668aa05", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfd4fb8ea3000af665de8be5f72f0712668aa05", "html_url": "https://github.com/rust-lang/rust/commit/4bfd4fb8ea3000af665de8be5f72f0712668aa05"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "539ec5d7e110a5488462cc21bb2ea9a3b2009ab7", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "patch": "@@ -52,7 +52,8 @@ fn trans_opt(bcx: block, o: opt) -> opt_result {\n                            ast::vstore_uniq) {\n             let strty = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n             let cell = empty_dest_cell();\n-            bcx = tvec::trans_estr(bcx, s, ast::vstore_uniq, by_val(cell));\n+            bcx = tvec::trans_estr(bcx, s, some(ast::vstore_uniq),\n+                                   by_val(cell));\n             add_clean_temp(bcx, *cell, strty);\n             return single_result(rslt(bcx, *cell));\n           }"}, {"sha": "9730c7e968db4bf00aeef45fc860e8d9651fa5d8", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "patch": "@@ -1424,12 +1424,9 @@ fn store_temp_expr(cx: block, action: copy_action, dst: ValueRef,\n fn trans_lit(cx: block, e: @ast::expr, lit: ast::lit, dest: dest) -> block {\n     let _icx = cx.insn_ctxt(~\"trans_lit\");\n     if dest == ignore { return cx; }\n-    alt lit.node {\n-      ast::lit_str(s) { tvec::trans_estr(cx, s,\n-                                         ast::vstore_fixed(none), dest) }\n-      _ {\n-        store_in_dest(cx, consts::const_lit(cx.ccx(), e, lit), dest)\n-      }\n+    match lit.node {\n+        ast::lit_str(s) => tvec::trans_estr(cx, s, none, dest),\n+        _ => store_in_dest(cx, consts::const_lit(cx.ccx(), e, lit), dest)\n     }\n }\n "}, {"sha": "0f99fe9b2f78e5c00de8ac745dc188d6022cd1d2", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "patch": "@@ -220,7 +220,7 @@ fn trans_vstore(bcx: block, e: @ast::expr,\n                 v: ast::vstore, dest: dest) -> block {\n     alt e.node {\n       ast::expr_lit(@{node: ast::lit_str(s), span: _}) {\n-        return trans_estr(bcx, s, v, dest);\n+        return trans_estr(bcx, s, some(v), dest);\n       }\n       ast::expr_vec(es, mutbl) {\n         return trans_evec(bcx, es, v, e.id, dest);\n@@ -266,35 +266,34 @@ fn get_base_and_len(cx: block, v: ValueRef, e_ty: ty::t)\n     }\n }\n \n-fn trans_estr(bcx: block, s: @~str, vstore: ast::vstore,\n+fn trans_estr(bcx: block, s: @~str, vstore: option<ast::vstore>,\n               dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(~\"tvec::trans_estr\");\n     if dest == base::ignore { return bcx; }\n     let ccx = bcx.ccx();\n \n     let c = alt vstore {\n-      ast::vstore_fixed(_)\n-      {\n+      some(ast::vstore_fixed(_)) => {\n         // \"hello\"/_  =>  \"hello\"/5  =>  ~[i8 x 6] in llvm\n         debug!{\"trans_estr: fixed: %s\", *s};\n         C_postr(*s)\n       }\n \n-      ast::vstore_slice(_) {\n+      some(ast::vstore_slice(_)) | none => {\n         // \"hello\"  =>  (*i8, 6u) in llvm\n         debug!{\"trans_estr: slice '%s'\", *s};\n         C_estr_slice(ccx, *s)\n       }\n \n-      ast::vstore_uniq {\n+      some(ast::vstore_uniq) => {\n         let cs = PointerCast(bcx, C_cstr(ccx, *s), T_ptr(T_i8()));\n         let len = C_uint(ccx, str::len(*s));\n         let c = Call(bcx, ccx.upcalls.str_new_uniq, ~[cs, len]);\n         PointerCast(bcx, c,\n                     T_unique_ptr(T_unique(ccx, T_vec(ccx, T_i8()))))\n       }\n \n-      ast::vstore_box {\n+      some(ast::vstore_box) => {\n         let cs = PointerCast(bcx, C_cstr(ccx, *s), T_ptr(T_i8()));\n         let len = C_uint(ccx, str::len(*s));\n         let c = Call(bcx, ccx.upcalls.str_new_shared, ~[cs, len]);"}, {"sha": "0de0ae37ac272bd45fd43342ad917eb908feca1a", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e60d7e3a60e143b274e7fbfe391b0b33b40ea67/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=4e60d7e3a60e143b274e7fbfe391b0b33b40ea67", "patch": "@@ -703,7 +703,7 @@ fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n     alt lit.node {\n       ast::lit_str(s) {\n         tcx.sess.span_warn(lit.span, ~\"fixed length string\");\n-        ty::mk_estr(tcx, ty::vstore_fixed(s.len()))\n+        ty::mk_estr(tcx, ty::vstore_slice(ty::re_static))\n       }\n       ast::lit_int(_, t) { ty::mk_mach_int(tcx, t) }\n       ast::lit_uint(_, t) { ty::mk_mach_uint(tcx, t) }"}]}