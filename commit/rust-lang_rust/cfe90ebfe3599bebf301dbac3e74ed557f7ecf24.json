{"sha": "cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZTkwZWJmZTM1OTliZWJmMzAxZGJhYzNlNzRlZDU1N2Y3ZWNmMjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-11T11:53:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-13T15:37:51Z"}, "message": "linker: Pass `/NODEFAULTLIB` in a more regular way", "tree": {"sha": "42d420e9311756c9c6849511b7c6c68876a57de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d420e9311756c9c6849511b7c6c68876a57de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "html_url": "https://github.com/rust-lang/rust/commit/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4f059add44699af6d24abdcfd39f429dd54084", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f059add44699af6d24abdcfd39f429dd54084", "html_url": "https://github.com/rust-lang/rust/commit/7a4f059add44699af6d24abdcfd39f429dd54084"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "d58d9b91c73ac86b8a015255f30863efaef0b265", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "patch": "@@ -1532,13 +1532,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.debuginfo();\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    // We want to, by default, prevent the compiler from accidentally leaking in\n-    // any system libraries, so we may explicitly ask linkers to not link to any\n-    // libraries by default. Note that this does not happen for windows because\n-    // windows pulls in some large number of libraries and I couldn't quite\n-    // figure out which subset we wanted.\n-    //\n-    // This is all naturally configurable via the standard methods as well.\n+    // We want to prevent the compiler from accidentally leaking in any system libraries,\n+    // so by default we tell linkers not to link to any default libraries.\n     if !sess.opts.cg.default_linker_libraries.unwrap_or(false)\n         && sess.target.target.options.no_default_libraries\n     {"}, {"sha": "d8c5ddf586f453af016f1319095a882198a9a1a9", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "patch": "@@ -631,15 +631,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n     }\n \n     fn no_default_libraries(&mut self) {\n-        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n-        // as there's been trouble in the past of linking the C++ standard\n-        // library required by LLVM. This likely needs to happen one day, but\n-        // in general Windows is also a more controlled environment than\n-        // Unix, so it's not necessarily as critical that this be implemented.\n-        //\n-        // Note that there are also some licensing worries about statically\n-        // linking some libraries which require a specific agreement, so it may\n-        // not ever be possible for us to pass this flag.\n+        self.cmd.arg(\"/NODEFAULTLIB\");\n     }\n \n     fn include_path(&mut self, path: &Path) {"}, {"sha": "6f5e1badfb6625c0d7fcee20320a96967643a5e4", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "patch": "@@ -23,9 +23,6 @@ pub fn opts() -> TargetOptions {\n         // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n         // constructs and alike).\n         \"/NXCOMPAT\".to_string(),\n-        // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets\n-        // must be freestanding.\n-        \"/nodefaultlib\".to_string(),\n         // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n         // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n         // spec."}, {"sha": "dc56dd916ff0b602d4186f39718d03cd4ff46ce0", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "patch": "@@ -30,6 +30,16 @@ pub fn opts() -> TargetOptions {\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n+        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n+        // as there's been trouble in the past of linking the C++ standard\n+        // library required by LLVM. This likely needs to happen one day, but\n+        // in general Windows is also a more controlled environment than\n+        // Unix, so it's not necessarily as critical that this be implemented.\n+        //\n+        // Note that there are also some licensing worries about statically\n+        // linking some libraries which require a specific agreement, so it may\n+        // not ever be possible for us to pass this flag.\n+        no_default_libraries: false,\n \n         ..Default::default()\n     }"}, {"sha": "2c70ba7abe262e2a3dc23c33da95ae0936aefb07", "filename": "src/librustc_target/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe90ebfe3599bebf301dbac3e74ed557f7ecf24/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=cfe90ebfe3599bebf301dbac3e74ed557f7ecf24", "patch": "@@ -31,6 +31,16 @@ pub fn opts() -> TargetOptions {\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n         lld_flavor: LldFlavor::Link,\n+        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n+        // as there's been trouble in the past of linking the C++ standard\n+        // library required by LLVM. This likely needs to happen one day, but\n+        // in general Windows is also a more controlled environment than\n+        // Unix, so it's not necessarily as critical that this be implemented.\n+        //\n+        // Note that there are also some licensing worries about statically\n+        // linking some libraries which require a specific agreement, so it may\n+        // not ever be possible for us to pass this flag.\n+        no_default_libraries: false,\n \n         ..Default::default()\n     }"}]}