{"sha": "5045e12bd7001956b14a6dfd642637a471e4b378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNDVlMTJiZDcwMDE5NTZiMTRhNmRmZDY0MjYzN2E0NzFlNGIzNzg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-11-29T02:15:06Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-11-29T02:15:06Z"}, "message": "Filter out self-referential projection predicates\n\nIf we end up with a projection predicate that equates a type with\nitself (e.g. <T as MyType>::Value == <T as MyType>::Value), we can\nrun into issues if we try to add it to our ParamEnv.", "tree": {"sha": "70ee68cccaf479faa8c14ce0311bcdd831113d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ee68cccaf479faa8c14ce0311bcdd831113d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5045e12bd7001956b14a6dfd642637a471e4b378", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlv/TBUACgkQtAh+UQ6Y\nsWQ1ag//RWgArotlcGI+BjH3r/H+xmvWpkU3f3KmIBzV70+vm7R4LGzh1kaMvhPf\nEQiPYeQJjSTXYrcCib9TuJ5fQpSudOHzrdkS82rLjZGlKiHeKCbQ8I87mvqz/oe9\nkWx3wmcPgpgzA0CgTKJLaZNFuOWkC8PVnHS41GVDbV6/to+lxljJbGdCrbgmuEud\nD02oG3ociJfSbCygRnSxKqs99xyFmkQKQEaMSLpe/oGaSd0mza4EO5g/5V/uWV16\nFAq58nZH8nIALDGPIJlixdS2HAj1T5d/AQxKGaxsYJMSnFWs5hxidjrnnilpSzkS\nGDsJij89xHBdFCeyG4TWQG6dZ6SIRhy21Ti3arOfVhuUbGN0TOuTU0j4ChePe9hp\n4GzYBJQGHUCQb+uVYxTy3TQo+U9D/YHSrPKUnEjfVrPw2ACUxyLo4Oi+gNNmCvDf\nVhe+o7L5cDNvoddXWORrTi2bmXcsha5Ua3LjCndkPt8u3KDnlVqyNvO1oDDg3HwE\nmr6Cqxcs4Pb9yJjvFLaSDZBc9plI69m5vzcYhaQS2N4YS6zJWEGrhHaZlclcJbWE\ntv9BPGYmBApdH8QOjhYbBfcZXXX9AmFL1c9MIJJzQTrNrOe1aGiEyIKMIJPGFp2r\nxj6c+Mx9avCOrMM4ETqjg9BT0iId5Y+2O3GrBr7/Dtl0sGPCdPc=\n=2hT9\n-----END PGP SIGNATURE-----", "payload": "tree 70ee68cccaf479faa8c14ce0311bcdd831113d6b\nparent 1a84d211a2dad78f1d3412c65f5a72053a82893d\nauthor Aaron Hill <aa1ronham@gmail.com> 1543457706 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1543457706 -0500\n\nFilter out self-referential projection predicates\n\nIf we end up with a projection predicate that equates a type with\nitself (e.g. <T as MyType>::Value == <T as MyType>::Value), we can\nrun into issues if we try to add it to our ParamEnv.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5045e12bd7001956b14a6dfd642637a471e4b378", "html_url": "https://github.com/rust-lang/rust/commit/5045e12bd7001956b14a6dfd642637a471e4b378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5045e12bd7001956b14a6dfd642637a471e4b378/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a84d211a2dad78f1d3412c65f5a72053a82893d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a84d211a2dad78f1d3412c65f5a72053a82893d", "html_url": "https://github.com/rust-lang/rust/commit/1a84d211a2dad78f1d3412c65f5a72053a82893d"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "a0237348ea6909b459a11829bf9cb45470897d46", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5045e12bd7001956b14a6dfd642637a471e4b378/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5045e12bd7001956b14a6dfd642637a471e4b378/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=5045e12bd7001956b14a6dfd642637a471e4b378", "patch": "@@ -649,6 +649,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         };\n     }\n \n+    fn is_self_referential_projection(&self, p: ty::PolyProjectionPredicate<'_>) -> bool {\n+        match p.ty().skip_binder().sty {\n+            ty::Projection(proj) if proj == p.skip_binder().projection_ty => {\n+                true\n+            },\n+            _ => false\n+        }\n+    }\n+\n     pub fn evaluate_nested_obligations<\n         'b,\n         'c,\n@@ -713,7 +722,23 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             debug!(\"evaluate_nested_obligations: adding projection predicate\\\n                             to computed_preds: {:?}\", predicate);\n \n-                        self.add_user_pred(computed_preds, predicate);\n+                            // Under unusual circumstances, we can end up with a self-refeential\n+                            // projection predicate. For example:\n+                            // <T as MyType>::Value == <T as MyType>::Value\n+                            // Not only is displaying this to the user pointless,\n+                            // having it in the ParamEnv will cause an issue if we try to call\n+                            // poly_project_and_unify_type on the predicate, since this kind of\n+                            // predicate will normally never end up in a ParamEnv.\n+                            //\n+                            // For these reasons, we ignore these weird predicates,\n+                            // ensuring that we're able to properly synthesize an auto trait impl\n+                            if self.is_self_referential_projection(p) {\n+                                debug!(\"evaluate_nested_obligations: encountered a projection\n+                                 predicate equating a type with itself! Skipping\");\n+\n+                            } else {\n+                                self.add_user_pred(computed_preds, predicate);\n+                            }\n                     }\n \n                     // We can only call poly_project_and_unify_type when our predicate's"}, {"sha": "077786b280fc378712acae9795756fa008030879", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5045e12bd7001956b14a6dfd642637a471e4b378/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5045e12bd7001956b14a6dfd642637a471e4b378/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=5045e12bd7001956b14a6dfd642637a471e4b378", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Some unusual code minimized from\n+// https://github.com/sile/handy_async/tree/7b619b762c06544fc67792c8ff8ebc24a88fdb98\n+\n+pub trait Pattern {\n+    type Value;\n+}\n+\n+pub struct Constrain<A, B = A, C = A>(A, B, C);\n+\n+impl<A, B, C> Pattern for Constrain<A, B, C>\n+    where A: Pattern,\n+          B: Pattern<Value = A::Value>,\n+          C: Pattern<Value = A::Value>,\n+{\n+    type Value = A::Value;\n+}\n+\n+pub struct Wrapper<T>(T);\n+\n+impl<T> Pattern for Wrapper<T> {\n+    type Value = T;\n+}\n+\n+\n+// @has self_referential/struct.WriteAndThen.html\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<P1> Send for \\\n+// WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n+pub struct WriteAndThen<P1>(pub P1::Value, pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n+    where P1: Pattern;\n+"}]}