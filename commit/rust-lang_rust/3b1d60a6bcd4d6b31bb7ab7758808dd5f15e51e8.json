{"sha": "3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWQ2MGE2YmNkNGQ2YjMxYmI3YWI3NzU4ODA4ZGQ1ZjE1ZTUxZTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-23T21:46:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:56Z"}, "message": "rustc_metadata: Privatize `CrateMetadata::root`", "tree": {"sha": "6158aa05a43e864959215268c1af0f615f426cad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6158aa05a43e864959215268c1af0f615f426cad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "html_url": "https://github.com/rust-lang/rust/commit/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cef4945fb60c19b7434b7409f1e33dd6922cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cef4945fb60c19b7434b7409f1e33dd6922cc8", "html_url": "https://github.com/rust-lang/rust/commit/a9cef4945fb60c19b7434b7409f1e33dd6922cc8"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "408369400c05da41c7002add389facf3f37e8818", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "patch": "@@ -47,9 +47,9 @@ pub struct CrateLoader<'a> {\n fn dump_crates(cstore: &CStore) {\n     info!(\"resolved crates:\");\n     cstore.iter_crate_data(|cnum, data| {\n-        info!(\"  name: {}\", data.root.name());\n+        info!(\"  name: {}\", data.name());\n         info!(\"  cnum: {}\", cnum);\n-        info!(\"  hash: {}\", data.root.hash());\n+        info!(\"  hash: {}\", data.hash());\n         info!(\"  reqd: {:?}\", data.dep_kind());\n         let CrateSource { dylib, rlib, rmeta } = data.source();\n         dylib.as_ref().map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n@@ -101,10 +101,10 @@ impl<'a> CrateLoader<'a> {\n                       -> Option<CrateNum> {\n         let mut ret = None;\n         self.cstore.iter_crate_data(|cnum, data| {\n-            if data.root.name() != name { return }\n+            if data.name() != name { return }\n \n             match hash {\n-                Some(hash) if *hash == data.root.hash() => { ret = Some(cnum); return }\n+                Some(hash) if *hash == data.hash() => { ret = Some(cnum); return }\n                 Some(..) => return,\n                 None => {}\n             }\n@@ -164,9 +164,9 @@ impl<'a> CrateLoader<'a> {\n \n         // Check for conflicts with any crate loaded so far\n         self.cstore.iter_crate_data(|_, other| {\n-            if other.root.name() == root.name() && // same crate-name\n-               other.root.disambiguator() == root.disambiguator() &&  // same crate-disambiguator\n-               other.root.hash() != root.hash() { // but different SVH\n+            if other.name() == root.name() && // same crate-name\n+               other.disambiguator() == root.disambiguator() &&  // same crate-disambiguator\n+               other.hash() != root.hash() { // but different SVH\n                 span_fatal!(self.sess, span, E0523,\n                         \"found two different crates with name `{}` that are \\\n                          not distinguished by differing `-C metadata`. This \\\n@@ -350,7 +350,7 @@ impl<'a> CrateLoader<'a> {\n         match result {\n             (LoadResult::Previous(cnum), None) => {\n                 let data = self.cstore.get_crate_data(cnum);\n-                if data.root.is_proc_macro_crate() {\n+                if data.is_proc_macro_crate() {\n                     dep_kind = DepKind::UnexportedMacrosOnly;\n                 }\n                 data.update_dep_kind(|data_dep_kind| cmp::max(data_dep_kind, dep_kind));\n@@ -378,7 +378,7 @@ impl<'a> CrateLoader<'a> {\n         if locator.triple == self.sess.opts.target_triple {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {\n-                if data.root.name() == root.name() && root.hash() == data.root.hash() {\n+                if data.name() == root.name() && root.hash() == data.hash() {\n                     assert!(locator.hash.is_none());\n                     info!(\"load success, going to previous cnum: {}\", cnum);\n                     result = LoadResult::Previous(cnum);\n@@ -621,7 +621,7 @@ impl<'a> CrateLoader<'a> {\n \n             let mut uses_std = false;\n             self.cstore.iter_crate_data(|_, data| {\n-                if data.root.name() == sym::std {\n+                if data.name() == sym::std {\n                     uses_std = true;\n                 }\n             });\n@@ -731,14 +731,14 @@ impl<'a> CrateLoader<'a> {\n                                             conflicts with this global \\\n                                             allocator in: {}\",\n                                            other_crate,\n-                                           data.root.name()));\n+                                           data.name()));\n                 }\n                 Some(None) => {\n                     self.sess.err(&format!(\"the `#[global_allocator]` in this \\\n                                             crate conflicts with global \\\n-                                            allocator in: {}\", data.root.name()));\n+                                            allocator in: {}\", data.name()));\n                 }\n-                None => global_allocator = Some(Some(data.root.name())),\n+                None => global_allocator = Some(Some(data.name())),\n             }\n         });\n         if global_allocator.is_some() {\n@@ -786,9 +786,9 @@ impl<'a> CrateLoader<'a> {\n                 self.sess.err(&format!(\"the crate `{}` cannot depend \\\n                                         on a crate that needs {}, but \\\n                                         it depends on `{}`\",\n-                                       self.cstore.get_crate_data(krate).root.name(),\n+                                       self.cstore.get_crate_data(krate).name(),\n                                        what,\n-                                       data.root.name()));\n+                                       data.name()));\n             }\n         }\n "}, {"sha": "820783bab6d276047a3e6c5b4d89bd30316a4324", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "patch": "@@ -66,7 +66,7 @@ crate struct CrateMetadata {\n     /// lifetime is only used behind `Lazy`, and therefore acts like an\n     /// universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n     /// is being used to decode those values.\n-    crate root: CrateRoot<'static>,\n+    root: CrateRoot<'static>,\n     /// For each definition in this crate, we encode a key. When the\n     /// crate is loaded, we read all the keys and put them in this\n     /// hashmap, which gives the reverse mapping. This allows us to\n@@ -1594,6 +1594,22 @@ impl<'a, 'tcx> CrateMetadata {\n     crate fn has_default_lib_allocator(&self) -> bool {\n         self.root.has_default_lib_allocator\n     }\n+\n+    crate fn is_proc_macro_crate(&self) -> bool {\n+        self.root.is_proc_macro_crate()\n+    }\n+\n+    crate fn name(&self) -> Symbol {\n+        self.root.name\n+    }\n+\n+    crate fn disambiguator(&self) -> CrateDisambiguator {\n+        self.root.disambiguator\n+    }\n+\n+    crate fn hash(&self) -> Svh {\n+        self.root.hash\n+    }\n }\n \n // Cannot be implemented on 'ProcMacro', as libproc_macro"}]}