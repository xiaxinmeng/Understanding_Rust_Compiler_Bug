{"sha": "c8312659403397c9fe4fcb2fd006268a7031d7a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzEyNjU5NDAzMzk3YzlmZTRmY2IyZmQwMDYyNjhhNzAzMWQ3YTg=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-03-27T21:26:08Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-03T07:33:10Z"}, "message": "Replace float module consts with assoc consts in documentation", "tree": {"sha": "5bb3ae1dce3547ffdc5f8b7cb0e73d0365a2fbe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb3ae1dce3547ffdc5f8b7cb0e73d0365a2fbe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8312659403397c9fe4fcb2fd006268a7031d7a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8312659403397c9fe4fcb2fd006268a7031d7a8", "html_url": "https://github.com/rust-lang/rust/commit/c8312659403397c9fe4fcb2fd006268a7031d7a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8312659403397c9fe4fcb2fd006268a7031d7a8/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "html_url": "https://github.com/rust-lang/rust/commit/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "8c542136a7fa6523a804a2a97f82ae6d2ee9b00e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c8312659403397c9fe4fcb2fd006268a7031d7a8", "patch": "@@ -817,7 +817,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// When comparison is impossible:\n     ///\n     /// ```\n-    /// let result = std::f64::NAN.partial_cmp(&1.0);\n+    /// let result = f64::NAN.partial_cmp(&1.0);\n     /// assert_eq!(result, None);\n     /// ```\n     #[must_use]"}, {"sha": "c8829817e190cbdd00e516c68fcd6a53461bec94", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=c8312659403397c9fe4fcb2fd006268a7031d7a8", "patch": "@@ -2920,7 +2920,7 @@ pub trait Iterator {\n     /// assert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\n     /// assert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n     ///\n-    /// assert_eq!([std::f64::NAN].iter().partial_cmp([1.].iter()), None);\n+    /// assert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn partial_cmp<I>(self, other: I) -> Option<Ordering>\n@@ -3170,7 +3170,7 @@ pub trait Iterator {\n     /// assert!(![1, 3, 2, 4].iter().is_sorted());\n     /// assert!([0].iter().is_sorted());\n     /// assert!(std::iter::empty::<i32>().is_sorted());\n-    /// assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted());\n+    /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n@@ -3197,7 +3197,7 @@ pub trait Iterator {\n     /// assert!(![1, 3, 2, 4].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// assert!([0].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// assert!(std::iter::empty::<i32>().is_sorted_by(|a, b| a.partial_cmp(b)));\n-    /// assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// ```\n     ///\n     /// [`is_sorted`]: trait.Iterator.html#method.is_sorted"}, {"sha": "946a765e18f3ba5bdf043ee0261ee32e21104cf2", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=c8312659403397c9fe4fcb2fd006268a7031d7a8", "patch": "@@ -139,10 +139,9 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// ```\n     /// #![feature(range_is_empty)]\n     ///\n-    /// use std::f32::NAN;\n     /// assert!(!(3.0..5.0).is_empty());\n-    /// assert!( (3.0..NAN).is_empty());\n-    /// assert!( (NAN..5.0).is_empty());\n+    /// assert!( (3.0..f32::NAN).is_empty());\n+    /// assert!( (f32::NAN..5.0).is_empty());\n     /// ```\n     #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n     pub fn is_empty(&self) -> bool {\n@@ -496,10 +495,9 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// ```\n     /// #![feature(range_is_empty)]\n     ///\n-    /// use std::f32::NAN;\n     /// assert!(!(3.0..=5.0).is_empty());\n-    /// assert!( (3.0..=NAN).is_empty());\n-    /// assert!( (NAN..=5.0).is_empty());\n+    /// assert!( (3.0..=f32::NAN).is_empty());\n+    /// assert!( (f32::NAN..=5.0).is_empty());\n     /// ```\n     ///\n     /// This method returns `true` after iteration has finished:"}, {"sha": "9be52e2dfb06b25cf4e3d41dfaab6e691b22873b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=c8312659403397c9fe4fcb2fd006268a7031d7a8", "patch": "@@ -2588,7 +2588,7 @@ impl<T> [T] {\n     /// assert!(![1, 3, 2, 4].is_sorted());\n     /// assert!([0].is_sorted());\n     /// assert!(empty.is_sorted());\n-    /// assert!(![0.0, 1.0, std::f32::NAN].is_sorted());\n+    /// assert!(![0.0, 1.0, f32::NAN].is_sorted());\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"}, {"sha": "ac8f305ae9127cd54e6546308210442ba5ca681c", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=c8312659403397c9fe4fcb2fd006268a7031d7a8", "patch": "@@ -284,7 +284,7 @@ impl f32 {\n     /// assert_eq!(a.rem_euclid(-b), 3.0);\n     /// assert_eq!((-a).rem_euclid(-b), 1.0);\n     /// // limitation due to round-off error\n-    /// assert!((-std::f32::EPSILON).rem_euclid(3.0) != 0.0);\n+    /// assert!((-f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n@@ -962,7 +962,7 @@ impl f32 {\n     /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n     /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n     /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((std::f32::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// assert!((f32::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]"}, {"sha": "798738e50a75484e18aaaa6ee6916c11b3064584", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8312659403397c9fe4fcb2fd006268a7031d7a8/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=c8312659403397c9fe4fcb2fd006268a7031d7a8", "patch": "@@ -280,7 +280,7 @@ impl f64 {\n     /// assert_eq!(a.rem_euclid(-b), 3.0);\n     /// assert_eq!((-a).rem_euclid(-b), 1.0);\n     /// // limitation due to round-off error\n-    /// assert!((-std::f64::EPSILON).rem_euclid(3.0) != 0.0);\n+    /// assert!((-f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n@@ -928,7 +928,7 @@ impl f64 {\n     /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n     /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n     /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((std::f64::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// assert!((f64::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]"}]}