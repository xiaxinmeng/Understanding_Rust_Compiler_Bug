{"sha": "19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZjRhZTE0MTVlMmJhYTRiOWQ3NTZiN2FmOGEwZDU3NzljZmNhOWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-08-09T23:30:44Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-08-19T22:09:20Z"}, "message": "Try to fix mac valgrind bot by disabling thread-heavy activities.", "tree": {"sha": "0c8e90e4cf3da459f282ffaeba7a0d2425904e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8e90e4cf3da459f282ffaeba7a0d2425904e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "html_url": "https://github.com/rust-lang/rust/commit/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a449aae38d7b291a0038ba23d1e0a607244dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a449aae38d7b291a0038ba23d1e0a607244dae", "html_url": "https://github.com/rust-lang/rust/commit/29a449aae38d7b291a0038ba23d1e0a607244dae"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "49cf8c239b7e690db4e03e8bb06f98194544d691", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "patch": "@@ -727,6 +727,7 @@ mod test {\n     use rt::test::*;\n     use cell::Cell;\n     use iter::Times;\n+    use rt::util;\n \n     #[test]\n     fn oneshot_single_thread_close_port_first() {\n@@ -875,6 +876,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_close_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n@@ -890,6 +892,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_close_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n@@ -910,6 +913,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_recv_close_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n@@ -936,6 +940,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<~int>();\n@@ -955,6 +960,7 @@ mod test {\n \n     #[test]\n     fn stream_send_recv_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_mt_newsched_task {\n                 let (port, chan) = stream::<~int>();\n@@ -999,6 +1005,7 @@ mod test {\n \n     #[test]\n     fn shared_chan_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do run_in_mt_newsched_task {\n             let (port, chan) = stream();\n             let chan = SharedChan::new(chan);\n@@ -1018,6 +1025,7 @@ mod test {\n \n     #[test]\n     fn shared_port_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do run_in_mt_newsched_task {\n             // XXX: Removing these type annotations causes an ICE\n             let (end_port, end_chan) = stream::<()>();\n@@ -1098,6 +1106,8 @@ mod test {\n         use rand;\n         use rand::RngUtil;\n \n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n+\n         do run_in_mt_newsched_task {\n             let (end_port, end_chan) = stream::<()>();\n             let end_chan = SharedChan::new(end_chan);"}, {"sha": "e65a45f0e0749ed6e4ba0c9a2e4e79cda16c7cad", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "patch": "@@ -819,6 +819,7 @@ mod test {\n     use cell::Cell;\n     use rt::thread::Thread;\n     use rt::task::{Task, Sched};\n+    use rt::util;\n     use option::{Some};\n \n     #[test]\n@@ -1040,6 +1041,7 @@ mod test {\n \n     #[test]\n     fn test_stress_schedule_task_states() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         let n = stress_factor() * 120;\n         for _ in range(0, n as int) {\n             test_schedule_home_states();"}, {"sha": "4e2f9fbe130754ce2e7636173d27455ffc32e1bc", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "patch": "@@ -18,7 +18,7 @@ use iterator::{Iterator, range};\n use super::io::net::ip::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use vec::{OwnedVector, MutableVector, ImmutableVector};\n use rt::sched::Scheduler;\n-use unstable::run_in_bare_thread;\n+use unstable::{run_in_bare_thread};\n use rt::thread::Thread;\n use rt::task::Task;\n use rt::uv::uvio::UvEventLoop;\n@@ -162,10 +162,14 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         let nthreads = match os::getenv(\"RUST_RT_TEST_THREADS\") {\n             Some(nstr) => FromStr::from_str(nstr).unwrap(),\n             None => {\n-                // Using more threads than cores in test code\n-                // to force the OS to preempt them frequently.\n-                // Assuming that this help stress test concurrent types.\n-                util::num_cpus() * 2\n+                if util::limit_thread_creation_due_to_osx_and_valgrind() {\n+                    1\n+                } else {\n+                    // Using more threads than cores in test code\n+                    // to force the OS to preempt them frequently.\n+                    // Assuming that this help stress test concurrent types.\n+                    util::num_cpus() * 2\n+                }\n             }\n         };\n "}, {"sha": "c81f3ec9a7993b6cdb888fb5d072e5099cdf3341", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "patch": "@@ -15,6 +15,9 @@ use option::{Some, None};\n use os;\n use str::StrSlice;\n \n+#[cfg(target_os=\"macos\")]\n+use unstable::running_on_valgrind;\n+\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n@@ -28,12 +31,35 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n+/// Valgrind has a fixed-sized array (size around 2000) of segment descriptors wired into it; this\n+/// is a hard limit and requires rebuilding valgrind if you want to go beyond it. Normally this is\n+/// not a problem, but in some tests, we produce a lot of threads casually. Making lots of threads\n+/// alone might not be a problem _either_, except on OSX, the segments produced for new threads\n+/// _take a while_ to get reclaimed by the OS. Combined with the fact that libuv schedulers fork off\n+/// a separate thread for polling fsevents on OSX, we get a perfect storm of creating \"too many\n+/// mappings\" for valgrind to handle when running certain stress tests in the runtime.\n+#[cfg(target_os=\"macos\")]\n+pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n+    running_on_valgrind()\n+}\n+\n+#[cfg(not(target_os=\"macos\"))]\n+pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n+    false\n+}\n+\n /// Get's the number of scheduler threads requested by the environment\n /// either `RUST_THREADS` or `num_cpus`.\n pub fn default_sched_threads() -> uint {\n     match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => FromStr::from_str(nstr).unwrap(),\n-        None => num_cpus()\n+        None => {\n+            if limit_thread_creation_due_to_osx_and_valgrind() {\n+                1\n+            } else {\n+                num_cpus()\n+            }\n+        }\n     }\n }\n "}, {"sha": "eeaee4c14a51264ae801491926078e5a02c9e7ba", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "patch": "@@ -955,6 +955,7 @@ mod tests {\n     use path::Path;\n     use run;\n     use str;\n+    use unstable::running_on_valgrind;\n \n     #[test]\n     #[cfg(windows)]\n@@ -1365,13 +1366,4 @@ mod tests {\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"));\n     }\n-\n-    fn running_on_valgrind() -> bool {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        unsafe { rust_running_on_valgrind() != 0 }\n-    }\n-\n-    extern {\n-        fn rust_running_on_valgrind() -> uintptr_t;\n-    }\n }"}, {"sha": "51de3caf2aebb276a62cf7bb5ef8d33e59365528", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=19f4ae1415e2baa4b9d756b7af8a0d5779cfca9b", "patch": "@@ -14,6 +14,7 @@ use comm::{GenericChan, GenericPort};\n use comm;\n use prelude::*;\n use task;\n+use libc::uintptr_t;\n \n pub mod dynamic_lib;\n \n@@ -118,3 +119,17 @@ pub fn change_dir_locked(p: &Path, action: &fn()) -> bool {\n         fn rust_drop_change_dir_lock();\n     }\n }\n+\n+\n+/// Dynamically inquire about whether we're running under V.\n+/// You should usually not use this unless your test definitely\n+/// can't run correctly un-altered. Valgrind is there to help\n+/// you notice weirdness in normal, un-doctored code paths!\n+pub fn running_on_valgrind() -> bool {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    unsafe { rust_running_on_valgrind() != 0 }\n+}\n+\n+extern {\n+    fn rust_running_on_valgrind() -> uintptr_t;\n+}"}]}