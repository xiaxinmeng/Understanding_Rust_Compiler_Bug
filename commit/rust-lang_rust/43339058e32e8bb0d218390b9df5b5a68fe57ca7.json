{"sha": "43339058e32e8bb0d218390b9df5b5a68fe57ca7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzM5MDU4ZTMyZThiYjBkMjE4MzkwYjlkZjViNWE2OGZlNTdjYTc=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-22T07:23:31Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-22T07:23:31Z"}, "message": "add support of feature flag for runnables #4464\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "75ab113f7728d08a4093621b8a02b3005760843e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ab113f7728d08a4093621b8a02b3005760843e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43339058e32e8bb0d218390b9df5b5a68fe57ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43339058e32e8bb0d218390b9df5b5a68fe57ca7", "html_url": "https://github.com/rust-lang/rust/commit/43339058e32e8bb0d218390b9df5b5a68fe57ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43339058e32e8bb0d218390b9df5b5a68fe57ca7/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c8aa7c60c05db66ba4e89ae9e05c82e62507a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c8aa7c60c05db66ba4e89ae9e05c82e62507a5", "html_url": "https://github.com/rust-lang/rust/commit/a7c8aa7c60c05db66ba4e89ae9e05c82e62507a5"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "98f44f56d0392db18d75bb5b4a6e94f36ad9c5bd", "filename": "crates/ra_cfg/src/cfg_expr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/43339058e32e8bb0d218390b9df5b5a68fe57ca7/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43339058e32e8bb0d218390b9df5b5a68fe57ca7/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs?ref=43339058e32e8bb0d218390b9df5b5a68fe57ca7", "patch": "@@ -35,14 +35,11 @@ impl CfgExpr {\n     }\n \n     /// Return minimal features needed\n-    pub fn minimal_features_needed(&self) -> Option<Vec<SmolStr>> {\n+    pub fn minimal_features_needed(&self) -> Vec<SmolStr> {\n         let mut features = vec![];\n         self.collect_minimal_features_needed(&mut features);\n-        if features.is_empty() {\n-            None\n-        } else {\n-            Some(features)\n-        }\n+\n+        features\n     }\n \n     fn collect_minimal_features_needed(&self, features: &mut Vec<SmolStr>) {\n@@ -169,26 +166,26 @@ mod tests {\n         let (subtree, _) = get_token_tree_generated(r#\"#![cfg(feature = \"baz\")]\"#);\n         let cfg_expr = parse_cfg(&subtree);\n \n-        assert_eq!(cfg_expr.minimal_features_needed().unwrap(), vec![SmolStr::new(\"baz\")]);\n+        assert_eq!(cfg_expr.minimal_features_needed(), vec![SmolStr::new(\"baz\")]);\n \n         let (subtree, _) =\n             get_token_tree_generated(r#\"#![cfg(all(feature = \"baz\", feature = \"foo\"))]\"#);\n         let cfg_expr = parse_cfg(&subtree);\n \n         assert_eq!(\n-            cfg_expr.minimal_features_needed().unwrap(),\n+            cfg_expr.minimal_features_needed(),\n             vec![SmolStr::new(\"baz\"), SmolStr::new(\"foo\")]\n         );\n \n         let (subtree, _) =\n             get_token_tree_generated(r#\"#![cfg(any(feature = \"baz\", feature = \"foo\", unix))]\"#);\n         let cfg_expr = parse_cfg(&subtree);\n \n-        assert_eq!(cfg_expr.minimal_features_needed().unwrap(), vec![SmolStr::new(\"baz\")]);\n+        assert_eq!(cfg_expr.minimal_features_needed(), vec![SmolStr::new(\"baz\")]);\n \n         let (subtree, _) = get_token_tree_generated(r#\"#![cfg(foo)]\"#);\n         let cfg_expr = parse_cfg(&subtree);\n \n-        assert!(cfg_expr.minimal_features_needed().is_none());\n+        assert!(cfg_expr.minimal_features_needed().is_empty());\n     }\n }"}, {"sha": "a460370c5c3295decf0d0db531fa2036c6253776", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43339058e32e8bb0d218390b9df5b5a68fe57ca7/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43339058e32e8bb0d218390b9df5b5a68fe57ca7/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=43339058e32e8bb0d218390b9df5b5a68fe57ca7", "patch": "@@ -190,17 +190,8 @@ fn runnable_mod(\n \n fn get_features_needed(attrs: Attrs) -> Option<Vec<SmolStr>> {\n     let cfg_expr = attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree));\n-    let features_needed = cfg_expr.fold(vec![], |mut acc, cfg| {\n-        if let Some(features_needed) = cfg.minimal_features_needed() {\n-            acc.extend(features_needed);\n-        }\n-        acc\n-    });\n-    if features_needed.is_empty() {\n-        None\n-    } else {\n-        Some(features_needed)\n-    }\n+    let features_needed = cfg_expr.map(|cfg| cfg.minimal_features_needed()).flatten().collect();\n+    Some(features_needed).filter(|it: &Vec<SmolStr>| !it.is_empty())\n }\n \n #[cfg(test)]"}]}