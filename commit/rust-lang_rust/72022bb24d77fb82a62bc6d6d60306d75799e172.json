{"sha": "72022bb24d77fb82a62bc6d6d60306d75799e172", "node_id": "C_kwDOAAsO6NoAKDcyMDIyYmIyNGQ3N2ZiODJhNjJiYzZkNmQ2MDMwNmQ3NTc5OWUxNzI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-29T11:10:56Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-29T11:10:56Z"}, "message": "Sync from rust f4956053816439a5884cb2ad1247835858f92218", "tree": {"sha": "f5ab06b3e09a3a2ec2bb35c2a952219141e16ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ab06b3e09a3a2ec2bb35c2a952219141e16ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72022bb24d77fb82a62bc6d6d60306d75799e172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72022bb24d77fb82a62bc6d6d60306d75799e172", "html_url": "https://github.com/rust-lang/rust/commit/72022bb24d77fb82a62bc6d6d60306d75799e172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72022bb24d77fb82a62bc6d6d60306d75799e172/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c79ce3bac73d7e9ade41d9ed488644e705e96f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c79ce3bac73d7e9ade41d9ed488644e705e96f4", "html_url": "https://github.com/rust-lang/rust/commit/0c79ce3bac73d7e9ade41d9ed488644e705e96f4"}, {"sha": "2f624db5eaeeebadbebdef727b941c599916aa15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f624db5eaeeebadbebdef727b941c599916aa15", "html_url": "https://github.com/rust-lang/rust/commit/2f624db5eaeeebadbebdef727b941c599916aa15"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "d994e2fbc0ae0be69e0c06676cf630506030d69c", "filename": "example/alloc_example.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72022bb24d77fb82a62bc6d6d60306d75799e172/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72022bb24d77fb82a62bc6d6d60306d75799e172/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=72022bb24d77fb82a62bc6d6d60306d75799e172", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics)]\n+#![feature(start, core_intrinsics, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;\n@@ -22,6 +22,11 @@ fn panic_handler(_: &core::panic::PanicInfo<'_>) -> ! {\n     core::intrinsics::abort();\n }\n \n+#[alloc_error_handler]\n+fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n+    core::intrinsics::abort();\n+}\n+\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = Box::new(\"Hello World!\\0\");"}, {"sha": "e533afcfaa946729b8278f788697293b603c685f", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=72022bb24d77fb82a62bc6d6d60306d75799e172", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn get_function_sig<'tcx>(\n     default_call_conv: CallConv,\n     inst: Instance<'tcx>,\n ) -> Signature {\n-    assert!(!inst.substs.needs_infer());\n+    assert!(!inst.substs.has_infer());\n     clif_sig_from_fn_abi(\n         tcx,\n         default_call_conv,"}, {"sha": "2c246ceb37d54fa43940774b79a359f39c346da3", "filename": "src/allocator.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=72022bb24d77fb82a62bc6d6d60306d75799e172", "patch": "@@ -6,6 +6,7 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n+use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -14,14 +15,21 @@ pub(crate) fn codegen(\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n     let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n-    codegen_inner(module, unwind_context, kind, tcx.sess.opts.unstable_opts.oom);\n+    codegen_inner(\n+        module,\n+        unwind_context,\n+        kind,\n+        tcx.alloc_error_handler_kind(()).unwrap(),\n+        tcx.sess.opts.unstable_opts.oom,\n+    );\n     true\n }\n \n fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n+    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -63,6 +71,19 @@ fn codegen_inner(\n         );\n     }\n \n+    let sig = Signature {\n+        call_conv: module.target_config().default_call_conv,\n+        params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n+        returns: vec![],\n+    };\n+    crate::common::create_wrapper_function(\n+        module,\n+        unwind_context,\n+        sig,\n+        \"__rust_alloc_error_handler\",\n+        &alloc_error_handler_kind.fn_name(sym::oom),\n+    );\n+\n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();\n     data_ctx.set_align(1);"}, {"sha": "292f24263ac5d168a1e037ce400b714d33583f1c", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=72022bb24d77fb82a62bc6d6d60306d75799e172", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) -> CodegenedFunction {\n-    debug_assert!(!instance.substs.needs_infer());\n+    debug_assert!(!instance.substs.has_infer());\n \n     let symbol_name = tcx.symbol_name(instance).name.to_string();\n     let _timer = tcx.prof.generic_activity_with_arg(\"codegen fn\", &*symbol_name);"}, {"sha": "539f8c103dbd7b59f09932315692ecebfa32d6f7", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72022bb24d77fb82a62bc6d6d60306d75799e172/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=72022bb24d77fb82a62bc6d6d60306d75799e172", "patch": "@@ -530,7 +530,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n         // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n         // doesn't have UB both are codegen'ed the same way\n-        sym::offset | sym::arith_offset => {\n+        sym::arith_offset => {\n             intrinsic_args!(fx, args => (base, offset); intrinsic);\n             let offset = offset.load_scalar(fx);\n "}]}