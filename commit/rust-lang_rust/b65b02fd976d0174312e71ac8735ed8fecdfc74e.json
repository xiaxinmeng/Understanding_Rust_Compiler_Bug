{"sha": "b65b02fd976d0174312e71ac8735ed8fecdfc74e", "node_id": "C_kwDOAAsO6NoAKGI2NWIwMmZkOTc2ZDAxNzQzMTJlNzFhYzg3MzVlZDhmZWNkZmM3NGU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-29T17:50:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-29T17:50:21Z"}, "message": "Fix signature help not showing up when cursor is between `))` or `>>`", "tree": {"sha": "a8362c3ff3bb72d541be8eae2b9ca66d6d6ee58d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8362c3ff3bb72d541be8eae2b9ca66d6d6ee58d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65b02fd976d0174312e71ac8735ed8fecdfc74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65b02fd976d0174312e71ac8735ed8fecdfc74e", "html_url": "https://github.com/rust-lang/rust/commit/b65b02fd976d0174312e71ac8735ed8fecdfc74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65b02fd976d0174312e71ac8735ed8fecdfc74e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3827e3ddf1f04adba960ffd747316861b0a68930", "url": "https://api.github.com/repos/rust-lang/rust/commits/3827e3ddf1f04adba960ffd747316861b0a68930", "html_url": "https://github.com/rust-lang/rust/commit/3827e3ddf1f04adba960ffd747316861b0a68930"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "6045a787ecc23cf26647113e8cf24ee214130535", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b65b02fd976d0174312e71ac8735ed8fecdfc74e/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65b02fd976d0174312e71ac8735ed8fecdfc74e/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=b65b02fd976d0174312e71ac8735ed8fecdfc74e", "patch": "@@ -74,31 +74,40 @@ pub(crate) fn signature_help(db: &RootDatabase, position: FilePosition) -> Optio\n                 ast::ArgList(arg_list) => {\n                     let cursor_outside = arg_list.r_paren_token().as_ref() == Some(&token);\n                     if cursor_outside {\n-                        return None;\n+                        continue;\n                     }\n-                    return signature_help_for_call(&sema, token);\n+                    return signature_help_for_call(&sema, arg_list, token);\n                 },\n                 ast::GenericArgList(garg_list) => {\n                     let cursor_outside = garg_list.r_angle_token().as_ref() == Some(&token);\n                     if cursor_outside {\n-                        return None;\n+                        continue;\n                     }\n-                    return signature_help_for_generics(&sema, token);\n+                    return signature_help_for_generics(&sema, garg_list, token);\n                 },\n                 _ => (),\n             }\n         }\n+\n+        // Stop at multi-line expressions, since the signature of the outer call is not very\n+        // helpful inside them.\n+        if let Some(expr) = ast::Expr::cast(node.clone()) {\n+            if expr.syntax().text().contains_char('\\n') {\n+                return None;\n+            }\n+        }\n     }\n \n     None\n }\n \n fn signature_help_for_call(\n     sema: &Semantics<'_, RootDatabase>,\n+    arg_list: ast::ArgList,\n     token: SyntaxToken,\n ) -> Option<SignatureHelp> {\n     // Find the calling expression and its NameRef\n-    let mut node = token.parent()?;\n+    let mut node = arg_list.syntax().parent()?;\n     let calling_node = loop {\n         if let Some(callable) = ast::CallableExpr::cast(node.clone()) {\n             if callable\n@@ -109,14 +118,6 @@ fn signature_help_for_call(\n             }\n         }\n \n-        // Stop at multi-line expressions, since the signature of the outer call is not very\n-        // helpful inside them.\n-        if let Some(expr) = ast::Expr::cast(node.clone()) {\n-            if expr.syntax().text().contains_char('\\n') {\n-                return None;\n-            }\n-        }\n-\n         node = node.parent()?;\n     };\n \n@@ -200,10 +201,11 @@ fn signature_help_for_call(\n \n fn signature_help_for_generics(\n     sema: &Semantics<'_, RootDatabase>,\n+    garg_list: ast::GenericArgList,\n     token: SyntaxToken,\n ) -> Option<SignatureHelp> {\n-    let parent = token.parent()?;\n-    let arg_list = parent\n+    let arg_list = garg_list\n+        .syntax()\n         .ancestors()\n         .filter_map(ast::GenericArgList::cast)\n         .find(|list| list.syntax().text_range().contains(token.text_range().start()))?;\n@@ -770,6 +772,32 @@ fn f() {\n \"#,\n             expect![[]],\n         );\n+        check(\n+            r#\"\n+fn foo(a: u8) -> u8 {a}\n+fn bar(a: u8) -> u8 {a}\n+fn f() {\n+    foo(bar(123)$0)\n+}\n+\"#,\n+            expect![[r#\"\n+                fn foo(a: u8) -> u8\n+                       ^^^^^\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+struct Vec<T>(T);\n+struct Vec2<T>(T);\n+fn f() {\n+    let _: Vec2<Vec<u8>$0>\n+}\n+\"#,\n+            expect![[r#\"\n+                struct Vec2<T>\n+                            ^\n+            \"#]],\n+        );\n     }\n \n     #[test]"}]}