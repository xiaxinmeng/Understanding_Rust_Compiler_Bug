{"sha": "4a44efae14761baefbe5fa439bc1ba881369b32c", "node_id": "C_kwDOAAsO6NoAKDRhNDRlZmFlMTQ3NjFiYWVmYmU1ZmE0MzliYzFiYTg4MTM2OWIzMmM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-29T22:39:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-29T22:39:50Z"}, "message": "Rollup merge of #99671 - TaKO8Ki:suggest-dereferencing-index, r=compiler-errors\n\nSuggest dereferencing index when trying to use a reference of usize as index\n\nfixes #96678", "tree": {"sha": "eec91fa4aafdda38e4af52146526be62eb465e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eec91fa4aafdda38e4af52146526be62eb465e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a44efae14761baefbe5fa439bc1ba881369b32c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5GG3CRBK7hj4Ov3rIwAAgugIAEuHgYGlXoeKyH2DZQ5UkvA4\nK6fzrMN74+Bkjnng5AN3xgd5f65zy3X1vdtDekkdO2opFBHSNpy01DMPn5O+tJip\nwGIzb5Kq8UfyVriUXPCED/vf1+WWoSnTchRt2ieX3lR9i4igqFrAKfy/qKv7c/nJ\nESWqhdPUVNBNgkqrxpkIachuh5+WXuKE8EtLhp5Y9eo22G5VhLNoshVJgnUPx1uF\n6JEBbictbBslqwXPCZ7RW7UD51IyxsA0rqAjy+G0xmJvvjDarri+Uz0w0jTMB+sD\n1FqyChEQ0mHgXB4EXaEwmJK7i8LLf8aLvJNBU6ZvwilqCyC22FQ+XueFdauyVH8=\n=b6Po\n-----END PGP SIGNATURE-----\n", "payload": "tree eec91fa4aafdda38e4af52146526be62eb465e5c\nparent 955091be8fded08338cb2ad8f0f2eb50e0a3df47\nparent 3ae669d758f7a7c0498d9208ef231718e50fb0ae\nauthor Yuki Okushi <jtitor@2k36.org> 1659134390 +0900\ncommitter GitHub <noreply@github.com> 1659134390 +0900\n\nRollup merge of #99671 - TaKO8Ki:suggest-dereferencing-index, r=compiler-errors\n\nSuggest dereferencing index when trying to use a reference of usize as index\n\nfixes #96678\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a44efae14761baefbe5fa439bc1ba881369b32c", "html_url": "https://github.com/rust-lang/rust/commit/4a44efae14761baefbe5fa439bc1ba881369b32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a44efae14761baefbe5fa439bc1ba881369b32c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955091be8fded08338cb2ad8f0f2eb50e0a3df47", "url": "https://api.github.com/repos/rust-lang/rust/commits/955091be8fded08338cb2ad8f0f2eb50e0a3df47", "html_url": "https://github.com/rust-lang/rust/commit/955091be8fded08338cb2ad8f0f2eb50e0a3df47"}, {"sha": "3ae669d758f7a7c0498d9208ef231718e50fb0ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae669d758f7a7c0498d9208ef231718e50fb0ae", "html_url": "https://github.com/rust-lang/rust/commit/3ae669d758f7a7c0498d9208ef231718e50fb0ae"}], "stats": {"total": 143, "additions": 111, "deletions": 32}, "files": [{"sha": "7ee3fe844b5a8cb1ce8071193f1237804c9b1809", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -531,6 +531,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);\n+                        self.suggest_dereferencing_index(&obligation, &mut err, trait_predicate);\n                         let mut suggested =\n                             self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_fn_call(&obligation, &mut err, trait_predicate);"}, {"sha": "1f72c96406de8fca1ee6f678c1ccd6eddf554ef3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -320,6 +320,13 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n+\n+    fn suggest_dereferencing_index(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2895,6 +2902,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             );\n         }\n     }\n+\n+    fn suggest_dereferencing_index(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n+        if let ObligationCauseCode::ImplDerivedObligation(_) = obligation.cause.code()\n+            && self.tcx.is_diagnostic_item(sym::SliceIndex, trait_pred.skip_binder().trait_ref.def_id)\n+            && let ty::Slice(_) = trait_pred.skip_binder().trait_ref.substs.type_at(1).kind()\n+            && let ty::Ref(_, inner_ty, _) = trait_pred.skip_binder().self_ty().kind()\n+            && let ty::Uint(ty::UintTy::Usize) = inner_ty.kind()\n+        {\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_lo(),\n+            \"dereference this index\",\n+            '*',\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "65a562060ebfe23faf042ae05f9216ce7af44885", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -2648,6 +2648,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some((index_ty, element_ty)) => {\n                     // two-phase not needed because index_ty is never mutable\n                     self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n+                    self.select_obligations_where_possible(false, |errors| {\n+                        self.point_at_index_if_possible(errors, idx.span)\n+                    });\n                     element_ty\n                 }\n                 None => {\n@@ -2691,6 +2694,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn point_at_index_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n+        span: Span,\n+    ) {\n+        for error in errors {\n+            match error.obligation.predicate.kind().skip_binder() {\n+                ty::PredicateKind::Trait(predicate)\n+                    if self.tcx.is_diagnostic_item(sym::SliceIndex, predicate.trait_ref.def_id) => {\n+                }\n+                _ => continue,\n+            }\n+            error.obligation.cause.span = span;\n+        }\n+    }\n+\n     fn check_expr_yield(\n         &self,\n         value: &'tcx hir::Expr<'tcx>,"}, {"sha": "b36f4dab8291db56a6dc355e253f4e34910af8f2", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `[{integer}]` cannot be indexed by `i32`\n-  --> $DIR/index-help.rs:3:5\n+  --> $DIR/index-help.rs:3:7\n    |\n LL |     x[0i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "fbff20f8deeabec8f35eea6fa09af31f19c5e767", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `[{integer}]` cannot be indexed by `u8`\n-  --> $DIR/indexing-requires-a-uint.rs:6:5\n+  --> $DIR/indexing-requires-a-uint.rs:6:9\n    |\n LL |     [0][0u8];\n-   |     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |         ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "3f9094d124eea340fd9782dfea7aaebdf02fcf53", "filename": "src/test/ui/integral-indexing.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-indexing.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -1,78 +1,78 @@\n error[E0277]: the type `[isize]` cannot be indexed by `u8`\n-  --> $DIR/integral-indexing.rs:6:5\n+  --> $DIR/integral-indexing.rs:6:7\n    |\n LL |     v[3u8];\n-   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i8`\n-  --> $DIR/integral-indexing.rs:7:5\n+  --> $DIR/integral-indexing.rs:7:7\n    |\n LL |     v[3i8];\n-   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `u32`\n-  --> $DIR/integral-indexing.rs:8:5\n+  --> $DIR/integral-indexing.rs:8:7\n    |\n LL |     v[3u32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `Vec<isize>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i32`\n-  --> $DIR/integral-indexing.rs:9:5\n+  --> $DIR/integral-indexing.rs:9:7\n    |\n LL |     v[3i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `Vec<isize>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u8`\n-  --> $DIR/integral-indexing.rs:12:5\n+  --> $DIR/integral-indexing.rs:12:18\n    |\n LL |     s.as_bytes()[3u8];\n-   |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i8`\n-  --> $DIR/integral-indexing.rs:13:5\n+  --> $DIR/integral-indexing.rs:13:18\n    |\n LL |     s.as_bytes()[3i8];\n-   |     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i8>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u32`\n-  --> $DIR/integral-indexing.rs:14:5\n+  --> $DIR/integral-indexing.rs:14:18\n    |\n LL |     s.as_bytes()[3u32];\n-   |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<u32>` for `[u8]`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i32`\n-  --> $DIR/integral-indexing.rs:15:5\n+  --> $DIR/integral-indexing.rs:15:18\n    |\n LL |     s.as_bytes()[3i32];\n-   |     ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |                  ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`"}, {"sha": "72f67a685156dba2f8652ef43d7dc9270def6699", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: the type `[i32]` cannot be indexed by `i32`\n-  --> $DIR/slice-index.rs:8:5\n+  --> $DIR/slice-index.rs:8:7\n    |\n LL |     x[1i32];\n-   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n    = note: required because of the requirements on the impl of `Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `RangeTo<i32>`\n-  --> $DIR/slice-index.rs:9:5\n+  --> $DIR/slice-index.rs:9:7\n    |\n LL |     x[..1i32];\n-   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n+   |       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeTo<i32>`\n    = help: the following other types implement trait `SliceIndex<T>`:"}, {"sha": "9079a18d6a67b80cc37ff515f26a1b672b9c97c1", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:3:17\n+  --> $DIR/str-idx.rs:3:19\n    |\n LL |     let _: u8 = s[4];\n-   |                 ^^^^ string indices are ranges of `usize`\n+   |                   ^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n@@ -47,10 +47,10 @@ LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i:\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n-  --> $DIR/str-idx.rs:6:17\n+  --> $DIR/str-idx.rs:6:19\n    |\n LL |     let _: u8 = s['c'];\n-   |                 ^^^^^^ string indices are ranges of `usize`\n+   |                   ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required because of the requirements on the impl of `Index<char>` for `str`"}, {"sha": "2d062e56a9bdd121b9f2f1924eca64323a7a479d", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -25,10 +25,10 @@ LL |     s[1..2] = bot();\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be indexed by `usize`\n-  --> $DIR/str-mut-idx.rs:7:5\n+  --> $DIR/str-mut-idx.rs:7:7\n    |\n LL |     s[1usize] = bot();\n-   |     ^^^^^^^^^ string indices are ranges of `usize`\n+   |       ^^^^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `usize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n@@ -71,10 +71,10 @@ LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n-  --> $DIR/str-mut-idx.rs:13:5\n+  --> $DIR/str-mut-idx.rs:13:7\n    |\n LL |     s['c'];\n-   |     ^^^^^^ string indices are ranges of `usize`\n+   |       ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required because of the requirements on the impl of `Index<char>` for `str`"}, {"sha": "dd4ae4eb14c3051c3911be0e5ee80a8721c1ceee", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.fixed?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let i: &usize = &1;\n+    let one_item_please: i32 = [1, 2, 3][*i]; //~ ERROR the type `[{integer}]` cannot be indexed by `&usize`\n+}"}, {"sha": "82ebacc49f235cccdb16f58fa1d76b4917241b0d", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.rs?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let i: &usize = &1;\n+    let one_item_please: i32 = [1, 2, 3][i]; //~ ERROR the type `[{integer}]` cannot be indexed by `&usize`\n+}"}, {"sha": "c8b87af7bd80c76ecc1e9233fedf6985f5a7bebf", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a44efae14761baefbe5fa439bc1ba881369b32c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr?ref=4a44efae14761baefbe5fa439bc1ba881369b32c", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the type `[{integer}]` cannot be indexed by `&usize`\n+  --> $DIR/suggest-dereferencing-index.rs:6:42\n+   |\n+LL |     let one_item_please: i32 = [1, 2, 3][i];\n+   |                                          ^ slice indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&usize`\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+   = note: required because of the requirements on the impl of `Index<&usize>` for `[{integer}]`\n+help: dereference this index\n+   |\n+LL |     let one_item_please: i32 = [1, 2, 3][*i];\n+   |                                          +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}