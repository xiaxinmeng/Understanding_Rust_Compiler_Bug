{"sha": "caa13b3f95c26db7450f6efa5371298ea650792b", "node_id": "C_kwDOAAsO6NoAKGNhYTEzYjNmOTVjMjZkYjc0NTBmNmVmYTUzNzEyOThlYTY1MDc5MmI", "commit": {"author": {"name": "alibektas", "email": "bektasali@protonmail.com", "date": "2023-04-21T19:09:11Z"}, "committer": {"name": "alibektas", "email": "bektasali@protonmail.com", "date": "2023-04-21T19:09:11Z"}, "message": "Small changes in str formatting", "tree": {"sha": "882feabfb8b3df1990aaae88841b3db7d632c5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882feabfb8b3df1990aaae88841b3db7d632c5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa13b3f95c26db7450f6efa5371298ea650792b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa13b3f95c26db7450f6efa5371298ea650792b", "html_url": "https://github.com/rust-lang/rust/commit/caa13b3f95c26db7450f6efa5371298ea650792b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa13b3f95c26db7450f6efa5371298ea650792b/comments", "author": {"login": "alibektas", "id": 20956650, "node_id": "MDQ6VXNlcjIwOTU2NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/20956650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibektas", "html_url": "https://github.com/alibektas", "followers_url": "https://api.github.com/users/alibektas/followers", "following_url": "https://api.github.com/users/alibektas/following{/other_user}", "gists_url": "https://api.github.com/users/alibektas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibektas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibektas/subscriptions", "organizations_url": "https://api.github.com/users/alibektas/orgs", "repos_url": "https://api.github.com/users/alibektas/repos", "events_url": "https://api.github.com/users/alibektas/events{/privacy}", "received_events_url": "https://api.github.com/users/alibektas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alibektas", "id": 20956650, "node_id": "MDQ6VXNlcjIwOTU2NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/20956650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibektas", "html_url": "https://github.com/alibektas", "followers_url": "https://api.github.com/users/alibektas/followers", "following_url": "https://api.github.com/users/alibektas/following{/other_user}", "gists_url": "https://api.github.com/users/alibektas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibektas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibektas/subscriptions", "organizations_url": "https://api.github.com/users/alibektas/orgs", "repos_url": "https://api.github.com/users/alibektas/repos", "events_url": "https://api.github.com/users/alibektas/events{/privacy}", "received_events_url": "https://api.github.com/users/alibektas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3", "html_url": "https://github.com/rust-lang/rust/commit/7c9e4e10bc406176ba60bd40487ac0fc7ad451a3"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "74cf9888e9b83962dd61c667675eb31a8e755f2e", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/caa13b3f95c26db7450f6efa5371298ea650792b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa13b3f95c26db7450f6efa5371298ea650792b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=caa13b3f95c26db7450f6efa5371298ea650792b", "patch": "@@ -14,8 +14,6 @@ use stdx::{format_to, never};\n \n use crate::{ast, utils::is_raw_identifier, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n \n-use super::WhereClause;\n-\n /// While the parent module defines basic atomic \"constructors\", the `ext`\n /// module defines shortcuts for common things.\n ///\n@@ -160,50 +158,47 @@ fn ty_from_text(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"type _T = {text};\"))\n }\n \n-/** Related goto [link](https://doc.rust-lang.org/reference/items/type-aliases.html)\n-    Type Alias syntax is\n-\n-    ```\n-    TypeAlias :\n-       type IDENTIFIER GenericParams? ( : TypeParamBounds )? WhereClause? ( = Type WhereClause?)? ;\n-    ```\n-\n-    FIXME : ident should be of type ast::Ident\n-*/\n+/// Related goto [link](https://doc.rust-lang.org/reference/items/type-aliases.html)\n+///     Type Alias syntax is\n+///\n+///     ```\n+///     TypeAlias :\n+///        type IDENTIFIER GenericParams? ( : TypeParamBounds )? WhereClause? ( = Type WhereClause?)? ;\n+///     ```\n+///\n+///     FIXME : ident should be of type ast::Ident\n pub fn ty_alias(\n-    ident: String,\n+    ident: &str,\n     generic_param_list: Option<ast::GenericParamList>,\n     type_param_bounds: Option<ast::TypeParam>,\n-    where_clause: Option<WhereClause>,\n+    where_clause: Option<ast::WhereClause>,\n     assignment: Option<(ast::Type, Option<ast::WhereClause>)>,\n ) -> ast::TypeAlias {\n     let mut s = String::new();\n-    s.push_str(format!(\"type {}\", ident.as_str()).as_str());\n+    s.push_str(&format!(\"type {}\", ident));\n \n     if let Some(list) = generic_param_list {\n-        s.push_str(list.to_string().as_str());\n+        s.push_str(&list.to_string());\n     }\n \n     if let Some(list) = type_param_bounds {\n-        s.push_str(format!(\" : {}\", list.to_string().as_str()).as_str());\n+        s.push_str(&format!(\" : {}\", &list.to_string()));\n     }\n \n     if let Some(cl) = where_clause {\n-        s.push_str(format!(\" {}\", cl.to_string().as_str()).as_str());\n+        s.push_str(&format!(\" {}\", &cl.to_string()));\n     }\n \n     if let Some(exp) = assignment {\n         if let Some(cl) = exp.1 {\n-            s.push_str(\n-                format!(\"= {} {}\", exp.0.to_string().as_str(), cl.to_string().as_str()).as_str(),\n-            );\n+            s.push_str(&format!(\"= {} {}\", &exp.0.to_string(), &cl.to_string()));\n         } else {\n-            s.push_str(format!(\"= {}\", exp.0.to_string().as_str()).as_str());\n+            s.push_str(&format!(\"= {}\", &exp.0.to_string()));\n         }\n     }\n \n     s.push_str(\";\");\n-    ast_from_text(s.as_str())\n+    ast_from_text(&s)\n }\n \n pub fn assoc_item_list() -> ast::AssocItemList {"}]}