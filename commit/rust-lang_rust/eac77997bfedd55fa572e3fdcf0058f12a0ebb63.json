{"sha": "eac77997bfedd55fa572e3fdcf0058f12a0ebb63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzc3OTk3YmZlZGQ1NWZhNTcyZTNmZGNmMDA1OGYxMmEwZWJiNjM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-08T22:21:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-08T22:21:20Z"}, "message": "Properly fetch inner and outer attributes on hir-level", "tree": {"sha": "4be2e92745c9cb37ab749b43e9d82f77d06e953d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be2e92745c9cb37ab749b43e9d82f77d06e953d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac77997bfedd55fa572e3fdcf0058f12a0ebb63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac77997bfedd55fa572e3fdcf0058f12a0ebb63", "html_url": "https://github.com/rust-lang/rust/commit/eac77997bfedd55fa572e3fdcf0058f12a0ebb63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac77997bfedd55fa572e3fdcf0058f12a0ebb63/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e6b709e60f22279b755ceae74e579520c9ae3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e6b709e60f22279b755ceae74e579520c9ae3b", "html_url": "https://github.com/rust-lang/rust/commit/e2e6b709e60f22279b755ceae74e579520c9ae3b"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "e9192528afc4a8fa6f79026889fd3a1519d0c115", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/eac77997bfedd55fa572e3fdcf0058f12a0ebb63/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac77997bfedd55fa572e3fdcf0058f12a0ebb63/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=eac77997bfedd55fa572e3fdcf0058f12a0ebb63", "patch": "@@ -9,7 +9,7 @@ use itertools::Itertools;\n use mbe::ast_to_token_tree;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n-    AstToken, SmolStr,\n+    match_ast, AstToken, SmolStr, SyntaxNode,\n };\n use tt::Subtree;\n \n@@ -110,7 +110,7 @@ impl Attrs {\n     }\n \n     pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n-        let docs = ast::CommentIter::from_syntax_node(owner.syntax()).map(|docs_text| {\n+        let outer_docs = ast::CommentIter::from_syntax_node(owner.syntax()).map(|docs_text| {\n             (\n                 docs_text.syntax().text_range().start(),\n                 docs_text.doc_comment().map(|doc| Attr {\n@@ -119,11 +119,13 @@ impl Attrs {\n                 }),\n             )\n         });\n-        let attrs = owner\n-            .attrs()\n+        let outer_attrs = owner.attrs().filter(|attr| attr.excl_token().is_none());\n+        let inner_attrs = inner_attributes(owner.syntax()).into_iter().flatten();\n+        let attrs = outer_attrs\n+            .chain(inner_attrs)\n             .map(|attr| (attr.syntax().text_range().start(), Attr::from_src(attr, hygiene)));\n         // sort here by syntax node offset because the source can have doc attributes and doc strings be interleaved\n-        let attrs: Vec<_> = docs.chain(attrs).sorted_by_key(|&(offset, _)| offset).collect();\n+        let attrs: Vec<_> = outer_docs.chain(attrs).sorted_by_key(|&(offset, _)| offset).collect();\n         let entries = if attrs.is_empty() {\n             // Avoid heap allocation\n             None\n@@ -184,6 +186,38 @@ impl Attrs {\n     }\n }\n \n+fn inner_attributes(syntax: &SyntaxNode) -> Option<impl Iterator<Item = ast::Attr>> {\n+    let (attrs, _docs) = match_ast! {\n+        match syntax {\n+            ast::SourceFile(it) => (it.attrs(), None::<ast::Comment>),\n+            ast::ExternBlock(it) => {\n+                let extern_item_list = it.extern_item_list()?;\n+                (extern_item_list.attrs(), None)\n+            },\n+            ast::Fn(it) => {\n+                let body = it.body()?;\n+                (body.attrs(), None)\n+            },\n+            ast::Impl(it) => {\n+                let assoc_item_list = it.assoc_item_list()?;\n+                (assoc_item_list.attrs(), None)\n+            },\n+            ast::Module(it) => {\n+                let item_list = it.item_list()?;\n+                (item_list.attrs(), None)\n+            },\n+            // FIXME: BlockExpr's only accept inner attributes in specific cases\n+            // Excerpt from the reference:\n+                // Block expressions accept outer and inner attributes, but only when they are the outer\n+                // expression of an expression statement or the final expression of another block expression.\n+            ast::BlockExpr(it) => return None,\n+            _ => return None,\n+        }\n+    };\n+    let attrs = attrs.filter(|attr| attr.excl_token().is_some());\n+    Some(attrs)\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n     pub(crate) path: ModPath,"}]}