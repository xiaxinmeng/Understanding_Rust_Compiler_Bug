{"sha": "9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDJmYjljN2I4ZDFiNThlNmIyNmIzYzczMGM2OWM1MjBkY2Q1ODg=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-18T01:59:46Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-18T13:34:42Z"}, "message": "make cloned generic over deref... and have its tests actually run", "tree": {"sha": "7ab8428e0687fa77eeb55ee8a35ba1cf35a0461e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab8428e0687fa77eeb55ee8a35ba1cf35a0461e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "html_url": "https://github.com/rust-lang/rust/commit/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09279395b6ca40f1398277971586197f949738a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a", "html_url": "https://github.com/rust-lang/rust/commit/f09279395b6ca40f1398277971586197f949738a"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "199389730373a541b2402c88cd86e76645b2d898", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "patch": "@@ -153,6 +153,7 @@ use result::{Result, Ok, Err};\n use slice;\n use slice::AsSlice;\n use clone::Clone;\n+use ops::Deref;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -694,11 +695,12 @@ impl<T> Option<T> {\n     }\n }\n \n-impl<'a, T: Clone> Option<&'a T> {\n-    /// Maps an Option<&T> to an Option<T> by cloning the contents of the Option<&T>.\n+impl<'a, T: Clone, D: Deref<T>> Option<D> {\n+    /// Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\n+    /// Useful for converting an Option<&T> to an Option<T>.\n     #[unstable = \"recently added as part of collections reform\"]\n     pub fn cloned(self) -> Option<T> {\n-        self.map(|t| t.clone())\n+        self.map(|t| t.deref().clone())\n     }\n }\n "}, {"sha": "a5927d47eb0af70b1605fc85e7c6212ba5720d8f", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "patch": "@@ -241,14 +241,29 @@ fn test_collect() {\n     assert!(v == None);\n }\n \n+#[test]\n fn test_cloned() {\n-    let s = 1u32;\n-    let n: Option<&'static u32> = None;\n-    let o = Some(&s);\n-\n-    assert_eq!(o.clone(), Some(&s));\n-    assert_eq!(o.cloned(), Some(1u32));\n-\n-    assert_eq!(n.clone(), None);\n-    assert_eq!(n.cloned(), None);\n+    let val1 = 1u32;\n+    let mut val2 = 2u32;\n+    let val1_ref = &val1;\n+    let opt_none: Option<&'static u32> = None;\n+    let opt_ref = Some(&val1);\n+    let opt_ref_ref = Some(&val1_ref);\n+    let opt_mut_ref = Some(&mut val2);\n+\n+    // None works\n+    assert_eq!(opt_none.clone(), None);\n+    assert_eq!(opt_none.cloned(), None);\n+\n+    // Mutable refs work\n+    assert_eq!(opt_mut_ref.cloned(), Some(2u32));\n+\n+    // Immutable ref works\n+    assert_eq!(opt_ref.clone(), Some(&val1));\n+    assert_eq!(opt_ref.cloned(), Some(1u32));\n+\n+    // Double Immutable ref works\n+    assert_eq!(opt_ref_ref.clone(), Some(&val1_ref));\n+    assert_eq!(opt_ref_ref.clone().cloned(), Some(&val1));\n+    assert_eq!(opt_ref_ref.cloned().cloned(), Some(1u32));\n }\n\\ No newline at end of file"}]}