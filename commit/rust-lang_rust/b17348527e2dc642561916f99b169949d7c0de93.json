{"sha": "b17348527e2dc642561916f99b169949d7c0de93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzM0ODUyN2UyZGM2NDI1NjE5MTZmOTliMTY5OTQ5ZDdjMGRlOTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-10T08:53:05Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-10T08:53:05Z"}, "message": "Complain about multiple methods in scope only once\n\nCloses #1803", "tree": {"sha": "350900afc28304716ac631263577cbdfb09a2fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/350900afc28304716ac631263577cbdfb09a2fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17348527e2dc642561916f99b169949d7c0de93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17348527e2dc642561916f99b169949d7c0de93", "html_url": "https://github.com/rust-lang/rust/commit/b17348527e2dc642561916f99b169949d7c0de93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17348527e2dc642561916f99b169949d7c0de93/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a681628bd4faf9135f0764b3f1f1fdcafc491de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a681628bd4faf9135f0764b3f1f1fdcafc491de6", "html_url": "https://github.com/rust-lang/rust/commit/a681628bd4faf9135f0764b3f1f1fdcafc491de6"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "1539b4f8af6bbc43d68983150ec571bba11fb539", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b17348527e2dc642561916f99b169949d7c0de93/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17348527e2dc642561916f99b169949d7c0de93/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b17348527e2dc642561916f99b169949d7c0de93", "patch": "@@ -1695,7 +1695,7 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n         } else { csearch::get_type(tcx, did).ty }\n     }\n \n-    let result = none;\n+    let result = none, complained = false;\n     std::list::iter(fcx.ccx.impl_map.get(expr.id)) {|impls|\n         if option::is_some(result) { ret; }\n         for @{did, methods, _} in *impls {\n@@ -1709,8 +1709,11 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n                   ures_ok(_) {\n                     if option::is_some(result) {\n                         // FIXME[impl] score specificity to resolve ambiguity?\n-                        tcx.sess.span_err(\n-                           expr.span, \"multiple applicable methods in scope\");\n+                        if !complained {\n+                           tcx.sess.span_err(expr.span, \"multiple applicable \\\n+                                                         methods in scope\");\n+                           complained = true;\n+                        }\n                     } else {\n                         result = some({\n                             method_ty: ty_from_did(tcx, m.did),"}]}