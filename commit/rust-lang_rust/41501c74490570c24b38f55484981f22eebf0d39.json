{"sha": "41501c74490570c24b38f55484981f22eebf0d39", "node_id": "C_kwDOAAsO6NoAKDQxNTAxYzc0NDkwNTcwYzI0YjM4ZjU1NDg0OTgxZjIyZWViZjBkMzk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-10T01:41:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-15T16:40:42Z"}, "message": "Rename super_relate_* to structurally_relate_*", "tree": {"sha": "a8b0913b9e2fd80a3cadd75246d25400f77c67e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8b0913b9e2fd80a3cadd75246d25400f77c67e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41501c74490570c24b38f55484981f22eebf0d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41501c74490570c24b38f55484981f22eebf0d39", "html_url": "https://github.com/rust-lang/rust/commit/41501c74490570c24b38f55484981f22eebf0d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41501c74490570c24b38f55484981f22eebf0d39/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae", "html_url": "https://github.com/rust-lang/rust/commit/6d0b6c0d2cb6eefc8e7b247c3f15b53bd9b0d2ae"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "9559bfab6da189e39e9e564f930715963c516f5d", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=41501c74490570c24b38f55484981f22eebf0d39", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 Ok(a)\n             }\n \n-            _ => ty::relate::super_relate_tys(relation, a, b),\n+            _ => ty::relate::structurally_relate_tys(relation, a, b),\n         }\n     }\n \n@@ -245,7 +245,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             _ => {}\n         }\n \n-        ty::relate::super_relate_consts(relation, a, b)\n+        ty::relate::structurally_relate_consts(relation, a, b)\n     }\n \n     /// Unifies the const variable `target_vid` with the given constant."}, {"sha": "ad4f5058b5ecde299b5f8b48838930492e162a3a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=41501c74490570c24b38f55484981f22eebf0d39", "patch": "@@ -2723,7 +2723,7 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n             | (ty::Infer(ty::InferTy::TyVar(_)), _)\n             | (_, ty::Infer(ty::InferTy::TyVar(_))) => Ok(a),\n             (ty::Infer(_), _) | (_, ty::Infer(_)) => Err(TypeError::Mismatch),\n-            _ => relate::super_relate_tys(self, a, b),\n+            _ => relate::structurally_relate_tys(self, a, b),\n         }\n     }\n "}, {"sha": "3eeb55ae74478943c18fa96c74d58f4fbd7b0277", "filename": "compiler/rustc_infer/src/infer/generalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs?ref=41501c74490570c24b38f55484981f22eebf0d39", "patch": "@@ -306,7 +306,7 @@ where\n                 }\n             }\n \n-            _ => relate::super_relate_tys(self, t, t),\n+            _ => relate::structurally_relate_tys(self, t, t),\n         }?;\n \n         self.cache.insert(t, g);\n@@ -422,7 +422,7 @@ where\n                     Err(TypeError::Mismatch)\n                 }\n             }\n-            _ => relate::super_relate_consts(self, c, c),\n+            _ => relate::structurally_relate_consts(self, c, c),\n         }\n     }\n "}, {"sha": "cd2462d3c31232b9c09b35b67be415a0870e7562", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=41501c74490570c24b38f55484981f22eebf0d39", "patch": "@@ -187,7 +187,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         } else if pattern == value {\n             Ok(pattern)\n         } else {\n-            relate::super_relate_tys(self, pattern, value)\n+            relate::structurally_relate_tys(self, pattern, value)\n         }\n     }\n \n@@ -201,7 +201,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         if pattern == value {\n             Ok(pattern)\n         } else {\n-            relate::super_relate_consts(self, pattern, value)\n+            relate::structurally_relate_consts(self, pattern, value)\n         }\n     }\n "}, {"sha": "cbc68fde9d905aac64e90396bd25ddeef9b6c1c2", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=41501c74490570c24b38f55484981f22eebf0d39", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n \n             (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(self.tcx().ty_error(guar)),\n \n-            _ => relate::super_relate_tys(self, a, b),\n+            _ => relate::structurally_relate_tys(self, a, b),\n         }\n     }\n \n@@ -109,7 +109,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n             _ => {}\n         }\n \n-        relate::super_relate_consts(self, a, b)\n+        relate::structurally_relate_consts(self, a, b)\n     }\n \n     fn binders<T>("}, {"sha": "3bbe6a23b66281ff924ed45101c60b1c9dd350ca", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41501c74490570c24b38f55484981f22eebf0d39/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=41501c74490570c24b38f55484981f22eebf0d39", "patch": "@@ -388,24 +388,24 @@ impl<'tcx> Relate<'tcx> for Ty<'tcx> {\n     }\n }\n \n-/// The main \"type relation\" routine. Note that this does not handle\n-/// inference artifacts, so you should filter those out before calling\n-/// it.\n-pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n+/// Relates `a` and `b` structurally, calling the relation for all nested values.\n+/// Any semantic equality, e.g. of projections, and inference variables have to be\n+/// handled by the caller.\n+pub fn structurally_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n ) -> RelateResult<'tcx, Ty<'tcx>> {\n     let tcx = relation.tcx();\n-    debug!(\"super_relate_tys: a={:?} b={:?}\", a, b);\n+    debug!(\"structurally_relate_tys: a={:?} b={:?}\", a, b);\n     match (a.kind(), b.kind()) {\n         (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n             // The caller should handle these cases!\n-            bug!(\"var types encountered in super_relate_tys\")\n+            bug!(\"var types encountered in structurally_relate_tys\")\n         }\n \n         (ty::Bound(..), _) | (_, ty::Bound(..)) => {\n-            bug!(\"bound types encountered in super_relate_tys\")\n+            bug!(\"bound types encountered in structurally_relate_tys\")\n         }\n \n         (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(tcx.ty_error(guar)),\n@@ -575,15 +575,18 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     }\n }\n \n-/// The main \"const relation\" routine. Note that this does not handle\n-/// inference artifacts, so you should filter those out before calling\n-/// it.\n-pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n+/// Relates `a` and `b` structurally, calling the relation for all nested values.\n+/// Any semantic equality, e.g. of unevaluated consts, and inference variables have\n+/// to be handled by the caller.\n+///\n+/// FIXME: This is not totally structual, which probably should be fixed.\n+/// See the HACKs below.\n+pub fn structurally_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     mut a: ty::Const<'tcx>,\n     mut b: ty::Const<'tcx>,\n ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-    debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n+    debug!(\"{}.structurally_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n     // HACK(const_generics): We still need to eagerly evaluate consts when\n@@ -602,15 +605,15 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         b = tcx.expand_abstract_consts(b);\n     }\n \n-    debug!(\"{}.super_relate_consts(normed_a = {:?}, normed_b = {:?})\", relation.tag(), a, b);\n+    debug!(\"{}.structurally_relate_consts(normed_a = {:?}, normed_b = {:?})\", relation.tag(), a, b);\n \n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n     let is_match = match (a.kind(), b.kind()) {\n         (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n-            bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n+            bug!(\"var types encountered in structurally_relate_consts: {:?} {:?}\", a, b)\n         }\n \n         (ty::ConstKind::Error(_), _) => return Ok(a),"}]}