{"sha": "d162fa26ba014dcb20e41e31e9c7f969301f532c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjJmYTI2YmEwMTRkY2IyMGU0MWUzMWU5YzdmOTY5MzAxZjUzMmM=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2012-07-06T02:12:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-06T02:44:20Z"}, "message": "A new `times` method on numeric types\n\nThis method is intended to elegantly subsume two common iteration functions.\nThe first is `iter::range`, which is used identically to the method introduced\nin this commit, but currently works only on uints. The second is a common case\nof `{int, i8, uint, etc.}::range`, in the case where the inductive variable is\nignored. Compare the usage of the three:\n```\nfor iter::range(100u) {\n    // do whatever\n}\n\nfor int::range(0, 100) |_i| {\n    // do whatever\n}\n\nfor 100.times {\n    // do whatever\n}\n```\nI feel that the latter reads much more nicely than the first two approaches,\nand unlike the first two the new method allows the user to ignore the specific\ntype of the number (ineed, if we're throwing away the inductive variable, who\ncares what type it is?). A minor benefit is that this new method will be\nsomewhat familiar to users of Ruby, from which we borrow the name \"times\".", "tree": {"sha": "970ca68b993a8cdb46e1633920d245dc04ba5c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/970ca68b993a8cdb46e1633920d245dc04ba5c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d162fa26ba014dcb20e41e31e9c7f969301f532c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d162fa26ba014dcb20e41e31e9c7f969301f532c", "html_url": "https://github.com/rust-lang/rust/commit/d162fa26ba014dcb20e41e31e9c7f969301f532c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d162fa26ba014dcb20e41e31e9c7f969301f532c/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8112f3b348645f6f487aaa1ae0918b719045f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8112f3b348645f6f487aaa1ae0918b719045f1b", "html_url": "https://github.com/rust-lang/rust/commit/a8112f3b348645f6f487aaa1ae0918b719045f1b"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "e70a092d876a83f394977a436b8984ec61f6e292", "filename": "src/libcore/core.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=d162fa26ba014dcb20e41e31e9c7f969301f532c", "patch": "@@ -12,24 +12,24 @@ import option_iter::extensions;\n import ptr::extensions;\n import rand::extensions;\n import result::extensions;\n-import int::num;\n-import i8::num;\n-import i16::num;\n-import i32::num;\n-import i64::num;\n-import uint::num;\n-import u8::num;\n-import u16::num;\n-import u32::num;\n-import u64::num;\n+import int::{num, times};\n+import i8::{num, times};\n+import i16::{num, times};\n+import i32::{num, times};\n+import i64::{num, times};\n+import uint::{num, times};\n+import u8::{num, times};\n+import u16::{num, times};\n+import u32::{num, times};\n+import u64::{num, times};\n import float::num;\n import f32::num;\n import f64::num;\n \n export path, option, some, none, unreachable;\n export extensions;\n // The following exports are the extension impls for numeric types\n-export num;\n+export num, times;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is"}, {"sha": "5c5cffb2ac17cc7eb9d67405f19f1b3ee1c0d5f9", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=d162fa26ba014dcb20e41e31e9c7f969301f532c", "patch": "@@ -11,7 +11,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n-export num, ord, eq;\n+export num, ord, eq, times;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -135,6 +135,25 @@ impl num of num::num for T {\n     fn from_int(n: int) -> T   { ret n as T;      }\n }\n \n+impl times of iter::times for T {\n+    #[inline(always)]\n+    #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n+        of any numeric type, the expression `for x.times { /* anything */ }` \\\n+        will execute the given function exactly x times. If we assume that \\\n+        `x` is an int, this is functionally equivalent to \\\n+        `for int::range(0, x) |_i| { /* anything */ }`.\"]\n+    fn times(it: fn() -> bool) {\n+        if self < 0 {\n+            fail #fmt(\"The .times method expects a nonnegative number, \\\n+                       but found %?\", self);\n+        }\n+        let mut i = self;\n+        while i > 0 {\n+            if !it() { break }\n+            i -= 1;\n+        }\n+    }\n+}\n \n // FIXME: Has alignment issues on windows and 32-bit linux (#2609)\n #[test]\n@@ -206,8 +225,22 @@ fn test_ifaces() {\n         assert (ten.mul(two) == ten.from_int(20));\n         assert (ten.div(two) == ten.from_int(5));\n         assert (ten.modulo(two) == ten.from_int(0));\n+        assert (ten.neg() == ten.from_int(-10));\n     }\n \n     test(10 as T);\n }\n \n+#[test]\n+fn test_times() {\n+    let ten = 10 as T;\n+    let mut accum = 0;\n+    for ten.times { accum += 1; }\n+    assert (accum == 10);\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_times_negative() {\n+    for (-10).times { log(error, \"nope!\"); }\n+}"}, {"sha": "55d47cfe75d309b20cdba34f278fa89391a798e8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=d162fa26ba014dcb20e41e31e9c7f969301f532c", "patch": "@@ -3,6 +3,10 @@ iface base_iter<A> {\n     fn size_hint() -> option<uint>;\n }\n \n+iface times {\n+    fn times(it: fn() -> bool);\n+}\n+\n fn eachi<A,IA:base_iter<A>>(self: IA, blk: fn(uint, A) -> bool) {\n     let mut i = 0u;\n     for self.each |a| {"}, {"sha": "0433cd7ce30b294f384d1816144922532650d1e1", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=d162fa26ba014dcb20e41e31e9c7f969301f532c", "patch": "@@ -11,7 +11,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n-export num, ord, eq;\n+export num, ord, eq, times;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -104,6 +104,22 @@ fn parse_buf(buf: ~[u8], radix: uint) -> option<T> {\n     };\n }\n \n+impl times of iter::times for T {\n+    #[inline(always)]\n+    #[doc = \"A convenience form for basic iteration. Given a variable `x` \\\n+        of any numeric type, the expression `for x.times { /* anything */ }` \\\n+        will execute the given function exactly x times. If we assume that \\\n+        `x` is an int, this is functionally equivalent to \\\n+        `for int::range(0, x) |_i| { /* anything */ }`.\"]\n+    fn times(it: fn() -> bool) {\n+        let mut i = self;\n+        while i > 0 {\n+            if !it() { break }\n+            i -= 1;\n+        }\n+    }\n+}\n+\n /// Parse a string to an int\n fn from_str(s: str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n \n@@ -259,3 +275,11 @@ fn to_str_radix1() {\n fn to_str_radix17() {\n     uint::to_str(100u, 17u);\n }\n+\n+#[test]\n+fn test_times() {\n+    let ten = 10 as T;\n+    let mut accum = 0;\n+    for ten.times { accum += 1; }\n+    assert (accum == 10);\n+}"}, {"sha": "70aafa5e8f19618b3ec296d9f804997769f7b403", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=d162fa26ba014dcb20e41e31e9c7f969301f532c", "patch": "@@ -1,24 +1,37 @@\n-\n-\n // This file is intended to test only that methods are automatically\n // reachable for each numeric type, for each exported impl, with no imports\n // necessary. Testing the methods of the impls is done within the source\n // file for each numeric type.\n fn main() {\n+// ints\n     // num\n     assert 15.add(6) == 21;\n     assert 15i8.add(6i8) == 21i8;\n     assert 15i16.add(6i16) == 21i16;\n     assert 15i32.add(6i32) == 21i32;\n     assert 15i64.add(6i64) == 21i64;\n+    // times\n+    let bar = 15.times;\n+    let bar = 15i8.times;\n+    let bar = 15i16.times;\n+    let bar = 15i32.times;\n+    let bar = 15i64.times;\n \n+// uints\n     // num\n     assert 15u.add(6u) == 21u;\n     assert 15u8.add(6u8) == 21u8;\n     assert 15u16.add(6u16) == 21u16;\n     assert 15u32.add(6u32) == 21u32;\n     assert 15u64.add(6u64) == 21u64;\n+    // times\n+    let bar = 15u.times;\n+    let bar = 15u8.times;\n+    let bar = 15u16.times;\n+    let bar = 15u32.times;\n+    let bar = 15u64.times;\n \n+// floats\n     // num\n     assert 10f.to_int() == 10;\n     assert 10f32.to_int() == 10;"}, {"sha": "fe0838727926dc9ec5f6f0d18aca0f933aa87a58", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162fa26ba014dcb20e41e31e9c7f969301f532c/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=d162fa26ba014dcb20e41e31e9c7f969301f532c", "patch": "@@ -11,7 +11,7 @@ mod b {\n \n impl util for uint {\n     fn str() -> str { uint::str(self) }\n-    fn times(f: fn(uint)) {\n+    fn multi(f: fn(uint)) {\n         let mut c = 0u;\n         while c < self { f(c); c += 1u; }\n     }\n@@ -37,6 +37,6 @@ fn main() {\n     assert (~[3, 4]).map_(|a| a + 4 )[0] == 7;\n     assert (~[3, 4]).map_::<uint>(|a| a as uint + 4u )[0] == 7u;\n     let mut x = 0u;\n-    10u.times(|_n| x += 2u );\n+    10u.multi(|_n| x += 2u );\n     assert x == 20u;\n }"}]}