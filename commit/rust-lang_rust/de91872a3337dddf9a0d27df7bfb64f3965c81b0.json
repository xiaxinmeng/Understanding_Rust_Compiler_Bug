{"sha": "de91872a3337dddf9a0d27df7bfb64f3965c81b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOTE4NzJhMzMzN2RkZGY5YTBkMjdkZjdiZmI2NGYzOTY1YzgxYjA=", "commit": {"author": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2016-08-13T18:42:36Z"}, "committer": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2016-08-18T16:16:29Z"}, "message": "Add a FusedIterator trait.\n\nThis trait can be used to avoid the overhead of a fuse wrapper when an iterator\nis already well-behaved.\n\nConforming to: RFC 1581\nCloses: #35602", "tree": {"sha": "5204b54ce4d67aa5eb959f741167db6cba2f2454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5204b54ce4d67aa5eb959f741167db6cba2f2454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de91872a3337dddf9a0d27df7bfb64f3965c81b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de91872a3337dddf9a0d27df7bfb64f3965c81b0", "html_url": "https://github.com/rust-lang/rust/commit/de91872a3337dddf9a0d27df7bfb64f3965c81b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de91872a3337dddf9a0d27df7bfb64f3965c81b0/comments", "author": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c090ed69a624928c03ad61a29a59badf80ff7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c090ed69a624928c03ad61a29a59badf80ff7b", "html_url": "https://github.com/rust-lang/rust/commit/43c090ed69a624928c03ad61a29a59badf80ff7b"}], "stats": {"total": 461, "additions": 437, "deletions": 24}, "files": [{"sha": "dae12f6e8bdf7c48558c22880fc473e35d27be6a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -61,6 +61,7 @@ use core::borrow;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n+use core::iter::FusedIterator;\n use core::marker::{self, Unsize};\n use core::mem;\n use core::ops::{CoerceUnsized, Deref, DerefMut};\n@@ -529,6 +530,9 @@ impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n+\n \n /// `FnBox` is a version of the `FnOnce` intended for use with boxed\n /// closure objects. The idea is that where one would normally store a"}, {"sha": "90037f813cda646895930210de6f2d2b533d89a0", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -91,7 +91,7 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(unsize)]\n \n-#![cfg_attr(not(test), feature(raw, fn_traits, placement_new_protocol))]\n+#![cfg_attr(not(test), feature(fused, raw, fn_traits, placement_new_protocol))]\n #![cfg_attr(test, feature(test, box_heap))]\n \n // Allow testing this library"}, {"sha": "42b29fa6e44ee778aeeff9b4523a17f9bdcddf44", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -152,7 +152,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::ops::{Drop, Deref, DerefMut};\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, FusedIterator};\n use core::mem::swap;\n use core::mem::size_of;\n use core::ptr;\n@@ -981,6 +981,9 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Iter<'a, T> {}\n+\n /// An iterator that moves out of a `BinaryHeap`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -1014,6 +1017,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for IntoIter<T> {}\n+\n /// An iterator that drains a `BinaryHeap`.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n@@ -1046,6 +1052,9 @@ impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n     fn from(vec: Vec<T>) -> BinaryHeap<T> {"}, {"sha": "7b09cd2115d58178f83e26db659060e5ef627d29", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -11,7 +11,7 @@\n use core::cmp::Ordering;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n-use core::iter::{FromIterator, Peekable};\n+use core::iter::{FromIterator, Peekable, FusedIterator};\n use core::marker::PhantomData;\n use core::ops::Index;\n use core::{fmt, intrinsics, mem, ptr};\n@@ -1147,6 +1147,9 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n+\n impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {\n         if self.length == 0 {\n@@ -1216,6 +1219,9 @@ impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n+\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type Item = (K, V);\n     type IntoIter = IntoIter<K, V>;\n@@ -1338,6 +1344,9 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<K, V> FusedIterator for IntoIter<K, V> {}\n+\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n \n@@ -1362,6 +1371,9 @@ impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n+\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n     fn clone(&self) -> Keys<'a, K, V> {\n         Keys { inner: self.inner.clone() }\n@@ -1392,6 +1404,9 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n+\n impl<'a, K, V> Clone for Values<'a, K, V> {\n     fn clone(&self) -> Values<'a, K, V> {\n         Values { inner: self.inner.clone() }\n@@ -1437,6 +1452,10 @@ impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n+\n+\n impl<'a, K, V> Range<'a, K, V> {\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n         let handle = self.front;\n@@ -1511,6 +1530,9 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Range<'a, K, V> {}\n+\n impl<'a, K, V> Clone for Range<'a, K, V> {\n     fn clone(&self) -> Range<'a, K, V> {\n         Range {\n@@ -1574,6 +1596,9 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for RangeMut<'a, K, V> {}\n+\n impl<'a, K, V> RangeMut<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let handle = ptr::read(&self.back);"}, {"sha": "5d7b00f57c83b0b3c3ebb0d9ae2b7d43f4f7992a", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -15,7 +15,7 @@ use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::cmp::{min, max};\n use core::fmt::Debug;\n use core::fmt;\n-use core::iter::{Peekable, FromIterator};\n+use core::iter::{Peekable, FromIterator, FusedIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n \n use borrow::Borrow;\n@@ -805,6 +805,8 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n@@ -828,6 +830,8 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for IntoIter<T> {}\n \n impl<'a, T> Clone for Range<'a, T> {\n     fn clone(&self) -> Range<'a, T> {\n@@ -847,6 +851,9 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Range<'a, T> {}\n+\n /// Compare `x` and `y`, but return `short` if x is None and `long` if y is None\n fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering) -> Ordering {\n     match (x, y) {\n@@ -890,6 +897,9 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T: Ord> FusedIterator for Difference<'a, T> {}\n+\n impl<'a, T> Clone for SymmetricDifference<'a, T> {\n     fn clone(&self) -> SymmetricDifference<'a, T> {\n         SymmetricDifference {\n@@ -920,6 +930,9 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T: Ord> FusedIterator for SymmetricDifference<'a, T> {}\n+\n impl<'a, T> Clone for Intersection<'a, T> {\n     fn clone(&self) -> Intersection<'a, T> {\n         Intersection {\n@@ -960,6 +973,9 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T: Ord> FusedIterator for Intersection<'a, T> {}\n+\n impl<'a, T> Clone for Union<'a, T> {\n     fn clone(&self) -> Union<'a, T> {\n         Union {\n@@ -991,3 +1007,6 @@ impl<'a, T: Ord> Iterator for Union<'a, T> {\n         (max(a_len, b_len), Some(a_len + b_len))\n     }\n }\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T: Ord> FusedIterator for Union<'a, T> {}"}, {"sha": "2456a04e40a3a18e48cde9947f70731ce2e9eae5", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -20,7 +20,7 @@\n \n use core::marker;\n use core::fmt;\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, FusedIterator};\n use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be\n@@ -266,6 +266,9 @@ impl<E: CLike> Iterator for Iter<E> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<E: CLike> FusedIterator for Iter<E> {}\n+\n impl<E: CLike> FromIterator<E> for EnumSet<E> {\n     fn from_iter<I: IntoIterator<Item = E>>(iter: I) -> EnumSet<E> {\n         let mut ret = EnumSet::new();"}, {"sha": "2781059c1d54373ca2c2b8b100f1ec5da13d3959", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -37,6 +37,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_parametricity)]\n #![feature(fmt_internals)]\n+#![feature(fused)]\n #![feature(heap_api)]\n #![feature(inclusive_range)]\n #![feature(lang_items)]"}, {"sha": "1f52af9f913e9a3cc89d1c7d6fce85a6bc4bc9d0", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -19,7 +19,7 @@ use alloc::boxed::{Box, IntermediateBox};\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hasher, Hash};\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, FusedIterator};\n use core::marker::PhantomData;\n use core::mem;\n use core::ops::{BoxPlace, InPlace, Place, Placer};\n@@ -757,6 +757,9 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Iter<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n@@ -801,6 +804,9 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+\n impl<'a, T> IterMut<'a, T> {\n     /// Inserts the given element just after the element most recently returned by `.next()`.\n     /// The inserted element does not appear in the iteration.\n@@ -908,6 +914,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for IntoIter<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for LinkedList<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {"}, {"sha": "999c84ba7053801bef7ade6ba38db4670352b09d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -23,6 +23,7 @@ use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n+use core::iter::FusedIterator;\n use rustc_unicode::str::{UnicodeStr, Utf16Encoder};\n \n use vec_deque::VecDeque;\n@@ -136,6 +137,9 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for EncodeUtf16<'a> {}\n+\n // Return the initial codepoint accumulator for the first byte.\n // The first byte is special, only want bottom 5 bits for width 2, 4 bits\n // for width 3, and 3 bits for width 4"}, {"sha": "d4de726cfafd62ae725f9648155e5b8dbdb86a99", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -57,7 +57,7 @@\n \n use core::fmt;\n use core::hash;\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, FusedIterator};\n use core::mem;\n use core::ops::{self, Add, AddAssign, Index, IndexMut};\n use core::ptr;\n@@ -1995,3 +1995,6 @@ impl<'a> DoubleEndedIterator for Drain<'a> {\n         self.iter.next_back()\n     }\n }\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Drain<'a> {}"}, {"sha": "a866cdeb7ec3e363d06ae3198e113d089921d10a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -68,7 +68,7 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::FromIterator;\n+use core::iter::{FromIterator, FusedIterator};\n use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ops;\n@@ -1845,6 +1845,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for IntoIter<T> {}\n+\n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]\n impl<T: Clone> Clone for IntoIter<T> {\n     fn clone(&self) -> IntoIter<T> {\n@@ -1932,3 +1935,6 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Drain<'a, T> {}"}, {"sha": "57e00576e45f41db8ce72dd0a9152153802cfd09", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -20,7 +20,7 @@\n \n use core::cmp::Ordering;\n use core::fmt;\n-use core::iter::{repeat, FromIterator};\n+use core::iter::{repeat, FromIterator, FusedIterator};\n use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ptr;\n@@ -1894,6 +1894,10 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Iter<'a, T> {}\n+\n+\n /// `VecDeque` mutable iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n@@ -1946,6 +1950,9 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+\n /// A by-value VecDeque iterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1980,6 +1987,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for IntoIter<T> {}\n+\n /// A draining VecDeque iterator\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n@@ -2069,6 +2079,9 @@ impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialEq> PartialEq for VecDeque<A> {\n     fn eq(&self, other: &VecDeque<A>) -> bool {"}, {"sha": "98b7632a220dd1cc014eefabbca332d5cf56f6e2", "filename": "src/libcore/char.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -18,6 +18,7 @@\n use prelude::v1::*;\n \n use char_private::is_printable;\n+use iter::FusedIterator;\n use mem::transmute;\n \n // UTF-8 ranges and tags for encoding characters\n@@ -516,6 +517,9 @@ impl ExactSizeIterator for EscapeUnicode {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for EscapeUnicode {}\n+\n /// An iterator that yields the literal escape code of a `char`.\n ///\n /// This `struct` is created by the [`escape_default()`] method on [`char`]. See\n@@ -616,6 +620,9 @@ impl ExactSizeIterator for EscapeDefault {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for EscapeDefault {}\n+\n /// An iterator that yields the literal escape code of a `char`.\n ///\n /// This `struct` is created by the [`escape_debug()`] method on [`char`]. See its\n@@ -637,6 +644,9 @@ impl Iterator for EscapeDebug {\n #[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n impl ExactSizeIterator for EscapeDebug { }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for EscapeDebug {}\n+\n /// An iterator over `u8` entries represending the UTF-8 encoding of a `char`\n /// value.\n ///\n@@ -675,6 +685,9 @@ impl Iterator for EncodeUtf8 {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for EncodeUtf8 {}\n+\n /// An iterator over `u16` entries represending the UTF-16 encoding of a `char`\n /// value.\n ///\n@@ -714,6 +727,8 @@ impl Iterator for EncodeUtf16 {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for EncodeUtf16 {}\n \n /// An iterator over an iterator of bytes of the characters the bytes represent\n /// as UTF-8\n@@ -760,3 +775,6 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n         })\n     }\n }\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I: FusedIterator<Item = u8>> FusedIterator for DecodeUtf8<I> {}"}, {"sha": "cfe117c0b1d695713c8801cbd1a4f054d9952558", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 124, "deletions": 6, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -330,6 +330,8 @@ pub use self::sources::{Once, once};\n pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{ExactSizeIterator, Sum, Product};\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+pub use self::traits::FusedIterator;\n \n mod iterator;\n mod range;\n@@ -370,6 +372,10 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n impl<I> ExactSizeIterator for Rev<I>\n     where I: ExactSizeIterator + DoubleEndedIterator {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Rev<I>\n+    where I: FusedIterator + DoubleEndedIterator {}\n+\n /// An iterator that clones the elements of an underlying iterator.\n ///\n /// This `struct` is created by the [`cloned()`] method on [`Iterator`]. See its\n@@ -413,6 +419,11 @@ impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n     where I: ExactSizeIterator<Item=&'a T>, T: Clone\n {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, I, T: 'a> FusedIterator for Cloned<I>\n+    where I: FusedIterator<Item=&'a T>, T: Clone\n+{}\n+\n /// An iterator that repeats endlessly.\n ///\n /// This `struct` is created by the [`cycle()`] method on [`Iterator`]. See its\n@@ -451,6 +462,9 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n+\n /// An iterator that strings two iterators together.\n ///\n /// This `struct` is created by the [`chain()`] method on [`Iterator`]. See its\n@@ -613,6 +627,13 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n     }\n }\n \n+// Note: *both* must be fused to handle double-ended iterators.\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A, B> FusedIterator for Chain<A, B>\n+    where A: FusedIterator,\n+          B: FusedIterator<Item=A::Item>,\n+{}\n+\n /// An iterator that iterates two other iterators simultaneously.\n ///\n /// This `struct` is created by the [`zip()`] method on [`Iterator`]. See its\n@@ -823,6 +844,10 @@ unsafe impl<A, B> TrustedRandomAccess for Zip<A, B>\n \n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A, B> FusedIterator for Zip<A, B>\n+    where A: FusedIterator, B: FusedIterator, {}\n+\n /// An iterator that maps the values of `iter` with `f`.\n ///\n /// This `struct` is created by the [`map()`] method on [`Iterator`]. See its\n@@ -919,6 +944,10 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F>\n     where F: FnMut(I::Item) -> B {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<B, I: FusedIterator, F> FusedIterator for Map<I, F>\n+    where F: FnMut(I::Item) -> B {}\n+\n /// An iterator that filters the elements of `iter` with `predicate`.\n ///\n /// This `struct` is created by the [`filter()`] method on [`Iterator`]. See its\n@@ -979,6 +1008,10 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I: FusedIterator, P> FusedIterator for Filter<I, P>\n+    where P: FnMut(&I::Item) -> bool {}\n+\n /// An iterator that uses `f` to both filter and map elements from `iter`.\n ///\n /// This `struct` is created by the [`filter_map()`] method on [`Iterator`]. See its\n@@ -1041,6 +1074,10 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F>\n+    where F: FnMut(I::Item) -> Option<B> {}\n+\n /// An iterator that yields the current count and the element during iteration.\n ///\n /// This `struct` is created by the [`enumerate()`] method on [`Iterator`]. See its\n@@ -1128,6 +1165,9 @@ unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n+\n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n ///\n@@ -1195,6 +1235,9 @@ impl<I: Iterator> Iterator for Peekable<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator> ExactSizeIterator for Peekable<I> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I: FusedIterator> FusedIterator for Peekable<I> {}\n+\n impl<I: Iterator> Peekable<I> {\n     /// Returns a reference to the next() value without advancing the iterator.\n     ///\n@@ -1296,6 +1339,10 @@ impl<I: Iterator, P> Iterator for SkipWhile<I, P>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I, P> FusedIterator for SkipWhile<I, P>\n+    where I: FusedIterator, P: FnMut(&I::Item) -> bool {}\n+\n /// An iterator that only accepts elements while `predicate` is true.\n ///\n /// This `struct` is created by the [`take_while()`] method on [`Iterator`]. See its\n@@ -1351,6 +1398,10 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I, P> FusedIterator for TakeWhile<I, P>\n+    where I: FusedIterator, P: FnMut(&I::Item) -> bool {}\n+\n /// An iterator that skips over `n` elements of `iter`.\n ///\n /// This `struct` is created by the [`skip()`] method on [`Iterator`]. See its\n@@ -1442,6 +1493,9 @@ impl<I> DoubleEndedIterator for Skip<I> where I: DoubleEndedIterator + ExactSize\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n+\n /// An iterator that only iterates over the first `n` iterations of `iter`.\n ///\n /// This `struct` is created by the [`take()`] method on [`Iterator`]. See its\n@@ -1503,6 +1557,8 @@ impl<I> Iterator for Take<I> where I: Iterator{\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n /// An iterator to maintain state while iterating another iterator.\n ///\n@@ -1549,6 +1605,10 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<B, I, St, F> FusedIterator for Scan<I, St, F>\n+    where I: FusedIterator, F: FnMut(&mut St, I::Item) -> Option<B> {}\n+\n /// An iterator that maps each element to an iterator, and yields the elements\n /// of the produced iterators.\n ///\n@@ -1635,6 +1695,10 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> wher\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n+    where I: FusedIterator, U: IntoIterator, F: FnMut(I::Item) -> U {}\n+\n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n ///\n@@ -1651,12 +1715,15 @@ pub struct Fuse<I> {\n     done: bool\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Fuse<I> where I: Iterator {\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+    default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n         if self.done {\n             None\n         } else {\n@@ -1667,7 +1734,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n     }\n \n     #[inline]\n-    fn nth(&mut self, n: usize) -> Option<I::Item> {\n+    default fn nth(&mut self, n: usize) -> Option<I::Item> {\n         if self.done {\n             None\n         } else {\n@@ -1678,7 +1745,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n     }\n \n     #[inline]\n-    fn last(self) -> Option<I::Item> {\n+    default fn last(self) -> Option<I::Item> {\n         if self.done {\n             None\n         } else {\n@@ -1687,7 +1754,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n     }\n \n     #[inline]\n-    fn count(self) -> usize {\n+    default fn count(self) -> usize {\n         if self.done {\n             0\n         } else {\n@@ -1696,7 +1763,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n+    default fn size_hint(&self) -> (usize, Option<usize>) {\n         if self.done {\n             (0, Some(0))\n         } else {\n@@ -1708,7 +1775,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n     #[inline]\n-    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+    default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n         if self.done {\n             None\n         } else {\n@@ -1719,6 +1786,53 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n     }\n }\n \n+unsafe impl<I> TrustedRandomAccess for Fuse<I>\n+    where I: TrustedRandomAccess,\n+{\n+    unsafe fn get_unchecked(&mut self, i: usize) -> I::Item {\n+        self.iter.get_unchecked(i)\n+    }\n+}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> Iterator for Fuse<I> where I: FusedIterator {\n+    #[inline]\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+        self.iter.next()\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<I::Item> {\n+        self.iter.nth(n)\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<I::Item> {\n+        self.iter.last()\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.iter.count()\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"fused\", reason = \"recently added\", issue = \"35602\")]\n+impl<I> DoubleEndedIterator for Fuse<I>\n+    where I: DoubleEndedIterator + FusedIterator\n+{\n+    #[inline]\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+        self.iter.next_back()\n+    }\n+}\n+\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {}\n \n@@ -1788,3 +1902,7 @@ impl<I: DoubleEndedIterator, F> DoubleEndedIterator for Inspect<I, F>\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator, F> ExactSizeIterator for Inspect<I, F>\n     where F: FnMut(&I::Item) {}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I: FusedIterator, F> FusedIterator for Inspect<I, F>\n+    where F: FnMut(&I::Item) {}"}, {"sha": "48816bf66bbb79d8b09fc2263492fd7eab76d73f", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -16,7 +16,7 @@ use option::Option::{self, Some, None};\n use marker::Sized;\n use usize;\n \n-use super::{DoubleEndedIterator, ExactSizeIterator, Iterator};\n+use super::{DoubleEndedIterator, ExactSizeIterator, Iterator, FusedIterator};\n \n /// Objects that can be stepped over in both directions.\n ///\n@@ -364,6 +364,10 @@ impl<A> Iterator for StepBy<A, ops::RangeFrom<A>> where\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A> FusedIterator for StepBy<A, ops::RangeFrom<A>>\n+    where A: Clone, for<'a> &'a A: Add<&'a A, Output = A> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n     type Item = A;\n@@ -401,6 +405,9 @@ impl<A: Step + Clone> Iterator for StepBy<A, ops::Range<A>> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A: Step + Clone> FusedIterator for StepBy<A, ops::Range<A>> {}\n+\n #[unstable(feature = \"inclusive_range\",\n            reason = \"recently added, follows RFC\",\n            issue = \"28237\")]\n@@ -468,6 +475,9 @@ impl<A: Step + Clone> Iterator for StepBy<A, ops::RangeInclusive<A>> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A: Step + Clone> FusedIterator for StepBy<A, ops::RangeInclusive<A>> {}\n+\n macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -526,6 +536,10 @@ impl<A: Step + Clone> DoubleEndedIterator for ops::Range<A> where\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A> FusedIterator for ops::Range<A>\n+    where A: Step, for<'a> &'a A: Add<&'a A, Output = A> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Step> Iterator for ops::RangeFrom<A> where\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -540,6 +554,10 @@ impl<A: Step> Iterator for ops::RangeFrom<A> where\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A> FusedIterator for ops::RangeFrom<A>\n+    where A: Step, for<'a> &'a A: Add<&'a A, Output = A> {}\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n impl<A: Step> Iterator for ops::RangeInclusive<A> where\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -638,3 +656,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> where\n         n\n     }\n }\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A> FusedIterator for ops::RangeInclusive<A>\n+    where A: Step, for<'a> &'a A: Add<&'a A, Output = A> {}"}, {"sha": "a2a019a07dcf1b2b942890f3f86db119db8182de", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -15,7 +15,7 @@ use marker;\n use option::Option::{self, Some, None};\n use usize;\n \n-use super::{DoubleEndedIterator, IntoIterator, Iterator, ExactSizeIterator};\n+use super::{DoubleEndedIterator, IntoIterator, Iterator, ExactSizeIterator, FusedIterator};\n \n /// An iterator that repeats an element endlessly.\n ///\n@@ -44,6 +44,9 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     fn next_back(&mut self) -> Option<A> { Some(self.element.clone()) }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A: Clone> FusedIterator for Repeat<A> {}\n+\n /// Creates a new iterator that endlessly repeats a single element.\n ///\n /// The `repeat()` function repeats a single value over and over and over and\n@@ -138,6 +141,9 @@ impl<T> ExactSizeIterator for Empty<T> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for Empty<T> {}\n+\n // not #[derive] because that adds a Clone bound on T,\n // which isn't necessary.\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n@@ -213,6 +219,9 @@ impl<T> ExactSizeIterator for Once<T> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for Once<T> {}\n+\n /// Creates an iterator that yields an element exactly once.\n ///\n /// This is commonly used to adapt a single value into a [`chain()`] of other"}, {"sha": "0b6ab5a4bbb14bb5ca91101e8d1b4096f3b1e6b7", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -658,3 +658,19 @@ macro_rules! float_sum_product {\n \n integer_sum_product! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n float_sum_product! { f32 f64 }\n+\n+/// An iterator that always continues to yield `None` when exhausted.\n+///\n+/// Calling next on a fused iterator that has returned `None` once is guaranteed\n+/// to return `None` again. This trait is should be implemented by all iterators\n+/// that behave this way because it allows for some significant optimizations.\n+///\n+/// Note: In general, you should not use `FusedIterator` in generic bounds if\n+/// you need a fused iterator. Instead, you should just call `Iterator::fused()`\n+/// on the iterator. If the iterator is already fused, the additional `Fuse`\n+/// wrapper will be a no-op with no performance penalty.\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+pub trait FusedIterator: Iterator {}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}"}, {"sha": "51bbad085fba4fc244f48c4fd3568a016b20af35", "filename": "src/libcore/option.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -144,8 +144,8 @@ use self::Option::*;\n use clone::Clone;\n use convert::From;\n use default::Default;\n-use iter::ExactSizeIterator;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, IntoIterator};\n+use iter::{Iterator, FromIterator, IntoIterator, ExactSizeIterator, DoubleEndedIterator};\n+use iter::FusedIterator;\n use mem;\n use ops::FnOnce;\n use result::Result::{Ok, Err};\n@@ -796,6 +796,7 @@ impl<A> DoubleEndedIterator for Item<A> {\n }\n \n impl<A> ExactSizeIterator for Item<A> {}\n+impl<A> FusedIterator for Item<A> {}\n \n /// An iterator over a reference of the contained item in an Option.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -821,6 +822,9 @@ impl<'a, A> DoubleEndedIterator for Iter<'a, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, A> FusedIterator for Iter<'a, A> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> Clone for Iter<'a, A> {\n     fn clone(&self) -> Iter<'a, A> {\n@@ -852,6 +856,9 @@ impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, A> FusedIterator for IterMut<'a, A> {}\n+\n /// An iterator over the item contained inside an Option.\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -876,6 +883,9 @@ impl<A> DoubleEndedIterator for IntoIter<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> ExactSizeIterator for IntoIter<A> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A> FusedIterator for IntoIter<A> {}\n+\n /////////////////////////////////////////////////////////////////////////////\n // FromIterator\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "718fdf865a9703a4410df95b09b8386da45e377e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -241,6 +241,7 @@ use self::Result::{Ok, Err};\n use clone::Clone;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSizeIterator, IntoIterator};\n+use iter::FusedIterator;\n use ops::FnOnce;\n use option::Option::{self, None, Some};\n \n@@ -869,6 +870,9 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Iter<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n@@ -901,6 +905,9 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+\n /// An iterator over the value in a `Ok` variant of a `Result`.\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -928,6 +935,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<T> FusedIterator for IntoIter<T> {}\n+\n /////////////////////////////////////////////////////////////////////////////\n // FromIterator\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "603f55a6e108e4e09db1c780ae7b805703791f45", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -992,6 +992,9 @@ iterator!{struct Iter -> *const T, &'a T}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Iter<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n@@ -1110,6 +1113,9 @@ iterator!{struct IterMut -> *mut T, &'a mut T}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for IterMut<'a, T> {}\n+\n /// An internal abstraction over the splitting iterators, so that\n /// splitn, splitn_mut etc can be implemented once.\n #[doc(hidden)]\n@@ -1202,6 +1208,9 @@ impl<'a, T, P> SplitIter for Split<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T, P> FusedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {}\n+\n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1292,6 +1301,9 @@ impl<'a, T, P> DoubleEndedIterator for SplitMut<'a, T, P> where\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T, P> FusedIterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n+\n /// An private iterator over subslices separated by elements that\n /// match a predicate function, splitting at most a fixed number of\n /// times.\n@@ -1408,6 +1420,10 @@ macro_rules! forward_iterator {\n                 self.inner.size_hint()\n             }\n         }\n+\n+        #[unstable(feature = \"fused\", issue = \"35602\")]\n+        impl<'a, $elem, P> FusedIterator for $name<'a, $elem, P>\n+            where P: FnMut(&T) -> bool {}\n     }\n }\n \n@@ -1506,6 +1522,9 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Windows<'a, T> {}\n+\n /// An iterator over a slice in (non-overlapping) chunks (`size` elements at a\n /// time).\n ///\n@@ -1609,6 +1628,9 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for Chunks<'a, T> {}\n+\n /// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n@@ -1704,6 +1726,9 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n+\n //\n // Free functions\n //"}, {"sha": "e18aa07b75d8e1de4b87d9cd8a39f536ff908570", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -23,7 +23,7 @@ use convert::AsRef;\n use default::Default;\n use fmt;\n use iter::ExactSizeIterator;\n-use iter::{Map, Cloned, Iterator, DoubleEndedIterator};\n+use iter::{Map, Cloned, Iterator, DoubleEndedIterator, FusedIterator};\n use marker::Sized;\n use mem;\n use ops::{Fn, FnMut, FnOnce};\n@@ -454,6 +454,9 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Chars<'a> {}\n+\n impl<'a> Chars<'a> {\n     /// View the underlying data as a subslice of the original data.\n     ///\n@@ -525,6 +528,9 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for CharIndices<'a> {}\n+\n impl<'a> CharIndices<'a> {\n     /// View the underlying data as a subslice of the original data.\n     ///\n@@ -593,6 +599,9 @@ impl<'a> ExactSizeIterator for Bytes<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Bytes<'a> {}\n+\n /// This macro generates a Clone impl for string pattern API\n /// wrapper types of the form X<'a, P>\n macro_rules! derive_pattern_clone {\n@@ -739,6 +748,13 @@ macro_rules! generate_pattern_iterators {\n             }\n         }\n \n+        #[unstable(feature = \"fused\", issue = \"35602\")]\n+        impl<'a, P: Pattern<'a>> FusedIterator for $forward_iterator<'a, P> {}\n+\n+        #[unstable(feature = \"fused\", issue = \"35602\")]\n+        impl<'a, P: Pattern<'a>> FusedIterator for $reverse_iterator<'a, P>\n+            where P::Searcher: ReverseSearcher<'a> {}\n+\n         generate_pattern_iterators!($($t)* with $(#[$common_stability_attribute])*,\n                                                 $forward_iterator,\n                                                 $reverse_iterator, $iterty);\n@@ -1088,6 +1104,9 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Lines<'a> {}\n+\n /// Created with the method [`lines_any()`].\n ///\n /// [`lines_any()`]: ../../std/primitive.str.html#method.lines_any\n@@ -1151,6 +1170,10 @@ impl<'a> DoubleEndedIterator for LinesAny<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[allow(deprecated)]\n+impl<'a> FusedIterator for LinesAny<'a> {}\n+\n /*\n Section: Comparing strings\n */"}, {"sha": "c2b7d7045ddd8e0b22d9fce9d087445579701916", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -29,6 +29,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::char::CharExt as C;\n+use core::iter::FusedIterator;\n use core::fmt;\n use tables::{conversions, derived_property, general_category, property};\n \n@@ -62,6 +63,9 @@ impl Iterator for ToLowercase {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for ToLowercase {}\n+\n /// Returns an iterator that yields the uppercase equivalent of a `char`.\n ///\n /// This `struct` is created by the [`to_uppercase()`] method on [`char`]. See\n@@ -80,6 +84,8 @@ impl Iterator for ToUppercase {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for ToUppercase {}\n \n enum CaseMappingIter {\n     Three(char, char, char),"}, {"sha": "b812c262ac197f9aa9391e5640e22686fc65ca68", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -35,6 +35,7 @@\n #![feature(char_escape_debug)]\n #![feature(core_char_ext)]\n #![feature(decode_utf8)]\n+#![feature(fused)]\n #![feature(lang_items)]\n #![feature(staged_api)]\n #![feature(unicode)]"}, {"sha": "eb5b6feeb7ec4893e9655ec3095769a005c7c064", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -14,7 +14,7 @@\n //! methods provided by the unicode parts of the CharExt trait.\n \n use core::char;\n-use core::iter::Filter;\n+use core::iter::{Filter, FusedIterator};\n use core::str::Split;\n \n /// An iterator over the non-whitespace substrings of a string,\n@@ -177,6 +177,10 @@ impl<I> Iterator for Utf16Encoder<I>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<I> FusedIterator for Utf16Encoder<I>\n+    where I: FusedIterator<Item = char> {}\n+\n impl<'a> Iterator for SplitWhitespace<'a> {\n     type Item = &'a str;\n \n@@ -189,3 +193,6 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n         self.inner.next_back()\n     }\n }\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for SplitWhitespace<'a> {}"}, {"sha": "070d7ca1eef0fcb02ffd66e40aaef41046950395", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -16,6 +16,7 @@ use prelude::v1::*;\n \n use mem;\n use ops::Range;\n+use iter::FusedIterator;\n \n /// Extension methods for ASCII-subset only operations on string slices.\n ///\n@@ -368,6 +369,9 @@ impl DoubleEndedIterator for EscapeDefault {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ExactSizeIterator for EscapeDefault {}\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl FusedIterator for EscapeDefault {}\n+\n \n static ASCII_LOWERCASE_MAP: [u8; 256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,"}, {"sha": "d844a213ce2514c463bf03eada4b82c0dde6a9de", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -15,7 +15,7 @@ use borrow::Borrow;\n use cmp::max;\n use fmt::{self, Debug};\n use hash::{Hash, Hasher, BuildHasher, SipHasher13};\n-use iter::FromIterator;\n+use iter::{FromIterator, FusedIterator};\n use mem::{self, replace};\n use ops::{Deref, Index};\n use rand::{self, Rng};\n@@ -1484,6 +1484,9 @@ impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n@@ -1495,6 +1498,8 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> Iterator for IntoIter<K, V> {\n@@ -1507,6 +1512,8 @@ impl<K, V> Iterator for IntoIter<K, V> {\n impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n@@ -1519,6 +1526,8 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n@@ -1531,6 +1540,8 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n@@ -1543,6 +1554,8 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n@@ -1555,6 +1568,8 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K, V> FusedIterator for Drain<'a, K, V> {}\n \n impl<'a, K, V> Entry<'a, K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "96efff86abf17b2d3cac0fad53e102f0e112b9b7", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -11,7 +11,7 @@\n use borrow::Borrow;\n use fmt;\n use hash::{Hash, BuildHasher};\n-use iter::{Chain, FromIterator};\n+use iter::{Chain, FromIterator, FusedIterator};\n use ops::{BitOr, BitAnd, BitXor, Sub};\n \n use super::Recover;\n@@ -906,6 +906,8 @@ impl<'a, K> Iterator for Iter<'a, K> {\n impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K> FusedIterator for Iter<'a, K> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K> Iterator for IntoIter<K> {\n@@ -918,6 +920,8 @@ impl<K> Iterator for IntoIter<K> {\n impl<K> ExactSizeIterator for IntoIter<K> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<K> FusedIterator for IntoIter<K> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K> Iterator for Drain<'a, K> {\n@@ -930,6 +934,8 @@ impl<'a, K> Iterator for Drain<'a, K> {\n impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, K> FusedIterator for Drain<'a, K> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Intersection<'a, T, S> {\n@@ -961,6 +967,11 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T, S> FusedIterator for Intersection<'a, T, S>\n+    where T: Eq + Hash, S: BuildHasher\n+{}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Difference<'a, T, S> {\n     fn clone(&self) -> Difference<'a, T, S> {\n@@ -991,6 +1002,11 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T, S> FusedIterator for Difference<'a, T, S>\n+    where T: Eq + Hash, S: BuildHasher\n+{}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for SymmetricDifference<'a, T, S> {\n     fn clone(&self) -> SymmetricDifference<'a, T, S> {\n@@ -1008,11 +1024,21 @@ impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T, S> FusedIterator for SymmetricDifference<'a, T, S>\n+    where T: Eq + Hash, S: BuildHasher\n+{}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Union<'a, T, S> {\n     fn clone(&self) -> Union<'a, T, S> { Union { iter: self.iter.clone() } }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a, T, S> FusedIterator for Union<'a, T, S>\n+    where T: Eq + Hash, S: BuildHasher\n+{}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Iterator for Union<'a, T, S>\n     where T: Eq + Hash, S: BuildHasher"}, {"sha": "9807e383c5ca190a808f7b0909e374a63c1e2b83", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -232,6 +232,7 @@\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n+#![feature(fused)]\n #![feature(hashmap_hasher)]\n #![feature(heap_api)]\n #![feature(inclusive_range)]"}, {"sha": "bc8fd66a438f588adf640bebb61866e2f7e63c5b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de91872a3337dddf9a0d27df7bfb64f3965c81b0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=de91872a3337dddf9a0d27df7bfb64f3965c81b0", "patch": "@@ -107,7 +107,7 @@ use fmt;\n use fs;\n use hash::{Hash, Hasher};\n use io;\n-use iter;\n+use iter::{self, FusedIterator};\n use mem;\n use ops::{self, Deref};\n use string::String;\n@@ -858,6 +858,9 @@ impl<'a> DoubleEndedIterator for Iter<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Iter<'a> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for Components<'a> {\n     type Item = Component<'a>;\n@@ -958,6 +961,9 @@ impl<'a> DoubleEndedIterator for Components<'a> {\n     }\n }\n \n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Components<'a> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> cmp::PartialEq for Components<'a> {\n     fn eq(&self, other: &Components<'a>) -> bool {"}]}