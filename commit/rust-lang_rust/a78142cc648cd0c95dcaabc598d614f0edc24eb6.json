{"sha": "a78142cc648cd0c95dcaabc598d614f0edc24eb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODE0MmNjNjQ4Y2QwYzk1ZGNhYWJjNTk4ZDYxNGYwZWRjMjRlYjY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-11T18:32:18Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-11T18:32:18Z"}, "message": "Merge #791\n\n791: docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6547cd1d0e5b7494ac6b9ec9b446ba0db4c149ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6547cd1d0e5b7494ac6b9ec9b446ba0db4c149ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78142cc648cd0c95dcaabc598d614f0edc24eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78142cc648cd0c95dcaabc598d614f0edc24eb6", "html_url": "https://github.com/rust-lang/rust/commit/a78142cc648cd0c95dcaabc598d614f0edc24eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78142cc648cd0c95dcaabc598d614f0edc24eb6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b356ab46f2b7482bf1ae0c0f6cd5a87ece8742bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b356ab46f2b7482bf1ae0c0f6cd5a87ece8742bf", "html_url": "https://github.com/rust-lang/rust/commit/b356ab46f2b7482bf1ae0c0f6cd5a87ece8742bf"}, {"sha": "ae312680d6d7bb0cc00d2b8d9799249d36e0136e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae312680d6d7bb0cc00d2b8d9799249d36e0136e", "html_url": "https://github.com/rust-lang/rust/commit/ae312680d6d7bb0cc00d2b8d9799249d36e0136e"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "ec2fd1eb5f471c6b8b312e4a9340a47f415b9772", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=a78142cc648cd0c95dcaabc598d614f0edc24eb6", "patch": "@@ -144,8 +144,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-        let invocation_tt = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n         let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n         let expansion = rules.expand(&invocation_tt).unwrap();\n         assert_eq!(\n@@ -160,7 +160,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n         crate::MacroRules::parse(&definition_tt).unwrap()\n     }\n \n@@ -169,7 +169,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let invocation_tt = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+        let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n \n         let expaned = rules.expand(&invocation_tt).unwrap();\n         assert_eq!(expaned.to_string(), expansion);"}, {"sha": "f6177f078194a355f770a08e0c92aa3f2cd6c069", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=a78142cc648cd0c95dcaabc598d614f0edc24eb6", "patch": "@@ -3,6 +3,7 @@\n /// `tt::TokenTree` for the result of the expansion.\n use rustc_hash::FxHashMap;\n use ra_syntax::SmolStr;\n+use tt::TokenId;\n \n use crate::tt_cursor::TtCursor;\n \n@@ -185,7 +186,8 @@ fn expand_tt(\n         }\n         crate::TokenTree::Leaf(leaf) => match leaf {\n             crate::Leaf::Ident(ident) => {\n-                tt::Leaf::from(tt::Ident { text: ident.text.clone() }).into()\n+                tt::Leaf::from(tt::Ident { text: ident.text.clone(), id: TokenId::unspecified() })\n+                    .into()\n             }\n             crate::Leaf::Punct(punct) => tt::Leaf::from(punct.clone()).into(),\n             crate::Leaf::Var(v) => bindings.get(&v.text, nesting)?.clone(),"}, {"sha": "58e2533f18b6e37d9abf2418890a029dafdd5463", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=a78142cc648cd0c95dcaabc598d614f0edc24eb6", "patch": "@@ -41,7 +41,7 @@ fn parse_subtree(tt: &tt::Subtree) -> Option<crate::Subtree> {\n                     }\n                 }\n                 tt::Leaf::Punct(punct) => crate::Leaf::from(*punct).into(),\n-                tt::Leaf::Ident(tt::Ident { text }) => {\n+                tt::Leaf::Ident(tt::Ident { text, id: _ }) => {\n                     crate::Leaf::from(crate::Ident { text: text.clone() }).into()\n                 }\n                 tt::Leaf::Literal(tt::Literal { text }) => {"}, {"sha": "848c785f8e81b866d3bb9deae96ac52e6666488c", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=a78142cc648cd0c95dcaabc598d614f0edc24eb6", "patch": "@@ -1,10 +1,42 @@\n-use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxKind::*};\n+use ra_syntax::{\n+    AstNode, SyntaxNode, TextRange,\n+    ast, SyntaxKind::*, TextUnit\n+};\n \n-pub fn ast_to_token_tree(ast: &ast::TokenTree) -> Option<tt::Subtree> {\n-    convert_tt(ast.syntax())\n+/// Maps `tt::TokenId` to the relative range of the original token.\n+#[derive(Default)]\n+pub struct TokenMap {\n+    /// Maps `tt::TokenId` to the *relative* source range.\n+    toknes: Vec<TextRange>,\n }\n \n-fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n+/// Convert the syntax tree (what user has written) to a `TokenTree` (what macro\n+/// will consume).\n+pub fn ast_to_token_tree(ast: &ast::TokenTree) -> Option<(tt::Subtree, TokenMap)> {\n+    let mut token_map = TokenMap::default();\n+    let node = ast.syntax();\n+    let tt = convert_tt(&mut token_map, node.range().start(), node)?;\n+    Some((tt, token_map))\n+}\n+\n+impl TokenMap {\n+    pub fn relative_range_of(&self, tt: tt::TokenId) -> Option<TextRange> {\n+        let idx = tt.0 as usize;\n+        self.toknes.get(idx).map(|&it| it)\n+    }\n+\n+    fn alloc(&mut self, relative_range: TextRange) -> tt::TokenId {\n+        let id = self.toknes.len();\n+        self.toknes.push(relative_range);\n+        tt::TokenId(id as u32)\n+    }\n+}\n+\n+fn convert_tt(\n+    token_map: &mut TokenMap,\n+    global_offset: TextUnit,\n+    tt: &SyntaxNode,\n+) -> Option<tt::Subtree> {\n     let first_child = tt.first_child()?;\n     let last_child = tt.last_child()?;\n     let delimiter = match (first_child.kind(), last_child.kind()) {\n@@ -34,10 +66,12 @@ fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n             }\n         } else {\n             let child: tt::TokenTree = if child.kind() == TOKEN_TREE {\n-                convert_tt(child)?.into()\n+                convert_tt(token_map, global_offset, child)?.into()\n             } else if child.kind().is_keyword() || child.kind() == IDENT {\n+                let relative_range = child.range() - global_offset;\n+                let id = token_map.alloc(relative_range);\n                 let text = child.leaf_text().unwrap().clone();\n-                tt::Leaf::from(tt::Ident { text }).into()\n+                tt::Leaf::from(tt::Ident { text, id }).into()\n             } else if child.kind().is_literal() {\n                 tt::Leaf::from(tt::Literal { text: child.leaf_text().unwrap().clone() }).into()\n             } else {"}, {"sha": "c1f37b8897cb706358a5070f7b883df59763b24b", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78142cc648cd0c95dcaabc598d614f0edc24eb6/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=a78142cc648cd0c95dcaabc598d614f0edc24eb6", "patch": "@@ -1,4 +1,4 @@\n-/// `tt` crate defines a `TokenTree` datastructure: this is the interface (both\n+/// `tt` crate defines a `TokenTree` data structure: this is the interface (both\n /// input and output) of macros. It closely mirrors `proc_macro` crate's\n /// `TokenTree`.\n \n@@ -18,6 +18,21 @@ use std::fmt;\n \n use smol_str::SmolStr;\n \n+/// Represents identity of the token.\n+///\n+/// For hygiene purposes, we need to track which expanded tokens originated from\n+/// which source tokens. We do it by assigning an distinct identity to each\n+/// source token and making sure that identities are preserved during macro\n+/// expansion.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TokenId(pub u32);\n+\n+impl TokenId {\n+    pub const fn unspecified() -> TokenId {\n+        TokenId(!0)\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub enum TokenTree {\n     Leaf(Leaf),\n@@ -67,6 +82,7 @@ pub enum Spacing {\n #[derive(Debug, Clone)]\n pub struct Ident {\n     pub text: SmolStr,\n+    pub id: TokenId,\n }\n \n impl fmt::Display for TokenTree {"}]}