{"sha": "939c1cb349f81a3ce488f5c17f195a5fcd84691c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWMxY2IzNDlmODFhM2NlNDg4ZjVjMTdmMTk1YTVmY2Q4NDY5MWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-13T18:24:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-13T18:24:08Z"}, "message": "review comments", "tree": {"sha": "02b02c64c9f19753b876925836a2e8f7b39c1054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b02c64c9f19753b876925836a2e8f7b39c1054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939c1cb349f81a3ce488f5c17f195a5fcd84691c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939c1cb349f81a3ce488f5c17f195a5fcd84691c", "html_url": "https://github.com/rust-lang/rust/commit/939c1cb349f81a3ce488f5c17f195a5fcd84691c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939c1cb349f81a3ce488f5c17f195a5fcd84691c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb2511c3c581d811d61e6022f863a5c0e7006ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2511c3c581d811d61e6022f863a5c0e7006ae1", "html_url": "https://github.com/rust-lang/rust/commit/fb2511c3c581d811d61e6022f863a5c0e7006ae1"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "571ee393782f93a83a0065653839988b69ef2475", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=939c1cb349f81a3ce488f5c17f195a5fcd84691c", "patch": "@@ -649,7 +649,9 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn is_const_scope(&self, hir_id: HirId) -> bool {\n+    /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n+    /// Used exclusively for diagnostics, to avoid suggestion function calls.\n+    pub fn is_const_context(&self, hir_id: HirId) -> bool {\n         let parent_id = self.get_parent_item(hir_id);\n         match self.get(parent_id) {\n             Node::Item(&Item {"}, {"sha": "b5d78a80bf67475e6b9160ff837760cd5a9da3b9", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=939c1cb349f81a3ce488f5c17f195a5fcd84691c", "patch": "@@ -153,7 +153,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (ty_msg, suffix) = match &local_visitor.found_ty {\n             Some(ty) if &ty.to_string() != \"_\" &&\n                 name == \"_\" &&\n-                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized.\n+                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized. #63527\n                 (!ty.is_impl_trait() || self.tcx.features().impl_trait_in_bindings) &&\n                 !ty.is_closure() => // The suggestion doesn't make sense for closures.\n             {\n@@ -163,7 +163,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             Some(ty) if &ty.to_string() != \"_\" &&\n                 ty.to_string() != name &&\n-                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized.\n+                // FIXME: Remove this check after `impl_trait_in_bindings` is stabilized. #63527\n                 (!ty.is_impl_trait() || self.tcx.features().impl_trait_in_bindings) &&\n                 !ty.is_closure() => // The suggestion doesn't make sense for closures.\n             {\n@@ -185,12 +185,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     .map(|args| args.tuple_fields()\n                         .map(|arg| arg.to_string())\n                         .collect::<Vec<_>>().join(\", \"))\n-                    .unwrap_or_else(String::new);\n+                    .unwrap_or_default();\n                 // This suggestion is incomplete, as the user will get further type inference\n                 // errors due to the `_` placeholders and the introduction of `Box`, but it does\n                 // nudge them in the right direction.\n                 (msg, format!(\n-                    \"a boxed closure type like `Box<Fn({}) -> {}>`\",\n+                    \"a boxed closure type like `Box<dyn Fn({}) -> {}>`\",\n                     args,\n                     fn_sig.output().skip_binder().to_string(),\n                 ))"}, {"sha": "ed25601208ad1caacf505f29764cf8d84b3396c0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=939c1cb349f81a3ce488f5c17f195a5fcd84691c", "patch": "@@ -549,7 +549,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected_ty: Ty<'tcx>,\n     ) -> bool {\n-        if self.tcx.hir().is_const_scope(expr.hir_id) {\n+        if self.tcx.hir().is_const_context(expr.hir_id) {\n             // Shouldn't suggest `.into()` on `const`s.\n             // FIXME(estebank): modify once we decide to suggest `as` casts\n             return false;"}, {"sha": "8565cbd3708c9647d3ade0322f48adfd76682dfa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=939c1cb349f81a3ce488f5c17f195a5fcd84691c", "patch": "@@ -3990,27 +3990,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n-        if self.tcx.hir().is_const_scope(expr.hir_id) {\n+        if self.tcx.hir().is_const_context(expr.hir_id) {\n             // Do not suggest `Box::new` in const context.\n             return;\n         }\n-        if expected.is_box() && !found.is_box() {\n-            let boxed_found = self.tcx.mk_box(found);\n-            if let (true, Ok(snippet)) = (\n-                self.can_coerce(boxed_found, expected),\n-                self.sess().source_map().span_to_snippet(expr.span),\n-            ) {\n-                err.span_suggestion(\n-                    expr.span,\n-                    \"you can store this in the heap calling `Box::new`\",\n-                    format!(\"Box::new({})\", snippet),\n-                    Applicability::MachineApplicable,\n-                );\n-                err.note(\"for more information about the distinction between the stack and the \\\n-                          heap, read https://doc.rust-lang.org/book/ch15-01-box.html, \\\n-                          https://doc.rust-lang.org/rust-by-example/std/box.html and \\\n-                          https://doc.rust-lang.org/std/boxed/index.html\");\n-            }\n+        if !expected.is_box() || found.is_box() {\n+            return;\n+        }\n+        let boxed_found = self.tcx.mk_box(found);\n+        if let (true, Ok(snippet)) = (\n+            self.can_coerce(boxed_found, expected),\n+            self.sess().source_map().span_to_snippet(expr.span),\n+        ) {\n+            err.span_suggestion(\n+                expr.span,\n+                \"store this in the heap by calling `Box::new`\",\n+                format!(\"Box::new({})\", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+            err.note(\"for more on the distinction between the stack and the \\\n+                        heap, read https://doc.rust-lang.org/book/ch15-01-box.html, \\\n+                        https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n+                        https://doc.rust-lang.org/std/boxed/index.html\");\n         }\n     }\n "}, {"sha": "fb78dedc887ff2df69c0707628b01b1b360ca80f", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=939c1cb349f81a3ce488f5c17f195a5fcd84691c", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for the closure\n   --> $DIR/cannot-infer-closure.rs:3:9\n    |\n LL |     let x = |a: (), b: ()| {\n-   |         - consider giving `x` a boxed closure type like `Box<Fn((), ()) -> std::result::Result<(), _>>`\n+   |         - consider giving `x` a boxed closure type like `Box<dyn Fn((), ()) -> std::result::Result<(), _>>`\n LL |         Err(a)?;\n    |         ^^^^^^^ cannot infer type\n "}, {"sha": "50c106d63a02b54a72053102ce0c7a3a1123ddd0", "filename": "src/test/ui/suggestions/suggest-box.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/939c1cb349f81a3ce488f5c17f195a5fcd84691c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr?ref=939c1cb349f81a3ce488f5c17f195a5fcd84691c", "patch": "@@ -10,8 +10,8 @@ LL | |     };\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<(), ()>>`\n               found type `[closure@$DIR/suggest-box.rs:4:47: 7:6]`\n-   = note: for more information about the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html and https://doc.rust-lang.org/std/boxed/index.html\n-help: you can store this in the heap calling `Box::new`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n    |\n LL |     let _x: Box<dyn Fn() -> Result<(), ()>> = Box::new(|| {\n LL |         Err(())?;"}]}