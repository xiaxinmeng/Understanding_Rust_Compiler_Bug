{"sha": "95badabaaf27688175dcd751137423b71728eff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YmFkYWJhYWYyNzY4ODE3NWRjZDc1MTEzNzQyM2I3MTcyOGVmZjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-13T02:09:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-13T05:30:32Z"}, "message": "std: Re-optimize tls access on local allocation path\n\nI did this once but acciddentally undid it in a later patch.", "tree": {"sha": "610113dc31bee08b11573411ea52f6c269aa29df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610113dc31bee08b11573411ea52f6c269aa29df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95badabaaf27688175dcd751137423b71728eff6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95badabaaf27688175dcd751137423b71728eff6", "html_url": "https://github.com/rust-lang/rust/commit/95badabaaf27688175dcd751137423b71728eff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95badabaaf27688175dcd751137423b71728eff6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59da4e0bc971f3435f6e8b29ed9447a02f21487d", "url": "https://api.github.com/repos/rust-lang/rust/commits/59da4e0bc971f3435f6e8b29ed9447a02f21487d", "html_url": "https://github.com/rust-lang/rust/commit/59da4e0bc971f3435f6e8b29ed9447a02f21487d"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "1faad913b50258b82fc7dd11322178213d9a449d", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=95badabaaf27688175dcd751137423b71728eff6", "patch": "@@ -45,11 +45,7 @@ impl Local for Task {\n     }\n     unsafe fn unsafe_borrow() -> *mut Task { local_ptr::unsafe_borrow() }\n     unsafe fn try_unsafe_borrow() -> Option<*mut Task> {\n-        if Local::exists::<Task>() {\n-            Some(Local::unsafe_borrow())\n-        } else {\n-            None\n-        }\n+        local_ptr::try_unsafe_borrow()\n     }\n }\n "}, {"sha": "8715e768e32767a72e960c7e08826a1cb6256716", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=95badabaaf27688175dcd751137423b71728eff6", "patch": "@@ -13,6 +13,7 @@\n use libc;\n use libc::{c_void, uintptr_t, size_t};\n use ops::Drop;\n+use option::{Some, None};\n use rt::local::Local;\n use rt::task::Task;\n use unstable::raw;\n@@ -84,8 +85,12 @@ impl Drop for LocalHeap {\n \n // A little compatibility function\n pub unsafe fn local_free(ptr: *libc::c_char) {\n-    do Local::borrow::<Task,()> |task| {\n-        task.heap.free(ptr as *libc::c_void);\n+    // XXX: Unsafe borrow for speed. Lame.\n+    match Local::try_unsafe_borrow::<Task>() {\n+        Some(task) => {\n+            (*task).heap.free(ptr as *libc::c_void);\n+        }\n+        None => rtabort!(\"local free outside of task\")\n     }\n }\n "}, {"sha": "2ec43980419c93ee88f1214fefa301bb13158783", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=95badabaaf27688175dcd751137423b71728eff6", "patch": "@@ -97,16 +97,23 @@ pub unsafe fn borrow<T>(f: &fn(&mut T)) {\n /// Because this leaves the value in thread-local storage it is possible\n /// For the Scheduler pointer to be aliased\n pub unsafe fn unsafe_borrow<T>() -> *mut T {\n+    match try_unsafe_borrow() {\n+        Some(p) => p,\n+        None => rtabort!(\"thread-local pointer is null. bogus!\")\n+    }\n+}\n+\n+pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n     let key = tls_key();\n     let mut void_ptr: *mut c_void = tls::get(key);\n     if void_ptr.is_null() {\n-        rtabort!(\"thread-local pointer is null. bogus!\");\n+        return None;\n     }\n     {\n         let ptr: *mut *mut c_void = &mut void_ptr;\n         let ptr: *mut ~T = ptr as *mut ~T;\n         let ptr: *mut T = &mut **ptr;\n-        return ptr;\n+        return Some(ptr);\n     }\n }\n "}, {"sha": "956ffb82902de0addac7b55c8b0a33f9e22b2e7f", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95badabaaf27688175dcd751137423b71728eff6/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=95badabaaf27688175dcd751137423b71728eff6", "patch": "@@ -13,6 +13,7 @@\n use c_str::ToCStr;\n use cast::transmute;\n use libc::{c_char, c_void, size_t, uintptr_t};\n+use option::{Some, None};\n use sys;\n use rt::task::Task;\n use rt::local::Local;\n@@ -35,14 +36,13 @@ pub fn fail_bounds_check(file: *c_char, line: size_t,\n \n #[lang=\"malloc\"]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    let mut alloc = ::ptr::null();\n-    do Local::borrow::<Task,()> |task| {\n-        rtdebug!(\"task pointer: %x, heap pointer: %x\",\n-                 ::borrow::to_uint(task),\n-                 ::borrow::to_uint(&task.heap));\n-        alloc = task.heap.alloc(td as *c_void, size as uint) as *c_char;\n+    // XXX: Unsafe borrow for speed. Lame.\n+    match Local::try_unsafe_borrow::<Task>() {\n+        Some(task) => {\n+            (*task).heap.alloc(td as *c_void, size as uint) as *c_char\n+        }\n+        None => rtabort!(\"local malloc outside of task\")\n     }\n-    return alloc;\n }\n \n // NB: Calls to free CANNOT be allowed to fail, as throwing an exception from"}]}