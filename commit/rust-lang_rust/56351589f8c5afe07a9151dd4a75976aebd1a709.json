{"sha": "56351589f8c5afe07a9151dd4a75976aebd1a709", "node_id": "C_kwDOAAsO6NoAKDU2MzUxNTg5ZjhjNWFmZTA3YTkxNTFkZDRhNzU5NzZhZWJkMWE3MDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T14:05:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T14:05:52Z"}, "message": "Auto merge of #99263 - compiler-errors:issue-99261, r=jyn514\n\nFix ICE in `named_arguments_used_positionally` lint\n\nFixes #99261\nFixes #99289\nFixes #99284\nFixes #99273\nFixes #99297\nFixes #99271\n\nThis match pattern:\n\n```\n FormatSpec { width: Count::CountIsName(s, _), .. }\n| FormatSpec { precision: Count::CountIsName(s, _), .. }\n```\n\ndoes not account for when both `width` and `precision` are both `Count::CountIsName`, so split the check for these two fields into two separate `if let`.\n\nAlso, remove any future potential for ICEs by removing the index operator altogether.\n\n---\n\nIt is still suspicious that this indexing was broken and caused the ICE, as opposed to just causing a spurious lint message.\n\ncc `@PrestonFrom,` who may be familiar with this code because of implementing the lint this touches, perhaps you'd like to look into why named arguments in `FormatSpec.precision` seem to have indices that don't correspond to a span in `Context.arg_spans`?\n\nEdit: Opened #99265 to track a (related?) incorrect argument indexing issue.", "tree": {"sha": "f808a337116ebb9aa8f47464ea3bf77cad7dd3e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f808a337116ebb9aa8f47464ea3bf77cad7dd3e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56351589f8c5afe07a9151dd4a75976aebd1a709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56351589f8c5afe07a9151dd4a75976aebd1a709", "html_url": "https://github.com/rust-lang/rust/commit/56351589f8c5afe07a9151dd4a75976aebd1a709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56351589f8c5afe07a9151dd4a75976aebd1a709/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d695a497bbf4b20d2580b75075faa80230d41667", "url": "https://api.github.com/repos/rust-lang/rust/commits/d695a497bbf4b20d2580b75075faa80230d41667", "html_url": "https://github.com/rust-lang/rust/commit/d695a497bbf4b20d2580b75075faa80230d41667"}, {"sha": "2902b92769a29d24f9107d2e322ed9c92990da98", "url": "https://api.github.com/repos/rust-lang/rust/commits/2902b92769a29d24f9107d2e322ed9c92990da98", "html_url": "https://github.com/rust-lang/rust/commit/2902b92769a29d24f9107d2e322ed9c92990da98"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "3b7e2102ffa9b6b47ace8dd62cc5ba0e890642aa", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56351589f8c5afe07a9151dd4a75976aebd1a709/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56351589f8c5afe07a9151dd4a75976aebd1a709/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=56351589f8c5afe07a9151dd4a75976aebd1a709", "patch": "@@ -16,7 +16,7 @@ use smallvec::SmallVec;\n \n use rustc_lint_defs::builtin::NAMED_ARGUMENTS_USED_POSITIONALLY;\n use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics, LintId};\n-use rustc_parse_format::{Count, FormatSpec};\n+use rustc_parse_format::Count;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n \n@@ -985,20 +985,19 @@ fn lint_named_arguments_used_positionally(\n                 }\n                 _ => {}\n             };\n-            match a.format {\n-                FormatSpec { width: Count::CountIsName(s, _), .. }\n-                | FormatSpec { precision: Count::CountIsName(s, _), .. } => {\n-                    used_argument_names.insert(s);\n-                }\n-                _ => {}\n-            };\n+            if let Count::CountIsName(s, _) = a.format.width {\n+                used_argument_names.insert(s);\n+            }\n+            if let Count::CountIsName(s, _) = a.format.precision {\n+                used_argument_names.insert(s);\n+            }\n         }\n     }\n \n     for (symbol, (index, span)) in names {\n         if !used_argument_names.contains(symbol.as_str()) {\n             let msg = format!(\"named argument `{}` is not used by name\", symbol.as_str());\n-            let arg_span = cx.arg_spans[index];\n+            let arg_span = cx.arg_spans.get(index).copied();\n             cx.ecx.buffered_early_lint.push(BufferedEarlyLint {\n                 span: MultiSpan::from_span(span),\n                 msg: msg.clone(),"}, {"sha": "b4b472fe2df78d9bfe12297f0df3939711bb664c", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56351589f8c5afe07a9151dd4a75976aebd1a709/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56351589f8c5afe07a9151dd4a75976aebd1a709/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=56351589f8c5afe07a9151dd4a75976aebd1a709", "patch": "@@ -858,15 +858,16 @@ pub trait LintContext: Sized {\n                 },\n                 BuiltinLintDiagnostics::NamedArgumentUsedPositionally(positional_arg, named_arg, name) => {\n                     db.span_label(named_arg, \"this named argument is only referred to by position in formatting string\");\n-                    let msg = format!(\"this formatting argument uses named argument `{}` by position\", name);\n-                    db.span_label(positional_arg, msg);\n-                    db.span_suggestion_verbose(\n-                        positional_arg,\n-                        \"use the named argument by name to avoid ambiguity\",\n-                        format!(\"{{{}}}\", name),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-\n+                    if let Some(positional_arg) = positional_arg {\n+                        let msg = format!(\"this formatting argument uses named argument `{}` by position\", name);\n+                        db.span_label(positional_arg, msg);\n+                            db.span_suggestion_verbose(\n+                            positional_arg,\n+                            \"use the named argument by name to avoid ambiguity\",\n+                            format!(\"{{{}}}\", name),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n             }\n             // Rewrap `db`, and pass control to the user."}, {"sha": "4fd57ed8533795502ec2a652822b6d0939a92a14", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56351589f8c5afe07a9151dd4a75976aebd1a709/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56351589f8c5afe07a9151dd4a75976aebd1a709/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=56351589f8c5afe07a9151dd4a75976aebd1a709", "patch": "@@ -467,7 +467,7 @@ pub enum BuiltinLintDiagnostics {\n         /// If true, the lifetime will be fully elided.\n         use_span: Option<(Span, bool)>,\n     },\n-    NamedArgumentUsedPositionally(Span, Span, String),\n+    NamedArgumentUsedPositionally(Option<Span>, Span, String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "40d26d08cba116db64c5f7557fcea6a319e66209", "filename": "src/test/ui/macros/issue-99261.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56351589f8c5afe07a9151dd4a75976aebd1a709/src%2Ftest%2Fui%2Fmacros%2Fissue-99261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56351589f8c5afe07a9151dd4a75976aebd1a709/src%2Ftest%2Fui%2Fmacros%2Fissue-99261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-99261.rs?ref=56351589f8c5afe07a9151dd4a75976aebd1a709", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![deny(named_arguments_used_positionally)]\n+\n+fn main() {\n+    let value: f64 = 314.15926;\n+    let digits_before_decimal = 1;\n+    let digits_after_decimal = 2;\n+    let width = digits_before_decimal + 1 + digits_after_decimal;\n+\n+    println!(\n+        \"{value:0>width$.digits_after_decimal$}\",\n+        value = value,\n+        width = width,\n+        digits_after_decimal = digits_after_decimal,\n+    );\n+}"}]}