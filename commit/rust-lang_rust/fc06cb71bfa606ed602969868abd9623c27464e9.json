{"sha": "fc06cb71bfa606ed602969868abd9623c27464e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDZjYjcxYmZhNjA2ZWQ2MDI5Njk4NjhhYmQ5NjIzYzI3NDY0ZTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-09T08:26:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-09T09:01:42Z"}, "message": "simplify async-fn tests", "tree": {"sha": "f7eebfeac4fe625d606abdba1162ed1f1a7159bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7eebfeac4fe625d606abdba1162ed1f1a7159bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc06cb71bfa606ed602969868abd9623c27464e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc06cb71bfa606ed602969868abd9623c27464e9", "html_url": "https://github.com/rust-lang/rust/commit/fc06cb71bfa606ed602969868abd9623c27464e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc06cb71bfa606ed602969868abd9623c27464e9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5294a5bf3457c7565f1fce4ce804682a2f8fa10", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5294a5bf3457c7565f1fce4ce804682a2f8fa10", "html_url": "https://github.com/rust-lang/rust/commit/d5294a5bf3457c7565f1fce4ce804682a2f8fa10"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "3f3729d708346f6254d229067f3ec156a8d56a39", "filename": "tests/run-pass/async-fn.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fc06cb71bfa606ed602969868abd9623c27464e9/tests%2Frun-pass%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc06cb71bfa606ed602969868abd9623c27464e9/tests%2Frun-pass%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fasync-fn.rs?ref=fc06cb71bfa606ed602969868abd9623c27464e9", "patch": "@@ -40,38 +40,35 @@ async fn includes_never(crash: bool, x: u32) -> u32 {\n     result\n }\n \n-fn raw_waker_clone(_this: *const ()) -> RawWaker {\n-    panic!(\"unimplemented\");\n-}\n-fn raw_waker_wake(_this: *const ()) {\n-    panic!(\"unimplemented\");\n-}\n-fn raw_waker_wake_by_ref(_this: *const ()) {\n-    panic!(\"unimplemented\");\n-}\n-fn raw_waker_drop(_this: *const ()) {}\n+fn run_fut(mut fut: impl Future<Output=u32>, output: u32) {\n+    fn raw_waker_clone(_this: *const ()) -> RawWaker {\n+        panic!(\"unimplemented\");\n+    }\n+    fn raw_waker_wake(_this: *const ()) {\n+        panic!(\"unimplemented\");\n+    }\n+    fn raw_waker_wake_by_ref(_this: *const ()) {\n+        panic!(\"unimplemented\");\n+    }\n+    fn raw_waker_drop(_this: *const ()) {}\n \n-static RAW_WAKER: RawWakerVTable = RawWakerVTable::new(\n-    raw_waker_clone,\n-    raw_waker_wake,\n-    raw_waker_wake_by_ref,\n-    raw_waker_drop,\n-);\n+    static RAW_WAKER: RawWakerVTable = RawWakerVTable::new(\n+        raw_waker_clone,\n+        raw_waker_wake,\n+        raw_waker_wake_by_ref,\n+        raw_waker_drop,\n+    );\n \n-fn main() {\n-    let x = 5;\n-    let mut fut = foo(&x, 7);\n     let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n     let mut context = Context::from_waker(&waker);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(31));\n+    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(output));\n+}\n \n-    let mut fut = build_aggregate(1, 2, 3, 4);\n-    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n-    let mut context = Context::from_waker(&waker);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(10));\n+fn main() {\n+    let x = 5;\n+    run_fut(foo(&x, 7), 31);\n \n-    let mut fut = includes_never(false, 4);\n-    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n-    let mut context = Context::from_waker(&waker);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(16));\n+    run_fut(build_aggregate(1, 2, 3, 4), 10);\n+\n+    run_fut(includes_never(false, 4), 16);\n }"}]}