{"sha": "fe18fe0f884ab4edb2b0a986b68572b361285599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMThmZTBmODg0YWI0ZWRiMmIwYTk4NmI2ODU3MmIzNjEyODU1OTk=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-06T00:55:31Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-08T05:19:25Z"}, "message": "extra::time: Fix test on Windows\n\nCloses #10307", "tree": {"sha": "1b77570796e3b59bc4a7c26602302870b6ba8ffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b77570796e3b59bc4a7c26602302870b6ba8ffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe18fe0f884ab4edb2b0a986b68572b361285599", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe18fe0f884ab4edb2b0a986b68572b361285599", "html_url": "https://github.com/rust-lang/rust/commit/fe18fe0f884ab4edb2b0a986b68572b361285599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe18fe0f884ab4edb2b0a986b68572b361285599/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63ffc1d1677e31c8978d13a87811c9ee19e5927", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63ffc1d1677e31c8978d13a87811c9ee19e5927", "html_url": "https://github.com/rust-lang/rust/commit/e63ffc1d1677e31c8978d13a87811c9ee19e5927"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "eff0da96bffbae654c6d630234bca527f03aa45d", "filename": "src/libextra/time.rs", "status": "modified", "additions": 59, "deletions": 40, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/fe18fe0f884ab4edb2b0a986b68572b361285599/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe18fe0f884ab4edb2b0a986b68572b361285599/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=fe18fe0f884ab4edb2b0a986b68572b361285599", "patch": "@@ -965,8 +965,35 @@ mod tests {\n     use super::*;\n \n     use std::f64;\n-    use std::os;\n     use std::result::{Err, Ok};\n+    use std::libc;\n+\n+    #[cfg(windows)]\n+    #[fixed_stack_segment]\n+    fn set_time_zone() {\n+        // Windows crt doesn't see any environment variable set by\n+        // `SetEnvironmentVariable`, which `os::setenv` internally uses.\n+        // It is why we use `putenv` here.\n+        extern {\n+            fn _putenv(envstring: *libc::c_char) -> libc::c_int;\n+        }\n+\n+        unsafe {\n+            // Windows does not understand \"America/Los_Angeles\".\n+            // PST+08 may look wrong, but not! \"PST\" indicates\n+            // the name of timezone. \"+08\" means UTC = local + 08.\n+            do \"TZ=PST+08\".with_c_str |env| {\n+                _putenv(env);\n+            }\n+        }\n+        tzset();\n+    }\n+    #[cfg(not(windows))]\n+    fn set_time_zone() {\n+        use std::os;\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+        tzset();\n+    }\n \n     fn test_get_time() {\n         static SOME_RECENT_DATE: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n@@ -1007,57 +1034,54 @@ mod tests {\n     }\n \n     fn test_at_utc() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         let time = Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n \n-        assert!(utc.tm_sec == 30_i32);\n-        assert!(utc.tm_min == 31_i32);\n-        assert!(utc.tm_hour == 23_i32);\n-        assert!(utc.tm_mday == 13_i32);\n-        assert!(utc.tm_mon == 1_i32);\n-        assert!(utc.tm_year == 109_i32);\n-        assert!(utc.tm_wday == 5_i32);\n-        assert!(utc.tm_yday == 43_i32);\n-        assert!(utc.tm_isdst == 0_i32);\n-        assert!(utc.tm_gmtoff == 0_i32);\n-        assert!(utc.tm_zone == ~\"UTC\");\n-        assert!(utc.tm_nsec == 54321_i32);\n+        assert_eq!(utc.tm_sec, 30_i32);\n+        assert_eq!(utc.tm_min, 31_i32);\n+        assert_eq!(utc.tm_hour, 23_i32);\n+        assert_eq!(utc.tm_mday, 13_i32);\n+        assert_eq!(utc.tm_mon, 1_i32);\n+        assert_eq!(utc.tm_year, 109_i32);\n+        assert_eq!(utc.tm_wday, 5_i32);\n+        assert_eq!(utc.tm_yday, 43_i32);\n+        assert_eq!(utc.tm_isdst, 0_i32);\n+        assert_eq!(utc.tm_gmtoff, 0_i32);\n+        assert_eq!(utc.tm_zone, ~\"UTC\");\n+        assert_eq!(utc.tm_nsec, 54321_i32);\n     }\n \n     fn test_at() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         let time = Timespec::new(1234567890, 54321);\n         let local = at(time);\n \n         error!(\"time_at: {:?}\", local);\n \n-        assert!(local.tm_sec == 30_i32);\n-        assert!(local.tm_min == 31_i32);\n-        assert!(local.tm_hour == 15_i32);\n-        assert!(local.tm_mday == 13_i32);\n-        assert!(local.tm_mon == 1_i32);\n-        assert!(local.tm_year == 109_i32);\n-        assert!(local.tm_wday == 5_i32);\n-        assert!(local.tm_yday == 43_i32);\n-        assert!(local.tm_isdst == 0_i32);\n-        assert!(local.tm_gmtoff == -28800_i32);\n+        assert_eq!(local.tm_sec, 30_i32);\n+        assert_eq!(local.tm_min, 31_i32);\n+        assert_eq!(local.tm_hour, 15_i32);\n+        assert_eq!(local.tm_mday, 13_i32);\n+        assert_eq!(local.tm_mon, 1_i32);\n+        assert_eq!(local.tm_year, 109_i32);\n+        assert_eq!(local.tm_wday, 5_i32);\n+        assert_eq!(local.tm_yday, 43_i32);\n+        assert_eq!(local.tm_isdst, 0_i32);\n+        assert_eq!(local.tm_gmtoff, -28800_i32);\n \n         // FIXME (#2350): We should probably standardize on the timezone\n         // abbreviation.\n         let zone = &local.tm_zone;\n         assert!(*zone == ~\"PST\" || *zone == ~\"Pacific Standard Time\");\n \n-        assert!(local.tm_nsec == 54321_i32);\n+        assert_eq!(local.tm_nsec, 54321_i32);\n     }\n \n     fn test_to_timespec() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         let time = Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n@@ -1067,8 +1091,7 @@ mod tests {\n     }\n \n     fn test_conversions() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         let time = Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n@@ -1083,8 +1106,7 @@ mod tests {\n     }\n \n     fn test_strptime() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         match strptime(\"\", \"\") {\n           Ok(ref tm) => {\n@@ -1248,8 +1270,7 @@ mod tests {\n     }\n \n     fn test_ctime() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         let time = Timespec::new(1234567890, 54321);\n         let utc   = at_utc(time);\n@@ -1262,8 +1283,7 @@ mod tests {\n     }\n \n     fn test_strftime() {\n-        os::setenv(\"TZ\", \"America/Los_Angeles\");\n-        tzset();\n+        set_time_zone();\n \n         let time = Timespec::new(1234567890, 54321);\n         let utc = at_utc(time);\n@@ -1323,8 +1343,7 @@ mod tests {\n         // abbreviation.\n         let rfc822 = local.rfc822();\n         let prefix = ~\"Fri, 13 Feb 2009 15:31:30 \";\n-        assert!(rfc822 == prefix + \"PST\" ||\n-                     rfc822 == prefix + \"Pacific Standard Time\");\n+        assert!(rfc822 == prefix + \"PST\" || rfc822 == prefix + \"Pacific Standard Time\");\n \n         assert_eq!(local.ctime(), ~\"Fri Feb 13 15:31:30 2009\");\n         assert_eq!(local.rfc822z(), ~\"Fri, 13 Feb 2009 15:31:30 -0800\");"}]}