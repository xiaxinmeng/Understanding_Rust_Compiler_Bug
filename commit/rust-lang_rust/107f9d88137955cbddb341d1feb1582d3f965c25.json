{"sha": "107f9d88137955cbddb341d1feb1582d3f965c25", "node_id": "C_kwDOAAsO6NoAKDEwN2Y5ZDg4MTM3OTU1Y2JkZGIzNDFkMWZlYjE1ODJkM2Y5NjVjMjU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T11:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T11:12:59Z"}, "message": "Merge pull request #1279 from bjorn3/build_system_rework\n\nSome refactorings for the build system", "tree": {"sha": "f086e9265534476cb42e29b7c2fc26063c2fdd24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f086e9265534476cb42e29b7c2fc26063c2fdd24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107f9d88137955cbddb341d1feb1582d3f965c25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHxQ7CRBK7hj4Ov3rIwAAVv4IAGneiQoNtBOBHj+NG1GJKpqn\nJndOuO+Pz/4sDX8kVersWCxzCQUiMe+r7l6KKDXH2UFaHmVcuJmeJ4A1UwTCPNzM\nO9WHrXKogtZViPXaCZtYh+2+UBdXa8k1nEf8TyQkawJviHovT+anTB0iCnTcVDY/\nDLtJin7eaC9IFhqSeSgR8Gow8flwDPKJOcR9RYPMqgTgn7h/krkvkawqqO2mXc/i\nEkXc+lQqR9yBCxQRSYk4MBJXEyejmSXPIW9rpG5mJbNbHK9iwij+IXDPTktIe9TT\n/9iAEmDOgq9TG1ql1SGTXyuDtJZJDhUtlS91BaLEs9OupcpLGqCQrI7j+XLXNww=\n=u3eu\n-----END PGP SIGNATURE-----\n", "payload": "tree f086e9265534476cb42e29b7c2fc26063c2fdd24\nparent 87bbc2d4135b0ee8c5fd5f33db7411029b5484e5\nparent a65c881aa3c3c065277375c592bea539ebaa3d4d\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1662981179 +0200\ncommitter GitHub <noreply@github.com> 1662981179 +0200\n\nMerge pull request #1279 from bjorn3/build_system_rework\n\nSome refactorings for the build system"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107f9d88137955cbddb341d1feb1582d3f965c25", "html_url": "https://github.com/rust-lang/rust/commit/107f9d88137955cbddb341d1feb1582d3f965c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107f9d88137955cbddb341d1feb1582d3f965c25/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87bbc2d4135b0ee8c5fd5f33db7411029b5484e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bbc2d4135b0ee8c5fd5f33db7411029b5484e5", "html_url": "https://github.com/rust-lang/rust/commit/87bbc2d4135b0ee8c5fd5f33db7411029b5484e5"}, {"sha": "a65c881aa3c3c065277375c592bea539ebaa3d4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65c881aa3c3c065277375c592bea539ebaa3d4d", "html_url": "https://github.com/rust-lang/rust/commit/a65c881aa3c3c065277375c592bea539ebaa3d4d"}], "stats": {"total": 283, "additions": 160, "deletions": 123}, "files": [{"sha": "177b44d3141f190ebc621bc0a3ff491245fe71b5", "filename": "build_system/abi_checker.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fabi_checker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fabi_checker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_checker.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -1,16 +1,16 @@\n-use super::build_sysroot;\n-use super::config;\n-use super::utils::spawn_and_wait;\n-use build_system::SysrootKind;\n use std::env;\n use std::path::Path;\n-use std::process::Command;\n+\n+use super::build_sysroot;\n+use super::config;\n+use super::utils::{cargo_command, spawn_and_wait};\n+use super::SysrootKind;\n \n pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     target_dir: &Path,\n-    cg_clif_build_dir: &Path,\n+    cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n@@ -29,32 +29,24 @@ pub(crate) fn run(\n         channel,\n         sysroot_kind,\n         target_dir,\n-        cg_clif_build_dir,\n+        cg_clif_dylib,\n         host_triple,\n         target_triple,\n     );\n \n     eprintln!(\"Running abi-checker\");\n     let mut abi_checker_path = env::current_dir().unwrap();\n     abi_checker_path.push(\"abi-checker\");\n-    env::set_current_dir(abi_checker_path.clone()).unwrap();\n-\n-    let build_dir = abi_checker_path.parent().unwrap().join(\"build\");\n-    let cg_clif_dylib_path = build_dir.join(if cfg!(windows) { \"bin\" } else { \"lib\" }).join(\n-        env::consts::DLL_PREFIX.to_string() + \"rustc_codegen_cranelift\" + env::consts::DLL_SUFFIX,\n-    );\n+    env::set_current_dir(&abi_checker_path.clone()).unwrap();\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = Command::new(\"cargo\");\n-    cmd.arg(\"run\");\n-    cmd.arg(\"--target\");\n-    cmd.arg(target_triple);\n+    let mut cmd = cargo_command(\"cargo\", \"run\", Some(target_triple), &abi_checker_path);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);\n     cmd.arg(\"--add-rustc-codegen-backend\");\n-    cmd.arg(format!(\"cgclif:{}\", cg_clif_dylib_path.display()));\n+    cmd.arg(format!(\"cgclif:{}\", cg_clif_dylib.display()));\n \n     spawn_and_wait(cmd);\n }"}, {"sha": "cda468bcfa2dfc2e0bfe494bd5a1a9414a97eed6", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -1,16 +1,16 @@\n use std::env;\n-use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::path::PathBuf;\n \n-use super::utils::is_ci;\n+use super::rustc_info::get_file_name;\n+use super::utils::{cargo_command, is_ci};\n \n pub(crate) fn build_backend(\n     channel: &str,\n     host_triple: &str,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = Command::new(\"cargo\");\n-    cmd.arg(\"build\").arg(\"--target\").arg(host_triple);\n+    let source_dir = std::env::current_dir().unwrap();\n+    let mut cmd = cargo_command(\"cargo\", \"build\", Some(host_triple), &source_dir);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -41,5 +41,9 @@ pub(crate) fn build_backend(\n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n     super::utils::spawn_and_wait(cmd);\n \n-    Path::new(\"target\").join(host_triple).join(channel)\n+    source_dir\n+        .join(\"target\")\n+        .join(host_triple)\n+        .join(channel)\n+        .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "c2c81feb25a6b64c5b27ae942fc2ef00c57738b0", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -3,14 +3,14 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n-use super::utils::{spawn_and_wait, try_hard_link};\n+use super::utils::{cargo_command, spawn_and_wait, try_hard_link};\n use super::SysrootKind;\n \n pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     target_dir: &Path,\n-    cg_clif_build_dir: &Path,\n+    cg_clif_dylib_src: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n@@ -23,7 +23,6 @@ pub(crate) fn build_sysroot(\n     fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n \n     // Copy the backend\n-    let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\");\n     let cg_clif_dylib_path = target_dir\n         .join(if cfg!(windows) {\n             // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n@@ -32,8 +31,8 @@ pub(crate) fn build_sysroot(\n         } else {\n             \"lib\"\n         })\n-        .join(&cg_clif_dylib);\n-    try_hard_link(cg_clif_build_dir.join(cg_clif_dylib), &cg_clif_dylib_path);\n+        .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"));\n+    try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n \n     // Build and copy rustc and cargo wrappers\n     for wrapper in [\"rustc-clif\", \"cargo-clif\"] {\n@@ -186,8 +185,7 @@ fn build_clif_sysroot_for_triple(\n     }\n \n     // Build sysroot\n-    let mut build_cmd = Command::new(\"cargo\");\n-    build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n+    let mut build_cmd = cargo_command(\"cargo\", \"build\", Some(triple), Path::new(\"build_sysroot\"));\n     let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     if channel == \"release\" {"}, {"sha": "c31784e1097dc25f1b43a8a4dc1f59a4666c192f", "filename": "build_system/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fconfig.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -1,4 +1,5 @@\n-use std::{fs, process};\n+use std::fs;\n+use std::process;\n \n fn load_config_file() -> Vec<(String, Option<String>)> {\n     fs::read_to_string(\"config.txt\")"}, {"sha": "c665d1ef71c272d42ac55fd858925b735beca1a8", "filename": "build_system/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -130,15 +130,15 @@ pub fn main() {\n         process::exit(1);\n     }\n \n-    let cg_clif_build_dir =\n+    let cg_clif_dylib =\n         build_backend::build_backend(channel, &host_triple, use_unstable_features);\n     match command {\n         Command::Test => {\n             tests::run_tests(\n                 channel,\n                 sysroot_kind,\n                 &target_dir,\n-                &cg_clif_build_dir,\n+                &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,\n             );\n@@ -147,7 +147,7 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &target_dir,\n-                &cg_clif_build_dir,\n+                &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,\n             );\n@@ -157,7 +157,7 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &target_dir,\n-                &cg_clif_build_dir,\n+                &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,\n             );"}, {"sha": "83a76d3591d6803bc26ccbefdb27e6abd0f8dc9f", "filename": "build_system/prepare.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -1,12 +1,11 @@\n use std::env;\n use std::ffi::OsStr;\n-use std::ffi::OsString;\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n-use super::utils::{copy_dir_recursively, spawn_and_wait};\n+use super::utils::{cargo_command, copy_dir_recursively, spawn_and_wait};\n \n pub(crate) fn prepare() {\n     prepare_sysroot();\n@@ -53,8 +52,7 @@ pub(crate) fn prepare() {\n     );\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let mut build_cmd = Command::new(\"cargo\");\n-    build_cmd.arg(\"build\").env_remove(\"CARGO_TARGET_DIR\").current_dir(\"simple-raytracer\");\n+    let build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\"simple-raytracer\"));\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n@@ -156,26 +154,35 @@ fn init_git_repo(repo_dir: &Path) {\n     spawn_and_wait(git_commit_cmd);\n }\n \n-fn get_patches(crate_name: &str) -> Vec<OsString> {\n-    let mut patches: Vec<_> = fs::read_dir(\"patches\")\n+fn get_patches(source_dir: &Path, crate_name: &str) -> Vec<PathBuf> {\n+    let mut patches: Vec<_> = fs::read_dir(source_dir.join(\"patches\"))\n         .unwrap()\n         .map(|entry| entry.unwrap().path())\n         .filter(|path| path.extension() == Some(OsStr::new(\"patch\")))\n-        .map(|path| path.file_name().unwrap().to_owned())\n-        .filter(|file_name| {\n-            file_name.to_str().unwrap().split_once(\"-\").unwrap().1.starts_with(crate_name)\n+        .filter(|path| {\n+            path.file_name()\n+                .unwrap()\n+                .to_str()\n+                .unwrap()\n+                .split_once(\"-\")\n+                .unwrap()\n+                .1\n+                .starts_with(crate_name)\n         })\n         .collect();\n     patches.sort();\n     patches\n }\n \n fn apply_patches(crate_name: &str, target_dir: &Path) {\n-    for patch in get_patches(crate_name) {\n-        eprintln!(\"[PATCH] {:?} <- {:?}\", target_dir.file_name().unwrap(), patch);\n-        let patch_arg = env::current_dir().unwrap().join(\"patches\").join(patch);\n+    for patch in get_patches(&std::env::current_dir().unwrap(), crate_name) {\n+        eprintln!(\n+            \"[PATCH] {:?} <- {:?}\",\n+            target_dir.file_name().unwrap(),\n+            patch.file_name().unwrap()\n+        );\n         let mut apply_patch_cmd = Command::new(\"git\");\n-        apply_patch_cmd.arg(\"am\").arg(patch_arg).arg(\"-q\").current_dir(target_dir);\n+        apply_patch_cmd.arg(\"am\").arg(patch).arg(\"-q\").current_dir(target_dir);\n         spawn_and_wait(apply_patch_cmd);\n     }\n }"}, {"sha": "74042bc92183e819bbaeb79cbef3f58e5ced21c9", "filename": "build_system/tests.rs", "status": "modified", "additions": 62, "deletions": 73, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -1,7 +1,7 @@\n use super::build_sysroot;\n use super::config;\n use super::rustc_info::get_wrapper_file_name;\n-use super::utils::{spawn_and_wait, spawn_and_wait_with_input};\n+use super::utils::{cargo_command, hyperfine_command, spawn_and_wait, spawn_and_wait_with_input};\n use build_system::SysrootKind;\n use std::env;\n use std::ffi::OsStr;\n@@ -218,102 +218,85 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n         runner.in_dir([\"rand\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             if runner.host_triple == runner.target_triple {\n                 eprintln!(\"[TEST] rust-random/rand\");\n-                runner.run_cargo([\"test\", \"--workspace\"]);\n+                runner.run_cargo(\"test\", [\"--workspace\"]);\n             } else {\n                 eprintln!(\"[AOT] rust-random/rand\");\n-                runner.run_cargo([\n-                    \"build\",\n-                    \"--workspace\",\n-                    \"--target\",\n-                    &runner.target_triple,\n-                    \"--tests\",\n-                ]);\n+                runner.run_cargo(\"build\", [\"--workspace\", \"--tests\"]);\n             }\n         });\n     }),\n     TestCase::new(\"bench.simple-raytracer\", &|runner| {\n         runner.in_dir([\"simple-raytracer\"], |runner| {\n-            let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string());\n+            let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string()).parse().unwrap();\n \n             if runner.host_triple == runner.target_triple {\n                 eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-                let mut bench_compile = Command::new(\"hyperfine\");\n-                bench_compile.arg(\"--runs\");\n-                bench_compile.arg(&run_runs);\n-                bench_compile.arg(\"--warmup\");\n-                bench_compile.arg(\"1\");\n-                bench_compile.arg(\"--prepare\");\n-                bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"clean\"])));\n-\n-                if cfg!(windows) {\n-                    bench_compile.arg(\"cmd /C \\\"set RUSTFLAGS= && cargo build\\\"\");\n-                } else {\n-                    bench_compile.arg(\"RUSTFLAGS='' cargo build\");\n-                }\n+                let prepare = runner.cargo_command(\"clean\", []);\n+\n+                let llvm_build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\".\"));\n+\n+                let cargo_clif = runner\n+                    .root_dir\n+                    .clone()\n+                    .join(\"build\")\n+                    .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+                let clif_build_cmd = cargo_command(cargo_clif, \"build\", None, Path::new(\".\"));\n+\n+                let bench_compile =\n+                    hyperfine_command(1, run_runs, Some(prepare), llvm_build_cmd, clif_build_cmd);\n \n-                bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"build\"])));\n                 spawn_and_wait(bench_compile);\n \n                 eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n                 fs::copy(PathBuf::from(\"./target/debug/main\"), PathBuf::from(\"raytracer_cg_clif\"))\n                     .unwrap();\n \n-                let mut bench_run = Command::new(\"hyperfine\");\n-                bench_run.arg(\"--runs\");\n-                bench_run.arg(&run_runs);\n-                bench_run.arg(PathBuf::from(\"./raytracer_cg_llvm\"));\n-                bench_run.arg(PathBuf::from(\"./raytracer_cg_clif\"));\n+                let bench_run = hyperfine_command(\n+                    0,\n+                    run_runs,\n+                    None,\n+                    Command::new(\"./raytracer_cg_llvm\"),\n+                    Command::new(\"./raytracer_cg_clif\"),\n+                );\n                 spawn_and_wait(bench_run);\n             } else {\n-                runner.run_cargo([\"clean\"]);\n+                runner.run_cargo(\"clean\", []);\n                 eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\");\n                 eprintln!(\"[COMPILE] ebobby/simple-raytracer\");\n-                runner.run_cargo([\"build\", \"--target\", &runner.target_triple]);\n+                runner.run_cargo(\"build\", []);\n                 eprintln!(\"[BENCH RUN] ebobby/simple-raytracer (skipped)\");\n             }\n         });\n     }),\n     TestCase::new(\"test.libcore\", &|runner| {\n         runner.in_dir([\"build_sysroot\", \"sysroot_src\", \"library\", \"core\", \"tests\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             if runner.host_triple == runner.target_triple {\n-                runner.run_cargo([\"test\"]);\n+                runner.run_cargo(\"test\", []);\n             } else {\n                 eprintln!(\"Cross-Compiling: Not running tests\");\n-                runner.run_cargo([\"build\", \"--target\", &runner.target_triple, \"--tests\"]);\n+                runner.run_cargo(\"build\", [\"--tests\"]);\n             }\n         });\n     }),\n     TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n         runner.in_dir([\"regex\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n             let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n-            let mut build_cmd = runner.cargo_command([\n-                \"build\",\n-                \"--example\",\n-                \"shootout-regex-dna\",\n-                \"--target\",\n-                &runner.target_triple,\n-            ]);\n+            let mut build_cmd = runner.cargo_command(\"build\", [\"--example\", \"shootout-regex-dna\"]);\n             build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n             spawn_and_wait(build_cmd);\n \n             if runner.host_triple == runner.target_triple {\n-                let mut run_cmd = runner.cargo_command([\n-                    \"run\",\n-                    \"--example\",\n-                    \"shootout-regex-dna\",\n-                    \"--target\",\n-                    &runner.target_triple,\n-                ]);\n+                let mut run_cmd = runner.cargo_command(\"run\", [\"--example\", \"shootout-regex-dna\"]);\n                 run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n \n                 let input =\n@@ -354,40 +337,42 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     }),\n     TestCase::new(\"test.regex\", &|runner| {\n         runner.in_dir([\"regex\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n             let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n             if runner.host_triple == runner.target_triple {\n-                let mut run_cmd = runner.cargo_command([\n+                let mut run_cmd = runner.cargo_command(\n                     \"test\",\n-                    \"--tests\",\n-                    \"--\",\n-                    \"--exclude-should-panic\",\n-                    \"--test-threads\",\n-                    \"1\",\n-                    \"-Zunstable-options\",\n-                    \"-q\",\n-                ]);\n+                    [\n+                        \"--tests\",\n+                        \"--\",\n+                        \"--exclude-should-panic\",\n+                        \"--test-threads\",\n+                        \"1\",\n+                        \"-Zunstable-options\",\n+                        \"-q\",\n+                    ],\n+                );\n                 run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n                 spawn_and_wait(run_cmd);\n             } else {\n                 eprintln!(\"Cross-Compiling: Not running tests\");\n                 let mut build_cmd =\n-                    runner.cargo_command([\"build\", \"--tests\", \"--target\", &runner.target_triple]);\n+                    runner.cargo_command(\"build\", [\"--tests\", \"--target\", &runner.target_triple]);\n                 build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n                 spawn_and_wait(build_cmd);\n             }\n         });\n     }),\n     TestCase::new(\"test.portable-simd\", &|runner| {\n         runner.in_dir([\"portable-simd\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n-            runner.run_cargo([\"build\", \"--all-targets\", \"--target\", &runner.target_triple]);\n+            runner.run_cargo(\"clean\", []);\n+            runner.run_cargo(\"build\", [\"--all-targets\", \"--target\", &runner.target_triple]);\n \n             if runner.host_triple == runner.target_triple {\n-                runner.run_cargo([\"test\", \"-q\"]);\n+                runner.run_cargo(\"test\", [\"-q\"]);\n             }\n         });\n     }),\n@@ -397,7 +382,7 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     target_dir: &Path,\n-    cg_clif_build_dir: &Path,\n+    cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n@@ -408,7 +393,7 @@ pub(crate) fn run_tests(\n             channel,\n             SysrootKind::None,\n             &target_dir,\n-            cg_clif_build_dir,\n+            cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n         );\n@@ -427,7 +412,7 @@ pub(crate) fn run_tests(\n             channel,\n             sysroot_kind,\n             &target_dir,\n-            cg_clif_build_dir,\n+            cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n         );\n@@ -594,25 +579,29 @@ impl TestRunner {\n         spawn_and_wait(cmd);\n     }\n \n-    fn cargo_command<I, S>(&self, args: I) -> Command\n+    fn cargo_command<'a, I>(&self, subcommand: &str, args: I) -> Command\n     where\n-        I: IntoIterator<Item = S>,\n-        S: AsRef<OsStr>,\n+        I: IntoIterator<Item = &'a str>,\n     {\n         let mut cargo_clif = self.root_dir.clone();\n         cargo_clif.push(\"build\");\n         cargo_clif.push(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n \n-        let mut cmd = Command::new(cargo_clif);\n+        let mut cmd = cargo_command(\n+            cargo_clif,\n+            subcommand,\n+            if subcommand == \"clean\" { None } else { Some(&self.target_triple) },\n+            Path::new(\".\"),\n+        );\n         cmd.args(args);\n         cmd.env(\"RUSTFLAGS\", &self.rust_flags);\n         cmd\n     }\n \n-    fn run_cargo<'a, I>(&self, args: I)\n+    fn run_cargo<'a, I>(&self, subcommand: &str, args: I)\n     where\n         I: IntoIterator<Item = &'a str>,\n     {\n-        spawn_and_wait(self.cargo_command(args));\n+        spawn_and_wait(self.cargo_command(subcommand, args));\n     }\n }"}, {"sha": "48da64906e2a4b30189c82535f560a899e547510", "filename": "build_system/utils.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107f9d88137955cbddb341d1feb1582d3f965c25/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=107f9d88137955cbddb341d1feb1582d3f965c25", "patch": "@@ -4,6 +4,52 @@ use std::io::Write;\n use std::path::Path;\n use std::process::{self, Command, Stdio};\n \n+pub(crate) fn cargo_command(\n+    cargo: impl AsRef<Path>,\n+    subcommand: &str,\n+    triple: Option<&str>,\n+    source_dir: &Path,\n+) -> Command {\n+    let mut cmd = Command::new(cargo.as_ref());\n+    cmd.arg(subcommand)\n+        .arg(\"--manifest-path\")\n+        .arg(source_dir.join(\"Cargo.toml\"))\n+        .arg(\"--target-dir\")\n+        .arg(source_dir.join(\"target\"));\n+\n+    if let Some(triple) = triple {\n+        cmd.arg(\"--target\").arg(triple);\n+    }\n+\n+    cmd\n+}\n+\n+pub(crate) fn hyperfine_command(\n+    warmup: u64,\n+    runs: u64,\n+    prepare: Option<Command>,\n+    a: Command,\n+    b: Command,\n+) -> Command {\n+    let mut bench = Command::new(\"hyperfine\");\n+\n+    if warmup != 0 {\n+        bench.arg(\"--warmup\").arg(warmup.to_string());\n+    }\n+\n+    if runs != 0 {\n+        bench.arg(\"--runs\").arg(runs.to_string());\n+    }\n+\n+    if let Some(prepare) = prepare {\n+        bench.arg(\"--prepare\").arg(format!(\"{:?}\", prepare));\n+    }\n+\n+    bench.arg(format!(\"{:?}\", a)).arg(format!(\"{:?}\", b));\n+\n+    bench\n+}\n+\n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n     let src = src.as_ref();"}]}