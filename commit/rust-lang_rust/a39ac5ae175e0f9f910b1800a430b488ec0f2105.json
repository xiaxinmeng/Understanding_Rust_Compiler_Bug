{"sha": "a39ac5ae175e0f9f910b1800a430b488ec0f2105", "node_id": "C_kwDOAAsO6NoAKGEzOWFjNWFlMTc1ZTBmOWY5MTBiMTgwMGE0MzBiNDg4ZWMwZjIxMDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-31T00:29:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-31T00:29:54Z"}, "message": "Auto merge of #95501 - Dylan-DPC:rollup-arx6sdc, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #93901 (Stabilize native library modifier syntax and the `whole-archive` modifier specifically)\n - #94806 (Fix `cargo run tidy`)\n - #94869 (Add the generic_associated_types_extended feature)\n - #95011 (async: Give predictable name to binding generated from .await expressions.)\n - #95251 (Reduce max hash in raw strings from u16 to u8)\n - #95298 (Fix double drop of allocator in IntoIter impl of Vec)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1901e59455c2d055cf2d8642fccde25040ca35fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1901e59455c2d055cf2d8642fccde25040ca35fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a39ac5ae175e0f9f910b1800a430b488ec0f2105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a39ac5ae175e0f9f910b1800a430b488ec0f2105", "html_url": "https://github.com/rust-lang/rust/commit/a39ac5ae175e0f9f910b1800a430b488ec0f2105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a39ac5ae175e0f9f910b1800a430b488ec0f2105/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a40c595695bff3bfb373a8a3355ae4bd4ea64608", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40c595695bff3bfb373a8a3355ae4bd4ea64608", "html_url": "https://github.com/rust-lang/rust/commit/a40c595695bff3bfb373a8a3355ae4bd4ea64608"}, {"sha": "d6c959c680df8e3a68932e42ed919f5664669cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c959c680df8e3a68932e42ed919f5664669cc7", "html_url": "https://github.com/rust-lang/rust/commit/d6c959c680df8e3a68932e42ed919f5664669cc7"}], "stats": {"total": 870, "additions": 632, "deletions": 238}, "files": [{"sha": "75ccbc92be1f681ce0b5d37fc2c0429be99b9345", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1616,7 +1616,7 @@ pub enum StrStyle {\n     /// A raw string, like `r##\"foo\"##`.\n     ///\n     /// The value is the number of `#` symbols used.\n-    Raw(u16),\n+    Raw(u8),\n }\n \n /// An AST literal."}, {"sha": "2132cdfc001b6037b898d4e4b7b26ebf17a190c4", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -59,9 +59,9 @@ pub enum LitKind {\n     Integer,\n     Float,\n     Str,\n-    StrRaw(u16), // raw string delimited by `n` hash symbols\n+    StrRaw(u8), // raw string delimited by `n` hash symbols\n     ByteStr,\n-    ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols\n+    ByteStrRaw(u8), // raw byte string delimited by `n` hash symbols\n     Err,\n }\n "}, {"sha": "9442e0f1a1f3533714c940e8e935000f07aaa533", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -618,9 +618,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// Desugar `<expr>.await` into:\n     /// ```rust\n     /// match ::std::future::IntoFuture::into_future(<expr>) {\n-    ///     mut pinned => loop {\n+    ///     mut __awaitee => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n-    ///             <::std::pin::Pin>::new_unchecked(&mut pinned),\n+    ///             <::std::pin::Pin>::new_unchecked(&mut __awaitee),\n     ///             ::std::future::get_context(task_context),\n     ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n@@ -657,21 +657,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let expr = self.lower_expr_mut(expr);\n         let expr_hir_id = expr.hir_id;\n \n-        let pinned_ident = Ident::with_dummy_span(sym::pinned);\n-        let (pinned_pat, pinned_pat_hid) =\n-            self.pat_ident_binding_mode(span, pinned_ident, hir::BindingAnnotation::Mutable);\n+        // Note that the name of this binding must not be changed to something else because\n+        // debuggers and debugger extensions expect it to be called `__awaitee`. They use\n+        // this name to identify what is being awaited by a suspended async functions.\n+        let awaitee_ident = Ident::with_dummy_span(sym::__awaitee);\n+        let (awaitee_pat, awaitee_pat_hid) =\n+            self.pat_ident_binding_mode(span, awaitee_ident, hir::BindingAnnotation::Mutable);\n \n         let task_context_ident = Ident::with_dummy_span(sym::_task_context);\n \n         // unsafe {\n         //     ::std::future::Future::poll(\n-        //         ::std::pin::Pin::new_unchecked(&mut pinned),\n+        //         ::std::pin::Pin::new_unchecked(&mut __awaitee),\n         //         ::std::future::get_context(task_context),\n         //     )\n         // }\n         let poll_expr = {\n-            let pinned = self.expr_ident(span, pinned_ident, pinned_pat_hid);\n-            let ref_mut_pinned = self.expr_mut_addr_of(span, pinned);\n+            let awaitee = self.expr_ident(span, awaitee_ident, awaitee_pat_hid);\n+            let ref_mut_awaitee = self.expr_mut_addr_of(span, awaitee);\n             let task_context = if let Some(task_context_hid) = self.task_context {\n                 self.expr_ident_mut(span, task_context_ident, task_context_hid)\n             } else {\n@@ -681,7 +684,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let new_unchecked = self.expr_call_lang_item_fn_mut(\n                 span,\n                 hir::LangItem::PinNewUnchecked,\n-                arena_vec![self; ref_mut_pinned],\n+                arena_vec![self; ref_mut_awaitee],\n                 Some(expr_hir_id),\n             );\n             let get_context = self.expr_call_lang_item_fn_mut(\n@@ -782,8 +785,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             span: self.lower_span(span),\n         });\n \n-        // mut pinned => loop { ... }\n-        let pinned_arm = self.arm(pinned_pat, loop_expr);\n+        // mut __awaitee => loop { ... }\n+        let awaitee_arm = self.arm(awaitee_pat, loop_expr);\n \n         // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n         let into_future_span = self.mark_span_with_reason(\n@@ -799,11 +802,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         // match <into_future_expr> {\n-        //     mut pinned => loop { .. }\n+        //     mut __awaitee => loop { .. }\n         // }\n         hir::ExprKind::Match(\n             into_future_expr,\n-            arena_vec![self; pinned_arm],\n+            arena_vec![self; awaitee_arm],\n             hir::MatchSource::AwaitDesugar,\n         )\n     }"}, {"sha": "a778d8c54708459ab2325b922aba0973ce64773f", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -387,13 +387,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         if attr.has_name(sym::link) {\n             for nested_meta in attr.meta_item_list().unwrap_or_default() {\n                 if nested_meta.has_name(sym::modifiers) {\n-                    gate_feature_post!(\n-                        self,\n-                        native_link_modifiers,\n-                        nested_meta.span(),\n-                        \"native link modifiers are experimental\"\n-                    );\n-\n                     if let Some(modifiers) = nested_meta.value_str() {\n                         for modifier in modifiers.as_str().split(',') {\n                             if let Some(modifier) = modifier.strip_prefix(&['+', '-']) {\n@@ -412,7 +405,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                 gate_modifier!(\n                                     \"bundle\" => native_link_modifiers_bundle\n                                     \"verbatim\" => native_link_modifiers_verbatim\n-                                    \"whole-archive\" => native_link_modifiers_whole_archive\n                                     \"as-needed\" => native_link_modifiers_as_needed\n                                 );\n                             }"}, {"sha": "548ae0e411da7d12e5f2f348c0ab208876985cbf", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 62, "deletions": 41, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1844,7 +1844,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // This change is somewhat breaking in practice due to local static libraries being linked\n     // as whole-archive (#85144), so removing whole-archive may be a pre-requisite.\n     if sess.opts.debugging_opts.link_native_libraries {\n-        add_local_native_libraries(cmd, sess, codegen_results);\n+        add_local_native_libraries(cmd, sess, codegen_results, crate_type);\n     }\n \n     // Upstream rust libraries and their nobundle static libraries\n@@ -2016,6 +2016,16 @@ fn add_order_independent_options(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n }\n \n+// A dylib may reexport symbols from the linked rlib or native static library.\n+// Even if some symbol is reexported it's still not necessarily counted as used and may be\n+// dropped, at least with `ld`-like ELF linkers. So we have to link some rlibs and static\n+// libraries as whole-archive to avoid losing reexported symbols.\n+// FIXME: Find a way to mark reexported symbols as used and avoid this use of whole-archive.\n+fn default_to_whole_archive(sess: &Session, crate_type: CrateType, cmd: &dyn Linker) -> bool {\n+    crate_type == CrateType::Dylib\n+        && !(sess.target.limit_rdylib_exports && cmd.exported_symbol_means_used_symbol())\n+}\n+\n /// # Native library linking\n ///\n /// User-supplied library search paths (-L on the command line). These are the same paths used to\n@@ -2029,6 +2039,7 @@ fn add_local_native_libraries(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     codegen_results: &CodegenResults,\n+    crate_type: CrateType,\n ) {\n     let filesearch = sess.target_filesearch(PathKind::All);\n     for search_path in filesearch.search_paths() {\n@@ -2046,14 +2057,18 @@ fn add_local_native_libraries(\n         codegen_results.crate_info.used_libraries.iter().filter(|l| relevant_lib(sess, l));\n \n     let search_path = OnceCell::new();\n-    let mut last = (NativeLibKind::Unspecified, None);\n+    let mut last = (None, NativeLibKind::Unspecified, None);\n     for lib in relevant_libs {\n         let Some(name) = lib.name else {\n             continue;\n         };\n \n         // Skip if this library is the same as the last.\n-        last = if (lib.kind, lib.name) == last { continue } else { (lib.kind, lib.name) };\n+        last = if (lib.name, lib.kind, lib.verbatim) == last {\n+            continue;\n+        } else {\n+            (lib.name, lib.kind, lib.verbatim)\n+        };\n \n         let verbatim = lib.verbatim.unwrap_or(false);\n         match lib.kind {\n@@ -2064,15 +2079,19 @@ fn add_local_native_libraries(\n             NativeLibKind::Framework { as_needed } => {\n                 cmd.link_framework(name, as_needed.unwrap_or(true))\n             }\n-            NativeLibKind::Static { bundle: None | Some(true), .. }\n-            | NativeLibKind::Static { whole_archive: Some(true), .. } => {\n-                cmd.link_whole_staticlib(\n-                    name,\n-                    verbatim,\n-                    &search_path.get_or_init(|| archive_search_paths(sess)),\n-                );\n+            NativeLibKind::Static { whole_archive, .. } => {\n+                if whole_archive == Some(true)\n+                    || (whole_archive == None && default_to_whole_archive(sess, crate_type, cmd))\n+                {\n+                    cmd.link_whole_staticlib(\n+                        name,\n+                        verbatim,\n+                        &search_path.get_or_init(|| archive_search_paths(sess)),\n+                    );\n+                } else {\n+                    cmd.link_staticlib(name, verbatim)\n+                }\n             }\n-            NativeLibKind::Static { .. } => cmd.link_staticlib(name, verbatim),\n             NativeLibKind::RawDylib => {\n                 // FIXME(#58713): Proper handling for raw dylibs.\n                 bug!(\"raw_dylib feature not yet implemented\");\n@@ -2197,34 +2216,37 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // external build system already has the native dependencies defined, and it\n                 // will provide them to the linker itself.\n                 if sess.opts.debugging_opts.link_native_libraries {\n-                    let mut last = None;\n+                    let mut last = (None, NativeLibKind::Unspecified, None);\n                     for lib in &codegen_results.crate_info.native_libraries[&cnum] {\n+                        let Some(name) = lib.name else {\n+                            continue;\n+                        };\n                         if !relevant_lib(sess, lib) {\n-                            // Skip libraries if they are disabled by `#[link(cfg=...)]`\n                             continue;\n                         }\n \n                         // Skip if this library is the same as the last.\n-                        if last == lib.name {\n+                        last = if (lib.name, lib.kind, lib.verbatim) == last {\n                             continue;\n-                        }\n-\n-                        if let Some(static_lib_name) = lib.name {\n-                            if let NativeLibKind::Static { bundle: Some(false), whole_archive } =\n-                                lib.kind\n+                        } else {\n+                            (lib.name, lib.kind, lib.verbatim)\n+                        };\n+\n+                        if let NativeLibKind::Static { bundle: Some(false), whole_archive } =\n+                            lib.kind\n+                        {\n+                            let verbatim = lib.verbatim.unwrap_or(false);\n+                            if whole_archive == Some(true)\n+                                || (whole_archive == None\n+                                    && default_to_whole_archive(sess, crate_type, cmd))\n                             {\n-                                let verbatim = lib.verbatim.unwrap_or(false);\n-                                if whole_archive == Some(true) {\n-                                    cmd.link_whole_staticlib(\n-                                        static_lib_name,\n-                                        verbatim,\n-                                        search_path.get_or_init(|| archive_search_paths(sess)),\n-                                    );\n-                                } else {\n-                                    cmd.link_staticlib(static_lib_name, verbatim);\n-                                }\n-\n-                                last = lib.name;\n+                                cmd.link_whole_staticlib(\n+                                    name,\n+                                    verbatim,\n+                                    search_path.get_or_init(|| archive_search_paths(sess)),\n+                                );\n+                            } else {\n+                                cmd.link_staticlib(name, verbatim);\n                             }\n                         }\n                     }\n@@ -2282,15 +2304,10 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let cratepath = &src.rlib.as_ref().unwrap().0;\n \n         let mut link_upstream = |path: &Path| {\n-            // If we're creating a dylib, then we need to include the\n-            // whole of each object in our archive into that artifact. This is\n-            // because a `dylib` can be reused as an intermediate artifact.\n-            //\n-            // Note, though, that we don't want to include the whole of a\n-            // compiler-builtins crate (e.g., compiler-rt) because it'll get\n-            // repeatedly linked anyway.\n+            // We don't want to include the whole compiler-builtins crate (e.g., compiler-rt)\n+            // regardless of the default because it'll get repeatedly linked anyway.\n             let path = fix_windows_verbatim_for_gcc(path);\n-            if crate_type == CrateType::Dylib\n+            if default_to_whole_archive(sess, crate_type, cmd)\n                 && codegen_results.crate_info.compiler_builtins != Some(cnum)\n             {\n                 cmd.link_whole_rlib(&path);\n@@ -2401,7 +2418,7 @@ fn add_upstream_native_libraries(\n     sess: &Session,\n     codegen_results: &CodegenResults,\n ) {\n-    let mut last = (NativeLibKind::Unspecified, None);\n+    let mut last = (None, NativeLibKind::Unspecified, None);\n     for &cnum in &codegen_results.crate_info.used_crates {\n         for lib in codegen_results.crate_info.native_libraries[&cnum].iter() {\n             let Some(name) = lib.name else {\n@@ -2412,7 +2429,11 @@ fn add_upstream_native_libraries(\n             }\n \n             // Skip if this library is the same as the last.\n-            last = if (lib.kind, lib.name) == last { continue } else { (lib.kind, lib.name) };\n+            last = if (lib.name, lib.kind, lib.verbatim) == last {\n+                continue;\n+            } else {\n+                (lib.name, lib.kind, lib.verbatim)\n+            };\n \n             let verbatim = lib.verbatim.unwrap_or(false);\n             match lib.kind {"}, {"sha": "3a66bfafaf3f47b22aa87476f074a8e08058f46b", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -186,6 +186,9 @@ pub trait Linker {\n     fn no_crt_objects(&mut self);\n     fn no_default_libraries(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n+    fn exported_symbol_means_used_symbol(&self) -> bool {\n+        true\n+    }\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n     fn group_end(&mut self);\n@@ -724,6 +727,10 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n+    fn exported_symbol_means_used_symbol(&self) -> bool {\n+        self.sess.target.is_like_windows || self.sess.target.is_like_osx\n+    }\n+\n     fn subsystem(&mut self, subsystem: &str) {\n         self.linker_arg(\"--subsystem\");\n         self.linker_arg(&subsystem);\n@@ -1471,6 +1478,10 @@ impl<'a> Linker for L4Bender<'a> {\n         return;\n     }\n \n+    fn exported_symbol_means_used_symbol(&self) -> bool {\n+        false\n+    }\n+\n     fn subsystem(&mut self, subsystem: &str) {\n         self.cmd.arg(&format!(\"--subsystem {}\", subsystem));\n     }"}, {"sha": "e37251c9c2439aebd242162f578bd6ad566b62f8", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -215,6 +215,10 @@ declare_features! (\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n+    /// Allows specifying modifiers in the link attribute: `#[link(modifiers = \"...\")]`\n+    (accepted, native_link_modifiers, \"1.61.0\", Some(81490), None),\n+    /// Allows specifying the whole-archive link modifier\n+    (accepted, native_link_modifiers_whole_archive, \"1.61.0\", Some(81490), None),\n     /// Allows using `#![no_std]`.\n     (accepted, no_std, \"1.6.0\", None, None),\n     /// Allows defining identifiers beyond ASCII."}, {"sha": "28466315c8687e37c6bb93644600423fcf9f0503", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -400,6 +400,8 @@ declare_features! (\n     (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n     /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n+    /// An extension to the `generic_associated_types` feature, allowing incomplete features.\n+    (incomplete, generic_associated_types_extended, \"1.61.0\", Some(95451), None),\n     /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n     (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n     /// Allows using `..X`, `..=X`, `...X`, and `X..` as a pattern.\n@@ -446,16 +448,12 @@ declare_features! (\n     (active, must_not_suspend, \"1.57.0\", Some(83310), None),\n     /// Allows using `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n-    /// Allows specifying modifiers in the link attribute: `#[link(modifiers = \"...\")]`\n-    (active, native_link_modifiers, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the as-needed link modifier\n     (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the bundle link modifier\n     (active, native_link_modifiers_bundle, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the verbatim link modifier\n     (active, native_link_modifiers_verbatim, \"1.53.0\", Some(81490), None),\n-    /// Allows specifying the whole-archive link modifier\n-    (active, native_link_modifiers_whole_archive, \"1.53.0\", Some(81490), None),\n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n     /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more."}, {"sha": "a41e0374f410ae969dacb26a62afc50fb6d73d09", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -161,15 +161,15 @@ pub enum LiteralKind {\n     /// \"b\"abc\"\", \"b\"abc\"\n     ByteStr { terminated: bool },\n     /// \"r\"abc\"\", \"r#\"abc\"#\", \"r####\"ab\"###\"c\"####\", \"r#\"a\"\n-    RawStr { n_hashes: u16, err: Option<RawStrError> },\n+    RawStr { n_hashes: u8, err: Option<RawStrError> },\n     /// \"br\"abc\"\", \"br#\"abc\"#\", \"br####\"ab\"###\"c\"####\", \"br#\"a\"\n-    RawByteStr { n_hashes: u16, err: Option<RawStrError> },\n+    RawByteStr { n_hashes: u8, err: Option<RawStrError> },\n }\n \n /// Error produced validating a raw string. Represents cases like:\n /// - `r##~\"abcde\"##`: `InvalidStarter`\n /// - `r###\"abcde\"##`: `NoTerminator { expected: 3, found: 2, possible_terminator_offset: Some(11)`\n-/// - Too many `#`s (>65535): `TooManyDelimiters`\n+/// - Too many `#`s (>255): `TooManyDelimiters`\n // perf note: It doesn't matter that this makes `Token` 36 bytes bigger. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum RawStrError {\n@@ -178,7 +178,7 @@ pub enum RawStrError {\n     /// The string was never terminated. `possible_terminator_offset` is the number of characters after `r` or `br` where they\n     /// may have intended to terminate it.\n     NoTerminator { expected: usize, found: usize, possible_terminator_offset: Option<usize> },\n-    /// More than 65535 `#`s exist.\n+    /// More than 255 `#`s exist.\n     TooManyDelimiters { found: usize },\n }\n \n@@ -698,12 +698,12 @@ impl Cursor<'_> {\n     }\n \n     /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.\n-    fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {\n+    fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u8, Option<RawStrError>) {\n         // Wrap the actual function to handle the error with too many hashes.\n         // This way, it eats the whole raw string.\n         let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);\n-        // Only up to 65535 `#`s are allowed in raw strings\n-        match u16::try_from(n_hashes) {\n+        // Only up to 255 `#`s are allowed in raw strings\n+        match u8::try_from(n_hashes) {\n             Ok(num) => (num, err),\n             // We lie about the number of hashes here :P\n             Err(_) => (0, Some(RawStrError::TooManyDelimiters { found: n_hashes })),"}, {"sha": "07daee06f0f860d911db92bf847e686960bab832", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use expect_test::{expect, Expect};\n \n-fn check_raw_str(s: &str, expected_hashes: u16, expected_err: Option<RawStrError>) {\n+fn check_raw_str(s: &str, expected_hashes: u8, expected_err: Option<RawStrError>) {\n     let s = &format!(\"r{}\", s);\n     let mut cursor = Cursor::new(s);\n     cursor.bump();\n@@ -68,13 +68,13 @@ fn test_unterminated_no_pound() {\n \n #[test]\n fn test_too_many_hashes() {\n-    let max_count = u16::MAX;\n+    let max_count = u8::MAX;\n     let mut hashes: String = \"#\".repeat(max_count.into());\n \n-    // Valid number of hashes (65535 = 2^16 - 1), but invalid string.\n+    // Valid number of hashes (255 = 2^8 - 1 = u8::MAX), but invalid string.\n     check_raw_str(&hashes, max_count, Some(RawStrError::InvalidStarter { bad_char: '\\u{0}' }));\n \n-    // One more hash sign (65536 = 2^16) becomes too many.\n+    // One more hash sign (256 = 2^8) becomes too many.\n     hashes.push('#');\n     check_raw_str(\n         &hashes,"}, {"sha": "0324ac3641e11be3c65f855a408e99b9cc756f11", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,5 +1,5 @@\n #![feature(nll)]\n-#![feature(native_link_modifiers)]\n+#![cfg_attr(bootstrap, feature(native_link_modifiers))]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n \n // NOTE: This crate only exists to allow linking on mingw targets."}, {"sha": "1cbfb0bd5546b4e7416dd5ce2dee05b00fbfa7b1", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -125,13 +125,18 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n             // Do this outside the above loop so we don't depend on modifiers coming\n             // after kinds\n-            if let Some(item) = items.iter().find(|item| item.has_name(sym::modifiers)) {\n+            let mut modifiers_count = 0;\n+            for item in items.iter().filter(|item| item.has_name(sym::modifiers)) {\n                 if let Some(modifiers) = item.value_str() {\n+                    modifiers_count += 1;\n                     let span = item.name_value_literal_span().unwrap();\n+                    let mut has_duplicate_modifiers = false;\n                     for modifier in modifiers.as_str().split(',') {\n                         let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n                             Some(m) => (m, modifier.starts_with('+')),\n                             None => {\n+                                // Note: this error also excludes the case with empty modifier\n+                                // string, like `modifiers = \"\"`.\n                                 sess.span_err(\n                                     span,\n                                     \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n@@ -143,6 +148,9 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n                         match (modifier, &mut lib.kind) {\n                             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n+                                if bundle.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n                                 *bundle = Some(value);\n                             }\n                             (\"bundle\", _) => {\n@@ -153,9 +161,17 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                                 );\n                             }\n \n-                            (\"verbatim\", _) => lib.verbatim = Some(value),\n+                            (\"verbatim\", _) => {\n+                                if lib.verbatim.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n+                                lib.verbatim = Some(value);\n+                            }\n \n                             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n+                                if whole_archive.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n                                 *whole_archive = Some(value);\n                             }\n                             (\"whole-archive\", _) => {\n@@ -168,6 +184,9 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n                             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n                             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n+                                if as_needed.is_some() {\n+                                    has_duplicate_modifiers = true;\n+                                }\n                                 *as_needed = Some(value);\n                             }\n                             (\"as-needed\", _) => {\n@@ -190,12 +209,22 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                             }\n                         }\n                     }\n+                    if has_duplicate_modifiers {\n+                        let msg =\n+                            \"same modifier is used multiple times in a single `modifiers` argument\";\n+                        sess.span_err(item.span(), msg);\n+                    }\n                 } else {\n                     let msg = \"must be of the form `#[link(modifiers = \\\"...\\\")]`\";\n                     sess.span_err(item.span(), msg);\n                 }\n             }\n \n+            if modifiers_count > 1 {\n+                let msg = \"multiple `modifiers` arguments in a single `#[link]` attribute\";\n+                sess.span_err(m.span, msg);\n+            }\n+\n             // In general we require #[link(name = \"...\")] but we allow\n             // #[link(wasm_import_module = \"...\")] without the `name`.\n             let requires_name = kind_specified || lib.wasm_import_module.is_none();\n@@ -349,6 +378,15 @@ impl Collector<'_> {\n                 .drain_filter(|lib| {\n                     if let Some(lib_name) = lib.name {\n                         if lib_name.as_str() == passed_lib.name {\n+                            // FIXME: This whole logic is questionable, whether modifiers are\n+                            // involved or not, library reordering and kind overriding without\n+                            // explicit `:rename` in particular.\n+                            if lib.has_modifiers() || passed_lib.has_modifiers() {\n+                                self.tcx.sess.span_err(\n+                                    self.tcx.def_span(lib.foreign_module.unwrap()),\n+                                    \"overriding linking modifiers from command line is not supported\"\n+                                );\n+                            }\n                             if passed_lib.kind != NativeLibKind::Unspecified {\n                                 lib.kind = passed_lib.kind;\n                             }"}, {"sha": "075928c889d8320d2cef60e8f999517ca4940c64", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1379,3 +1379,50 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         ControlFlow::CONTINUE\n     }\n }\n+\n+/// Finds the max universe present\n+pub struct MaxUniverse {\n+    max_universe: ty::UniverseIndex,\n+}\n+\n+impl MaxUniverse {\n+    pub fn new() -> Self {\n+        MaxUniverse { max_universe: ty::UniverseIndex::ROOT }\n+    }\n+\n+    pub fn max_universe(self) -> ty::UniverseIndex {\n+        self.max_universe\n+    }\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::Placeholder(placeholder) = t.kind() {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        t.super_visit_with(self)\n+    }\n+\n+    fn visit_const(&mut self, c: ty::consts::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::ConstKind::Placeholder(placeholder) = c.val() {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if let ty::RePlaceholder(placeholder) = *r {\n+            self.max_universe = ty::UniverseIndex::from_u32(\n+                self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n+            );\n+        }\n+\n+        ControlFlow::CONTINUE\n+    }\n+}"}, {"sha": "5ab412dc777de38510e8227197a3d5ea0197b052", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -597,15 +597,13 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    /// Note: It was decided to not add a test case, because it would be too big.\n-    /// <https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180>\n     fn report_too_many_hashes(&self, start: BytePos, found: usize) -> ! {\n         self.fatal_span_(\n             start,\n             self.pos,\n             &format!(\n                 \"too many `#` symbols: raw strings may be delimited \\\n-                by up to 65535 `#` symbols, but found {}\",\n+                by up to 255 `#` symbols, but found {}\",\n                 found\n             ),\n         )"}, {"sha": "856436e44dbc803bf8474420287c959ca434c34c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1948,9 +1948,6 @@ fn parse_native_lib_kind(\n     kind: &str,\n     error_format: ErrorOutputType,\n ) -> (NativeLibKind, Option<bool>) {\n-    let is_nightly = nightly_options::match_is_nightly_build(matches);\n-    let enable_unstable = nightly_options::is_unstable_enabled(matches);\n-\n     let (kind, modifiers) = match kind.split_once(':') {\n         None => (kind, None),\n         Some((kind, modifiers)) => (kind, Some(modifiers)),\n@@ -1972,7 +1969,7 @@ fn parse_native_lib_kind(\n                     \"linking modifier can't be used with library kind `static-nobundle`\",\n                 )\n             }\n-            if !is_nightly {\n+            if !nightly_options::match_is_nightly_build(matches) {\n                 early_error(\n                     error_format,\n                     \"library kind `static-nobundle` are currently unstable and only accepted on \\\n@@ -1988,31 +1985,31 @@ fn parse_native_lib_kind(\n     };\n     match modifiers {\n         None => (kind, None),\n-        Some(modifiers) => {\n-            if !is_nightly {\n-                early_error(\n-                    error_format,\n-                    \"linking modifiers are currently unstable and only accepted on \\\n-                the nightly compiler\",\n-                );\n-            }\n-            if !enable_unstable {\n-                early_error(\n-                    error_format,\n-                    \"linking modifiers are currently unstable, \\\n-                the `-Z unstable-options` flag must also be passed to use it\",\n-                )\n-            }\n-            parse_native_lib_modifiers(kind, modifiers, error_format)\n-        }\n+        Some(modifiers) => parse_native_lib_modifiers(kind, modifiers, error_format, matches),\n     }\n }\n \n fn parse_native_lib_modifiers(\n     mut kind: NativeLibKind,\n     modifiers: &str,\n     error_format: ErrorOutputType,\n+    matches: &getopts::Matches,\n ) -> (NativeLibKind, Option<bool>) {\n+    let report_unstable_modifier = |modifier| {\n+        if !nightly_options::is_unstable_enabled(matches) {\n+            let why = if nightly_options::match_is_nightly_build(matches) {\n+                \" and only accepted on the nightly compiler\"\n+            } else {\n+                \", the `-Z unstable-options` flag must also be passed to use it\"\n+            };\n+            early_error(\n+                error_format,\n+                &format!(\"{modifier} linking modifier is currently unstable{why}\"),\n+            )\n+        }\n+    };\n+\n+    let mut has_duplicate_modifiers = false;\n     let mut verbatim = None;\n     for modifier in modifiers.split(',') {\n         let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n@@ -2026,6 +2023,10 @@ fn parse_native_lib_modifiers(\n \n         match (modifier, &mut kind) {\n             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n+                report_unstable_modifier(modifier);\n+                if bundle.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n                 *bundle = Some(value);\n             }\n             (\"bundle\", _) => early_error(\n@@ -2034,9 +2035,18 @@ fn parse_native_lib_modifiers(\n                     `static` linking kind\",\n             ),\n \n-            (\"verbatim\", _) => verbatim = Some(value),\n+            (\"verbatim\", _) => {\n+                report_unstable_modifier(modifier);\n+                if verbatim.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n+                verbatim = Some(value);\n+            }\n \n             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n+                if whole_archive.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n                 *whole_archive = Some(value);\n             }\n             (\"whole-archive\", _) => early_error(\n@@ -2047,6 +2057,10 @@ fn parse_native_lib_modifiers(\n \n             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n+                report_unstable_modifier(modifier);\n+                if as_needed.is_some() {\n+                    has_duplicate_modifiers = true;\n+                }\n                 *as_needed = Some(value);\n             }\n             (\"as-needed\", _) => early_error(\n@@ -2055,6 +2069,8 @@ fn parse_native_lib_modifiers(\n                     `dylib` and `framework` linking kinds\",\n             ),\n \n+            // Note: this error also excludes the case with empty modifier\n+            // string, like `modifiers = \"\"`.\n             _ => early_error(\n                 error_format,\n                 &format!(\n@@ -2064,6 +2080,9 @@ fn parse_native_lib_modifiers(\n             ),\n         }\n     }\n+    if has_duplicate_modifiers {\n+        report_unstable_modifier(\"duplicating\")\n+    }\n \n     (kind, verbatim)\n }"}, {"sha": "c1fd3c7c61b9ec8a5edc9cab28be0b59f5630a0e", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -75,6 +75,12 @@ pub struct NativeLib {\n     pub dll_imports: Vec<DllImport>,\n }\n \n+impl NativeLib {\n+    pub fn has_modifiers(&self) -> bool {\n+        self.verbatim.is_some() || self.kind.has_modifiers()\n+    }\n+}\n+\n #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]\n pub struct DllImport {\n     pub name: Symbol,"}, {"sha": "6a8775bd10b7e99b32fd2d3f5c3a194e223a9da3", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -43,6 +43,20 @@ pub enum NativeLibKind {\n     Unspecified,\n }\n \n+impl NativeLibKind {\n+    pub fn has_modifiers(&self) -> bool {\n+        match self {\n+            NativeLibKind::Static { bundle, whole_archive } => {\n+                bundle.is_some() || whole_archive.is_some()\n+            }\n+            NativeLibKind::Dylib { as_needed } | NativeLibKind::Framework { as_needed } => {\n+                as_needed.is_some()\n+            }\n+            NativeLibKind::RawDylib | NativeLibKind::Unspecified => false,\n+        }\n+    }\n+}\n+\n rustc_data_structures::impl_stable_hash_via_hash!(NativeLibKind);\n \n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n@@ -53,6 +67,12 @@ pub struct NativeLib {\n     pub verbatim: Option<bool>,\n }\n \n+impl NativeLib {\n+    pub fn has_modifiers(&self) -> bool {\n+        self.verbatim.is_some() || self.kind.has_modifiers()\n+    }\n+}\n+\n rustc_data_structures::impl_stable_hash_via_hash!(NativeLib);\n \n /// A path that has been canonicalized along with its original, non-canonicalized form"}, {"sha": "0bca0a99e157f43934dd5862892396d227edbe25", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -272,6 +272,7 @@ symbols! {\n         __D,\n         __H,\n         __S,\n+        __awaitee,\n         __try_var,\n         _d,\n         _e,\n@@ -722,6 +723,7 @@ symbols! {\n         generators,\n         generic_arg_infer,\n         generic_associated_types,\n+        generic_associated_types_extended,\n         generic_const_exprs,\n         generic_param_attrs,\n         get_context,\n@@ -1018,7 +1020,6 @@ symbols! {\n         pattern_parentheses,\n         phantom_data,\n         pin,\n-        pinned,\n         platform_intrinsics,\n         plugin,\n         plugin_registrar,"}, {"sha": "d95512bb88f36973e64f458fd41d0f2555aacdc8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -5,6 +5,7 @@ use super::*;\n \n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n+use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{Region, RegionVid, Term};\n \n@@ -751,19 +752,19 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                     debug!(\"Projecting and unifying projection predicate {:?}\", predicate);\n \n                     match project::poly_project_and_unify_type(select, &obligation.with(p)) {\n-                        Err(e) => {\n+                        ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n                             debug!(\n                                 \"evaluate_nested_obligations: Unable to unify predicate \\\n                                  '{:?}' '{:?}', bailing out\",\n                                 ty, e\n                             );\n                             return false;\n                         }\n-                        Ok(Err(project::InProgress)) => {\n+                        ProjectAndUnifyResult::Recursive => {\n                             debug!(\"evaluate_nested_obligations: recursive projection predicate\");\n                             return false;\n                         }\n-                        Ok(Ok(Some(v))) => {\n+                        ProjectAndUnifyResult::Holds(v) => {\n                             // We only care about sub-obligations\n                             // when we started out trying to unify\n                             // some inference variables. See the comment above\n@@ -782,7 +783,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 }\n                             }\n                         }\n-                        Ok(Ok(None)) => {\n+                        ProjectAndUnifyResult::FailedNormalization => {\n                             // It's ok not to make progress when have no inference variables -\n                             // in that case, we were only performing unification to check if an\n                             // error occurred (which would indicate that it's impossible for our"}, {"sha": "d0b8b0281c5bf65fd5fdc807179869c3c53c39b8", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::{self, Binder, Const, Ty, TypeFoldable};\n use std::marker::PhantomData;\n \n use super::const_evaluatable;\n-use super::project;\n+use super::project::{self, ProjectAndUnifyResult};\n use super::select::SelectionContext;\n use super::wf;\n use super::CodeAmbiguity;\n@@ -753,8 +753,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         }\n \n         match project::poly_project_and_unify_type(self.selcx, &project_obligation) {\n-            Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),\n-            Ok(Ok(None)) => {\n+            ProjectAndUnifyResult::Holds(os) => ProcessResult::Changed(mk_pending(os)),\n+            ProjectAndUnifyResult::FailedNormalization => {\n                 stalled_on.clear();\n                 stalled_on.extend(substs_infer_vars(\n                     self.selcx,\n@@ -763,10 +763,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ProcessResult::Unchanged\n             }\n             // Let the caller handle the recursion\n-            Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![\n+            ProjectAndUnifyResult::Recursive => ProcessResult::Changed(mk_pending(vec![\n                 project_obligation.with(project_obligation.predicate.to_predicate(tcx)),\n             ])),\n-            Err(e) => ProcessResult::Error(CodeProjectionError(e)),\n+            ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n+                ProcessResult::Error(CodeProjectionError(e))\n+            }\n         }\n     }\n }"}, {"sha": "2251f992e4dc6c38581f5eec74bcf2d5e20cf7c4", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -144,6 +144,18 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n     }\n }\n \n+/// Takes the place of a\n+/// Result<\n+///     Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n+///     MismatchedProjectionTypes<'tcx>,\n+/// >\n+pub(super) enum ProjectAndUnifyResult<'tcx> {\n+    Holds(Vec<PredicateObligation<'tcx>>),\n+    FailedNormalization,\n+    Recursive,\n+    MismatchedProjectionTypes(MismatchedProjectionTypes<'tcx>),\n+}\n+\n /// Evaluates constraints of the form:\n ///\n ///     for<...> <T as Trait>::U == V\n@@ -167,19 +179,47 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &PolyProjectionObligation<'tcx>,\n-) -> Result<\n-    Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n-    MismatchedProjectionTypes<'tcx>,\n-> {\n+) -> ProjectAndUnifyResult<'tcx> {\n     let infcx = selcx.infcx();\n-    infcx.commit_if_ok(|_snapshot| {\n+    let r = infcx.commit_if_ok(|_snapshot| {\n+        let old_universe = infcx.universe();\n         let placeholder_predicate =\n             infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n+        let new_universe = infcx.universe();\n \n         let placeholder_obligation = obligation.with(placeholder_predicate);\n-        let result = project_and_unify_type(selcx, &placeholder_obligation)?;\n-        Ok(result)\n-    })\n+        match project_and_unify_type(selcx, &placeholder_obligation) {\n+            ProjectAndUnifyResult::MismatchedProjectionTypes(e) => Err(e),\n+            ProjectAndUnifyResult::Holds(obligations)\n+                if old_universe != new_universe\n+                    && selcx.tcx().features().generic_associated_types_extended =>\n+            {\n+                // If the `generic_associated_types_extended` feature is active, then we ignore any\n+                // obligations references lifetimes from any universe greater than or equal to the\n+                // universe just created. Otherwise, we can end up with something like `for<'a> I: 'a`,\n+                // which isn't quite what we want. Ideally, we want either an implied\n+                // `for<'a where I: 'a> I: 'a` or we want to \"lazily\" check these hold when we\n+                // substitute concrete regions. There is design work to be done here; until then,\n+                // however, this allows experimenting potential GAT features without running into\n+                // well-formedness issues.\n+                let new_obligations = obligations\n+                    .into_iter()\n+                    .filter(|obligation| {\n+                        let mut visitor = MaxUniverse::new();\n+                        obligation.predicate.visit_with(&mut visitor);\n+                        visitor.max_universe() < new_universe\n+                    })\n+                    .collect();\n+                Ok(ProjectAndUnifyResult::Holds(new_obligations))\n+            }\n+            other => Ok(other),\n+        }\n+    });\n+\n+    match r {\n+        Ok(inner) => inner,\n+        Err(err) => ProjectAndUnifyResult::MismatchedProjectionTypes(err),\n+    }\n }\n \n /// Evaluates constraints of the form:\n@@ -189,15 +229,11 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n /// If successful, this may result in additional obligations.\n ///\n /// See [poly_project_and_unify_type] for an explanation of the return value.\n+#[tracing::instrument(level = \"debug\", skip(selcx))]\n fn project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionObligation<'tcx>,\n-) -> Result<\n-    Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n-    MismatchedProjectionTypes<'tcx>,\n-> {\n-    debug!(?obligation, \"project_and_unify_type\");\n-\n+) -> ProjectAndUnifyResult<'tcx> {\n     let mut obligations = vec![];\n \n     let infcx = selcx.infcx();\n@@ -210,8 +246,8 @@ fn project_and_unify_type<'cx, 'tcx>(\n         &mut obligations,\n     ) {\n         Ok(Some(n)) => n,\n-        Ok(None) => return Ok(Ok(None)),\n-        Err(InProgress) => return Ok(Err(InProgress)),\n+        Ok(None) => return ProjectAndUnifyResult::FailedNormalization,\n+        Err(InProgress) => return ProjectAndUnifyResult::Recursive,\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n     let actual = obligation.predicate.term;\n@@ -231,11 +267,11 @@ fn project_and_unify_type<'cx, 'tcx>(\n     match infcx.at(&obligation.cause, obligation.param_env).eq(normalized, actual) {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n-            Ok(Ok(Some(obligations)))\n+            ProjectAndUnifyResult::Holds(obligations)\n         }\n         Err(err) => {\n-            debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n-            Err(MismatchedProjectionTypes { err })\n+            debug!(\"equating types encountered error {:?}\", err);\n+            ProjectAndUnifyResult::MismatchedProjectionTypes(MismatchedProjectionTypes { err })\n         }\n     }\n }"}, {"sha": "4f033d45c1f32b64492eda7298f96574d2199bb4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -21,6 +21,7 @@ use super::{\n \n use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n use crate::traits::error_reporting::InferCtxtExt;\n+use crate::traits::project::ProjectAndUnifyResult;\n use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -525,7 +526,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let data = bound_predicate.rebind(data);\n                     let project_obligation = obligation.with(data);\n                     match project::poly_project_and_unify_type(self, &project_obligation) {\n-                        Ok(Ok(Some(mut subobligations))) => {\n+                        ProjectAndUnifyResult::Holds(mut subobligations) => {\n                             'compute_res: {\n                                 // If we've previously marked this projection as 'complete', then\n                                 // use the final cached result (either `EvaluatedToOk` or\n@@ -573,9 +574,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 res\n                             }\n                         }\n-                        Ok(Ok(None)) => Ok(EvaluatedToAmbig),\n-                        Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),\n-                        Err(_) => Ok(EvaluatedToErr),\n+                        ProjectAndUnifyResult::FailedNormalization => Ok(EvaluatedToAmbig),\n+                        ProjectAndUnifyResult::Recursive => Ok(EvaluatedToRecur),\n+                        ProjectAndUnifyResult::MismatchedProjectionTypes(_) => Ok(EvaluatedToErr),\n                     }\n                 }\n "}, {"sha": "03c532bb69769d13e5fddf5dc3389d4ec6b7bc53", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -8,7 +8,8 @@ use core::iter::{\n     FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccessNoCoerce,\n };\n use core::marker::PhantomData;\n-use core::mem::{self};\n+use core::mem::{self, ManuallyDrop};\n+use core::ops::Deref;\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n \n@@ -32,7 +33,9 @@ pub struct IntoIter<\n     pub(super) buf: NonNull<T>,\n     pub(super) phantom: PhantomData<T>,\n     pub(super) cap: usize,\n-    pub(super) alloc: A,\n+    // the drop impl reconstructs a RawVec from buf, cap and alloc\n+    // to avoid dropping the allocator twice we need to wrap it into ManuallyDrop\n+    pub(super) alloc: ManuallyDrop<A>,\n     pub(super) ptr: *const T,\n     pub(super) end: *const T,\n }\n@@ -295,11 +298,11 @@ where\n impl<T: Clone, A: Allocator + Clone> Clone for IntoIter<T, A> {\n     #[cfg(not(test))]\n     fn clone(&self) -> Self {\n-        self.as_slice().to_vec_in(self.alloc.clone()).into_iter()\n+        self.as_slice().to_vec_in(self.alloc.deref().clone()).into_iter()\n     }\n     #[cfg(test)]\n     fn clone(&self) -> Self {\n-        crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()\n+        crate::slice::to_vec(self.as_slice(), self.alloc.deref().clone()).into_iter()\n     }\n }\n \n@@ -311,8 +314,8 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {\n         impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {\n             fn drop(&mut self) {\n                 unsafe {\n-                    // `IntoIter::alloc` is not used anymore after this\n-                    let alloc = ptr::read(&self.0.alloc);\n+                    // `IntoIter::alloc` is not used anymore after this and will be dropped by RawVec\n+                    let alloc = ManuallyDrop::take(&mut self.0.alloc);\n                     // RawVec handles deallocation\n                     let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);\n                 }"}, {"sha": "9773ec023377f46999eebc7ab26219cf699b4c4b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -2579,7 +2579,7 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n     fn into_iter(self) -> IntoIter<T, A> {\n         unsafe {\n             let mut me = ManuallyDrop::new(self);\n-            let alloc = ptr::read(me.allocator());\n+            let alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n             let begin = me.as_mut_ptr();\n             let end = if mem::size_of::<T>() == 0 {\n                 arith_offset(begin as *const i8, me.len() as isize) as *const T"}, {"sha": "19e39ebf910b5aacef57ac9864b801dba83114fa", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,3 +1,6 @@\n+use core::alloc::{Allocator, Layout};\n+use core::ptr::NonNull;\n+use std::alloc::System;\n use std::assert_matches::assert_matches;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -991,6 +994,31 @@ fn test_into_iter_advance_by() {\n     assert_eq!(i.len(), 0);\n }\n \n+#[test]\n+fn test_into_iter_drop_allocator() {\n+    struct ReferenceCountedAllocator<'a>(DropCounter<'a>);\n+\n+    unsafe impl Allocator for ReferenceCountedAllocator<'_> {\n+        fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, core::alloc::AllocError> {\n+            System.allocate(layout)\n+        }\n+\n+        unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n+            System.deallocate(ptr, layout)\n+        }\n+    }\n+\n+    let mut drop_count = 0;\n+\n+    let allocator = ReferenceCountedAllocator(DropCounter { count: &mut drop_count });\n+    let _ = Vec::<u32, _>::new_in(allocator);\n+    assert_eq!(drop_count, 1);\n+\n+    let allocator = ReferenceCountedAllocator(DropCounter { count: &mut drop_count });\n+    let _ = Vec::<u32, _>::new_in(allocator).into_iter();\n+    assert_eq!(drop_count, 2);\n+}\n+\n #[test]\n fn test_from_iter_specialization() {\n     let src: Vec<usize> = vec![0usize; 1];"}, {"sha": "82f1e63f4b54f929c88b313ecce03d489a09f489", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,7 +1,7 @@\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![feature(link_cfg)]\n-#![feature(native_link_modifiers)]\n+#![cfg_attr(bootstrap, feature(native_link_modifiers))]\n #![feature(native_link_modifiers_bundle)]\n #![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "570a61742bcf3deea8220abf009d02b420f8188f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -117,6 +117,7 @@ use std::os::unix::fs::symlink as symlink_file;\n use std::os::windows::fs::symlink_file;\n \n use filetime::FileTime;\n+use once_cell::sync::OnceCell;\n \n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n@@ -904,7 +905,12 @@ impl Build {\n \n     /// Returns the sysroot of the snapshot compiler.\n     fn rustc_snapshot_sysroot(&self) -> &Path {\n-        self.initial_rustc.parent().unwrap().parent().unwrap()\n+        static SYSROOT_CACHE: OnceCell<PathBuf> = once_cell::sync::OnceCell::new();\n+        SYSROOT_CACHE.get_or_init(|| {\n+            let mut rustc = Command::new(&self.initial_rustc);\n+            rustc.args(&[\"--print\", \"sysroot\"]);\n+            output(&mut rustc).trim().into()\n+        })\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails."}, {"sha": "7838696cc128b72c44bccc3fedb0506877468034", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -37,6 +37,8 @@ KIND=PATH` where `KIND` may be one of:\n <a id=\"option-l-link-lib\"></a>\n ## `-l`: link the generated crate to a native library\n \n+Syntax: `-l [KIND[:MODIFIERS]=]NAME[:RENAME]`.\n+\n This flag allows you to specify linking to a specific native library when building\n a crate.\n \n@@ -47,7 +49,13 @@ where `KIND` may be one of:\n - `static` \u2014\u00a0A native static library (such as a `.a` archive).\n - `framework` \u2014\u00a0A macOS framework.\n \n-The kind of library can be specified in a [`#[link]`\n+If the kind is specified, then linking modifiers can be attached to it.\n+Modifiers are specified as a comma-delimited string with each modifier prefixed with\n+either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively.\n+The last boolean value specified for a given modifier wins. \\\n+Example: `-l static:+whole-archive=mylib`.\n+\n+The kind of library and the modifiers can also be specified in a [`#[link]`\n attribute][link-attribute]. If the kind is not specified in the `link`\n attribute or on the command-line, it will link a dynamic library if available,\n otherwise it will use a static library. If the kind is specified on the\n@@ -59,6 +67,22 @@ and `LINK_NAME` is the name of the actual library that will be linked.\n \n [link-attribute]: ../reference/items/external-blocks.html#the-link-attribute\n \n+### Linking modifiers: `whole-archive`\n+\n+This modifier is only compatible with the `static` linking kind.\n+Using any other kind will result in a compiler error.\n+\n+`+whole-archive` means that the static library is linked as a whole archive\n+without throwing any object files away.\n+\n+This modifier translates to `--whole-archive` for `ld`-like linkers,\n+to `/WHOLEARCHIVE` for `link.exe`, and to `-force_load` for `ld64`.\n+The modifier does nothing for linkers that don't support it.\n+\n+The default for this modifier is `-whole-archive`. \\\n+NOTE: The default may currently be different when building dylibs for some targets,\n+but it is not guaranteed.\n+\n <a id=\"option-crate-type\"></a>\n ## `--crate-type`: a list of types of crates for the compiler to emit\n "}, {"sha": "4961e88cad1e0ba1a519f7995ef3db43b0019445", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers-whole-archive.md", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md", "raw_url": "https://github.com/rust-lang/rust/raw/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers-whole-archive.md?ref=a40c595695bff3bfb373a8a3355ae4bd4ea64608", "patch": "@@ -1,18 +0,0 @@\n-# `native_link_modifiers_whole_archive`\n-\n-The tracking issue for this feature is: [#81490]\n-\n-[#81490]: https://github.com/rust-lang/rust/issues/81490\n-\n-------------------------\n-\n-The `native_link_modifiers_whole_archive` feature allows you to use the `whole-archive` modifier.\n-\n-Only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n-\n-`+whole-archive` means that the static library is linked as a whole archive without throwing any object files away.\n-\n-This modifier translates to `--whole-archive` for `ld`-like linkers, to `/WHOLEARCHIVE` for `link.exe`, and to `-force_load` for `ld64`.\n-The modifier does nothing for linkers that don't support it.\n-\n-The default for this modifier is `-whole-archive`."}, {"sha": "fc8b575462175ee0c2c721c3d27f1eb8afae0838", "filename": "src/doc/unstable-book/src/language-features/native-link-modifiers.md", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md", "raw_url": "https://github.com/rust-lang/rust/raw/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnative-link-modifiers.md?ref=a40c595695bff3bfb373a8a3355ae4bd4ea64608", "patch": "@@ -1,11 +0,0 @@\n-# `native_link_modifiers`\n-\n-The tracking issue for this feature is: [#81490]\n-\n-[#81490]: https://github.com/rust-lang/rust/issues/81490\n-\n-------------------------\n-\n-The `native_link_modifiers` feature allows you to use the `modifiers` syntax with the `#[link(..)]` attribute.\n-\n-Modifiers are specified as a comma-delimited string with each modifier prefixed with either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively. The last boolean value specified for a given modifier wins."}, {"sha": "efb345fa9f3e52be803134e5ce50d939a63d7697", "filename": "src/test/codegen/async-fn-debug-awaitee-field.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fcodegen%2Fasync-fn-debug-awaitee-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fcodegen%2Fasync-fn-debug-awaitee-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-awaitee-field.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,23 @@\n+// This test makes sure that the generator field capturing the awaitee in a `.await` expression\n+// is called \"__awaitee\" in debuginfo. This name must not be changed since debuggers and debugger\n+// extensions rely on the field having this name.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+\n+async fn foo() {}\n+\n+async fn async_fn_test() {\n+    foo().await;\n+}\n+\n+// NONMSVC: [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}\",\n+// MSVC: [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"enum$<async_fn_debug_awaitee_field::async_fn_test::async_fn_env$0>\",\n+// CHECK: [[SUSPEND_STRUCT:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend0\", scope: [[GEN]],\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"__awaitee\", scope: [[SUSPEND_STRUCT]], {{.*}}, baseType: [[AWAITEE_TYPE:![0-9]*]],\n+// NONMSVC: [[AWAITEE_TYPE]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"GenFuture<async_fn_debug_awaitee_field::foo::{async_fn_env#0}>\",\n+// MSVC: [[AWAITEE_TYPE]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"GenFuture<enum$<async_fn_debug_awaitee_field::foo::async_fn_env$0> >\",\n+\n+fn main() {\n+    let _fn = async_fn_test();\n+}"}, {"sha": "2436c36e6ebfb61788beff8109a64f39ba4e8e4f", "filename": "src/test/run-make/native-link-modifier-whole-archive/native_lib_in_src.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,6 +1,4 @@\n #![feature(native_link_modifiers_bundle)]\n-#![feature(native_link_modifiers_whole_archive)]\n-#![feature(native_link_modifiers)]\n \n use std::io::Write;\n "}, {"sha": "e185c4aec12b0603acd1035f05b9989ae99bd63a", "filename": "src/test/run-make/raw-dylib-c/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,4 +1,4 @@\n-#![feature(raw_dylib, native_link_modifiers, native_link_modifiers_verbatim)]\n+#![feature(raw_dylib, native_link_modifiers_verbatim)]\n \n #[link(name = \"extern_1.dll\", kind = \"raw-dylib\", modifiers = \"+verbatim\")]\n extern {"}, {"sha": "258b8cd35c777056a75af3eb6bbb73d4b69df7ae", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types_extended.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,6 @@\n+#![feature(generic_associated_types)]\n+\n+// This feature doesn't *currently* fire on any specific code; it's just a\n+// behavior change. Future changes might.\n+#[rustc_error] //~ the\n+fn main() {}"}, {"sha": "6a5eba38cacc6e8d2442f1c7593b286c2d8e0b42", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types_extended.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types_extended.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+  --> $DIR/feature-gate-generic_associated_types_extended.rs:5:1\n+   |\n+LL | #[rustc_error]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2d00aa2a3cfcbb8fc48f30d3a16248480a53e9c6", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.rs?ref=a40c595695bff3bfb373a8a3355ae4bd4ea64608", "patch": "@@ -1,5 +0,0 @@\n-#[link(name = \"foo\", modifiers = \"\")]\n-//~^ ERROR: native link modifiers are experimental\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "20a2d6a26fa5787dc62f83a2539e7fcd2d65cd64", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers.stderr?ref=a40c595695bff3bfb373a8a3355ae4bd4ea64608", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: native link modifiers are experimental\n-  --> $DIR/feature-gate-native_link_modifiers.rs:1:22\n-   |\n-LL | #[link(name = \"foo\", modifiers = \"\")]\n-   |                      ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n-   = help: add `#![feature(native_link_modifiers)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fedee8123980e362d5d436ed56563ea2c943437d", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n #[link(name = \"foo\", modifiers = \"+as-needed\")]\n //~^ ERROR: `#[link(modifiers=\"as-needed\")]` is unstable\n extern \"C\" {}"}, {"sha": "96750aa6e808aa1b8e01de227dd4286840ea753a", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[link(modifiers=\"as-needed\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:4:34\n+  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+as-needed\")]\n    |                                  ^^^^^^^^^^^^"}, {"sha": "e229564950fcfaee2a6cbf7d04c46cebb622179a", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-2.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,7 +1,6 @@\n // Test native_link_modifiers_bundle don't need static-nobundle\n // check-pass\n \n-#![feature(native_link_modifiers)]\n #![feature(native_link_modifiers_bundle)]\n \n #[link(name = \"foo\", kind = \"static\", modifiers = \"-bundle\")]"}, {"sha": "900605c3b375b6858e6ffbcc2010956935537089", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,2 +1,2 @@\n-error: linking modifiers are currently unstable, the `-Z unstable-options` flag must also be passed to use it\n+error: bundle linking modifier is currently unstable and only accepted on the nightly compiler\n "}, {"sha": "c3c3cff17c403494578d4604c71844185ab22291", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n #[link(name = \"foo\", modifiers = \"+bundle\")]\n //~^ ERROR: `#[link(modifiers=\"bundle\")]` is unstable\n extern \"C\" {}"}, {"sha": "984b90d9b6c2e38c2b07395776ec0625cead2b92", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[link(modifiers=\"bundle\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:4:34\n+  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+bundle\")]\n    |                                  ^^^^^^^^^"}, {"sha": "57527be1112cb55115750e194e89bea8534882bf", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,6 +1,3 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n #[link(name = \"foo\", modifiers = \"+verbatim\")]\n //~^ ERROR: `#[link(modifiers=\"verbatim\")]` is unstable\n extern \"C\" {}"}, {"sha": "5c64c0d21bdb418d7acf95a016c35b6ace8046a8", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[link(modifiers=\"verbatim\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_verbatim.rs:4:34\n+  --> $DIR/feature-gate-native_link_modifiers_verbatim.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+verbatim\")]\n    |                                  ^^^^^^^^^^^"}, {"sha": "ca801e59114328e2f2b4af24d314dec95384fca4", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_whole_archive.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.rs?ref=a40c595695bff3bfb373a8a3355ae4bd4ea64608", "patch": "@@ -1,8 +0,0 @@\n-#![allow(incomplete_features)]\n-#![feature(native_link_modifiers)]\n-\n-#[link(name = \"foo\", modifiers = \"+whole-archive\")]\n-//~^ ERROR: `#[link(modifiers=\"whole-archive\")]` is unstable\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "cacaa789ecb799205be0b72c6f3fc41d85333293", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_whole_archive.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40c595695bff3bfb373a8a3355ae4bd4ea64608/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_whole_archive.stderr?ref=a40c595695bff3bfb373a8a3355ae4bd4ea64608", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `#[link(modifiers=\"whole-archive\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_whole_archive.rs:4:34\n-   |\n-LL | #[link(name = \"foo\", modifiers = \"+whole-archive\")]\n-   |                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n-   = help: add `#![feature(native_link_modifiers_whole_archive)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3da7794b3d2c0352f504612541e6dd3f52270351", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,12 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/lending_iterator.rs:14:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n+...\n+LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "c5588b0912ba80bc988249f6bb8249fc2a88e2b9", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,26 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/lending_iterator.rs:14:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n+...\n+LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n+\n+error[E0311]: the parameter type `Self` may not live long enough\n+  --> $DIR/lending_iterator.rs:35:9\n+   |\n+LL |         <B as FromLendingIterator<A>>::from_iter(self)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/lending_iterator.rs:10:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |                                             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "df11ab21249860222c780471d4654dd57420c210", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,40 @@\n+// revisions: base extended\n+//[base] check-fail\n+//[extended] check-pass\n+\n+#![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n+\n+pub trait FromLendingIterator<A>: Sized {\n+    fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+}\n+\n+impl<A> FromLendingIterator<A> for Vec<A> {\n+    fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+        //[base]~^ impl has stricter\n+        let mut v = vec![];\n+        while let Some(item) = iter.next() {\n+            v.push(item);\n+        }\n+        v\n+    }\n+}\n+\n+pub trait LendingIterator {\n+    type Item<'z>\n+    where\n+        Self: 'z;\n+    fn next(&mut self) -> Option<Self::Item<'_>>;\n+\n+    fn collect<A, B: FromLendingIterator<A>>(self) -> B\n+    where\n+        Self: Sized,\n+        Self: for<'q> LendingIterator<Item<'q> = A>,\n+    {\n+        <B as FromLendingIterator<A>>::from_iter(self)\n+        //[base]~^ the parameter type\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6c2a624ca11d5daec669c15c95ec9eed3dcbb550", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator_2.base.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.base.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,12 @@\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/lending_iterator_2.rs:14:45\n+   |\n+LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n+...\n+LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "3c4a2184db90c7624a63f08f54ecae47608a54b0", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator_2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator_2.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,31 @@\n+// revisions: base extended\n+//[base] check-fail\n+//[extended] check-pass\n+\n+#![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n+\n+pub trait FromLendingIterator<A>: Sized {\n+    fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n+}\n+\n+impl<A> FromLendingIterator<A> for Vec<A> {\n+    fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n+        //[base]~^ impl has stricter\n+        let mut v = vec![];\n+        while let Some(item) = iter.next() {\n+            v.push(item);\n+        }\n+        v\n+    }\n+}\n+\n+pub trait LendingIterator {\n+    type Item<'a>\n+    where\n+        Self: 'a;\n+    fn next(&mut self) -> Option<Self::Item<'_>>;\n+}\n+\n+fn main() {}"}, {"sha": "b153ef94626a39e13469cc72b8fa184c724aa5b4", "filename": "src/test/ui/native-library-link-flags/mix-bundle-and-whole-archive-link-attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -2,9 +2,7 @@\n // build-fail\n // error-pattern: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n \n-#![feature(native_link_modifiers)]\n #![feature(native_link_modifiers_bundle)]\n-#![feature(native_link_modifiers_whole_archive)]\n \n #[link(name = \"mylib\", kind = \"static\", modifiers = \"+bundle,+whole-archive\")]\n extern \"C\" { }"}, {"sha": "333f6786b0fba41e705175683615bfd8f0dbb0f0", "filename": "src/test/ui/native-library-link-flags/modifiers-override-2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags:-lstatic:+whole-archive,-whole-archive=foo\n+\n+fn main() {}"}, {"sha": "9200d7bfb0ce3427dc4f6c5f68d42989dc7935d5", "filename": "src/test/ui/native-library-link-flags/modifiers-override-2.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,2 @@\n+error: duplicating linking modifier is currently unstable and only accepted on the nightly compiler\n+"}, {"sha": "f6d770559e6e03e8c6b9636c5aad66bfd908dd06", "filename": "src/test/ui/native-library-link-flags/modifiers-override.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags:-ldylib:+as-needed=foo -lstatic=bar -Zunstable-options\n+\n+#![feature(native_link_modifiers_bundle)]\n+\n+#[link(name = \"foo\")]\n+#[link( //~ ERROR multiple `modifiers` arguments in a single `#[link]` attribute\n+    name = \"bar\",\n+    kind = \"static\",\n+    modifiers = \"+whole-archive,-whole-archive\",\n+    //~^ ERROR same modifier is used multiple times in a single `modifiers` argument\n+    modifiers = \"+bundle\"\n+)]\n+extern \"C\" {}\n+//~^ ERROR overriding linking modifiers from command line is not supported\n+//~| ERROR overriding linking modifiers from command line is not supported\n+\n+fn main() {}"}, {"sha": "8644d2382d2ba915aca051b0265a69f4adccd24a", "filename": "src/test/ui/native-library-link-flags/modifiers-override.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -0,0 +1,32 @@\n+error: same modifier is used multiple times in a single `modifiers` argument\n+  --> $DIR/modifiers-override.rs:9:5\n+   |\n+LL |     modifiers = \"+whole-archive,-whole-archive\",\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: multiple `modifiers` arguments in a single `#[link]` attribute\n+  --> $DIR/modifiers-override.rs:6:1\n+   |\n+LL | / #[link(\n+LL | |     name = \"bar\",\n+LL | |     kind = \"static\",\n+LL | |     modifiers = \"+whole-archive,-whole-archive\",\n+LL | |\n+LL | |     modifiers = \"+bundle\"\n+LL | | )]\n+   | |__^\n+\n+error: overriding linking modifiers from command line is not supported\n+  --> $DIR/modifiers-override.rs:13:1\n+   |\n+LL | extern \"C\" {}\n+   | ^^^^^^^^^^^^^\n+\n+error: overriding linking modifiers from command line is not supported\n+  --> $DIR/modifiers-override.rs:13:1\n+   |\n+LL | extern \"C\" {}\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a92097e1d24cac28e29bfea5b7307d8e226ae845", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39ac5ae175e0f9f910b1800a430b488ec0f2105/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=a39ac5ae175e0f9f910b1800a430b488ec0f2105", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for Regex {\n \n #[allow(clippy::cast_possible_truncation)] // truncation very unlikely here\n #[must_use]\n-fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u16) -> Span {\n+fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u8) -> Span {\n     let offset = u32::from(offset);\n     let end = base.lo() + BytePos(u32::try_from(c.end.offset).expect(\"offset too large\") + offset);\n     let start = base.lo() + BytePos(u32::try_from(c.start.offset).expect(\"offset too large\") + offset);"}]}