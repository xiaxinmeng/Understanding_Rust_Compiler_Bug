{"sha": "55e5a1d20668f4384b647842007095dbf5868851", "node_id": "C_kwDOAAsO6NoAKDU1ZTVhMWQyMDY2OGY0Mzg0YjY0Nzg0MjAwNzA5NWRiZjU4Njg4NTE", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-04-21T21:04:22Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-04-21T21:07:41Z"}, "message": "Create \"AppendConstMessage\" enum\n\nThis patch creates an enum to replace a nested `Option`.", "tree": {"sha": "02b75851c4bb4500c7c56dbe3379fb07c11bd367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b75851c4bb4500c7c56dbe3379fb07c11bd367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55e5a1d20668f4384b647842007095dbf5868851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55e5a1d20668f4384b647842007095dbf5868851", "html_url": "https://github.com/rust-lang/rust/commit/55e5a1d20668f4384b647842007095dbf5868851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55e5a1d20668f4384b647842007095dbf5868851/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d40d2a4073b17a14f364dc6638fea2faecbc2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d40d2a4073b17a14f364dc6638fea2faecbc2b", "html_url": "https://github.com/rust-lang/rust/commit/d0d40d2a4073b17a14f364dc6638fea2faecbc2b"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "4cc986774b231c58fc7b96b5dd31016fbc12e632", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/55e5a1d20668f4384b647842007095dbf5868851/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e5a1d20668f4384b647842007095dbf5868851/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=55e5a1d20668f4384b647842007095dbf5868851", "patch": "@@ -15,8 +15,7 @@ use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::QueryNormalizeExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n use crate::traits::NormalizeExt;\n-use on_unimplemented::OnUnimplementedNote;\n-use on_unimplemented::TypeErrCtxtExt as _;\n+use on_unimplemented::{AppendConstMessage, OnUnimplementedNote, TypeErrCtxtExt as _};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n@@ -707,7 +706,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                      conversion on the error value using the `From` trait\"\n                                         .to_owned(),\n                                 ),\n-                                Some(None),\n+                                Some(AppendConstMessage::Default),\n                             )\n                         } else {\n                             (message, note, append_const_msg)\n@@ -1272,7 +1271,7 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_predicate: &ty::PolyTraitPredicate<'tcx>,\n         message: Option<String>,\n         predicate_is_const: bool,\n-        append_const_msg: Option<Option<rustc_span::Symbol>>,\n+        append_const_msg: Option<AppendConstMessage>,\n         post_message: String,\n     ) -> String;\n \n@@ -2682,7 +2681,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_predicate: &ty::PolyTraitPredicate<'tcx>,\n         message: Option<String>,\n         predicate_is_const: bool,\n-        append_const_msg: Option<Option<rustc_span::Symbol>>,\n+        append_const_msg: Option<AppendConstMessage>,\n         post_message: String,\n     ) -> String {\n         message\n@@ -2691,17 +2690,19 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     // do nothing if predicate is not const\n                     (false, _) => Some(cannot_do_this),\n                     // suggested using default post message\n-                    (true, Some(None)) => Some(format!(\"{cannot_do_this} in const contexts\")),\n+                    (true, Some(AppendConstMessage::Default)) => {\n+                        Some(format!(\"{cannot_do_this} in const contexts\"))\n+                    }\n                     // overridden post message\n-                    (true, Some(Some(post_message))) => {\n-                        Some(format!(\"{cannot_do_this}{post_message}\"))\n+                    (true, Some(AppendConstMessage::Custom(custom_msg))) => {\n+                        Some(format!(\"{cannot_do_this}{custom_msg}\"))\n                     }\n                     // fallback to generic message\n                     (true, None) => None,\n                 }\n             })\n             .unwrap_or_else(|| {\n-                format!(\"the trait bound `{}` is not satisfied{}\", trait_predicate, post_message,)\n+                format!(\"the trait bound `{}` is not satisfied{}\", trait_predicate, post_message)\n             })\n     }\n "}, {"sha": "88525e1b720af580315aa982d4dd1848a579ab22", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/55e5a1d20668f4384b647842007095dbf5868851/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e5a1d20668f4384b647842007095dbf5868851/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=55e5a1d20668f4384b647842007095dbf5868851", "patch": "@@ -327,7 +327,7 @@ pub struct OnUnimplementedDirective {\n     pub label: Option<OnUnimplementedFormatString>,\n     pub note: Option<OnUnimplementedFormatString>,\n     pub parent_label: Option<OnUnimplementedFormatString>,\n-    pub append_const_msg: Option<Option<Symbol>>,\n+    pub append_const_msg: Option<AppendConstMessage>,\n }\n \n /// For the `#[rustc_on_unimplemented]` attribute\n@@ -337,12 +337,21 @@ pub struct OnUnimplementedNote {\n     pub label: Option<String>,\n     pub note: Option<String>,\n     pub parent_label: Option<String>,\n-    /// Append a message for `~const Trait` errors. `None` means not requested and\n-    /// should fallback to a generic message, `Some(None)` suggests using the default\n-    /// appended message, `Some(Some(s))` suggests use the `s` message instead of the\n-    /// default one..\n-    /// FIXME(bryangarza): Change this to an enum with the 3 variants described above.\n-    pub append_const_msg: Option<Option<Symbol>>,\n+    // If none, should fall back to a generic message\n+    pub append_const_msg: Option<AppendConstMessage>,\n+}\n+\n+/// Append a message for `~const Trait` errors.\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub enum AppendConstMessage {\n+    Default,\n+    Custom(Symbol),\n+}\n+\n+impl Default for AppendConstMessage {\n+    fn default() -> Self {\n+        AppendConstMessage::Default\n+    }\n }\n \n impl<'tcx> OnUnimplementedDirective {\n@@ -420,10 +429,10 @@ impl<'tcx> OnUnimplementedDirective {\n                 }\n             } else if item.has_name(sym::append_const_msg) && append_const_msg.is_none() {\n                 if let Some(msg) = item.value_str() {\n-                    append_const_msg = Some(Some(msg));\n+                    append_const_msg = Some(AppendConstMessage::Custom(msg));\n                     continue;\n                 } else if item.is_word() {\n-                    append_const_msg = Some(None);\n+                    append_const_msg = Some(AppendConstMessage::Default);\n                     continue;\n                 }\n             }"}]}