{"sha": "7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNjdhMWI4NzFjNDFmYjQ5OGVlZmZjYWRmYTMzZjFmYTRjMzU3NzQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-28T17:16:09Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-28T17:16:09Z"}, "message": "Replace write-to-vec hack by introducing a display renderer for allocations", "tree": {"sha": "aec23b60b25c497d74a9f677acb5447a7d276a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec23b60b25c497d74a9f677acb5447a7d276a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "html_url": "https://github.com/rust-lang/rust/commit/7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d67a1b871c41fb498eeffcadfa33f1fa4c35774/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e96bb459377896a85be4a192e16feca4c1d4aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e96bb459377896a85be4a192e16feca4c1d4aaf", "html_url": "https://github.com/rust-lang/rust/commit/5e96bb459377896a85be4a192e16feca4c1d4aaf"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "a9e6e324eb23a7a26b126741aec7db673f7c6bd0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d67a1b871c41fb498eeffcadfa33f1fa4c35774/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d67a1b871c41fb498eeffcadfa33f1fa4c35774/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "patch": "@@ -741,13 +741,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n             for &(_, target_id) in alloc.relocations().values() {\n                 allocs_to_print.push_back(target_id);\n             }\n-            // This vec dance is necessary, because there is no trait\n-            // that supports writing to files and to `std::fmt::Formatter` at the\n-            // same time.\n-            let mut v = Vec::new();\n-            pretty::write_allocation(tcx, alloc, &mut v).unwrap();\n-            let s = String::from_utf8(v).unwrap();\n-            fmt.write_str(&s)\n+            write!(fmt, \"{}\", pretty::display_allocation(tcx, alloc))\n         }\n \n         let mut allocs_to_print: VecDeque<_> = self.allocs.iter().copied().collect();"}, {"sha": "bed8672d911ffba89a6630cb1e6e192325e9c3cf", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7d67a1b871c41fb498eeffcadfa33f1fa4c35774/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d67a1b871c41fb498eeffcadfa33f1fa4c35774/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "patch": "@@ -588,7 +588,7 @@ pub fn write_allocations<'tcx>(\n                         todo.push(id);\n                     }\n                 }\n-                write_allocation(tcx, alloc, w)\n+                write!(w, \"{}\", display_allocation(tcx, alloc))\n             };\n         write!(w, \"\\n{}\", id)?;\n         match tcx.get_global_alloc(id) {\n@@ -640,24 +640,36 @@ pub fn write_allocations<'tcx>(\n /// After the hex dump, an ascii dump follows, replacing all unprintable characters (control\n /// characters or characters whose value is larger than 127) with a `.`\n /// This also prints relocations adequately.\n-pub fn write_allocation<Tag: Copy + Debug, Extra>(\n+pub fn display_allocation<Tag: Copy + Debug, Extra>(\n     tcx: TyCtxt<'tcx>,\n-    alloc: &Allocation<Tag, Extra>,\n-    w: &mut dyn Write,\n-) -> io::Result<()> {\n-    write!(w, \"size: {}, align: {})\", alloc.size.bytes(), alloc.align.bytes())?;\n-    if alloc.size == Size::ZERO {\n-        // We are done.\n-        return write!(w, \" {{}}\");\n+    alloc: &'a Allocation<Tag, Extra>,\n+) -> RenderAllocation<'a, 'tcx, Tag, Extra> {\n+    RenderAllocation { tcx, alloc }\n+}\n+\n+#[doc(hidden)]\n+pub struct RenderAllocation<'a, 'tcx, Tag, Extra> {\n+    tcx: TyCtxt<'tcx>,\n+    alloc: &'a Allocation<Tag, Extra>,\n+}\n+\n+impl<Tag: Copy + Debug, Extra> std::fmt::Display for RenderAllocation<'a, 'tcx, Tag, Extra> {\n+    fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let RenderAllocation { tcx, alloc } = *self;\n+        write!(w, \"size: {}, align: {})\", alloc.size.bytes(), alloc.align.bytes())?;\n+        if alloc.size == Size::ZERO {\n+            // We are done.\n+            return write!(w, \" {{}}\");\n+        }\n+        // Write allocation bytes.\n+        writeln!(w, \" {{\")?;\n+        write_allocation_bytes(tcx, alloc, w, \"    \")?;\n+        write!(w, \"}}\")?;\n+        Ok(())\n     }\n-    // Write allocation bytes.\n-    writeln!(w, \" {{\")?;\n-    write_allocation_bytes(tcx, alloc, w, \"    \")?;\n-    write!(w, \"}}\")?;\n-    Ok(())\n }\n \n-fn write_allocation_endline(w: &mut dyn Write, ascii: &str) -> io::Result<()> {\n+fn write_allocation_endline(w: &mut dyn std::fmt::Write, ascii: &str) -> std::fmt::Result {\n     for _ in 0..(BYTES_PER_LINE - ascii.chars().count()) {\n         write!(w, \"   \")?;\n     }\n@@ -669,12 +681,12 @@ const BYTES_PER_LINE: usize = 16;\n \n /// Prints the line start address and returns the new line start address.\n fn write_allocation_newline(\n-    w: &mut dyn Write,\n+    w: &mut dyn std::fmt::Write,\n     mut line_start: Size,\n     ascii: &str,\n     pos_width: usize,\n     prefix: &str,\n-) -> io::Result<Size> {\n+) -> Result<Size, std::fmt::Error> {\n     write_allocation_endline(w, ascii)?;\n     line_start += Size::from_bytes(BYTES_PER_LINE);\n     write!(w, \"{}0x{:02$x} \u2502 \", prefix, line_start.bytes(), pos_width)?;\n@@ -687,9 +699,9 @@ fn write_allocation_newline(\n fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n     tcx: TyCtxt<'tcx>,\n     alloc: &Allocation<Tag, Extra>,\n-    w: &mut dyn Write,\n+    w: &mut dyn std::fmt::Write,\n     prefix: &str,\n-) -> io::Result<()> {\n+) -> std::fmt::Result {\n     let num_lines = alloc.size.bytes_usize().saturating_sub(BYTES_PER_LINE);\n     // Number of chars needed to represent all line numbers.\n     let pos_width = format!(\"{:x}\", alloc.size.bytes()).len();"}]}