{"sha": "9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNmY5ZDBiYzQ2N2VmM2ZjMmYzYzRiYjJkZDUzNTI4YzQ1NGE4ZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-18T06:00:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-18T06:00:57Z"}, "message": "rustc: Rename NodeLocal to NodeBinding", "tree": {"sha": "213d7c0f76d8b93abb7d0edd03e3e71404cec872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213d7c0f76d8b93abb7d0edd03e3e71404cec872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "html_url": "https://github.com/rust-lang/rust/commit/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ccba995de202fb9d9a8d795d2770fb2d199db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ccba995de202fb9d9a8d795d2770fb2d199db0", "html_url": "https://github.com/rust-lang/rust/commit/59ccba995de202fb9d9a8d795d2770fb2d199db0"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "7b7d9adec05eded99e1a1887f600b858d917df68", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -138,7 +138,7 @@ impl<'hir> Visitor<'hir> for NodeCollector<'hir> {\n \n     fn visit_pat(&mut self, pat: &'hir Pat) {\n         let node = if let PatKind::Binding(..) = pat.node {\n-            NodeLocal(pat)\n+            NodeBinding(pat)\n         } else {\n             NodePat(pat)\n         };"}, {"sha": "1cf4e799ca769d94320e7c6cbac2eba51aaea7a6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -53,7 +53,7 @@ pub enum Node<'hir> {\n     NodeStmt(&'hir Stmt),\n     NodeTy(&'hir Ty),\n     NodeTraitRef(&'hir TraitRef),\n-    NodeLocal(&'hir Pat),\n+    NodeBinding(&'hir Pat),\n     NodePat(&'hir Pat),\n     NodeBlock(&'hir Block),\n \n@@ -83,7 +83,7 @@ enum MapEntry<'hir> {\n     EntryStmt(NodeId, &'hir Stmt),\n     EntryTy(NodeId, &'hir Ty),\n     EntryTraitRef(NodeId, &'hir TraitRef),\n-    EntryLocal(NodeId, &'hir Pat),\n+    EntryBinding(NodeId, &'hir Pat),\n     EntryPat(NodeId, &'hir Pat),\n     EntryBlock(NodeId, &'hir Block),\n     EntryStructCtor(NodeId, &'hir VariantData),\n@@ -114,7 +114,7 @@ impl<'hir> MapEntry<'hir> {\n             NodeStmt(n) => EntryStmt(p, n),\n             NodeTy(n) => EntryTy(p, n),\n             NodeTraitRef(n) => EntryTraitRef(p, n),\n-            NodeLocal(n) => EntryLocal(p, n),\n+            NodeBinding(n) => EntryBinding(p, n),\n             NodePat(n) => EntryPat(p, n),\n             NodeBlock(n) => EntryBlock(p, n),\n             NodeStructCtor(n) => EntryStructCtor(p, n),\n@@ -136,7 +136,7 @@ impl<'hir> MapEntry<'hir> {\n             EntryStmt(id, _) => id,\n             EntryTy(id, _) => id,\n             EntryTraitRef(id, _) => id,\n-            EntryLocal(id, _) => id,\n+            EntryBinding(id, _) => id,\n             EntryPat(id, _) => id,\n             EntryBlock(id, _) => id,\n             EntryStructCtor(id, _) => id,\n@@ -161,7 +161,7 @@ impl<'hir> MapEntry<'hir> {\n             EntryStmt(_, n) => NodeStmt(n),\n             EntryTy(_, n) => NodeTy(n),\n             EntryTraitRef(_, n) => NodeTraitRef(n),\n-            EntryLocal(_, n) => NodeLocal(n),\n+            EntryBinding(_, n) => NodeBinding(n),\n             EntryPat(_, n) => NodePat(n),\n             EntryBlock(_, n) => NodeBlock(n),\n             EntryStructCtor(_, n) => NodeStructCtor(n),\n@@ -319,7 +319,7 @@ impl<'hir> Map<'hir> {\n                 EntryStmt(p, _) |\n                 EntryTy(p, _) |\n                 EntryTraitRef(p, _) |\n-                EntryLocal(p, _) |\n+                EntryBinding(p, _) |\n                 EntryPat(p, _) |\n                 EntryBlock(p, _) |\n                 EntryStructCtor(p, _) |\n@@ -589,7 +589,7 @@ impl<'hir> Map<'hir> {\n     /// immediate parent is an item or a closure.\n     pub fn is_argument(&self, id: NodeId) -> bool {\n         match self.find(id) {\n-            Some(NodeLocal(_)) => (),\n+            Some(NodeBinding(_)) => (),\n             _ => return false,\n         }\n         match self.find(self.get_parent_node(id)) {\n@@ -856,7 +856,7 @@ impl<'hir> Map<'hir> {\n             NodeField(f) => f.name,\n             NodeLifetime(lt) => lt.name,\n             NodeTyParam(tp) => tp.name,\n-            NodeLocal(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n+            NodeBinding(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n             NodeStructCtor(_) => self.name(self.get_parent(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }\n@@ -915,7 +915,7 @@ impl<'hir> Map<'hir> {\n             Some(EntryStmt(_, stmt)) => stmt.span,\n             Some(EntryTy(_, ty)) => ty.span,\n             Some(EntryTraitRef(_, tr)) => tr.path.span,\n-            Some(EntryLocal(_, pat)) => pat.span,\n+            Some(EntryBinding(_, pat)) => pat.span,\n             Some(EntryPat(_, pat)) => pat.span,\n             Some(EntryBlock(_, block)) => block.span,\n             Some(EntryStructCtor(_, _)) => self.expect_item(self.get_parent(id)).span,\n@@ -1112,7 +1112,7 @@ impl<'a> print::State<'a> {\n             NodeStmt(a)        => self.print_stmt(&a),\n             NodeTy(a)          => self.print_type(&a),\n             NodeTraitRef(a)    => self.print_trait_ref(&a),\n-            NodeLocal(a)       |\n+            NodeBinding(a)       |\n             NodePat(a)         => self.print_pat(&a),\n             NodeBlock(a)       => {\n                 use syntax::print::pprust::PrintState;\n@@ -1223,7 +1223,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeTraitRef(_)) => {\n             format!(\"trait_ref {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n-        Some(NodeLocal(_)) => {\n+        Some(NodeBinding(_)) => {\n             format!(\"local {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n         Some(NodePat(_)) => {"}, {"sha": "8cd023b8e638b87a502aa4b0e6eb4cd0e9c92f0d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -332,7 +332,7 @@ impl MutabilityCategory {\n \n     fn from_local(tcx: TyCtxt, tables: &ty::TypeckTables, id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.hir.get(id) {\n-            hir_map::NodeLocal(p) => match p.node {\n+            hir_map::NodeBinding(p) => match p.node {\n                 PatKind::Binding(..) => {\n                     let bm = *tables.pat_binding_modes()\n                                     .get(p.hir_id)"}, {"sha": "7e402075fcfea309e5ce8c6f12d722b8afb50714", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -1971,7 +1971,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn local_var_name_str(self, id: NodeId) -> InternedString {\n         match self.hir.find(id) {\n-            Some(hir_map::NodeLocal(pat)) => {\n+            Some(hir_map::NodeBinding(pat)) => {\n                 match pat.node {\n                     hir::PatKind::Binding(_, _, ref path1, _) => path1.node.as_str(),\n                     _ => {"}, {"sha": "0d81395a2a2bd3023527ade96a2ea826f6099f2e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -916,7 +916,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n     fn local_binding_mode(&self, node_id: ast::NodeId) -> ty::BindingMode {\n         let pat = match self.tcx.hir.get(node_id) {\n-            hir_map::Node::NodeLocal(pat) => pat,\n+            hir_map::Node::NodeBinding(pat) => pat,\n             node => bug!(\"bad node for local: {:?}\", node)\n         };\n "}, {"sha": "d7a295a1c3a2432df346a2b1d1acd7829fdec24f", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -382,7 +382,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 debug_name: keywords::Invalid.name(),\n                 by_ref,\n             };\n-            if let Some(hir::map::NodeLocal(pat)) = tcx.hir.find(var_node_id) {\n+            if let Some(hir::map::NodeBinding(pat)) = tcx.hir.find(var_node_id) {\n                 if let hir::PatKind::Binding(_, _, ref ident, _) = pat.node {\n                     decl.debug_name = ident.node;\n                 }"}, {"sha": "0c0a9e4ba90a4dfb1d7913b6b81d47d2287fc08a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=9b6f9d0bc467ef3fc2f3c4bb2dd53528c454a8fa", "patch": "@@ -591,7 +591,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 self.tables.qpath_def(qpath, hir_id)\n             }\n \n-            Node::NodeLocal(&hir::Pat { node: hir::PatKind::Binding(_, def_id, ..), .. }) => {\n+            Node::NodeBinding(&hir::Pat { node: hir::PatKind::Binding(_, def_id, ..), .. }) => {\n                 HirDef::Local(def_id)\n             }\n "}]}