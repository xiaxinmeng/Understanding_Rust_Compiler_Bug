{"sha": "f6484fa9b59585cf0609aa6f047015270f6e1d19", "node_id": "C_kwDOAAsO6NoAKGY2NDg0ZmE5YjU5NTg1Y2YwNjA5YWE2ZjA0NzAxNTI3MGY2ZTFkMTk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-28T17:34:24Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-28T18:38:36Z"}, "message": "Avoid unnecessary string interning for const_str", "tree": {"sha": "80aa1a90f9ab2ca00f528ba58b400d9daa416663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80aa1a90f9ab2ca00f528ba58b400d9daa416663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6484fa9b59585cf0609aa6f047015270f6e1d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6484fa9b59585cf0609aa6f047015270f6e1d19", "html_url": "https://github.com/rust-lang/rust/commit/f6484fa9b59585cf0609aa6f047015270f6e1d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6484fa9b59585cf0609aa6f047015270f6e1d19/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e93749ab00539a11e90426ea87382c433530a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e93749ab00539a11e90426ea87382c433530a8", "html_url": "https://github.com/rust-lang/rust/commit/94e93749ab00539a11e90426ea87382c433530a8"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "d156f87443497b5d7a909f01991298e4a4b05f8b", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -12,7 +12,6 @@ use rustc_middle::mir::Mutability;\n use rustc_middle::ty::ScalarInt;\n use rustc_middle::ty::layout::{TyAndLayout, LayoutOf};\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n-use rustc_span::Symbol;\n use rustc_target::abi::{self, HasDataLayout, Pointer, Size};\n \n use crate::consts::const_alloc_to_gcc;\n@@ -125,12 +124,15 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.context.new_rvalue_from_double(typ, val)\n     }\n \n-    fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let s_str = s.as_str();\n-        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n-            self.global_string(s_str)\n-        });\n-        let len = s_str.len();\n+    fn const_str(&self, s: &str) -> (RValue<'gcc>, RValue<'gcc>) {\n+        let str_global = *self\n+            .const_str_cache\n+            .borrow_mut()\n+            .raw_entry_mut()\n+            .from_key(s)\n+            .or_insert_with(|| (s.to_owned(), self.global_string(s)))\n+            .1;\n+        let len = s.len();\n         let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self, true)),\n         );"}, {"sha": "478f6d893dd0f347210b4297139f2087f99cdabf", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, TyAndLayout, LayoutOfHelpers};\n use rustc_session::Session;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n@@ -101,7 +101,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub global_lvalues: RefCell<FxHashMap<RValue<'gcc>, LValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<String, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,"}, {"sha": "399830de84cb951b68f9f85ce8204e84d2063c02", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -6,7 +6,14 @@\n  * TODO(antoyo): remove the patches.\n  */\n \n-#![feature(rustc_private, decl_macro, associated_type_bounds, never_type, trusted_len)]\n+#![feature(\n+    rustc_private,\n+    decl_macro,\n+    associated_type_bounds,\n+    never_type,\n+    trusted_len,\n+    hash_raw_entry\n+)]\n #![allow(broken_intra_doc_links)]\n #![recursion_limit=\"256\"]\n #![warn(rust_2018_idioms)]"}, {"sha": "8a9902eed876e1be8440a8ef8bf17e5a06d91674", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::bug;\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_middle::ty::ScalarInt;\n-use rustc_span::symbol::Symbol;\n use rustc_target::abi::{self, AddressSpace, HasDataLayout, Pointer, Size};\n \n use libc::{c_char, c_uint};\n@@ -181,22 +180,27 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMConstReal(t, val) }\n     }\n \n-    fn const_str(&self, s: Symbol) -> (&'ll Value, &'ll Value) {\n-        let s_str = s.as_str();\n-        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n-            let sc = self.const_bytes(s_str.as_bytes());\n-            let sym = self.generate_local_symbol_name(\"str\");\n-            let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n-                bug!(\"symbol `{}` is already defined\", sym);\n-            });\n-            unsafe {\n-                llvm::LLVMSetInitializer(g, sc);\n-                llvm::LLVMSetGlobalConstant(g, True);\n-                llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n-            }\n-            g\n-        });\n-        let len = s_str.len();\n+    fn const_str(&self, s: &str) -> (&'ll Value, &'ll Value) {\n+        let str_global = *self\n+            .const_str_cache\n+            .borrow_mut()\n+            .raw_entry_mut()\n+            .from_key(s)\n+            .or_insert_with(|| {\n+                let sc = self.const_bytes(s.as_bytes());\n+                let sym = self.generate_local_symbol_name(\"str\");\n+                let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n+                    bug!(\"symbol `{}` is already defined\", sym);\n+                });\n+                unsafe {\n+                    llvm::LLVMSetInitializer(g, sc);\n+                    llvm::LLVMSetGlobalConstant(g, True);\n+                    llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n+                }\n+                (s.to_owned(), g)\n+            })\n+            .1;\n+        let len = s.len();\n         let cs = consts::ptrcast(\n             str_global,\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).llvm_type(self)),"}, {"sha": "55e4a4a7255b585aa181091573de1de4e287fc95", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -26,7 +26,6 @@ use rustc_session::config::{BranchProtection, CFGuard, CFProtection};\n use rustc_session::config::{CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n use rustc_target::abi::{\n     call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx,\n };\n@@ -56,7 +55,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_str_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n+    pub const_str_cache: RefCell<FxHashMap<String, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     ///"}, {"sha": "a7dd8e16d28eb7195ecccdfda308a4f708388d2a", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(hash_raw_entry)]\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(extern_types)]"}, {"sha": "96a859992e980ab27ab642979aed1af45a037e5f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -481,8 +481,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (LangItem::PanicBoundsCheck, vec![index, len, location])\n             }\n             _ => {\n-                let msg_str = Symbol::intern(msg.description());\n-                let msg = bx.const_str(msg_str);\n+                let msg = bx.const_str(msg.description());\n                 // It's `pub fn panic(expr: &str)`, with the wide reference being passed\n                 // as two arguments, and `#[track_caller]` adds an implicit third argument.\n                 (LangItem::Panic, vec![msg.0, msg.1, location])\n@@ -563,7 +562,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     })\n                 });\n-                let msg = bx.const_str(Symbol::intern(&msg_str));\n+                let msg = bx.const_str(&msg_str);\n                 let location = self.get_caller_location(bx, source_info).immediate();\n \n                 // Obtain the panic entry point."}, {"sha": "fdc7a30e841ed1b7e4d64ff077a3fd6e1b26baf4", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6484fa9b59585cf0609aa6f047015270f6e1d19/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=f6484fa9b59585cf0609aa6f047015270f6e1d19", "patch": "@@ -2,7 +2,6 @@ use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n use rustc_middle::mir::interpret::{ConstAllocation, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_span::Symbol;\n use rustc_target::abi::{self, Size};\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n@@ -21,7 +20,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n-    fn const_str(&self, s: Symbol) -> (Self::Value, Self::Value);\n+    fn const_str(&self, s: &str) -> (Self::Value, Self::Value);\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n     fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;"}]}