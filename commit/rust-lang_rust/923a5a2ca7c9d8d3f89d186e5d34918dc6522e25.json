{"sha": "923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "node_id": "C_kwDOAAsO6NoAKDkyM2E1YTJjYTdjOWQ4ZDNmODlkMTg2ZTVkMzQ5MThkYzY1MjJlMjU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-06T00:09:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T00:09:30Z"}, "message": "Rollup merge of #109677 - dpaoliello:rawdylib, r=michaelwoerister,wesleywiser\n\nStabilize raw-dylib, link_ordinal, import_name_type and -Cdlltool\n\nThis stabilizes the `raw-dylib` feature (#58713) for all architectures (i.e., `x86` as it is already stable for all other architectures).\n\nChanges:\n* Permit the use of the `raw-dylib` link kind for x86, the `link_ordinal` attribute and the `import_name_type` key for the `link` attribute.\n* Mark the `raw_dylib` feature as stable.\n* Stabilized the `-Zdlltool` argument as `-Cdlltool`.\n* Note the path to `dlltool` if invoking it failed (we don't need to do this if `dlltool` returns an error since it prints its path in the error message).\n* Adds tests for `-Cdlltool`.\n* Adds tests for being unable to find the dlltool executable, and dlltool failing.\n* Fixes a bug where we were checking the exit code of dlltool to see if it failed, but dlltool always returns 0 (indicating success), so instead we need to check if anything was written to `stderr`.\n\nNOTE: As previously noted (https://github.com/rust-lang/rust/pull/104218#issuecomment-1315895618) using dlltool within rustc is temporary, but this is not the first time that Rust has added a temporary tool use and argument: https://github.com/rust-lang/rust/pull/104218#issuecomment-1318720482\n\nBig thanks to ``````@tbu-`````` for the first version of this PR (#104218)", "tree": {"sha": "e40751bbcb14895691b77cc4f17dc9ddffd28c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40751bbcb14895691b77cc4f17dc9ddffd28c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVZq6CRBK7hj4Ov3rIwAAx9IIAExMcgOAhTBRTqUk7NzkHjpb\nkM7sHVGPknaCHH7A2+OwveO+VNCNK6WHaU9KqJKUrn5pNHWRldNTLS7PY4Wd2yY7\nMcgUibvn2+sjkF+0wwZjtLILmyuFNM1ZNAkPWllEsD+AHfcV4nFx10+UBDPTLtN5\n/KcOChk/o6QBx/5oivrxEat364bgFRC8jJLGKWVbpPs+ZTBx9gpq/PQ7lovx307z\nLtaligrm6/LMzPMBo4WUTvu6Am/h1OtrhJFE0gmiKlVhJKRRQk1GU9RUUMGOZ5aP\nSgIn7E0YeLTFKTK56tJt66xCrKmq0SQDY/qB1FQFD5X1HnDgUJI0CCJOj9xfYu0=\n=k9hX\n-----END PGP SIGNATURE-----\n", "payload": "tree e40751bbcb14895691b77cc4f17dc9ddffd28c35\nparent f9a6b71580cd53dd4491d9bb6400f7ee841d9c22\nparent 1ece1ea48c0d9e4c8414abf872626f7a54747976\nauthor Yuki Okushi <jtitor@2k36.org> 1683331770 +0900\ncommitter GitHub <noreply@github.com> 1683331770 +0900\n\nRollup merge of #109677 - dpaoliello:rawdylib, r=michaelwoerister,wesleywiser\n\nStabilize raw-dylib, link_ordinal, import_name_type and -Cdlltool\n\nThis stabilizes the `raw-dylib` feature (#58713) for all architectures (i.e., `x86` as it is already stable for all other architectures).\n\nChanges:\n* Permit the use of the `raw-dylib` link kind for x86, the `link_ordinal` attribute and the `import_name_type` key for the `link` attribute.\n* Mark the `raw_dylib` feature as stable.\n* Stabilized the `-Zdlltool` argument as `-Cdlltool`.\n* Note the path to `dlltool` if invoking it failed (we don't need to do this if `dlltool` returns an error since it prints its path in the error message).\n* Adds tests for `-Cdlltool`.\n* Adds tests for being unable to find the dlltool executable, and dlltool failing.\n* Fixes a bug where we were checking the exit code of dlltool to see if it failed, but dlltool always returns 0 (indicating success), so instead we need to check if anything was written to `stderr`.\n\nNOTE: As previously noted (https://github.com/rust-lang/rust/pull/104218#issuecomment-1315895618) using dlltool within rustc is temporary, but this is not the first time that Rust has added a temporary tool use and argument: https://github.com/rust-lang/rust/pull/104218#issuecomment-1318720482\n\nBig thanks to ``````@tbu-`````` for the first version of this PR (#104218)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "html_url": "https://github.com/rust-lang/rust/commit/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "html_url": "https://github.com/rust-lang/rust/commit/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22"}, {"sha": "1ece1ea48c0d9e4c8414abf872626f7a54747976", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ece1ea48c0d9e4c8414abf872626f7a54747976", "html_url": "https://github.com/rust-lang/rust/commit/1ece1ea48c0d9e4c8414abf872626f7a54747976"}], "stats": {"total": 369, "additions": 146, "deletions": 223}, "files": [{"sha": "2e3adc086693140d7c35921d7adf6123fd81ad96", "filename": "compiler/rustc_codegen_llvm/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_llvm%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_llvm%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fmessages.ftl?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -24,7 +24,7 @@ codegen_llvm_error_writing_def_file =\n     Error writing .DEF file: {$error}\n \n codegen_llvm_error_calling_dlltool =\n-    Error calling dlltool: {$error}\n+    Error calling dlltool '{$dlltool_path}': {$error}\n \n codegen_llvm_dlltool_fail_import_library =\n     Dlltool could not create import library: {$stdout}"}, {"sha": "a6416e9540cc00933121e54e8c02bab24aeda1bc", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -198,7 +198,7 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                 \"arm\" => (\"arm\", \"--32\"),\n                 _ => panic!(\"unsupported arch {}\", sess.target.arch),\n             };\n-            let result = std::process::Command::new(dlltool)\n+            let result = std::process::Command::new(&dlltool)\n                 .args([\n                     \"-d\",\n                     def_file_path.to_str().unwrap(),\n@@ -218,9 +218,13 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n \n             match result {\n                 Err(e) => {\n-                    sess.emit_fatal(ErrorCallingDllTool { error: e });\n+                    sess.emit_fatal(ErrorCallingDllTool {\n+                        dlltool_path: dlltool.to_string_lossy(),\n+                        error: e,\n+                    });\n                 }\n-                Ok(output) if !output.status.success() => {\n+                // dlltool returns '0' on failure, so check for error output instead.\n+                Ok(output) if !output.stderr.is_empty() => {\n                     sess.emit_fatal(DlltoolFailImportLibrary {\n                         stdout: String::from_utf8_lossy(&output.stdout),\n                         stderr: String::from_utf8_lossy(&output.stderr),\n@@ -431,7 +435,7 @@ fn string_to_io_error(s: String) -> io::Error {\n \n fn find_binutils_dlltool(sess: &Session) -> OsString {\n     assert!(sess.target.options.is_like_windows && !sess.target.options.is_like_msvc);\n-    if let Some(dlltool_path) = &sess.opts.unstable_opts.dlltool {\n+    if let Some(dlltool_path) = &sess.opts.cg.dlltool {\n         return dlltool_path.clone().into_os_string();\n     }\n "}, {"sha": "672087de315553f12bbe2dec6179b6b402d09e4b", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -67,7 +67,8 @@ pub(crate) struct ErrorWritingDEFFile {\n \n #[derive(Diagnostic)]\n #[diag(codegen_llvm_error_calling_dlltool)]\n-pub(crate) struct ErrorCallingDllTool {\n+pub(crate) struct ErrorCallingDllTool<'a> {\n+    pub dlltool_path: Cow<'a, str>,\n     pub error: std::io::Error,\n }\n "}, {"sha": "8dae5dab4297204ab261777e64bf0a785b1c5f12", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -592,15 +592,6 @@ fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<u16> {\n     use rustc_ast::{LitIntType, LitKind, MetaItemLit};\n-    if !tcx.features().raw_dylib && tcx.sess.target.arch == \"x86\" {\n-        feature_err(\n-            &tcx.sess.parse_sess,\n-            sym::raw_dylib,\n-            attr.span,\n-            \"`#[link_ordinal]` is unstable on x86\",\n-        )\n-        .emit();\n-    }\n     let meta_item_list = attr.meta_item_list();\n     let meta_item_list = meta_item_list.as_deref();\n     let sole_meta_list = match meta_item_list {"}, {"sha": "5b2e4d15dfebe7804c04d43a1c2452f525859a1e", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -280,6 +280,8 @@ declare_features! (\n     (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n     /// Allows use of the postfix `?` operator in expressions.\n     (accepted, question_mark, \"1.13.0\", Some(31436), None),\n+    /// Allows the use of raw-dylibs (RFC 2627).\n+    (accepted, raw_dylib, \"CURRENT_RUSTC_VERSION\", Some(58713), None),\n     /// Allows keywords to be escaped for use as identifiers.\n     (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n     /// Allows relaxing the coherence rules such that"}, {"sha": "27d30c315af048e511ab151fa01d798cb3f1a823", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -489,8 +489,6 @@ declare_features! (\n     (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n     /// Allows macro attributes on expressions, statements and non-inline modules.\n     (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n-    /// Allows the use of raw-dylibs (RFC 2627).\n-    (active, raw_dylib, \"1.65.0\", Some(58713), None),\n     /// Allows `&raw const $place_expr` and `&raw mut $place_expr` expressions.\n     (active, raw_ref_op, \"1.41.0\", Some(64490), None),\n     /// Allows using the `#[register_tool]` attribute."}, {"sha": "ea576b6ec5d5c3360fc6d2fe478c8d6dd7b4e35a", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -547,6 +547,7 @@ fn test_codegen_options_tracking_hash() {\n     untracked!(ar, String::from(\"abc\"));\n     untracked!(codegen_units, Some(42));\n     untracked!(default_linker_libraries, true);\n+    untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(extra_filename, String::from(\"extra-filename\"));\n     untracked!(incremental, Some(String::from(\"abc\")));\n     // `link_arg` is omitted because it just forwards to `link_args`.\n@@ -651,7 +652,6 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(assert_incr_state, Some(String::from(\"loaded\")));\n     untracked!(deduplicate_diagnostics, false);\n     untracked!(dep_tasks, true);\n-    untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(dont_buffer_diagnostics, true);\n     untracked!(dump_dep_graph, true);\n     untracked!(dump_drop_tracking_cfg, Some(\"cfg.dot\".to_string()));"}, {"sha": "c83c47e722bf0fd00e3e0eb20e1c34dcb52fe4fa", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -161,14 +161,6 @@ impl<'tcx> Collector<'tcx> {\n                             \"raw-dylib\" => {\n                                 if !sess.target.is_like_windows {\n                                     sess.emit_err(errors::FrameworkOnlyWindows { span });\n-                                } else if !features.raw_dylib && sess.target.arch == \"x86\" {\n-                                    feature_err(\n-                                        &sess.parse_sess,\n-                                        sym::raw_dylib,\n-                                        span,\n-                                        \"link kind `raw-dylib` is unstable on x86\",\n-                                    )\n-                                    .emit();\n                                 }\n                                 NativeLibKind::RawDylib\n                             }\n@@ -251,16 +243,6 @@ impl<'tcx> Collector<'tcx> {\n                                 continue;\n                             }\n                         };\n-                        if !features.raw_dylib {\n-                            let span = item.name_value_literal_span().unwrap();\n-                            feature_err(\n-                                &sess.parse_sess,\n-                                sym::raw_dylib,\n-                                span,\n-                                \"import name type is unstable\",\n-                            )\n-                            .emit();\n-                        }\n                         import_name_type = Some((link_import_name_type, item.span()));\n                     }\n                     _ => {"}, {"sha": "243da98c3c28a3038d74c2c6e56269b21f05db21", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1235,6 +1235,8 @@ options! {\n         line-tables-only, limited, or full; default: 0)\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n         \"allow the linker to link its default libraries (default: no)\"),\n+    dlltool: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n+        \"import library generation tool (ignored except when targeting windows-gnu)\"),\n     embed_bitcode: bool = (true, parse_bool, [TRACKED],\n         \"emit bitcode in rlibs (default: yes)\"),\n     extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n@@ -1391,8 +1393,6 @@ options! {\n         (default: no)\"),\n     diagnostic_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current output width for diagnostic truncation\"),\n-    dlltool: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n-        \"import library generation tool (windows-gnu only)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n         (default: no)\"),"}, {"sha": "1041d5026690f97c60d61437fd5d00441e2b5f7f", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -90,6 +90,14 @@ It takes one of the following values:\n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n \n+## dlltool\n+\n+On `windows-gnu` targets, this flag controls which dlltool `rustc` invokes to\n+generate import libraries when using the [`raw-dylib` link kind](../../reference/items/external-blocks.md#the-link-attribute).\n+It takes a path to [the dlltool executable](https://sourceware.org/binutils/docs/binutils/dlltool.html).\n+If this flag is not specified, a dlltool executable will be inferred based on\n+the host environment and target.\n+\n ## embed-bitcode\n \n This flag controls whether or not the compiler embeds LLVM bitcode into object"}, {"sha": "5fd208ae7571c979d61c7b3342d13bff6da7c832", "filename": "src/doc/unstable-book/src/language-features/raw-dylib.md", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fraw-dylib.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fraw-dylib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fraw-dylib.md?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,34 +0,0 @@\n-# `raw_dylib`\n-\n-The tracking issue for this feature is: [#58713]\n-\n-[#58713]: https://github.com/rust-lang/rust/issues/58713\n-\n-------------------------\n-\n-The `raw_dylib` feature allows you to link against the implementations of functions in an `extern`\n-block without, on Windows, linking against an import library.\n-\n-```rust,ignore (partial-example)\n-#![feature(raw_dylib)]\n-\n-#[link(name=\"library\", kind=\"raw-dylib\")]\n-extern {\n-    fn extern_function(x: i32);\n-}\n-\n-fn main() {\n-    unsafe {\n-        extern_function(14);\n-    }\n-}\n-```\n-\n-## Limitations\n-\n-This feature is unstable for the `x86` architecture, and stable for all other architectures.\n-\n-This feature is only supported on Windows.\n-\n-On the `x86` architecture, this feature supports only the `cdecl`, `stdcall`, `system`, `fastcall`, and\n-`vectorcall` calling conventions."}, {"sha": "4a57c61406ce42032bccc5039c16822795a2ec15", "filename": "src/tools/compiletest/src/header/needs.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -115,6 +115,11 @@ pub(super) fn handle_needs(\n             condition: cache.x86_64_dlltool,\n             ignore_reason: \"ignored when dlltool for x86_64 is not present\",\n         },\n+        Need {\n+            name: \"needs-dlltool\",\n+            condition: cache.dlltool,\n+            ignore_reason: \"ignored when dlltool for the current architecture is not present\",\n+        },\n         Need {\n             name: \"needs-git-hash\",\n             condition: config.git_hash,\n@@ -183,13 +188,25 @@ pub(super) struct CachedNeedsConditions {\n     rust_lld: bool,\n     i686_dlltool: bool,\n     x86_64_dlltool: bool,\n+    dlltool: bool,\n }\n \n impl CachedNeedsConditions {\n     pub(super) fn load(config: &Config) -> Self {\n         let path = std::env::var_os(\"PATH\").expect(\"missing PATH environment variable\");\n         let path = std::env::split_paths(&path).collect::<Vec<_>>();\n \n+        // On Windows, dlltool.exe is used for all architectures.\n+        #[cfg(windows)]\n+        let dlltool = path.iter().any(|dir| dir.join(\"dlltool.exe\").is_file());\n+\n+        // For non-Windows, there are architecture specific dlltool binaries.\n+        #[cfg(not(windows))]\n+        let i686_dlltool = path.iter().any(|dir| dir.join(\"i686-w64-mingw32-dlltool\").is_file());\n+        #[cfg(not(windows))]\n+        let x86_64_dlltool =\n+            path.iter().any(|dir| dir.join(\"x86_64-w64-mingw32-dlltool\").is_file());\n+\n         let target = &&*config.target;\n         Self {\n             sanitizer_support: std::env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some(),\n@@ -225,17 +242,26 @@ impl CachedNeedsConditions {\n                 .join(if config.host.contains(\"windows\") { \"rust-lld.exe\" } else { \"rust-lld\" })\n                 .exists(),\n \n-            // On Windows, dlltool.exe is used for all architectures.\n             #[cfg(windows)]\n-            i686_dlltool: path.iter().any(|dir| dir.join(\"dlltool.exe\").is_file()),\n+            i686_dlltool: dlltool,\n             #[cfg(windows)]\n-            x86_64_dlltool: path.iter().any(|dir| dir.join(\"dlltool.exe\").is_file()),\n+            x86_64_dlltool: dlltool,\n+            #[cfg(windows)]\n+            dlltool,\n \n             // For non-Windows, there are architecture specific dlltool binaries.\n             #[cfg(not(windows))]\n-            i686_dlltool: path.iter().any(|dir| dir.join(\"i686-w64-mingw32-dlltool\").is_file()),\n+            i686_dlltool,\n+            #[cfg(not(windows))]\n+            x86_64_dlltool,\n             #[cfg(not(windows))]\n-            x86_64_dlltool: path.iter().any(|dir| dir.join(\"x86_64-w64-mingw32-dlltool\").is_file()),\n+            dlltool: if config.matches_arch(\"x86\") {\n+                i686_dlltool\n+            } else if config.matches_arch(\"x86_64\") {\n+                x86_64_dlltool\n+            } else {\n+                false\n+            },\n         }\n     }\n }"}, {"sha": "dcb5fee9ecc76926e52d5d47697b296bb5a0bfa2", "filename": "tests/run-make/raw-dylib-alt-calling-convention/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,4 @@\n #![feature(abi_vectorcall)]\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n \n #[repr(C)]\n #[derive(Clone)]"}, {"sha": "f17125f308c20cb47b9d951a7ae309651924b4f5", "filename": "tests/run-make/raw-dylib-c/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-c%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-c%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-c%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![feature(raw_dylib)]\n-\n #[link(name = \"extern_1.dll\", kind = \"raw-dylib\", modifiers = \"+verbatim\")]\n extern {\n     fn extern_fn_1();"}, {"sha": "3338ac0a0b50f03dffdaaa07092dd078817b6ecf", "filename": "tests/run-make/raw-dylib-cross-compilation/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-cross-compilation%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-cross-compilation%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-cross-compilation%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,4 +1,3 @@\n-#![feature(raw_dylib)]\n #![feature(no_core, lang_items)]\n #![no_std]\n #![no_core]"}, {"sha": "f5d5360a3fbe834e711ee6c92fbb20bed8eac3d6", "filename": "tests/run-make/raw-dylib-custom-dlltool/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2FMakefile?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,11 @@\n+# Test using -Cdlltool to change where raw-dylib looks for the dlltool binary.\n+\n+# only-windows\n+# only-gnu\n+# needs-dlltool\n+\n+include ../tools.mk\n+\n+all:\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs -Cdlltool=$(CURDIR)/script.cmd\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt"}, {"sha": "2f3f497a00de14a43c40bb43baa411cb660265af", "filename": "tests/run-make/raw-dylib-custom-dlltool/lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,10 @@\n+#[link(name = \"extern_1\", kind = \"raw-dylib\")]\n+extern {\n+    fn extern_fn_1();\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        extern_fn_1();\n+    }\n+}"}, {"sha": "6dd9466d26ddc053f507b6972cfeed6d56f392d7", "filename": "tests/run-make/raw-dylib-custom-dlltool/output.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Foutput.txt?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1 @@\n+Called dlltool via script.cmd"}, {"sha": "95f85c61c67d2649e5b63e9a704f5a7d69a7208b", "filename": "tests/run-make/raw-dylib-custom-dlltool/script.cmd", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Fscript.cmd", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Fscript.cmd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-custom-dlltool%2Fscript.cmd?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,2 @@\n+echo Called dlltool via script.cmd> %TMPDIR%\\output.txt\n+dlltool.exe %*"}, {"sha": "6c1c212f187b7813589f2e151b061fdceba81a90", "filename": "tests/run-make/raw-dylib-import-name-type/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,4 +1,3 @@\n-#![feature(raw_dylib)]\n #![feature(abi_vectorcall)]\n \n #[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"undecorated\")]"}, {"sha": "0c3125be6f596008cba851dcb118ec38c603a6d9", "filename": "tests/run-make/raw-dylib-inline-cross-dylib/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Fdriver.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![feature(raw_dylib)]\n-\n extern crate raw_dylib_test;\n extern crate raw_dylib_test_wrapper;\n "}, {"sha": "4877cb80aea5e0f5052829f9b85a1ff8a90f9273", "filename": "tests/run-make/raw-dylib-inline-cross-dylib/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-inline-cross-dylib%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![feature(raw_dylib)]\n-\n #[link(name = \"extern_1\", kind = \"raw-dylib\")]\n extern {\n     fn extern_fn_1();"}, {"sha": "1bbb45bbc77258d4456a5d57b95721c7a258d49e", "filename": "tests/run-make/raw-dylib-link-ordinal/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"exporter\", kind = \"raw-dylib\")]\n extern {\n     #[link_ordinal(13)]"}, {"sha": "74c5c7f8250b2614402ff658b412bd84174abb9e", "filename": "tests/run-make/raw-dylib-stdcall-ordinal/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"exporter\", kind = \"raw-dylib\")]\n extern \"stdcall\" {\n     #[link_ordinal(15)]"}, {"sha": "fc47a9061d3c02b5f7f76c8065f8f12e3c317950", "filename": "tests/ui/feature-gates/feature-gate-raw-dylib-2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,12 +0,0 @@\n-// only-x86\n-#[link(name = \"foo\")]\n-extern \"C\" {\n-    #[link_ordinal(42)]\n-    //~^ ERROR: `#[link_ordinal]` is unstable on x86\n-    fn foo();\n-    #[link_ordinal(5)]\n-    //~^ ERROR: `#[link_ordinal]` is unstable on x86\n-    static mut imported_variable: i32;\n-}\n-\n-fn main() {}"}, {"sha": "0e900760d245e44b628d93ce54cdf9c859089ec0", "filename": "tests/ui/feature-gates/feature-gate-raw-dylib-2.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: `#[link_ordinal]` is unstable on x86\n-  --> $DIR/feature-gate-raw-dylib-2.rs:4:5\n-   |\n-LL |     #[link_ordinal(42)]\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error[E0658]: `#[link_ordinal]` is unstable on x86\n-  --> $DIR/feature-gate-raw-dylib-2.rs:7:5\n-   |\n-LL |     #[link_ordinal(5)]\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "295f502d6a3e57f200195a1fae8b0ebf3cc33c2b", "filename": "tests/ui/feature-gates/feature-gate-raw-dylib-import-name-type.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.rs?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,8 +0,0 @@\n-// only-windows\n-// only-x86\n-#[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n-//~^ ERROR link kind `raw-dylib` is unstable on x86\n-//~| ERROR import name type is unstable\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "d6b165b7610a55c453a29ad6d00f2cf79b378d3c", "filename": "tests/ui/feature-gates/feature-gate-raw-dylib-import-name-type.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.stderr?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: link kind `raw-dylib` is unstable on x86\n-  --> $DIR/feature-gate-raw-dylib-import-name-type.rs:3:29\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n-   |                             ^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error[E0658]: import name type is unstable\n-  --> $DIR/feature-gate-raw-dylib-import-name-type.rs:3:61\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n-   |                                                             ^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "291cca8fd25737262db3b46b827440bb72c3b89d", "filename": "tests/ui/feature-gates/feature-gate-raw-dylib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,7 +0,0 @@\n-// only-windows\n-// only-x86\n-#[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ ERROR: link kind `raw-dylib` is unstable on x86\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "f02241e4908c091b16d5a3e75d4a77d4018ba1df", "filename": "tests/ui/feature-gates/feature-gate-raw-dylib.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr?ref=f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: link kind `raw-dylib` is unstable on x86\n-  --> $DIR/feature-gate-raw-dylib.rs:3:29\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   |                             ^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d7a418959bf51aac71532098fd40e2d0d30b6e3c", "filename": "tests/ui/rfc-2627-raw-dylib/dlltool-failed.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fdlltool-failed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fdlltool-failed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fdlltool-failed.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,19 @@\n+// Tests that dlltool failing to generate an import library will raise an error.\n+\n+// only-gnu\n+// only-windows\n+// needs-dlltool\n+// compile-flags: --crate-type lib --emit link\n+// normalize-stderr-test: \"[^ ']*/dlltool.exe\" -> \"$$DLLTOOL\"\n+// normalize-stderr-test: \"[^ ]*/foo.def\" -> \"$$DEF_FILE\"\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    // `@1` is an invalid name to export, as it usually indicates that something\n+    // is being exported via ordinal.\n+    #[link_name = \"@1\"]\n+    fn f(x: i32);\n+}\n+\n+pub fn lib_main() {\n+    unsafe { f(42); }\n+}"}, {"sha": "020ac6a2b670bcea8199f25f1eda0e04f08182a4", "filename": "tests/ui/rfc-2627-raw-dylib/dlltool-failed.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fdlltool-failed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fdlltool-failed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fdlltool-failed.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,5 @@\n+error: Dlltool could not create import library: \n+       $DLLTOOL: Syntax error in def file $DEF_FILE:1\n+\n+error: aborting due to previous error\n+"}, {"sha": "7bc44d65be9e5571eb668310bf9fc8f2c9f77037", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-invalid-format.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,7 +1,5 @@\n // only-windows\n // only-x86\n-#![feature(raw_dylib)]\n-\n #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = 6)]\n //~^ ERROR import name type must be of the form `import_name_type = \"string\"`\n extern \"C\" { }"}, {"sha": "fb70b987fc7d9963968c52ec25fafe0410faf5ca", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-invalid-format.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,5 @@\n error: import name type must be of the form `import_name_type = \"string\"`\n-  --> $DIR/import-name-type-invalid-format.rs:5:42\n+  --> $DIR/import-name-type-invalid-format.rs:3:42\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = 6)]\n    |                                          ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b96f61a26da8b9337d46086b45b87534dddb9e1c", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-multiple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,8 +1,6 @@\n // ignore-tidy-linelength\n // only-windows\n // only-x86\n-#![feature(raw_dylib)]\n-\n #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\", import_name_type = \"decorated\")]\n //~^ ERROR multiple `import_name_type` arguments in a single `#[link]` attribute\n extern \"C\" { }"}, {"sha": "9533061892fee98f38374cc23c341c674a68093a", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-multiple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,5 @@\n error: multiple `import_name_type` arguments in a single `#[link]` attribute\n-  --> $DIR/import-name-type-multiple.rs:6:74\n+  --> $DIR/import-name-type-multiple.rs:4:74\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\", import_name_type = \"decorated\")]\n    |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "067e82a17fdc558eccb8133d27bea8557afa2f0f", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-unknown-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,7 +1,5 @@\n // only-windows\n // only-x86\n-#![feature(raw_dylib)]\n-\n #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"unknown\")]\n //~^ ERROR unknown import name type `unknown`, expected one of: decorated, noprefix, undecorated\n extern \"C\" { }"}, {"sha": "2bce9758e997cd594ef2d00d9d9a9d7be4e9e6ce", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-unknown-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,5 @@\n error: unknown import name type `unknown`, expected one of: decorated, noprefix, undecorated\n-  --> $DIR/import-name-type-unknown-value.rs:5:42\n+  --> $DIR/import-name-type-unknown-value.rs:3:42\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"unknown\")]\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "34e907bde839abad612dfb6982317d17545db4d6", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-unsupported-link-kind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,7 +1,5 @@\n // only-windows\n // only-x86\n-#![feature(raw_dylib)]\n-\n #[link(name = \"foo\", import_name_type = \"decorated\")]\n //~^ ERROR import name type can only be used with link kind `raw-dylib`\n extern \"C\" { }"}, {"sha": "75cadc471c437fd7c064371f068dd95840dcd2da", "filename": "tests/ui/rfc-2627-raw-dylib/import-name-type-unsupported-link-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,11 +1,11 @@\n error: import name type can only be used with link kind `raw-dylib`\n-  --> $DIR/import-name-type-unsupported-link-kind.rs:5:22\n+  --> $DIR/import-name-type-unsupported-link-kind.rs:3:22\n    |\n LL | #[link(name = \"foo\", import_name_type = \"decorated\")]\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: import name type can only be used with link kind `raw-dylib`\n-  --> $DIR/import-name-type-unsupported-link-kind.rs:9:39\n+  --> $DIR/import-name-type-unsupported-link-kind.rs:7:39\n    |\n LL | #[link(name = \"bar\", kind = \"static\", import_name_type = \"decorated\")]\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a07be9d92b4ed97674f41b88ba23b0a7cb16f1f6", "filename": "tests/ui/rfc-2627-raw-dylib/invalid-dlltool.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Finvalid-dlltool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Finvalid-dlltool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Finvalid-dlltool.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,13 @@\n+// Tests that failing to run dlltool will raise an error.\n+\n+// only-gnu\n+// only-windows\n+// compile-flags: --crate-type lib --emit link -Cdlltool=does_not_exit.exe\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    fn f(x: i32);\n+}\n+\n+pub fn lib_main() {\n+    unsafe { f(42); }\n+}"}, {"sha": "3ae901e0dbc9410336a00fe2494b162d61e627b5", "filename": "tests/ui/rfc-2627-raw-dylib/invalid-dlltool.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Finvalid-dlltool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Finvalid-dlltool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Finvalid-dlltool.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -0,0 +1,4 @@\n+error: Error calling dlltool 'does_not_exit.exe': program not found\n+\n+error: aborting due to previous error\n+"}, {"sha": "b04c2facbcdf38770434be940fee86a893584867", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-and-name.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name=\"foo\")]\n extern \"C\" {\n     #[link_name=\"foo\"]"}, {"sha": "f1e54d37827c0f80a5a1cca1762e238bf4489ce4", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-and-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,11 +1,11 @@\n error: cannot use `#[link_name]` with `#[link_ordinal]`\n-  --> $DIR/link-ordinal-and-name.rs:6:5\n+  --> $DIR/link-ordinal-and-name.rs:4:5\n    |\n LL |     #[link_ordinal(42)]\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: cannot use `#[link_name]` with `#[link_ordinal]`\n-  --> $DIR/link-ordinal-and-name.rs:10:5\n+  --> $DIR/link-ordinal-and-name.rs:8:5\n    |\n LL |     #[link_ordinal(5)]\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "9b7e8d70743b78287ba5b21df3f113ddba3b2fcb", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"foo\")]\n extern \"C\" {\n     #[link_ordinal(\"JustMonika\")]"}, {"sha": "6341e57a0be53018d7d05b3cab5546bf59c9fb59", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,13 +1,13 @@\n error: illegal ordinal format in `link_ordinal`\n-  --> $DIR/link-ordinal-invalid-format.rs:5:5\n+  --> $DIR/link-ordinal-invalid-format.rs:3:5\n    |\n LL |     #[link_ordinal(\"JustMonika\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: an unsuffixed integer value, e.g., `1`, is expected\n \n error: illegal ordinal format in `link_ordinal`\n-  --> $DIR/link-ordinal-invalid-format.rs:8:5\n+  --> $DIR/link-ordinal-invalid-format.rs:6:5\n    |\n LL |     #[link_ordinal(\"JustMonika\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6b8cd49566dfef5b85aac0c5f6438f0e895435c1", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-missing-argument.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"foo\")]\n extern \"C\" {\n     #[link_ordinal()]"}, {"sha": "1b04bb228e76a89bfe462a732029e3e6cc74c2ff", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-missing-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,13 +1,13 @@\n error: incorrect number of arguments to `#[link_ordinal]`\n-  --> $DIR/link-ordinal-missing-argument.rs:5:5\n+  --> $DIR/link-ordinal-missing-argument.rs:3:5\n    |\n LL |     #[link_ordinal()]\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: the attribute requires exactly one argument\n \n error: incorrect number of arguments to `#[link_ordinal]`\n-  --> $DIR/link-ordinal-missing-argument.rs:8:5\n+  --> $DIR/link-ordinal-missing-argument.rs:6:5\n    |\n LL |     #[link_ordinal()]\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "8842cb944045fe6d9c6d5c937a7fb125a274f72f", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-multiple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,6 +1,4 @@\n // only-windows\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n extern \"C\" {\n     #[link_ordinal(1)] //~ ERROR multiple `link_ordinal` attributes"}, {"sha": "2e6cf3761c2f0d247bec158e4682cfc144f028b0", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-multiple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,23 +1,23 @@\n error: multiple `link_ordinal` attributes\n-  --> $DIR/link-ordinal-multiple.rs:6:5\n+  --> $DIR/link-ordinal-multiple.rs:4:5\n    |\n LL |     #[link_ordinal(1)]\n    |     ^^^^^^^^^^^^^^^^^^ help: remove this attribute\n    |\n note: attribute also specified here\n-  --> $DIR/link-ordinal-multiple.rs:7:5\n+  --> $DIR/link-ordinal-multiple.rs:5:5\n    |\n LL |     #[link_ordinal(2)]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: multiple `link_ordinal` attributes\n-  --> $DIR/link-ordinal-multiple.rs:9:5\n+  --> $DIR/link-ordinal-multiple.rs:7:5\n    |\n LL |     #[link_ordinal(1)]\n    |     ^^^^^^^^^^^^^^^^^^ help: remove this attribute\n    |\n note: attribute also specified here\n-  --> $DIR/link-ordinal-multiple.rs:10:5\n+  --> $DIR/link-ordinal-multiple.rs:8:5\n    |\n LL |     #[link_ordinal(2)]\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "f33a3d62e268840db816fbc2a5c920003394c513", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-not-foreign-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-not-foreign-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-not-foreign-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-not-foreign-fn.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link_ordinal(123)]\n //~^ ERROR attribute should be applied to a foreign function or static\n struct Foo {}"}, {"sha": "8f279508720ce77458b953d5e726347b70f931eb", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-not-foreign-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-not-foreign-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-not-foreign-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-not-foreign-fn.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,17 +1,17 @@\n error: attribute should be applied to a foreign function or static\n-  --> $DIR/link-ordinal-not-foreign-fn.rs:3:1\n+  --> $DIR/link-ordinal-not-foreign-fn.rs:1:1\n    |\n LL | #[link_ordinal(123)]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: attribute should be applied to a foreign function or static\n-  --> $DIR/link-ordinal-not-foreign-fn.rs:7:1\n+  --> $DIR/link-ordinal-not-foreign-fn.rs:5:1\n    |\n LL | #[link_ordinal(123)]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: attribute should be applied to a foreign function or static\n-  --> $DIR/link-ordinal-not-foreign-fn.rs:11:1\n+  --> $DIR/link-ordinal-not-foreign-fn.rs:9:1\n    |\n LL | #[link_ordinal(42)]\n    | ^^^^^^^^^^^^^^^^^^^"}, {"sha": "9d741630fc9da086f65c7934ca48a2c47568e0fa", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-too-large.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"foo\")]\n extern \"C\" {\n     #[link_ordinal(72436)]"}, {"sha": "811145e77ee4644c025c51f0e4695777a1cd35e8", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,13 +1,13 @@\n error: ordinal value in `link_ordinal` is too large: `72436`\n-  --> $DIR/link-ordinal-too-large.rs:5:5\n+  --> $DIR/link-ordinal-too-large.rs:3:5\n    |\n LL |     #[link_ordinal(72436)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the value may not exceed `u16::MAX`\n \n error: ordinal value in `link_ordinal` is too large: `72436`\n-  --> $DIR/link-ordinal-too-large.rs:8:5\n+  --> $DIR/link-ordinal-too-large.rs:6:5\n    |\n LL |     #[link_ordinal(72436)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9988115fd8b0dd032de18f404ad6263d583d3868", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-too-many-arguments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"foo\")]\n extern \"C\" {\n     #[link_ordinal(3, 4)]"}, {"sha": "d5ce8aff34f20df7725eda1576f9f03375b72a91", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-too-many-arguments.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,13 +1,13 @@\n error: incorrect number of arguments to `#[link_ordinal]`\n-  --> $DIR/link-ordinal-too-many-arguments.rs:5:5\n+  --> $DIR/link-ordinal-too-many-arguments.rs:3:5\n    |\n LL |     #[link_ordinal(3, 4)]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the attribute requires exactly one argument\n \n error: incorrect number of arguments to `#[link_ordinal]`\n-  --> $DIR/link-ordinal-too-many-arguments.rs:8:5\n+  --> $DIR/link-ordinal-too-many-arguments.rs:6:5\n    |\n LL |     #[link_ordinal(3, 4)]\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "14e915d602aaaefa78e8e27468c93f55c7edb459", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-unsupported-link-kind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,3 @@\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n-\n #[link(name = \"foo\")]\n extern \"C\" {\n     #[link_ordinal(3)]"}, {"sha": "200b8f6287465be19943351ed383cf7e867b4a78", "filename": "tests/ui/rfc-2627-raw-dylib/link-ordinal-unsupported-link-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-unsupported-link-kind.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,11 +1,11 @@\n error: `#[link_ordinal]` is only supported if link kind is `raw-dylib`\n-  --> $DIR/link-ordinal-unsupported-link-kind.rs:5:5\n+  --> $DIR/link-ordinal-unsupported-link-kind.rs:3:5\n    |\n LL |     #[link_ordinal(3)]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[link_ordinal]` is only supported if link kind is `raw-dylib`\n-  --> $DIR/link-ordinal-unsupported-link-kind.rs:12:5\n+  --> $DIR/link-ordinal-unsupported-link-kind.rs:10:5\n    |\n LL |     #[link_ordinal(3)]\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "b4173f3b60bced3daf38f57a5ae65db2281471c1", "filename": "tests/ui/rfc-2627-raw-dylib/multiple-declarations.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -2,7 +2,6 @@\n // only-windows\n // compile-flags: --crate-type lib --emit link\n #![allow(clashing_extern_declarations)]\n-#![feature(raw_dylib)]\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n extern \"C\" {\n     fn f(x: i32);"}, {"sha": "5101084054882fdd3c1dec34e0ba4e3596e55456", "filename": "tests/ui/rfc-2627-raw-dylib/multiple-declarations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,5 @@\n error: multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n-  --> $DIR/multiple-declarations.rs:14:9\n+  --> $DIR/multiple-declarations.rs:13:9\n    |\n LL |         fn f(x: i32);\n    |         ^^^^^^^^^^^^^"}, {"sha": "d4c6658a33024832816c053fa79ffa0c99f74a24", "filename": "tests/ui/rfc-2627-raw-dylib/raw-dylib-windows-only.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,6 +1,5 @@\n // ignore-windows\n // compile-flags: --crate-type lib\n-#![cfg_attr(target_arch = \"x86\", feature(raw_dylib))]\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n //~^ ERROR: link kind `raw-dylib` is only supported on Windows targets\n extern \"C\" {}"}, {"sha": "b635a09afba4e3ddce9771fb39dbd3cd598116da", "filename": "tests/ui/rfc-2627-raw-dylib/raw-dylib-windows-only.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/923a5a2ca7c9d8d3f89d186e5d34918dc6522e25/tests%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr?ref=923a5a2ca7c9d8d3f89d186e5d34918dc6522e25", "patch": "@@ -1,5 +1,5 @@\n error[E0455]: link kind `raw-dylib` is only supported on Windows targets\n-  --> $DIR/raw-dylib-windows-only.rs:4:29\n+  --> $DIR/raw-dylib-windows-only.rs:3:29\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n    |                             ^^^^^^^^^^^"}]}