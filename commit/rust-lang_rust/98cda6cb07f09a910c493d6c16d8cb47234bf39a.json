{"sha": "98cda6cb07f09a910c493d6c16d8cb47234bf39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2RhNmNiMDdmMDlhOTEwYzQ5M2Q2YzE2ZDhjYjQ3MjM0YmYzOWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-07T19:28:54Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-07T19:28:54Z"}, "message": "freeze -> static", "tree": {"sha": "a768c2a5cf372322adb782eeabe18d540aedcd9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a768c2a5cf372322adb782eeabe18d540aedcd9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cda6cb07f09a910c493d6c16d8cb47234bf39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cda6cb07f09a910c493d6c16d8cb47234bf39a", "html_url": "https://github.com/rust-lang/rust/commit/98cda6cb07f09a910c493d6c16d8cb47234bf39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cda6cb07f09a910c493d6c16d8cb47234bf39a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "html_url": "https://github.com/rust-lang/rust/commit/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "f806110190c4d8350da4081847bdbadcf6f65948", "filename": "src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98cda6cb07f09a910c493d6c16d8cb47234bf39a/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cda6cb07f09a910c493d6c16d8cb47234bf39a/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=98cda6cb07f09a910c493d6c16d8cb47234bf39a", "patch": "@@ -119,9 +119,9 @@ impl<'tcx> Error for EvalError<'tcx> {\n             EvalError::TypeNotPrimitive(_) =>\n                 \"expected primitive type, got nonprimitive\",\n             EvalError::ReallocatedStaticMemory =>\n-                \"tried to reallocate frozen memory\",\n+                \"tried to reallocate static memory\",\n             EvalError::DeallocatedStaticMemory =>\n-                \"tried to deallocate frozen memory\",\n+                \"tried to deallocate static memory\",\n             EvalError::Layout(_) =>\n                 \"rustc layout computation failed\",\n             EvalError::UnterminatedCString(_) =>"}, {"sha": "1996bbf9dcb7e5dca9c273de16a50d47dad7a03f", "filename": "src/eval_context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98cda6cb07f09a910c493d6c16d8cb47234bf39a/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cda6cb07f09a910c493d6c16d8cb47234bf39a/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=98cda6cb07f09a910c493d6c16d8cb47234bf39a", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match frame.return_to_block {\n             StackPopCleanup::MarkStatic(mutable) => if let Lvalue::Global(id) = frame.return_lvalue {\n                 let global_value = self.globals.get_mut(&id)\n-                    .expect(\"global should have been cached (freeze/static)\");\n+                    .expect(\"global should have been cached (static)\");\n                 match global_value.value {\n                     Value::ByRef(ptr) => self.memory.mark_static(ptr.alloc_id, mutable)?,\n                     Value::ByVal(val) => if let PrimVal::Ptr(ptr) = val {\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 assert!(global_value.mutable);\n                 global_value.mutable = mutable;\n             } else {\n-                bug!(\"StackPopCleanup::Freeze on: {:?}\", frame.return_lvalue);\n+                bug!(\"StackPopCleanup::MarkStatic on: {:?}\", frame.return_lvalue);\n             },\n             StackPopCleanup::Goto(target) => self.goto_block(target),\n             StackPopCleanup::None => {},\n@@ -343,10 +343,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 trace!(\"deallocating local\");\n                 self.memory.dump_alloc(ptr.alloc_id);\n                 match self.memory.deallocate(ptr) {\n-                    // Any frozen memory means that it belongs to a constant or something referenced\n-                    // by a constant. We could alternatively check whether the alloc_id is frozen\n-                    // before calling deallocate, but this is much simpler and is probably the\n-                    // rare case.\n+                    // We could alternatively check whether the alloc_id is static before calling\n+                    // deallocate, but this is much simpler and is probably the rare case.\n                     Ok(()) | Err(EvalError::DeallocatedStaticMemory) => {},\n                     other => return other,\n                 }"}, {"sha": "0b5f90f3fc8bdcb6ba1ee61d9ccf48ea4ffa6c9e", "filename": "src/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98cda6cb07f09a910c493d6c16d8cb47234bf39a/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cda6cb07f09a910c493d6c16d8cb47234bf39a/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=98cda6cb07f09a910c493d6c16d8cb47234bf39a", "patch": "@@ -39,7 +39,7 @@ pub struct Allocation {\n     pub align: u64,\n     /// Whether the allocation may be modified.\n     /// Use the `mark_static` method of `Memory` to ensure that an error occurs, if the memory of this\n-    /// allocation is modified in the future.\n+    /// allocation is modified or deallocated in the future.\n     pub static_kind: StaticKind,\n }\n \n@@ -626,7 +626,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     /// mark an allocation as static, either mutable or not\n     pub fn mark_static(&mut self, alloc_id: AllocId, mutable: bool) -> EvalResult<'tcx> {\n-        // do not use `self.get_mut(alloc_id)` here, because we might have already frozen a\n+        // do not use `self.get_mut(alloc_id)` here, because we might have already marked a\n         // sub-element or have circular pointers (e.g. `Rc`-cycles)\n         let relocations = match self.alloc_map.get_mut(&alloc_id) {\n             Some(&mut Allocation { ref mut relocations, static_kind: ref mut kind @ StaticKind::NotStatic, .. }) => {\n@@ -636,7 +636,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     StaticKind::Immutable\n                 };\n                 // take out the relocations vector to free the borrow on self, so we can call\n-                // freeze recursively\n+                // mark recursively\n                 mem::replace(relocations, Default::default())\n             },\n             None if alloc_id == NEVER_ALLOC_ID || alloc_id == ZST_ALLOC_ID => return Ok(()),"}, {"sha": "cb2e7217d5797331be2918c8d39b66a9b1c3fc05", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cda6cb07f09a910c493d6c16d8cb47234bf39a/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cda6cb07f09a910c493d6c16d8cb47234bf39a/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=98cda6cb07f09a910c493d6c16d8cb47234bf39a", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is frozen, not the pointee\n+    let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n     *y = 42; //~ ERROR tried to modify constant memory\n     assert_eq!(*x, 42);"}]}