{"sha": "68643603ad00900d6a91a0dae90bb2ebb4f0db48", "node_id": "C_kwDOAAsO6NoAKDY4NjQzNjAzYWQwMDkwMGQ2YTkxYTBkYWU5MGJiMmViYjRmMGRiNDg", "commit": {"author": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-22T20:21:33Z"}, "committer": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-30T00:18:27Z"}, "message": "Make some rustc code conform to strict provenance.\n\nThere's some really bad stuff around `ty` and pointer tagging stuff that\nwas too much work to handle here.", "tree": {"sha": "bf21a67cd25c9c41b81008c68e77b8c9a8d67624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf21a67cd25c9c41b81008c68e77b8c9a8d67624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68643603ad00900d6a91a0dae90bb2ebb4f0db48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68643603ad00900d6a91a0dae90bb2ebb4f0db48", "html_url": "https://github.com/rust-lang/rust/commit/68643603ad00900d6a91a0dae90bb2ebb4f0db48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68643603ad00900d6a91a0dae90bb2ebb4f0db48/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7de289e1c8d24bd55aaa33813e509920a00c364", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7de289e1c8d24bd55aaa33813e509920a00c364", "html_url": "https://github.com/rust-lang/rust/commit/c7de289e1c8d24bd55aaa33813e509920a00c364"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "de1d5c07f5028ce387ab5ac0c9ab32c5b170e6e0", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68643603ad00900d6a91a0dae90bb2ebb4f0db48/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68643603ad00900d6a91a0dae90bb2ebb4f0db48/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=68643603ad00900d6a91a0dae90bb2ebb4f0db48", "patch": "@@ -18,6 +18,7 @@\n #![feature(decl_macro)]\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n+#![feature(strict_provenance)]\n \n use smallvec::SmallVec;\n \n@@ -87,7 +88,7 @@ impl<T> ArenaChunk<T> {\n         unsafe {\n             if mem::size_of::<T>() == 0 {\n                 // A pointer as large as possible for zero-sized elements.\n-                !0 as *mut T\n+                ptr::invalid_mut(!0)\n             } else {\n                 self.start().add(self.storage.len())\n             }\n@@ -199,7 +200,7 @@ impl<T> TypedArena<T> {\n         unsafe {\n             if mem::size_of::<T>() == 0 {\n                 self.ptr.set((self.ptr.get() as *mut u8).wrapping_offset(1) as *mut T);\n-                let ptr = mem::align_of::<T>() as *mut T;\n+                let ptr = ptr::NonNull::<T>::dangling().as_ptr();\n                 // Don't drop the object. This `write` is equivalent to `forget`.\n                 ptr::write(ptr, object);\n                 &mut *ptr\n@@ -216,7 +217,7 @@ impl<T> TypedArena<T> {\n \n     #[inline]\n     fn can_allocate(&self, additional: usize) -> bool {\n-        let available_bytes = self.end.get() as usize - self.ptr.get() as usize;\n+        let available_bytes = self.end.get().addr() - self.ptr.get().addr();\n         let additional_bytes = additional.checked_mul(mem::size_of::<T>()).unwrap();\n         available_bytes >= additional_bytes\n     }\n@@ -262,7 +263,7 @@ impl<T> TypedArena<T> {\n                 // If a type is `!needs_drop`, we don't need to keep track of how many elements\n                 // the chunk stores - the field will be ignored anyway.\n                 if mem::needs_drop::<T>() {\n-                    let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n+                    let used_bytes = self.ptr.get().addr() - last_chunk.start().addr();\n                     last_chunk.entries = used_bytes / mem::size_of::<T>();\n                 }\n \n@@ -288,9 +289,9 @@ impl<T> TypedArena<T> {\n     // chunks.\n     fn clear_last_chunk(&self, last_chunk: &mut ArenaChunk<T>) {\n         // Determine how much was filled.\n-        let start = last_chunk.start() as usize;\n+        let start = last_chunk.start().addr();\n         // We obtain the value of the pointer to the first uninitialized element.\n-        let end = self.ptr.get() as usize;\n+        let end = self.ptr.get().addr();\n         // We then calculate the number of elements to be dropped in the last chunk,\n         // which is the filled area's length.\n         let diff = if mem::size_of::<T>() == 0 {\n@@ -395,15 +396,16 @@ impl DroplessArena {\n     /// request.\n     #[inline]\n     fn alloc_raw_without_grow(&self, layout: Layout) -> Option<*mut u8> {\n-        let start = self.start.get() as usize;\n-        let end = self.end.get() as usize;\n+        let start = self.start.get().addr();\n+        let old_end = self.end.get();\n+        let end = old_end.addr();\n \n         let align = layout.align();\n         let bytes = layout.size();\n \n         let new_end = end.checked_sub(bytes)? & !(align - 1);\n         if start <= new_end {\n-            let new_end = new_end as *mut u8;\n+            let new_end = old_end.with_addr(new_end);\n             self.end.set(new_end);\n             Some(new_end)\n         } else {"}, {"sha": "6cf6be79a8628d55e28f1083686eb390dc2f508b", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68643603ad00900d6a91a0dae90bb2ebb4f0db48/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68643603ad00900d6a91a0dae90bb2ebb4f0db48/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=68643603ad00900d6a91a0dae90bb2ebb4f0db48", "patch": "@@ -6,6 +6,7 @@\n #![feature(once_cell)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n+#![feature(strict_provenance)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "5414c619dcbcaabd2354aaf8ed722664612a87fe", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68643603ad00900d6a91a0dae90bb2ebb4f0db48/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68643603ad00900d6a91a0dae90bb2ebb4f0db48/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=68643603ad00900d6a91a0dae90bb2ebb4f0db48", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     fn to_raw_string(&self) -> String {\n         match *self {\n             MonoItem::Fn(instance) => {\n-                format!(\"Fn({:?}, {})\", instance.def, instance.substs.as_ptr() as usize)\n+                format!(\"Fn({:?}, {})\", instance.def, instance.substs.as_ptr().addr())\n             }\n             MonoItem::Static(id) => format!(\"Static({:?})\", id),\n             MonoItem::GlobalAsm(id) => format!(\"GlobalAsm({:?})\", id),"}]}