{"sha": "e5637226d85f251c74911389f3ef21adde393d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NjM3MjI2ZDg1ZjI1MWM3NDkxMTM4OWYzZWYyMWFkZGUzOTNkMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-08T07:16:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-08T07:16:42Z"}, "message": "auto merge of #4839 : catamorphism/rust/rm-structural-records, r=catamorphism", "tree": {"sha": "a4361ace552e04e4d6fca00953f690087fdf0fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4361ace552e04e4d6fca00953f690087fdf0fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5637226d85f251c74911389f3ef21adde393d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5637226d85f251c74911389f3ef21adde393d0a", "html_url": "https://github.com/rust-lang/rust/commit/e5637226d85f251c74911389f3ef21adde393d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5637226d85f251c74911389f3ef21adde393d0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4fa844d83dff2100e682f572109326be6194cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4fa844d83dff2100e682f572109326be6194cb", "html_url": "https://github.com/rust-lang/rust/commit/9b4fa844d83dff2100e682f572109326be6194cb"}, {"sha": "3b8f1fa2b6369c40cdd3d3030e37ce3308d63caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8f1fa2b6369c40cdd3d3030e37ce3308d63caf", "html_url": "https://github.com/rust-lang/rust/commit/3b8f1fa2b6369c40cdd3d3030e37ce3308d63caf"}], "stats": {"total": 111, "additions": 45, "deletions": 66}, "files": [{"sha": "fe7808bad5d764791b8b2aac660b9d889579c76e", "filename": "src/libcargo/pgp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fpgp.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -12,7 +12,7 @@ use core::os;\n use core::path::Path;\n use core::run;\n \n-pub fn gpgv(args: ~[~str]) -> { status: int, out: ~str, err: ~str } {\n+pub fn gpgv(args: ~[~str]) -> run::ProgramOutput {\n     return run::program_output(~\"gpgv\", args);\n }\n "}, {"sha": "aa4a7546f02397e0cb45a61fc6c7894a4a41312c", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -51,9 +51,6 @@\n //! * s - str (any flavor)\n //! * ? - arbitrary type (does not use the to_str trait)\n \n-// Transitional\n-#[allow(structural_records)]; // Macros -- needs a snapshot\n-\n /*\n Syntax Extension: fmt\n \n@@ -619,11 +616,11 @@ pub mod rt {\n             let padstr = str::from_chars(vec::from_elem(diff, padchar));\n             return s + padstr;\n         }\n-        let {might_zero_pad, signed} = match mode {\n-          PadNozero => {might_zero_pad:false, signed:false},\n-          PadSigned => {might_zero_pad:true,  signed:true },\n-          PadFloat => {might_zero_pad:true,  signed:true},\n-          PadUnsigned => {might_zero_pad:true,  signed:false}\n+        let (might_zero_pad, signed) = match mode {\n+          PadNozero   => (false, true),\n+          PadSigned   => (true, true),\n+          PadFloat    => (true, true),\n+          PadUnsigned => (true, false)\n         };\n         pure fn have_precision(cv: Conv) -> bool {\n             return match cv.precision { CountImplied => false, _ => true };"}, {"sha": "3e3c327af5f68af2952e5c69eaef98594c859560", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -35,9 +35,6 @@ with destructors.\n \n */\n \n-// Transitional\n-#[allow(structural_records)];\n-\n use cast;\n use container::{Container, Mutable, Map, Set};\n use io;\n@@ -172,12 +169,14 @@ unsafe fn is_frame_in_segment(fp: *Word, segment: *StackSegment) -> bool {\n     return begin <= frame && frame <= end;\n }\n \n+struct Segment { segment: *StackSegment, boundary: bool }\n+\n // Find and return the segment containing the given frame pointer. At\n // stack segment boundaries, returns true for boundary, so that the\n // caller can do any special handling to identify where the correct\n // return address is in the stack frame.\n unsafe fn find_segment_for_frame(fp: *Word, segment: *StackSegment)\n-    -> {segment: *StackSegment, boundary: bool} {\n+    -> Segment {\n     // Check if frame is in either current frame or previous frame.\n     let in_segment = is_frame_in_segment(fp, segment);\n     let in_prev_segment = ptr::is_not_null((*segment).prev) &&\n@@ -191,16 +190,16 @@ unsafe fn find_segment_for_frame(fp: *Word, segment: *StackSegment)\n             is_frame_in_segment(fp, (*segment).next) {\n             segment = (*segment).next;\n         }\n-        return {segment: segment, boundary: false};\n+        return Segment {segment: segment, boundary: false};\n     }\n \n     // If frame is in previous frame, then we're at a boundary.\n     if !in_segment && in_prev_segment {\n-        return {segment: (*segment).prev, boundary: true};\n+        return Segment {segment: (*segment).prev, boundary: true};\n     }\n \n     // Otherwise, we're somewhere on the inside of the frame.\n-    return {segment: segment, boundary: false};\n+    return Segment {segment: segment, boundary: false};\n }\n \n type Memory = uint;\n@@ -224,7 +223,7 @@ unsafe fn walk_gc_roots(mem: Memory, sentinel: **Word, visitor: Visitor) {\n     for stackwalk::walk_stack |frame| {\n         unsafe {\n             let pc = last_ret;\n-            let {segment: next_segment, boundary: boundary} =\n+            let Segment {segment: next_segment, boundary: boundary} =\n                 find_segment_for_frame(frame.fp, segment);\n             segment = next_segment;\n             // Each stack segment is bounded by a morestack frame. The"}, {"sha": "38469c35cfa6c15ed157e23a5a5f4915a8efdb60", "filename": "src/libcore/os.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(structural_records)];\n-\n /*!\n  * Higher-level interfaces to libc::* functions and operating system services.\n  *\n@@ -318,33 +316,37 @@ pub fn waitpid(pid: pid_t) -> c_int {\n }\n \n \n+pub struct Pipe { mut in: c_int, mut out: c_int }\n+\n #[cfg(unix)]\n-pub fn pipe() -> {in: c_int, out: c_int} {\n+pub fn pipe() -> Pipe {\n     unsafe {\n-        let mut fds = {in: 0 as c_int, out: 0 as c_int};\n+        let mut fds = Pipe {mut in: 0 as c_int,\n+                        mut out: 0 as c_int };\n         assert (libc::pipe(ptr::mut_addr_of(&(fds.in))) == (0 as c_int));\n-        return {in: fds.in, out: fds.out};\n+        return Pipe {in: fds.in, out: fds.out};\n     }\n }\n \n \n \n #[cfg(windows)]\n-pub fn pipe() -> {in: c_int, out: c_int} {\n+pub fn pipe() -> Pipe {\n     unsafe {\n         // Windows pipes work subtly differently than unix pipes, and their\n         // inheritance has to be handled in a different way that I do not\n         // fully understand. Here we explicitly make the pipe non-inheritable,\n         // which means to pass it to a subprocess they need to be duplicated\n         // first, as in rust_run_program.\n-        let mut fds = { in: 0 as c_int, out: 0 as c_int };\n+        let mut fds = Pipe { mut in: 0 as c_int,\n+                    mut out: 0 as c_int };\n         let res = libc::pipe(ptr::mut_addr_of(&(fds.in)),\n                              1024 as c_uint,\n                              (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n         assert (res == 0 as c_int);\n         assert (fds.in != -1 as c_int && fds.in != 0 as c_int);\n         assert (fds.out != -1 as c_int && fds.in != 0 as c_int);\n-        return {in: fds.in, out: fds.out};\n+        return Pipe {in: fds.in, out: fds.out};\n     }\n }\n "}, {"sha": "10aa4e41a0d780d3768d3cfaf214cd2310950a1d", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -82,8 +82,7 @@ bounded and unbounded protocols allows for less code duplication.\n \n */\n \n-// Transitional -- needs snapshot\n-#[allow(structural_records)];\n+#[allow(structural_records)]; // Macros -- needs another snapshot\n \n use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};"}, {"sha": "4369b29ba52be95cd90c052d6b4d6edeafecc3bf", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -187,18 +187,7 @@ pub trait Ptr<T> {\n     pure fn offset(count: uint) -> Self;\n }\n \n-#[cfg(stage0)]\n-unsafe fn memmove32(dst: *mut u8, src: *const u8, count: u32) {\n-    libc::memmove(dst as *c_void, src as *c_void, count as size_t);\n-}\n-#[cfg(stage0)]\n-unsafe fn memmove64(dst: *mut u8, src: *const u8, count: u64) {\n-    libc::memmove(dst as *c_void, src as *c_void, count as size_t);\n-}\n-\n #[abi=\"rust-intrinsic\"]\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n pub extern {\n     fn memmove32(dst: *mut u8, src: *u8, size: u32);\n     fn memmove64(dst: *mut u8, src: *u8, size: u64);"}, {"sha": "43ecf350ff3cbae8a6382f861a87f50d9637f7d0", "filename": "src/libcore/run.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(structural_records)];\n-\n //! Process spawning\n use cast;\n use io;\n@@ -301,6 +299,8 @@ fn read_all(rd: io::Reader) -> ~str {\n     str::from_bytes(buf)\n }\n \n+pub struct ProgramOutput {status: int, out: ~str, err: ~str}\n+\n /**\n  * Spawns a process, waits for it to exit, and returns the exit code, and\n  * contents of stdout and stderr.\n@@ -315,8 +315,7 @@ fn read_all(rd: io::Reader) -> ~str {\n  * A record, {status: int, out: str, err: str} containing the exit code,\n  * the contents of stdout and the contents of stderr.\n  */\n-pub fn program_output(prog: &str, args: &[~str]) ->\n-   {status: int, out: ~str, err: ~str} {\n+pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n     unsafe {\n         let pipe_in = os::pipe();\n         let pipe_out = os::pipe();\n@@ -371,7 +370,9 @@ pub fn program_output(prog: &str, args: &[~str]) ->\n             };\n             count -= 1;\n         };\n-        return {status: status, out: move outs, err: move errs};\n+        return ProgramOutput {status: status,\n+                              out: move outs,\n+                              err: move errs};\n     }\n }\n "}, {"sha": "90b18599620cb0d76f0f05f8184babd0686c6317", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5637226d85f251c74911389f3ef21adde393d0a/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=e5637226d85f251c74911389f3ef21adde393d0a", "patch": "@@ -14,6 +14,7 @@ use core::cmp;\n use core::os;\n use core::result;\n use core::run;\n+use core::run::ProgramOutput;\n use core::vec;\n use core::result::Result;\n use std::getopts;\n@@ -104,29 +105,18 @@ pub fn default_config(input_crate: &Path) -> Config {\n     }\n }\n \n-struct ProcOut {\n-    status: int,\n-    out: ~str,\n-    err: ~str\n-}\n-\n-type ProgramOutput = fn~((&str), (&[~str])) -> ProcOut;\n+type Process = fn~((&str), (&[~str])) -> ProgramOutput;\n \n-pub fn mock_program_output(_prog: &str, _args: &[~str]) -> ProcOut {\n-    ProcOut {\n+pub fn mock_program_output(_prog: &str, _args: &[~str]) -> ProgramOutput {\n+    ProgramOutput {\n         status: 0,\n         out: ~\"\",\n         err: ~\"\"\n     }\n }\n \n-pub fn program_output(prog: &str, args: &[~str]) -> ProcOut {\n-    let {status, out, err} = run::program_output(prog, args);\n-    ProcOut {\n-        status: status,\n-        out: out,\n-        err: err\n-    }\n+pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n+    run::program_output(prog, args)\n }\n \n pub fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n@@ -135,7 +125,7 @@ pub fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n \n pub fn parse_config_(\n     args: &[~str],\n-    program_output: ProgramOutput\n+    program_output: Process\n ) -> Result<Config, ~str> {\n     let args = args.tail();\n     let opts = vec::unzip(opts()).first();\n@@ -159,7 +149,7 @@ pub fn parse_config_(\n fn config_from_opts(\n     input_crate: &Path,\n     matches: &getopts::Matches,\n-    program_output: ProgramOutput\n+    program_output: Process\n ) -> Result<Config, ~str> {\n \n     let config = default_config(input_crate);\n@@ -235,7 +225,7 @@ fn parse_output_style(output_style: &str) -> Result<OutputStyle, ~str> {\n fn maybe_find_pandoc(\n     config: &Config,\n     maybe_pandoc_cmd: Option<~str>,\n-    program_output: ProgramOutput\n+    program_output: Process\n ) -> Result<Option<~str>, ~str> {\n     if config.output_format != PandocHtml {\n         return result::Ok(maybe_pandoc_cmd);\n@@ -272,8 +262,9 @@ fn should_find_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> ProcOut {\n-        ProcOut {\n+    let mock_program_output = fn~(_prog: &str, _args: &[~str])\n+        -> ProgramOutput {\n+        ProgramOutput {\n             status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\"\n         }\n     };\n@@ -287,8 +278,9 @@ fn should_error_with_no_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str]) -> ProcOut {\n-        ProcOut {\n+    let mock_program_output = fn~(_prog: &str, _args: &[~str])\n+        -> ProgramOutput {\n+        ProgramOutput {\n             status: 1, out: ~\"\", err: ~\"\"\n         }\n     };"}]}