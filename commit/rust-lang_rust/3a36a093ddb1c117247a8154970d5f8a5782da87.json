{"sha": "3a36a093ddb1c117247a8154970d5f8a5782da87", "node_id": "C_kwDOAAsO6NoAKDNhMzZhMDkzZGRiMWMxMTcyNDdhODE1NDk3MGQ1ZjhhNTc4MmRhODc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T22:11:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-23T05:56:40Z"}, "message": "Rename AliasEq -> AliasRelate", "tree": {"sha": "a056fdb0c960275808ee57a2f10b125b87c3e6c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a056fdb0c960275808ee57a2f10b125b87c3e6c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a36a093ddb1c117247a8154970d5f8a5782da87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a36a093ddb1c117247a8154970d5f8a5782da87", "html_url": "https://github.com/rust-lang/rust/commit/3a36a093ddb1c117247a8154970d5f8a5782da87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a36a093ddb1c117247a8154970d5f8a5782da87/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dc3fd7c05010654b4d80b87eac8c937e4808607", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc3fd7c05010654b4d80b87eac8c937e4808607", "html_url": "https://github.com/rust-lang/rust/commit/5dc3fd7c05010654b4d80b87eac8c937e4808607"}], "stats": {"total": 110, "additions": 57, "deletions": 53}, "files": [{"sha": "703c845eafa28220f7607a0f5f5357bb8e75dd70", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -1335,7 +1335,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::RegionOutlives(_) | ty::Clause::ConstArgHasType(..) => bug!(),\n                 },\n                 ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(_, _, _)\n                 | ty::PredicateKind::Subtype(_)"}, {"sha": "7f1e4ccc9647b79de5f0dde67540ba25d40583d3", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -528,7 +528,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n         | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-        | ty::PredicateKind::AliasEq(..)\n+        | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)\n         | ty::PredicateKind::Coerce(_)"}, {"sha": "357deb07b8f31ef930c3d74f2c9a1214cfa0f998", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                     | ty::PredicateKind::WellFormed(..)\n-                    | ty::PredicateKind::AliasEq(..)\n+                    | ty::PredicateKind::AliasRelate(..)\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)"}, {"sha": "3def97bca4789c95020cad0d09656461c777be2e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n                 | ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 // N.B., this predicate is created by breaking down a"}, {"sha": "0eff5c956ef642e06d1dfc9ff5d234c5fa778365", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             }\n         });"}, {"sha": "3fadc243dcd7a7d49aa16fe8dec344aba589c22e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -842,7 +842,7 @@ pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n         let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n \n         self.register_predicates([ty::Binder::dummy(if self.tcx().trait_solver_next() {\n-            ty::PredicateKind::AliasEq(a.into(), b.into(), ty::AliasRelationDirection::Equate)\n+            ty::PredicateKind::AliasRelate(a.into(), b.into(), ty::AliasRelationDirection::Equate)\n         } else {\n             ty::PredicateKind::ConstEquate(a, b)\n         })]);\n@@ -852,14 +852,14 @@ pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n     ///\n     /// If they aren't equal then the relation doesn't hold.\n     fn register_type_equate_obligation(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) {\n-        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::AliasEq(\n+        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::AliasRelate(\n             a.into(),\n             b.into(),\n             self.alias_relate_direction(),\n         ))]);\n     }\n \n-    /// Relation direction emitted for `AliasEq` predicates\n+    /// Relation direction emitted for `AliasRelate` predicates\n     fn alias_relate_direction(&self) -> ty::AliasRelationDirection;\n }\n "}, {"sha": "048dad3a48bc2a8c623bc893c095829957b2fe87", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -22,7 +22,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n             | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n             | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::WellFormed(..)"}, {"sha": "fa6529dfa93ec886216f9961857f28798105a9fb", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -26,7 +26,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             // completely change the normalization routine with the new solver.\n             //\n             // The new solver correctly handles projection equality so this hack\n-            // is not necessary. if re-enabled it should emit `PredicateKind::AliasEq`\n+            // is not necessary. if re-enabled it should emit `PredicateKind::AliasRelate`\n             // not `PredicateKind::Clause(Clause::Projection(..))` as in the new solver\n             // `Projection` is used as `normalizes-to` which will fail for `<T as Trait>::Assoc eq ?0`.\n             return projection_ty.to_ty(self.tcx);"}, {"sha": "0d2faeba5fc0fe73021a29f9edc5ca59f308984f", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -293,7 +293,7 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Nothing to elaborate\n             }\n             ty::PredicateKind::Ambiguous => {}\n-            ty::PredicateKind::AliasEq(..) => {\n+            ty::PredicateKind::AliasRelate(..) => {\n                 // No\n             }\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {"}, {"sha": "f8dd8299312d857d8003c0b9947f31606de2602b", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -1601,7 +1601,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global\n                     Clause(Clause::Projection(..)) |\n-                    AliasEq(..) |\n+                    AliasRelate(..) |\n                     // Ignore bounds that a user can't type\n                     WellFormed(..) |\n                     ObjectSafe(..) |"}, {"sha": "5a6ee1238112cb14dc2207cf463a1d1bbca256f5", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -288,7 +288,7 @@ impl FlagComputation {\n                 self.add_ty(ty);\n             }\n             ty::PredicateKind::Ambiguous => {}\n-            ty::PredicateKind::AliasEq(t1, t2, _) => {\n+            ty::PredicateKind::AliasRelate(t1, t2, _) => {\n                 self.add_term(t1);\n                 self.add_term(t2);\n             }"}, {"sha": "4ab3df917e34c3960cdc62128591bfee4b44a1b2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -543,7 +543,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n             | PredicateKind::Clause(Clause::Projection(_))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::ObjectSafe(_)\n             | PredicateKind::ClosureKind(_, _, _)\n             | PredicateKind::Subtype(_)\n@@ -640,7 +640,7 @@ pub enum PredicateKind<'tcx> {\n     /// This predicate requires two terms to be equal to eachother.\n     ///\n     /// Only used for new solver\n-    AliasEq(Term<'tcx>, Term<'tcx>, AliasRelationDirection),\n+    AliasRelate(Term<'tcx>, Term<'tcx>, AliasRelationDirection),\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n@@ -1224,7 +1224,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::Trait(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Projection(..))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1245,7 +1245,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::Projection(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Trait(..))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1267,7 +1267,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::Trait(..))\n             | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::Clause(Clause::Projection(..))\n-            | PredicateKind::AliasEq(..)\n+            | PredicateKind::AliasRelate(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))"}, {"sha": "ad5c9d93b470475df0a29a6086daddd55e33e3fb", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -2848,7 +2848,7 @@ define_print_and_forward_display! {\n             }\n             ty::PredicateKind::Ambiguous => p!(\"ambiguous\"),\n             // TODO\n-            ty::PredicateKind::AliasEq(t1, t2, _) => p!(print(t1), \" == \", print(t2)),\n+            ty::PredicateKind::AliasRelate(t1, t2, _) => p!(print(t1), \" == \", print(t2)),\n         }\n     }\n "}, {"sha": "ad5f33d34dc2cb483c3ab8618b7bf58d0c15738e", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             }\n             ty::PredicateKind::Ambiguous => write!(f, \"Ambiguous\"),\n             // TODO\n-            ty::PredicateKind::AliasEq(t1, t2, _) => write!(f, \"AliasEq({t1:?}, {t2:?})\"),\n+            ty::PredicateKind::AliasRelate(t1, t2, _) => write!(f, \"AliasRelate({t1:?}, {t2:?})\"),\n         }\n     }\n }"}, {"sha": "3be0160d56173d40a6e8878a44ec161220334fb6", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -180,7 +180,7 @@ where\n             | ty::PredicateKind::ConstEquate(_, _)\n             | ty::PredicateKind::TypeWellFormedFromEnv(_)\n             | ty::PredicateKind::Ambiguous\n-            | ty::PredicateKind::AliasEq(..) => bug!(\"unexpected predicate: {:?}\", predicate),\n+            | ty::PredicateKind::AliasRelate(..) => bug!(\"unexpected predicate: {:?}\", predicate),\n         }\n     }\n "}, {"sha": "4cfea28475732c3885866de1cd8e9bedffd7bf6c", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -223,9 +223,11 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(lhs, rhs, direction) => {\n-                    self.compute_alias_eq_goal(Goal { param_env, predicate: (lhs, rhs, direction) })\n-                }\n+                ty::PredicateKind::AliasRelate(lhs, rhs, direction) => self\n+                    .compute_alias_relate_goal(Goal {\n+                        param_env,\n+                        predicate: (lhs, rhs, direction),\n+                    }),\n             }\n         } else {\n             let kind = self.infcx.instantiate_binder_with_placeholders(kind);"}, {"sha": "01f171762ab67e33698f30190842458db7b05897", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         MismatchedProjectionTypes { err: TypeError::Mismatch },\n                                     )\n                                 }\n-                                ty::PredicateKind::AliasEq(_, _, _) => {\n+                                ty::PredicateKind::AliasRelate(_, _, _) => {\n                                     FulfillmentErrorCode::CodeProjectionError(\n                                         MismatchedProjectionTypes { err: TypeError::Mismatch },\n                                     )"}, {"sha": "5cda9da3c5a319d182644174ac025ed0e6b0fa30", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n-    fn compute_alias_eq_goal(\n+    fn compute_alias_relate_goal(\n         &mut self,\n         goal: Goal<'tcx, (ty::Term<'tcx>, ty::Term<'tcx>, ty::AliasRelationDirection)>,\n     ) -> QueryResult<'tcx> {\n@@ -204,12 +204,12 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n \n         if lhs.is_infer() || rhs.is_infer() {\n             bug!(\n-                \"`AliasEq` goal with an infer var on lhs or rhs which should have been instantiated\"\n+                \"`AliasRelate` goal with an infer var on lhs or rhs which should have been instantiated\"\n             );\n         }\n \n         match (lhs.to_projection_term(tcx), rhs.to_projection_term(tcx)) {\n-            (None, None) => bug!(\"`AliasEq` goal without an alias on either lhs or rhs\"),\n+            (None, None) => bug!(\"`AliasRelate` goal without an alias on either lhs or rhs\"),\n \n             // RHS is not a projection, only way this is true is if LHS normalizes-to RHS\n             (Some(alias_lhs), None) => evaluate_normalizes_to(self, alias_lhs, rhs, direction),\n@@ -220,7 +220,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             }\n \n             (Some(alias_lhs), Some(alias_rhs)) => {\n-                debug!(\"compute_alias_eq_goal: both sides are aliases\");\n+                debug!(\"compute_alias_relate_goal: both sides are aliases\");\n \n                 let candidates = vec![\n                     // LHS normalizes-to RHS\n@@ -229,7 +229,9 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                     evaluate_normalizes_to(self, alias_rhs, lhs, direction.invert()),\n                     // Relate via substs\n                     self.probe(|ecx| {\n-                        debug!(\"compute_alias_eq_goal: alias defids are equal, equating substs\");\n+                        debug!(\n+                            \"compute_alias_relate_goal: alias defids are equal, equating substs\"\n+                        );\n \n                         ecx.add_goals(\n                             match direction {"}, {"sha": "6b3a59b1ed545f4e5926530c8cdd68387b0ae9f5", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -832,7 +832,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 // the `ParamEnv`.\n                 ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)"}, {"sha": "617d53b609dbcd4bf81644a1c42abf07ab45f00b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -1276,9 +1276,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         \"TypeWellFormedFromEnv predicate should only exist in the environment\"\n                     ),\n \n-                    ty::PredicateKind::AliasEq(..) => span_bug!(\n+                    ty::PredicateKind::AliasRelate(..) => span_bug!(\n                         span,\n-                        \"AliasEq predicate should never be the predicate cause of a SelectionError\"\n+                        \"AliasRelate predicate should never be the predicate cause of a SelectionError\"\n                     ),\n \n                     ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {"}, {"sha": "07e31e87bfb4646bea05120ab4403b5603d67f27", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -361,8 +361,8 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(..) => {\n-                    bug!(\"AliasEq is only used for new solver\")\n+                ty::PredicateKind::AliasRelate(..) => {\n+                    bug!(\"AliasRelate is only used for new solver\")\n                 }\n             },\n             Some(pred) => match pred {\n@@ -630,8 +630,8 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(..) => {\n-                    bug!(\"AliasEq is only used for new solver\")\n+                ty::PredicateKind::AliasRelate(..) => {\n+                    bug!(\"AliasRelate is only used for new solver\")\n                 }\n                 ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n                     match self.selcx.infcx.at(&obligation.cause, obligation.param_env).eq("}, {"sha": "5d2af5ff33c8fbf292f4d5897bbcd8b7cfa11e3d", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -335,7 +335,7 @@ fn predicate_references_self<'tcx>(\n             has_self_ty(&ty.into()).then_some(sp)\n         }\n \n-        ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n+        ty::PredicateKind::AliasRelate(..) => bug!(\"`AliasRelate` not allowed as assumption\"),\n \n         ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)\n@@ -395,7 +395,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => false,\n         }"}, {"sha": "bffefdf359ad5c407ed27da9de3230a27db90ab0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -977,8 +977,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n                 }\n-                ty::PredicateKind::AliasEq(..) => {\n-                    bug!(\"AliasEq is only used for new solver\")\n+                ty::PredicateKind::AliasRelate(..) => {\n+                    bug!(\"AliasRelate is only used for new solver\")\n                 }\n                 ty::PredicateKind::Ambiguous => Ok(EvaluatedToAmbig),\n                 ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {"}, {"sha": "ec5bd982a3c987c2df50fa916cbb62bd98955f6c", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -191,8 +191,8 @@ pub fn predicate_obligations<'tcx>(\n         ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n             bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n         }\n-        ty::PredicateKind::AliasEq(..) => {\n-            bug!(\"We should only wf check where clauses and `AliasEq` is not a `Clause`\")\n+        ty::PredicateKind::AliasRelate(..) => {\n+            bug!(\"We should only wf check where clauses and `AliasRelate` is not a `Clause`\")\n         }\n     }\n \n@@ -936,7 +936,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n                 ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(\n                     ref t,"}, {"sha": "0e9bccba8d4c56b727dad49edcce15fbb08e87f9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -119,7 +119,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 },\n                 ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n@@ -215,7 +215,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::Ambiguous\n@@ -652,7 +652,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::ObjectSafe(..)\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n@@ -787,7 +787,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-            | ty::PredicateKind::AliasEq(..)\n+            | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)"}, {"sha": "f5bba14d2fb9cb6b1f866ec87e8722be3680f61e", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -86,7 +86,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n             if obligation.predicate.has_non_region_infer() {\n                 match obligation.predicate.kind().skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Projection(..))\n-                    | ty::PredicateKind::AliasEq(..) => {\n+                    | ty::PredicateKind::AliasRelate(..) => {\n                         ocx.register_obligation(obligation.clone());\n                     }\n                     _ => {}\n@@ -110,7 +110,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n-                | ty::PredicateKind::AliasEq(..)\n+                | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n \n                 // We need to search through *all* WellFormed predicates"}, {"sha": "126a494f34fd6870773e704e97a5e357ecdcd91f", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -61,7 +61,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         ty::PredicateKind::Clause(ty::Clause::Trait(..))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n         | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-        | ty::PredicateKind::AliasEq(..)\n+        | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)"}, {"sha": "44dfff0efbe945ba92c90ba9acea1fcb2b1bb807", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -324,7 +324,7 @@ pub(crate) fn clean_predicate<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n         ty::PredicateKind::Subtype(..)\n-        | ty::PredicateKind::AliasEq(..)\n+        | ty::PredicateKind::AliasRelate(..)\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)"}, {"sha": "58f7742ab8764ff382dacf96a67b1858d673a3dc", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a36a093ddb1c117247a8154970d5f8a5782da87/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a36a093ddb1c117247a8154970d5f8a5782da87/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=3a36a093ddb1c117247a8154970d5f8a5782da87", "patch": "@@ -37,7 +37,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateKind::AliasEq(..) => panic!(\"alias eq predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::AliasRelate(..) => panic!(\"alias relate predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),"}]}