{"sha": "582fbb1d62420d8d85f364d06669038f12b7e423", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmZiYjFkNjI0MjBkOGQ4NWYzNjRkMDY2NjkwMzhmMTJiN2U0MjM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-21T12:24:48Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:14Z"}, "message": "use From specializations on extend if extended Vec is empty\n\nthis enables in-place iteration and allocation reuse in additional cases", "tree": {"sha": "c2e783a96da45e4c88d691e2b24f3bde91be9c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2e783a96da45e4c88d691e2b24f3bde91be9c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582fbb1d62420d8d85f364d06669038f12b7e423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582fbb1d62420d8d85f364d06669038f12b7e423", "html_url": "https://github.com/rust-lang/rust/commit/582fbb1d62420d8d85f364d06669038f12b7e423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582fbb1d62420d8d85f364d06669038f12b7e423/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a596ff36b55a37e7a74abd0504ff895a3d2fba6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a596ff36b55a37e7a74abd0504ff895a3d2fba6f", "html_url": "https://github.com/rust-lang/rust/commit/a596ff36b55a37e7a74abd0504ff895a3d2fba6f"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "ffd6f5b31d43817feaefdba4ec2c31a4cb0373da", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/582fbb1d62420d8d85f364d06669038f12b7e423/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582fbb1d62420d8d85f364d06669038f12b7e423/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=582fbb1d62420d8d85f364d06669038f12b7e423", "patch": "@@ -2080,7 +2080,16 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n+        if self.capacity() > 0 {\n+            <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n+        } else {\n+            // if self has no allocation then use the more powerful from_iter specializations\n+            let other = SpecFrom::from_iter(iter.into_iter());\n+            // replace self, don't run drop since self was empty\n+            unsafe {\n+                ptr::write(self, other);\n+            }\n+        }\n     }\n \n     #[inline]\n@@ -2121,6 +2130,8 @@ where\n                 vector\n             }\n         };\n+        // must delegate to spec_extend() since extend() itself delegates\n+        // to spec_from for empty Vecs\n         <Vec<T> as SpecExtend<T, I>>::spec_extend(&mut vector, iterator);\n         vector\n     }\n@@ -2230,7 +2241,9 @@ impl<T> SpecFrom<T, IntoIter<T>> for Vec<T> {\n         }\n \n         let mut vec = Vec::new();\n-        vec.extend(iterator);\n+        // must delegate to spec_extend() since extend() itself delegates\n+        // to spec_from for empty Vecs\n+        vec.spec_extend(iterator);\n         vec\n     }\n }\n@@ -2475,7 +2488,16 @@ impl<T> Vec<T> {\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n-        self.spec_extend(iter.into_iter())\n+        if self.capacity() > 0 {\n+            self.spec_extend(iter.into_iter())\n+        } else {\n+            // if self has no allocation then use the more powerful from_iter specializations\n+            let other = SpecFrom::from_iter(iter.into_iter());\n+            // replace self, don't run drop since self was empty\n+            unsafe {\n+                ptr::write(self, other);\n+            }\n+        }\n     }\n \n     #[inline]"}]}