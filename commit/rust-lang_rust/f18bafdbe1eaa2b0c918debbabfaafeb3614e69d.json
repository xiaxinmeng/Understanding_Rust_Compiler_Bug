{"sha": "f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOGJhZmRiZTFlYWEyYjBjOTE4ZGViYmFiZmFhZmViMzYxNGU2OWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T15:40:22Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T15:40:22Z"}, "message": "Refactor `bitslice`: distinguish `usize` for indexing vs word type being indexed.", "tree": {"sha": "26c872f33e512f0f5c562bb4feed8e111d88072e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c872f33e512f0f5c562bb4feed8e111d88072e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "html_url": "https://github.com/rust-lang/rust/commit/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59008cbd71e0d8725d314d60b90ca9f66ee69064", "url": "https://api.github.com/repos/rust-lang/rust/commits/59008cbd71e0d8725d314d60b90ca9f66ee69064", "html_url": "https://github.com/rust-lang/rust/commit/59008cbd71e0d8725d314d60b90ca9f66ee69064"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "1c01e98cf859cdaeba273abbe4165123764a4176", "filename": "src/librustc_borrowck/bitslice.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d/src%2Flibrustc_borrowck%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d/src%2Flibrustc_borrowck%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fbitslice.rs?ref=f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "patch": "@@ -10,20 +10,22 @@\n \n use std::mem;\n \n-/// `BitSlice` provides helper methods for treating a `[usize]`\n+pub type Word = usize;\n+\n+/// `BitSlice` provides helper methods for treating a `[Word]`\n /// as a bitvector.\n pub trait BitSlice {\n     fn clear_bit(&mut self, idx: usize) -> bool;\n     fn set_bit(&mut self, idx: usize) -> bool;\n     fn get_bit(&self, idx: usize) -> bool;\n }\n \n-impl BitSlice for [usize] {\n+impl BitSlice for [Word] {\n     /// Clears bit at `idx` to 0; returns true iff this changed `self.`\n     fn clear_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"clear_bit: words={} idx={}\",\n-               bits_to_string(words, words.len() * mem::size_of::<usize>()), bit_str(idx));\n+               bits_to_string(words, words.len() * mem::size_of::<Word>()), bit_str(idx));\n         let BitLookup { word, bit_in_word, bit_mask } = bit_lookup(idx);\n         debug!(\"word={} bit_in_word={} bit_mask={}\", word, bit_in_word, bit_mask);\n         let oldv = words[word];\n@@ -36,7 +38,7 @@ impl BitSlice for [usize] {\n     fn set_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"set_bit: words={} idx={}\",\n-               bits_to_string(words, words.len() * mem::size_of::<usize>()), bit_str(idx));\n+               bits_to_string(words, words.len() * mem::size_of::<Word>()), bit_str(idx));\n         let BitLookup { word, bit_in_word, bit_mask } = bit_lookup(idx);\n         debug!(\"word={} bit_in_word={} bit_mask={}\", word, bit_in_word, bit_mask);\n         let oldv = words[word];\n@@ -54,31 +56,31 @@ impl BitSlice for [usize] {\n }\n \n struct BitLookup {\n-    /// An index of the word holding the bit in original `[usize]` of query.\n+    /// An index of the word holding the bit in original `[Word]` of query.\n     word: usize,\n     /// Index of the particular bit within the word holding the bit.\n     bit_in_word: usize,\n     /// Word with single 1-bit set corresponding to where the bit is located.\n-    bit_mask: usize,\n+    bit_mask: Word,\n }\n \n #[inline]\n fn bit_lookup(bit: usize) -> BitLookup {\n-    let usize_bits = mem::size_of::<usize>() * 8;\n-    let word = bit / usize_bits;\n-    let bit_in_word = bit % usize_bits;\n+    let word_bits = mem::size_of::<Word>() * 8;\n+    let word = bit / word_bits;\n+    let bit_in_word = bit % word_bits;\n     let bit_mask = 1 << bit_in_word;\n     BitLookup { word: word, bit_in_word: bit_in_word, bit_mask: bit_mask }\n }\n \n \n-fn bit_str(bit: usize) -> String {\n+fn bit_str(bit: Word) -> String {\n     let byte = bit >> 3;\n     let lobits = 1 << (bit & 0b111);\n     format!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n }\n \n-pub fn bits_to_string(words: &[usize], bits: usize) -> String {\n+pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n     let mut result = String::new();\n     let mut sep = '[';\n "}]}