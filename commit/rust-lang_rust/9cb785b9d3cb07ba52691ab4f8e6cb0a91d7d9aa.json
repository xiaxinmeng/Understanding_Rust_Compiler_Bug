{"sha": "9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "node_id": "C_kwDOAAsO6NoAKDljYjc4NWI5ZDNjYjA3YmE1MjY5MWFiNGY4ZTZjYjBhOTFkN2Q5YWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-12T15:44:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-12T15:44:39Z"}, "message": "Rollup merge of #112546 - lcnr:opaque-type-cleanup, r=compiler-errors\n\nnew solver: extend assert to other aliases", "tree": {"sha": "1274c7f99fee521b32bad48fa0d5a5fc76470e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1274c7f99fee521b32bad48fa0d5a5fc76470e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhz1nCRBK7hj4Ov3rIwAATtIIAG5NwHmVaNEOajgliNoLyksq\nB43SPtwMP32DsAWe3x9UX4BBQasIlY/+hsjJ+uq04MKBqE/9w8/ZJ0P/gBxAnTJ/\no/uCqjWpcA8aB8/TKFNQzZN2cEzSIC79X0/GsB5d2vqQp+p5pymV+JWz0wmsqnPG\nyV+cq9SRvWZXIqc9B2fGirKVz6COdBh3Rg7sD9xpJ/8ebSw/vms9wtw/zFgsyVn/\nRT65Ckg5JhA2pkh7PfSLu1L5dMiOsu5m1Ezb4CmOc3XOzOFkxsJcWNZ+NXOeHfpR\nxIkd6aigDAHNDmG2H6ckIRZGSXiRGa3vhp2RJzjFcckPy2axAdUC6YfY4Lgpy2Q=\n=mqCk\n-----END PGP SIGNATURE-----\n", "payload": "tree 1274c7f99fee521b32bad48fa0d5a5fc76470e58\nparent 9c4cff424e0fce039aacf3524d6e753c67dec13b\nparent e74d1cd581411a8d307ad9ee286f6f8fc785e002\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686584679 +0200\ncommitter GitHub <noreply@github.com> 1686584679 +0200\n\nRollup merge of #112546 - lcnr:opaque-type-cleanup, r=compiler-errors\n\nnew solver: extend assert to other aliases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "html_url": "https://github.com/rust-lang/rust/commit/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4cff424e0fce039aacf3524d6e753c67dec13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c4cff424e0fce039aacf3524d6e753c67dec13b", "html_url": "https://github.com/rust-lang/rust/commit/9c4cff424e0fce039aacf3524d6e753c67dec13b"}, {"sha": "e74d1cd581411a8d307ad9ee286f6f8fc785e002", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74d1cd581411a8d307ad9ee286f6f8fc785e002", "html_url": "https://github.com/rust-lang/rust/commit/e74d1cd581411a8d307ad9ee286f6f8fc785e002"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "bb2bd2faec20823e58140fc0fc9a2cbd56580d61", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "patch": "@@ -34,7 +34,7 @@ use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::DUMMY_SP;\n \n@@ -103,12 +103,12 @@ impl<'tcx> InferCtxt<'tcx> {\n \n             // We don't expect `TyVar` or `Fresh*` vars at this point with lazy norm.\n             (\n-                ty::Alias(AliasKind::Projection, _),\n+                ty::Alias(..),\n                 ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)),\n             )\n             | (\n                 ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)),\n-                ty::Alias(AliasKind::Projection, _),\n+                ty::Alias(..),\n             ) if self.next_trait_solver() => {\n                 bug!()\n             }"}, {"sha": "1b749b9c854cd412e879068ada7225fe9d40f92e", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "patch": "@@ -320,7 +320,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         candidates\n     }\n \n-    /// If the self type of a goal is a projection, computing the relevant candidates is difficult.\n+    /// If the self type of a goal is an alias, computing the relevant candidates is difficult.\n     ///\n     /// To deal with this, we first try to normalize the self type and add the candidates for the normalized\n     /// self type to the list of candidates in case that succeeds. We also have to consider candidates with the"}]}