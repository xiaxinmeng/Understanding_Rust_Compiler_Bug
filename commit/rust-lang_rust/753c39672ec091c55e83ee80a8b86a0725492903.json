{"sha": "753c39672ec091c55e83ee80a8b86a0725492903", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2MzOTY3MmVjMDkxYzU1ZTgzZWU4MGE4Yjg2YTA3MjU0OTI5MDM=", "commit": {"author": {"name": "Matthew Kraai", "email": "kraai@ftbfs.org", "date": "2019-04-08T20:43:55Z"}, "committer": {"name": "Matthew Kraai", "email": "kraai@ftbfs.org", "date": "2019-04-17T16:35:22Z"}, "message": "Use lint pass macros\n\nFixes #3917.", "tree": {"sha": "598f594742c0b16a8e9cbb2f05f0330f8375ce02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598f594742c0b16a8e9cbb2f05f0330f8375ce02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753c39672ec091c55e83ee80a8b86a0725492903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753c39672ec091c55e83ee80a8b86a0725492903", "html_url": "https://github.com/rust-lang/rust/commit/753c39672ec091c55e83ee80a8b86a0725492903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753c39672ec091c55e83ee80a8b86a0725492903/comments", "author": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bb63383a84aa4383e71da3b973769310bf609a", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bb63383a84aa4383e71da3b973769310bf609a", "html_url": "https://github.com/rust-lang/rust/commit/24bb63383a84aa4383e71da3b973769310bf609a"}], "stats": {"total": 2694, "additions": 593, "deletions": 2101}, "files": [{"sha": "62650b5cbb782165eb603f1a4bad3cadc36f8ec9", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use std::f64::consts as f64;\n use syntax::ast::{FloatTy, Lit, LitKind};\n use syntax::symbol;\n@@ -53,20 +53,9 @@ const KNOWN_CONSTS: &[(f64, &str, usize)] = &[\n     (f64::SQRT_2, \"SQRT_2\", 5),\n ];\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(ApproxConstant => [APPROX_CONSTANT]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(APPROX_CONSTANT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ApproxConstant\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ApproxConstant {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Lit(lit) = &e.node {\n             check_lit(cx, lit, e);"}, {"sha": "d94cd668bddc6db21adf6a29fb0bef2052ecaba3", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::consts::constant_simple;\n use crate::utils::span_lint;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::source_map::Span;\n \n declare_clippy_lint! {\n@@ -48,15 +48,7 @@ pub struct Arithmetic {\n     const_span: Option<Span>,\n }\n \n-impl LintPass for Arithmetic {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INTEGER_ARITHMETIC, FLOAT_ARITHMETIC)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Arithmetic\"\n-    }\n-}\n+impl_lint_pass!(Arithmetic => [INTEGER_ARITHMETIC, FLOAT_ARITHMETIC]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {"}, {"sha": "ceea913233ee765f71907e3f102fba2284c5ef88", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::consts::{constant, Constant};\n use crate::syntax::ast::LitKind;\n@@ -29,17 +29,7 @@ declare_clippy_lint! {\n     \"`assert!(true)` / `assert!(false)` will be optimized out by the compiler, and should probably be replaced by a `panic!()` or `unreachable!()`\"\n }\n \n-pub struct AssertionsOnConstants;\n-\n-impl LintPass for AssertionsOnConstants {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![ASSERTIONS_ON_CONSTANTS]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"AssertionsOnConstants\"\n-    }\n-}\n+declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "98020303d37ee248d5a7e0f3d979a04c0924fab6", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n use crate::utils::{\n@@ -53,18 +53,7 @@ declare_clippy_lint! {\n     \"having a variable on both sides of an assign op\"\n }\n \n-#[derive(Copy, Clone, Default)]\n-pub struct AssignOps;\n-\n-impl LintPass for AssignOps {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ASSIGN_OP_PATTERN, MISREFACTORED_ASSIGN_OP)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"AssignOps\"\n-    }\n-}\n+declare_lint_pass!(AssignOps => [ASSIGN_OP_PATTERN, MISREFACTORED_ASSIGN_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n     #[allow(clippy::too_many_lines)]"}, {"sha": "45250e1eca629cec41924c74935a9a97f471adf0", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -12,7 +12,7 @@ use rustc::lint::{\n     LintContext, LintPass,\n };\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use semver::Version;\n use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n@@ -187,26 +187,15 @@ declare_clippy_lint! {\n     \"usage of `cfg_attr(rustfmt)` instead of `tool_attributes`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct AttrPass;\n+declare_lint_pass!(Attributes => [\n+    INLINE_ALWAYS,\n+    DEPRECATED_SEMVER,\n+    USELESS_ATTRIBUTE,\n+    EMPTY_LINE_AFTER_OUTER_ATTR,\n+    UNKNOWN_CLIPPY_LINTS,\n+]);\n \n-impl LintPass for AttrPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            INLINE_ALWAYS,\n-            DEPRECATED_SEMVER,\n-            USELESS_ATTRIBUTE,\n-            EMPTY_LINE_AFTER_OUTER_ATTR,\n-            UNKNOWN_CLIPPY_LINTS,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Attributes\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n         if let Some(items) = &attr.meta_item_list() {\n             if let Some(ident) = attr.ident() {\n@@ -506,20 +495,9 @@ fn is_present_in_source(cx: &LateContext<'_, '_>, span: Span) -> bool {\n     true\n }\n \n-#[derive(Copy, Clone)]\n-pub struct CfgAttrPass;\n-\n-impl LintPass for CfgAttrPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED_CFG_ATTR,)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DeprecatedCfgAttribute\"\n-    }\n-}\n+declare_lint_pass!(DeprecatedCfgAttribute => [DEPRECATED_CFG_ATTR]);\n \n-impl EarlyLintPass for CfgAttrPass {\n+impl EarlyLintPass for DeprecatedCfgAttribute {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n         if_chain! {\n             // check cfg_attr"}, {"sha": "71075500528e1030b8b898f0f676dec87ab9b351", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{span_lint, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::source_map::Span;\n@@ -107,14 +107,7 @@ impl BitMask {\n     }\n }\n \n-impl LintPass for BitMask {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BAD_BIT_MASK, INEFFECTIVE_BIT_MASK, VERBOSE_BIT_MASK)\n-    }\n-    fn name(&self) -> &'static str {\n-        \"BitMask\"\n-    }\n-}\n+impl_lint_pass!(BitMask => [BAD_BIT_MASK, INEFFECTIVE_BIT_MASK, VERBOSE_BIT_MASK]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "33463df14529d70c5dc7798f64dabee1169f59ae", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n \n declare_clippy_lint! {\n@@ -23,26 +23,19 @@ declare_clippy_lint! {\n }\n \n #[derive(Clone, Debug)]\n-pub struct BlackListedName {\n+pub struct BlacklistedName {\n     blacklist: FxHashSet<String>,\n }\n \n-impl BlackListedName {\n+impl BlacklistedName {\n     pub fn new(blacklist: FxHashSet<String>) -> Self {\n         Self { blacklist }\n     }\n }\n \n-impl LintPass for BlackListedName {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BLACKLISTED_NAME)\n-    }\n-    fn name(&self) -> &'static str {\n-        \"BlacklistedName\"\n-    }\n-}\n+impl_lint_pass!(BlacklistedName => [BLACKLISTED_NAME]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlackListedName {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlacklistedName {\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n         if let PatKind::Binding(.., ident, _) = pat.node {\n             if self.blacklist.contains(&ident.name.to_string()) {"}, {"sha": "1f20f5c41fccb90796099577040b9161e2408a39", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use matches::matches;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `if` conditions that use blocks to contain an\n@@ -42,18 +42,7 @@ declare_clippy_lint! {\n     \"complex blocks in conditions, e.g., `if { let x = true; x } ...`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct BlockInIfCondition;\n-\n-impl LintPass for BlockInIfCondition {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BLOCK_IN_IF_CONDITION_EXPR, BLOCK_IN_IF_CONDITION_STMT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"BlockInIfCondition\"\n-    }\n-}\n+declare_lint_pass!(BlockInIfCondition => [BLOCK_IN_IF_CONDITION_EXPR, BLOCK_IN_IF_CONDITION_STMT]);\n \n struct ExVisitor<'a, 'tcx: 'a> {\n     found_block: Option<&'tcx Expr>,"}, {"sha": "779cb3cf90f8467b388667f5f1c29d5049720d04", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n@@ -51,18 +51,7 @@ declare_clippy_lint! {\n // For each pairs, both orders are considered.\n const METHODS_WITH_NEGATION: [(&str, &str); 2] = [(\"is_some\", \"is_none\"), (\"is_err\", \"is_ok\")];\n \n-#[derive(Copy, Clone)]\n-pub struct NonminimalBool;\n-\n-impl LintPass for NonminimalBool {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NONMINIMAL_BOOL, LOGIC_BUG)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NonminimalBool\"\n-    }\n-}\n+declare_lint_pass!(NonminimalBool => [NONMINIMAL_BOOL, LOGIC_BUG]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n     fn check_fn("}, {"sha": "2ededb778643c0a367e8ef90a4594dd02c1710c1", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::{Name, UintTy};\n \n@@ -31,18 +31,7 @@ declare_clippy_lint! {\n     \"use of naive `<slice>.filter(|&x| x == y).count()` to count byte values\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct ByteCount;\n-\n-impl LintPass for ByteCount {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NAIVE_BYTECOUNT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ByteCount\"\n-    }\n-}\n+declare_lint_pass!(ByteCount => [NAIVE_BYTECOUNT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {"}, {"sha": "23532c4b04743167e397393afb509e2d542d4866", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::span_lint;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::{ast::*, source_map::DUMMY_SP};\n \n use cargo_metadata;\n@@ -56,19 +56,9 @@ fn is_empty_vec(value: &[String]) -> bool {\n     value.iter().all(std::string::String::is_empty)\n }\n \n-pub struct Pass;\n+declare_lint_pass!(CargoCommonMetadata => [CARGO_COMMON_METADATA]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CARGO_COMMON_METADATA)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CargoCommonMetadata\"\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for CargoCommonMetadata {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().no_deps().exec() {\n             metadata"}, {"sha": "ccf6d1830062fcb4bca1e609ee5d1e940d55a388", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::Attribute;\n use syntax::source_map::Span;\n \n@@ -38,15 +38,7 @@ impl CognitiveComplexity {\n     }\n }\n \n-impl LintPass for CognitiveComplexity {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(COGNITIVE_COMPLEXITY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CognitiveComplexity\"\n-    }\n-}\n+impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n     fn check<'a, 'tcx: 'a>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {"}, {"sha": "c1d39716083e8878b4e277a35743f95f6aed39e2", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -14,7 +14,7 @@\n \n use if_chain::if_chain;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast;\n \n use crate::utils::sugg::Sugg;\n@@ -71,18 +71,7 @@ declare_clippy_lint! {\n     \"`if`s that can be collapsed (e.g., `if x { if y { ... } }` and `else { if x { ... } }`)\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct CollapsibleIf;\n-\n-impl LintPass for CollapsibleIf {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(COLLAPSIBLE_IF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CollapsibleIf\"\n-    }\n-}\n+declare_lint_pass!(CollapsibleIf => [COLLAPSIBLE_IF]);\n \n impl EarlyLintPass for CollapsibleIf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {"}, {"sha": "50e1781d2cb511df6bdf4580fa186a84ba182a25", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::*;\n \n@@ -26,17 +26,7 @@ declare_clippy_lint! {\n     \"Using explicit `'static` lifetime for constants when elision rules would allow omitting them.\"\n }\n \n-pub struct StaticConst;\n-\n-impl LintPass for StaticConst {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CONST_STATIC_LIFETIME)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"StaticConst\"\n-    }\n-}\n+declare_lint_pass!(StaticConst => [CONST_STATIC_LIFETIME]);\n \n impl StaticConst {\n     // Recursively visit types"}, {"sha": "d1163e10279000d0504bb55f2f88da279ea18b46", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::Ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n@@ -103,18 +103,7 @@ declare_clippy_lint! {\n     \"`match` with identical arm bodies\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct CopyAndPaste;\n-\n-impl LintPass for CopyAndPaste {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CopyAndPaste\"\n-    }\n-}\n+declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "79e30f1a7d8aad3b993a72ee5a65fd241fcb041b", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n use rustc::hir::{Item, ItemKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for types that implement `Copy` as well as\n@@ -29,17 +29,7 @@ declare_clippy_lint! {\n     \"implementing `Iterator` on a `Copy` type\"\n }\n \n-pub struct CopyIterator;\n-\n-impl LintPass for CopyIterator {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![COPY_ITERATOR]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CopyIterator\"\n-    }\n-}\n+declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {"}, {"sha": "c54bafae56a1b11068b5eed8e5abdd54bcbaab92", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{snippet_opt, span_help_and_lint, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::Span;\n@@ -27,20 +27,9 @@ declare_clippy_lint! {\n     \"`dbg!` macro is intended as a debugging tool\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Pass;\n+declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DBG_MACRO)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DbgMacro\"\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for DbgMacro {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n         if mac.node.path == \"dbg\" {\n             if let Some(sugg) = tts_span(mac.node.tts.clone()).and_then(|span| snippet_opt(cx, span)) {"}, {"sha": "3e3663d6d0ae55350f9a9460bcb4e40cde2e296d", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n use crate::utils::{any_parent_is_automatically_derived, paths, span_lint_and_sugg};\n@@ -28,18 +28,7 @@ declare_clippy_lint! {\n     \"checks for literal calls to Default::default()\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct DefaultTraitAccess;\n-\n-impl LintPass for DefaultTraitAccess {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEFAULT_TRAIT_ACCESS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DefaultTraitAccess\"\n-    }\n-}\n+declare_lint_pass!(DefaultTraitAccess => [DEFAULT_TRAIT_ACCESS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "bf2845af13367e49cf6e4c5bad27a3773153a9a9", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n declare_clippy_lint! {\n@@ -62,17 +62,7 @@ declare_clippy_lint! {\n     \"implementing `Clone` explicitly on `Copy` types\"\n }\n \n-pub struct Derive;\n-\n-impl LintPass for Derive {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Derive\"\n-    }\n-}\n+declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {"}, {"sha": "4ad6554a213cb5ae0b7f7f556997fcbfd3fd071b", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::span_lint;\n use itertools::Itertools;\n use pulldown_cmark;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n@@ -33,28 +33,21 @@ declare_clippy_lint! {\n     \"presence of `_`, `::` or camel-case outside backticks in documentation\"\n }\n \n+#[allow(clippy::module_name_repetitions)]\n #[derive(Clone)]\n-pub struct Doc {\n+pub struct DocMarkdown {\n     valid_idents: FxHashSet<String>,\n }\n \n-impl Doc {\n+impl DocMarkdown {\n     pub fn new(valid_idents: FxHashSet<String>) -> Self {\n         Self { valid_idents }\n     }\n }\n \n-impl LintPass for Doc {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![DOC_MARKDOWN]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DocMarkdown\"\n-    }\n-}\n+impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN]);\n \n-impl EarlyLintPass for Doc {\n+impl EarlyLintPass for DocMarkdown {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &ast::Crate) {\n         check_attrs(cx, &self.valid_idents, &krate.attrs);\n     }"}, {"sha": "d64939d01298cd0769aa3356488843321e467d30", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n@@ -31,21 +31,11 @@ declare_clippy_lint! {\n     \"unnecessary double comparisons that can be simplified\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(DoubleComparisons => [DOUBLE_COMPARISONS]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DOUBLE_COMPARISONS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DoubleComparisons\"\n-    }\n-}\n-\n-impl<'a, 'tcx> Pass {\n+impl<'a, 'tcx> DoubleComparisons {\n     #[allow(clippy::similar_names)]\n-    fn check_binop(&self, cx: &LateContext<'a, 'tcx>, op: BinOpKind, lhs: &'tcx Expr, rhs: &'tcx Expr, span: Span) {\n+    fn check_binop(self, cx: &LateContext<'a, 'tcx>, op: BinOpKind, lhs: &'tcx Expr, rhs: &'tcx Expr, span: Span) {\n         let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (lhs.node.clone(), rhs.node.clone()) {\n             (ExprKind::Binary(lb, llhs, lrhs), ExprKind::Binary(rb, rlhs, rrhs)) => {\n                 (lb.node, llhs, lrhs, rb.node, rlhs, rrhs)\n@@ -91,7 +81,7 @@ impl<'a, 'tcx> Pass {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DoubleComparisons {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = expr.node {\n             self.check_binop(cx, kind.node, lhs, rhs, expr.span);"}, {"sha": "12f67b84ca28a76a7220e5c8aab9215e3260fa3d", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{in_macro, span_lint};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n declare_clippy_lint! {\n@@ -22,18 +22,7 @@ declare_clippy_lint! {\n     \"Warn on unnecessary double parentheses\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct DoubleParens;\n-\n-impl LintPass for DoubleParens {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DOUBLE_PARENS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DoubleParens\"\n-    }\n-}\n+declare_lint_pass!(DoubleParens => [DOUBLE_PARENS]);\n \n impl EarlyLintPass for DoubleParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {"}, {"sha": "4c7c866fc6354512b1bd521c25b05b276ad76a90", "filename": "clippy_lints/src/drop_bounds.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{paths, span_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for generics with `std::ops::Drop` as bounds.\n@@ -35,19 +35,9 @@ declare_clippy_lint! {\n const DROP_BOUNDS_SUMMARY: &str = \"Bounds of the form `T: Drop` are useless. \\\n                                    Use `std::mem::needs_drop` to detect if a type has drop glue.\";\n \n-pub struct Pass;\n+declare_lint_pass!(DropBounds => [DROP_BOUNDS]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_BOUNDS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DropBounds\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropBounds {\n     fn check_generic_param(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx GenericParam) {\n         for bound in &p.bounds {\n             lint_bound(cx, bound);"}, {"sha": "44853cd799032b49bed21131e00146ca521b2521", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n@@ -106,19 +106,9 @@ const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that imp\n const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements Copy. \\\n                                    Forgetting a copy leaves the original intact.\";\n \n-pub struct Pass;\n+declare_lint_pass!(DropForgetRef => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DropForgetRef\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n             if let ExprKind::Call(ref path, ref args) = expr.node;"}, {"sha": "60470ede5419d2466ff4786103c8b26e2e5f9aaa", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Spanned;\n \n@@ -29,18 +29,7 @@ declare_clippy_lint! {\n     \"checks for calculation of subsecond microseconds or milliseconds\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct DurationSubsec;\n-\n-impl LintPass for DurationSubsec {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DURATION_SUBSEC)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DurationSubsec\"\n-    }\n-}\n+declare_lint_pass!(DurationSubsec => [DURATION_SUBSEC]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "25a1cde6e5ee74d80c599793fd4ba14e4be0280c", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n //! Lint on if expressions with an else if, but without a final else branch.\n \n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n use crate::utils::span_help_and_lint;\n@@ -39,18 +39,7 @@ declare_clippy_lint! {\n     \"if expression with an `else if`, but without a final `else` branch\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct ElseIfWithoutElse;\n-\n-impl LintPass for ElseIfWithoutElse {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ELSE_IF_WITHOUT_ELSE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ElseIfWithoutElse\"\n-    }\n-}\n+declare_lint_pass!(ElseIfWithoutElse => [ELSE_IF_WITHOUT_ELSE]);\n \n impl EarlyLintPass for ElseIfWithoutElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, mut item: &Expr) {"}, {"sha": "e8d25384ee6a9e7c5233b61df0b1729dd0e9aa20", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@\n use crate::utils::span_lint_and_then;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `enum`s with no variants.\n@@ -23,18 +23,7 @@ declare_clippy_lint! {\n     \"enum with no variants\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct EmptyEnum;\n-\n-impl LintPass for EmptyEnum {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EMPTY_ENUM)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"EmptyEnum\"\n-    }\n-}\n+declare_lint_pass!(EmptyEnum => [EMPTY_ENUM]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item) {"}, {"sha": "c74232a906e187fb265fce9c6148b5af2812d4b3", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n@@ -37,20 +37,9 @@ declare_clippy_lint! {\n     \"use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct HashMapLint;\n+declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n-impl LintPass for HashMapLint {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MAP_ENTRY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"HashMap\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.node {\n             if let ExprKind::Unary(UnOp::UnNot, ref check) = check.node {"}, {"sha": "90cb78ae0366106623996cf6a994511d7c2a3098", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -9,7 +9,7 @@ use rustc::mir::interpret::GlobalId;\n use rustc::ty;\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::util::IntTypeExt;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::{IntTy, UintTy};\n \n declare_clippy_lint! {\n@@ -34,17 +34,7 @@ declare_clippy_lint! {\n     \"C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\"\n }\n \n-pub struct UnportableVariant;\n-\n-impl LintPass for UnportableVariant {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ENUM_CLIKE_UNPORTABLE_VARIANT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnportableVariant\"\n-    }\n-}\n+declare_lint_pass!(UnportableVariant => [ENUM_CLIKE_UNPORTABLE_VARIANT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n     #[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap, clippy::cast_sign_loss)]"}, {"sha": "673f471b83c00d60265e3fb46c0e1b5087a23100", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use crate::utils::span_lint;\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n declare_clippy_lint! {\n@@ -25,17 +25,7 @@ declare_clippy_lint! {\n     \"use items that import all variants of an enum\"\n }\n \n-pub struct EnumGlobUse;\n-\n-impl LintPass for EnumGlobUse {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ENUM_GLOB_USE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"EnumGlobUse\"\n-    }\n-}\n+declare_lint_pass!(EnumGlobUse => [ENUM_GLOB_USE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n     fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: HirId) {\n@@ -48,7 +38,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n }\n \n impl EnumGlobUse {\n-    fn lint_item(&self, cx: &LateContext<'_, '_>, item: &Item) {\n+    fn lint_item(self, cx: &LateContext<'_, '_>, item: &Item) {\n         if item.vis.node.is_pub() {\n             return; // re-exports are fine\n         }"}, {"sha": "20cd747dfc4efe140c831654b58f029d59bae448", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@\n use crate::utils::{camel_case, in_macro};\n use crate::utils::{span_help_and_lint, span_lint};\n use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::*;\n use syntax::source_map::Span;\n use syntax::symbol::{InternedString, LocalInternedString};\n@@ -115,20 +115,12 @@ impl EnumVariantNames {\n     }\n }\n \n-impl LintPass for EnumVariantNames {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            ENUM_VARIANT_NAMES,\n-            PUB_ENUM_VARIANT_NAMES,\n-            MODULE_NAME_REPETITIONS,\n-            MODULE_INCEPTION\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"EnumVariantNames\"\n-    }\n-}\n+impl_lint_pass!(EnumVariantNames => [\n+    ENUM_VARIANT_NAMES,\n+    PUB_ENUM_VARIANT_NAMES,\n+    MODULE_NAME_REPETITIONS,\n+    MODULE_INCEPTION\n+]);\n \n fn var2str(var: &Variant) -> LocalInternedString {\n     var.node.ident.as_str()"}, {"sha": "ea09f82642f7dc438738e0882c7ef8d9bdaefa99", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{\n };\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -46,18 +46,7 @@ declare_clippy_lint! {\n     \"taking a reference to satisfy the type constraints on `==`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct EqOp;\n-\n-impl LintPass for EqOp {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EQ_OP, OP_REF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"EqOp\"\n-    }\n-}\n+declare_lint_pass!(EqOp => [EQ_OP, OP_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n     #[allow(clippy::similar_names, clippy::too_many_lines)]"}, {"sha": "7f3549be64bb0e53b09f6c579f694ebe6237c7d1", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n@@ -27,18 +27,7 @@ declare_clippy_lint! {\n     \"using erasing operations, e.g., `x * 0` or `y & 0`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct ErasingOp;\n-\n-impl LintPass for ErasingOp {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ERASING_OP)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ErasingOp\"\n-    }\n-}\n+declare_lint_pass!(ErasingOp => [ERASING_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "8870b3f3b0ce28e96c86eac8bfdd94611c8b7b42", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,12 +6,13 @@ use rustc::middle::mem_categorization::{cmt_, Categorization};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n use rustc::util::nodemap::HirIdSet;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::source_map::Span;\n \n use crate::utils::span_lint;\n \n-pub struct Pass {\n+#[derive(Copy, Clone)]\n+pub struct BoxedLocal {\n     pub too_large_for_stack: u64,\n }\n \n@@ -48,17 +49,9 @@ struct EscapeDelegate<'a, 'tcx: 'a> {\n     too_large_for_stack: u64,\n }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BOXED_LOCAL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"BoxedLocal\"\n-    }\n-}\n+impl_lint_pass!(BoxedLocal => [BOXED_LOCAL]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "63abe47b442806905bbe548ee537b5fb4b20a8a5", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,13 +2,11 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then, type_is_unsafe_function};\n \n-pub struct EtaPass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for closures which just call another function where\n     /// the function can be called directly. `unsafe` functions or calls where types\n@@ -33,17 +31,9 @@ declare_clippy_lint! {\n     \"redundant closures, i.e., `|a| foo(a)` (which can be written as just `foo`)\"\n }\n \n-impl LintPass for EtaPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(REDUNDANT_CLOSURE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"EtaReduction\"\n-    }\n-}\n+declare_lint_pass!(EtaReduction => [REDUNDANT_CLOSURE]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaReduction {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;"}, {"sha": "a62bb3cda9b6e893043071e4362946b3f16a5530", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for a read and a write to the same variable where\n@@ -53,18 +53,7 @@ declare_clippy_lint! {\n     \"whether an expression contains a diverging sub expression\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct EvalOrderDependence;\n-\n-impl LintPass for EvalOrderDependence {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EVAL_ORDER_DEPENDENCE, DIVERGING_SUB_EXPRESSION)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"EvalOrderDependence\"\n-    }\n-}\n+declare_lint_pass!(EvalOrderDependence => [EVAL_ORDER_DEPENDENCE, DIVERGING_SUB_EXPRESSION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "5f631237885ce5a80f71d44ebd212252cd78865b", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::f32;\n use std::f64;\n@@ -35,17 +35,7 @@ declare_clippy_lint! {\n     \"excessive precision for float literal\"\n }\n \n-pub struct ExcessivePrecision;\n-\n-impl LintPass for ExcessivePrecision {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EXCESSIVE_PRECISION)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ExcessivePrecision\"\n-    }\n-}\n+declare_lint_pass!(ExcessivePrecision => [EXCESSIVE_PRECISION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n@@ -72,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n \n impl ExcessivePrecision {\n     // None if nothing to lint, Some(suggestion) if lint necessary\n-    fn check(&self, sym: Symbol, fty: FloatTy) -> Option<String> {\n+    fn check(self, sym: Symbol, fty: FloatTy) -> Option<String> {\n         let max = max_digits(fty);\n         let sym_str = sym.as_str();\n         if dot_zero_exclusion(&sym_str) {"}, {"sha": "a29b1380006c29c80c88527de7f3ccb0f598c3e8", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{is_expn_of, resolve_node, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n \n@@ -24,20 +24,9 @@ declare_clippy_lint! {\n     \"using the `write!()` family of functions instead of the `print!()` family of functions, when using the latter would work\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Pass;\n+declare_lint_pass!(ExplicitWrite => [EXPLICIT_WRITE]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EXPLICIT_WRITE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ExplicitWrite\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitWrite {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n             // match call to unwrap"}, {"sha": "1cbe9d218bdfd27e42322458ed737e51d8eaff7c", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax_pos::Span;\n \n declare_clippy_lint! {\n@@ -28,17 +28,7 @@ declare_clippy_lint! {\n     \"Warn on impls of `From<..>` that contain `panic!()` or `unwrap()`\"\n }\n \n-pub struct FallibleImplFrom;\n-\n-impl LintPass for FallibleImplFrom {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(FALLIBLE_IMPL_FROM)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"FallibleImpleFrom\"\n-    }\n-}\n+declare_lint_pass!(FallibleImplFrom => [FALLIBLE_IMPL_FROM]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {"}, {"sha": "95389fa3c81ed3507ad594700d201ec59c1282c2", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::source_map::Span;\n@@ -33,20 +33,9 @@ declare_clippy_lint! {\n     \"useless use of `format!`\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Pass;\n+declare_lint_pass!(UselessFormat => [USELESS_FORMAT]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![USELESS_FORMAT]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UselessFormat\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessFormat {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some(span) = is_expn_of(expr.span, \"format\") {\n             if in_macro(span) {"}, {"sha": "e29a8c3702b187ec71512d0ea8e23f53b1c85a7b", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast;\n use syntax::ptr::P;\n \n@@ -79,22 +79,11 @@ declare_clippy_lint! {\n     \"possible missing comma in array\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Formatting;\n-\n-impl LintPass for Formatting {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-            SUSPICIOUS_ELSE_FORMATTING,\n-            POSSIBLE_MISSING_COMMA\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Formatting\"\n-    }\n-}\n+declare_lint_pass!(Formatting => [\n+    SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+    SUSPICIOUS_ELSE_FORMATTING,\n+    POSSIBLE_MISSING_COMMA\n+]);\n \n impl EarlyLintPass for Formatting {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {"}, {"sha": "b3e0eb8a670450c047b5dd51d660014ee3863362", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def::Def;\n use rustc::hir::intravisit;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::abi::Abi;\n use syntax::source_map::Span;\n@@ -93,15 +93,7 @@ impl Functions {\n     }\n }\n \n-impl LintPass for Functions {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TOO_MANY_ARGUMENTS, TOO_MANY_LINES, NOT_UNSAFE_PTR_ARG_DEREF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Functions\"\n-    }\n-}\n+impl_lint_pass!(Functions => [TOO_MANY_ARGUMENTS, TOO_MANY_LINES, NOT_UNSAFE_PTR_ARG_DEREF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     fn check_fn("}, {"sha": "0941ed513fc4506766eda11f8185c1442833b883", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{in_macro, match_trait_method, same_tys, snippet, snippet_with\n use crate::utils::{paths, resolve_node};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -27,15 +27,7 @@ pub struct IdentityConversion {\n     try_desugar_arm: Vec<HirId>,\n }\n \n-impl LintPass for IdentityConversion {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IDENTITY_CONVERSION)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"IdentityConversion\"\n-    }\n-}\n+impl_lint_pass!(IdentityConversion => [IDENTITY_CONVERSION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "cc023a5a4598b716c7c193bbc0f86ef6fc12361a", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n@@ -24,18 +24,7 @@ declare_clippy_lint! {\n     \"using identity operations, e.g., `x + 0` or `y / 1`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct IdentityOp;\n-\n-impl LintPass for IdentityOp {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IDENTITY_OP)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"IdentityOp\"\n-    }\n-}\n+declare_lint_pass!(IdentityOp => [IDENTITY_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "385ba9f16c89ee63d841689270434c51b717fee4", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@\n //! on the condition\n \n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n use crate::utils::span_help_and_lint;\n@@ -38,17 +38,7 @@ declare_clippy_lint! {\n     \"`if` branches that could be swapped so no negation operation is necessary on the condition\"\n }\n \n-pub struct IfNotElse;\n-\n-impl LintPass for IfNotElse {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IF_NOT_ELSE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"IfNotElse\"\n-    }\n-}\n+declare_lint_pass!(IfNotElse => [IF_NOT_ELSE]);\n \n impl EarlyLintPass for IfNotElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, item: &Expr) {"}, {"sha": "559b0942d2b57a2947976c40b3aea31e834d25a8", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{in_macro, is_expn_of, snippet_opt, span_lint_and_then};\n use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, MatchSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n@@ -33,9 +33,9 @@ declare_clippy_lint! {\n     \"use a return statement like `return expr` instead of an expression\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(ImplicitReturn => [IMPLICIT_RETURN]);\n \n-impl Pass {\n+impl ImplicitReturn {\n     fn lint(cx: &LateContext<'_, '_>, outer_span: syntax_pos::Span, inner_span: syntax_pos::Span, msg: &str) {\n         span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n@@ -110,17 +110,7 @@ impl Pass {\n     }\n }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IMPLICIT_RETURN)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ImplicitReturn\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "d0a9bb729a451b7f69f19e27daa7ceb06172c362", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -7,7 +7,7 @@ use crate::utils::higher::Range;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::RangeLimits;\n \n declare_clippy_lint! {\n@@ -85,18 +85,7 @@ declare_clippy_lint! {\n     \"indexing/slicing usage\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct IndexingSlicing;\n-\n-impl LintPass for IndexingSlicing {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"IndexSlicing\"\n-    }\n-}\n+declare_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "a977a827321d364256bb54a682ffc70a508ab0d0", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use super::utils::{get_arg_name, match_var, remove_blocks, snippet_with_applicab\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -40,20 +40,9 @@ declare_clippy_lint! {\n     \"a match statement with a single infallible arm instead of a `let`\"\n }\n \n-#[derive(Copy, Clone, Default)]\n-pub struct Pass;\n+declare_lint_pass!(InfallibleDestructingMatch => [INFALLIBLE_DESTRUCTURING_MATCH]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INFALLIBLE_DESTRUCTURING_MATCH)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"InfallibleDestructingMatch\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InfallibleDestructingMatch {\n     fn check_local(&mut self, cx: &LateContext<'a, 'tcx>, local: &'tcx Local) {\n         if_chain! {\n             if let Some(ref expr) = local.init;"}, {"sha": "29e0396c09e3098fbf5dae62595a82e93016dfe5", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, match_type, paths, span_lint};\n \n@@ -41,20 +41,9 @@ declare_clippy_lint! {\n     \"possible infinite iteration\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INFINITE_ITER, MAYBE_INFINITE_ITER)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"InfiniteIter\"\n-    }\n-}\n+declare_lint_pass!(InfiniteIter => [INFINITE_ITER, MAYBE_INFINITE_ITER]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InfiniteIter {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         let (lint, msg) = match complete_infinite_iter(cx, expr) {\n             Infinite => (INFINITE_ITER, \"infinite iteration detected\"),"}, {"sha": "bde784f81de8d85886328100db83d5614f541d08", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,9 +3,8 @@\n use crate::utils::span_lint_and_then;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashMap;\n-use std::default::Default;\n use syntax_pos::Span;\n \n declare_clippy_lint! {\n@@ -40,29 +39,15 @@ declare_clippy_lint! {\n     \"Multiple inherent impl that could be grouped\"\n }\n \n-pub struct Pass {\n+#[allow(clippy::module_name_repetitions)]\n+#[derive(Default)]\n+pub struct MultipleInherentImpl {\n     impls: FxHashMap<def_id::DefId, (Span, Generics)>,\n }\n \n-impl Default for Pass {\n-    fn default() -> Self {\n-        Self {\n-            impls: FxHashMap::default(),\n-        }\n-    }\n-}\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MULTIPLE_INHERENT_IMPL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MultipleInherientImpl\"\n-    }\n-}\n+impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n     fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Impl(_, _, _, ref generics, None, _, _) = item.node {\n             // Remember for each inherent implementation encoutered its span and generics"}, {"sha": "5242b22c79082f154cb8de6250a7f593b5460c57", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::{Attribute, Name};\n \n@@ -28,20 +28,9 @@ declare_clippy_lint! {\n     \"use of `#[inline]` on trait methods without bodies\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INLINE_FN_WITHOUT_BODY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"InlineFnWithoutBody\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InlineFnWithoutBody {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         if let TraitItemKind::Method(_, TraitMethod::Required(_)) = item.node {\n             check_attrs(cx, item.ident.name, &item.attrs);"}, {"sha": "b59179618a6d15d7554a25a46454a845205c09e8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n //! lint on blocks unnecessarily using >= with a + 1 or - 1\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::*;\n \n@@ -30,17 +30,7 @@ declare_clippy_lint! {\n     \"instead of using x >= y + 1, use x > y\"\n }\n \n-pub struct IntPlusOne;\n-\n-impl LintPass for IntPlusOne {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INT_PLUS_ONE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"IntPlusOne\"\n-    }\n-}\n+declare_lint_pass!(IntPlusOne => [INT_PLUS_ONE]);\n \n // cases:\n // BinOpKind::Ge\n@@ -59,14 +49,14 @@ enum Side {\n \n impl IntPlusOne {\n     #[allow(clippy::cast_sign_loss)]\n-    fn check_lit(&self, lit: &Lit, target_value: i128) -> bool {\n+    fn check_lit(self, lit: &Lit, target_value: i128) -> bool {\n         if let LitKind::Int(value, ..) = lit.node {\n             return value == (target_value as u128);\n         }\n         false\n     }\n \n-    fn check_binop(&self, cx: &EarlyContext<'_>, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<String> {\n+    fn check_binop(self, cx: &EarlyContext<'_>, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<String> {\n         match (binop, &lhs.node, &rhs.node) {\n             // case where `x - 1 >= ...` or `-1 + x >= ...`\n             (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n@@ -131,7 +121,7 @@ impl IntPlusOne {\n     }\n \n     fn generate_recommendation(\n-        &self,\n+        self,\n         cx: &EarlyContext<'_>,\n         binop: BinOpKind,\n         node: &Expr,\n@@ -155,7 +145,7 @@ impl IntPlusOne {\n         None\n     }\n \n-    fn emit_warning(&self, cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n+    fn emit_warning(self, cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n         span_lint_and_then(\n             cx,\n             INT_PLUS_ONE,"}, {"sha": "40a11cde445981434b34d383c827fcfa23db2755", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n@@ -26,17 +26,7 @@ const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n const HELP: &str = \"Creation of a null reference is undefined behavior; \\\n                     see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\";\n \n-pub struct InvalidRef;\n-\n-impl LintPass for InvalidRef {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_REF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"InvalidRef\"\n-    }\n-}\n+declare_lint_pass!(InvalidRef => [INVALID_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "779bac30e0fad8e2ebce379fd019cf6e29746c48", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@\n use crate::utils::{in_macro, span_lint};\n use matches::matches;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n declare_clippy_lint! {\n@@ -34,17 +34,7 @@ declare_clippy_lint! {\n     \"blocks where an item comes after a statement\"\n }\n \n-pub struct ItemsAfterStatements;\n-\n-impl LintPass for ItemsAfterStatements {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ITEMS_AFTER_STATEMENTS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ItemsAfterStatements\"\n-    }\n-}\n+declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {"}, {"sha": "e447be82b03dfdb760abf8c72e0584dcb2f0e679", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{snippet_opt, span_lint_and_then};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::layout::LayoutOf;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -42,15 +42,7 @@ impl LargeEnumVariant {\n     }\n }\n \n-impl LintPass for LargeEnumVariant {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(LARGE_ENUM_VARIANT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"LargeEnumVariant\"\n-    }\n-}\n+impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item) {"}, {"sha": "191d27a1b8cf01f3f8706a1d274ae3ecfc9f034d", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use syntax::ast::{Lit, LitKind, Name};\n@@ -69,18 +69,7 @@ declare_clippy_lint! {\n     \"traits or impls with a public `len` method but no corresponding `is_empty` method\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct LenZero;\n-\n-impl LintPass for LenZero {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(LEN_ZERO, LEN_WITHOUT_IS_EMPTY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"LenZero\"\n-    }\n-}\n+declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {"}, {"sha": "f5da2d7803e381254daaaa079093fc6bb77eaafc", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::hir::BindingAnnotation;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -52,18 +52,7 @@ declare_clippy_lint! {\n     \"unidiomatic `let mut` declaration followed by initialization in `if`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct LetIfSeq;\n-\n-impl LintPass for LetIfSeq {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(USELESS_LET_IF_SEQ)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"LetIfSeq\"\n-    }\n-}\n+declare_lint_pass!(LetIfSeq => [USELESS_LET_IF_SEQ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n     fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {"}, {"sha": "6d051cb19c03b758b3ad557768033002dd02b291", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -290,7 +290,7 @@ pub fn register_pre_expansion_lints(\n     store: &mut rustc::lint::LintStore,\n     conf: &Conf,\n ) {\n-    store.register_pre_expansion_pass(Some(session), true, false, box write::Pass);\n+    store.register_pre_expansion_pass(Some(session), true, false, box write::Write);\n     store.register_pre_expansion_pass(\n         Some(session),\n         true,\n@@ -305,8 +305,8 @@ pub fn register_pre_expansion_lints(\n             single_char_binding_names_threshold: conf.single_char_binding_names_threshold,\n         },\n     );\n-    store.register_pre_expansion_pass(Some(session), true, false, box attrs::CfgAttrPass);\n-    store.register_pre_expansion_pass(Some(session), true, false, box dbg_macro::Pass);\n+    store.register_pre_expansion_pass(Some(session), true, false, box attrs::DeprecatedCfgAttribute);\n+    store.register_pre_expansion_pass(Some(session), true, false, box dbg_macro::DbgMacro);\n }\n \n #[doc(hidden)]\n@@ -421,82 +421,82 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n-    reg.register_late_lint_pass(box serde_api::Serde);\n-    reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n+    reg.register_late_lint_pass(box serde_api::SerdeAPI);\n+    reg.register_early_lint_pass(box utils::internal_lints::ClippyLintsInternal);\n     reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n-    reg.register_late_lint_pass(box utils::inspector::Pass);\n-    reg.register_late_lint_pass(box utils::author::Pass);\n-    reg.register_late_lint_pass(box types::TypePass);\n+    reg.register_late_lint_pass(box utils::inspector::DeepCodeInspector);\n+    reg.register_late_lint_pass(box utils::author::Author);\n+    reg.register_late_lint_pass(box types::Types);\n     reg.register_late_lint_pass(box booleans::NonminimalBool);\n     reg.register_late_lint_pass(box eq_op::EqOp);\n     reg.register_early_lint_pass(box enum_variants::EnumVariantNames::new(conf.enum_variant_name_threshold));\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n     reg.register_late_lint_pass(box enum_clike::UnportableVariant);\n     reg.register_late_lint_pass(box excessive_precision::ExcessivePrecision);\n     reg.register_late_lint_pass(box bit_mask::BitMask::new(conf.verbose_bit_mask_threshold));\n-    reg.register_late_lint_pass(box ptr::PointerPass);\n+    reg.register_late_lint_pass(box ptr::Ptr);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n     reg.register_late_lint_pass(box needless_bool::BoolComparison);\n-    reg.register_late_lint_pass(box approx_const::Pass);\n-    reg.register_late_lint_pass(box misc::Pass);\n+    reg.register_late_lint_pass(box approx_const::ApproxConstant);\n+    reg.register_late_lint_pass(box misc::MiscLints);\n     reg.register_early_lint_pass(box precedence::Precedence);\n     reg.register_early_lint_pass(box needless_continue::NeedlessContinue);\n-    reg.register_late_lint_pass(box eta_reduction::EtaPass);\n+    reg.register_late_lint_pass(box eta_reduction::EtaReduction);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n     reg.register_late_lint_pass(box erasing_op::ErasingOp);\n     reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatements);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n     reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n     reg.register_late_lint_pass(box len_zero::LenZero);\n-    reg.register_late_lint_pass(box attrs::AttrPass);\n+    reg.register_late_lint_pass(box attrs::Attributes);\n     reg.register_early_lint_pass(box collapsible_if::CollapsibleIf);\n     reg.register_late_lint_pass(box block_in_if_condition::BlockInIfCondition);\n     reg.register_late_lint_pass(box unicode::Unicode);\n     reg.register_late_lint_pass(box strings::StringAdd);\n-    reg.register_early_lint_pass(box returns::ReturnPass);\n-    reg.register_late_lint_pass(box implicit_return::Pass);\n-    reg.register_late_lint_pass(box methods::Pass);\n-    reg.register_late_lint_pass(box map_clone::Pass);\n-    reg.register_late_lint_pass(box shadow::Pass);\n-    reg.register_late_lint_pass(box types::LetPass);\n+    reg.register_early_lint_pass(box returns::Return);\n+    reg.register_late_lint_pass(box implicit_return::ImplicitReturn);\n+    reg.register_late_lint_pass(box methods::Methods);\n+    reg.register_late_lint_pass(box map_clone::MapClone);\n+    reg.register_late_lint_pass(box shadow::Shadow);\n+    reg.register_late_lint_pass(box types::LetUnitValue);\n     reg.register_late_lint_pass(box types::UnitCmp);\n-    reg.register_late_lint_pass(box loops::Pass);\n-    reg.register_late_lint_pass(box lifetimes::LifetimePass);\n-    reg.register_late_lint_pass(box entry::HashMapLint);\n-    reg.register_late_lint_pass(box ranges::Pass);\n-    reg.register_late_lint_pass(box types::CastPass);\n-    reg.register_late_lint_pass(box types::TypeComplexityPass::new(conf.type_complexity_threshold));\n-    reg.register_late_lint_pass(box matches::MatchPass);\n+    reg.register_late_lint_pass(box loops::Loops);\n+    reg.register_late_lint_pass(box lifetimes::Lifetimes);\n+    reg.register_late_lint_pass(box entry::HashMapPass);\n+    reg.register_late_lint_pass(box ranges::Ranges);\n+    reg.register_late_lint_pass(box types::Casts);\n+    reg.register_late_lint_pass(box types::TypeComplexity::new(conf.type_complexity_threshold));\n+    reg.register_late_lint_pass(box matches::Matches);\n     reg.register_late_lint_pass(box minmax::MinMaxPass);\n-    reg.register_late_lint_pass(box open_options::NonSensical);\n-    reg.register_late_lint_pass(box zero_div_zero::Pass);\n-    reg.register_late_lint_pass(box mutex_atomic::MutexAtomic);\n-    reg.register_late_lint_pass(box needless_update::Pass);\n+    reg.register_late_lint_pass(box open_options::OpenOptions);\n+    reg.register_late_lint_pass(box zero_div_zero::ZeroDiv);\n+    reg.register_late_lint_pass(box mutex_atomic::Mutex);\n+    reg.register_late_lint_pass(box needless_update::NeedlessUpdate);\n     reg.register_late_lint_pass(box needless_borrow::NeedlessBorrow::default());\n     reg.register_late_lint_pass(box needless_borrowed_ref::NeedlessBorrowedRef);\n-    reg.register_late_lint_pass(box no_effect::Pass);\n-    reg.register_late_lint_pass(box temporary_assignment::Pass);\n+    reg.register_late_lint_pass(box no_effect::NoEffect);\n+    reg.register_late_lint_pass(box temporary_assignment::TemporaryAssignment);\n     reg.register_late_lint_pass(box transmute::Transmute);\n     reg.register_late_lint_pass(\n         box cognitive_complexity::CognitiveComplexity::new(conf.cognitive_complexity_threshold)\n     );\n-    reg.register_late_lint_pass(box escape::Pass{too_large_for_stack: conf.too_large_for_stack});\n-    reg.register_early_lint_pass(box misc_early::MiscEarly);\n-    reg.register_late_lint_pass(box panic_unimplemented::Pass);\n+    reg.register_late_lint_pass(box escape::BoxedLocal{too_large_for_stack: conf.too_large_for_stack});\n+    reg.register_early_lint_pass(box misc_early::MiscEarlyLints);\n+    reg.register_late_lint_pass(box panic_unimplemented::PanicUnimplemented);\n     reg.register_late_lint_pass(box strings::StringLitAsBytes);\n     reg.register_late_lint_pass(box derive::Derive);\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n-    reg.register_late_lint_pass(box vec::Pass);\n-    reg.register_late_lint_pass(box drop_bounds::Pass);\n-    reg.register_late_lint_pass(box drop_forget_ref::Pass);\n+    reg.register_late_lint_pass(box vec::UselessVec);\n+    reg.register_late_lint_pass(box drop_bounds::DropBounds);\n+    reg.register_late_lint_pass(box drop_forget_ref::DropForgetRef);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n-    reg.register_late_lint_pass(box regex::Pass::default());\n+    reg.register_late_lint_pass(box regex::Regex::default());\n     reg.register_late_lint_pass(box copies::CopyAndPaste);\n     reg.register_late_lint_pass(box copy_iterator::CopyIterator);\n-    reg.register_late_lint_pass(box format::Pass);\n+    reg.register_late_lint_pass(box format::UselessFormat);\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n@@ -505,11 +505,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault::default());\n-    reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(\n+    reg.register_late_lint_pass(box blacklisted_name::BlacklistedName::new(\n             conf.blacklisted_names.iter().cloned().collect()\n     ));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold, conf.too_many_lines_threshold));\n-    reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents.iter().cloned().collect()));\n+    reg.register_early_lint_pass(box doc::DocMarkdown::new(conf.doc_valid_idents.iter().cloned().collect()));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n     reg.register_late_lint_pass(box mem_discriminant::MemDiscriminant);\n@@ -521,57 +521,57 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n     reg.register_late_lint_pass(box missing_inline::MissingInline);\n-    reg.register_late_lint_pass(box ok_if_let::Pass);\n-    reg.register_late_lint_pass(box redundant_pattern_matching::Pass);\n-    reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n-    reg.register_early_lint_pass(box reference::Pass);\n-    reg.register_early_lint_pass(box reference::DerefPass);\n+    reg.register_late_lint_pass(box ok_if_let::OkIfLet);\n+    reg.register_late_lint_pass(box redundant_pattern_matching::RedundantPatternMatching);\n+    reg.register_late_lint_pass(box partialeq_ne_impl::PartialEqNeImpl);\n+    reg.register_early_lint_pass(box reference::DerefAddrOf);\n+    reg.register_early_lint_pass(box reference::RefInDeref);\n     reg.register_early_lint_pass(box double_parens::DoubleParens);\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n-    reg.register_late_lint_pass(box explicit_write::Pass);\n+    reg.register_late_lint_pass(box explicit_write::ExplicitWrite);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_late_lint_pass(box trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n             conf.trivial_copy_size_limit,\n             &reg.sess.target,\n     ));\n     reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n-    reg.register_early_lint_pass(box literal_representation::LiteralRepresentation::new(\n+    reg.register_early_lint_pass(box literal_representation::DecimalLiteralRepresentation::new(\n             conf.literal_representation_threshold\n     ));\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n-    reg.register_late_lint_pass(box infinite_iter::Pass);\n-    reg.register_late_lint_pass(box inline_fn_without_body::Pass);\n+    reg.register_late_lint_pass(box infinite_iter::InfiniteIter);\n+    reg.register_late_lint_pass(box inline_fn_without_body::InlineFnWithoutBody);\n     reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n     reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n     reg.register_late_lint_pass(box types::UnitArg);\n-    reg.register_late_lint_pass(box double_comparison::Pass);\n-    reg.register_late_lint_pass(box question_mark::Pass);\n+    reg.register_late_lint_pass(box double_comparison::DoubleComparisons);\n+    reg.register_late_lint_pass(box question_mark::QuestionMark);\n     reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n-    reg.register_early_lint_pass(box cargo_common_metadata::Pass);\n-    reg.register_early_lint_pass(box multiple_crate_versions::Pass);\n-    reg.register_early_lint_pass(box wildcard_dependencies::Pass);\n-    reg.register_late_lint_pass(box map_unit_fn::Pass);\n-    reg.register_late_lint_pass(box infallible_destructuring_match::Pass);\n-    reg.register_late_lint_pass(box inherent_impl::Pass::default());\n+    reg.register_early_lint_pass(box cargo_common_metadata::CargoCommonMetadata);\n+    reg.register_early_lint_pass(box multiple_crate_versions::MultipleCrateVersions);\n+    reg.register_early_lint_pass(box wildcard_dependencies::WildcardDependencies);\n+    reg.register_late_lint_pass(box map_unit_fn::MapUnit);\n+    reg.register_late_lint_pass(box infallible_destructuring_match::InfallibleDestructingMatch);\n+    reg.register_late_lint_pass(box inherent_impl::MultipleInherentImpl::default());\n     reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n-    reg.register_late_lint_pass(box unwrap::Pass);\n+    reg.register_late_lint_pass(box unwrap::Unwrap);\n     reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n     reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n     reg.register_late_lint_pass(box indexing_slicing::IndexingSlicing);\n     reg.register_late_lint_pass(box non_copy_const::NonCopyConst);\n-    reg.register_late_lint_pass(box ptr_offset_with_cast::Pass);\n+    reg.register_late_lint_pass(box ptr_offset_with_cast::PtrOffsetWithCast);\n     reg.register_late_lint_pass(box redundant_clone::RedundantClone);\n-    reg.register_late_lint_pass(box slow_vector_initialization::Pass);\n+    reg.register_late_lint_pass(box slow_vector_initialization::SlowVectorInit);\n     reg.register_late_lint_pass(box types::RefToMut);\n     reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n     reg.register_late_lint_pass(box missing_const_for_fn::MissingConstForFn);\n-    reg.register_late_lint_pass(box transmuting_null::Pass);\n+    reg.register_late_lint_pass(box transmuting_null::TransmutingNull);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,"}, {"sha": "60b243784ee63be66a5d65d01247f26d398b64cb", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::def::Def;\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use syntax::source_map::Span;\n use syntax::symbol::keywords;\n@@ -55,20 +55,9 @@ declare_clippy_lint! {\n     \"unused lifetimes in function definitions\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct LifetimePass;\n+declare_lint_pass!(Lifetimes => [NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES]);\n \n-impl LintPass for LifetimePass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"LifeTimes\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Fn(ref decl, _, ref generics, id) = item.node {\n             check_fn_inner(cx, decl, Some(id), generics, item.span);"}, {"sha": "004e9f14b580ab5f2153b2865f52e1349bdcfede", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 12, "deletions": 30, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@\n use crate::utils::{snippet_opt, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use syntax::ast::*;\n use syntax_pos;\n@@ -334,23 +334,12 @@ impl WarningType {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct LiteralDigitGrouping;\n-\n-impl LintPass for LiteralDigitGrouping {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            UNREADABLE_LITERAL,\n-            INCONSISTENT_DIGIT_GROUPING,\n-            LARGE_DIGIT_GROUPS,\n-            MISTYPED_LITERAL_SUFFIXES,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"LiteralDigitGrouping\"\n-    }\n-}\n+declare_lint_pass!(LiteralDigitGrouping => [\n+    UNREADABLE_LITERAL,\n+    INCONSISTENT_DIGIT_GROUPING,\n+    LARGE_DIGIT_GROUPS,\n+    MISTYPED_LITERAL_SUFFIXES,\n+]);\n \n impl EarlyLintPass for LiteralDigitGrouping {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n@@ -488,22 +477,15 @@ impl LiteralDigitGrouping {\n     }\n }\n \n+#[allow(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n-pub struct LiteralRepresentation {\n+pub struct DecimalLiteralRepresentation {\n     threshold: u64,\n }\n \n-impl LintPass for LiteralRepresentation {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DECIMAL_LITERAL_REPRESENTATION)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DecimalLiteralRepresentation\"\n-    }\n-}\n+impl_lint_pass!(DecimalLiteralRepresentation => [DECIMAL_LITERAL_REPRESENTATION]);\n \n-impl EarlyLintPass for LiteralRepresentation {\n+impl EarlyLintPass for DecimalLiteralRepresentation {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n@@ -515,7 +497,7 @@ impl EarlyLintPass for LiteralRepresentation {\n     }\n }\n \n-impl LiteralRepresentation {\n+impl DecimalLiteralRepresentation {\n     pub fn new(threshold: u64) -> Self {\n         Self { threshold }\n     }"}, {"sha": "bf92cf5aebc5614faaa9fda61105001c12969c57", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedV\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::middle::region;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n@@ -439,39 +439,28 @@ declare_clippy_lint! {\n     \"variables used within while expression are not mutated in the body\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            MANUAL_MEMCPY,\n-            NEEDLESS_RANGE_LOOP,\n-            EXPLICIT_ITER_LOOP,\n-            EXPLICIT_INTO_ITER_LOOP,\n-            ITER_NEXT_LOOP,\n-            FOR_LOOP_OVER_RESULT,\n-            FOR_LOOP_OVER_OPTION,\n-            WHILE_LET_LOOP,\n-            UNUSED_COLLECT,\n-            NEEDLESS_COLLECT,\n-            REVERSE_RANGE_LOOP,\n-            EXPLICIT_COUNTER_LOOP,\n-            EMPTY_LOOP,\n-            WHILE_LET_ON_ITERATOR,\n-            FOR_KV_MAP,\n-            NEVER_LOOP,\n-            MUT_RANGE_BOUND,\n-            WHILE_IMMUTABLE_CONDITION,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Loops\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+declare_lint_pass!(Loops => [\n+    MANUAL_MEMCPY,\n+    NEEDLESS_RANGE_LOOP,\n+    EXPLICIT_ITER_LOOP,\n+    EXPLICIT_INTO_ITER_LOOP,\n+    ITER_NEXT_LOOP,\n+    FOR_LOOP_OVER_RESULT,\n+    FOR_LOOP_OVER_OPTION,\n+    WHILE_LET_LOOP,\n+    UNUSED_COLLECT,\n+    NEEDLESS_COLLECT,\n+    REVERSE_RANGE_LOOP,\n+    EXPLICIT_COUNTER_LOOP,\n+    EMPTY_LOOP,\n+    WHILE_LET_ON_ITERATOR,\n+    FOR_KV_MAP,\n+    NEVER_LOOP,\n+    MUT_RANGE_BOUND,\n+    WHILE_IMMUTABLE_CONDITION,\n+]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n     #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // we don't want to check expanded macros"}, {"sha": "4743dec9d5c28d2677ec4df54bb63159b8ca0e7d", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,14 +6,11 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::Ident;\n use syntax::source_map::Span;\n \n-#[derive(Clone)]\n-pub struct Pass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `iterator.map(|x| x.clone())` and suggests\n     /// `iterator.cloned()` instead\n@@ -42,17 +39,9 @@ declare_clippy_lint! {\n     \"using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types\"\n }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MAP_CLONE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MapClone\"\n-    }\n-}\n+declare_lint_pass!(MapClone => [MAP_CLONE]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n         if in_macro(e.span) {\n             return;"}, {"sha": "eae43cfa82405864e1350ab5904dd1a621e7f071", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,13 +4,10 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n-#[derive(Clone)]\n-pub struct Pass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `option.map(f)` where f is a function\n     /// or closure that returns the unit type.\n@@ -77,15 +74,7 @@ declare_clippy_lint! {\n     \"using `result.map(f)`, where f is a function or closure that returns ()\"\n }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MapUnit\"\n-    }\n-}\n+declare_lint_pass!(MapUnit => [OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN]);\n \n fn is_unit_type(ty: Ty<'_>) -> bool {\n     match ty.sty {\n@@ -249,7 +238,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapUnit {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &hir::Stmt) {\n         if in_macro(stmt.span) {\n             return;"}, {"sha": "bcd3119b7bc58b86beae72ab7f8c336b599f33ae", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::def::CtorKind;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::cmp::Ordering;\n use std::collections::Bound;\n@@ -215,29 +215,18 @@ declare_clippy_lint! {\n     \"a wildcard enum match arm using `_`\"\n }\n \n-#[allow(missing_copy_implementations)]\n-pub struct MatchPass;\n-\n-impl LintPass for MatchPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            SINGLE_MATCH,\n-            MATCH_REF_PATS,\n-            MATCH_BOOL,\n-            SINGLE_MATCH_ELSE,\n-            MATCH_OVERLAPPING_ARM,\n-            MATCH_WILD_ERR_ARM,\n-            MATCH_AS_REF,\n-            WILDCARD_ENUM_MATCH_ARM\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Matches\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n+declare_lint_pass!(Matches => [\n+    SINGLE_MATCH,\n+    MATCH_REF_PATS,\n+    MATCH_BOOL,\n+    SINGLE_MATCH_ELSE,\n+    MATCH_OVERLAPPING_ARM,\n+    MATCH_WILD_ERR_ARM,\n+    MATCH_AS_REF,\n+    WILDCARD_ENUM_MATCH_ARM\n+]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;"}, {"sha": "00289290387374bb9550699541f8214f1626c8d0", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n use std::iter;\n@@ -27,17 +27,7 @@ declare_clippy_lint! {\n     \"calling mem::descriminant on non-enum type\"\n }\n \n-pub struct MemDiscriminant;\n-\n-impl LintPass for MemDiscriminant {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MEM_DISCRIMINANT_NON_ENUM]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MemDiscriminant\"\n-    }\n-}\n+declare_lint_pass!(MemDiscriminant => [MEM_DISCRIMINANT_NON_ENUM]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "4fabfac0ab65da26fe69caa260a7cfd4847c25e0", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{paths, span_lint};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `std::mem::forget(t)` where `t` is\n@@ -21,17 +21,7 @@ declare_clippy_lint! {\n     \"`mem::forget` usage on `Drop` types, likely to cause memory leaks\"\n }\n \n-pub struct MemForget;\n-\n-impl LintPass for MemForget {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MEM_FORGET]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MemForget\"\n-    }\n-}\n+declare_lint_pass!(MemForget => [MEM_FORGET]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "49d0a6de229a8698e2524a304f77849ec1e62d93", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{match_qpath, paths, snippet_with_applicability, span_lint_and\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -32,17 +32,7 @@ declare_clippy_lint! {\n     \"replacing an `Option` with `None` instead of `take()`\"\n }\n \n-pub struct MemReplace;\n-\n-impl LintPass for MemReplace {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MEM_REPLACE_OPTION_WITH_NONE]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MemReplace\"\n-    }\n-}\n+declare_lint_pass!(MemReplace => [MEM_REPLACE_OPTION_WITH_NONE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "b7580b37279c97f4bb7e7a792862d69245789d08", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 39, "deletions": 50, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -11,7 +11,7 @@ use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Predicate, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n@@ -27,9 +27,6 @@ use crate::utils::{\n     span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n-#[derive(Clone)]\n-pub struct Pass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s.\n     ///\n@@ -777,52 +774,44 @@ declare_clippy_lint! {\n     \"using `.into_iter()` on a reference\"\n }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            OPTION_UNWRAP_USED,\n-            RESULT_UNWRAP_USED,\n-            SHOULD_IMPLEMENT_TRAIT,\n-            WRONG_SELF_CONVENTION,\n-            WRONG_PUB_SELF_CONVENTION,\n-            OK_EXPECT,\n-            OPTION_MAP_UNWRAP_OR,\n-            OPTION_MAP_UNWRAP_OR_ELSE,\n-            RESULT_MAP_UNWRAP_OR_ELSE,\n-            OPTION_MAP_OR_NONE,\n-            OR_FUN_CALL,\n-            EXPECT_FUN_CALL,\n-            CHARS_NEXT_CMP,\n-            CHARS_LAST_CMP,\n-            CLONE_ON_COPY,\n-            CLONE_ON_REF_PTR,\n-            CLONE_DOUBLE_REF,\n-            NEW_RET_NO_SELF,\n-            SINGLE_CHAR_PATTERN,\n-            SEARCH_IS_SOME,\n-            TEMPORARY_CSTRING_AS_PTR,\n-            FILTER_NEXT,\n-            FILTER_MAP,\n-            MAP_FLATTEN,\n-            ITER_NTH,\n-            ITER_SKIP_NEXT,\n-            GET_UNWRAP,\n-            STRING_EXTEND_CHARS,\n-            ITER_CLONED_COLLECT,\n-            USELESS_ASREF,\n-            UNNECESSARY_FOLD,\n-            UNNECESSARY_FILTER_MAP,\n-            INTO_ITER_ON_ARRAY,\n-            INTO_ITER_ON_REF,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Methods\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+declare_lint_pass!(Methods => [\n+    OPTION_UNWRAP_USED,\n+    RESULT_UNWRAP_USED,\n+    SHOULD_IMPLEMENT_TRAIT,\n+    WRONG_SELF_CONVENTION,\n+    WRONG_PUB_SELF_CONVENTION,\n+    OK_EXPECT,\n+    OPTION_MAP_UNWRAP_OR,\n+    OPTION_MAP_UNWRAP_OR_ELSE,\n+    RESULT_MAP_UNWRAP_OR_ELSE,\n+    OPTION_MAP_OR_NONE,\n+    OR_FUN_CALL,\n+    EXPECT_FUN_CALL,\n+    CHARS_NEXT_CMP,\n+    CHARS_LAST_CMP,\n+    CLONE_ON_COPY,\n+    CLONE_ON_REF_PTR,\n+    CLONE_DOUBLE_REF,\n+    NEW_RET_NO_SELF,\n+    SINGLE_CHAR_PATTERN,\n+    SEARCH_IS_SOME,\n+    TEMPORARY_CSTRING_AS_PTR,\n+    FILTER_NEXT,\n+    FILTER_MAP,\n+    MAP_FLATTEN,\n+    ITER_NTH,\n+    ITER_SKIP_NEXT,\n+    GET_UNWRAP,\n+    STRING_EXTEND_CHARS,\n+    ITER_CLONED_COLLECT,\n+    USELESS_ASREF,\n+    UNNECESSARY_FOLD,\n+    UNNECESSARY_FILTER_MAP,\n+    INTO_ITER_ON_ARRAY,\n+    INTO_ITER_ON_REF,\n+]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n     #[allow(clippy::cognitive_complexity)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if in_macro(expr.span) {"}, {"sha": "b5c064869a42c38556d3f1fddf9f17bb67b4dede", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant_simple, Constant};\n use crate::utils::{paths, span_lint};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use std::cmp::Ordering;\n \n declare_clippy_lint! {\n@@ -25,17 +25,7 @@ declare_clippy_lint! {\n     \"`min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\"\n }\n \n-pub struct MinMaxPass;\n-\n-impl LintPass for MinMaxPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MIN_MAX)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MinMax\"\n-    }\n-}\n+declare_lint_pass!(MinMaxPass => [MIN_MAX]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "774a878b331f82a45cbf3455f9828f14a22d1ea3", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::source_map::{ExpnFormat, Span};\n@@ -232,31 +232,20 @@ declare_clippy_lint! {\n     \"using `==` or `!=` on float constants instead of comparing difference with an epsilon\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            TOPLEVEL_REF_ARG,\n-            CMP_NAN,\n-            FLOAT_CMP,\n-            CMP_OWNED,\n-            MODULO_ONE,\n-            REDUNDANT_PATTERN,\n-            USED_UNDERSCORE_BINDING,\n-            SHORT_CIRCUIT_STATEMENT,\n-            ZERO_PTR,\n-            FLOAT_CMP_CONST\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MiscLints\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+declare_lint_pass!(MiscLints => [\n+    TOPLEVEL_REF_ARG,\n+    CMP_NAN,\n+    FLOAT_CMP,\n+    CMP_OWNED,\n+    MODULO_ONE,\n+    REDUNDANT_PATTERN,\n+    USED_UNDERSCORE_BINDING,\n+    SHORT_CIRCUIT_STATEMENT,\n+    ZERO_PTR,\n+    FLOAT_CMP_CONST\n+]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "5dd9a248631f4cdc5a6cdc0f63128daf2c6f91be", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use std::char;\n@@ -172,27 +172,16 @@ declare_clippy_lint! {\n     \"shadowing a builtin type\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct MiscEarly;\n-\n-impl LintPass for MiscEarly {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            UNNEEDED_FIELD_PATTERN,\n-            DUPLICATE_UNDERSCORE_ARGUMENT,\n-            REDUNDANT_CLOSURE_CALL,\n-            DOUBLE_NEG,\n-            MIXED_CASE_HEX_LITERALS,\n-            UNSEPARATED_LITERAL_SUFFIX,\n-            ZERO_PREFIXED_LITERAL,\n-            BUILTIN_TYPE_SHADOW\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MiscEarlyLints\"\n-    }\n-}\n+declare_lint_pass!(MiscEarlyLints => [\n+    UNNEEDED_FIELD_PATTERN,\n+    DUPLICATE_UNDERSCORE_ARGUMENT,\n+    REDUNDANT_CLOSURE_CALL,\n+    DOUBLE_NEG,\n+    MIXED_CASE_HEX_LITERALS,\n+    UNSEPARATED_LITERAL_SUFFIX,\n+    ZERO_PREFIXED_LITERAL,\n+    BUILTIN_TYPE_SHADOW\n+]);\n \n // Used to find `return` statements or equivalents e.g., `?`\n struct ReturnVisitor {\n@@ -217,7 +206,7 @@ impl<'ast> Visitor<'ast> for ReturnVisitor {\n     }\n }\n \n-impl EarlyLintPass for MiscEarly {\n+impl EarlyLintPass for MiscEarlyLints {\n     fn check_generics(&mut self, cx: &EarlyContext<'_>, gen: &Generics) {\n         for param in &gen.params {\n             if let GenericParamKind::Type { .. } = param.kind {\n@@ -398,7 +387,7 @@ impl EarlyLintPass for MiscEarly {\n     }\n }\n \n-impl MiscEarly {\n+impl MiscEarlyLints {\n     fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n         if_chain! {\n             if let LitKind::Int(value, ..) = lit.node;"}, {"sha": "54f34d64eb50329bd1f9ac2bf98443a79775643a", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::{Body, Constness, FnDecl, HirId};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use syntax_pos::Span;\n \n@@ -57,18 +57,7 @@ declare_clippy_lint! {\n     \"Lint functions definitions that could be made `const fn`\"\n }\n \n-#[derive(Clone)]\n-pub struct MissingConstForFn;\n-\n-impl LintPass for MissingConstForFn {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MISSING_CONST_FOR_FN)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MissingConstForFn\"\n-    }\n-}\n+declare_lint_pass!(MissingConstForFn => [MISSING_CONST_FOR_FN]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     fn check_fn("}, {"sha": "5d51f41aab67ad8c2fbaca2a4b11b79bd7c1f873", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -10,7 +10,7 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::{self, MetaItem, MetaItemKind};\n use syntax::attr;\n use syntax::source_map::Span;\n@@ -103,15 +103,7 @@ impl MissingDoc {\n     }\n }\n \n-impl LintPass for MissingDoc {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MISSING_DOCS_IN_PRIVATE_ITEMS]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MissingDoc\"\n-    }\n-}\n+impl_lint_pass!(MissingDoc => [MISSING_DOCS_IN_PRIVATE_ITEMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     fn enter_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, attrs: &'tcx [ast::Attribute]) {"}, {"sha": "2c887eb54d08c9d801f54591c10f4bd2d1b08b9f", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast;\n use syntax::source_map::Span;\n \n@@ -56,8 +56,6 @@ declare_clippy_lint! {\n     \"detects missing #[inline] attribute for public callables (functions, trait methods, methods...)\"\n }\n \n-pub struct MissingInline;\n-\n fn check_missing_inline_attrs(cx: &LateContext<'_, '_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {\n     let has_inline = attrs.iter().any(|a| a.check_name(\"inline\"));\n     if !has_inline {\n@@ -79,15 +77,7 @@ fn is_executable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>) -> bool {\n     })\n }\n \n-impl LintPass for MissingInline {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MISSING_INLINE_IN_PUBLIC_ITEMS]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MissingInline\"\n-    }\n-}\n+declare_lint_pass!(MissingInline => [MISSING_INLINE_IN_PUBLIC_ITEMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {"}, {"sha": "483d8944ecc65be42e610507893a1a3c814b6d5a", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::span_lint;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::{ast::*, source_map::DUMMY_SP};\n \n use cargo_metadata;\n@@ -31,19 +31,9 @@ declare_clippy_lint! {\n     \"multiple versions of the same crate being used\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MULTIPLE_CRATE_VERSIONS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MultipleCrateVersions\"\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for MultipleCrateVersions {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().exec() {\n             metadata"}, {"sha": "3971346dd1ebe36a6b365c3bdecd062a3a05dfd0", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for instances of `mut mut` references.\n@@ -23,18 +23,7 @@ declare_clippy_lint! {\n     \"usage of double-mut refs, e.g., `&mut &mut ...`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct MutMut;\n-\n-impl LintPass for MutMut {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MUT_MUT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"MutMut\"\n-    }\n-}\n+declare_lint_pass!(MutMut => [MUT_MUT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n     fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {"}, {"sha": "9f356e7ca792e03960df6a1499107c95d407fff1", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Detects giving a mutable reference to a function that only\n@@ -23,18 +23,7 @@ declare_clippy_lint! {\n     \"an argument passed as a mutable reference although the callee only demands an immutable reference\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnnecessaryMutPassed;\n-\n-impl LintPass for UnnecessaryMutPassed {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNECESSARY_MUT_PASSED)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnneccessaryMutPassed\"\n-    }\n-}\n+declare_lint_pass!(UnnecessaryMutPassed => [UNNECESSARY_MUT_PASSED]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "3b9641b354f2a1d041aeca1254d0ff38b462a1c6", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,7 +6,7 @@ use crate::utils::{match_type, paths, span_lint};\n use rustc::hir::Expr;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast;\n \n declare_clippy_lint! {\n@@ -49,19 +49,9 @@ declare_clippy_lint! {\n     \"using a mutex for an integer type\"\n }\n \n-impl LintPass for MutexAtomic {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(MUTEX_ATOMIC, MUTEX_INTEGER)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Mutex\"\n-    }\n-}\n-\n-pub struct MutexAtomic;\n+declare_lint_pass!(Mutex => [MUTEX_ATOMIC, MUTEX_INTEGER]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutexAtomic {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Mutex {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         let ty = cx.tables.expr_ty(expr);\n         if let ty::Adt(_, subst) = ty.sty {"}, {"sha": "94febdbd8a793e18433b256c27dc565007e678f4", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,7 +6,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{in_macro, span_lint, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::source_map::Spanned;\n@@ -54,18 +54,7 @@ declare_clippy_lint! {\n     \"comparing a variable to a boolean, e.g., `if x == true` or `if x != true`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NeedlessBool;\n-\n-impl LintPass for NeedlessBool {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_BOOL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NeedlessBool\"\n-    }\n-}\n+declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n@@ -138,18 +127,7 @@ fn parent_node_is_if_expr<'a, 'b>(expr: &Expr, cx: &LateContext<'a, 'b>) -> bool\n     false\n }\n \n-#[derive(Copy, Clone)]\n-pub struct BoolComparison;\n-\n-impl LintPass for BoolComparison {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BOOL_COMPARISON)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"BoolComparison\"\n-    }\n-}\n+declare_lint_pass!(BoolComparison => [BOOL_COMPARISON]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "f32304478bb60f650c2814821925285b4a7b001f", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, MutImmutable, P\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -34,15 +34,7 @@ pub struct NeedlessBorrow {\n     derived_item: Option<HirId>,\n }\n \n-impl LintPass for NeedlessBorrow {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_BORROW)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NeedlessBorrow\"\n-    }\n-}\n+impl_lint_pass!(NeedlessBorrow => [NEEDLESS_BORROW]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "9de5e1a03890fffc5296fd5ad3894f0a25b5962f", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -6,7 +6,7 @@ use crate::utils::{in_macro, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -51,18 +51,7 @@ declare_clippy_lint! {\n     \"taking a needless borrowed reference\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NeedlessBorrowedRef;\n-\n-impl LintPass for NeedlessBorrowedRef {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_BORROWED_REFERENCE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NeedlessBorrowedRef\"\n-    }\n-}\n+declare_lint_pass!(NeedlessBorrowedRef => [NEEDLESS_BORROWED_REFERENCE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {"}, {"sha": "71eb89ae90c951b04c54652d70b906c8fd541315", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -34,7 +34,7 @@\n //!\n //! This lint is **warn** by default.\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use std::borrow::Cow;\n use syntax::ast;\n use syntax::source_map::{original_sp, DUMMY_SP};\n@@ -106,18 +106,7 @@ declare_clippy_lint! {\n     \"`continue` statements that can be replaced by a rearrangement of code\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NeedlessContinue;\n-\n-impl LintPass for NeedlessContinue {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_CONTINUE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NeedlessContinue\"\n-    }\n-}\n+declare_lint_pass!(NeedlessContinue => [NEEDLESS_CONTINUE]);\n \n impl EarlyLintPass for NeedlessContinue {\n     fn check_expr(&mut self, ctx: &EarlyContext<'_>, expr: &ast::Expr) {"}, {"sha": "dee93f70819e33d005163abe0e89c83db2b91203", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -12,7 +12,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::traits;\n use rustc::ty::{self, RegionKind, TypeFoldable};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n@@ -50,17 +50,7 @@ declare_clippy_lint! {\n     \"functions taking arguments by value, but not consuming them in its body\"\n }\n \n-pub struct NeedlessPassByValue;\n-\n-impl LintPass for NeedlessPassByValue {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![NEEDLESS_PASS_BY_VALUE]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NeedlessPassByValue\"\n-    }\n-}\n+declare_lint_pass!(NeedlessPassByValue => [NEEDLESS_PASS_BY_VALUE]);\n \n macro_rules! need {\n     ($e: expr) => {"}, {"sha": "316395acf263bc69810591f35622c0b19d3301f0", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::span_lint;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for needlessly including a base struct on update\n@@ -26,20 +26,9 @@ declare_clippy_lint! {\n     \"using `Foo { ..base }` when there are no missing fields\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(NeedlessUpdate => [NEEDLESS_UPDATE]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_UPDATE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NeedUpdate\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessUpdate {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Struct(_, ref fields, Some(ref base)) = expr.node {\n             let ty = cx.tables.expr_ty(expr);"}, {"sha": "e05a953b306084cef03d06c125d1e93df34dfdbe", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{self, paths, span_lint};\n \n@@ -42,17 +42,7 @@ declare_clippy_lint! {\n     \"The use of negated comparison operators on partially ordered types may produce confusing code.\"\n }\n \n-pub struct NoNegCompOpForPartialOrd;\n-\n-impl LintPass for NoNegCompOpForPartialOrd {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEG_CMP_OP_ON_PARTIAL_ORD)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NoNegCompOpForPartialOrd\"\n-    }\n-}\n+declare_lint_pass!(NoNegCompOpForPartialOrd => [NEG_CMP_OP_ON_PARTIAL_ORD]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "c235661a432be3dab1200498d5489490b42a8325", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::{Span, Spanned};\n \n use crate::consts::{self, Constant};\n@@ -23,18 +23,7 @@ declare_clippy_lint! {\n     \"multiplying integers with -1\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NegMultiply;\n-\n-impl LintPass for NegMultiply {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEG_MULTIPLY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NegMultiply\"\n-    }\n-}\n+declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n \n #[allow(clippy::match_same_arms)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {"}, {"sha": "55a4b1588c2b2bdbf100442c42fce200c91029f6", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::def_id::DefId;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Ty};\n use rustc::util::nodemap::NodeSet;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n@@ -89,15 +89,7 @@ pub struct NewWithoutDefault {\n     impling_types: Option<NodeSet>,\n }\n \n-impl LintPass for NewWithoutDefault {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEW_WITHOUT_DEFAULT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NewWithoutDefault\"\n-    }\n-}\n+impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {"}, {"sha": "1836e929e180c0c154fab00d08d35f52f88f4a78", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sug\n use rustc::hir::def::Def;\n use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::ops::Deref;\n \n@@ -93,20 +93,9 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(NoEffect => [NO_EFFECT, UNNECESSARY_OPERATION]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NO_EFFECT, UNNECESSARY_OPERATION)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NoEffect\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoEffect {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtKind::Semi(ref expr) = stmt.node {\n             if has_no_effect(cx, expr) {"}, {"sha": "1d947784576aca827edc1ef875f603439fb1c5c4", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n use rustc::ty::adjustment::Adjust;\n use rustc::ty::{Ty, TypeFlags};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -143,17 +143,7 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: S\n     });\n }\n \n-pub struct NonCopyConst;\n-\n-impl LintPass for NonCopyConst {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DECLARE_INTERIOR_MUTABLE_CONST, BORROW_INTERIOR_MUTABLE_CONST)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NonCopyConst\"\n-    }\n-}\n+declare_lint_pass!(NonCopyConst => [DECLARE_INTERIOR_MUTABLE_CONST, BORROW_INTERIOR_MUTABLE_CONST]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx Item) {"}, {"sha": "b1d180c6ceb3793d785cfbf860dc5b82f41af72c", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Span;\n@@ -63,19 +63,12 @@ declare_clippy_lint! {\n     \"unclear name\"\n }\n \n+#[derive(Copy, Clone)]\n pub struct NonExpressiveNames {\n     pub single_char_binding_names_threshold: u64,\n }\n \n-impl LintPass for NonExpressiveNames {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES, JUST_UNDERSCORES_AND_DIGITS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"NoneExpressiveNames\"\n-    }\n-}\n+impl_lint_pass!(NonExpressiveNames => [SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES, JUST_UNDERSCORES_AND_DIGITS]);\n \n struct ExistingName {\n     interned: LocalInternedString,"}, {"sha": "01d41f679dbb35db173bf37d4f306ee3812053ec", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:*** Checks for unnecessary `ok()` in if let.\n@@ -34,20 +34,9 @@ declare_clippy_lint! {\n     \"usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IF_LET_SOME_RESULT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"OkIfLet\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! { //begin checking variables\n             if let ExprKind::Match(ref op, ref body, ref source) = expr.node; //test if expr is a match"}, {"sha": "062534333c23e7f990c7862189eecfcdda8a23a1", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::LitKind;\n use syntax::source_map::{Span, Spanned};\n \n@@ -25,20 +25,9 @@ declare_clippy_lint! {\n     \"nonsensical combination of options for opening a file\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NonSensical;\n+declare_lint_pass!(OpenOptions => [NONSENSICAL_OPEN_OPTIONS]);\n \n-impl LintPass for NonSensical {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NONSENSICAL_OPEN_OPTIONS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"OpenOptions\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSensical {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OpenOptions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::MethodCall(ref path, _, ref arguments) = e.node {\n             let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&arguments[0]));"}, {"sha": "c598e915a5af5a55ae9ccae4dd36dce0e4abf305", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{span_lint, SpanlessEq};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Detects classic underflow/overflow checks.\n@@ -21,18 +21,7 @@ declare_clippy_lint! {\n     \"overflow checks inspired by C which are likely to panic\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct OverflowCheckConditional;\n-\n-impl LintPass for OverflowCheckConditional {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(OVERFLOW_CHECK_CONDITIONAL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"OverflowCheckConditional\"\n-    }\n-}\n+declare_lint_pass!(OverflowCheckConditional => [OVERFLOW_CHECK_CONDITIONAL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n     // a + b < a, a > a + b, a < a - b, a - b > a"}, {"sha": "57ff7536a3867f8ffc976032dd9ef566883e591d", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{is_direct_expn_of, is_expn_of, paths, resolve_node, span_lint\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::LitKind;\n use syntax::ptr::P;\n use syntax_pos::Span;\n@@ -42,19 +42,9 @@ declare_clippy_lint! {\n     \"`unimplemented!` should not be present in production code\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PANIC_PARAMS, UNIMPLEMENTED)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"PanicUnimplemented\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n             if let ExprKind::Block(ref block, _) = expr.node;"}, {"sha": "6a6725b4d10b6d167d28326758131025c3f10681", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{is_automatically_derived, span_lint_hir};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n@@ -28,20 +28,9 @@ declare_clippy_lint! {\n     \"re-implementing `PartialEq::ne`\"\n }\n \n-#[derive(Clone, Copy)]\n-pub struct Pass;\n+declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PARTIALEQ_NE_IMPL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"PartialEqNeImpl\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if_chain! {\n             if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.node;"}, {"sha": "52c11cacaac02f402b48c5af87139531e895fad8", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::*;\n use syntax::source_map::Spanned;\n@@ -28,18 +28,7 @@ declare_clippy_lint! {\n     \"operations where precedence may be unclear\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Precedence;\n-\n-impl LintPass for Precedence {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PRECEDENCE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Precedence\"\n-    }\n-}\n+declare_lint_pass!(Precedence => [PRECEDENCE]);\n \n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {"}, {"sha": "af69d62ddb739980db47890cc8a8840ba414e2eb", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::QPath;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::borrow::Cow;\n use syntax::source_map::Span;\n@@ -94,20 +94,9 @@ declare_clippy_lint! {\n     \"fns that create mutable refs from immutable ref args\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct PointerPass;\n+declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF]);\n \n-impl LintPass for PointerPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PTR_ARG, CMP_NULL, MUT_FROM_REF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Ptr\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Fn(ref decl, _, _, body_id) = item.node {\n             check_fn(cx, decl, item.hir_id, Some(body_id));"}, {"sha": "2d3c3298f584711bb0f736560043c1827ffbce16", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,5 +1,7 @@\n use crate::utils;\n-use rustc::{declare_tool_lint, hir, lint, lint_array};\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::fmt;\n \n@@ -39,21 +41,10 @@ declare_clippy_lint! {\n     \"unneeded pointer offset cast\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Pass;\n+declare_lint_pass!(PtrOffsetWithCast => [PTR_OFFSET_WITH_CAST]);\n \n-impl lint::LintPass for Pass {\n-    fn get_lints(&self) -> lint::LintArray {\n-        lint_array!(PTR_OFFSET_WITH_CAST)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"PtrOffsetWithCast\"\n-    }\n-}\n-\n-impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr(&mut self, cx: &lint::LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PtrOffsetWithCast {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // Check if the expressions is a ptr.offset or ptr.wrapping_offset method call\n         let (receiver_expr, arg_expr, method) = match expr_as_ptr_offset_call(cx, expr) {\n             Some(call_arg) => call_arg,\n@@ -84,11 +75,8 @@ impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {\n }\n \n // If the given expression is a cast from a usize, return the lhs of the cast\n-fn expr_as_cast_from_usize<'a, 'tcx>(\n-    cx: &lint::LateContext<'a, 'tcx>,\n-    expr: &'tcx hir::Expr,\n-) -> Option<&'tcx hir::Expr> {\n-    if let hir::ExprKind::Cast(ref cast_lhs_expr, _) = expr.node {\n+fn expr_as_cast_from_usize<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<&'tcx Expr> {\n+    if let ExprKind::Cast(ref cast_lhs_expr, _) = expr.node {\n         if is_expr_ty_usize(cx, &cast_lhs_expr) {\n             return Some(cast_lhs_expr);\n         }\n@@ -99,10 +87,10 @@ fn expr_as_cast_from_usize<'a, 'tcx>(\n // If the given expression is a ptr::offset  or ptr::wrapping_offset method call, return the\n // receiver, the arg of the method call, and the method.\n fn expr_as_ptr_offset_call<'a, 'tcx>(\n-    cx: &lint::LateContext<'a, 'tcx>,\n-    expr: &'tcx hir::Expr,\n-) -> Option<(&'tcx hir::Expr, &'tcx hir::Expr, Method)> {\n-    if let hir::ExprKind::MethodCall(ref path_segment, _, ref args) = expr.node {\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+) -> Option<(&'tcx Expr, &'tcx Expr, Method)> {\n+    if let ExprKind::MethodCall(ref path_segment, _, ref args) = expr.node {\n         if is_expr_ty_raw_ptr(cx, &args[0]) {\n             if path_segment.ident.name == \"offset\" {\n                 return Some((&args[0], &args[1], Method::Offset));\n@@ -116,20 +104,20 @@ fn expr_as_ptr_offset_call<'a, 'tcx>(\n }\n \n // Is the type of the expression a usize?\n-fn is_expr_ty_usize<'a, 'tcx>(cx: &lint::LateContext<'a, 'tcx>, expr: &hir::Expr) -> bool {\n+fn is_expr_ty_usize<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr) -> bool {\n     cx.tables.expr_ty(expr) == cx.tcx.types.usize\n }\n \n // Is the type of the expression a raw pointer?\n-fn is_expr_ty_raw_ptr<'a, 'tcx>(cx: &lint::LateContext<'a, 'tcx>, expr: &hir::Expr) -> bool {\n+fn is_expr_ty_raw_ptr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr) -> bool {\n     cx.tables.expr_ty(expr).is_unsafe_ptr()\n }\n \n fn build_suggestion<'a, 'tcx>(\n-    cx: &lint::LateContext<'a, 'tcx>,\n+    cx: &LateContext<'a, 'tcx>,\n     method: Method,\n-    receiver_expr: &hir::Expr,\n-    cast_lhs_expr: &hir::Expr,\n+    receiver_expr: &Expr,\n+    cast_lhs_expr: &Expr,\n ) -> Option<String> {\n     let receiver = utils::snippet_opt(cx, receiver_expr.span)?;\n     let cast_lhs = utils::snippet_opt(cx, cast_lhs_expr.span)?;"}, {"sha": "c5388905032c35bfd44630ca07b1b4727d570246", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ptr::P;\n \n@@ -34,20 +34,9 @@ declare_clippy_lint! {\n     \"checks for expressions that could be replaced by the question mark operator\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(QuestionMark => [QUESTION_MARK]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(QUESTION_MARK)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"QuestionMark\"\n-    }\n-}\n-\n-impl Pass {\n+impl QuestionMark {\n     /// Checks if the given expression on the given context matches the following structure:\n     ///\n     /// ```ignore\n@@ -165,7 +154,7 @@ impl Pass {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for QuestionMark {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         Self::check_is_none_and_early_return_none(cx, expr);\n     }"}, {"sha": "a18ee4c2b896ea3e643ad0df29a66f7bcf91819c", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::RangeLimits;\n use syntax::source_map::Spanned;\n@@ -86,25 +86,14 @@ declare_clippy_lint! {\n     \"`x..=(y-1)` reads better as `x..y`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(Ranges => [\n+    ITERATOR_STEP_BY_ZERO,\n+    RANGE_ZIP_WITH_LEN,\n+    RANGE_PLUS_ONE,\n+    RANGE_MINUS_ONE\n+]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            ITERATOR_STEP_BY_ZERO,\n-            RANGE_ZIP_WITH_LEN,\n-            RANGE_PLUS_ONE,\n-            RANGE_MINUS_ONE\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Ranges\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::MethodCall(ref path, _, ref args) = expr.node {\n             let name = path.ident.as_str();"}, {"sha": "92628cfb4a4812344929a401f03ffd11fe4c7886", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n     TerminatorKind,\n };\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::convert::TryFrom;\n use syntax::source_map::{BytePos, Span};\n@@ -64,17 +64,7 @@ declare_clippy_lint! {\n     \"`clone()` of an owned value that is going to be dropped immediately\"\n }\n \n-pub struct RedundantClone;\n-\n-impl LintPass for RedundantClone {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(REDUNDANT_CLONE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"RedundantClone\"\n-    }\n-}\n+declare_lint_pass!(RedundantClone => [REDUNDANT_CLONE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n     #[allow(clippy::too_many_lines)]"}, {"sha": "389f72057890d26d505c32e4d290f7d7b7c34caf", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::span_lint_and_sugg;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::*;\n \n@@ -32,17 +32,7 @@ declare_clippy_lint! {\n     \"checks for fields in struct literals where shorthands could be used\"\n }\n \n-pub struct RedundantFieldNames;\n-\n-impl LintPass for RedundantFieldNames {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(REDUNDANT_FIELD_NAMES)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"RedundantFieldNames\"\n-    }\n-}\n+declare_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {"}, {"sha": "fe1a29b98833c92d9e983363d4a89f9f0ec538f4", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::ptr::P;\n@@ -42,20 +42,9 @@ declare_clippy_lint! {\n     \"use the proper utility function avoiding an `if let`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(RedundantPatternMatching => [REDUNDANT_PATTERN_MATCHING]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(REDUNDANT_PATTERN_MATCHING)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"RedundantPatternMatching\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPatternMatching {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Match(ref op, ref arms, ref match_source) = expr.node {\n             match match_source {"}, {"sha": "2ee00a2f103470f7d92f8d926ae3ac53ad08b02f", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::{Expr, ExprKind, UnOp};\n \n@@ -24,17 +24,7 @@ declare_clippy_lint! {\n     \"use of `*&` or `*&mut` in an expression\"\n }\n \n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEREF_ADDROF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DerefAddrOf\"\n-    }\n-}\n+declare_lint_pass!(DerefAddrOf => [DEREF_ADDROF]);\n \n fn without_parens(mut e: &Expr) -> &Expr {\n     while let ExprKind::Paren(ref child_e) = e.node {\n@@ -43,7 +33,7 @@ fn without_parens(mut e: &Expr) -> &Expr {\n     e\n }\n \n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.node;\n@@ -82,19 +72,9 @@ declare_clippy_lint! {\n     \"Use of reference in auto dereference expression.\"\n }\n \n-pub struct DerefPass;\n-\n-impl LintPass for DerefPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(REF_IN_DEREF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"RefInDeref\"\n-    }\n-}\n+declare_lint_pass!(RefInDeref => [REF_IN_DEREF]);\n \n-impl EarlyLintPass for DerefPass {\n+impl EarlyLintPass for RefInDeref {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Field(ref object, _) = e.node;"}, {"sha": "2c912741f8ca46145d9f60f2d11c74b1d51df0e1", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use regex_syntax;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use std::convert::TryFrom;\n use syntax::ast::{LitKind, StrStyle};\n@@ -67,22 +67,14 @@ declare_clippy_lint! {\n }\n \n #[derive(Clone, Default)]\n-pub struct Pass {\n+pub struct Regex {\n     spans: FxHashSet<Span>,\n     last: Option<HirId>,\n }\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Regex\"\n-    }\n-}\n+impl_lint_pass!(Regex => [INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Regex {\n     fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n         self.spans.clear();\n     }"}, {"sha": "4dc5cea450d1cdd424943333431c1aae08ea321c", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -29,17 +29,7 @@ declare_clippy_lint! {\n     \"Lint usages of standard library `const`s that could be replaced by `const fn`s\"\n }\n \n-pub struct ReplaceConsts;\n-\n-impl LintPass for ReplaceConsts {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(REPLACE_CONSTS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ReplaceConsts\"\n-    }\n-}\n+declare_lint_pass!(ReplaceConsts => [REPLACE_CONSTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {"}, {"sha": "ba871c464ead9c9ccc9dc925b4a5e20898ac6bf2", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::Span;\n@@ -83,10 +83,9 @@ declare_clippy_lint! {\n     \"needless unit expression\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct ReturnPass;\n+declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n \n-impl ReturnPass {\n+impl Return {\n     // Check the final stmt or expr in a block for unnecessary return.\n     fn check_block_return(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n         if let Some(stmt) = block.stmts.last() {\n@@ -177,17 +176,7 @@ impl ReturnPass {\n     }\n }\n \n-impl LintPass for ReturnPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Return\"\n-    }\n-}\n-\n-impl EarlyLintPass for ReturnPass {\n+impl EarlyLintPass for Return {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, kind: FnKind<'_>, decl: &ast::FnDecl, span: Span, _: ast::NodeId) {\n         match kind {\n             FnKind::ItemFn(.., block) | FnKind::Method(.., block) => self.check_block_return(cx, block),"}, {"sha": "f3d4ff35d48768cf33d651b39169af5ba93323d1", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{get_trait_def_id, paths, span_lint};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for mis-uses of the serde API.\n@@ -18,20 +18,9 @@ declare_clippy_lint! {\n     \"various things that will negatively affect your serde experience\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Serde;\n+declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n-impl LintPass for Serde {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(SERDE_API_MISUSE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"SerdeAPI\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Serde {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref items) = item.node {\n             let did = trait_ref.path.def.def_id();"}, {"sha": "e43b591a9cdc83e8211f0e3ddf7e563dede16733", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n declare_clippy_lint! {\n@@ -75,20 +75,9 @@ declare_clippy_lint! {\n     \"rebinding a name without even using the original value\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(Shadow => [SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Shadow\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Shadow {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "0bc992b3191b8b1977914848453d3712dda96b5a", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax_pos::symbol::Symbol;\n@@ -30,18 +30,7 @@ declare_clippy_lint! {\n     \"slow vector initialization\"\n }\n \n-#[derive(Copy, Clone, Default)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(SLOW_VECTOR_INITIALIZATION,)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"SlowVectorInit\"\n-    }\n-}\n+declare_lint_pass!(SlowVectorInit => [SLOW_VECTOR_INITIALIZATION]);\n \n /// `VecAllocation` contains data regarding a vector allocated with `with_capacity` and then\n /// assigned to a variable. For example, `let mut vec = Vec::with_capacity(0)` or\n@@ -67,7 +56,7 @@ enum InitializationType<'tcx> {\n     Resize(&'tcx Expr),\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SlowVectorInit {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // Matches initialization on reassignements. For example: `vec = Vec::with_capacity(100)`\n         if_chain! {\n@@ -113,7 +102,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-impl Pass {\n+impl SlowVectorInit {\n     /// Checks if the given expression is `Vec::with_capacity(..)`. It will return the expression\n     /// of the first argument of `with_capacity` call if it matches or `None` if it does not.\n     fn is_vec_with_capacity(expr: &Expr) -> Option<&Expr> {"}, {"sha": "f1f006206ffcd4063fc86976cdd4795db3b0a876", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Spanned;\n \n@@ -73,18 +73,7 @@ declare_clippy_lint! {\n     \"calling `as_bytes` on a string literal instead of using a byte string literal\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct StringAdd;\n-\n-impl LintPass for StringAdd {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(STRING_ADD, STRING_ADD_ASSIGN)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"StringAdd\"\n-    }\n-}\n+declare_lint_pass!(StringAdd => [STRING_ADD, STRING_ADD_ASSIGN]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n@@ -149,18 +138,7 @@ fn is_add(cx: &LateContext<'_, '_>, src: &Expr, target: &Expr) -> bool {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct StringLitAsBytes;\n-\n-impl LintPass for StringLitAsBytes {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(STRING_LIT_AS_BYTES)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"StringLiteralAsBytes\"\n-    }\n-}\n+declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {"}, {"sha": "f7de396c38972b59f82f8d738579a67b04fd8dd5", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Lints for suspicious operations in impls of arithmetic operators, e.g.\n@@ -49,18 +49,7 @@ declare_clippy_lint! {\n     \"suspicious use of operators in impl of OpAssign trait\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct SuspiciousImpl;\n-\n-impl LintPass for SuspiciousImpl {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_ASSIGN_IMPL]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"SuspiciousImpl\"\n-    }\n-}\n+declare_lint_pass!(SuspiciousImpl => [SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_ASSIGN_IMPL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {"}, {"sha": "fc5b2150d52cf9bbca56a846d15fa20ee1e2ead0", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -7,7 +7,7 @@ use matches::matches;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -52,18 +52,7 @@ declare_clippy_lint! {\n     \"`foo = bar; bar = foo` sequence\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Swap;\n-\n-impl LintPass for Swap {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MANUAL_SWAP, ALMOST_SWAPPED]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Swap\"\n-    }\n-}\n+declare_lint_pass!(Swap => [MANUAL_SWAP, ALMOST_SWAPPED]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Swap {\n     fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block) {"}, {"sha": "e03c6689a1064c51ba99ad34ea39848f308f071c", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use crate::utils::span_lint;\n use rustc::hir::def::Def;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for construction of a structure or tuple just to\n@@ -37,20 +37,9 @@ fn is_temporary(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+declare_lint_pass!(TemporaryAssignment => [TEMPORARY_ASSIGNMENT]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEMPORARY_ASSIGNMENT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"TemporaryAssignment\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TemporaryAssignment {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Assign(target, _) = &expr.node {\n             let mut base = target;"}, {"sha": "d2d3d3cedb712d208077180735097b2b2fb10d86", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::borrow::Cow;\n use syntax::ast;\n@@ -203,27 +203,17 @@ declare_clippy_lint! {\n     \"transmutes from a pointer to a pointer / a reference to a reference\"\n }\n \n-pub struct Transmute;\n-\n-impl LintPass for Transmute {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            CROSSPOINTER_TRANSMUTE,\n-            TRANSMUTE_PTR_TO_REF,\n-            TRANSMUTE_PTR_TO_PTR,\n-            USELESS_TRANSMUTE,\n-            WRONG_TRANSMUTE,\n-            TRANSMUTE_INT_TO_CHAR,\n-            TRANSMUTE_BYTES_TO_STR,\n-            TRANSMUTE_INT_TO_BOOL,\n-            TRANSMUTE_INT_TO_FLOAT,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Transmute\"\n-    }\n-}\n+declare_lint_pass!(Transmute => [\n+    CROSSPOINTER_TRANSMUTE,\n+    TRANSMUTE_PTR_TO_REF,\n+    TRANSMUTE_PTR_TO_PTR,\n+    USELESS_TRANSMUTE,\n+    WRONG_TRANSMUTE,\n+    TRANSMUTE_INT_TO_CHAR,\n+    TRANSMUTE_BYTES_TO_STR,\n+    TRANSMUTE_INT_TO_BOOL,\n+    TRANSMUTE_INT_TO_FLOAT,\n+]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n     #[allow(clippy::similar_names, clippy::too_many_lines)]"}, {"sha": "a5bb05dc64184d9bdf9046da76f0ed7bc371b527", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{match_qpath, span_lint};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::LitKind;\n \n declare_clippy_lint! {\n@@ -24,22 +24,11 @@ declare_clippy_lint! {\n     \"transmutes from a null pointer to a reference, which is undefined behavior\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TRANSMUTING_NULL,)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"TransmutingNull\"\n-    }\n-}\n+declare_lint_pass!(TransmutingNull => [TRANSMUTING_NULL]);\n \n const LINT_MSG: &str = \"transmuting a known null pointer into a reference.\";\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TransmutingNull {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;"}, {"sha": "36dba74615a47aec389c4a560b68dabd36fbb772", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::session::config::Config as SessionConfig;\n use rustc::ty::{self, FnSig};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n@@ -137,15 +137,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n     }\n }\n \n-impl LintPass for TriviallyCopyPassByRef {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![TRIVIALLY_COPY_PASS_BY_REF]\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"TrivallyCopyPassByRef\"\n-    }\n-}\n+impl_lint_pass!(TriviallyCopyPassByRef => [TRIVIALLY_COPY_PASS_BY_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {"}, {"sha": "30c7059a4b621f60aa41f7e62c87075bd89c56b6", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 29, "deletions": 138, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n@@ -27,9 +27,6 @@ use crate::utils::{\n     span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n-/// Handles all the linting of funky types\n-pub struct TypePass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `Box<Vec<_>>` anywhere in the code.\n     ///\n@@ -165,17 +162,9 @@ declare_clippy_lint! {\n     \"a borrow of a boxed type\"\n }\n \n-impl LintPass for TypePass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n-    }\n+declare_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX]);\n \n-    fn name(&self) -> &'static str {\n-        \"Types\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_, '_>, _: FnKind<'_>, decl: &FnDecl, _: &Body, _: Span, id: HirId) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_hir_id(cx.tcx.hir().get_parent_item(id)) {\n@@ -446,8 +435,6 @@ fn is_any_trait(t: &hir::Ty) -> bool {\n     false\n }\n \n-pub struct LetPass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for binding a unit value.\n     ///\n@@ -467,17 +454,9 @@ declare_clippy_lint! {\n     \"creating a let binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n-impl LintPass for LetPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(LET_UNIT_VALUE)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"LetUnitValue\"\n-    }\n-}\n+declare_lint_pass!(LetUnitValue => [LET_UNIT_VALUE]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtKind::Local(ref local) = stmt.node {\n             if is_unit(cx.tables.pat_ty(&local.pat)) {\n@@ -539,17 +518,7 @@ declare_clippy_lint! {\n     \"comparing unit values\"\n }\n \n-pub struct UnitCmp;\n-\n-impl LintPass for UnitCmp {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNIT_CMP)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnicCmp\"\n-    }\n-}\n+declare_lint_pass!(UnitCmp => [UNIT_CMP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -598,17 +567,7 @@ declare_clippy_lint! {\n     \"passing unit to a function\"\n }\n \n-pub struct UnitArg;\n-\n-impl LintPass for UnitArg {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNIT_ARG)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnitArg\"\n-    }\n-}\n+declare_lint_pass!(UnitArg => [UNIT_ARG]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -683,8 +642,6 @@ fn is_unit_literal(expr: &Expr) -> bool {\n     }\n }\n \n-pub struct CastPass;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for casts from any numerical to a float type where\n     /// the receiving type cannot store all values from the original type without\n@@ -1113,25 +1070,17 @@ fn check_lossless(cx: &LateContext<'_, '_>, expr: &Expr, op: &Expr, cast_from: T\n     }\n }\n \n-impl LintPass for CastPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            CAST_PRECISION_LOSS,\n-            CAST_SIGN_LOSS,\n-            CAST_POSSIBLE_TRUNCATION,\n-            CAST_POSSIBLE_WRAP,\n-            CAST_LOSSLESS,\n-            UNNECESSARY_CAST,\n-            CAST_PTR_ALIGNMENT,\n-            FN_TO_NUMERIC_CAST,\n-            FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Casts\"\n-    }\n-}\n+declare_lint_pass!(Casts => [\n+    CAST_PRECISION_LOSS,\n+    CAST_SIGN_LOSS,\n+    CAST_POSSIBLE_TRUNCATION,\n+    CAST_POSSIBLE_WRAP,\n+    CAST_LOSSLESS,\n+    UNNECESSARY_CAST,\n+    CAST_PTR_ALIGNMENT,\n+    FN_TO_NUMERIC_CAST,\n+    FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+]);\n \n // Check if the given type is either `core::ffi::c_void` or\n // one of the platform specific `libc::<platform>::c_void` of libc.\n@@ -1159,7 +1108,7 @@ fn fp_ty_mantissa_nbits(typ: Ty<'_>) -> u32 {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n@@ -1342,27 +1291,19 @@ declare_clippy_lint! {\n     \"usage of very complex types that might be better factored into `type` definitions\"\n }\n \n-pub struct TypeComplexityPass {\n+pub struct TypeComplexity {\n     threshold: u64,\n }\n \n-impl TypeComplexityPass {\n+impl TypeComplexity {\n     pub fn new(threshold: u64) -> Self {\n         Self { threshold }\n     }\n }\n \n-impl LintPass for TypeComplexityPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TYPE_COMPLEXITY)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"TypeComplexityPass\"\n-    }\n-}\n+impl_lint_pass!(TypeComplexity => [TYPE_COMPLEXITY]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n@@ -1412,7 +1353,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n     }\n }\n \n-impl<'a, 'tcx> TypeComplexityPass {\n+impl<'a, 'tcx> TypeComplexity {\n     fn check_fndecl(&self, cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl) {\n         for arg in &decl.inputs {\n             self.check_type(cx, arg);\n@@ -1518,17 +1459,7 @@ declare_clippy_lint! {\n     \"casting a character literal to u8\"\n }\n \n-pub struct CharLitAsU8;\n-\n-impl LintPass for CharLitAsU8 {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CHAR_LIT_AS_U8)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CharLiteralAsU8\"\n-    }\n-}\n+declare_lint_pass!(CharLitAsU8 => [CHAR_LIT_AS_U8]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -1582,17 +1513,7 @@ declare_clippy_lint! {\n     \"a comparison with a maximum or minimum value that is always true or false\"\n }\n \n-pub struct AbsurdExtremeComparisons;\n-\n-impl LintPass for AbsurdExtremeComparisons {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ABSURD_EXTREME_COMPARISONS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"AbsurdExtremeComparisons\"\n-    }\n-}\n+declare_lint_pass!(AbsurdExtremeComparisons => [ABSURD_EXTREME_COMPARISONS]);\n \n enum ExtremeType {\n     Minimum,\n@@ -1761,17 +1682,7 @@ declare_clippy_lint! {\n     \"a comparison involving an upcast which is always true or false\"\n }\n \n-pub struct InvalidUpcastComparisons;\n-\n-impl LintPass for InvalidUpcastComparisons {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INVALID_UPCAST_COMPARISONS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"InvalidUpcastComparisons\"\n-    }\n-}\n+declare_lint_pass!(InvalidUpcastComparisons => [INVALID_UPCAST_COMPARISONS]);\n \n #[derive(Copy, Clone, Debug, Eq)]\n enum FullInt {\n@@ -2010,17 +1921,7 @@ declare_clippy_lint! {\n     \"missing generalization over different hashers\"\n }\n \n-pub struct ImplicitHasher;\n-\n-impl LintPass for ImplicitHasher {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(IMPLICIT_HASHER)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ImplicitHasher\"\n-    }\n-}\n+declare_lint_pass!(ImplicitHasher => [IMPLICIT_HASHER]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n     #[allow(clippy::cast_possible_truncation, clippy::too_many_lines)]\n@@ -2365,17 +2266,7 @@ declare_clippy_lint! {\n     \"a cast of reference to a mutable pointer\"\n }\n \n-pub struct RefToMut;\n-\n-impl LintPass for RefToMut {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CAST_REF_TO_MUT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"RefToMut\"\n-    }\n-}\n+declare_lint_pass!(RefToMut => [CAST_REF_TO_MUT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "d96596bbb525b525213fbef487ad447c4176c414", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{is_allowed, snippet, span_help_and_lint};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::LitKind;\n use syntax::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n@@ -58,18 +58,7 @@ declare_clippy_lint! {\n     \"using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Unicode;\n-\n-impl LintPass for Unicode {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ZERO_WIDTH_SPACE, NON_ASCII_LITERAL, UNICODE_NOT_NFC)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Unicode\"\n-    }\n-}\n+declare_lint_pass!(Unicode => [ZERO_WIDTH_SPACE, NON_ASCII_LITERAL, UNICODE_NOT_NFC]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "deeeefb88ab5770671eeb0e57ade8c0d1f915e25", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::span_lint;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n@@ -26,17 +26,7 @@ declare_clippy_lint! {\n     \"`unsafe` removed from API names on import\"\n }\n \n-pub struct UnsafeNameRemoval;\n-\n-impl LintPass for UnsafeNameRemoval {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSAFE_REMOVED_FROM_NAME)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnsafeNameRemoval\"\n-    }\n-}\n+declare_lint_pass!(UnsafeNameRemoval => [UNSAFE_REMOVED_FROM_NAME]);\n \n impl EarlyLintPass for UnsafeNameRemoval {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {"}, {"sha": "b3de0823bd453fdc2e8d4953597a42b35a8fd101", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unused written/read amount.\n@@ -30,17 +30,7 @@ declare_clippy_lint! {\n     \"unused written/read amount\"\n }\n \n-pub struct UnusedIoAmount;\n-\n-impl LintPass for UnusedIoAmount {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_IO_AMOUNT)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnusedIoAmount\"\n-    }\n-}\n+declare_lint_pass!(UnusedIoAmount => [UNUSED_IO_AMOUNT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {"}, {"sha": "73934adfb33fcd3c708f8168a21d7f32986855b9", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{in_macro, span_lint};\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n@@ -27,22 +27,12 @@ declare_clippy_lint! {\n     \"unused labels\"\n }\n \n-pub struct UnusedLabel;\n-\n struct UnusedLabelVisitor<'a, 'tcx: 'a> {\n     labels: FxHashMap<LocalInternedString, Span>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl LintPass for UnusedLabel {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_LABEL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UnusedLable\"\n-    }\n-}\n+declare_lint_pass!(UnusedLabel => [UNUSED_LABEL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n     fn check_fn("}, {"sha": "720795eace808d612544db35f0bbf0029be71b37", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use if_chain::if_chain;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n use rustc::hir::intravisit::*;\n@@ -54,8 +54,6 @@ declare_clippy_lint! {\n     \"checks for calls of unwrap[_err]() that will always fail\"\n }\n \n-pub struct Pass;\n-\n /// Visitor that keeps track of which variables are unwrappable.\n struct UnwrappableVariablesVisitor<'a, 'tcx: 'a> {\n     unwrappables: Vec<UnwrapInfo<'tcx>>,\n@@ -179,17 +177,9 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a> LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(PANICKING_UNWRAP, UNNECESSARY_UNWRAP)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Unwrap\"\n-    }\n-}\n+declare_lint_pass!(Unwrap => [PANICKING_UNWRAP, UNNECESSARY_UNWRAP]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unwrap {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "955239d4281f9e9e7542a9b47b768e6dbe99aaa4", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::ty::DefIdTree;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax_pos::symbol::keywords::SelfUpper;\n \n@@ -46,18 +46,7 @@ declare_clippy_lint! {\n     \"Unnecessary structure name repetition whereas `Self` is applicable\"\n }\n \n-#[derive(Copy, Clone, Default)]\n-pub struct UseSelf;\n-\n-impl LintPass for UseSelf {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(USE_SELF)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UseSelf\"\n-    }\n-}\n+declare_lint_pass!(UseSelf => [USE_SELF]);\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n "}, {"sha": "4ddae1d01c13fec34dcaaa8d2e2dfb0c019b2c65", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::{Attribute, LitKind};\n \n@@ -48,17 +48,7 @@ declare_clippy_lint! {\n     \"helper for writing lints\"\n }\n \n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(LINT_AUTHOR)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Author\"\n-    }\n-}\n+declare_lint_pass!(Author => [LINT_AUTHOR]);\n \n fn prelude() {\n     println!(\"if_chain! {{\");\n@@ -71,7 +61,7 @@ fn done() {\n     println!(\"}}\");\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;"}, {"sha": "72c0b5ce365ca17284ea9ad6633391c7a09b9304", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -5,7 +5,7 @@ use rustc::hir;\n use rustc::hir::print;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::Attribute;\n \n declare_clippy_lint! {\n@@ -30,19 +30,9 @@ declare_clippy_lint! {\n     \"helper to dump info about code\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(DeepCodeInspector => [DEEP_CODE_INSPECTION]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEEP_CODE_INSPECTION)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DeepCodeInspector\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DeepCodeInspector {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;"}, {"sha": "375e3d2b3f4ea6a636b54a284b6f1cfdbfb86476", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def::Def;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n@@ -31,22 +31,17 @@ declare_clippy_lint! {\n     /// putting a lint to a `LintPass::get_lints()`'s return, the compiler will not\n     /// know the name of the lint.\n     ///\n-    /// **Known problems:** Only checks for lints associated using the `lint_array!`\n-    /// macro.\n+    /// **Known problems:** Only checks for lints associated using the\n+    /// `declare_lint_pass!`, `impl_lint_pass!`, and `lint_array!` macros.\n     ///\n     /// **Example:**\n     /// ```rust\n     /// declare_lint! { pub LINT_1, ... }\n     /// declare_lint! { pub LINT_2, ... }\n     /// declare_lint! { pub FORGOTTEN_LINT, ... }\n     /// // ...\n-    /// pub struct Pass;\n-    /// impl LintPass for Pass {\n-    ///     fn get_lints(&self) -> LintArray {\n-    ///         lint_array![LINT_1, LINT_2]\n-    ///         // missing FORGOTTEN_LINT\n-    ///     }\n-    /// }\n+    /// declare_lint_pass!(Pass => [LINT_1, LINT_2]);\n+    /// // missing FORGOTTEN_LINT\n     /// ```\n     pub LINT_WITHOUT_LINT_PASS,\n     internal,\n@@ -77,20 +72,9 @@ declare_clippy_lint! {\n     \"usage of the lint functions of the compiler instead of the utils::* variant\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Clippy;\n+declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n-impl LintPass for Clippy {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(CLIPPY_LINTS_INTERNAL)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ClippyLintsInternal\"\n-    }\n-}\n-\n-impl EarlyLintPass for Clippy {\n+impl EarlyLintPass for ClippyLintsInternal {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &AstCrate) {\n         if let Some(utils) = krate.module.items.iter().find(|item| item.ident.name == \"utils\") {\n             if let ItemKind::Mod(ref utils_mod) = utils.node {\n@@ -125,14 +109,7 @@ pub struct LintWithoutLintPass {\n     registered_lints: FxHashSet<Name>,\n }\n \n-impl LintPass for LintWithoutLintPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(LINT_WITHOUT_LINT_PASS)\n-    }\n-    fn name(&self) -> &'static str {\n-        \"LintWithoutLintPass\"\n-    }\n-}\n+impl_lint_pass!(LintWithoutLintPass => [LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n@@ -247,15 +224,7 @@ impl CompilerLintFunctions {\n     }\n }\n \n-impl LintPass for CompilerLintFunctions {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(COMPILER_LINT_FUNCTIONS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"CompileLintFunctions\"\n-    }\n-}\n+impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "2422a7060cd1a4beeebf7604a0e5b7c64805b54c", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n@@ -25,20 +25,9 @@ declare_clippy_lint! {\n     \"useless `vec!`\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Pass;\n+declare_lint_pass!(UselessVec => [USELESS_VEC]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(USELESS_VEC)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"UselessVec\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessVec {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // search for `&vec![_]` expressions where the adjusted type is `&[_]`\n         if_chain! {"}, {"sha": "b2a66b6d5a44648939fd1f7804b56ad372760d4d", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::span_lint;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::{ast::*, source_map::DUMMY_SP};\n \n use cargo_metadata;\n@@ -27,19 +27,9 @@ declare_clippy_lint! {\n     \"wildcard dependencies being used\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(WILDCARD_DEPENDENCIES)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"WildcardDependencies\"\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for WildcardDependencies {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().no_deps().exec() {\n             metadata"}, {"sha": "9f4ebdec7143209ea8f34b796ce514052ca93a81", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::borrow::Cow;\n use syntax::ast::*;\n@@ -168,29 +168,18 @@ declare_clippy_lint! {\n     \"writing a literal with a format string\"\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Pass;\n+declare_lint_pass!(Write => [\n+    PRINT_WITH_NEWLINE,\n+    PRINTLN_EMPTY_STRING,\n+    PRINT_STDOUT,\n+    USE_DEBUG,\n+    PRINT_LITERAL,\n+    WRITE_WITH_NEWLINE,\n+    WRITELN_EMPTY_STRING,\n+    WRITE_LITERAL\n+]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(\n-            PRINT_WITH_NEWLINE,\n-            PRINTLN_EMPTY_STRING,\n-            PRINT_STDOUT,\n-            USE_DEBUG,\n-            PRINT_LITERAL,\n-            WRITE_WITH_NEWLINE,\n-            WRITELN_EMPTY_STRING,\n-            WRITE_LITERAL\n-        )\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"Write\"\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n+impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &Mac) {\n         if mac.node.path == \"println\" {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `println!`\");"}, {"sha": "094cb627dc3a31c6c7fd5ae4ad9cb56bff6484ba", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753c39672ec091c55e83ee80a8b86a0725492903/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=753c39672ec091c55e83ee80a8b86a0725492903", "patch": "@@ -3,7 +3,7 @@ use crate::utils::span_help_and_lint;\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `0.0 / 0.0`.\n@@ -22,19 +22,9 @@ declare_clippy_lint! {\n     \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(ZeroDiv => [ZERO_DIVIDED_BY_ZERO]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(ZERO_DIVIDED_BY_ZERO)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"ZeroDiv\"\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // check for instances of 0.0/0.0\n         if_chain! {"}]}