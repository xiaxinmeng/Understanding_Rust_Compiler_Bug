{"sha": "0a0fcdb018ebee4aa8acb138418ff53c37ce5051", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGZjZGIwMThlYmVlNGFhOGFjYjEzODQxOGZmNTNjMzdjZTUwNTE=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-02-23T08:22:51Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-02-27T01:23:30Z"}, "message": "librustc: offer suggestions for unresolved names.", "tree": {"sha": "b32683cae5c65d4cdda792db712a1130f1b397f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32683cae5c65d4cdda792db712a1130f1b397f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0fcdb018ebee4aa8acb138418ff53c37ce5051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0fcdb018ebee4aa8acb138418ff53c37ce5051", "html_url": "https://github.com/rust-lang/rust/commit/0a0fcdb018ebee4aa8acb138418ff53c37ce5051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0fcdb018ebee4aa8acb138418ff53c37ce5051/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "html_url": "https://github.com/rust-lang/rust/commit/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "3db328ceb916296d06ff689481708e7dab0ef85b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0a0fcdb018ebee4aa8acb138418ff53c37ce5051/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0fcdb018ebee4aa8acb138418ff53c37ce5051/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0a0fcdb018ebee4aa8acb138418ff53c37ce5051", "patch": "@@ -4816,6 +4816,75 @@ pub impl Resolver {\n         }\n     }\n \n+    fn find_best_match_for_name(@mut self, name: &str) -> Option<~str> {\n+        let mut maybes: ~[~str] = ~[];\n+        let mut values: ~[uint] = ~[];\n+\n+        let mut j = self.value_ribs.len();\n+        while j != 0 {\n+            j -= 1;\n+            let rib = self.value_ribs.get_elt(j);\n+            for rib.bindings.each_entry |e| {\n+                vec::push(&mut maybes, copy *self.session.str_of(e.key));\n+                vec::push(&mut values, uint::max_value);\n+            }\n+        }\n+\n+        // Levenshtein Distance between two strings\n+        fn distance(s: &str, t: &str) -> uint {\n+\n+            let slen = str::len(s);\n+            let tlen = str::len(t);\n+\n+            if slen == 0 { return tlen; }\n+            if tlen == 0 { return slen; }\n+\n+            let mut dcol = vec::from_fn(tlen + 1, |x| x);\n+\n+            for str::each_chari(s) |i, sc| {\n+\n+                let mut current = i;\n+                dcol[0] = current + 1;\n+\n+                for str::each_chari(t) |j, tc| {\n+\n+                    let mut next = dcol[j + 1];\n+\n+                    if sc == tc {\n+                        dcol[j + 1] = current;\n+                    } else {\n+                        dcol[j + 1] = cmp::min(current, next);\n+                        dcol[j + 1] = cmp::min(dcol[j + 1], dcol[j]) + 1;\n+                    }\n+\n+                    current = next;\n+                }\n+            }\n+\n+            return dcol[tlen];\n+        }\n+\n+        let mut smallest = 0;\n+        for vec::eachi(maybes) |i, &other| {\n+\n+            values[i] = distance(name, other);\n+\n+            if values[i] <= values[smallest] {\n+                smallest = i;\n+            }\n+        }\n+\n+        if vec::len(values) > 0 &&\n+            values[smallest] != uint::max_value &&\n+            values[smallest] < str::len(name) + 2 {\n+\n+            Some(vec::swap_remove(&mut maybes, smallest))\n+\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn name_exists_in_scope_struct(@mut self, name: &str) -> bool {\n         let mut i = self.type_ribs.len();\n         while i != 0 {\n@@ -4882,9 +4951,20 @@ pub impl Resolver {\n                                         wrong_name));\n                         }\n                         else {\n-                            self.session.span_err(expr.span,\n-                                                fmt!(\"unresolved name: %s\",\n+                            match self.find_best_match_for_name(wrong_name) {\n+\n+                                Some(m) => {\n+                                    self.session.span_err(expr.span,\n+                                            fmt!(\"unresolved name: `%s`. \\\n+                                                Did you mean: `%s`?\",\n+                                                wrong_name, m));\n+                                }\n+                                None => {\n+                                    self.session.span_err(expr.span,\n+                                            fmt!(\"unresolved name: `%s`.\",\n                                                 wrong_name));\n+                                }\n+                            }\n                         }\n                     }\n                 }"}]}