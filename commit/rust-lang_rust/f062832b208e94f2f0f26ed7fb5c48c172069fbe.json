{"sha": "f062832b208e94f2f0f26ed7fb5c48c172069fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNjI4MzJiMjA4ZTk0ZjJmMGYyNmVkN2ZiNWM0OGMxNzIwNjlmYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-07T15:16:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-07T15:16:46Z"}, "message": "Auto merge of #42378 - steveklabnik:rustdoc-docs, r=frewsxcv\n\nThe Rustdoc book\n\nA work-in-progress start for docs for rustdoc.\n\nThis doesn't actually generate the docs yet; I wanted to open this PR to get feedback on this approach, the chapters headings themselves, and to see if anyone wanted to help fill in the ones that aren't done yet.\n\nStart of #42322.\n\n/cc @rust-lang/dev-tools @rust-lang/docs", "tree": {"sha": "7462794a75deb4d0bc0114829451dbe4758f55b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7462794a75deb4d0bc0114829451dbe4758f55b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f062832b208e94f2f0f26ed7fb5c48c172069fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f062832b208e94f2f0f26ed7fb5c48c172069fbe", "html_url": "https://github.com/rust-lang/rust/commit/f062832b208e94f2f0f26ed7fb5c48c172069fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f062832b208e94f2f0f26ed7fb5c48c172069fbe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69cc85909e085b7603471163e83ce1b692b23a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69cc85909e085b7603471163e83ce1b692b23a0", "html_url": "https://github.com/rust-lang/rust/commit/a69cc85909e085b7603471163e83ce1b692b23a0"}, {"sha": "9331f046f467d4bf5df01d82224d850ff41b29ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9331f046f467d4bf5df01d82224d850ff41b29ad", "html_url": "https://github.com/rust-lang/rust/commit/9331f046f467d4bf5df01d82224d850ff41b29ad"}], "stats": {"total": 500, "additions": 500, "deletions": 0}, "files": [{"sha": "7585238efedfc33acdd9494b0269951aaf3909ec", "filename": "src/doc/rustdoc/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2F.gitignore?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1 @@\n+book"}, {"sha": "cd6883a719c184c7148bce61ca9e60213430c094", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,8 @@\n+# The Rustdoc Book\n+\n+- [What is rustdoc?](what-is-rustdoc.md)\n+- [Command-line arguments](command-line-arguments.md)\n+- [In-source directives](in-source-directives.md)\n+- [Documentation tests](documentation-tests.md)\n+- [Plugins](plugins.md)\n+- [Passes](passes.md)\n\\ No newline at end of file"}, {"sha": "36c1b050dd50f53f7731ba6eb8295a9c7f566ebe", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,348 @@\n+# Command-line arguments\n+\n+Here's the list of arguments you can pass to `rustdoc`:\n+\n+## `-h`/`--help`: help\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc -h\n+$ rustdoc --help\n+```\n+\n+This will show `rustdoc`'s built-in help, which largely consists of\n+a list of possible command-line flags.\n+\n+Some of `rustdoc`'s flags are unstable; this page only shows stable\n+options, `--help` will show them all.\n+\n+## `-V`/`--version`: version information\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc -V\n+$ rustdoc --version\n+```\n+\n+This will show `rustdoc`'s version, which will look something\n+like this:\n+\n+```text\n+rustdoc 1.17.0 (56124baa9 2017-04-24)\n+```\n+\n+## `-v`/`--verbose`: more verbose output\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc -v src/lib.rs\n+$ rustdoc --verbose src/lib.rs\n+```\n+\n+This enables \"verbose mode\", which means that more information will be written\n+to standard out. What is written depends on the other flags you've passed in.\n+For example, with `--version`:\n+\n+```text\n+$ rustdoc --verbose --version\n+rustdoc 1.17.0 (56124baa9 2017-04-24)\n+binary: rustdoc\n+commit-hash: hash\n+commit-date: date\n+host: host-triple\n+release: 1.17.0\n+LLVM version: 3.9\n+```\n+\n+## `-r`/`--input-format`: input format\n+\n+This flag is currently ignored; the idea is that `rustdoc` would support various\n+input formats, and you could specify them via this flag.\n+\n+Rustdoc only supports Rust source code and Markdown input formats. If the\n+file ends in `.md` or `.markdown`, `rustdoc` treats it as a Markdown file.\n+Otherwise, it assumes that the input file is Rust.\n+\n+\n+## `-w`/`--output-format`: output format\n+\n+This flag is currently ignored; the idea is that `rustdoc` would support\n+various output formats, and you could specify them via this flag.\n+\n+Rustdoc only supports HTML output, and so this flag is redundant today.\n+\n+## `-o`/`--output`: output path\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -o target\\\\doc\n+$ rustdoc src/lib.rs --output target\\\\doc\n+```\n+\n+By default, `rustdoc`'s output appears in a directory named `doc` in\n+the current working directory. With this flag, it will place all output\n+into the directory you specify.\n+\n+\n+## `--crate-name`: controlling the name of the crate\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --crate-name mycrate\n+```\n+\n+By default, `rustodc` assumes that the name of your crate is the same name\n+as the `.rs` file. `--crate-name` lets you override this assumption with\n+whatever name you choose.\n+\n+## `-L`/`--library-path`: \n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -L target/debug/deps\n+$ rustdoc src/lib.rs --library-path target/debug/deps\n+```\n+\n+If your crate has dependencies, `rustdoc` needs to know where to find them.\n+Passing `--library-path` gives `rustdoc` a list of places to look for these\n+dependencies.\n+\n+This flag takes any number of directories as its argument, and will use all of\n+them when searching.\n+\n+\n+## `--cfg`: passing configuration flags\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --cfg feature=\"foo\"\n+```\n+\n+This flag accepts the same values as `rustc --cfg`, and uses it to configure\n+compilation. The example above uses `feature`, but any of the `cfg` values\n+are acceptable.\n+\n+## `--extern`: specify a dependency's location\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --extern lazy-static=/path/to/lazy-static\n+```\n+\n+Similar to `--library-path`, `--extern` is about specifying the location\n+of a dependency. `--library-path` provides directories to search in, `--extern`\n+instead lets you specify exactly which dependency is located where.\n+\n+\n+## `--plugin-path`: loading plugins\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --plugin-path=/path/to/plugins\n+```\n+\n+Similar to `--library-path`, but for plugins. For more, see\n+the [chapter on plugins](plugins.html).\n+\n+See also: `--plugins`.\n+\n+## `--passes`: add more rustdoc passes\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc --passes list\n+$ rustdoc src/lib.rs --passes strip-priv-imports\n+```\n+\n+An argument of \"list\" will print a list of possible \"rustdoc passes\", and other\n+arguments will be the name of which passes to run in addition to the defaults.\n+\n+For more details on passes, see [the chapter on them](passes.html).\n+\n+See also `--no-defaults`.\n+\n+## `--plugins`: \n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --plugins foo bar\n+```\n+\n+For more, see the [chapter on plugins](plugins.html).\n+\n+See also: `--plugin-path`.\n+\n+## `--no-defaults`: don't run default passes\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --no-defaults\n+```\n+\n+By default, `rustdoc` will run several passes over your code. This\n+removes those defaults, allowing you to use `--passes` to specify\n+exactly which passes you want.\n+\n+For more details on passes, see [the chapter on them](passes.html).\n+\n+See also `--passes`.\n+\n+## `--test`: run code examples as tests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --test\n+```\n+\n+This flag will run your code examples as tests. For more, see [the chapter\n+on documentation tests](documentation-tests.html).\n+\n+See also `--test-args`.\n+\n+## `--test-args`: \n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --test --test-args ignored\n+```\n+\n+This flag will pass options to the test runner when running documentation tests.\n+For more, see [the chapter on documentation tests](documentation-tests.html).\n+\n+See also `--test`.\n+\n+## `--target`: \n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --target x86_64-pc-windows-gnu\n+```\n+\n+Similar to the `--target` flag for `rustc`, this generates documentation\n+for a target triple that's different than your host triple.\n+\n+All of the usual caveats of cross-compiling code apply.\n+\n+## `--markdown-css`: include more CSS files when rendering markdown\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc README.md --markdown-css foo.css\n+```\n+\n+When rendering Markdown files, this will create a `<link>` element in the\n+`<head>` section of the generated HTML. For example, with the invocation above,\n+\n+```html\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"foo.css\">\n+```\n+\n+will be added.\n+\n+When rendering Rust files, this flag is ignored.\n+\n+## `--html-in-header`: include more HTML in <head>\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --html-in-header header.html\n+$ rustdoc README.md --html-in-header header.html\n+```\n+\n+This flag takes a list of files, and inserts them into the `<head>` section of\n+the rendered documentation.\n+\n+## `--html-before-content`: include more HTML before the content\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --html-before-content extra.html\n+$ rustdoc README.md --html-before-content extra.html\n+```\n+\n+This flag takes a list of files, and inserts them inside the `<body>` tag but\n+before the other content `rustodc` would normally produce in the rendered\n+documentation.\n+\n+## `--html-after-content`: include more HTML after the content\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --html-after-content extra.html\n+$ rustdoc README.md --html-after-content extra.html\n+```\n+\n+This flag takes a list of files, and inserts them before the `</body>` tag but\n+after the other content `rustodc` would normally produce in the rendered\n+documentation.\n+\n+\n+## `--markdown-playground-url`: control the location of the playground\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc README.md --markdown-playground-url https://play.rust-lang.org/\n+```\n+\n+When rendering a Markdown file, this flag gives the base URL of the Rust\n+Playround, to use for generating `Run` buttons.\n+\n+\n+## `--markdown-no-toc`: don't generate a table of contents\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc README.md --markdown-no-toc\n+```\n+\n+When generating documentation from a Markdown file, by default, `rustdoc` will\n+generate a table of contents. This flag supresses that, and no TOC will be\n+generated.\n+\n+\n+## `-e`/`--extend-css`: extend rustdoc's CSS\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -e extra.css\n+$ rustdoc src/lib.rs --extend-css extra.css\n+```\n+\n+With this flag, the contents of the files you pass are included at the bottom\n+of Rustdoc's `theme.css` file.\n+\n+While this flag is stable, the contents of `theme.css` are not, so be careful!\n+Updates may break your theme extensions.\n+\n+## `--sysroot`: override the system root\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --sysroot /path/to/sysroot\n+```\n+\n+Similar to `rustc --sysroot`, this lets you change the sysroot `rustdoc` uses\n+when compiling your code.\n\\ No newline at end of file"}, {"sha": "cd7d657e1165e881ff2039216382981bfa7a122c", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,3 @@\n+# Documentation tests\n+\n+Coming soon!\n\\ No newline at end of file"}, {"sha": "83f677fa7f4c5900bfb80882b4a8072b881a28cc", "filename": "src/doc/rustdoc/src/in-source-directives.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fin-source-directives.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fin-source-directives.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fin-source-directives.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,3 @@\n+# In-source directives\n+\n+Coming soon!\n\\ No newline at end of file"}, {"sha": "12054d04a7e3e19196fa5403904c786206b32ef3", "filename": "src/doc/rustdoc/src/passes.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,3 @@\n+# Passes\n+\n+Coming soon!\n\\ No newline at end of file"}, {"sha": "c0d5ed752c6a11f829f939b954a598a55dcf0d26", "filename": "src/doc/rustdoc/src/plugins.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fplugins.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,3 @@\n+# Plugins\n+\n+Coming soon!\n\\ No newline at end of file"}, {"sha": "54472e35b1b2c426951cb949bf4e5ac2b062c1fb", "filename": "src/doc/rustdoc/src/what-is-rustdoc.md", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/f062832b208e94f2f0f26ed7fb5c48c172069fbe/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md?ref=f062832b208e94f2f0f26ed7fb5c48c172069fbe", "patch": "@@ -0,0 +1,131 @@\n+# What is rustdoc?\n+\n+The standard Rust distribution ships with a tool called `rustdoc`. Its job is\n+to generate documentation for Rust projects. On a fundamental level, Rustdoc\n+takes as an argument either a crate root or a Markdown file, and produces HTML,\n+CSS, and JavaScript.\n+\n+## Basic usage\n+\n+Let's give it a try! Let's create a new project with Cargo:\n+\n+```bash\n+$ cargo new docs\n+$ cd docs\n+```\n+\n+In `src/lib.rs`, you'll find that Cargo has generated some sample code. Delete\n+it and replace it with this:\n+\n+```rust\n+/// foo is a function\n+fn foo() {}\n+```\n+\n+Let's run `rustdoc` on our code. To do so, we can call it with the path to\n+our crate root like this:\n+\n+```bash\n+$ rustdoc src/lib.rs\n+```\n+\n+This will create a new directory, `doc`, with a website inside! In our case,\n+the main page is located in `doc/lib/index.html`. If you open that up in\n+a web browser, you'll see a page with a search bar, and \"Crate lib\" at the\n+top, with no contents. There's two problems with this: first, why does it\n+think that our package is named \"lib\"? Second, why does it not have any\n+contents?\n+\n+The first problem is due to `rustdoc` trying to be helpful; like `rustc`,\n+it assumes that our crate's name is the name of the file for the crate\n+root. To fix this, we can pass in a command-line flag:\n+\n+```bash\n+$ rustdoc src/lib.rs --crate-name docs\n+```\n+\n+Now, `doc/docs/index.html` will be generated, and the page says \"Crate docs.\"\n+\n+For the second issue, it's because our function `foo` is not public; `rustdoc`\n+defaults to generating documentation for only public functions. If we change\n+our code...\n+\n+```rust\n+/// foo is a function\n+pub fn foo() {}\n+```\n+\n+... and then re-run `rustdoc`:\n+\n+```bash\n+$ rustdoc src/lib.rs --crate-name docs\n+```\n+\n+We'll have some generated documentation. Open up `doc/docs/index.html` and\n+check it out! It should show a link to the `foo` function's page, which\n+is located at `doc/docs/fn.foo.html`. On that page, you'll see the \"foo is\n+a function\" we put inside the documentation comment in our crate.\n+\n+## Using rustdoc with Cargo\n+\n+Cargo also has integration with `rustdoc` to make it easier to generate\n+docs. Instead of the `rustdoc` command, we could have done this:\n+\n+```bash\n+$ cargo doc\n+```\n+\n+Internally, this calls out to `rustdoc` like this:\n+\n+```bash\n+$ rustdoc --crate-name docs srclib.rs -o <path>\\docs\\target\\doc -L\n+dependency=<path>docs\\target\\debug\\deps\n+```\n+\n+You can see this with `cargo doc --verbose`.\n+\n+It generates the correct `--crate-name` for us, as well as pointing to\n+`src/lib.rs` But what about those other arguments? `-o` controls the\n+*o*utput of our docs. Instead of a top-level `doc` directory, you'll\n+notice that Cargo puts generated documentation under `target`. That's\n+the idiomatic place for generated files in Cargo projects. Also, it\n+passes `-L`, a flag that helps rustdoc find the dependencies\n+your code relies on. If our project used dependencies, we'd get\n+documentation for them as well!\n+\n+## Using standalone Markdown files\n+\n+`rustdoc` can also generate HTML from standalone Markdown files. Let's\n+give it a try: create a `README.md` file with these contents:\n+\n+```text\n+    # Docs\n+\n+    This is a project to test out `rustdoc`.\n+\n+    [Here is a link!](https://www.rust-lang.org)\n+\n+    ## Subheading\n+\n+    ```rust\n+    fn foo() -> i32 {\n+        1 + 1\n+    }\n+    ```\n+```\n+\n+And call `rustdoc` on it:\n+\n+```bash\n+$ rustdoc README.md\n+```\n+\n+You'll find an HTML file in `docs/doc/README.html` generated from its\n+Markdown contents.\n+\n+Cargo currently does not understand standalone Markdown files, unfortunately.\n+\n+## Summary\n+\n+This covers the simplest use-cases of `rustdoc`. The rest of this book will\n+explain all of the options that `rustdoc` has, and how to use them.\n\\ No newline at end of file"}]}