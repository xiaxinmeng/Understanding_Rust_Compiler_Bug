{"sha": "bea7209d0a7e7cfe713f1dcd1250810348cb528e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTcyMDlkMGE3ZTdjZmU3MTNmMWRjZDEyNTA4MTAzNDhjYjUyOGU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-28T02:47:03Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-28T02:53:40Z"}, "message": "chore: fix src formatting", "tree": {"sha": "969fd2990d7686e3cab2fe856430aa528210032c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969fd2990d7686e3cab2fe856430aa528210032c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea7209d0a7e7cfe713f1dcd1250810348cb528e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea7209d0a7e7cfe713f1dcd1250810348cb528e", "html_url": "https://github.com/rust-lang/rust/commit/bea7209d0a7e7cfe713f1dcd1250810348cb528e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea7209d0a7e7cfe713f1dcd1250810348cb528e/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0ed57af690bb46eb87de334c6cbef5bd27c174", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0ed57af690bb46eb87de334c6cbef5bd27c174", "html_url": "https://github.com/rust-lang/rust/commit/9b0ed57af690bb46eb87de334c6cbef5bd27c174"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "ffc6a7a66dc7d617a2bc0d596e931701d4909432", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=bea7209d0a7e7cfe713f1dcd1250810348cb528e", "patch": "@@ -1186,7 +1186,10 @@ fn next_space(tok: &TokenKind) -> SpaceState {\n /// Tries to convert a macro use into a short hand try expression. Returns `None`\n /// when the macro is not an instance of `try!` (or parsing the inner expression\n /// failed).\n-pub(crate) fn convert_try_mac(mac: &ast::MacCall, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n+pub(crate) fn convert_try_mac(\n+    mac: &ast::MacCall,\n+    context: &RewriteContext<'_>,\n+) -> Option<ast::Expr> {\n     let path = &pprust::path_to_string(&mac.path);\n     if path == \"try\" || path == \"r#try\" {\n         let ts = mac.args.inner_tokens();"}, {"sha": "4ea41cd14f49175e06856d2cfe8bcea9328acac1", "filename": "src/modules.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=bea7209d0a7e7cfe713f1dcd1250810348cb528e", "patch": "@@ -251,11 +251,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             if self.parse_sess.is_file_parsed(&path) {\n                 return Ok(None);\n             }\n-            return match Parser::parse_file_as_module(\n-                self.parse_sess,\n-                &path,\n-                sub_mod.inner,\n-            ) {\n+            return match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n                 Some(m) => Ok(Some(SubModKind::External(\n                     path,\n                     DirectoryOwnership::Owned { relative: None },\n@@ -293,16 +289,10 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                         return Ok(Some(SubModKind::MultiExternal(mods_outside_ast)));\n                     }\n                 }\n-                match Parser::parse_file_as_module(\n-                    self.parse_sess,\n-                    &path,\n-                    sub_mod.inner,\n-                ) {\n-                    Some(m) if outside_mods_empty => Ok(Some(SubModKind::External(\n-                        path,\n-                        ownership,\n-                        Cow::Owned(m),\n-                    ))),\n+                match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n+                    Some(m) if outside_mods_empty => {\n+                        Ok(Some(SubModKind::External(path, ownership, Cow::Owned(m))))\n+                    }\n                     Some(m) => {\n                         mods_outside_ast.push((path.clone(), ownership, Cow::Owned(m)));\n                         if should_insert {\n@@ -319,7 +309,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                             mods_outside_ast.push((path, ownership, sub_mod.clone()));\n                         }\n                         Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n-                    },\n+                    }\n                 }\n             }\n             Err(mut e) if !mods_outside_ast.is_empty() => {\n@@ -385,11 +375,8 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 ));\n                 continue;\n             }\n-            let m = match Parser::parse_file_as_module(\n-                self.parse_sess,\n-                &actual_path,\n-                sub_mod.inner,\n-            ) {\n+            let m = match Parser::parse_file_as_module(self.parse_sess, &actual_path, sub_mod.inner)\n+            {\n                 Some(m) => m,\n                 None => continue,\n             };"}, {"sha": "1f13fa6db6020283143245b58edba14ef43190ec", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=bea7209d0a7e7cfe713f1dcd1250810348cb528e", "patch": "@@ -231,7 +231,9 @@ impl Rewrite for Pat {\n             PatKind::Struct(ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n-            PatKind::MacCall(ref mac) => rewrite_macro(mac, None, context, shape, MacroPosition::Pat),\n+            PatKind::MacCall(ref mac) => {\n+                rewrite_macro(mac, None, context, shape, MacroPosition::Pat)\n+            }\n             PatKind::Paren(ref pat) => pat\n                 .rewrite(context, shape.offset_left(1)?.sub_width(1)?)\n                 .map(|inner_pat| format!(\"({})\", inner_pat)),"}, {"sha": "91f9def15cbe1b2abe5abea823e835445224c24e", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea7209d0a7e7cfe713f1dcd1250810348cb528e/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=bea7209d0a7e7cfe713f1dcd1250810348cb528e", "patch": "@@ -168,7 +168,7 @@ impl<'a> Parser<'a> {\n         path: &Path,\n         span: Span,\n     ) -> Option<ast::Mod> {\n-            let result = catch_unwind(AssertUnwindSafe(|| {\n+        let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n \n             let lo = parser.token.span;\n@@ -241,9 +241,7 @@ impl<'a> Parser<'a> {\n         sess: &'a ParseSess,\n         mac: &'a ast::MacCall,\n     ) -> Result<Vec<ast::Item>, &'static str> {\n-        match catch_unwind(AssertUnwindSafe(|| {\n-            Parser::parse_cfg_if_inner(sess, mac)\n-        })) {\n+        match catch_unwind(AssertUnwindSafe(|| Parser::parse_cfg_if_inner(sess, mac))) {\n             Ok(Ok(items)) => Ok(items),\n             Ok(err @ Err(_)) => err,\n             Err(..) => Err(\"failed to parse cfg_if!\"),\n@@ -255,7 +253,8 @@ impl<'a> Parser<'a> {\n         mac: &'a ast::MacCall,\n     ) -> Result<Vec<ast::Item>, &'static str> {\n         let token_stream = mac.args.inner_tokens();\n-        let mut parser = rustc_parse::stream_to_parser(sess.inner(),token_stream.clone(),Some(\"\"));\n+        let mut parser =\n+            rustc_parse::stream_to_parser(sess.inner(), token_stream.clone(), Some(\"\"));\n \n         let mut items = vec![];\n         let mut process_if_cfg = true;"}]}