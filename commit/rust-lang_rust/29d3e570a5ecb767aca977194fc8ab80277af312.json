{"sha": "29d3e570a5ecb767aca977194fc8ab80277af312", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZDNlNTcwYTVlY2I3NjdhY2E5NzcxOTRmYzhhYjgwMjc3YWYzMTI=", "commit": {"author": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2016-09-27T19:45:29Z"}, "committer": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2016-10-04T16:50:31Z"}, "message": "Apply some Arc doc changes to Rc", "tree": {"sha": "472c6d2a882890ed35a900072ef2e1199f876121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472c6d2a882890ed35a900072ef2e1199f876121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d3e570a5ecb767aca977194fc8ab80277af312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d3e570a5ecb767aca977194fc8ab80277af312", "html_url": "https://github.com/rust-lang/rust/commit/29d3e570a5ecb767aca977194fc8ab80277af312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d3e570a5ecb767aca977194fc8ab80277af312/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b6d6861937d04f097e80615d1cb88e583284c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b6d6861937d04f097e80615d1cb88e583284c2", "html_url": "https://github.com/rust-lang/rust/commit/05b6d6861937d04f097e80615d1cb88e583284c2"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "699f777138d0024c5914adfd9484d6691f399193", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29d3e570a5ecb767aca977194fc8ab80277af312/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d3e570a5ecb767aca977194fc8ab80277af312/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=29d3e570a5ecb767aca977194fc8ab80277af312", "patch": "@@ -12,12 +12,12 @@\n \n //! Single-threaded reference-counting pointers.\n //!\n-//! The type [`Rc<T>`][rc] provides shared ownership of a value, allocated\n-//! in the heap. Invoking [`clone`][clone] on `Rc` produces a new pointer\n-//! to the same value in the heap. When the last `Rc` pointer to a given\n-//! value is destroyed, the pointed-to value is also destroyed.\n+//! The type [`Rc<T>`][rc] provides shared ownership of a value of type `T`,\n+//! allocated in the heap. Invoking [`clone`][clone] on `Rc` produces a new\n+//! pointer to the same value in the heap. When the last `Rc` pointer to a\n+//! given value is destroyed, the pointed-to value is also destroyed.\n //!\n-//! Shared pointers in Rust disallow mutation by default, and `Rc` is no\n+//! Shared references in Rust disallow mutation by default, and `Rc` is no\n //! exception. If you need to mutate through an `Rc`, use [`Cell`][cell] or\n //! [`RefCell`][refcell].\n //!\n@@ -44,8 +44,9 @@\n //! functions][assoc], called using function-like syntax:\n //!\n //! ```\n-//! # use std::rc::Rc;\n-//! # let my_rc = Rc::new(());\n+//! use std::rc::Rc;\n+//! let my_rc = Rc::new(());\n+//!\n //! Rc::downgrade(&my_rc);\n //! ```\n //!\n@@ -294,10 +295,13 @@ impl<T> Rc<T> {\n \n     /// Returns the contained value, if the `Rc` has exactly one strong reference.\n     ///\n-    /// Otherwise, an `Err` is returned with the same `Rc` that was passed in.\n+    /// Otherwise, an [`Err`][result] is returned with the same `Rc` that was\n+    /// passed in.\n     ///\n     /// This will succeed even if there are outstanding weak references.\n     ///\n+    /// [result]: ../../std/result/enum.Result.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -331,7 +335,11 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Checks whether `Rc::try_unwrap` would return `Ok`.\n+    /// Checks whether [`Rc::try_unwrap`][try_unwrap] would return\n+    /// [`Ok`][result].\n+    ///\n+    /// [try_unwrap]: struct.Rc.html#method.try_unwrap\n+    /// [result]: ../../std/result/enum.Result.html\n     ///\n     /// # Examples\n     ///\n@@ -582,8 +590,10 @@ impl<T: ?Sized> Drop for Rc<T> {\n     /// Drops the `Rc`.\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n-    /// count reaches zero then the only other references (if any) are `Weak`,\n-    /// so we `drop` the inner value.\n+    /// count reaches zero then the only other references (if any) are\n+    /// [`Weak`][weak], so we `drop` the inner value.\n+    ///\n+    /// [weak]: struct.Weak.html\n     ///\n     /// # Examples\n     ///"}]}