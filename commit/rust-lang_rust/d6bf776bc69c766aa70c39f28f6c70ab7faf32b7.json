{"sha": "d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YmY3NzZiYzY5Yzc2NmFhNzBjMzlmMjhmNmM3MGFiN2ZhZjMyYjc=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T01:38:23Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-24T01:36:57Z"}, "message": "Fix incremental tests", "tree": {"sha": "a2b49ce26ac6cb6e8b3334aa13a9add1bbdba525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b49ce26ac6cb6e8b3334aa13a9add1bbdba525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "html_url": "https://github.com/rust-lang/rust/commit/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c45420bdad8d3bf950ff3c46e1856348a7ddc7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c45420bdad8d3bf950ff3c46e1856348a7ddc7b", "html_url": "https://github.com/rust-lang/rust/commit/5c45420bdad8d3bf950ff3c46e1856348a7ddc7b"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "837aa9360c8953fcf8506987317740a987f486aa", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "patch": "@@ -24,6 +24,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit;\n use rustc::ich::{ATTR_DIRTY, ATTR_CLEAN};\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n use syntax::ast::{self, Attribute, NestedMetaItem};\n use syntax::symbol::{Symbol, sym};\n@@ -71,6 +72,7 @@ const BASE_IMPL: &[&str] = &[\n /// code, i.e., functions+methods\n const BASE_MIR: &[&str] = &[\n     label_strs::optimized_mir,\n+    label_strs::promoted_mir,\n     label_strs::mir_built,\n ];\n \n@@ -472,26 +474,39 @@ impl DirtyCleanVisitor<'tcx> {\n     fn assert_dirty(&self, item_span: Span, dep_node: DepNode) {\n         debug!(\"assert_dirty({:?})\", dep_node);\n \n-        let dep_node_index = self.tcx.dep_graph.dep_node_index_of(&dep_node);\n-        let current_fingerprint = self.tcx.dep_graph.fingerprint_of(dep_node_index);\n+        let current_fingerprint = self.get_fingerprint(&dep_node);\n         let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n \n-        if Some(current_fingerprint) == prev_fingerprint {\n+        if current_fingerprint == prev_fingerprint {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx.sess.span_err(\n                 item_span,\n                 &format!(\"`{}` should be dirty but is not\", dep_node_str));\n         }\n     }\n \n+    fn get_fingerprint(&self, dep_node: &DepNode) -> Option<Fingerprint> {\n+        if self.tcx.dep_graph.dep_node_exists(dep_node) {\n+            let dep_node_index = self.tcx.dep_graph.dep_node_index_of(dep_node);\n+            Some(self.tcx.dep_graph.fingerprint_of(dep_node_index))\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn assert_clean(&self, item_span: Span, dep_node: DepNode) {\n         debug!(\"assert_clean({:?})\", dep_node);\n \n-        let dep_node_index = self.tcx.dep_graph.dep_node_index_of(&dep_node);\n-        let current_fingerprint = self.tcx.dep_graph.fingerprint_of(dep_node_index);\n+        let current_fingerprint = self.get_fingerprint(&dep_node);\n         let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n \n-        if Some(current_fingerprint) != prev_fingerprint {\n+        // if the node wasn't previously evaluated and now is (or vice versa),\n+        // then the node isn't actually clean or dirty.\n+        if (current_fingerprint == None) ^ (prev_fingerprint == None) {\n+            return;\n+        }\n+\n+        if current_fingerprint != prev_fingerprint {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx.sess.span_err(\n                 item_span,"}, {"sha": "70820dfaea4a033de9c4b9b79f1fca0faace731c", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "patch": "@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;"}, {"sha": "e98f9b67ca4218fb16704f9ed674b336a46660c5", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bf776bc69c766aa70c39f28f6c70ab7faf32b7/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=d6bf776bc69c766aa70c39f28f6c70ab7faf32b7", "patch": "@@ -42,7 +42,10 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"HirBody,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+    )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n         println!(\"Hello, world!\");\n@@ -63,7 +66,10 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"HirBody,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+    )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn method_body_inlined() {\n@@ -97,7 +103,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of\")]\n+    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }"}]}