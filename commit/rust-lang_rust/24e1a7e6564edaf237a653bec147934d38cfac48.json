{"sha": "24e1a7e6564edaf237a653bec147934d38cfac48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZTFhN2U2NTY0ZWRhZjIzN2E2NTNiZWMxNDc5MzRkMzhjZmFjNDg=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-10-22T08:20:24Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-10-30T11:27:46Z"}, "message": "Use `ControlFlow::is{break,continue}`", "tree": {"sha": "9b0d5042334ab12d34d480395109ecdf62f9f88a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0d5042334ab12d34d480395109ecdf62f9f88a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24e1a7e6564edaf237a653bec147934d38cfac48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24e1a7e6564edaf237a653bec147934d38cfac48", "html_url": "https://github.com/rust-lang/rust/commit/24e1a7e6564edaf237a653bec147934d38cfac48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24e1a7e6564edaf237a653bec147934d38cfac48/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4cf0b3ed1a7c83f40dfc717ed2fc03a630a1d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4cf0b3ed1a7c83f40dfc717ed2fc03a630a1d4", "html_url": "https://github.com/rust-lang/rust/commit/8e4cf0b3ed1a7c83f40dfc717ed2fc03a630a1d4"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "260f4d6ba10539effedb947f9b8cd8464be9a750", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 args.visit_with(visitor)\n             }\n             Assert { ref cond, ref msg, .. } => {\n-                if cond.visit_with(visitor) == ControlFlow::BREAK {\n+                if cond.visit_with(visitor).is_break() {\n                     use AssertKind::*;\n                     match msg {\n                         BoundsCheck { ref len, ref index } => {"}, {"sha": "d8fab0d61650bcebe0d6360866f6a8083abec98b", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -59,8 +59,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     /// If `binder` is `ty::INNERMOST`, this indicates whether\n     /// there are any late-bound regions that appear free.\n     fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder })\n-            == ControlFlow::Break(())\n+        self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()\n     }\n \n     /// Returns `true` if this `self` has any regions that escape `binder` (and\n@@ -74,7 +73,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags }) == ControlFlow::Break(())\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags }).is_break()\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n@@ -368,8 +367,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         }\n \n-        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback })\n-            == ControlFlow::BREAK\n+        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()\n     }\n }\n \n@@ -685,7 +683,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         let mut collector = LateBoundRegionsCollector::new(just_constraint);\n         let result = value.as_ref().skip_binder().visit_with(&mut collector);\n-        assert!(result == ControlFlow::Continue(())); // should never have stopped early\n+        assert!(result.is_continue()); // should never have stopped early\n         collector.regions\n     }\n "}, {"sha": "987efdf49c1998991da2143f72e13ef019833947", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -74,7 +74,7 @@ where\n     }\n \n     let mut vis = UsedParamsNeedSubstVisitor { tcx };\n-    if ty.visit_with(&mut vis) == ControlFlow::BREAK {\n+    if ty.visit_with(&mut vis).is_break() {\n         throw_inval!(TooGeneric);\n     } else {\n         Ok(())"}, {"sha": "4cf01ce3b88fd4b39d382e3218adbdae636ce260", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -139,7 +139,7 @@ fn mark_used_by_predicates<'tcx>(\n             // predicate is used.\n             let any_param_used = {\n                 let mut vis = HasUsedGenericParams { unused_parameters };\n-                predicate.visit_with(&mut vis) == ControlFlow::BREAK\n+                predicate.visit_with(&mut vis).is_break()\n             };\n \n             if any_param_used {"}, {"sha": "306ae3eb0369bae98fe4999e4ff6ae1fb73fc196", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -1086,7 +1086,7 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n                 adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;\n             }\n         };\n-        result == ControlFlow::BREAK\n+        result.is_break()\n     }\n \n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n@@ -1128,14 +1128,14 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         self.span = hir_ty.span;\n         if let Some(typeck_results) = self.maybe_typeck_results {\n             // Types in bodies.\n-            if self.visit(typeck_results.node_type(hir_ty.hir_id)) == ControlFlow::BREAK {\n+            if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {\n                 return;\n             }\n         } else {\n             // Types in signatures.\n             // FIXME: This is very ineffective. Ideally each HIR type should be converted\n             // into a semantic type only once and the result should be cached somehow.\n-            if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)) == ControlFlow::BREAK {\n+            if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {\n                 return;\n             }\n         }\n@@ -1157,16 +1157,17 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n             );\n \n             for (trait_predicate, _, _) in bounds.trait_bounds {\n-                if self.visit_trait(trait_predicate.skip_binder()) == ControlFlow::BREAK {\n+                if self.visit_trait(trait_predicate.skip_binder()).is_break() {\n                     return;\n                 }\n             }\n \n             for (poly_predicate, _) in bounds.projection_bounds {\n                 let tcx = self.tcx;\n-                if self.visit(poly_predicate.skip_binder().ty) == ControlFlow::BREAK\n-                    || self.visit_trait(poly_predicate.skip_binder().projection_ty.trait_ref(tcx))\n-                        == ControlFlow::BREAK\n+                if self.visit(poly_predicate.skip_binder().ty).is_break()\n+                    || self\n+                        .visit_trait(poly_predicate.skip_binder().projection_ty.trait_ref(tcx))\n+                        .is_break()\n                 {\n                     return;\n                 }\n@@ -1193,7 +1194,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 // Method calls have to be checked specially.\n                 self.span = span;\n                 if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    if self.visit(self.tcx.type_of(def_id)) == ControlFlow::BREAK {\n+                    if self.visit(self.tcx.type_of(def_id)).is_break() {\n                         return;\n                     }\n                 } else {"}, {"sha": "1b333f3445734a79afb67befbe1a4b00e3aec74f", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -869,8 +869,9 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n         }\n     }\n \n-    value.visit_with(&mut IllegalSelfTypeVisitor { tcx, trait_def_id, supertraits: None })\n-        == ControlFlow::BREAK\n+    value\n+        .visit_with(&mut IllegalSelfTypeVisitor { tcx, trait_def_id, supertraits: None })\n+        .is_break()\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "4b5caac3bb5fa364af50c59ca60062a59f1ec638", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n \n-            if ty.visit_with(self) == ControlFlow::BREAK {\n+            if ty.visit_with(self).is_break() {\n                 // found an ADT without structural-match; halt visiting!\n                 assert!(self.found.is_some());\n                 return ControlFlow::BREAK;"}, {"sha": "4836584439a7d6a4e4c88f05184a707702bb2361", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -452,7 +452,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n-            if t != self.opaque_identity_ty && t.super_visit_with(self) == ControlFlow::BREAK {\n+            if t != self.opaque_identity_ty && t.super_visit_with(self).is_break() {\n                 self.ty = Some(t);\n                 return ControlFlow::BREAK;\n             }\n@@ -499,7 +499,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         let prohibit_opaque = tcx\n             .explicit_item_bounds(def_id)\n             .iter()\n-            .any(|(predicate, _)| predicate.visit_with(&mut visitor) == ControlFlow::BREAK);\n+            .any(|(predicate, _)| predicate.visit_with(&mut visitor).is_break());\n         debug!(\n             \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n             prohibit_opaque, visitor"}, {"sha": "d08ab8600a36b0130c2798b2ad265e5f6800f82d", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -819,7 +819,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 }\n             }\n             let mut param_count = CountParams::default();\n-            let has_region = pred.visit_with(&mut param_count) == ControlFlow::BREAK;\n+            let has_region = pred.visit_with(&mut param_count).is_break();\n             let substituted_pred = pred.subst(fcx.tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params."}, {"sha": "ae9ac13d7e947bbbbe8f6ffb9cb057ffb632b9d7", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24e1a7e6564edaf237a653bec147934d38cfac48/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e1a7e6564edaf237a653bec147934d38cfac48/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=24e1a7e6564edaf237a653bec147934d38cfac48", "patch": "@@ -518,7 +518,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if ContainsRegion.visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty) == ControlFlow::CONTINUE {\n+                if ContainsRegion.visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty).is_continue() {\n                     return;\n                 }\n                 rvalue_locals(other, |rhs| {\n@@ -540,7 +540,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n             // If the call returns something with lifetimes,\n             // let's conservatively assume the returned value contains lifetime of all the arguments.\n             // For example, given `let y: Foo<'a> = foo(x)`, `y` is considered to be a possible borrower of `x`.\n-            if ContainsRegion.visit_ty(&self.body.local_decls[*dest].ty) == ControlFlow::CONTINUE {\n+            if ContainsRegion.visit_ty(&self.body.local_decls[*dest].ty).is_continue() {\n                 return;\n             }\n "}]}