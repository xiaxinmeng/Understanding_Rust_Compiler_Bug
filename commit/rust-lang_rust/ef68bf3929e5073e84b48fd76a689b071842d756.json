{"sha": "ef68bf3929e5073e84b48fd76a689b071842d756", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjhiZjM5MjllNTA3M2U4NGI0OGZkNzZhNjg5YjA3MTg0MmQ3NTY=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-06-20T10:30:12Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-06-20T10:53:59Z"}, "message": "Try to suggest dereferences when trait selection failed.", "tree": {"sha": "2cdc25dd135655956ddb2dccdcb81da64ae21122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdc25dd135655956ddb2dccdcb81da64ae21122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef68bf3929e5073e84b48fd76a689b071842d756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef68bf3929e5073e84b48fd76a689b071842d756", "html_url": "https://github.com/rust-lang/rust/commit/ef68bf3929e5073e84b48fd76a689b071842d756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef68bf3929e5073e84b48fd76a689b071842d756/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51555186b680ffc63b1daf362456f7f8ca537763", "url": "https://api.github.com/repos/rust-lang/rust/commits/51555186b680ffc63b1daf362456f7f8ca537763", "html_url": "https://github.com/rust-lang/rust/commit/51555186b680ffc63b1daf362456f7f8ca537763"}], "stats": {"total": 255, "additions": 254, "deletions": 1}, "files": [{"sha": "fd0c1a54d27adec8a6fcbca44a7c9f026a025e31", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -402,6 +402,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(enclosing_scope_span, s.as_str());\n                         }\n \n+                        self.suggest_dereferences(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);"}, {"sha": "0c86e33884d6a30f7adf4982186a6a4e44bcdf22", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -3,6 +3,7 @@ use super::{\n     SelectionContext,\n };\n \n+use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::normalize_projection_type;\n \n@@ -13,11 +14,11 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n-use rustc_middle::ty::TypeckTables;\n use rustc_middle::ty::{\n     self, suggest_constraining_type_param, AdtKind, DefIdTree, Infer, InferTy, ToPredicate, Ty,\n     TyCtxt, TypeFoldable, WithConstness,\n };\n+use rustc_middle::ty::{TypeAndMut, TypeckTables};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n@@ -48,6 +49,14 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n     );\n \n+    fn suggest_dereferences(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+        points_at_arg: bool,\n+    );\n+\n     fn get_closure_name(\n         &self,\n         def_id: DefId,\n@@ -450,6 +459,62 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// When after several dereferencing, the reference satisfies the trait\n+    /// binding. This function provides dereference suggestion for this\n+    /// specific situation.\n+    fn suggest_dereferences(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+        points_at_arg: bool,\n+    ) {\n+        // It only make sense when suggesting dereferences for arguments\n+        if !points_at_arg {\n+            return;\n+        }\n+        let param_env = obligation.param_env;\n+        let body_id = obligation.cause.body_id;\n+        let span = obligation.cause.span;\n+        let real_trait_ref = match &obligation.cause.code {\n+            ObligationCauseCode::ImplDerivedObligation(cause)\n+            | ObligationCauseCode::DerivedObligation(cause)\n+            | ObligationCauseCode::BuiltinDerivedObligation(cause) => &cause.parent_trait_ref,\n+            _ => trait_ref,\n+        };\n+        let real_ty = match real_trait_ref.self_ty().no_bound_vars() {\n+            Some(ty) => ty,\n+            None => return,\n+        };\n+\n+        if let ty::Ref(region, base_ty, mutbl) = real_ty.kind {\n+            let mut autoderef = Autoderef::new(self, param_env, body_id, span, base_ty);\n+            if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n+                // Re-add the `&`\n+                let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n+                let obligation =\n+                    self.mk_trait_obligation_with_new_self_ty(param_env, real_trait_ref, ty);\n+                Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n+            }) {\n+                if steps > 0 {\n+                    if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        // Don't care about `&mut` because `DerefMut` is used less\n+                        // often and user will not expect autoderef happens.\n+                        if src.starts_with(\"&\") {\n+                            let derefs = \"*\".repeat(steps);\n+                            err.span_suggestion(\n+                                span,\n+                                \"consider adding dereference here\",\n+                                format!(\"&{}{}\", derefs, &src[1..]),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n     /// suggestion to borrow the initializer in order to use have a slice instead.\n     fn suggest_borrow_on_unsized_slice("}, {"sha": "2bb34b0ebee6f342a55c32bfc5da8c211545da6b", "filename": "src/test/ui/traits/trait-suggest-deferences-issue-39029.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.fixed?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+use std::net::TcpListener;\n+\n+struct NoToSocketAddrs(String);\n+\n+impl std::ops::Deref for NoToSocketAddrs {\n+    type Target = String;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let _works = TcpListener::bind(\"some string\");\n+    let bad = NoToSocketAddrs(\"bad\".to_owned());\n+    let _errors = TcpListener::bind(&*bad);\n+    //~^ ERROR the trait bound `NoToSocketAddrs: std::net::ToSocketAddrs` is not satisfied\n+}"}, {"sha": "33d524608a05826f350d50bc10189b52c203e45d", "filename": "src/test/ui/traits/trait-suggest-deferences-issue-39029.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.rs?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+use std::net::TcpListener;\n+\n+struct NoToSocketAddrs(String);\n+\n+impl std::ops::Deref for NoToSocketAddrs {\n+    type Target = String;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let _works = TcpListener::bind(\"some string\");\n+    let bad = NoToSocketAddrs(\"bad\".to_owned());\n+    let _errors = TcpListener::bind(&bad);\n+    //~^ ERROR the trait bound `NoToSocketAddrs: std::net::ToSocketAddrs` is not satisfied\n+}"}, {"sha": "0bf9794a744c90c71b218fa2fdea6ad79d75e755", "filename": "src/test/ui/traits/trait-suggest-deferences-issue-39029.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-39029.stderr?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `NoToSocketAddrs: std::net::ToSocketAddrs` is not satisfied\n+  --> $DIR/trait-suggest-deferences-issue-39029.rs:16:37\n+   |\n+LL |     let _errors = TcpListener::bind(&bad);\n+   |                                     ^^^^\n+   |                                     |\n+   |                                     the trait `std::net::ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n+   |                                     help: consider adding dereference here: `&*bad`\n+   | \n+  ::: $SRC_DIR/libstd/net/tcp.rs:LL:COL\n+   |\n+LL |     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\n+   |                    ------------- required by this bound in `std::net::TcpListener::bind`\n+   |\n+   = note: required because of the requirements on the impl of `std::net::ToSocketAddrs` for `&NoToSocketAddrs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fa7b9167d8d7f06650643caff81ae62fa7e65522", "filename": "src/test/ui/traits/trait-suggest-deferences-issue-62530.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.fixed?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+fn takes_str(_x: &str) {}\n+\n+fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n+\n+trait SomeTrait {}\n+impl SomeTrait for &'_ str {}\n+impl SomeTrait for char {}\n+\n+fn main() {\n+    let string = String::new();\n+    takes_str(&string);             // Ok\n+    takes_type_parameter(&*string);  // Error\n+    //~^ ERROR the trait bound `&std::string::String: SomeTrait` is not satisfied\n+}"}, {"sha": "e785f01217735b0efc3bf217de9e3ad36e0288a8", "filename": "src/test/ui/traits/trait-suggest-deferences-issue-62530.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.rs?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+fn takes_str(_x: &str) {}\n+\n+fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n+\n+trait SomeTrait {}\n+impl SomeTrait for &'_ str {}\n+impl SomeTrait for char {}\n+\n+fn main() {\n+    let string = String::new();\n+    takes_str(&string);             // Ok\n+    takes_type_parameter(&string);  // Error\n+    //~^ ERROR the trait bound `&std::string::String: SomeTrait` is not satisfied\n+}"}, {"sha": "9c2a582638ecbdd60c745d5467d10f646ba8c11c", "filename": "src/test/ui/traits/trait-suggest-deferences-issue-62530.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-issue-62530.stderr?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `&std::string::String: SomeTrait` is not satisfied\n+  --> $DIR/trait-suggest-deferences-issue-62530.rs:13:26\n+   |\n+LL | fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n+   |                                            --------- required by this bound in `takes_type_parameter`\n+...\n+LL |     takes_type_parameter(&string);  // Error\n+   |                          ^^^^^^^\n+   |                          |\n+   |                          the trait `SomeTrait` is not implemented for `&std::string::String`\n+   |                          help: consider adding dereference here: `&*string`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b7160b75c605ed966f4b05dbe97b9bebd15101d7", "filename": "src/test/ui/traits/trait-suggest-deferences-multiple.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.fixed?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+use std::ops::Deref;\n+\n+trait Happy {}\n+struct LDM;\n+impl Happy for &LDM {}\n+\n+struct Foo(LDM);\n+struct Bar(Foo);\n+struct Baz(Bar);\n+impl Deref for Foo {\n+    type Target = LDM;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Bar {\n+    type Target = Foo;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Baz {\n+    type Target = Bar;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn foo<T>(_: T) where T: Happy {}\n+\n+fn main() {\n+    let baz = Baz(Bar(Foo(LDM)));\n+    foo(&***baz);\n+    //~^ ERROR the trait bound `&Baz: Happy` is not satisfied\n+}"}, {"sha": "9ac55177ffadd1d337db6c75cbfc6126b340f92f", "filename": "src/test/ui/traits/trait-suggest-deferences-multiple.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.rs?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+use std::ops::Deref;\n+\n+trait Happy {}\n+struct LDM;\n+impl Happy for &LDM {}\n+\n+struct Foo(LDM);\n+struct Bar(Foo);\n+struct Baz(Bar);\n+impl Deref for Foo {\n+    type Target = LDM;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Bar {\n+    type Target = Foo;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+impl Deref for Baz {\n+    type Target = Bar;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn foo<T>(_: T) where T: Happy {}\n+\n+fn main() {\n+    let baz = Baz(Bar(Foo(LDM)));\n+    foo(&baz);\n+    //~^ ERROR the trait bound `&Baz: Happy` is not satisfied\n+}"}, {"sha": "f9b8bba4b41247b99ea0b7ce1292767845459515", "filename": "src/test/ui/traits/trait-suggest-deferences-multiple.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef68bf3929e5073e84b48fd76a689b071842d756/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-deferences-multiple.stderr?ref=ef68bf3929e5073e84b48fd76a689b071842d756", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `&Baz: Happy` is not satisfied\n+  --> $DIR/trait-suggest-deferences-multiple.rs:34:9\n+   |\n+LL | fn foo<T>(_: T) where T: Happy {}\n+   |                          ----- required by this bound in `foo`\n+...\n+LL |     foo(&baz);\n+   |         ^^^^\n+   |         |\n+   |         the trait `Happy` is not implemented for `&Baz`\n+   |         help: consider adding dereference here: `&***baz`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}