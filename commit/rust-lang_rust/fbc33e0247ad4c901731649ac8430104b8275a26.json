{"sha": "fbc33e0247ad4c901731649ac8430104b8275a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzMzZTAyNDdhZDRjOTAxNzMxNjQ5YWM4NDMwMTA0YjgyNzVhMjY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:42:57Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:42:57Z"}, "message": "Merge pull request #4459 from jld/constenum\n\nAllow consts to be initialized by non-nullary enum constructors", "tree": {"sha": "d6c8434edd1e28002b2cb09cc8a80c13422878c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c8434edd1e28002b2cb09cc8a80c13422878c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc33e0247ad4c901731649ac8430104b8275a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc33e0247ad4c901731649ac8430104b8275a26", "html_url": "https://github.com/rust-lang/rust/commit/fbc33e0247ad4c901731649ac8430104b8275a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc33e0247ad4c901731649ac8430104b8275a26/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f", "html_url": "https://github.com/rust-lang/rust/commit/1b01629f189f1c4050bd5c7eac81e44ba2c7a76f"}, {"sha": "3aca4a166331e26a12f14e619c78ddd5ef590f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aca4a166331e26a12f14e619c78ddd5ef590f70", "html_url": "https://github.com/rust-lang/rust/commit/3aca4a166331e26a12f14e619c78ddd5ef590f70"}], "stats": {"total": 235, "additions": 185, "deletions": 50}, "files": [{"sha": "df937c92d95dbce31af85b56ab6caec9eb0fe49f", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -138,11 +138,12 @@ fn check_expr(sess: Session, def_map: resolve::DefMap,\n           expr_call(callee, _, false) => {\n             match def_map.find(callee.id) {\n                 Some(def_struct(*)) => {}    // OK.\n+                Some(def_variant(*)) => {}    // OK.\n                 _ => {\n                     sess.span_err(\n                         e.span,\n                         ~\"function calls in constants are limited to \\\n-                          structure constructors\");\n+                          struct and enum constructors\");\n                 }\n             }\n           }"}, {"sha": "a8b0da47e9ac2344c48571ab47a99fe0b56fdf71", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -779,6 +779,30 @@ fn trans_external_path(ccx: @crate_ctxt, did: ast::def_id, t: ty::t)\n     };\n }\n \n+fn get_discrim_val(cx: @crate_ctxt, span: span, enum_did: ast::def_id,\n+                   variant_did: ast::def_id) -> ValueRef {\n+    // Can't use `discrims` from the crate context here because\n+    // those discriminants have an extra level of indirection,\n+    // and there's no LLVM constant load instruction.\n+    let mut lldiscrim_opt = None;\n+    for ty::enum_variants(cx.tcx, enum_did).each |variant_info| {\n+        if variant_info.id == variant_did {\n+            lldiscrim_opt = Some(C_int(cx,\n+                                       variant_info.disr_val));\n+            break;\n+        }\n+    }\n+\n+    match lldiscrim_opt {\n+        None => {\n+            cx.tcx.sess.span_bug(span, ~\"didn't find discriminant?!\");\n+        }\n+        Some(found_lldiscrim) => {\n+            found_lldiscrim\n+        }\n+    }\n+}\n+\n fn lookup_discriminant(ccx: @crate_ctxt, vid: ast::def_id) -> ValueRef {\n     unsafe {\n         let _icx = ccx.insn_ctxt(\"lookup_discriminant\");\n@@ -2284,16 +2308,21 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       ~[path_name(i.ident)]);\n             match i.node {\n-              ast::item_const(_, _) => {\n+              ast::item_const(_, expr) => {\n                 let typ = ty::node_id_to_type(ccx.tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n-                let g = str::as_c_str(s, |buf| {\n-                    unsafe {\n-                        llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, typ), buf)\n-                    }\n-                });\n-                ccx.item_symbols.insert(i.id, s);\n-                g\n+                // We need the translated value here, because for enums the\n+                // LLVM type is not fully determined by the Rust type.\n+                let v = consts::const_expr(ccx, expr);\n+                ccx.const_values.insert(id, v);\n+                unsafe {\n+                    let llty = llvm::LLVMTypeOf(v);\n+                    let g = str::as_c_str(s, |buf| {\n+                        llvm::LLVMAddGlobal(ccx.llmod, llty, buf)\n+                    });\n+                    ccx.item_symbols.insert(i.id, s);\n+                    g\n+                }\n               }\n               ast::item_fn(_, purity, _, _) => {\n                 let llfn = if purity != ast::extern_fn {"}, {"sha": "74aaec0d7e73f89d8c49717efae3be787990322c", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -414,42 +414,10 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                     // variant or we wouldn't have gotten here -- the constant\n                     // checker forbids paths that don't map to C-like enum\n                     // variants.\n-                    let ety = ty::expr_ty(cx.tcx, e);\n-                    let llty = type_of::type_of(cx, ety);\n-\n-                    // Can't use `discrims` from the crate context here\n-                    // because those discriminants have an extra level of\n-                    // indirection, and there's no LLVM constant load\n-                    // instruction.\n-                    let mut lldiscrim_opt = None;\n-                    for ty::enum_variants(cx.tcx, enum_did).each\n-                            |variant_info| {\n-                        if variant_info.id == variant_did {\n-                            lldiscrim_opt = Some(C_int(cx,\n-                                variant_info.disr_val));\n-                            break;\n-                        }\n-                    }\n-\n-                    let lldiscrim;\n-                    match lldiscrim_opt {\n-                        None => {\n-                            cx.tcx.sess.span_bug(e.span,\n-                                ~\"didn't find discriminant?!\");\n-                        }\n-                        Some(found_lldiscrim) => {\n-                            lldiscrim = found_lldiscrim;\n-                        }\n-                    }\n-                    let fields = if ty::enum_is_univariant(cx.tcx, enum_did) {\n-                        ~[lldiscrim]\n-                    } else {\n-                        let llstructtys =\n-                            lib::llvm::struct_element_types(llty);\n-                        ~[lldiscrim, C_null(llstructtys[1])]\n-                    };\n-\n-                    C_named_struct(llty, fields)\n+                    let lldiscrim = base::get_discrim_val(cx, e.span,\n+                                                          enum_did,\n+                                                          variant_did);\n+                    C_struct(~[lldiscrim])\n                 }\n                 Some(ast::def_struct(_)) => {\n                     let ety = ty::expr_ty(cx.tcx, e);\n@@ -475,6 +443,24 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                         C_named_struct(llty, ~[ llstructbody ])\n                     }\n                 }\n+            Some(ast::def_variant(tid, vid)) => {\n+                let ety = ty::expr_ty(cx.tcx, e);\n+                let degen = ty::enum_is_univariant(cx.tcx, tid);\n+                let size = shape::static_size_of_enum(cx, ety);\n+\n+                let discrim = base::get_discrim_val(cx, e.span, tid, vid);\n+                let c_args = C_struct(args.map(|a| const_expr(cx, *a)));\n+\n+                let fields = if !degen {\n+                    ~[discrim, c_args]\n+                } else if size == 0 {\n+                    ~[discrim]\n+                } else {\n+                    ~[c_args]\n+                };\n+\n+                C_struct(fields)\n+            }\n                 _ => cx.sess.span_bug(e.span, ~\"expected a struct def\")\n             }\n           }\n@@ -485,12 +471,13 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n     }\n }\n \n-fn trans_const(ccx: @crate_ctxt, e: @ast::expr, id: ast::node_id) {\n+fn trans_const(ccx: @crate_ctxt, _e: @ast::expr, id: ast::node_id) {\n     unsafe {\n         let _icx = ccx.insn_ctxt(\"trans_const\");\n         let g = base::get_item_val(ccx, id);\n-        let v = const_expr(ccx, e);\n-        ccx.const_values.insert(id, v);\n+        // At this point, get_item_val has already translated the\n+        // constant's initializer to determine its LLVM type.\n+        let v = ccx.const_values.get(id);\n         llvm::LLVMSetInitializer(g, v);\n         llvm::LLVMSetGlobalConstant(g, True);\n     }"}, {"sha": "c26328d7d9c3fb3a02f8c937fb01a782cf194632", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -801,7 +801,11 @@ fn trans_def_lvalue(bcx: block,\n         ast::def_const(did) => {\n             let const_ty = expr_ty(bcx, ref_expr);\n             let val = if did.crate == ast::local_crate {\n-                base::get_item_val(ccx, did.node)\n+                // The LLVM global has the type of its initializer,\n+                // which may not be equal to the enum's type for\n+                // non-C-like enums.\n+                PointerCast(bcx, base::get_item_val(ccx, did.node),\n+                            T_ptr(type_of(bcx.ccx(), const_ty)))\n             } else {\n                 base::trans_external_path(ccx, did, const_ty)\n             };"}, {"sha": "aa977f17e691e72d3af2e9bf03391476ddfe0989", "filename": "src/test/run-pass/const-big-enum.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar(u32),\n+    Baz,\n+    Quux(u64, u16)\n+}\n+\n+const X: Foo = Baz;\n+\n+fn main() {\n+    match X {\n+        Baz => {}\n+        _ => fail\n+    }\n+    match Y {\n+        Bar(s) => assert(s == 2654435769),\n+        _ => fail\n+    }\n+    match Z {\n+        Quux(d,h) => {\n+            assert(d == 0x123456789abcdef0);\n+            assert(h == 0x1234);\n+        }\n+        _ => fail\n+    }\n+}\n+\n+const Y: Foo = Bar(2654435769);\n+const Z: Foo = Quux(0x123456789abcdef0, 0x1234);"}, {"sha": "cd939bc14d46eb5116844f5a51d55772ac7a2f12", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum E { V, VV(int) }\n+const C: E = V;\n+\n+impl E {\n+    fn method(&self) {\n+        match *self {\n+            V => {}\n+            VV(*) => fail\n+        }\n+    }\n+}\n+\n+fn main() {\n+    C.method()\n+}"}, {"sha": "8ee9e79670b4cb37ac99f256e9fa56987303aba8", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum E { V, VV(int) }\n+const C: E = V;\n+\n+fn f(a: &E) {\n+    match *a {\n+        V => {}\n+        VV(*) => fail\n+    }\n+}\n+\n+fn main() {\n+    f(&C)\n+}"}, {"sha": "069565aa4f858212ec0b9b00708959ddc55d0c70", "filename": "src/test/run-pass/const-newtype-enum.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo = u32;\n+\n+const X: Foo = Foo(17);\n+\n+fn main() {\n+    assert(*X == 17);\n+    assert(*Y == 23);\n+}\n+\n+const Y: Foo = Foo(23);"}, {"sha": "098305bbe35e0a15f2a7aed74e2221592c296856", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -21,5 +21,10 @@ fn main() {\n         Bar => {}\n         Baz | Boo => fail\n     }\n+    match Y {\n+        Baz => {}\n+        Bar | Boo => fail\n+    }\n }\n \n+const Y: Foo = Baz;"}, {"sha": "2fa5a7760f6d12d552fe89c99fb53f36008cbbc0", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc33e0247ad4c901731649ac8430104b8275a26/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=fbc33e0247ad4c901731649ac8430104b8275a26", "patch": "@@ -16,4 +16,7 @@ const X: Foo = Bar;\n \n fn main() {\n     assert((X as uint) == 0xDEADBEE);\n+    assert((Y as uint) == 0xDEADBEE);\n }\n+\n+const Y: Foo = Bar;"}]}