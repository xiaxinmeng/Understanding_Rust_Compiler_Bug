{"sha": "10deeae3263301f1d337721ed55c14637b70c3c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZGVlYWUzMjYzMzAxZjFkMzM3NzIxZWQ1NWMxNDYzN2I3MGMzYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-25T09:10:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-25T09:10:18Z"}, "message": "Auto merge of #62094 - oli-obk:zst_intern, r=eddyb\n\n Don't ICE on mutable zst slices\n\nfixes #62045", "tree": {"sha": "3272a4d1f58c5f7e2eb2cf88ed01c6574eeceb78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3272a4d1f58c5f7e2eb2cf88ed01c6574eeceb78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10deeae3263301f1d337721ed55c14637b70c3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10deeae3263301f1d337721ed55c14637b70c3c7", "html_url": "https://github.com/rust-lang/rust/commit/10deeae3263301f1d337721ed55c14637b70c3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10deeae3263301f1d337721ed55c14637b70c3c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ae6d2eb5352cc20f2e9b92847d92e935639f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ae6d2eb5352cc20f2e9b92847d92e935639f3c", "html_url": "https://github.com/rust-lang/rust/commit/53ae6d2eb5352cc20f2e9b92847d92e935639f3c"}, {"sha": "91a15e285783b89219b31803eadfe855e38312a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/91a15e285783b89219b31803eadfe855e38312a4", "html_url": "https://github.com/rust-lang/rust/commit/91a15e285783b89219b31803eadfe855e38312a4"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "f0d64e217a28fe5c2eb430f41ef39988f2bb8a63", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=10deeae3263301f1d337721ed55c14637b70c3c7", "patch": "@@ -3,7 +3,6 @@\n //! After a const evaluation has computed a value, before we destroy the const evaluator's session\n //! memory, we need to extract all memory allocations to the global memory pool so they stay around.\n \n-use rustc::ty::layout::LayoutOf;\n use rustc::ty::{Ty, TyCtxt, ParamEnv, self};\n use rustc::mir::interpret::{\n     InterpResult, ErrorHandled,\n@@ -143,18 +142,15 @@ for\n         // Handle Reference types, as these are the only relocations supported by const eval.\n         // Raw pointers (and boxes) are handled by the `leftover_relocations` logic.\n         let ty = mplace.layout.ty;\n-        if let ty::Ref(_, _, mutability) = ty.sty {\n+        if let ty::Ref(_, referenced_ty, mutability) = ty.sty {\n             let value = self.ecx.read_immediate(mplace.into())?;\n             // Handle trait object vtables\n             if let Ok(meta) = value.to_meta() {\n-                let layout = self.ecx.layout_of(ty.builtin_deref(true).unwrap().ty)?;\n-                if layout.is_unsized() {\n-                    if let ty::Dynamic(..) = self.ecx.tcx.struct_tail(layout.ty).sty {\n-                        if let Ok(vtable) = meta.unwrap().to_ptr() {\n-                            // explitly choose `Immutable` here, since vtables are immutable, even\n-                            // if the reference of the fat pointer is mutable\n-                            self.intern_shallow(vtable, Mutability::Immutable)?;\n-                        }\n+                if let ty::Dynamic(..) = self.ecx.tcx.struct_tail(referenced_ty).sty {\n+                    if let Ok(vtable) = meta.unwrap().to_ptr() {\n+                        // explitly choose `Immutable` here, since vtables are immutable, even\n+                        // if the reference of the fat pointer is mutable\n+                        self.intern_shallow(vtable, Mutability::Immutable)?;\n                     }\n                 }\n             }\n@@ -178,8 +174,14 @@ for\n                     (InternMode::Static, hir::Mutability::MutMutable) => {},\n                     // we statically prevent `&mut T` via `const_qualif` and double check this here\n                     (InternMode::ConstBase, hir::Mutability::MutMutable) |\n-                    (InternMode::Const, hir::Mutability::MutMutable) =>\n-                        bug!(\"const qualif failed to prevent mutable references\"),\n+                    (InternMode::Const, hir::Mutability::MutMutable) => {\n+                        match referenced_ty.sty {\n+                            ty::Array(_, n) if n.unwrap_usize(self.ecx.tcx.tcx) == 0 => {}\n+                            ty::Slice(_)\n+                                if value.to_meta().unwrap().unwrap().to_usize(self.ecx)? == 0 => {}\n+                            _ => bug!(\"const qualif failed to prevent mutable references\"),\n+                        }\n+                    },\n                 }\n                 // Compute the mutability with which we'll start visiting the allocation. This is\n                 // what gets changed when we encounter an `UnsafeCell`"}, {"sha": "9f41ed9a24523d4d1c4886851f6cd952d3fc55b5", "filename": "src/test/ui/consts/issue-62045.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Ftest%2Fui%2Fconsts%2Fissue-62045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Ftest%2Fui%2Fconsts%2Fissue-62045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-62045.rs?ref=10deeae3263301f1d337721ed55c14637b70c3c7", "patch": "@@ -0,0 +1,5 @@\n+// compile-pass\n+\n+fn main() {\n+    assert_eq!(&mut [0; 1][..], &mut []);\n+}"}, {"sha": "4fcd89a74db6102bca4fe592e077b4bd6dffb828", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs?ref=10deeae3263301f1d337721ed55c14637b70c3c7", "patch": "@@ -3,6 +3,7 @@\n // rustc-env:RUST_BACKTRACE=0\n // normalize-stderr-test \"note: rustc 1.* running on .*\" -> \"note: rustc VERSION running on TARGET\"\n // normalize-stderr-test \"note: compiler flags: .*\" -> \"note: compiler flags: FLAGS\"\n+// normalize-stderr-test \"interpret/intern.rs:[0-9]*:[0-9]*\" -> \"interpret/intern.rs:LL:CC\"\n \n #![allow(const_err)]\n "}, {"sha": "82569e260143c563a575f67f6f913b14c4d27f1b", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10deeae3263301f1d337721ed55c14637b70c3c7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=10deeae3263301f1d337721ed55c14637b70c3c7", "patch": "@@ -1,12 +1,12 @@\n warning: skipping const checks\n-  --> $DIR/mutable_references_ice.rs:26:9\n+  --> $DIR/mutable_references_ice.rs:27:9\n    |\n LL |         *MUH.x.get() = 99;\n    |         ^^^^^^^^^^^^^^^^^\n \n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n- right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites may arbitrarily decide to change, too.', src/librustc_mir/interpret/intern.rs:127:17\n+ right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites may arbitrarily decide to change, too.', src/librustc_mir/interpret/intern.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}]}