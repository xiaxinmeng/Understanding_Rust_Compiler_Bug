{"sha": "834e39289d46783193b9ce43f6725f4ed8c64519", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNGUzOTI4OWQ0Njc4MzE5M2I5Y2U0M2Y2NzI1ZjRlZDhjNjQ1MTk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-28T18:52:06Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-03-01T19:40:35Z"}, "message": "Refactor note_and_explain_region to call note_and_explain_free_region", "tree": {"sha": "1e987b8cb3dd33b033b235335c04169b205a54d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e987b8cb3dd33b033b235335c04169b205a54d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/834e39289d46783193b9ce43f6725f4ed8c64519", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlqYVzQACgkQiMlBzaHU\nZDLMQhAAkE4ueuafU5ir2iqoH+IvwyQMhdn/ZKVVsr3DKjm6rmWf+CTgCRzZx5mi\nes1UmL8DR0d30CeSv5tkJNQcCeoZ7S5nV235lo5i3wIybpyIrP7fOGkSdIenS1wQ\nJih0OpGkIK0eBuW5vLYX7a3qhCa+Or+5tLs1/h2k00LjCdMebAAs/uG+8BeNflK+\n7uqSbldagSCgokQ/nJc/+RskaU4C3CtohjNnSBSBPV5P0IGTJyaexVnOuY+xV6bt\npBlU71UQIuGbL5H7wMi7ZsTPwCuWY9WVWjsoSIFgeLSfyUctToE4xjBwkS9hAdl6\ntt78BZa7WLvNE8NrYOiUh9zLCqAXqqOufWCazgV7rRD6ec2mbxGsAaqmiSnDrZMa\n24rP4WQIObIRjJTHI/VrxA0tQ7rdYUW3w5z3PxOKXsl1OXWhT1rZ15+iQ7D/SH1d\n1nO1e6SvulzgT5SklF7aIqSKuhyt7sCIFATq/Si9H8uCG/J7vd9CCtvVQuXenOPR\nzppU7fSHIkWhC8rB568tZFAy3/G9I1M7zOhO0yaNWjx5JyBccNOO6rFKM8ocNv4X\neDej9ntlG73Pq88JSas83I9Dq4XesaW2MQKdpvBYvSCkcz4y5EYHTM8plNpAqIt6\nuYtba7QNrZ+rdhBmPhezxXpvltDyYVF2Zg/iKVDv//8/0AxLHxY=\n=gIEW\n-----END PGP SIGNATURE-----", "payload": "tree 1e987b8cb3dd33b033b235335c04169b205a54d9\nparent 7580826a1f600e1ce51fa16da120de8cc263712b\nauthor Santiago Pastorino <spastorino@gmail.com> 1519843926 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1519933235 -0300\n\nRefactor note_and_explain_region to call note_and_explain_free_region\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/834e39289d46783193b9ce43f6725f4ed8c64519", "html_url": "https://github.com/rust-lang/rust/commit/834e39289d46783193b9ce43f6725f4ed8c64519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/834e39289d46783193b9ce43f6725f4ed8c64519/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7580826a1f600e1ce51fa16da120de8cc263712b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7580826a1f600e1ce51fa16da120de8cc263712b", "html_url": "https://github.com/rust-lang/rust/commit/7580826a1f600e1ce51fa16da120de8cc263712b"}], "stats": {"total": 178, "additions": 92, "deletions": 86}, "files": [{"sha": "cd506fabb55b3faa4e05122cbbf9c1f2063e2490", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 92, "deletions": 86, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/834e39289d46783193b9ce43f6725f4ed8c64519/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834e39289d46783193b9ce43f6725f4ed8c64519/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=834e39289d46783193b9ce43f6725f4ed8c64519", "patch": "@@ -87,42 +87,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                    prefix: &str,\n                                    region: ty::Region<'tcx>,\n                                    suffix: &str) {\n-        fn item_scope_tag(item: &hir::Item) -> &'static str {\n-            match item.node {\n-                hir::ItemImpl(..) => \"impl\",\n-                hir::ItemStruct(..) => \"struct\",\n-                hir::ItemUnion(..) => \"union\",\n-                hir::ItemEnum(..) => \"enum\",\n-                hir::ItemTrait(..) => \"trait\",\n-                hir::ItemFn(..) => \"function body\",\n-                _ => \"item\"\n-            }\n-        }\n-\n-        fn trait_item_scope_tag(item: &hir::TraitItem) -> &'static str {\n-            match item.node {\n-                hir::TraitItemKind::Method(..) => \"method body\",\n-                hir::TraitItemKind::Const(..) |\n-                hir::TraitItemKind::Type(..) => \"associated item\"\n-            }\n-        }\n-\n-        fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n-            match item.node {\n-                hir::ImplItemKind::Method(..) => \"method body\",\n-                hir::ImplItemKind::Const(..) |\n-                hir::ImplItemKind::Type(_) => \"associated item\"\n-            }\n-        }\n-\n-        fn explain_span<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                        heading: &str, span: Span)\n-                                        -> (String, Option<Span>) {\n-            let lo = tcx.sess.codemap().lookup_char_pos_adj(span.lo());\n-            (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1),\n-             Some(span))\n-        }\n-\n         let (description, span) = match *region {\n             ty::ReScope(scope) => {\n                 let new_string;\n@@ -143,9 +107,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         _ => \"expression\",\n                     },\n                     Some(hir_map::NodeStmt(_)) => \"statement\",\n-                    Some(hir_map::NodeItem(it)) => item_scope_tag(&it),\n-                    Some(hir_map::NodeTraitItem(it)) => trait_item_scope_tag(&it),\n-                    Some(hir_map::NodeImplItem(it)) => impl_item_scope_tag(&it),\n+                    Some(hir_map::NodeItem(it)) => Self::item_scope_tag(&it),\n+                    Some(hir_map::NodeTraitItem(it)) => Self::trait_item_scope_tag(&it),\n+                    Some(hir_map::NodeImplItem(it)) => Self::impl_item_scope_tag(&it),\n                     Some(_) | None => {\n                         err.span_note(span, &unknown_scope());\n                         return;\n@@ -169,57 +133,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         &new_string[..]\n                     }\n                 };\n-                explain_span(self, scope_decorated_tag, span)\n+                self.explain_span(scope_decorated_tag, span)\n             }\n \n             ty::ReEarlyBound(_) |\n             ty::ReFree(_) => {\n-                let scope = region.free_region_binding_scope(self);\n-                let node = self.hir.as_local_node_id(scope)\n-                                   .unwrap_or(DUMMY_NODE_ID);\n-                let unknown;\n-                let tag = match self.hir.find(node) {\n-                    Some(hir_map::NodeBlock(_)) |\n-                    Some(hir_map::NodeExpr(_)) => \"body\",\n-                    Some(hir_map::NodeItem(it)) => item_scope_tag(&it),\n-                    Some(hir_map::NodeTraitItem(it)) => trait_item_scope_tag(&it),\n-                    Some(hir_map::NodeImplItem(it)) => impl_item_scope_tag(&it),\n-\n-                    // this really should not happen, but it does:\n-                    // FIXME(#27942)\n-                    Some(_) => {\n-                        unknown = format!(\"unexpected node ({}) for scope {:?}.  \\\n-                                           Please report a bug.\",\n-                                          self.hir.node_to_string(node), scope);\n-                        &unknown\n-                    }\n-                    None => {\n-                        unknown = format!(\"unknown node for scope {:?}.  \\\n-                                           Please report a bug.\", scope);\n-                        &unknown\n-                    }\n-                };\n-                let (prefix, span) = match *region {\n-                    ty::ReEarlyBound(ref br) => {\n-                        (format!(\"the lifetime {} as defined on\", br.name),\n-                         self.sess.codemap().def_span(self.hir.span(node)))\n-                    }\n-                    ty::ReFree(ref fr) => {\n-                        match fr.bound_region {\n-                            ty::BrAnon(idx) => {\n-                                (format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n-                                 self.hir.span(node))\n-                            }\n-                            ty::BrFresh(_) => (\"an anonymous lifetime defined on\".to_owned(),\n-                                               self.hir.span(node)),\n-                            _ => (format!(\"the lifetime {} as defined on\", fr.bound_region),\n-                                  self.sess.codemap().def_span(self.hir.span(node))),\n-                        }\n-                    }\n-                    _ => bug!()\n-                };\n-                let (msg, opt_span) = explain_span(self, tag, span);\n-                (format!(\"{} {}\", prefix, msg), opt_span)\n+                self.msg_span_from_free_region(region)\n             }\n \n             ty::ReStatic => (\"the static lifetime\".to_owned(), None),\n@@ -253,6 +172,93 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             err.note(&message);\n         }\n     }\n+\n+    fn msg_span_from_free_region(self,\n+                                 region: ty::Region<'tcx>)\n+        -> (String, Option<Span>) {\n+        let scope = region.free_region_binding_scope(self);\n+        let node = self.hir.as_local_node_id(scope)\n+            .unwrap_or(DUMMY_NODE_ID);\n+        let unknown;\n+        let tag = match self.hir.find(node) {\n+            Some(hir_map::NodeBlock(_)) |\n+                Some(hir_map::NodeExpr(_)) => \"body\",\n+            Some(hir_map::NodeItem(it)) => Self::item_scope_tag(&it),\n+            Some(hir_map::NodeTraitItem(it)) => Self::trait_item_scope_tag(&it),\n+            Some(hir_map::NodeImplItem(it)) => Self::impl_item_scope_tag(&it),\n+\n+            // this really should not happen, but it does:\n+            // FIXME(#27942)\n+            Some(_) => {\n+                unknown = format!(\"unexpected node ({}) for scope {:?}.  \\\n+                                           Please report a bug.\",\n+                                           self.hir.node_to_string(node), scope);\n+                &unknown\n+            }\n+            None => {\n+                unknown = format!(\"unknown node for scope {:?}.  \\\n+                                           Please report a bug.\", scope);\n+                &unknown\n+            }\n+        };\n+        let (prefix, span) = match *region {\n+            ty::ReEarlyBound(ref br) => {\n+                (format!(\"the lifetime {} as defined on\", br.name),\n+                self.sess.codemap().def_span(self.hir.span(node)))\n+            }\n+            ty::ReFree(ref fr) => {\n+                match fr.bound_region {\n+                    ty::BrAnon(idx) => {\n+                        (format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                        self.hir.span(node))\n+                    }\n+                    ty::BrFresh(_) => (\"an anonymous lifetime defined on\".to_owned(),\n+                    self.hir.span(node)),\n+                    _ => (format!(\"the lifetime {} as defined on\", fr.bound_region),\n+                    self.sess.codemap().def_span(self.hir.span(node))),\n+                }\n+            }\n+            _ => bug!()\n+        };\n+        let (msg, opt_span) = self.explain_span(tag, span);\n+        (format!(\"{} {}\", prefix, msg), opt_span)\n+    }\n+\n+    fn item_scope_tag(item: &hir::Item) -> &'static str {\n+        match item.node {\n+            hir::ItemImpl(..) => \"impl\",\n+            hir::ItemStruct(..) => \"struct\",\n+            hir::ItemUnion(..) => \"union\",\n+            hir::ItemEnum(..) => \"enum\",\n+            hir::ItemTrait(..) => \"trait\",\n+            hir::ItemFn(..) => \"function body\",\n+            _ => \"item\"\n+        }\n+    }\n+\n+    fn trait_item_scope_tag(item: &hir::TraitItem) -> &'static str {\n+        match item.node {\n+            hir::TraitItemKind::Method(..) => \"method body\",\n+            hir::TraitItemKind::Const(..) |\n+                hir::TraitItemKind::Type(..) => \"associated item\"\n+        }\n+    }\n+\n+    fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n+        match item.node {\n+            hir::ImplItemKind::Method(..) => \"method body\",\n+            hir::ImplItemKind::Const(..) |\n+                hir::ImplItemKind::Type(_) => \"associated item\"\n+        }\n+    }\n+\n+    fn explain_span(self,\n+                    heading: &str, span: Span)\n+        -> (String, Option<Span>) {\n+        let lo = self.sess.codemap().lookup_char_pos_adj(span.lo());\n+        (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1),\n+         Some(span))\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {"}]}