{"sha": "5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "node_id": "C_kwDOAAsO6NoAKDU5NzdhMTYyNmRjNzNkNDMxY2IwZDJiNDFhNWMyMmM4YzgyOWVmNTk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-01-09T12:43:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-01-09T12:46:15Z"}, "message": "make env::current_exe work on Windows", "tree": {"sha": "dbed7fc1b2f2dc150c66ddabcf1a19af926272aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbed7fc1b2f2dc150c66ddabcf1a19af926272aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "html_url": "https://github.com/rust-lang/rust/commit/5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3403959b2dd3a1f8298c9f0fdb73ff0eec922e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3403959b2dd3a1f8298c9f0fdb73ff0eec922e", "html_url": "https://github.com/rust-lang/rust/commit/0f3403959b2dd3a1f8298c9f0fdb73ff0eec922e"}], "stats": {"total": 98, "additions": 85, "deletions": 13}, "files": [{"sha": "ce24b23ca327333b95eb2c6cf0e9493599a06637", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "patch": "@@ -166,7 +166,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n                 Scalar::from_u32(windows_check_buffer_size(\n-                    this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?,\n+                    this.write_os_str_to_wide_str(\n+                        &var, buf_ptr, buf_size, /*truncate*/ false,\n+                    )?,\n                 ))\n             }\n             None => {\n@@ -366,7 +368,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         match env::current_dir() {\n             Ok(cwd) =>\n                 return Ok(Scalar::from_u32(windows_check_buffer_size(\n-                    this.write_path_to_wide_str(&cwd, buf, size)?,\n+                    this.write_path_to_wide_str(&cwd, buf, size, /*truncate*/ false)?,\n                 ))),\n             Err(e) => this.set_last_error_from_io_error(e.kind())?,\n         }"}, {"sha": "f010d4251f4799efd2007251d3a74bb3da21f0da", "filename": "src/tools/miri/src/shims/os_str.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs?ref=5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "patch": "@@ -101,17 +101,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         self.eval_context_mut().write_c_str(bytes, ptr, size)\n     }\n \n-    /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n-    /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n-    /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n-    /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does include the null terminator. Length is measured in units of\n-    /// `u16.`\n+    /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what the\n+    /// Windows APIs usually handle.\n+    ///\n+    /// If `truncate == false` (the usual mode of operation), this function returns `Ok((false,\n+    /// length))` without trying to write if `size` is not large enough to fit the contents of\n+    /// `os_string` plus a null terminator. It returns `Ok((true, length))` if the writing process\n+    /// was successful. The string length returned does include the null terminator. Length is\n+    /// measured in units of `u16.`\n+    ///\n+    /// If `truncate == true`, then in case `size` is not large enough it *will* write the first\n+    /// `size.saturating_sub(1)` many items, followed by a null terminator (if `size > 0`).\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n         ptr: Pointer<Option<Provenance>>,\n         size: u64,\n+        truncate: bool,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(windows)]\n         fn os_str_to_u16vec<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, Vec<u16>> {\n@@ -129,7 +135,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         let u16_vec = os_str_to_u16vec(os_str)?;\n-        self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)\n+        let (written, size_needed) = self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)?;\n+        if truncate && !written && size > 0 {\n+            // Write the truncated part that fits.\n+            let truncated_data = &u16_vec[..size.saturating_sub(1).try_into().unwrap()];\n+            let (written, written_len) =\n+                self.eval_context_mut().write_wide_str(truncated_data, ptr, size)?;\n+            assert!(written && written_len == size);\n+        }\n+        Ok((written, size_needed))\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes.\n@@ -143,7 +157,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u8, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n-        assert!(self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap().0);\n+        let (written, _) = self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap();\n+        assert!(written);\n         Ok(arg_place.ptr)\n     }\n \n@@ -158,7 +173,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u16, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n-        assert!(self.write_os_str_to_wide_str(os_str, arg_place.ptr, size).unwrap().0);\n+        let (written, _) =\n+            self.write_os_str_to_wide_str(os_str, arg_place.ptr, size, /*truncate*/ false).unwrap();\n+        assert!(written);\n         Ok(arg_place.ptr)\n     }\n \n@@ -212,11 +229,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         path: &Path,\n         ptr: Pointer<Option<Provenance>>,\n         size: u64,\n+        truncate: bool,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n         let os_str =\n             this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n-        this.write_os_str_to_wide_str(&os_str, ptr, size)\n+        this.write_os_str_to_wide_str(&os_str, ptr, size, truncate)\n     }\n \n     /// Allocate enough memory to store a Path as a null-terminated sequence of bytes,\n@@ -232,6 +250,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.alloc_os_str_as_c_str(&os_str, memkind)\n     }\n \n+    /// Allocate enough memory to store a Path as a null-terminated sequence of `u16`s,\n+    /// adjusting path separators if needed.\n+    fn alloc_path_as_wide_str(\n+        &mut self,\n+        path: &Path,\n+        memkind: MemoryKind<MiriMemoryKind>,\n+    ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n+        let this = self.eval_context_mut();\n+        let os_str =\n+            this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        this.alloc_os_str_as_wide_str(&os_str, memkind)\n+    }\n+\n     #[allow(clippy::get_first)]\n     fn convert_path<'a>(\n         &self,"}, {"sha": "f310d16e86198fcae581464bdf0be90253caa106", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "patch": "@@ -381,6 +381,46 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n                 this.write_scalar(Scalar::from_u32(1), dest)?;\n             }\n+            \"GetModuleFileNameW\" => {\n+                let [handle, filename, size] =\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`GetModuleFileNameW`\")?;\n+\n+                let handle = this.read_machine_usize(handle)?;\n+                let filename = this.read_pointer(filename)?;\n+                let size = this.read_scalar(size)?.to_u32()?;\n+\n+                if handle != 0 {\n+                    throw_unsup_format!(\"`GetModuleFileNameW` only supports the NULL handle\");\n+                }\n+\n+                // Using the host current_exe is a bit off, but consistent with Linux\n+                // (where stdlib reads /proc/self/exe).\n+                // Unfortunately this Windows function has a crazy behavior so we can't just use\n+                // `write_path_to_wide_str`...\n+                let path = std::env::current_exe().unwrap();\n+                let (all_written, size_needed) = this.write_path_to_wide_str(\n+                    &path,\n+                    filename,\n+                    size.into(),\n+                    /*truncate*/ true,\n+                )?;\n+\n+                if all_written {\n+                    // If the function succeeds, the return value is the length of the string that\n+                    // is copied to the buffer, in characters, not including the terminating null\n+                    // character.\n+                    this.write_int(size_needed.checked_sub(1).unwrap(), dest)?;\n+                } else {\n+                    // If the buffer is too small to hold the module name, the string is truncated\n+                    // to nSize characters including the terminating null character, the function\n+                    // returns nSize, and the function sets the last error to\n+                    // ERROR_INSUFFICIENT_BUFFER.\n+                    this.write_int(size, dest)?;\n+                    let insufficient_buffer = this.eval_windows(\"c\", \"ERROR_INSUFFICIENT_BUFFER\");\n+                    this.set_last_error(insufficient_buffer)?;\n+                }\n+            }\n \n             // Threading\n             \"CreateThread\" => {"}, {"sha": "898a42b72d134819f25b46e0b80bda1ad6c42c88", "filename": "src/tools/miri/tests/pass/shims/env/current_exe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5977a1626dc73d431cb0d2b41a5c22c8c829ef59/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs?ref=5977a1626dc73d431cb0d2b41a5c22c8c829ef59", "patch": "@@ -1,4 +1,3 @@\n-//@ignore-target-windows: current_exe not supported on Windows\n //@only-on-host: the Linux std implementation opens /proc/self/exe, which doesn't work cross-target\n //@compile-flags: -Zmiri-disable-isolation\n use std::env;"}]}