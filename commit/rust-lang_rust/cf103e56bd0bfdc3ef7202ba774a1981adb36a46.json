{"sha": "cf103e56bd0bfdc3ef7202ba774a1981adb36a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMTAzZTU2YmQwYmZkYzNlZjcyMDJiYTc3NGExOTgxYWRiMzZhNDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-04-26T08:39:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-30T16:18:33Z"}, "message": "Reintroduce the float parsing error", "tree": {"sha": "49b7303f07b0f1282f55a0b4c74cd85e884d9713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b7303f07b0f1282f55a0b4c74cd85e884d9713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf103e56bd0bfdc3ef7202ba774a1981adb36a46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrnQdksHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAT6\nOBAAsCoAw2oQBX+8hav8Wl9cRpy5wvLRaXn6hTc634Kb9ZkmX1CdcqXu7tvstmPg\n0WaIeM4thbEouwIAZPJtAMMzPMhd5fwZSwYh+z5AQRyvqfnvCSm0+UyTMoZ+WTbD\ns7mZVVh9ZYAnbY7vnEXuxvHN4d0UEDZ2WbBpbogZPnnev7y2t2+iTUfMNKQLmO7j\n6SENWJUBVVknIfuD1oENjIPze1/BIFIWl2UUtln1oSrJi0/GgoZcP6qIVzSuyFzg\nMiuhg6F/IHTWgNgAkQ3vw/Ne1AWkq0AoD7KQFhEL7EdMjW+78pi9OSMkVawpuFYs\nrvivjDGBA6DILYMV4AYSC9nuxK2D0MO220HYJeRIbGPP7yZj4ceQupuCawm8UEpy\nXndKTQOBLbwqdg5HuaNUkucV8IL7V0+RID9G4RzjRcY7/gjbDO4fbXUmorng5Fhm\nu0Z/g0eipjGqscb1AkuEqs3i3oN6OgsctkJ41SCL+CyEj15i5cG/eZ8Qi8/uageA\ndYMRKa7l6b/DmgCXkoCmg0yFm3DJfqJa4S5PQ91XQ1YzL6LnJNbD7UW2Ea4ASiRC\nDCmA47KZn0Xk+udkLHBCVRL/W4pwySoHnCAXJ5x2VdzHvgt8aq+U8KjzJ0s2B+8c\n22/onFgkVm2NF8m/M6dKH49nc5QdbrQRQCG8N3tOFKNEmfU=\n=cz41\n-----END PGP SIGNATURE-----", "payload": "tree 49b7303f07b0f1282f55a0b4c74cd85e884d9713\nparent 40b118cf4767413f7676c97296c222167604485b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1524731944 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525105113 +0200\n\nReintroduce the float parsing error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf103e56bd0bfdc3ef7202ba774a1981adb36a46", "html_url": "https://github.com/rust-lang/rust/commit/cf103e56bd0bfdc3ef7202ba774a1981adb36a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf103e56bd0bfdc3ef7202ba774a1981adb36a46/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40b118cf4767413f7676c97296c222167604485b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b118cf4767413f7676c97296c222167604485b", "html_url": "https://github.com/rust-lang/rust/commit/40b118cf4767413f7676c97296c222167604485b"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "5890ea5c9d0c653cc8d186986dbb1c4dd303ade1", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf103e56bd0bfdc3ef7202ba774a1981adb36a46/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf103e56bd0bfdc3ef7202ba774a1981adb36a46/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=cf103e56bd0bfdc3ef7202ba774a1981adb36a46", "patch": "@@ -171,6 +171,13 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     ) -> Literal<'tcx> {\n         trace!(\"const_eval_literal: {:#?}, {:?}, {:?}, {:?}\", lit, ty, sp, neg);\n \n+        let parse_float = |num, fty| -> Value {\n+            parse_float(num, fty, neg).unwrap_or_else(|_| {\n+                // FIXME(#31407) this is only necessary because float parsing is buggy\n+                self.tcx.sess.span_fatal(sp, \"could not evaluate float literal (see issue #31407)\");\n+            })\n+        };\n+\n         let clamp = |n| {\n             let size = self.integer_bit_width(ty);\n             trace!(\"clamp {} with size {} and amt {}\", n, size, 128 - size);\n@@ -205,16 +212,14 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             },\n             LitKind::Int(n, _) => Value::ByVal(PrimVal::Bytes(clamp(n))),\n             LitKind::Float(n, fty) => {\n-                let n = n.as_str();\n-                parse_float(&n, fty, neg).expect(\"apfloat parsing failed\")\n+                parse_float(n, fty)\n             }\n             LitKind::FloatUnsuffixed(n) => {\n                 let fty = match ty.sty {\n                     ty::TyFloat(fty) => fty,\n                     _ => bug!()\n                 };\n-                let n = n.as_str();\n-                parse_float(&n, fty, neg).expect(\"apfloat parsing failed\")\n+                parse_float(n, fty)\n             }\n             LitKind::Bool(b) => Value::ByVal(PrimVal::Bytes(b as u128)),\n             LitKind::Char(c) => Value::ByVal(PrimVal::Bytes(c as u128)),"}, {"sha": "619b4596b42277c0649439b94ed9eef25f90be9e", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cf103e56bd0bfdc3ef7202ba774a1981adb36a46/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf103e56bd0bfdc3ef7202ba774a1981adb36a46/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=cf103e56bd0bfdc3ef7202ba774a1981adb36a46", "patch": "@@ -34,6 +34,7 @@ use std::fmt;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n+use syntax_pos::symbol::Symbol;\n \n #[derive(Clone, Debug)]\n pub enum PatternError {\n@@ -1145,16 +1146,14 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n             Value::ByVal(PrimVal::Bytes(n))\n         },\n         LitKind::Float(n, fty) => {\n-            let n = n.as_str();\n-            parse_float(&n, fty, neg).map_err(|_| ())?\n+            parse_float(n, fty, neg)?\n         }\n         LitKind::FloatUnsuffixed(n) => {\n             let fty = match ty.sty {\n                 ty::TyFloat(fty) => fty,\n                 _ => bug!()\n             };\n-            let n = n.as_str();\n-            parse_float(&n, fty, neg).map_err(|_| ())?\n+            parse_float(n, fty, neg)?\n         }\n         LitKind::Bool(b) => Value::ByVal(PrimVal::Bytes(b as u128)),\n         LitKind::Char(c) => Value::ByVal(PrimVal::Bytes(c as u128)),\n@@ -1163,26 +1162,29 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n }\n \n pub fn parse_float(\n-    num: &str,\n+    num: Symbol,\n     fty: ast::FloatTy,\n     neg: bool,\n-) -> Result<Value, String> {\n+) -> Result<Value, ()> {\n+    let num = num.as_str();\n     use rustc_apfloat::ieee::{Single, Double};\n     use rustc_apfloat::Float;\n     let bits = match fty {\n         ast::FloatTy::F32 => {\n-            let mut f = num.parse::<Single>().map_err(|e| {\n-                format!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            })?;\n+            num.parse::<f32>().map_err(|_| ())?;\n+            let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n             if neg {\n                 f = -f;\n             }\n             f.to_bits()\n         }\n         ast::FloatTy::F64 => {\n-            let mut f = num.parse::<Double>().map_err(|e| {\n-                format!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n-            })?;\n+            num.parse::<f64>().map_err(|_| ())?;\n+            let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n+                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+            });\n             if neg {\n                 f = -f;\n             }"}]}