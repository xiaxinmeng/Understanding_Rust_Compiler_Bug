{"sha": "fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "node_id": "C_kwDOAAsO6NoAKGZjYzc2ZTkzYTA1MzFlOWUyZGI0Y2UyZTBmNjhhYjc5ODg5MzE3NTU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-12-17T17:39:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-12-17T17:45:56Z"}, "message": "Initial support for `#[rustc_legacy_const_generics]`", "tree": {"sha": "64e2fe3063bef9b54be9ed47d7ab9b891977592c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e2fe3063bef9b54be9ed47d7ab9b891977592c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "html_url": "https://github.com/rust-lang/rust/commit/fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f79f3db7b71b192dd2e387d2d7face7e27b3b3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79f3db7b71b192dd2e387d2d7face7e27b3b3bd", "html_url": "https://github.com/rust-lang/rust/commit/f79f3db7b71b192dd2e387d2d7face7e27b3b3bd"}], "stats": {"total": 125, "additions": 110, "deletions": 15}, "files": [{"sha": "bf8bd931a571a2d9db90ce1d5226bf887448a144", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "patch": "@@ -26,6 +26,7 @@ pub struct FunctionData {\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n     pub abi: Option<Interned<str>>,\n+    pub legacy_const_generics_indices: Vec<u32>,\n     flags: FnFlags,\n }\n \n@@ -58,6 +59,14 @@ impl FunctionData {\n             flags.bits |= FnFlags::IS_IN_EXTERN_BLOCK;\n         }\n \n+        let legacy_const_generics_indices = item_tree\n+            .attrs(db, krate, ModItem::from(loc.id.value).into())\n+            .by_key(\"rustc_legacy_const_generics\")\n+            .tt_values()\n+            .next()\n+            .map(|arg| parse_rustc_legacy_const_generics(arg))\n+            .unwrap_or_default();\n+\n         Arc::new(FunctionData {\n             name: func.name.clone(),\n             params: enabled_params\n@@ -72,6 +81,7 @@ impl FunctionData {\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()),\n             visibility: item_tree[func.visibility].clone(),\n             abi: func.abi.clone(),\n+            legacy_const_generics_indices,\n             flags,\n         })\n     }\n@@ -111,6 +121,28 @@ impl FunctionData {\n     }\n }\n \n+fn parse_rustc_legacy_const_generics(tt: &tt::Subtree) -> Vec<u32> {\n+    let mut indices = Vec::new();\n+    for args in tt.token_trees.chunks(2) {\n+        match &args[0] {\n+            tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => match lit.text.parse() {\n+                Ok(index) => indices.push(index),\n+                Err(_) => break,\n+            },\n+            _ => break,\n+        }\n+\n+        if let Some(comma) = args.get(1) {\n+            match comma {\n+                tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if punct.char == ',' => {}\n+                _ => break,\n+            }\n+        }\n+    }\n+\n+    indices\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TypeAliasData {\n     pub name: Name,"}, {"sha": "7e1bf9ceea0666f84837f8e7c9a495404ca4a0d5", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "patch": "@@ -235,20 +235,33 @@ impl ExprValidator {\n             return;\n         }\n \n-        let params = sig.params();\n+        if sig.legacy_const_generics_indices.is_empty() {\n+            let mut param_count = sig.params().len();\n \n-        let mut param_count = params.len();\n-\n-        if arg_count != param_count {\n-            if is_method_call {\n-                param_count -= 1;\n-                arg_count -= 1;\n+            if arg_count != param_count {\n+                if is_method_call {\n+                    param_count -= 1;\n+                    arg_count -= 1;\n+                }\n+                self.diagnostics.push(BodyValidationDiagnostic::MismatchedArgCount {\n+                    call_expr: call_id,\n+                    expected: param_count,\n+                    found: arg_count,\n+                });\n+            }\n+        } else {\n+            // With `#[rustc_legacy_const_generics]` there are basically two parameter counts that\n+            // are allowed.\n+            let count_non_legacy = sig.params().len();\n+            let count_legacy = sig.params().len() + sig.legacy_const_generics_indices.len();\n+            if arg_count != count_non_legacy && arg_count != count_legacy {\n+                self.diagnostics.push(BodyValidationDiagnostic::MismatchedArgCount {\n+                    call_expr: call_id,\n+                    // Since most users will use the legacy way to call them, report against that.\n+                    expected: count_legacy,\n+                    found: arg_count,\n+                });\n             }\n-            self.diagnostics.push(BodyValidationDiagnostic::MismatchedArgCount {\n-                call_expr: call_id,\n-                expected: param_count,\n-                found: arg_count,\n-            });\n         }\n     }\n "}, {"sha": "3e5f2d29df9024c3eda543199e2cf31c44edc1b5", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "patch": "@@ -175,6 +175,7 @@ pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n pub struct CallableSig {\n     params_and_return: Arc<[Ty]>,\n     is_varargs: bool,\n+    legacy_const_generics_indices: Arc<[u32]>,\n }\n \n has_interner!(CallableSig);\n@@ -185,7 +186,11 @@ pub type PolyFnSig = Binders<CallableSig>;\n impl CallableSig {\n     pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty, is_varargs: bool) -> CallableSig {\n         params.push(ret);\n-        CallableSig { params_and_return: params.into(), is_varargs }\n+        CallableSig {\n+            params_and_return: params.into(),\n+            is_varargs,\n+            legacy_const_generics_indices: Arc::new([]),\n+        }\n     }\n \n     pub fn from_fn_ptr(fn_ptr: &FnPointer) -> CallableSig {\n@@ -202,9 +207,14 @@ impl CallableSig {\n                 .map(|arg| arg.assert_ty_ref(&Interner).clone())\n                 .collect(),\n             is_varargs: fn_ptr.sig.variadic,\n+            legacy_const_generics_indices: Arc::new([]),\n         }\n     }\n \n+    pub fn set_legacy_const_generics_indices(&mut self, indices: &[u32]) {\n+        self.legacy_const_generics_indices = indices.into();\n+    }\n+\n     pub fn to_fn_ptr(&self) -> FnPointer {\n         FnPointer {\n             num_binders: 0,\n@@ -238,7 +248,11 @@ impl Fold<Interner> for CallableSig {\n     {\n         let vec = self.params_and_return.to_vec();\n         let folded = vec.fold_with(folder, outer_binder)?;\n-        Ok(CallableSig { params_and_return: folded.into(), is_varargs: self.is_varargs })\n+        Ok(CallableSig {\n+            params_and_return: folded.into(),\n+            is_varargs: self.is_varargs,\n+            legacy_const_generics_indices: self.legacy_const_generics_indices,\n+        })\n     }\n }\n "}, {"sha": "596bf9ee0fd657ccc620e86970b9facb4e7828fc", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "patch": "@@ -1286,7 +1286,11 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n         .with_type_param_mode(TypeParamLoweringMode::Variable);\n     let ret = ctx_ret.lower_ty(&data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n-    make_binders(&generics, CallableSig::from_params_and_return(params, ret, data.is_varargs()))\n+    let mut sig = CallableSig::from_params_and_return(params, ret, data.is_varargs());\n+    if !data.legacy_const_generics_indices.is_empty() {\n+        sig.set_legacy_const_generics_indices(&data.legacy_const_generics_indices);\n+    }\n+    make_binders(&generics, sig)\n }\n \n /// Build the declared type of a function. This should not need to look at the"}, {"sha": "95a3ac1d519ba417abd4c4af3dcb5b3bc8208f57", "filename": "crates/ide_diagnostics/src/handlers/mismatched_arg_count.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc76e93a0531e9e2db4ce2e0f68ab7988931755/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=fcc76e93a0531e9e2db4ce2e0f68ab7988931755", "patch": "@@ -305,6 +305,38 @@ fn main() {\n         fixed(0);\n         varargs(1, 2, 3);\n     }\n+}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn legacy_const_generics() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_legacy_const_generics(1, 3)]\n+fn mixed<const N1: &'static str, const N2: bool>(\n+    a: u8,\n+    b: i8,\n+) {}\n+\n+fn f() {\n+    mixed(0, \"\", -1, true);\n+    mixed::<\"\", true>(0, -1);\n+}\n+\n+#[rustc_legacy_const_generics(1, 3)]\n+fn b<const N1: u8, const N2: u8>(\n+    a: u8,\n+    b: u8,\n+) {}\n+\n+fn g() {\n+    b(0, 1, 2, 3);\n+    b::<1, 3>(0, 2);\n+\n+    b(0, 1, 2);\n+           //^ error: expected 4 arguments, found 3\n }\n             \"#,\n         )"}]}