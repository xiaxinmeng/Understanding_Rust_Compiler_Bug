{"sha": "61866bc60cab64677c710dd7146c35b0ecdb40cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODY2YmM2MGNhYjY0Njc3YzcxMGRkNzE0NmMzNWIwZWNkYjQwY2M=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-08-06T09:19:31Z"}, "committer": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-08-14T17:33:39Z"}, "message": "Use intra-doc links in `mem::manually_drop` & `mem::maybe_uninit`", "tree": {"sha": "eb1e75bed5fc31fafcbaa96126532afc29e65bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb1e75bed5fc31fafcbaa96126532afc29e65bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61866bc60cab64677c710dd7146c35b0ecdb40cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61866bc60cab64677c710dd7146c35b0ecdb40cc", "html_url": "https://github.com/rust-lang/rust/commit/61866bc60cab64677c710dd7146c35b0ecdb40cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61866bc60cab64677c710dd7146c35b0ecdb40cc/comments", "author": null, "committer": null, "parents": [{"sha": "7996182bc1b48495014fa13799f503be01d3e5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7996182bc1b48495014fa13799f503be01d3e5bc", "html_url": "https://github.com/rust-lang/rust/commit/7996182bc1b48495014fa13799f503be01d3e5bc"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "e45aa86c0795a915d7f5b079e4189d8a7999e3a7", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61866bc60cab64677c710dd7146c35b0ecdb40cc/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61866bc60cab64677c710dd7146c35b0ecdb40cc/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=61866bc60cab64677c710dd7146c35b0ecdb40cc", "patch": "@@ -56,9 +56,9 @@ use crate::ptr;\n /// working with [pinned] data, where reusing the memory without calling the destructor could lead\n /// to Undefined Behaviour.\n ///\n-/// [`mem::zeroed`]: fn.zeroed.html\n-/// [`MaybeUninit<T>`]: union.MaybeUninit.html\n-/// [pinned]: ../pin/index.html\n+/// [`mem::zeroed`]: crate::mem::zeroed\n+/// [`MaybeUninit<T>`]: crate::mem::MaybeUninit\n+/// [pinned]: crate::pin\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -116,8 +116,6 @@ impl<T> ManuallyDrop<T> {\n     /// leaving the state of this container unchanged.\n     /// It is your responsibility to ensure that this `ManuallyDrop` is not used again.\n     ///\n-    /// [`ManuallyDrop::drop`]: #method.drop\n-    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n     #[must_use = \"if you don't need the value, you can use `ManuallyDrop::drop` instead\"]\n     #[stable(feature = \"manually_drop_take\", since = \"1.42.0\")]\n     #[inline]\n@@ -148,9 +146,7 @@ impl<T: ?Sized> ManuallyDrop<T> {\n     /// This is normally prevented by the type system, but users of `ManuallyDrop` must\n     /// uphold those guarantees without assistance from the compiler.\n     ///\n-    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n-    /// [`ptr::drop_in_place`]: ../ptr/fn.drop_in_place.html\n-    /// [pinned]: ../pin/index.html\n+    /// [pinned]: crate::pin\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n     pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {"}, {"sha": "d2d65fd2fa517027c365215f4e88c28e3dc98125", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61866bc60cab64677c710dd7146c35b0ecdb40cc/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61866bc60cab64677c710dd7146c35b0ecdb40cc/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=61866bc60cab64677c710dd7146c35b0ecdb40cc", "patch": "@@ -247,7 +247,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     ///\n-    /// [`assume_init`]: #method.assume_init\n+    /// [`assume_init`]: MaybeUninit::assume_init\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n@@ -525,7 +525,7 @@ impl<T> MaybeUninit<T> {\n     /// to ensure that that data may indeed be duplicated.\n     ///\n     /// [inv]: #initialization-invariant\n-    /// [`assume_init`]: #method.assume_init\n+    /// [`assume_init`]: MaybeUninit::assume_init\n     ///\n     /// # Examples\n     ///"}]}