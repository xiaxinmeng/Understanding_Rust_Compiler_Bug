{"sha": "2206267c3151c014389c4ca25b98a64c9e874bca", "node_id": "C_kwDOAAsO6NoAKDIyMDYyNjdjMzE1MWMwMTQzODljNGNhMjViOThhNjRjOWU4NzRiY2E", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-09T20:39:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T20:39:02Z"}, "message": "Rollup merge of #101005 - SLASHLogin:rustc_codegen_llvm_diagnostics, r=davidtwco\n\nMigrate rustc_codegen_llvm to SessionDiagnostics\n\nWIP: Port current implementation of diagnostics to the new SessionDiagnostics.\n\nPart of #100717\n\n```@rustbot``` label +A-translation", "tree": {"sha": "fe19ccdb6aa45ebc771b9c046d19029440afa112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe19ccdb6aa45ebc771b9c046d19029440afa112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2206267c3151c014389c4ca25b98a64c9e874bca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbA/mCRBK7hj4Ov3rIwAAkh8IAAskaE1V6UC1H/n4k9r1nbgY\n9+4gikFqZk5BhfN8pMWf0lXnBMJbX/xdVKQ0q2gSJhaV0+D/aFAO1ojLtTz7Ybof\nR5D+8V2YGuS0OZ9IZXutuUr4bTC9+n46XrxEeDRL4aeLo/9qbwli6N8WK/pAOx1Q\nb3/A5Z5tJt5p6SoR208aMp2rVxauoAlrjBhE4csm2mACNTyIXUqInyT/SlX5f8mR\nzMW4/LN30M1uftUAooAoAbx9cejMhNJXDhEmyDuzq8rvrvrCIPmcPJzx48PJTwQc\nNXTB07iI41rOEyK3LKDIjN991Tqtl1O5ySR4mma4GutdL0X/BUFBiB2XkHY4AM0=\n=WNXm\n-----END PGP SIGNATURE-----\n", "payload": "tree fe19ccdb6aa45ebc771b9c046d19029440afa112\nparent c71658706fac34e3026eceac3b428843e16cd7b4\nparent caada745d1461a49f99f381bd5856451a5408ab4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668026342 -0500\ncommitter GitHub <noreply@github.com> 1668026342 -0500\n\nRollup merge of #101005 - SLASHLogin:rustc_codegen_llvm_diagnostics, r=davidtwco\n\nMigrate rustc_codegen_llvm to SessionDiagnostics\n\nWIP: Port current implementation of diagnostics to the new SessionDiagnostics.\n\nPart of #100717\n\n```@rustbot``` label +A-translation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2206267c3151c014389c4ca25b98a64c9e874bca", "html_url": "https://github.com/rust-lang/rust/commit/2206267c3151c014389c4ca25b98a64c9e874bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2206267c3151c014389c4ca25b98a64c9e874bca/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71658706fac34e3026eceac3b428843e16cd7b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71658706fac34e3026eceac3b428843e16cd7b4", "html_url": "https://github.com/rust-lang/rust/commit/c71658706fac34e3026eceac3b428843e16cd7b4"}, {"sha": "caada745d1461a49f99f381bd5856451a5408ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/caada745d1461a49f99f381bd5856451a5408ab4", "html_url": "https://github.com/rust-lang/rust/commit/caada745d1461a49f99f381bd5856451a5408ab4"}], "stats": {"total": 414, "additions": 330, "deletions": 84}, "files": [{"sha": "a8b47633519aabc39689ab19a7138c269b11440c", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -12,6 +12,7 @@ use rustc_target::spec::{FramePointer, SanitizerSet, StackProbeType, StackProtec\n use smallvec::SmallVec;\n \n use crate::attributes;\n+use crate::errors::{MissingFeatures, SanitizerMemtagRequiresMte, TargetFeatureDisableOrEnable};\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace, MemoryEffects};\n use crate::llvm_util;\n@@ -82,7 +83,7 @@ pub fn sanitize_attrs<'ll>(\n         let mte_feature =\n             features.iter().map(|s| &s[..]).rfind(|n| [\"+mte\", \"-mte\"].contains(&&n[..]));\n         if let None | Some(\"-mte\") = mte_feature {\n-            cx.tcx.sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n+            cx.tcx.sess.emit_err(SanitizerMemtagRequiresMte);\n         }\n \n         attrs.push(llvm::AttributeKind::SanitizeMemTag.create_attr(cx.llcx));\n@@ -393,13 +394,14 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n             .get_attrs(instance.def_id(), sym::target_feature)\n             .next()\n             .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n-        let msg = format!(\n-            \"the target features {} must all be either enabled or disabled together\",\n-            f.join(\", \")\n-        );\n-        let mut err = cx.tcx.sess.struct_span_err(span, &msg);\n-        err.help(\"add the missing features in a `target_feature` attribute\");\n-        err.emit();\n+        cx.tcx\n+            .sess\n+            .create_err(TargetFeatureDisableOrEnable {\n+                features: f,\n+                span: Some(span),\n+                missing_features: Some(MissingFeatures),\n+            })\n+            .emit();\n         return;\n     }\n "}, {"sha": "5c68abeb08baf288532e48c162926b39f92fce26", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -12,6 +12,10 @@ use std::str;\n use object::read::macho::FatArch;\n \n use crate::common;\n+use crate::errors::{\n+    ArchiveBuildFailure, DlltoolFailImportLibrary, ErrorCallingDllTool, ErrorCreatingImportLibrary,\n+    ErrorWritingDEFFile, UnknownArchiveKind,\n+};\n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n@@ -147,7 +151,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     fn build(mut self: Box<Self>, output: &Path) -> bool {\n         match self.build_with_llvm(output) {\n             Ok(any_members) => any_members,\n-            Err(e) => self.sess.fatal(&format!(\"failed to build archive: {}\", e)),\n+            Err(e) => self.sess.emit_fatal(ArchiveBuildFailure { error: e }),\n         }\n     }\n }\n@@ -217,7 +221,7 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             match std::fs::write(&def_file_path, def_file_content) {\n                 Ok(_) => {}\n                 Err(e) => {\n-                    sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n+                    sess.emit_fatal(ErrorWritingDEFFile { error: e });\n                 }\n             };\n \n@@ -239,13 +243,14 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n \n             match result {\n                 Err(e) => {\n-                    sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n+                    sess.emit_fatal(ErrorCallingDllTool { error: e });\n+                }\n+                Ok(output) if !output.status.success() => {\n+                    sess.emit_fatal(DlltoolFailImportLibrary {\n+                        stdout: String::from_utf8_lossy(&output.stdout),\n+                        stderr: String::from_utf8_lossy(&output.stderr),\n+                    })\n                 }\n-                Ok(output) if !output.status.success() => sess.fatal(&format!(\n-                    \"Dlltool could not create import library: {}\\n{}\",\n-                    String::from_utf8_lossy(&output.stdout),\n-                    String::from_utf8_lossy(&output.stderr)\n-                )),\n                 _ => {}\n             }\n         } else {\n@@ -293,11 +298,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             };\n \n             if result == crate::llvm::LLVMRustResult::Failure {\n-                sess.fatal(&format!(\n-                    \"Error creating import library for {}: {}\",\n+                sess.emit_fatal(ErrorCreatingImportLibrary {\n                     lib_name,\n-                    llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n-                ));\n+                    error: llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string()),\n+                });\n             }\n         };\n \n@@ -308,9 +312,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n impl<'a> LlvmArchiveBuilder<'a> {\n     fn build_with_llvm(&mut self, output: &Path) -> io::Result<bool> {\n         let kind = &*self.sess.target.archive_format;\n-        let kind = kind.parse::<ArchiveKind>().map_err(|_| kind).unwrap_or_else(|kind| {\n-            self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n-        });\n+        let kind = kind\n+            .parse::<ArchiveKind>()\n+            .map_err(|_| kind)\n+            .unwrap_or_else(|kind| self.sess.emit_fatal(UnknownArchiveKind { kind }));\n \n         let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();"}, {"sha": "3fa21355b7f4c9b46349591904aac80717541976", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,4 +1,5 @@\n use crate::back::write::{self, save_temp_bitcode, DiagnosticHandlers};\n+use crate::errors::DynamicLinkingWithLTO;\n use crate::llvm::{self, build_string};\n use crate::{LlvmCodegenBackend, ModuleLlvm};\n use object::read::archive::ArchiveFile;\n@@ -90,13 +91,7 @@ fn prepare_lto(\n         }\n \n         if cgcx.opts.cg.prefer_dynamic && !cgcx.opts.unstable_opts.dylib_lto {\n-            diag_handler\n-                .struct_err(\"cannot prefer dynamic linking when performing LTO\")\n-                .note(\n-                    \"only 'staticlib', 'bin', and 'cdylib' outputs are \\\n-                               supported with LTO\",\n-                )\n-                .emit();\n+            diag_handler.emit_err(DynamicLinkingWithLTO);\n             return Err(FatalError);\n         }\n "}, {"sha": "3b504d3a7df7589fc7f13a0027584d4cb51d6638", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,6 +1,7 @@\n use crate::base;\n use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n+use crate::errors::{InvalidMinimumAlignment, LinkageConstOrMutType, SymbolAlreadyDefined};\n use crate::llvm::{self, True};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -146,7 +147,7 @@ fn set_global_alignment<'ll>(cx: &CodegenCx<'ll, '_>, gv: &'ll Value, mut align:\n         match Align::from_bits(min) {\n             Ok(min) => align = align.max(min),\n             Err(err) => {\n-                cx.sess().err(&format!(\"invalid minimum global alignment: {}\", err));\n+                cx.sess().emit_err(InvalidMinimumAlignment { err });\n             }\n         }\n     }\n@@ -174,10 +175,7 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n         let llty2 = if let ty::RawPtr(ref mt) = ty.kind() {\n             cx.layout_of(mt.ty).llvm_type(cx)\n         } else {\n-            cx.sess().span_fatal(\n-                cx.tcx.def_span(def_id),\n-                \"must have type `*const T` or `*mut T` due to `#[linkage]` attribute\",\n-            )\n+            cx.sess().emit_fatal(LinkageConstOrMutType { span: cx.tcx.def_span(def_id) })\n         };\n         unsafe {\n             // Declare a symbol `foo` with the desired linkage.\n@@ -193,10 +191,10 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n             let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n             real_name.push_str(sym);\n             let g2 = cx.define_global(&real_name, llty).unwrap_or_else(|| {\n-                cx.sess().span_fatal(\n-                    cx.tcx.def_span(def_id),\n-                    &format!(\"symbol `{}` is already defined\", &sym),\n-                )\n+                cx.sess().emit_fatal(SymbolAlreadyDefined {\n+                    span: cx.tcx.def_span(def_id),\n+                    symbol_name: sym,\n+                })\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n             llvm::LLVMSetInitializer(g2, g1);"}, {"sha": "eaa2ccfc835c5f2564a58d53ff9522d87e3320e7", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -3,6 +3,7 @@ use crate::back::write::to_llvm_code_model;\n use crate::callee::get_fn;\n use crate::coverageinfo;\n use crate::debuginfo;\n+use crate::errors::BranchProtectionRequiresAArch64;\n use crate::llvm;\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -26,6 +27,7 @@ use rustc_session::config::{BranchProtection, CFGuard, CFProtection};\n use rustc_session::config::{CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n+use rustc_span::source_map::Spanned;\n use rustc_target::abi::{\n     call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx,\n };\n@@ -275,7 +277,7 @@ pub unsafe fn create_module<'ll>(\n \n     if let Some(BranchProtection { bti, pac_ret }) = sess.opts.unstable_opts.branch_protection {\n         if sess.target.arch != \"aarch64\" {\n-            sess.err(\"-Zbranch-protection is only supported on aarch64\");\n+            sess.emit_err(BranchProtectionRequiresAArch64);\n         } else {\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n@@ -951,7 +953,7 @@ impl<'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'_, 'tcx> {\n     #[inline]\n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n         if let LayoutError::SizeOverflow(_) = err {\n-            self.sess().span_fatal(span, &err.to_string())\n+            self.sess().emit_fatal(Spanned { span, node: err })\n         } else {\n             span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n         }\n@@ -969,7 +971,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for CodegenCx<'_, 'tcx> {\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-            self.sess().span_fatal(span, &err.to_string())\n+            self.sess().emit_fatal(Spanned { span, node: err })\n         } else {\n             match fn_abi_request {\n                 FnAbiRequest::OfFnPtr { sig, extra_args } => {"}, {"sha": "8a8d889a29865960e9c1337873d5ab54879b783e", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,5 +1,6 @@\n use crate::common::CodegenCx;\n use crate::coverageinfo;\n+use crate::errors::InstrumentCoverageRequiresLLVM12;\n use crate::llvm;\n \n use llvm::coverageinfo::CounterMappingRegion;\n@@ -37,7 +38,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     // LLVM 12.\n     let version = coverageinfo::mapping_version();\n     if version < 4 {\n-        tcx.sess.fatal(\"rustc option `-C instrument-coverage` requires LLVM 12 or higher.\");\n+        tcx.sess.emit_fatal(InstrumentCoverageRequiresLLVM12);\n     }\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());"}, {"sha": "0fafc214f2f5ebdc6144ff8dbd8f154d3a3b2814", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -0,0 +1,139 @@\n+use std::borrow::Cow;\n+\n+use rustc_errors::fluent;\n+use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::Handler;\n+use rustc_errors::IntoDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_span::Span;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_ctarget_feature_prefix)]\n+#[note]\n+pub(crate) struct UnknownCTargetFeaturePrefix<'a> {\n+    pub feature: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_ctarget_feature)]\n+#[note]\n+pub(crate) struct UnknownCTargetFeature<'a> {\n+    pub feature: &'a str,\n+    #[subdiagnostic]\n+    pub rust_feature: PossibleFeature<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum PossibleFeature<'a> {\n+    #[help(possible_feature)]\n+    Some { rust_feature: &'a str },\n+    #[help(consider_filing_feature_request)]\n+    None,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_creating_import_library)]\n+pub(crate) struct ErrorCreatingImportLibrary<'a> {\n+    pub lib_name: &'a str,\n+    pub error: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_instrument_coverage_requires_llvm_12)]\n+pub(crate) struct InstrumentCoverageRequiresLLVM12;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_symbol_already_defined)]\n+pub(crate) struct SymbolAlreadyDefined<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub symbol_name: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_branch_protection_requires_aarch64)]\n+pub(crate) struct BranchProtectionRequiresAArch64;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_invalid_minimum_alignment)]\n+pub(crate) struct InvalidMinimumAlignment {\n+    pub err: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_linkage_const_or_mut_type)]\n+pub(crate) struct LinkageConstOrMutType {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_sanitizer_memtag_requires_mte)]\n+pub(crate) struct SanitizerMemtagRequiresMte;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_archive_build_failure)]\n+pub(crate) struct ArchiveBuildFailure {\n+    pub error: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_writing_def_file)]\n+pub(crate) struct ErrorWritingDEFFile {\n+    pub error: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_calling_dlltool)]\n+pub(crate) struct ErrorCallingDllTool {\n+    pub error: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_dlltool_fail_import_library)]\n+pub(crate) struct DlltoolFailImportLibrary<'a> {\n+    pub stdout: Cow<'a, str>,\n+    pub stderr: Cow<'a, str>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_archive_kind)]\n+pub(crate) struct UnknownArchiveKind<'a> {\n+    pub kind: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_dynamic_linking_with_lto)]\n+#[note]\n+pub(crate) struct DynamicLinkingWithLTO;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_fail_parsing_target_machine_config_to_target_machine)]\n+pub(crate) struct FailParsingTargetMachineConfigToTargetMachine {\n+    pub error: String,\n+}\n+\n+pub(crate) struct TargetFeatureDisableOrEnable<'a> {\n+    pub features: &'a [&'a str],\n+    pub span: Option<Span>,\n+    pub missing_features: Option<MissingFeatures>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(codegen_llvm_missing_features)]\n+pub(crate) struct MissingFeatures;\n+\n+impl IntoDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n+    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable);\n+        if let Some(span) = self.span {\n+            diag.set_span(span);\n+        };\n+        if let Some(missing_features) = self.missing_features {\n+            diag.subdiagnostic(missing_features);\n+        }\n+        diag.set_arg(\"features\", self.features.join(\", \"));\n+        diag\n+    }\n+}"}, {"sha": "246e82545c874811fa6552bc2286da98bc113476", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -12,6 +12,8 @@\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -20,6 +22,7 @@ extern crate tracing;\n \n use back::write::{create_informational_target_machine, create_target_machine};\n \n+use errors::FailParsingTargetMachineConfigToTargetMachine;\n pub use llvm_util::target_features;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n@@ -62,6 +65,7 @@ mod context;\n mod coverageinfo;\n mod debuginfo;\n mod declare;\n+mod errors;\n mod intrinsic;\n \n // The following is a work around that replaces `pub mod llvm;` and that fixes issue 53912.\n@@ -412,7 +416,7 @@ impl ModuleLlvm {\n             let tm = match (cgcx.tm_factory)(tm_factory_config) {\n                 Ok(m) => m,\n                 Err(e) => {\n-                    handler.struct_err(&e).emit();\n+                    handler.emit_err(FailParsingTargetMachineConfigToTargetMachine { error: e });\n                     return Err(FatalError);\n                 }\n             };"}, {"sha": "e1f54356228d3ea60163ec928322caf5d82fbc88", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,4 +1,8 @@\n use crate::back::write::create_informational_target_machine;\n+use crate::errors::{\n+    PossibleFeature, TargetFeatureDisableOrEnable, UnknownCTargetFeature,\n+    UnknownCTargetFeaturePrefix,\n+};\n use crate::llvm;\n use libc::c_int;\n use rustc_codegen_ssa::target_features::{\n@@ -434,12 +438,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                 Some(c @ '+' | c @ '-') => c,\n                 Some(_) => {\n                     if diagnostics {\n-                        let mut diag = sess.struct_warn(&format!(\n-                            \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n-                            s\n-                        ));\n-                        diag.note(\"features must begin with a `+` to enable or `-` to disable it\");\n-                        diag.emit();\n+                        sess.emit_warning(UnknownCTargetFeaturePrefix { feature: s });\n                     }\n                     return None;\n                 }\n@@ -456,17 +455,15 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                         None\n                     }\n                 });\n-                let mut diag = sess.struct_warn(&format!(\n-                    \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n-                    feature\n-                ));\n-                diag.note(\"it is still passed through to the codegen backend\");\n-                if let Some(rust_feature) = rust_feature {\n-                    diag.help(&format!(\"you might have meant: `{}`\", rust_feature));\n+                let unknown_feature = if let Some(rust_feature) = rust_feature {\n+                    UnknownCTargetFeature {\n+                        feature,\n+                        rust_feature: PossibleFeature::Some { rust_feature },\n+                    }\n                 } else {\n-                    diag.note(\"consider filing a feature request\");\n-                }\n-                diag.emit();\n+                    UnknownCTargetFeature { feature, rust_feature: PossibleFeature::None }\n+                };\n+                sess.emit_warning(unknown_feature);\n             }\n \n             if diagnostics {\n@@ -492,10 +489,11 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n     features.extend(feats);\n \n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n-        sess.err(&format!(\n-            \"target features {} must all be enabled or disabled together\",\n-            f.join(\", \")\n-        ));\n+        sess.emit_err(TargetFeatureDisableOrEnable {\n+            features: f,\n+            span: None,\n+            missing_features: None,\n+        });\n     }\n \n     features"}, {"sha": "76f692b2016fd5ff64d4824206b856fc12811969", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,6 +1,7 @@\n use crate::attributes;\n use crate::base;\n use crate::context::CodegenCx;\n+use crate::errors::SymbolAlreadyDefined;\n use crate::llvm;\n use crate::type_of::LayoutLlvmExt;\n use rustc_codegen_ssa::traits::*;\n@@ -25,10 +26,8 @@ impl<'tcx> PreDefineMethods<'tcx> for CodegenCx<'_, 'tcx> {\n         let llty = self.layout_of(ty).llvm_type(self);\n \n         let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {\n-            self.sess().span_fatal(\n-                self.tcx.def_span(def_id),\n-                &format!(\"symbol `{}` is already defined\", symbol_name),\n-            )\n+            self.sess()\n+                .emit_fatal(SymbolAlreadyDefined { span: self.tcx.def_span(def_id), symbol_name })\n         });\n \n         unsafe {"}, {"sha": "e3d28a1aca20eacfc1dc08ad628a58bb06b0d1a8", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -15,10 +15,8 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n-use rustc_errors::{\n-    translation::{to_fluent_args, Translate},\n-    DiagnosticId, FatalError, Handler, Level,\n-};\n+use rustc_errors::{translation::Translate, DiagnosticId, FatalError, Handler, Level};\n+use rustc_errors::{DiagnosticMessage, Style};\n use rustc_fs_util::link_or_copy;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n@@ -38,6 +36,7 @@ use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n use rustc_target::spec::{MergeFunctions, SanitizerSet};\n \n use std::any::Any;\n+use std::borrow::Cow;\n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n@@ -969,8 +968,11 @@ pub enum Message<B: WriteBackendMethods> {\n     CodegenAborted,\n }\n \n+type DiagnosticArgName<'source> = Cow<'source, str>;\n+\n struct Diagnostic {\n-    msg: String,\n+    msg: Vec<(DiagnosticMessage, Style)>,\n+    args: FxHashMap<DiagnosticArgName<'static>, rustc_errors::DiagnosticArgValue<'static>>,\n     code: Option<DiagnosticId>,\n     lvl: Level,\n }\n@@ -1743,15 +1745,18 @@ impl Translate for SharedEmitter {\n \n impl Emitter for SharedEmitter {\n     fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n-        let fluent_args = to_fluent_args(diag.args());\n+        let args: FxHashMap<Cow<'_, str>, rustc_errors::DiagnosticArgValue<'_>> =\n+            diag.args().map(|(name, arg)| (name.clone(), arg.clone())).collect();\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-            msg: self.translate_messages(&diag.message, &fluent_args).to_string(),\n+            msg: diag.message.clone(),\n+            args: args.clone(),\n             code: diag.code.clone(),\n             lvl: diag.level(),\n         })));\n         for child in &diag.children {\n             drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-                msg: self.translate_messages(&child.message, &fluent_args).to_string(),\n+                msg: child.message.clone(),\n+                args: args.clone(),\n                 code: None,\n                 lvl: child.level,\n             })));\n@@ -1782,10 +1787,11 @@ impl SharedEmitterMain {\n             match message {\n                 Ok(SharedEmitterMessage::Diagnostic(diag)) => {\n                     let handler = sess.diagnostic();\n-                    let mut d = rustc_errors::Diagnostic::new(diag.lvl, &diag.msg);\n+                    let mut d = rustc_errors::Diagnostic::new_with_messages(diag.lvl, diag.msg);\n                     if let Some(code) = diag.code {\n                         d.code(code);\n                     }\n+                    d.replace_args(diag.args);\n                     handler.emit_diagnostic(&mut d);\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {"}, {"sha": "68a205df6c7ad05207b41617b23b8defd7dab31c", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -0,0 +1,58 @@\n+codegen_llvm_unknown_ctarget_feature =\n+    unknown feature specified for `-Ctarget-feature`: `{$feature}`\n+    .note = it is still passed through to the codegen backend\n+    .possible_feature = you might have meant: `{$rust_feature}`\n+    .consider_filing_feature_request = consider filing a feature request\n+\n+codegen_llvm_unknown_ctarget_feature_prefix =\n+    unknown feature specified for `-Ctarget-feature`: `{$feature}`\n+    .note = features must begin with a `+` to enable or `-` to disable it\n+\n+codegen_llvm_error_creating_import_library =\n+    Error creating import library for {$lib_name}: {$error}\n+\n+codegen_llvm_instrument_coverage_requires_llvm_12 =\n+    rustc option `-C instrument-coverage` requires LLVM 12 or higher.\n+\n+codegen_llvm_symbol_already_defined =\n+    symbol `{$symbol_name}` is already defined\n+\n+codegen_llvm_branch_protection_requires_aarch64 =\n+    -Zbranch-protection is only supported on aarch64\n+\n+codegen_llvm_invalid_minimum_alignment =\n+    invalid minimum global alignment: {$err}\n+\n+codegen_llvm_linkage_const_or_mut_type =\n+    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+\n+codegen_llvm_sanitizer_memtag_requires_mte =\n+    `-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\n+\n+codegen_llvm_archive_build_failure =\n+    failed to build archive: {$error}\n+\n+codegen_llvm_error_writing_def_file =\n+    Error writing .DEF file: {$error}\n+\n+codegen_llvm_error_calling_dlltool =\n+    Error calling dlltool: {$error}\n+\n+codegen_llvm_dlltool_fail_import_library =\n+    Dlltool could not create import library: {$stdout}\\n{$stderr}\n+\n+codegen_llvm_unknown_archive_kind =\n+    Don't know how to build archive of type: {$kind}\n+\n+codegen_llvm_target_feature_disable_or_enable =\n+    the target features {$features} must all be either enabled or disabled together\n+\n+codegen_llvm_missing_features =\n+    add the missing features in a `target_feature` attribute\n+\n+codegen_llvm_dynamic_linking_with_lto =\n+    cannot prefer dynamic linking when performing LTO\n+    .note = only 'staticlib', 'bin', and 'cdylib' outputs are supported with LTO\n+\n+codegen_llvm_fail_parsing_target_machine_config_to_target_machine =\n+    failed to parse target machine config to target machine: {$error}"}, {"sha": "e34acba105776e461e74a5fb26031baec679f729", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -42,6 +42,7 @@ fluent_messages! {\n     borrowck => \"../locales/en-US/borrowck.ftl\",\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n     codegen_gcc => \"../locales/en-US/codegen_gcc.ftl\",\n+    codegen_llvm => \"../locales/en-US/codegen_llvm.ftl\",\n     codegen_ssa => \"../locales/en-US/codegen_ssa.ftl\",\n     compiletest => \"../locales/en-US/compiletest.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\","}, {"sha": "43101bbb9d31cf3de2fda20e7824592fa39e51c6", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -44,6 +44,15 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n+impl<'source> IntoDiagnosticArg for DiagnosticArgValue<'source> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        match self {\n+            DiagnosticArgValue::Str(s) => DiagnosticArgValue::Str(Cow::Owned(s.into_owned())),\n+            DiagnosticArgValue::Number(n) => DiagnosticArgValue::Number(n),\n+        }\n+    }\n+}\n+\n impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     fn into(self) -> FluentValue<'source> {\n         match self {\n@@ -204,6 +213,22 @@ impl Diagnostic {\n         Diagnostic::new_with_code(level, None, message)\n     }\n \n+    #[track_caller]\n+    pub fn new_with_messages(level: Level, messages: Vec<(DiagnosticMessage, Style)>) -> Self {\n+        Diagnostic {\n+            level,\n+            message: messages,\n+            code: None,\n+            span: MultiSpan::new(),\n+            children: vec![],\n+            suggestions: Ok(vec![]),\n+            args: Default::default(),\n+            sort_span: DUMMY_SP,\n+            is_lint: false,\n+            emitted_at: DiagnosticLocation::caller(),\n+        }\n+    }\n+\n     #[track_caller]\n     pub fn new_with_code<M: Into<DiagnosticMessage>>(\n         level: Level,\n@@ -931,6 +956,13 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn replace_args(\n+        &mut self,\n+        args: FxHashMap<DiagnosticArgName<'static>, DiagnosticArgValue<'static>>,\n+    ) {\n+        self.args = args;\n+    }\n+\n     pub fn styled_message(&self) -> &[(DiagnosticMessage, Style)] {\n         &self.message\n     }"}, {"sha": "c6035705e39fa70d2022800fee8d488c82fb115b", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -107,6 +107,12 @@ impl IntoDiagnosticArg for String {\n     }\n }\n \n+impl<'a> IntoDiagnosticArg for Cow<'a, str> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.into_owned()))\n+    }\n+}\n+\n impl<'a> IntoDiagnosticArg for &'a Path {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))"}, {"sha": "c74d6bc3774a2d19030b27fc481a6d363b85cb02", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -189,8 +189,8 @@ pub enum LayoutError<'tcx> {\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n }\n \n-impl<'a> IntoDiagnostic<'a, !> for LayoutError<'a> {\n-    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, !> {\n+impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag = handler.struct_fatal(\"\");\n \n         match self {\n@@ -1126,8 +1126,8 @@ impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n     }\n }\n \n-impl<'tcx> IntoDiagnostic<'tcx, !> for FnAbiError<'tcx> {\n-    fn into_diagnostic(self, handler: &'tcx Handler) -> DiagnosticBuilder<'tcx, !> {\n+impl IntoDiagnostic<'_, !> for FnAbiError<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         handler.struct_fatal(self.to_string())\n     }\n }"}, {"sha": "b4b50d98192b1b0eca22229899409b553bc3daf0", "filename": "src/test/ui/target-feature/tied-features-cli.one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,4 +1,4 @@\n-error: target features paca, pacg must all be enabled or disabled together\n+error: the target features paca, pacg must all be either enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "b4b50d98192b1b0eca22229899409b553bc3daf0", "filename": "src/test/ui/target-feature/tied-features-cli.three.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,4 +1,4 @@\n-error: target features paca, pacg must all be enabled or disabled together\n+error: the target features paca, pacg must all be either enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "b4b50d98192b1b0eca22229899409b553bc3daf0", "filename": "src/test/ui/target-feature/tied-features-cli.two.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2206267c3151c014389c4ca25b98a64c9e874bca/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2206267c3151c014389c4ca25b98a64c9e874bca/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr?ref=2206267c3151c014389c4ca25b98a64c9e874bca", "patch": "@@ -1,4 +1,4 @@\n-error: target features paca, pacg must all be enabled or disabled together\n+error: the target features paca, pacg must all be either enabled or disabled together\n \n error: aborting due to previous error\n "}]}