{"sha": "3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "node_id": "C_kwDOAAsO6NoAKDNkNzljYmMzYzFjZjZmYWRlZmYzMmMzMGE4ZTIwZDQ1NmNkNjI1ZmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-20T06:25:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-20T06:25:27Z"}, "message": "Rollup merge of #106699 - eholk:await-chains-drop-tracking, r=wesleywiser\n\n[drop tracking] Visit break expressions\n\nThis fixes https://github.com/rust-lang/rust/issues/102383 by remembering to visit the expression in `break expr` when building the drop tracking CFG. Missing this step was causing an off-by-one error which meant after a number of awaits we'd be\nlooking for dropped values at the wrong point in the code.\n\nAdditionally, this changes the order of traversal for assignment expressions to visit the rhs and then the lhs. This matches what is done elsewhere.\n\nFinally, this improves some of the debugging output (for example, the CFG visualizer) to make it easier to figure out these sorts of issues.", "tree": {"sha": "fb3d5a24762ec9f4803fa54b1f091d06c9736597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb3d5a24762ec9f4803fa54b1f091d06c9736597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjyjPXCRBK7hj4Ov3rIwAAWEsIAEYLy7rbjR0jjUAcdHtL1P/X\nEKWqRX8JAoClfeM6yU3xfAeEGcUJAzG4Vz3iKhHPEAg/Yrx7wa3Np9r3UYPh9g2k\n/mQQVbJ13sXsFHzUovq0273vrXIrB4p3FZEa7QkI9AQKfJ0Vl4nBIIgdGjlL3OSO\nKN1sx4GP7EiMHKzv2gnRiQ4lMjMA+zdSijaImo1Y2WFxKFH8vafgeYITT8lpZPb3\nRZX86zBlpM3DvoHKvZ34RjtljXNI+4e6vN8VlEtJQ2iVNkNd240UD059lFVdpCEW\n5vA+UChA1ezQI573sOgwyfaqtA1Ne1mT/RR3nPweEtF2pLmk+d3zqzQ9jmQlEyg=\n=FzTh\n-----END PGP SIGNATURE-----\n", "payload": "tree fb3d5a24762ec9f4803fa54b1f091d06c9736597\nparent 51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906\nparent d32f3fe14ecab069ceebe73063061f6aef05c217\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674195927 +0100\ncommitter GitHub <noreply@github.com> 1674195927 +0100\n\nRollup merge of #106699 - eholk:await-chains-drop-tracking, r=wesleywiser\n\n[drop tracking] Visit break expressions\n\nThis fixes https://github.com/rust-lang/rust/issues/102383 by remembering to visit the expression in `break expr` when building the drop tracking CFG. Missing this step was causing an off-by-one error which meant after a number of awaits we'd be\nlooking for dropped values at the wrong point in the code.\n\nAdditionally, this changes the order of traversal for assignment expressions to visit the rhs and then the lhs. This matches what is done elsewhere.\n\nFinally, this improves some of the debugging output (for example, the CFG visualizer) to make it easier to figure out these sorts of issues.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "html_url": "https://github.com/rust-lang/rust/commit/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906", "html_url": "https://github.com/rust-lang/rust/commit/51d50ea96ecc9c681a0054e5eb8e5e1d4ab38906"}, {"sha": "d32f3fe14ecab069ceebe73063061f6aef05c217", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32f3fe14ecab069ceebe73063061f6aef05c217", "html_url": "https://github.com/rust-lang/rust/commit/d32f3fe14ecab069ceebe73063061f6aef05c217"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "b3dd3031db2a98d75780d00288364133be6041f4", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "patch": "@@ -304,8 +304,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n         let mut reinit = None;\n         match expr.kind {\n             ExprKind::Assign(lhs, rhs, _) => {\n-                self.visit_expr(lhs);\n                 self.visit_expr(rhs);\n+                self.visit_expr(lhs);\n \n                 reinit = Some(lhs);\n             }\n@@ -433,7 +433,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n                     self.drop_ranges.add_control_edge(self.expr_index, *target)\n                 }),\n \n-            ExprKind::Break(destination, ..) => {\n+            ExprKind::Break(destination, value) => {\n                 // destination either points to an expression or to a block. We use\n                 // find_target_expression_from_destination to use the last expression of the block\n                 // if destination points to a block.\n@@ -443,7 +443,11 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n                 // will refer to the end of the block due to the post order traversal.\n                 self.find_target_expression_from_destination(destination).map_or((), |target| {\n                     self.drop_ranges.add_control_edge_hir_id(self.expr_index, target)\n-                })\n+                });\n+\n+                if let Some(value) = value {\n+                    self.visit_expr(value);\n+                }\n             }\n \n             ExprKind::Call(f, args) => {\n@@ -465,6 +469,12 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n \n             ExprKind::AddrOf(..)\n             | ExprKind::Array(..)\n+            // FIXME(eholk): We probably need special handling for AssignOps. The ScopeTree builder\n+            // in region.rs runs both lhs then rhs and rhs then lhs and then sets all yields to be\n+            // the latest they show up in either traversal. With the older scope-based\n+            // approximation, this was fine, but it's probably not right now. What we probably want\n+            // to do instead is still run both orders, but consider anything that showed up as a\n+            // yield in either order.\n             | ExprKind::AssignOp(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Block(..)\n@@ -502,6 +512,9 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n \n         // Increment expr_count here to match what InteriorVisitor expects.\n         self.expr_index = self.expr_index + 1;\n+\n+        // Save a node mapping to get better CFG visualization\n+        self.drop_ranges.add_node_mapping(pat.hir_id, self.expr_index);\n     }\n }\n \n@@ -521,7 +534,7 @@ impl DropRangesBuilder {\n                 }\n             });\n         }\n-        debug!(\"hir_id_map: {:?}\", tracked_value_map);\n+        debug!(\"hir_id_map: {:#?}\", tracked_value_map);\n         let num_values = tracked_value_map.len();\n         Self {\n             tracked_value_map,"}, {"sha": "e8d31be79d9c9fccff6d6722db6cadf044cbb7a8", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "patch": "@@ -2,6 +2,7 @@\n //! flow graph when needed for debugging.\n \n use rustc_graphviz as dot;\n+use rustc_hir::{Expr, ExprKind, Node};\n use rustc_middle::ty::TyCtxt;\n \n use super::{DropRangesBuilder, PostOrderId};\n@@ -80,10 +81,14 @@ impl<'a> dot::Labeller<'a> for DropRangesGraph<'_, '_> {\n                     .post_order_map\n                     .iter()\n                     .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n-                    .map_or(\"<unknown>\".into(), |(hir_id, _)| self\n-                        .tcx\n-                        .hir()\n-                        .node_to_string(*hir_id))\n+                    .map_or(\"<unknown>\".into(), |(hir_id, _)| format!(\n+                        \"{}{}\",\n+                        self.tcx.hir().node_to_string(*hir_id),\n+                        match self.tcx.hir().find(*hir_id) {\n+                            Some(Node::Expr(Expr { kind: ExprKind::Yield(..), .. })) => \" (yield)\",\n+                            _ => \"\",\n+                        }\n+                    ))\n             )\n             .into(),\n         )"}, {"sha": "7af5260538568c0d873ad2767cdbb903e5a6517e", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "patch": "@@ -71,10 +71,8 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                 yield_data.expr_and_pat_count, self.expr_count, source_span\n                             );\n \n-                            if self.fcx.sess().opts.unstable_opts.drop_tracking\n-                                && self\n-                                    .drop_ranges\n-                                    .is_dropped_at(hir_id, yield_data.expr_and_pat_count)\n+                            if self\n+                                .is_dropped_at_yield_location(hir_id, yield_data.expr_and_pat_count)\n                             {\n                                 debug!(\"value is dropped at yield point; not recording\");\n                                 return false;\n@@ -173,6 +171,18 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// If drop tracking is enabled, consult drop_ranges to see if a value is\n+    /// known to be dropped at a yield point and therefore can be omitted from\n+    /// the generator witness.\n+    fn is_dropped_at_yield_location(&self, value_hir_id: HirId, yield_location: usize) -> bool {\n+        // short-circuit if drop tracking is not enabled.\n+        if !self.fcx.sess().opts.unstable_opts.drop_tracking {\n+            return false;\n+        }\n+\n+        self.drop_ranges.is_dropped_at(value_hir_id, yield_location)\n+    }\n }\n \n pub fn resolve_interior<'a, 'tcx>("}, {"sha": "726c4284ec15e2d0f2c6133ef8d869a703d2129e", "filename": "tests/ui/async-await/await-sequence.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/tests%2Fui%2Fasync-await%2Fawait-sequence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe/tests%2Fui%2Fasync-await%2Fawait-sequence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fawait-sequence.rs?ref=3d79cbc3c1cf6fadeff32c30a8e20d456cd625fe", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+// compile-flags: -Z drop-tracking\n+// build-pass\n+\n+use std::collections::HashMap;\n+\n+fn main() {\n+    let _ = real_main();\n+}\n+\n+async fn nop() {}\n+\n+async fn real_main() {\n+    nop().await;\n+    nop().await;\n+    nop().await;\n+    nop().await;\n+\n+    let mut map: HashMap<(), ()> = HashMap::new();\n+    map.insert((), nop().await);\n+}"}]}