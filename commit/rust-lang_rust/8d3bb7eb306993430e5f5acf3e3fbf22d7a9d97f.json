{"sha": "8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkM2JiN2ViMzA2OTkzNDMwZTVmNWFjZjNlM2ZiZjIyZDdhOWQ5N2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-23T00:06:16Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-24T13:45:21Z"}, "message": "rustc: Remove some dead code from method resolution", "tree": {"sha": "212b19fdedc496021a74f73e8cd36b89fabdff4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212b19fdedc496021a74f73e8cd36b89fabdff4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f", "html_url": "https://github.com/rust-lang/rust/commit/8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbe8002d515b8f8730fc6502a767719854af3d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbe8002d515b8f8730fc6502a767719854af3d8", "html_url": "https://github.com/rust-lang/rust/commit/7fbe8002d515b8f8730fc6502a767719854af3d8"}], "stats": {"total": 20, "additions": 3, "deletions": 17}, "files": [{"sha": "8d546366846b406538c08ea98083e8993c681e8e", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=8d3bb7eb306993430e5f5acf3e3fbf22d7a9d97f", "patch": "@@ -194,7 +194,6 @@ impl<'self> LookupContext<'self> {\n         self.push_inherent_candidates(self_ty);\n         self.push_extension_candidates();\n \n-        let mut enum_dids = ~[];\n         let mut self_ty = self_ty;\n         let mut autoderefs = 0;\n         loop {\n@@ -236,7 +235,7 @@ impl<'self> LookupContext<'self> {\n             }\n \n             // Otherwise, perform autoderef.\n-            match self.deref(self_ty, &mut enum_dids) {\n+            match self.deref(self_ty) {\n                 None => { break; }\n                 Some(ty) => {\n                     self_ty = ty;\n@@ -248,20 +247,8 @@ impl<'self> LookupContext<'self> {\n         self.search_for_autosliced_method(self_ty, autoderefs)\n     }\n \n-    pub fn deref(&self, ty: ty::t, enum_dids: &mut ~[ast::def_id])\n+    pub fn deref(&self, ty: ty::t)\n                  -> Option<ty::t> {\n-        match ty::get(ty).sty {\n-            ty_enum(did, _) => {\n-                // Watch out for newtype'd enums like \"enum t = @T\".\n-                // See discussion in typeck::check::do_autoderef().\n-                if enum_dids.iter().any(|x| x == &did) {\n-                    return None;\n-                }\n-                enum_dids.push(did);\n-            }\n-            _ => {}\n-        }\n-\n         match ty::deref(self.tcx(), ty, false) {\n             None => None,\n             Some(t) => {\n@@ -285,7 +272,6 @@ impl<'self> LookupContext<'self> {\n          * we'll want to find the inherent impls for `C`.\n          */\n \n-        let mut enum_dids = ~[];\n         let mut self_ty = self_ty;\n         loop {\n             match get(self_ty).sty {\n@@ -314,7 +300,7 @@ impl<'self> LookupContext<'self> {\n             // n.b.: Generally speaking, we only loop if we hit the\n             // fallthrough case in the match above.  The exception\n             // would be newtype enums.\n-            self_ty = match self.deref(self_ty, &mut enum_dids) {\n+            self_ty = match self.deref(self_ty) {\n                 None => { return; }\n                 Some(ty) => { ty }\n             }"}]}