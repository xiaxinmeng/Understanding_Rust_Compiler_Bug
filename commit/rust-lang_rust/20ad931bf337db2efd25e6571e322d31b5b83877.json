{"sha": "20ad931bf337db2efd25e6571e322d31b5b83877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYWQ5MzFiZjMzN2RiMmVmZDI1ZTY1NzFlMzIyZDMxYjViODM4Nzc=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-29T06:02:43Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-29T06:03:48Z"}, "message": "Rename 'divisible_by' method to 'is_multiple_of', add tests for 'is_odd' and 'is_even'", "tree": {"sha": "4be175281d008a2aa63175a663630929ae5fbccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be175281d008a2aa63175a663630929ae5fbccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ad931bf337db2efd25e6571e322d31b5b83877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ad931bf337db2efd25e6571e322d31b5b83877", "html_url": "https://github.com/rust-lang/rust/commit/20ad931bf337db2efd25e6571e322d31b5b83877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ad931bf337db2efd25e6571e322d31b5b83877/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f63f9789b12a69723630ae072b6ba63203ed0f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f63f9789b12a69723630ae072b6ba63203ed0f6", "html_url": "https://github.com/rust-lang/rust/commit/8f63f9789b12a69723630ae072b6ba63203ed0f6"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "ec38a32c039d6d9d142913e34869783383229e46", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=20ad931bf337db2efd25e6571e322d31b5b83877", "patch": "@@ -406,11 +406,11 @@ impl Integer for T {\n \n     /// Returns `true` if the number can be divided by `other` without leaving a remainder\n     #[inline(always)]\n-    fn divisible_by(&self, other: &T) -> bool { *self % *other == 0 }\n+    fn is_multiple_of(&self, other: &T) -> bool { *self % *other == 0 }\n \n     /// Returns `true` if the number is divisible by `2`\n     #[inline(always)]\n-    fn is_even(&self) -> bool { self.divisible_by(&2) }\n+    fn is_even(&self) -> bool { self.is_multiple_of(&2) }\n \n     /// Returns `true` if the number is not divisible by `2`\n     #[inline(always)]\n@@ -682,6 +682,42 @@ mod tests {\n         assert_eq!(-(0b11 as T) - (1 as T), (0b11 as T).not());\n     }\n \n+    #[test]\n+    fn test_multiple_of() {\n+        assert!((6 as T).is_multiple_of(&(6 as T)));\n+        assert!((6 as T).is_multiple_of(&(3 as T)));\n+        assert!((6 as T).is_multiple_of(&(1 as T)));\n+        assert!((-8 as T).is_multiple_of(&(4 as T)));\n+        assert!((8 as T).is_multiple_of(&(-1 as T)));\n+        assert!((-8 as T).is_multiple_of(&(-2 as T)));\n+    }\n+\n+    #[test]\n+    fn test_even() {\n+        assert_eq!((-4 as T).is_even(), true);\n+        assert_eq!((-3 as T).is_even(), false);\n+        assert_eq!((-2 as T).is_even(), true);\n+        assert_eq!((-1 as T).is_even(), false);\n+        assert_eq!((0 as T).is_even(), true);\n+        assert_eq!((1 as T).is_even(), false);\n+        assert_eq!((2 as T).is_even(), true);\n+        assert_eq!((3 as T).is_even(), false);\n+        assert_eq!((4 as T).is_even(), true);\n+    }\n+\n+    #[test]\n+    fn test_odd() {\n+        assert_eq!((-4 as T).is_odd(), false);\n+        assert_eq!((-3 as T).is_odd(), true);\n+        assert_eq!((-2 as T).is_odd(), false);\n+        assert_eq!((-1 as T).is_odd(), true);\n+        assert_eq!((0 as T).is_odd(), false);\n+        assert_eq!((1 as T).is_odd(), true);\n+        assert_eq!((2 as T).is_odd(), false);\n+        assert_eq!((3 as T).is_odd(), true);\n+        assert_eq!((4 as T).is_odd(), false);\n+    }\n+\n     #[test]\n     fn test_bitcount() {\n         assert_eq!((0b010101 as T).population_count(), 3);"}, {"sha": "3e43ebfef12228152ba43c8a5eb09a24cabba120", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=20ad931bf337db2efd25e6571e322d31b5b83877", "patch": "@@ -85,7 +85,8 @@ pub trait Integer: Num\n \n     fn gcd(&self, other: &Self) -> Self;\n     fn lcm(&self, other: &Self) -> Self;\n-    fn divisible_by(&self, other: &Self) -> bool;\n+\n+    fn is_multiple_of(&self, other: &Self) -> bool;\n     fn is_even(&self) -> bool;\n     fn is_odd(&self) -> bool;\n }"}, {"sha": "3dfdd22c42dc1996a993865626a555fba5c52516", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=20ad931bf337db2efd25e6571e322d31b5b83877", "patch": "@@ -238,11 +238,11 @@ impl Integer for T {\n \n     /// Returns `true` if the number can be divided by `other` without leaving a remainder\n     #[inline(always)]\n-    fn divisible_by(&self, other: &T) -> bool { *self % *other == 0 }\n+    fn is_multiple_of(&self, other: &T) -> bool { *self % *other == 0 }\n \n     /// Returns `true` if the number is divisible by `2`\n     #[inline(always)]\n-    fn is_even(&self) -> bool { self.divisible_by(&2) }\n+    fn is_even(&self) -> bool { self.is_multiple_of(&2) }\n \n     /// Returns `true` if the number is not divisible by `2`\n     #[inline(always)]\n@@ -415,6 +415,31 @@ mod tests {\n         assert_eq!((99 as T).lcm(&17), 1683 as T);\n     }\n \n+    #[test]\n+    fn test_multiple_of() {\n+        assert!((6 as T).is_multiple_of(&(6 as T)));\n+        assert!((6 as T).is_multiple_of(&(3 as T)));\n+        assert!((6 as T).is_multiple_of(&(1 as T)));\n+    }\n+\n+    #[test]\n+    fn test_even() {\n+        assert_eq!((0 as T).is_even(), true);\n+        assert_eq!((1 as T).is_even(), false);\n+        assert_eq!((2 as T).is_even(), true);\n+        assert_eq!((3 as T).is_even(), false);\n+        assert_eq!((4 as T).is_even(), true);\n+    }\n+\n+    #[test]\n+    fn test_odd() {\n+        assert_eq!((0 as T).is_odd(), false);\n+        assert_eq!((1 as T).is_odd(), true);\n+        assert_eq!((2 as T).is_odd(), false);\n+        assert_eq!((3 as T).is_odd(), true);\n+        assert_eq!((4 as T).is_odd(), false);\n+    }\n+\n     #[test]\n     fn test_bitwise() {\n         assert_eq!(0b1110 as T, (0b1100 as T).bitor(&(0b1010 as T)));"}, {"sha": "e97b3b5eeec48af4426b36ae3f27e4a5da11a465", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ad931bf337db2efd25e6571e322d31b5b83877/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=20ad931bf337db2efd25e6571e322d31b5b83877", "patch": "@@ -428,7 +428,7 @@ impl Integer for BigUint {\n \n     /// Returns `true` if the number can be divided by `other` without leaving a remainder\n     #[inline(always)]\n-    fn divisible_by(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n+    fn is_multiple_of(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n \n     /// Returns `true` if the number is divisible by `2`\n     #[inline(always)]\n@@ -973,7 +973,7 @@ impl Integer for BigInt {\n \n     /// Returns `true` if the number can be divided by `other` without leaving a remainder\n     #[inline(always)]\n-    fn divisible_by(&self, other: &BigInt) -> bool { self.data.divisible_by(&other.data) }\n+    fn is_multiple_of(&self, other: &BigInt) -> bool { self.data.is_multiple_of(&other.data) }\n \n     /// Returns `true` if the number is divisible by `2`\n     #[inline(always)]"}]}