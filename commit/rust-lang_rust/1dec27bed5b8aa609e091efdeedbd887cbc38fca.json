{"sha": "1dec27bed5b8aa609e091efdeedbd887cbc38fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWMyN2JlZDViOGFhNjA5ZTA5MWVmZGVlZGJkODg3Y2JjMzhmY2E=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-08T12:14:52Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-16T20:27:38Z"}, "message": "debuginfo: Fixed option-like-enum test case so it does not rely on undefined behavior.", "tree": {"sha": "fd4c7a2090eb54b8bf5bef52326c1023655edcb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4c7a2090eb54b8bf5bef52326c1023655edcb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dec27bed5b8aa609e091efdeedbd887cbc38fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dec27bed5b8aa609e091efdeedbd887cbc38fca", "html_url": "https://github.com/rust-lang/rust/commit/1dec27bed5b8aa609e091efdeedbd887cbc38fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dec27bed5b8aa609e091efdeedbd887cbc38fca/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680eb71564ebba5e76ce1e1a8287b30042332cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/680eb71564ebba5e76ce1e1a8287b30042332cc5", "html_url": "https://github.com/rust-lang/rust/commit/680eb71564ebba5e76ce1e1a8287b30042332cc5"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "02fd294a0bd5e555c12c9b31a177ef4fc7826aba", "filename": "src/test/debug-info/option-like-enum.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1dec27bed5b8aa609e091efdeedbd887cbc38fca/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dec27bed5b8aa609e091efdeedbd887cbc38fca/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=1dec27bed5b8aa609e091efdeedbd887cbc38fca", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n-// xfail-test broken in newrt?\n \n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n@@ -25,31 +24,47 @@\n // debugger:print full\n // check:$3 = {454545, 0x87654321, 9988}\n \n-// debugger:print empty\n-// check:$4 = {0, 0x0, 0}\n+// debugger:print empty->discr\n+// check:$4 = (int *) 0x0\n \n // debugger:print droid\n // check:$5 = {id = 675675, range = 10000001, internals = 0x43218765}\n \n-// debugger:print void_droid\n-// check:$6 = {id = 0, range = 0, internals = 0x0}\n+// debugger:print void_droid->internals\n+// check:$6 = (int *) 0x0\n \n+// debugger:continue\n \n // If a struct has exactly two variants, one of them is empty, and the other one\n // contains a non-nullable pointer, then this value is used as the discriminator.\n // The test cases in this file make sure that something readable is generated for\n // this kind of types.\n+// Unfortunately (for these test cases) the content of the non-discriminant fields\n+// in the null-case is not defined. So we just read the discriminator field in\n+// this case (by casting the value to a memory-equivalent struct).\n \n enum MoreFields<'self> {\n     Full(u32, &'self int, i16),\n     Empty\n }\n \n+struct MoreFieldsRepr<'self> {\n+    a: u32,\n+    discr: &'self int,\n+    b: i16\n+}\n+\n enum NamedFields<'self> {\n     Droid { id: i32, range: i64, internals: &'self int },\n     Void\n }\n \n+struct NamedFieldsRepr<'self> {\n+    id: i32,\n+    range: i64,\n+    internals: &'self int\n+}\n+\n fn main() {\n \n     let some: Option<&u32> = Some(unsafe { std::cast::transmute(0x12345678) });\n@@ -58,15 +73,17 @@ fn main() {\n     let full = Full(454545, unsafe { std::cast::transmute(0x87654321) }, 9988);\n \n     let int_val = 0;\n-    let mut empty = Full(0, &int_val, 0);\n-    empty = Empty;\n+    let empty: &MoreFieldsRepr = unsafe { std::cast::transmute(&Empty) };\n \n-    let droid = Droid { id: 675675, range: 10000001, internals: unsafe { std::cast::transmute(0x43218765) } };\n+    let droid = Droid {\n+        id: 675675,\n+        range: 10000001,\n+        internals: unsafe { std::cast::transmute(0x43218765) }\n+    };\n \n-    let mut void_droid = Droid { id: 0, range: 0, internals: &int_val };\n-    void_droid = Void;\n+    let void_droid: &NamedFieldsRepr = unsafe { std::cast::transmute(&Void) };\n \n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}]}