{"sha": "b356a04c9a158f4f16301afa4300f2c18a8d99d6", "node_id": "C_kwDOAAsO6NoAKGIzNTZhMDRjOWExNThmNGYxNjMwMWFmYTQzMDBmMmMxOGE4ZDk5ZDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-18T06:13:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-18T06:13:26Z"}, "message": "Rollup merge of #89965 - JohnTitor:fix-let-else-ice-with-ref-mut, r=petrochenkov\n\nFix ICE with `let...else` and `ref mut`\n\nFixes #89960, opened for review.\nI'm not satisfied with the current diagnostics, any ideas?", "tree": {"sha": "7ae852f2b91052f28bd48df6b0ea4607a28f62c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ae852f2b91052f28bd48df6b0ea4607a28f62c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b356a04c9a158f4f16301afa4300f2c18a8d99d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbRCGCRBK7hj4Ov3rIwAAbuAIAJ0SSWjWzZtUh1s7UbKpWdNL\nwSfWDYOWuzSCQjKVBzgsa9fAIt3DWCsNNZ5xsGqOcwmkfoD1R8GnIrSnIjDruWEh\n8WUNAHVwFfcmN9ZzUCZji4GGIxjcdL8MsDoOK6IkggJ9bVhUOBMEh//b6YI56hd7\nBC+/Fncs53ftsVVuvzRrrL84pqs+j1YSDM9yrd73yuGfk/aM/IuLb1q52ny3lBdW\nDmAo0dxBJS4UmMwgDarQg3+md/zGnMO20ZrOJEGCsOVQCrvDnX2QiSDiTqEsVOJ7\nhyLRSlHkRDtc9M2e5xvuAt2PKkefr8MhVomJbiR1YgwHRyj/lXV9ULqNN4yXigs=\n=T2B1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ae852f2b91052f28bd48df6b0ea4607a28f62c4\nparent b902aa98e580c43ea5b2bb7b15d56ecc02c17856\nparent bf7c32a4477a76bfd18fdcd8f45a939cbed82d34\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634537606 +0200\ncommitter GitHub <noreply@github.com> 1634537606 +0200\n\nRollup merge of #89965 - JohnTitor:fix-let-else-ice-with-ref-mut, r=petrochenkov\n\nFix ICE with `let...else` and `ref mut`\n\nFixes #89960, opened for review.\nI'm not satisfied with the current diagnostics, any ideas?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b356a04c9a158f4f16301afa4300f2c18a8d99d6", "html_url": "https://github.com/rust-lang/rust/commit/b356a04c9a158f4f16301afa4300f2c18a8d99d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b356a04c9a158f4f16301afa4300f2c18a8d99d6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b902aa98e580c43ea5b2bb7b15d56ecc02c17856", "url": "https://api.github.com/repos/rust-lang/rust/commits/b902aa98e580c43ea5b2bb7b15d56ecc02c17856", "html_url": "https://github.com/rust-lang/rust/commit/b902aa98e580c43ea5b2bb7b15d56ecc02c17856"}, {"sha": "bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "html_url": "https://github.com/rust-lang/rust/commit/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "d5ff4c6766f0fd2c9ee48ccf3c60515c83107872", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b356a04c9a158f4f16301afa4300f2c18a8d99d6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b356a04c9a158f4f16301afa4300f2c18a8d99d6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=b356a04c9a158f4f16301afa4300f2c18a8d99d6", "patch": "@@ -45,12 +45,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let item_msg;\n         let reason;\n         let mut opt_source = None;\n-        let access_place_desc = self.describe_place(access_place.as_ref());\n+        let access_place_desc = self.describe_any_place(access_place.as_ref());\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n             PlaceRef { local, projection: [] } => {\n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                item_msg = access_place_desc;\n                 if access_place.as_local().is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     // If we deref an immutable ref then the suggestion here doesn't help.\n                     return;\n                 } else {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                         reason = \", as it is not declared as mutable\".to_string();\n                     } else {\n@@ -96,17 +96,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_for_guard() =>\n             {\n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                item_msg = access_place_desc;\n                 reason = \", as it is immutable for the pattern guard\".to_string();\n             }\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_to_static() =>\n             {\n                 if access_place.projection.len() == 1 {\n-                    item_msg = format!(\"immutable static item `{}`\", access_place_desc.unwrap());\n+                    item_msg = format!(\"immutable static item {}\", access_place_desc);\n                     reason = String::new();\n                 } else {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     let local_info = &self.body.local_decls[local].local_info;\n                     if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n                         let static_name = &self.infcx.tcx.item_name(def_id);\n@@ -121,7 +121,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     && proj_base.is_empty()\n                     && !self.upvars.is_empty()\n                 {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     debug_assert!(\n                         self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_region_ptr()\n                     );\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     });\n                     let pointer_type = source.describe_for_immutable_place(self.infcx.tcx);\n                     opt_source = Some(source);\n-                    if let Some(desc) = access_place_desc {\n+                    if let Some(desc) = self.describe_place(access_place.as_ref()) {\n                         item_msg = format!(\"`{}`\", desc);\n                         reason = match error_access {\n                             AccessKind::Mutate => format!(\", which is behind {}\", pointer_type),"}, {"sha": "8fd55adbfd428d9c67d244267b71b924a0ff87ae", "filename": "src/test/ui/let-else/issue-89960.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b356a04c9a158f4f16301afa4300f2c18a8d99d6/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b356a04c9a158f4f16301afa4300f2c18a8d99d6/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs?ref=b356a04c9a158f4f16301afa4300f2c18a8d99d6", "patch": "@@ -0,0 +1,7 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    // FIXME: more precise diagnostics\n+    let Some(ref mut meow) = Some(()) else { return };\n+    //~^ ERROR: cannot borrow value as mutable, as `val` is not declared as mutable\n+}"}, {"sha": "697f04d6d2735c1b38409781dba25862251a72e4", "filename": "src/test/ui/let-else/issue-89960.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b356a04c9a158f4f16301afa4300f2c18a8d99d6/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b356a04c9a158f4f16301afa4300f2c18a8d99d6/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr?ref=b356a04c9a158f4f16301afa4300f2c18a8d99d6", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow value as mutable, as `val` is not declared as mutable\n+  --> $DIR/issue-89960.rs:5:14\n+   |\n+LL |     let Some(ref mut meow) = Some(()) else { return };\n+   |     ---------^^^^^^^^^^^^-----------------------------\n+   |     |        |\n+   |     |        cannot borrow as mutable\n+   |     help: consider changing this to be mutable: `mut val`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}