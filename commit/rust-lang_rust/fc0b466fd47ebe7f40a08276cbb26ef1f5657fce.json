{"sha": "fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMGI0NjZmZDQ3ZWJlN2Y0MGEwODI3NmNiYjI2ZWYxZjU2NTdmY2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:17:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` `all_loans` in the borrow checker", "tree": {"sha": "195cff1548d2b37c06ea7d3e0434de3bf91e9349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195cff1548d2b37c06ea7d3e0434de3bf91e9349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "html_url": "https://github.com/rust-lang/rust/commit/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0afae85bc2889226fa4bb2f2a7e58947a58327dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0afae85bc2889226fa4bb2f2a7e58947a58327dd", "html_url": "https://github.com/rust-lang/rust/commit/0afae85bc2889226fa4bb2f2a7e58947a58327dd"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "36e35760400d018c6470e83f6c9591aa825e7a81", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "patch": "@@ -26,6 +26,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::{Repr};\n \n+use std::cell::RefCell;\n use syntax::ast;\n use syntax::ast_util::id_range;\n use syntax::codemap::Span;\n@@ -68,7 +69,7 @@ struct GatherLoanCtxt<'a> {\n     bccx: &'a BorrowckCtxt,\n     id_range: id_range,\n     move_data: @move_data::MoveData,\n-    all_loans: @mut ~[Loan],\n+    all_loans: @RefCell<~[Loan]>,\n     item_ub: ast::NodeId,\n     repeating_ids: ~[ast::NodeId]\n }\n@@ -103,11 +104,11 @@ impl<'a> visit::Visitor<()> for GatherLoanCtxt<'a> {\n pub fn gather_loans(bccx: &BorrowckCtxt,\n                     decl: &ast::fn_decl,\n                     body: ast::P<ast::Block>)\n-                    -> (id_range, @mut ~[Loan], @move_data::MoveData) {\n+                    -> (id_range, @RefCell<~[Loan]>, @move_data::MoveData) {\n     let mut glcx = GatherLoanCtxt {\n         bccx: bccx,\n         id_range: id_range::max(),\n-        all_loans: @mut ~[],\n+        all_loans: @RefCell::new(~[]),\n         item_ub: body.id,\n         repeating_ids: ~[body.id],\n         move_data: @MoveData::new()\n@@ -511,9 +512,9 @@ impl<'a> GatherLoanCtxt<'a> {\n                     self.mark_loan_path_as_mutated(loan_path);\n                 }\n \n-                let all_loans = &mut *self.all_loans; // FIXME(#5074)\n+                let all_loans = self.all_loans.borrow();\n                 Loan {\n-                    index: all_loans.len(),\n+                    index: all_loans.get().len(),\n                     loan_path: loan_path,\n                     cmt: cmt,\n                     mutbl: req_mutbl,\n@@ -531,7 +532,10 @@ impl<'a> GatherLoanCtxt<'a> {\n         // let loan_path = loan.loan_path;\n         // let loan_gen_scope = loan.gen_scope;\n         // let loan_kill_scope = loan.kill_scope;\n-        self.all_loans.push(loan);\n+        {\n+            let mut all_loans = self.all_loans.borrow_mut();\n+            all_loans.get().push(loan);\n+        }\n \n         // if loan_gen_scope != borrow_id {\n             // FIXME(#6268) Nested method calls"}, {"sha": "61e5d1f25fe7c3ccf3ef4836f0d1f9369f342294", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0b466fd47ebe7f40a08276cbb26ef1f5657fce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=fc0b466fd47ebe7f40a08276cbb26ef1f5657fce", "patch": "@@ -133,16 +133,18 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n             // Check the body of fn items.\n             let (id_range, all_loans, move_data) =\n                 gather_loans::gather_loans(this, decl, body);\n-            let mut loan_dfcx =\n-                DataFlowContext::new(this.tcx,\n-                                     this.method_map,\n-                                     LoanDataFlowOperator,\n-                                     id_range,\n-                                     all_loans.len());\n-            for (loan_idx, loan) in all_loans.iter().enumerate() {\n+\n+            let all_loans = all_loans.borrow();\n+            let mut loan_dfcx = DataFlowContext::new(this.tcx,\n+                                                     this.method_map,\n+                                                     LoanDataFlowOperator,\n+                                                     id_range,\n+                                                     all_loans.get().len());\n+            for (loan_idx, loan) in all_loans.get().iter().enumerate() {\n                 loan_dfcx.add_gen(loan.gen_scope, loan_idx);\n                 loan_dfcx.add_kill(loan.kill_scope, loan_idx);\n             }\n+\n             loan_dfcx.propagate(body);\n \n             let flowed_moves = move_data::FlowedMoveData::new(move_data,\n@@ -152,7 +154,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n                                                               body);\n \n             check_loans::check_loans(this, &loan_dfcx, flowed_moves,\n-                                     *all_loans, body);\n+                                     *all_loans.get(), body);\n         }\n     }\n "}]}