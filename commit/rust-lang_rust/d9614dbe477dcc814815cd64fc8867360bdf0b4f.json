{"sha": "d9614dbe477dcc814815cd64fc8867360bdf0b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NjE0ZGJlNDc3ZGNjODE0ODE1Y2Q2NGZjODg2NzM2MGJkZjBiNGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T05:23:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T05:23:03Z"}, "message": "Rollup merge of #73867 - poliorcetics:union-keyword, r=joshtriplett\n\nDocument the union keyword\n\nPartial fix of #34601.\n\nThis documents the `union` keyword by presenting three cases: simply using a union, matching on a union and referencing the fields of a union.\n\n@rustbot modify labels: T-doc,C-enhancement", "tree": {"sha": "98c36e83f1c772e992b97fd89957592265ee35f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98c36e83f1c772e992b97fd89957592265ee35f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9614dbe477dcc814815cd64fc8867360bdf0b4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDUE4CRBK7hj4Ov3rIwAAdHIIAAGoSH/gG82gcYdJhHftKvgl\nFxwY6MGZeU+E7WPOaiPeYf/12fe9Ww61rsDbqzNk+3zTYOV6JixenelR/5sdyO7O\nAElDKgkazJ8c3z/h85T2zw0PWNtTkthqlJzfRbBvBOF8ol8kdyfoTesx5n/eEw5I\napxPDgiCET0vdnRXcybmr96PO6ncaCVWyKZpG11Jt1T5UGCOzWgGcaH+nRGALgki\n059Cxv18m2jDka70GmgA10Jg/DpDZWcDFzvuJMujdrQ4b1BDdjhX6wi/kq6OgPNf\nA2z50joXVz3Ri9JhhXJcYtlJkBDaPrpBdbtFOCR0PZ0Ji1nb+lYVH51kTeKRxbA=\n=V/8C\n-----END PGP SIGNATURE-----\n", "payload": "tree 98c36e83f1c772e992b97fd89957592265ee35f4\nparent eb7fdb2e075e703af33da0b9b48335a39e3f9097\nparent 614f7738ba65ac37f2dc61afa8c68fc3768fdffc\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594704183 -0700\ncommitter GitHub <noreply@github.com> 1594704183 -0700\n\nRollup merge of #73867 - poliorcetics:union-keyword, r=joshtriplett\n\nDocument the union keyword\n\nPartial fix of #34601.\n\nThis documents the `union` keyword by presenting three cases: simply using a union, matching on a union and referencing the fields of a union.\n\n@rustbot modify labels: T-doc,C-enhancement\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9614dbe477dcc814815cd64fc8867360bdf0b4f", "html_url": "https://github.com/rust-lang/rust/commit/d9614dbe477dcc814815cd64fc8867360bdf0b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9614dbe477dcc814815cd64fc8867360bdf0b4f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb7fdb2e075e703af33da0b9b48335a39e3f9097", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7fdb2e075e703af33da0b9b48335a39e3f9097", "html_url": "https://github.com/rust-lang/rust/commit/eb7fdb2e075e703af33da0b9b48335a39e3f9097"}, {"sha": "614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "html_url": "https://github.com/rust-lang/rust/commit/614f7738ba65ac37f2dc61afa8c68fc3768fdffc"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "a53e7f5cf57aa15c2af6912db92921b7ceb91a5c", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d9614dbe477dcc814815cd64fc8867360bdf0b4f/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9614dbe477dcc814815cd64fc8867360bdf0b4f/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=d9614dbe477dcc814815cd64fc8867360bdf0b4f", "patch": "@@ -1732,8 +1732,72 @@ mod dyn_keyword {}\n //\n /// The [Rust equivalent of a C-style union][union].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// A `union` looks like a [`struct`] in terms of declaration, but all of its\n+/// fields exist in the same memory, superimposed over one another. For instance,\n+/// if we wanted some bits in memory that we sometimes interpret as a `u32` and\n+/// sometimes as an `f32`, we could write:\n+///\n+/// ```rust\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n+///\n+/// let mut u = IntOrFloat { f: 1.0 };\n+/// // Reading the fields of an union is always unsafe\n+/// assert_eq!(unsafe { u.i }, 1065353216);\n+/// // Updating through any of the field will modify all of them\n+/// u.i = 1073741824;\n+/// assert_eq!(unsafe { u.f }, 2.0);\n+/// ```\n+///\n+/// # Matching on unions\n+///\n+/// It is possible to use pattern matching on `union`s. A single field name must\n+/// be used and it must match the name of one of the `union`'s field.\n+/// Like reading from a `union`, pattern matching on a `union` requires `unsafe`.\n+///\n+/// ```rust\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n+///\n+/// let u = IntOrFloat { f: 1.0 };\n+///\n+/// unsafe {\n+///     match u {\n+///         IntOrFloat { i: 10 } => println!(\"Found exactly ten!\"),\n+///         // Matching the field `f` provides an `f32`.\n+///         IntOrFloat { f } => println!(\"Found f = {} !\", f),\n+///     }\n+/// }\n+/// ```\n+///\n+/// # References to union fields\n+///\n+/// All fields in a `union` are all at the same place in memory which means\n+/// borrowing one borrows the entire `union`, for the same lifetime:\n+///\n+/// ```rust,compile_fail,E0502\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n ///\n+/// let mut u = IntOrFloat { f: 1.0 };\n+///\n+/// let f = unsafe { &u.f };\n+/// // This will not compile because the field has already been borrowed, even\n+/// // if only immutably\n+/// let i = unsafe { &mut u.i };\n+///\n+/// *i = 10;\n+/// println!(\"f = {} and i = {}\", f, i);\n+/// ```\n+///\n+/// See the [Reference][union] for more informations on `union`s.\n+///\n+/// [`struct`]: keyword.struct.html\n /// [union]: ../reference/items/unions.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod union_keyword {}"}]}