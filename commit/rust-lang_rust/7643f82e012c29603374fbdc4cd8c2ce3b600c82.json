{"sha": "7643f82e012c29603374fbdc4cd8c2ce3b600c82", "node_id": "C_kwDOAAsO6NoAKDc2NDNmODJlMDEyYzI5NjAzMzc0ZmJkYzRjZDhjMmNlM2I2MDBjODI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-19T12:49:12Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-19T12:56:31Z"}, "message": "Small refactoring", "tree": {"sha": "dc3ef580a670d50513c5dfd110a6f668ff795d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc3ef580a670d50513c5dfd110a6f668ff795d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7643f82e012c29603374fbdc4cd8c2ce3b600c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7643f82e012c29603374fbdc4cd8c2ce3b600c82", "html_url": "https://github.com/rust-lang/rust/commit/7643f82e012c29603374fbdc4cd8c2ce3b600c82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7643f82e012c29603374fbdc4cd8c2ce3b600c82/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c6fe5798c70d532742cfda6c21d61daee257a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c6fe5798c70d532742cfda6c21d61daee257a4", "html_url": "https://github.com/rust-lang/rust/commit/18c6fe5798c70d532742cfda6c21d61daee257a4"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "da9d8b5fb334a6c1c6de81567b4daeb48e0e250a", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7643f82e012c29603374fbdc4cd8c2ce3b600c82/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7643f82e012c29603374fbdc4cd8c2ce3b600c82/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=7643f82e012c29603374fbdc4cd8c2ce3b600c82", "patch": "@@ -90,11 +90,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     /// Combine the provided files, rlibs, and native libraries into a single\n     /// `Archive`.\n     fn build(mut self) -> bool {\n-        let kind = self.llvm_archive_kind().unwrap_or_else(|kind| {\n-            self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n-        });\n-\n-        match self.build_with_llvm(kind) {\n+        match self.build_with_llvm() {\n             Ok(any_members) => any_members,\n             Err(e) => self.sess.fatal(&format!(\"failed to build archive: {}\", e)),\n         }\n@@ -249,12 +245,12 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n }\n \n impl<'a> LlvmArchiveBuilder<'a> {\n-    fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> {\n+    fn build_with_llvm(&mut self) -> io::Result<bool> {\n         let kind = &*self.sess.target.archive_format;\n-        kind.parse().map_err(|_| kind)\n-    }\n+        let kind = kind.parse::<ArchiveKind>().map_err(|_| kind).unwrap_or_else(|kind| {\n+            self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n+        });\n \n-    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<bool> {\n         let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();\n         let mut members = Vec::new();"}]}