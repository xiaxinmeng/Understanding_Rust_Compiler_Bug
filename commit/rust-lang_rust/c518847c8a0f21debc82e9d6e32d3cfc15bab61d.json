{"sha": "c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTg4NDdjOGEwZjIxZGViYzgyZTlkNmUzMmQzY2ZjMTViYWI2MWQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-31T07:19:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-31T07:19:25Z"}, "message": "Merge remote-tracking branch 'origin/master'", "tree": {"sha": "d35bb7d2251565389b1a2e3c291ea425e238e954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d35bb7d2251565389b1a2e3c291ea425e238e954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll+2gMACgkQpp+NIls6\n19lYgRAAh19jjM65zDjdrkyhYzhYr9bKJQBjWsvJsPxEo3yCPD94Rzkq7NkCZytn\naNP38Do0QGfgYNGgkTMQRs4ChpiZy/VrrLjP8PmFk04OdtenHH56S47QMybca7/X\nRQ9fnem/wwXY1mV0Z5knTrrgC3O/+MiWignud8Q1ghSthx+m71l8azvW7JIPsxPm\nvG2pgEd7DI/mx9flDr/2pKRz8xLJnE0bDhlBKdSWuvBdMxReU5YmULu+FK+f/ETP\nGPcn0kzf5rZkw45w9ppnVNj49atZiYwJ9bSYdceZ0yoMkz4aq6gaHQkt4ciyhEtf\nfxw8RNO8Iu9HZBhJW9l22EXwwEXa8AHluZ6RrnMrb+pJ9Q94E6k/sx2Y80ZPYXCk\n3gUOzFO4lq3SZwTqwPKwsXzWUvxvF5ljzvarei5egSD8b2FDtdFReUZZe59R2glJ\nsnsmQyRV/4iVyZQq4XXM634FsHLivglEfCY7lbu+j76Vso6CeL9qXWTbq9TQEXJb\nYLAWzyhsq4+fbEVg/tnIoZfrAoKTBxK12kYF68K7JuOd6TxDSf4Mm9HkcK5mxTzE\nTTjeD1c5bS4DfNqpkINWK32mY0ypdNDE7X8oMl6aUBmMLHqlNlrYA7C3cs5Q0Y40\n6u3vPLtnfs9mBw1l2XvZ0QK9OvvJU3GmUW29Sn2BXklBSBOx8uo=\n=8C48\n-----END PGP SIGNATURE-----", "payload": "tree d35bb7d2251565389b1a2e3c291ea425e238e954\nparent 398c688afa554c5339f9821e72f3deb7683cc0a6\nparent 9c731e8237ccb229b3144cd845c1ccdb9b814d07\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1501485565 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1501485565 +0200\n\nMerge remote-tracking branch 'origin/master'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "html_url": "https://github.com/rust-lang/rust/commit/c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "398c688afa554c5339f9821e72f3deb7683cc0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/398c688afa554c5339f9821e72f3deb7683cc0a6", "html_url": "https://github.com/rust-lang/rust/commit/398c688afa554c5339f9821e72f3deb7683cc0a6"}, {"sha": "9c731e8237ccb229b3144cd845c1ccdb9b814d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c731e8237ccb229b3144cd845c1ccdb9b814d07", "html_url": "https://github.com/rust-lang/rust/commit/9c731e8237ccb229b3144cd845c1ccdb9b814d07"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "e4fa4608f0e8aa1ce8ef42638fd8ba52a873b748", "filename": ".travis.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "patch": "@@ -34,6 +34,10 @@ script:\n  - cp clippy_tests/target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n  - PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy\n  - cd clippy_lints && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n+ - cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n+ - cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n+ - cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n+ - cd clippy_workspace_tests/subcrate/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../../..\n  - set +e\n \n after_success: |"}, {"sha": "a282378c951c6f008ce19ab304936c4989ca7586", "filename": "clippy_workspace_tests/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2FCargo.toml?ref=c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"clippy_workspace_tests\"\n+version = \"0.1.0\"\n+\n+[workspace]\n+members = [\"subcrate\"]"}, {"sha": "f79c691f0853c5b08e114041f7c8db43b0452fe0", "filename": "clippy_workspace_tests/src/main.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsrc%2Fmain.rs?ref=c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "patch": "@@ -0,0 +1,2 @@\n+fn main() {\n+}"}, {"sha": "83ea5868160bbaeae2cd25b3a37a4e0b4ba38b2c", "filename": "clippy_workspace_tests/subcrate/Cargo.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsubcrate%2FCargo.toml?ref=c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "patch": "@@ -0,0 +1,3 @@\n+[package]\n+name = \"subcrate\"\n+version = \"0.1.0\""}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "clippy_workspace_tests/subcrate/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2Fsubcrate%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/clippy_workspace_tests%2Fsubcrate%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsubcrate%2Fsrc%2Flib.rs?ref=c518847c8a0f21debc82e9d6e32d3cfc15bab61d"}, {"sha": "a48e91aa342a0e1fa9c9ff4535dafc46fe4afc49", "filename": "src/main.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c518847c8a0f21debc82e9d6e32d3cfc15bab61d/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=c518847c8a0f21debc82e9d6e32d3cfc15bab61d", "patch": "@@ -15,6 +15,7 @@ extern crate syntax;\n use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n use rustc::session::{config, Session, CompileIncomplete};\n use rustc::session::config::{Input, ErrorOutputType};\n+use std::collections::HashMap;\n use std::path::PathBuf;\n use std::process::{self, Command};\n use syntax::ast;\n@@ -158,12 +159,6 @@ fn show_version() {\n     println!(\"{}\", env!(\"CARGO_PKG_VERSION\"));\n }\n \n-// FIXME: false positive for needless_lifetimes\n-#[allow(needless_lifetimes)]\n-fn has_prefix<'a, T: PartialEq, I: Iterator<Item = &'a T>>(v: &'a [T], itr: I) -> bool {\n-    v.iter().zip(itr).all(|(a, b)| a == b)\n-}\n-\n pub fn main() {\n     use std::env;\n \n@@ -199,43 +194,47 @@ pub fn main() {\n         let manifest_path = manifest_path_arg.map(|arg| PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..])));\n \n         let package_index = {\n-                let mut iterator = metadata.packages.iter();\n-\n                 if let Some(ref manifest_path) = manifest_path {\n-                    iterator.position(|package| {\n+                    metadata.packages.iter().position(|package| {\n                         let package_manifest_path = Path::new(&package.manifest_path);\n                         package_manifest_path == manifest_path\n                     })\n                 } else {\n+                    let package_manifest_paths: HashMap<_, _> =\n+                        metadata.packages.iter()\n+                        .enumerate()\n+                        .map(|(i, package)| {\n+                            let package_manifest_path = Path::new(&package.manifest_path)\n+                                .parent()\n+                                .expect(\"could not find parent directory of package manifest\")\n+                                .canonicalize()\n+                                .expect(\"package directory cannot be canonicalized\");\n+                            (package_manifest_path, i)\n+                        })\n+                        .collect();\n+\n                     let current_dir = std::env::current_dir()\n                         .expect(\"could not read current directory\")\n                         .canonicalize()\n                         .expect(\"current directory cannot be canonicalized\");\n-                    let current_dir_components = current_dir.components().collect::<Vec<_>>();\n+\n+                    let mut current_path: &Path = &current_dir;\n \n                     // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n                     // reach).\n-                    iterator\n-                        .enumerate()\n-                        .filter_map(|(i, package)| {\n-                            let package_manifest_path = Path::new(&package.manifest_path);\n-                            let canonical_path = package_manifest_path\n+                    loop {\n+                        if let Some(&package_index) = package_manifest_paths.get(current_path) {\n+                            break Some(package_index);\n+                        }\n+                        else {\n+                            // We'll never reach the filesystem root, because to get to this point in the code\n+                            // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n+                            // unwrap the current path's parent.\n+                            current_path = current_path\n                                 .parent()\n-                                .expect(\"could not find parent directory of package manifest\")\n-                                .canonicalize()\n-                                .expect(\"package directory cannot be canonicalized\");\n-\n-                            // TODO: We can do this in `O(1)` by combining the `len` and the\n-                            //       iteration.\n-                            let components = canonical_path.components().collect::<Vec<_>>();\n-                            if has_prefix(&current_dir_components, components.iter()) {\n-                                Some((i, components.len()))\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .max_by_key(|&(_, length)| length)\n-                        .map(|(i, _)| i)\n+                                .unwrap_or_else(|| panic!(\"could not find parent of path {}\", current_path.display()));\n+                        }\n+                    }\n                 }\n             }\n             .expect(\"could not find matching package\");"}]}