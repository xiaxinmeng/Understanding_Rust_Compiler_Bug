{"sha": "fba9f33c7c9b6b439aabba2625102c818e1b24ed", "node_id": "C_kwDOAAsO6NoAKGZiYTlmMzNjN2M5YjZiNDM5YWFiYmEyNjI1MTAyYzgxOGUxYjI0ZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T11:14:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T11:14:21Z"}, "message": "Auto merge of #107463 - Dylan-DPC:rollup-6mq1li8, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101569 (Don't re-export private/unstable ArgumentV1 from `alloc`.)\n - #106106 (Pass `branch.{branch}.remote=origin` to `git submodule update`)\n - #107146 (Make `unsizing_params_for_adt` into a query)\n - #107264 (Add option to include private items in library docs)\n - #107452 (Fix typo in `{Rc, Arc}::get_mut_unchecked` docs)\n - #107459 (end entry paragraph with a period (.))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c83f5e9157a65011a3b44a4d708d2cac9e037090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83f5e9157a65011a3b44a4d708d2cac9e037090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba9f33c7c9b6b439aabba2625102c818e1b24ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba9f33c7c9b6b439aabba2625102c818e1b24ed", "html_url": "https://github.com/rust-lang/rust/commit/fba9f33c7c9b6b439aabba2625102c818e1b24ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba9f33c7c9b6b439aabba2625102c818e1b24ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f25e56496a07d1848f7c4d0d98f91ec05e0be86", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f25e56496a07d1848f7c4d0d98f91ec05e0be86", "html_url": "https://github.com/rust-lang/rust/commit/3f25e56496a07d1848f7c4d0d98f91ec05e0be86"}, {"sha": "da56c44ba2f33580d6eda6254ae517b5fe71f5e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/da56c44ba2f33580d6eda6254ae517b5fe71f5e9", "html_url": "https://github.com/rust-lang/rust/commit/da56c44ba2f33580d6eda6254ae517b5fe71f5e9"}], "stats": {"total": 173, "additions": 115, "deletions": 58}, "files": [{"sha": "4cebe416354a928fd423f0cd4c56f68af5d3c253", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -183,6 +183,15 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query unsizing_params_for_adt(key: DefId) -> rustc_index::bit_set::BitSet<u32>\n+    {\n+        arena_cache\n+        desc { |tcx|\n+            \"determining what parameters of `{}` can participate in unsizing\",\n+            tcx.def_path_str(key),\n+        }\n+    }\n+\n     query analysis(key: ()) -> Result<(), ErrorGuaranteed> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }"}, {"sha": "89a8fdbac1cbc7794ae63b2d01c47a6da3da3d95", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 10, "deletions": 44, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -8,12 +8,11 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::{\n-    self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n-    ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeVisitable,\n+    self, Binder, GenericParamDefKind, InternalSubsts, SubstsRef, ToPolyTraitRef, ToPredicate,\n+    TraitRef, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;\n@@ -1064,51 +1063,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // `Struct<T>` -> `Struct<U>`\n             (&ty::Adt(def, substs_a), &ty::Adt(_, substs_b)) => {\n-                let maybe_unsizing_param_idx = |arg: GenericArg<'tcx>| match arg.unpack() {\n-                    GenericArgKind::Type(ty) => match ty.kind() {\n-                        ty::Param(p) => Some(p.index),\n-                        _ => None,\n-                    },\n-\n-                    // Lifetimes aren't allowed to change during unsizing.\n-                    GenericArgKind::Lifetime(_) => None,\n-\n-                    GenericArgKind::Const(ct) => match ct.kind() {\n-                        ty::ConstKind::Param(p) => Some(p.index),\n-                        _ => None,\n-                    },\n-                };\n-\n-                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-                // by putting it in a query; it would only need the `DefId` as it\n-                // looks at declared field types, not anything substituted.\n-\n-                // The last field of the structure has to exist and contain type/const parameters.\n-                let (tail_field, prefix_fields) =\n-                    def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n-                let tail_field_ty = tcx.bound_type_of(tail_field.did);\n-\n-                let mut unsizing_params = GrowableBitSet::new_empty();\n-                for arg in tail_field_ty.0.walk() {\n-                    if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                        unsizing_params.insert(i);\n-                    }\n-                }\n-\n-                // Ensure none of the other fields mention the parameters used\n-                // in unsizing.\n-                for field in prefix_fields {\n-                    for arg in tcx.type_of(field.did).walk() {\n-                        if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            unsizing_params.remove(i);\n-                        }\n-                    }\n-                }\n-\n+                let unsizing_params = tcx.unsizing_params_for_adt(def.did());\n                 if unsizing_params.is_empty() {\n                     return Err(Unimplemented);\n                 }\n \n+                let tail_field = def\n+                    .non_enum_variant()\n+                    .fields\n+                    .last()\n+                    .expect(\"expected unsized ADT to have a tail field\");\n+                let tail_field_ty = tcx.bound_type_of(tail_field.did);\n+\n                 // Extract `TailField<T>` and `TailField<U>` from `Struct<T>` and `Struct<U>`,\n                 // normalizing in the process, since `type_of` returns something directly from\n                 // astconv (which means it's un-normalized)."}, {"sha": "b5005c1d8d804920e78efa6a9027fa8c704709ec", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n+use rustc_index::bit_set::BitSet;\n use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -406,6 +407,56 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     node.fn_sig().map_or(hir::IsAsync::NotAsync, |sig| sig.header.asyncness)\n }\n \n+fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32> {\n+    let def = tcx.adt_def(def_id);\n+    let num_params = tcx.generics_of(def_id).count();\n+\n+    let maybe_unsizing_param_idx = |arg: ty::GenericArg<'tcx>| match arg.unpack() {\n+        ty::GenericArgKind::Type(ty) => match ty.kind() {\n+            ty::Param(p) => Some(p.index),\n+            _ => None,\n+        },\n+\n+        // We can't unsize a lifetime\n+        ty::GenericArgKind::Lifetime(_) => None,\n+\n+        ty::GenericArgKind::Const(ct) => match ct.kind() {\n+            ty::ConstKind::Param(p) => Some(p.index),\n+            _ => None,\n+        },\n+    };\n+\n+    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+    // by putting it in a query; it would only need the `DefId` as it\n+    // looks at declared field types, not anything substituted.\n+\n+    // The last field of the structure has to exist and contain type/const parameters.\n+    let Some((tail_field, prefix_fields)) =\n+        def.non_enum_variant().fields.split_last() else\n+    {\n+        return BitSet::new_empty(num_params);\n+    };\n+\n+    let mut unsizing_params = BitSet::new_empty(num_params);\n+    for arg in tcx.bound_type_of(tail_field.did).subst_identity().walk() {\n+        if let Some(i) = maybe_unsizing_param_idx(arg) {\n+            unsizing_params.insert(i);\n+        }\n+    }\n+\n+    // Ensure none of the other fields mention the parameters used\n+    // in unsizing.\n+    for field in prefix_fields {\n+        for arg in tcx.bound_type_of(field.did).subst_identity().walk() {\n+            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                unsizing_params.remove(i);\n+            }\n+        }\n+    }\n+\n+    unsizing_params\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n@@ -415,6 +466,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n+        unsizing_params_for_adt,\n         ..*providers\n     };\n }"}, {"sha": "85f058f3664e3e5d388643fb86e70feeca400f83", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -233,6 +233,9 @@ changelog-seen = 2\n # and generated in already-minified form from the beginning.\n #docs-minification = true\n \n+# Flag to specify whether private items should be included in the library docs.\n+#library-docs-private-items = false\n+\n # Indicate whether the compiler should be documented in addition to the standard\n # library and facade crates.\n #compiler-docs = false"}, {"sha": "1da86e1a46a572149937f8fcd7de92c942da5cfe", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -558,7 +558,7 @@ pub use core::fmt::Alignment;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::Error;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{write, ArgumentV1, Arguments};\n+pub use core::fmt::{write, Arguments};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{Binary, Octal};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "fd1e3e0f75b09a68ca2531423d361878bf8cfcf6", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -1092,7 +1092,7 @@ impl<T: ?Sized> Rc<T> {\n     /// # Safety\n     ///\n     /// If any other `Rc` or [`Weak`] pointers to the same allocation exist, then\n-    /// they must be must not be dereferenced or have active borrows for the duration\n+    /// they must not be dereferenced or have active borrows for the duration\n     /// of the returned borrow, and their inner type must be exactly the same as the\n     /// inner type of this Rc (including lifetimes). This is trivially the case if no\n     /// such pointers exist, for example immediately after `Rc::new`."}, {"sha": "f20486ca9e4dbf792c4a44e996180d9156698a8d", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -1733,7 +1733,7 @@ impl<T: ?Sized> Arc<T> {\n     /// # Safety\n     ///\n     /// If any other `Arc` or [`Weak`] pointers to the same allocation exist, then\n-    /// they must be must not be dereferenced or have active borrows for the duration\n+    /// they must not be dereferenced or have active borrows for the duration\n     /// of the returned borrow, and their inner type must be exactly the same as the\n     /// inner type of this Rc (including lifetimes). This is trivially the case if no\n     /// such pointers exist, for example immediately after `Arc::new`."}, {"sha": "b59f28193e2bdc24fddce4bc4ff7b3ed060a6c9e", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -5,7 +5,7 @@ macro_rules! int_impl {\n      $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n      $bound_condition:expr) => {\n         /// The smallest value that can be represented by this integer type\n-        #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \")\")]\n+        #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \").\")]\n         ///\n         /// # Examples\n         ///\n@@ -18,7 +18,7 @@ macro_rules! int_impl {\n         pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n \n         /// The largest value that can be represented by this integer type\n-        #[doc = concat!(\"(2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1\", $bound_condition, \")\")]\n+        #[doc = concat!(\"(2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1\", $bound_condition, \").\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "165502b0a41d8214d8389a075bdfe07ea2d7b26f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -65,6 +65,7 @@ pub struct Config {\n     pub verbose: usize,\n     pub submodules: Option<bool>,\n     pub compiler_docs: bool,\n+    pub library_docs_private_items: bool,\n     pub docs_minification: bool,\n     pub docs: bool,\n     pub locked_deps: bool,\n@@ -606,6 +607,7 @@ define_config! {\n         rustfmt: Option<PathBuf> = \"rustfmt\",\n         docs: Option<bool> = \"docs\",\n         compiler_docs: Option<bool> = \"compiler-docs\",\n+        library_docs_private_items: Option<bool> = \"library-docs-private-items\",\n         docs_minification: Option<bool> = \"docs-minification\",\n         submodules: Option<bool> = \"submodules\",\n         gdb: Option<String> = \"gdb\",\n@@ -1018,6 +1020,7 @@ impl Config {\n         config.submodules = build.submodules;\n         set(&mut config.low_priority, build.low_priority);\n         set(&mut config.compiler_docs, build.compiler_docs);\n+        set(&mut config.library_docs_private_items, build.library_docs_private_items);\n         set(&mut config.docs_minification, build.docs_minification);\n         set(&mut config.docs, build.docs);\n         set(&mut config.locked_deps, build.locked_deps);"}, {"sha": "7f8aa2573ddb316b2549c65267792a4a91280102", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -597,6 +597,9 @@ fn doc_std(\n             .arg(\"--resource-suffix\")\n             .arg(&builder.version)\n             .args(extra_args);\n+        if builder.config.library_docs_private_items {\n+            cargo.arg(\"--document-private-items\").arg(\"--document-hidden-items\");\n+        }\n         builder.run(&mut cargo.into());\n     };\n "}, {"sha": "3a0be7a85356f9ab1f89e083a6d989ea5cbd25dd", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -110,7 +110,7 @@ use std::fs::{self, File};\n use std::io;\n use std::io::ErrorKind;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n use std::str;\n \n use build_helper::ci::CiEnv;\n@@ -662,12 +662,32 @@ impl Build {\n \n         // Try passing `--progress` to start, then run git again without if that fails.\n         let update = |progress: bool| {\n-            let mut git = Command::new(\"git\");\n+            // Git is buggy and will try to fetch submodules from the tracking branch for *this* repository,\n+            // even though that has no relation to the upstream for the submodule.\n+            let current_branch = {\n+                let output = self\n+                    .config\n+                    .git()\n+                    .args([\"symbolic-ref\", \"--short\", \"HEAD\"])\n+                    .stderr(Stdio::inherit())\n+                    .output();\n+                let output = t!(output);\n+                if output.status.success() {\n+                    Some(String::from_utf8(output.stdout).unwrap().trim().to_owned())\n+                } else {\n+                    None\n+                }\n+            };\n+\n+            let mut git = self.config.git();\n+            if let Some(branch) = current_branch {\n+                git.arg(\"-c\").arg(format!(\"branch.{branch}.remote=origin\"));\n+            }\n             git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\", \"--depth=1\"]);\n             if progress {\n                 git.arg(\"--progress\");\n             }\n-            git.arg(relative_path).current_dir(&self.config.src);\n+            git.arg(relative_path);\n             git\n         };\n         // NOTE: doesn't use `try_run` because this shouldn't print an error if it fails."}, {"sha": "e0fa1fe28246e7be95de552a3642e0666adb8d38", "filename": "tests/pretty/issue-4264.pp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/tests%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/tests%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Fissue-4264.pp?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -34,10 +34,11 @@\n                     ((::alloc::fmt::format as\n                             for<'a> fn(Arguments<'a>) -> String {format})(((<#[lang = \"format_arguments\"]>::new_v1\n                                 as\n-                                fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1})((&([(\"test\"\n+                                fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1})((&([(\"test\"\n                                             as &str)] as [&str; 1]) as &[&str; 1]),\n-                            (&([] as [ArgumentV1<'_>; 0]) as &[ArgumentV1<'_>; 0])) as\n-                            Arguments<'_>)) as String);\n+                            (&([] as [core::fmt::ArgumentV1<'_>; 0]) as\n+                                &[core::fmt::ArgumentV1<'_>; 0])) as Arguments<'_>)) as\n+                        String);\n                 (res as String)\n             } as String);\n     } as ())"}, {"sha": "3480a2ec8154806572d6255a4523745a7873f3b0", "filename": "tests/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/tests%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/tests%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -15,7 +15,7 @@ LL |     format!(\"{:X}\", \"3\");\n              NonZeroIsize\n            and 21 others\n    = note: required for `&str` to implement `UpperHex`\n-note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n+note: required by a bound in `core::fmt::ArgumentV1::<'a>::new_upper_hex`\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `arg_new` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d43f4f0d9570b0ce3ffc8c32bd01baf2d887e53a", "filename": "tests/ui/fmt/send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba9f33c7c9b6b439aabba2625102c818e1b24ed/tests%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fba9f33c7c9b6b439aabba2625102c818e1b24ed/tests%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fsend-sync.stderr?ref=fba9f33c7c9b6b439aabba2625102c818e1b24ed", "patch": "@@ -6,11 +6,11 @@ LL |     send(format_args!(\"{:?}\", c));\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: within `[ArgumentV1<'_>]`, the trait `Sync` is not implemented for `core::fmt::Opaque`\n+   = help: within `[core::fmt::ArgumentV1<'_>]`, the trait `Sync` is not implemented for `core::fmt::Opaque`\n    = note: required because it appears within the type `&core::fmt::Opaque`\n    = note: required because it appears within the type `ArgumentV1<'_>`\n    = note: required because it appears within the type `[ArgumentV1<'_>]`\n-   = note: required for `&[ArgumentV1<'_>]` to implement `Send`\n+   = note: required for `&[core::fmt::ArgumentV1<'_>]` to implement `Send`\n    = note: required because it appears within the type `Arguments<'_>`\n note: required by a bound in `send`\n   --> $DIR/send-sync.rs:1:12"}]}