{"sha": "459969f88ff95c94b7b34043a7f0e13de91de4f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTk2OWY4OGZmOTVjOTRiN2IzNDA0M2E3ZjBlMTNkZTkxZGU0Zjg=", "commit": {"author": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-08-27T23:18:05Z"}, "committer": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-08-27T23:18:05Z"}, "message": "added restriction lint that prohibits the usage of unimplemented, unreachable or panic in a function of type result or option", "tree": {"sha": "20a9538185eb8df1ea06394dd4f3374ee4bf3184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a9538185eb8df1ea06394dd4f3374ee4bf3184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459969f88ff95c94b7b34043a7f0e13de91de4f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459969f88ff95c94b7b34043a7f0e13de91de4f8", "html_url": "https://github.com/rust-lang/rust/commit/459969f88ff95c94b7b34043a7f0e13de91de4f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459969f88ff95c94b7b34043a7f0e13de91de4f8/comments", "author": null, "committer": null, "parents": [{"sha": "dead45fd5b2fb24d2259e3955a50c51de277a5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/dead45fd5b2fb24d2259e3955a50c51de277a5ac", "html_url": "https://github.com/rust-lang/rust/commit/dead45fd5b2fb24d2259e3955a50c51de277a5ac"}], "stats": {"total": 280, "additions": 280, "deletions": 0}, "files": [{"sha": "7af3b666cca000a42c9895201bc5e28acfc0763a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/459969f88ff95c94b7b34043a7f0e13de91de4f8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/459969f88ff95c94b7b34043a7f0e13de91de4f8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=459969f88ff95c94b7b34043a7f0e13de91de4f8", "patch": "@@ -1651,6 +1651,7 @@ Released 2018-09-13\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n+[`panic_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl"}, {"sha": "b70d126af5bf8f050a60fc147c36e32a2c2b7f4e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/459969f88ff95c94b7b34043a7f0e13de91de4f8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459969f88ff95c94b7b34043a7f0e13de91de4f8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=459969f88ff95c94b7b34043a7f0e13de91de4f8", "patch": "@@ -267,6 +267,7 @@ mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n mod overflow_check_conditional;\n+mod panic_in_result;\n mod panic_unimplemented;\n mod partialeq_ne_impl;\n mod path_buf_push_overwrite;\n@@ -747,6 +748,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &option_env_unwrap::OPTION_ENV_UNWRAP,\n         &option_if_let_else::OPTION_IF_LET_ELSE,\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+        &panic_in_result::PANIC_IN_RESULT,\n         &panic_unimplemented::PANIC,\n         &panic_unimplemented::PANIC_PARAMS,\n         &panic_unimplemented::TODO,\n@@ -1086,6 +1088,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n+    store.register_late_pass(|| box panic_in_result::PanicInResult);\n+\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1128,6 +1132,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n         LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n+        LintId::of(&panic_in_result::PANIC_IN_RESULT),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),"}, {"sha": "3a71a0db6fe2e341164a996ffee915668242b4a3", "filename": "clippy_lints/src/panic_in_result.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/459969f88ff95c94b7b34043a7f0e13de91de4f8/clippy_lints%2Fsrc%2Fpanic_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459969f88ff95c94b7b34043a7f0e13de91de4f8/clippy_lints%2Fsrc%2Fpanic_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result.rs?ref=459969f88ff95c94b7b34043a7f0e13de91de4f8", "patch": "@@ -0,0 +1,100 @@\n+use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `panic!`, `unimplemented!` or `unreachable!` in a function of type result/option.\n+    ///\n+    /// **Why is this bad?** For some codebases,\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn option_with_panic() -> Option<bool> // should emit lint\n+    /// {\n+    ///     panic!(\"error\");\n+    /// }\n+    /// ```\n+\n+    pub PANIC_IN_RESULT,\n+    restriction,\n+    \"functions of type `Result<..>` / `Option`<...> that contain `panic!()` or `unreachable()` or `unimplemented()` \"\n+}\n+\n+declare_lint_pass!(PanicInResult => [PANIC_IN_RESULT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PanicInResult {\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n+        if_chain! {\n+            // first check if it's a method or function\n+            if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n+            // checking if its return type is `result` or `option`\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(result_type))\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(option_type));\n+            then {\n+                lint_impl_body(cx, impl_item.span, impl_item);\n+            }\n+        }\n+    }\n+}\n+\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Expr, ImplItemKind};\n+\n+struct FindPanicUnimplementedUnreachable {\n+    result: Vec<Span>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if is_expn_of(expr.span, \"unimplemented\").is_some() {\n+            self.result.push(expr.span);\n+        } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n+            self.result.push(expr.span);\n+        } else if is_expn_of(expr.span, \"panic\").is_some() {\n+            self.result.push(expr.span);\n+        }\n+\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tcx hir::ImplItem<'_>) {\n+    if_chain! {\n+        if let ImplItemKind::Fn(_, body_id) = impl_item.kind;\n+        then {\n+            let body = cx.tcx.hir().body(body_id);\n+            let mut fpu = FindPanicUnimplementedUnreachable {\n+                result: Vec::new(),\n+            };\n+            fpu.visit_expr(&body.value);\n+\n+            // if we've found one, lint\n+            if  !fpu.result.is_empty()  {\n+                span_lint_and_then(\n+                    cx,\n+                    PANIC_IN_RESULT,\n+                    impl_span,\n+                    \"used unimplemented, unreachable or panic in a function that returns result or option\",\n+                    move |diag| {\n+                        diag.help(\n+                            \"unimplemented, unreachable or panic should not be used in a function that returns result or option\" );\n+                        diag.span_note(fpu.result, \"will cause the application to crash.\");\n+                    });\n+            }\n+        }\n+    }\n+}"}, {"sha": "ad57146048ea028c0cbaa004f1d476408801fce9", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/459969f88ff95c94b7b34043a7f0e13de91de4f8/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459969f88ff95c94b7b34043a7f0e13de91de4f8/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=459969f88ff95c94b7b34043a7f0e13de91de4f8", "patch": "@@ -1704,6 +1704,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"panic_unimplemented\",\n     },\n+    Lint {\n+        name: \"panic_in_result\",\n+        group: \"restriction\",\n+        desc: \"default lint description\",\n+        deprecation: None,\n+        module: \"panic_in_result\",\n+    },\n     Lint {\n         name: \"panic_params\",\n         group: \"style\","}, {"sha": "21e9efca87bfd2206e4797cd4f41391e182c606e", "filename": "tests/ui/panic_in_result.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/459969f88ff95c94b7b34043a7f0e13de91de4f8/tests%2Fui%2Fpanic_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459969f88ff95c94b7b34043a7f0e13de91de4f8/tests%2Fui%2Fpanic_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result.rs?ref=459969f88ff95c94b7b34043a7f0e13de91de4f8", "patch": "@@ -0,0 +1,62 @@\n+#![warn(clippy::panic_in_result)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_panic() -> Result<bool, String> // should emit lint\n+    {\n+        panic!(\"error\");\n+    }\n+\n+    fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn result_with_unreachable() -> Result<bool, String> // should emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn option_with_unreachable() -> Option<bool> // should emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn option_with_unimplemented() -> Option<bool> // should emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn option_with_panic() -> Option<bool> // should emit lint\n+    {\n+        panic!(\"error\");\n+    }\n+\n+    fn other_with_panic() // should not emit lint\n+    {\n+        panic!(\"\");\n+    }\n+\n+    fn other_with_unreachable() // should not emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn other_with_unimplemented() // should not emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        Ok(true)\n+    }\n+\n+    fn option_without_banned_functions() -> Option<bool> // should not emit lint\n+    {\n+        Some(true)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "74273bd9abb2ba589508ee98ea6042b466a66680", "filename": "tests/ui/panic_in_result.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/459969f88ff95c94b7b34043a7f0e13de91de4f8/tests%2Fui%2Fpanic_in_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/459969f88ff95c94b7b34043a7f0e13de91de4f8/tests%2Fui%2Fpanic_in_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result.stderr?ref=459969f88ff95c94b7b34043a7f0e13de91de4f8", "patch": "@@ -0,0 +1,105 @@\n+error: used unimplemented, unreachable or panic in a function that returns result or option\n+  --> $DIR/panic_in_result.rs:6:5\n+   |\n+LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         panic!(\"error\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result` implied by `-D warnings`\n+   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+note: will cause the application to crash.\n+  --> $DIR/panic_in_result.rs:8:9\n+   |\n+LL |         panic!(\"error\");\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used unimplemented, unreachable or panic in a function that returns result or option\n+  --> $DIR/panic_in_result.rs:11:5\n+   |\n+LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+note: will cause the application to crash.\n+  --> $DIR/panic_in_result.rs:13:9\n+   |\n+LL |         unimplemented!();\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used unimplemented, unreachable or panic in a function that returns result or option\n+  --> $DIR/panic_in_result.rs:16:5\n+   |\n+LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         unreachable!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+note: will cause the application to crash.\n+  --> $DIR/panic_in_result.rs:18:9\n+   |\n+LL |         unreachable!();\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used unimplemented, unreachable or panic in a function that returns result or option\n+  --> $DIR/panic_in_result.rs:21:5\n+   |\n+LL | /     fn option_with_unreachable() -> Option<bool> // should emit lint\n+LL | |     {\n+LL | |         unreachable!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+note: will cause the application to crash.\n+  --> $DIR/panic_in_result.rs:23:9\n+   |\n+LL |         unreachable!();\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used unimplemented, unreachable or panic in a function that returns result or option\n+  --> $DIR/panic_in_result.rs:26:5\n+   |\n+LL | /     fn option_with_unimplemented() -> Option<bool> // should emit lint\n+LL | |     {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+note: will cause the application to crash.\n+  --> $DIR/panic_in_result.rs:28:9\n+   |\n+LL |         unimplemented!();\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used unimplemented, unreachable or panic in a function that returns result or option\n+  --> $DIR/panic_in_result.rs:31:5\n+   |\n+LL | /     fn option_with_panic() -> Option<bool> // should emit lint\n+LL | |     {\n+LL | |         panic!(\"error\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+note: will cause the application to crash.\n+  --> $DIR/panic_in_result.rs:33:9\n+   |\n+LL |         panic!(\"error\");\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}]}