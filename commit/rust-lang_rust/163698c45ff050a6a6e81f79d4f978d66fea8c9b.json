{"sha": "163698c45ff050a6a6e81f79d4f978d66fea8c9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzY5OGM0NWZmMDUwYTZhNmU4MWY3OWQ0Zjk3OGQ2NmZlYThjOWI=", "commit": {"author": {"name": "Raph Levien", "email": "raph@google.com", "date": "2017-02-21T22:41:28Z"}, "committer": {"name": "Raph Levien", "email": "raph@google.com", "date": "2017-02-21T23:55:47Z"}, "message": "Switch Fuchsia to readdir (instead of readdir_r)\n\nThe readdir_r function is deprecated on newer Posix systems because of\nvarious problems, and not implemented at all for Fuchsia. There are\nalready implementations using both, and this patch switches Fuchsia\nover to the readdir-based one.\n\nFixes #40021 for Fuchsia, but that issue also contains discussion of\nwhat should happen for other Posix systems.", "tree": {"sha": "adaa04e4145b02ae754d09bd3f988ce352a359b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adaa04e4145b02ae754d09bd3f988ce352a359b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163698c45ff050a6a6e81f79d4f978d66fea8c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163698c45ff050a6a6e81f79d4f978d66fea8c9b", "html_url": "https://github.com/rust-lang/rust/commit/163698c45ff050a6a6e81f79d4f978d66fea8c9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163698c45ff050a6a6e81f79d4f978d66fea8c9b/comments", "author": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668864d9edd4f28d48005b57e5b177228cb974c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/668864d9edd4f28d48005b57e5b177228cb974c5", "html_url": "https://github.com/rust-lang/rust/commit/668864d9edd4f28d48005b57e5b177228cb974c5"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "9c16e5b6e6728961845e03385635c17123c5754b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/163698c45ff050a6a6e81f79d4f978d66fea8c9b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163698c45ff050a6a6e81f79d4f978d66fea8c9b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=163698c45ff050a6a6e81f79d4f978d66fea8c9b", "patch": "@@ -35,7 +35,8 @@ use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off_t as off64_t,\n            ftruncate as ftruncate64, lseek as lseek64, dirent as dirent64, open as open64};\n #[cfg(not(any(target_os = \"linux\",\n               target_os = \"emscripten\",\n-              target_os = \"solaris\")))]\n+              target_os = \"solaris\",\n+              target_os = \"fuchsia\")))]\n use libc::{readdir_r as readdir64_r};\n \n pub struct File(FileDesc);\n@@ -59,10 +60,10 @@ pub struct DirEntry {\n     entry: dirent64,\n     root: Arc<PathBuf>,\n     // We need to store an owned copy of the directory name\n-    // on Solaris because a) it uses a zero-length array to\n-    // store the name, b) its lifetime between readdir calls\n-    // is not guaranteed.\n-    #[cfg(target_os = \"solaris\")]\n+    // on Solaris and Fuchsia because a) it uses a zero-length\n+    // array to store the name, b) its lifetime between readdir\n+    // calls is not guaranteed.\n+    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\"))]\n     name: Box<[u8]>\n }\n \n@@ -205,14 +206,14 @@ impl fmt::Debug for ReadDir {\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n-    #[cfg(target_os = \"solaris\")]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\"))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             loop {\n                 // Although readdir_r(3) would be a correct function to use here because\n-                // of the thread safety, on Illumos the readdir(3C) function is safe to use\n-                // in threaded applications and it is generally preferred over the\n-                // readdir_r(3C) function.\n+                // of the thread safety, on Illumos and Fuchsia the readdir(3C) function\n+                // is safe to use in threaded applications and it is generally preferred\n+                // over the readdir_r(3C) function.\n                 super::os::set_errno(0);\n                 let entry_ptr = libc::readdir(self.dirp.0);\n                 if entry_ptr.is_null() {\n@@ -240,7 +241,7 @@ impl Iterator for ReadDir {\n         }\n     }\n \n-    #[cfg(not(target_os = \"solaris\"))]\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"fuchsia\")))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             let mut ret = DirEntry {"}, {"sha": "6dc85840a634325d98492cc8d148015e819f1fbc", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/163698c45ff050a6a6e81f79d4f978d66fea8c9b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163698c45ff050a6a6e81f79d4f978d66fea8c9b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=163698c45ff050a6a6e81f79d4f978d66fea8c9b", "patch": "@@ -64,7 +64,7 @@ pub fn errno() -> i32 {\n }\n \n /// Sets the platform-specific value of errno\n-#[cfg(target_os = \"solaris\")] // only needed for readdir so far\n+#[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\"))] // only needed for readdir so far\n pub fn set_errno(e: i32) {\n     unsafe {\n         *errno_location() = e as c_int"}]}