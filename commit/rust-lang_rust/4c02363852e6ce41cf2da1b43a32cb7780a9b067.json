{"sha": "4c02363852e6ce41cf2da1b43a32cb7780a9b067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDIzNjM4NTJlNmNlNDFjZjJkYTFiNDNhMzJjYjc3ODBhOWIwNjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-05T11:38:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-05T11:38:41Z"}, "message": "Auto merge of #35317 - TimNN:internal-deprecated, r=eddyb\n\nIgnore deprecation for items deprecated by the same attribute\n\nWhenever a node would be reported as deprecated:\n\n- check if the parent item is also deprecated\n- if it is and both were deprecated by the same attribute\n- skip the deprecation warning\n\nfixes #35128\ncloses #16490\n\nr? @eddyb", "tree": {"sha": "16c7e25686138191daee8c635b76c1f00f295d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c7e25686138191daee8c635b76c1f00f295d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "html_url": "https://github.com/rust-lang/rust/commit/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41fe4b719538d2505a75cf9c065ec12411b94ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/41fe4b719538d2505a75cf9c065ec12411b94ac5", "html_url": "https://github.com/rust-lang/rust/commit/41fe4b719538d2505a75cf9c065ec12411b94ac5"}, {"sha": "627b1e8ec72dfda6944ff247d50d470f8d1d672b", "url": "https://api.github.com/repos/rust-lang/rust/commits/627b1e8ec72dfda6944ff247d50d470f8d1d672b", "html_url": "https://github.com/rust-lang/rust/commit/627b1e8ec72dfda6944ff247d50d470f8d1d672b"}], "stats": {"total": 230, "additions": 205, "deletions": 25}, "files": [{"sha": "cbbc2c4f98f5e09b025f59756289a153805b0f7d", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=4c02363852e6ce41cf2da1b43a32cb7780a9b067", "patch": "@@ -19,7 +19,7 @@ use session::Session;\n use lint;\n use middle::cstore::LOCAL_CRATE;\n use hir::def::Def;\n-use hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::parse::token::InternedString;\n@@ -61,12 +61,46 @@ enum AnnotationKind {\n     Container,\n }\n \n+/// An entry in the `depr_map`.\n+#[derive(Clone)]\n+pub struct DeprecationEntry {\n+    /// The metadata of the attribute associated with this entry.\n+    pub attr: Deprecation,\n+    /// The def id where the attr was originally attached. `None` for non-local\n+    /// `DefId`'s.\n+    origin: Option<DefIndex>,\n+}\n+\n+impl DeprecationEntry {\n+    fn local(attr: Deprecation, id: DefId) -> DeprecationEntry {\n+        assert!(id.is_local());\n+        DeprecationEntry {\n+            attr: attr,\n+            origin: Some(id.index),\n+        }\n+    }\n+\n+    fn external(attr: Deprecation) -> DeprecationEntry {\n+        DeprecationEntry {\n+            attr: attr,\n+            origin: None,\n+        }\n+    }\n+\n+    pub fn same_origin(&self, other: &DeprecationEntry) -> bool {\n+        match (self.origin, other.origin) {\n+            (Some(o1), Some(o2)) => o1 == o2,\n+            _ => false\n+        }\n+    }\n+}\n+\n /// A stability index, giving the stability level for items and methods.\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n     stab_map: DefIdMap<Option<&'tcx Stability>>,\n-    depr_map: DefIdMap<Option<Deprecation>>,\n+    depr_map: DefIdMap<Option<DeprecationEntry>>,\n \n     /// Maps for each crate whether it is part of the staged API.\n     staged_api: FnvHashMap<ast::CrateNum, bool>\n@@ -77,7 +111,7 @@ struct Annotator<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n-    parent_depr: Option<Deprecation>,\n+    parent_depr: Option<DeprecationEntry>,\n     access_levels: &'a AccessLevels,\n     in_trait_impl: bool,\n }\n@@ -184,14 +218,15 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n \n                 // `Deprecation` is just two pointers, no need to intern it\n                 let def_id = self.tcx.map.local_def_id(id);\n-                self.index.depr_map.insert(def_id, Some(depr.clone()));\n+                let depr_entry = Some(DeprecationEntry::local(depr, def_id));\n+                self.index.depr_map.insert(def_id, depr_entry.clone());\n \n-                let orig_parent_depr = replace(&mut self.parent_depr, Some(depr));\n+                let orig_parent_depr = replace(&mut self.parent_depr, depr_entry);\n                 visit_children(self);\n                 self.parent_depr = orig_parent_depr;\n-            } else if let Some(depr) = self.parent_depr.clone() {\n+            } else if let parent_depr @ Some(_) = self.parent_depr.clone() {\n                 let def_id = self.tcx.map.local_def_id(id);\n-                self.index.depr_map.insert(def_id, Some(depr));\n+                self.index.depr_map.insert(def_id, parent_depr);\n                 visit_children(self);\n             } else {\n                 visit_children(self);\n@@ -351,7 +386,7 @@ struct Checker<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn check(&mut self, id: DefId, span: Span,\n-             stab: &Option<&Stability>, _depr: &Option<Deprecation>) {\n+             stab: &Option<&Stability>, _depr: &Option<DeprecationEntry>) {\n         if !is_staged_api(self.tcx, id) {\n             return;\n         }\n@@ -476,7 +511,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             warn_about_defns: bool,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     match item.node {\n         hir::ItemExternCrate(_) => {\n             // compiler-generated `extern crate` items have a dummy span.\n@@ -515,7 +550,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     let span;\n     let id = match e.node {\n         hir::ExprMethodCall(i, _, _) => {\n@@ -579,7 +614,7 @@ pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             path: &hir::Path, id: ast::NodeId,\n                             cb: &mut FnMut(DefId, Span,\n                                            &Option<&Stability>,\n-                                           &Option<Deprecation>)) {\n+                                           &Option<DeprecationEntry>)) {\n     // Paths in import prefixes may have no resolution.\n     match tcx.expect_def_or_none(id) {\n         Some(Def::PrimTy(..)) => {}\n@@ -595,7 +630,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       item: &hir::PathListItem,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n-                                                     &Option<Deprecation>)) {\n+                                                     &Option<DeprecationEntry>)) {\n     match tcx.expect_def(item.node.id()) {\n         Def::PrimTy(..) => {}\n         def => {\n@@ -607,7 +642,7 @@ pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n                            cb: &mut FnMut(DefId, Span,\n                                           &Option<&Stability>,\n-                                          &Option<Deprecation>)) {\n+                                          &Option<DeprecationEntry>)) {\n     debug!(\"check_pat(pat = {:?})\", pat);\n     if is_internal(tcx, pat.span) { return; }\n \n@@ -638,7 +673,7 @@ fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       id: DefId, span: Span,\n                                       cb: &mut FnMut(DefId, Span,\n                                                      &Option<&Stability>,\n-                                                     &Option<Deprecation>)) {\n+                                                     &Option<DeprecationEntry>)) {\n     if is_internal(tcx, span) {\n         debug!(\"maybe_do_stability_check: \\\n                 skipping span={:?} since it is internal\", span);\n@@ -647,7 +682,7 @@ fn maybe_do_stability_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (stability, deprecation) = if is_staged_api(tcx, id) {\n         (tcx.lookup_stability(id), None)\n     } else {\n-        (None, tcx.lookup_deprecation(id))\n+        (None, tcx.lookup_deprecation_entry(id))\n     };\n     debug!(\"maybe_do_stability_check: \\\n             inspecting id={:?} span={:?} of stability={:?}\", id, span, stability);\n@@ -685,6 +720,10 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n \n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {\n+        self.lookup_deprecation_entry(id).map(|depr| depr.attr)\n+    }\n+\n+    pub fn lookup_deprecation_entry(self, id: DefId) -> Option<DeprecationEntry> {\n         if let Some(depr) = self.stability.borrow().depr_map.get(&id) {\n             return depr.clone();\n         }\n@@ -703,12 +742,12 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    fn lookup_deprecation_uncached(self, id: DefId) -> Option<Deprecation> {\n+    fn lookup_deprecation_uncached(self, id: DefId) -> Option<DeprecationEntry> {\n         debug!(\"lookup(id={:?})\", id);\n         if id.is_local() {\n             None // The stability cache is filled partially lazily\n         } else {\n-            self.sess.cstore.deprecation(id)\n+            self.sess.cstore.deprecation(id).map(DeprecationEntry::external)\n         }\n     }\n }"}, {"sha": "49dad2d0f6d924653de235ab358a5540f163c512", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4c02363852e6ce41cf2da1b43a32cb7780a9b067", "patch": "@@ -567,18 +567,36 @@ declare_lint! {\n }\n \n /// Checks for use of items with `#[deprecated]` or `#[rustc_deprecated]` attributes\n-#[derive(Copy, Clone)]\n-pub struct Deprecated;\n+#[derive(Clone)]\n+pub struct Deprecated {\n+    /// Tracks the `NodeId` of the current item.\n+    ///\n+    /// This is required since not all node ids are present in the hir map.\n+    current_item: ast::NodeId,\n+}\n \n impl Deprecated {\n+    pub fn new() -> Deprecated {\n+        Deprecated {\n+            current_item: ast::CRATE_NODE_ID,\n+        }\n+    }\n+\n     fn lint(&self, cx: &LateContext, _id: DefId, span: Span,\n-            stability: &Option<&attr::Stability>, deprecation: &Option<attr::Deprecation>) {\n+            stability: &Option<&attr::Stability>,\n+            deprecation: &Option<stability::DeprecationEntry>) {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(&attr::Stability{rustc_depr: Some(attr::RustcDeprecation{ref reason, ..}), ..})\n                 = *stability {\n             output(cx, DEPRECATED, span, Some(&reason))\n-        } else if let Some(attr::Deprecation{ref note, ..}) = *deprecation {\n-            output(cx, DEPRECATED, span, note.as_ref().map(|x| &**x))\n+        } else if let Some(ref depr_entry) = *deprecation {\n+            if let Some(parent_depr) = cx.tcx.lookup_deprecation_entry(self.parent_def(cx)) {\n+                if parent_depr.same_origin(depr_entry) {\n+                    return;\n+                }\n+            }\n+\n+            output(cx, DEPRECATED, span, depr_entry.attr.note.as_ref().map(|x| &**x))\n         }\n \n         fn output(cx: &LateContext, lint: &'static Lint, span: Span, note: Option<&str>) {\n@@ -591,6 +609,19 @@ impl Deprecated {\n             cx.span_lint(lint, span, &msg);\n         }\n     }\n+\n+    fn push_item(&mut self, item_id: ast::NodeId) {\n+        self.current_item = item_id;\n+    }\n+\n+    fn item_post(&mut self, cx: &LateContext, item_id: ast::NodeId) {\n+        assert_eq!(self.current_item, item_id);\n+        self.current_item = cx.tcx.map.get_parent(item_id);\n+    }\n+\n+    fn parent_def(&self, cx: &LateContext) -> DefId {\n+        cx.tcx.map.local_def_id(self.current_item)\n+    }\n }\n \n impl LintPass for Deprecated {\n@@ -601,11 +632,16 @@ impl LintPass for Deprecated {\n \n impl LateLintPass for Deprecated {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        self.push_item(item.id);\n         stability::check_item(cx.tcx, item, false,\n                               &mut |id, sp, stab, depr|\n                                 self.lint(cx, id, sp, &stab, &depr));\n     }\n \n+    fn check_item_post(&mut self, cx: &LateContext, item: &hir::Item) {\n+        self.item_post(cx, item.id);\n+    }\n+\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         stability::check_expr(cx.tcx, e,\n                               &mut |id, sp, stab, depr|\n@@ -629,6 +665,30 @@ impl LateLintPass for Deprecated {\n                              &mut |id, sp, stab, depr|\n                                 self.lint(cx, id, sp, &stab, &depr));\n     }\n+\n+    fn check_impl_item(&mut self, _: &LateContext, item: &hir::ImplItem) {\n+        self.push_item(item.id);\n+    }\n+\n+    fn check_impl_item_post(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n+        self.item_post(cx, item.id);\n+    }\n+\n+    fn check_trait_item(&mut self, _: &LateContext, item: &hir::TraitItem) {\n+        self.push_item(item.id);\n+    }\n+\n+    fn check_trait_item_post(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n+        self.item_post(cx, item.id);\n+    }\n+\n+    fn check_foreign_item(&mut self, _: &LateContext, item: &hir::ForeignItem) {\n+        self.push_item(item.id);\n+    }\n+\n+    fn check_foreign_item_post(&mut self, cx: &LateContext, item: &hir::ForeignItem) {\n+        self.item_post(cx, item.id);\n+    }\n }\n \n declare_lint! {"}, {"sha": "43376dfd8c2a0ec6dac298f4ba802f5d4caa84d8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4c02363852e6ce41cf2da1b43a32cb7780a9b067", "patch": "@@ -124,7 +124,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  UnusedAllocation,\n                  MissingCopyImplementations,\n                  UnstableFeatures,\n-                 Deprecated,\n                  UnconditionalRecursion,\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n@@ -133,6 +132,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  );\n \n     add_builtin_with_new!(sess,\n+                          Deprecated,\n                           TypeLimits,\n                           MissingDoc,\n                           MissingDebugImplementations,"}, {"sha": "eedbba59c6f4837196a7e148f4f727a5b5139722", "filename": "src/test/compile-fail/deprecation-lint-nested.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint-nested.rs?ref=4c02363852e6ce41cf2da1b43a32cb7780a9b067", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(deprecated)]\n+#![allow(warnings)]\n+\n+#[deprecated]\n+fn issue_35128() {\n+    format_args!(\"foo\");\n+}\n+\n+#[deprecated]\n+fn issue_35128_minimal() {\n+    static FOO: &'static str = \"foo\";\n+    let _ = FOO;\n+}\n+\n+#[deprecated]\n+mod silent {\n+    type DeprecatedType = u8;\n+    struct DeprecatedStruct;\n+    fn deprecated_fn() {}\n+    trait DeprecatedTrait {}\n+    static DEPRECATED_STATIC: u8 = 0;\n+    const DEPRECATED_CONST: u8 = 1;\n+\n+    struct Foo(DeprecatedType);\n+\n+    impl DeprecatedTrait for Foo {}\n+\n+    impl Foo {\n+        fn bar<T: DeprecatedTrait>() {\n+            deprecated_fn();\n+        }\n+    }\n+\n+    fn foo() -> u8 {\n+        DEPRECATED_STATIC +\n+        DEPRECATED_CONST\n+    }\n+}\n+\n+#[deprecated]\n+mod loud {\n+    #[deprecated]\n+    type DeprecatedType = u8;\n+    #[deprecated]\n+    struct DeprecatedStruct;\n+    #[deprecated]\n+    fn deprecated_fn() {}\n+    #[deprecated]\n+    trait DeprecatedTrait {}\n+    #[deprecated]\n+    static DEPRECATED_STATIC: u8 = 0;\n+    #[deprecated]\n+    const DEPRECATED_CONST: u8 = 1;\n+\n+    struct Foo(DeprecatedType); //~ ERROR use of deprecated item\n+\n+    impl DeprecatedTrait for Foo {} //~ ERROR use of deprecated item\n+\n+    impl Foo {\n+        fn bar<T: DeprecatedTrait>() { //~ ERROR use of deprecated item\n+            deprecated_fn(); //~ ERROR use of deprecated item\n+        }\n+    }\n+\n+    fn foo() -> u8 {\n+        DEPRECATED_STATIC + //~ ERROR use of deprecated item\n+        DEPRECATED_CONST //~ ERROR use of deprecated item\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "edee24206cd33b43224ea900488cc962929912d8", "filename": "src/test/compile-fail/deprecation-lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c02363852e6ce41cf2da1b43a32cb7780a9b067/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs?ref=4c02363852e6ce41cf2da1b43a32cb7780a9b067", "patch": "@@ -266,14 +266,14 @@ mod this_crate {\n     #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n-        fn_in_body(); //~ ERROR use of deprecated item: text\n+        fn_in_body();\n     }\n \n     impl MethodTester {\n         #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n-            fn_in_body(); //~ ERROR use of deprecated item: text\n+            fn_in_body();\n         }\n     }\n "}]}