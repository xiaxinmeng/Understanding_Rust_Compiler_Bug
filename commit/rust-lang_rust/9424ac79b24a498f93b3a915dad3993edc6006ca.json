{"sha": "9424ac79b24a498f93b3a915dad3993edc6006ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjRhYzc5YjI0YTQ5OGY5M2IzYTkxNWRhZDM5OTNlZGM2MDA2Y2E=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-21T21:25:07Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-21T21:27:23Z"}, "message": "Remove links that get imported from the prelude", "tree": {"sha": "320b0a55551ba7c07816a91709ab3ca73cc2ccd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320b0a55551ba7c07816a91709ab3ca73cc2ccd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9424ac79b24a498f93b3a915dad3993edc6006ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9424ac79b24a498f93b3a915dad3993edc6006ca", "html_url": "https://github.com/rust-lang/rust/commit/9424ac79b24a498f93b3a915dad3993edc6006ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9424ac79b24a498f93b3a915dad3993edc6006ca/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e009bc4f06dcc4350802089d1cb0a2d62d5f684", "html_url": "https://github.com/rust-lang/rust/commit/8e009bc4f06dcc4350802089d1cb0a2d62d5f684"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "ce7d1c3d06ddc5dea1dfb68a152a7551c4d7e4af", "filename": "library/core/src/ops/drop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fdrop.rs?ref=9424ac79b24a498f93b3a915dad3993edc6006ca", "patch": "@@ -80,7 +80,7 @@\n ///\n /// If you'd like explicitly call the destructor of a value, [`mem::drop`] can be used instead.\n ///\n-/// [`mem::drop`]: crate::mem::drop\n+/// [`mem::drop`]: drop\n ///\n /// ## Drop order\n ///\n@@ -132,8 +132,6 @@\n /// are `Copy` get implicitly duplicated by the compiler, making it very\n /// hard to predict when, and how often destructors will be executed. As such,\n /// these types cannot have destructors.\n-///\n-/// [`Copy`]: crate::marker::Copy\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {\n@@ -160,7 +158,7 @@ pub trait Drop {\n     ///\n     /// [E0040]: ../../error-index.html#E0040\n     /// [`panic!`]: crate::panic!\n-    /// [`mem::drop`]: crate::mem::drop\n+    /// [`mem::drop`]: drop\n     /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn drop(&mut self);"}, {"sha": "3c2ada57612337e0d865168bc7dc8b4d07af634b", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=9424ac79b24a498f93b3a915dad3993edc6006ca", "patch": "@@ -4,7 +4,6 @@\n /// but only when used as an immutable value. If a mutable value is requested,\n /// [`IndexMut`] is used instead. This allows nice things such as\n /// `let value = v[index]` if the type of `value` implements [`Copy`].\n-/// [`Copy`]: crate::marker::Copy\n ///\n /// # Examples\n ///"}, {"sha": "c19bd6e441e695950f5d258eabe83a816cdd9be3", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=9424ac79b24a498f93b3a915dad3993edc6006ca", "patch": "@@ -133,7 +133,7 @@\n //! // `consume_and_return_x` can no longer be invoked at this point\n //! ```\n //!\n-//! [`clone`]: crate::clone::Clone::clone\n+//! [`clone`]: Clone::clone\n //! [operator precedence]: ../../reference/expressions.html#expression-precedence\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ccabd66aaf6ebd738c13b9770dce99f299f84d91", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9424ac79b24a498f93b3a915dad3993edc6006ca/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=9424ac79b24a498f93b3a915dad3993edc6006ca", "patch": "@@ -35,8 +35,6 @@ use crate::hash::Hash;\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`IntoIterator`]: crate::iter::IntoIterator\n-/// [`Iterator`]: crate::iter::Iterator\n /// [slicing index]: crate::slice::SliceIndex\n #[cfg_attr(not(bootstrap), lang = \"RangeFull\")]\n #[doc(alias = \"..\")]\n@@ -178,8 +176,6 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// assert_eq!(arr[1.. 3], [  1,2    ]);\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n-///\n-/// [`Iterator`]: crate::iter::IntoIterator\n #[cfg_attr(not(bootstrap), lang = \"RangeFrom\")]\n #[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n@@ -260,8 +256,6 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`IntoIterator`]: crate::iter::IntoIterator\n-/// [`Iterator`]: crate::iter::Iterator\n /// [slicing index]: crate::slice::SliceIndex\n #[cfg_attr(not(bootstrap), lang = \"RangeTo\")]\n #[doc(alias = \"..\")]\n@@ -558,8 +552,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n-/// [`IntoIterator`]: crate::iter::IntoIterator\n-/// [`Iterator`]: crate::iter::Iterator\n /// [slicing index]: crate::slice::SliceIndex\n #[cfg_attr(not(bootstrap), lang = \"RangeToInclusive\")]\n #[doc(alias = \"..=\")]"}]}