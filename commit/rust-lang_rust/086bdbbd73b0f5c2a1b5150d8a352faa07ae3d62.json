{"sha": "086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "node_id": "C_kwDOAAsO6NoAKDA4NmJkYmJkNzNiMGY1YzJhMWI1MTUwZDhhMzUyZmFhMDdhZTNkNjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-08T11:57:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-08T11:57:28Z"}, "message": "Rollup merge of #104922 - estebank:fur-elize, r=oli-obk\n\nDetect long types in E0308 and write them to disk\n\nOn type error with long types, print an abridged type and write the full type to disk.\n\nPrint the widest possible short type while still fitting in the terminal.", "tree": {"sha": "79f473e7def12fc50fc90be6912d009d251911a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f473e7def12fc50fc90be6912d009d251911a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjkdEoCRBK7hj4Ov3rIwAAAygIADSpxFzIZ8aeCZOFUbkOmSg/\n6niGlJh5xof6n/1s6z4A2S/x1DJft3a+Z+rDOULUidBrJ5ucPddUwXuNxK7vbJf7\nuey3AVwB6jhi68dKBAIbMiI+fG9FWVb+fK9iaY0/6VzjZ1awA00QZrbTLpwW8CEY\nEb0WMjVOZguthrLixQ30PR4I4lHLh6C/7wbFcGIwDFgpczvEt8Kg6NAh1Do0pgIM\nl8QFatXwYd+b7w2ThPd/YKFPGKWgsZhOYVzJeGotQinC1IwPLGQB4cSmwZFwehho\nN/6zsd9/2MVRB2sKe3ZgWPl7JkbJfwKIp8Ggq4JLc9VQVr2NMopxqSNq8U1v6+U=\n=WQVN\n-----END PGP SIGNATURE-----\n", "payload": "tree 79f473e7def12fc50fc90be6912d009d251911a0\nparent 7632db0e87d8adccc9a83a47795c9411b1455855\nparent 34b3c49d72b4199b7a804e8893fc585dbd00d5d3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670500648 +0100\ncommitter GitHub <noreply@github.com> 1670500648 +0100\n\nRollup merge of #104922 - estebank:fur-elize, r=oli-obk\n\nDetect long types in E0308 and write them to disk\n\nOn type error with long types, print an abridged type and write the full type to disk.\n\nPrint the widest possible short type while still fitting in the terminal.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "html_url": "https://github.com/rust-lang/rust/commit/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7632db0e87d8adccc9a83a47795c9411b1455855", "url": "https://api.github.com/repos/rust-lang/rust/commits/7632db0e87d8adccc9a83a47795c9411b1455855", "html_url": "https://github.com/rust-lang/rust/commit/7632db0e87d8adccc9a83a47795c9411b1455855"}, {"sha": "34b3c49d72b4199b7a804e8893fc585dbd00d5d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b3c49d72b4199b7a804e8893fc585dbd00d5d3", "html_url": "https://github.com/rust-lang/rust/commit/34b3c49d72b4199b7a804e8893fc585dbd00d5d3"}], "stats": {"total": 417, "additions": 316, "deletions": 101}, "files": [{"sha": "844cf99b4688d0cc0daa3a85d09d985df4822147", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -4348,6 +4348,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"termize\",\n  \"tracing\",\n  \"winapi\",\n ]"}, {"sha": "980a17e41e13f0909df8526f53cb63362ca4483a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 103, "deletions": 78, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -80,6 +80,7 @@ use rustc_middle::ty::{\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::{ControlFlow, Deref};\n+use std::path::PathBuf;\n use std::{cmp, fmt, iter};\n \n mod note;\n@@ -1352,10 +1353,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             .map(|(mod_str, _)| mod_str.len() + separator_len)\n                             .sum();\n \n-                    debug!(\n-                        \"cmp: separator_len={}, split_idx={}, min_len={}\",\n-                        separator_len, split_idx, min_len\n-                    );\n+                    debug!(?separator_len, ?split_idx, ?min_len, \"cmp\");\n \n                     if split_idx >= min_len {\n                         // paths are identical, highlight everything\n@@ -1366,7 +1364,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     } else {\n                         let (common, uniq1) = t1_str.split_at(split_idx);\n                         let (_, uniq2) = t2_str.split_at(split_idx);\n-                        debug!(\"cmp: common={}, uniq1={}, uniq2={}\", common, uniq1, uniq2);\n+                        debug!(?common, ?uniq1, ?uniq2, \"cmp\");\n \n                         values.0.push_normal(common);\n                         values.0.push_highlighted(uniq1);\n@@ -1659,17 +1657,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     }\n                     ValuePairs::Regions(_) => (false, Mismatch::Fixed(\"lifetime\")),\n                 };\n-                let vals = match self.values_str(values) {\n-                    Some((expected, found)) => Some((expected, found)),\n-                    None => {\n-                        // Derived error. Cancel the emitter.\n-                        // NOTE(eddyb) this was `.cancel()`, but `diag`\n-                        // is borrowed, so we can't fully defuse it.\n-                        diag.downgrade_to_delayed_bug();\n-                        return;\n-                    }\n+                let Some(vals) = self.values_str(values) else {\n+                    // Derived error. Cancel the emitter.\n+                    // NOTE(eddyb) this was `.cancel()`, but `diag`\n+                    // is borrowed, so we can't fully defuse it.\n+                    diag.downgrade_to_delayed_bug();\n+                    return;\n                 };\n-                (vals, exp_found, is_simple_error, Some(values))\n+                (Some(vals), exp_found, is_simple_error, Some(values))\n             }\n         };\n \n@@ -1701,7 +1696,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             label_or_note(span, &terr.to_string());\n         }\n \n-        if let Some((expected, found)) = expected_found {\n+        if let Some((expected, found, exp_p, found_p)) = expected_found {\n             let (expected_label, found_label, exp_found) = match exp_found {\n                 Mismatch::Variable(ef) => (\n                     ef.expected.prefix_string(self.tcx),\n@@ -1818,32 +1813,41 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n                 TypeError::Sorts(values) => {\n                     let extra = expected == found;\n-                    let sort_string = |ty: Ty<'tcx>| match (extra, ty.kind()) {\n-                        (true, ty::Opaque(def_id, _)) => {\n-                            let sm = self.tcx.sess.source_map();\n-                            let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n-                            format!(\n-                                \" (opaque type at <{}:{}:{}>)\",\n-                                sm.filename_for_diagnostics(&pos.file.name),\n-                                pos.line,\n-                                pos.col.to_usize() + 1,\n-                            )\n-                        }\n-                        (true, ty::Projection(proj))\n-                            if self.tcx.def_kind(proj.item_def_id)\n-                                == DefKind::ImplTraitPlaceholder =>\n-                        {\n-                            let sm = self.tcx.sess.source_map();\n-                            let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n-                            format!(\n-                                \" (trait associated opaque type at <{}:{}:{}>)\",\n-                                sm.filename_for_diagnostics(&pos.file.name),\n-                                pos.line,\n-                                pos.col.to_usize() + 1,\n-                            )\n+                    let sort_string = |ty: Ty<'tcx>, path: Option<PathBuf>| {\n+                        let mut s = match (extra, ty.kind()) {\n+                            (true, ty::Opaque(def_id, _)) => {\n+                                let sm = self.tcx.sess.source_map();\n+                                let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n+                                format!(\n+                                    \" (opaque type at <{}:{}:{}>)\",\n+                                    sm.filename_for_diagnostics(&pos.file.name),\n+                                    pos.line,\n+                                    pos.col.to_usize() + 1,\n+                                )\n+                            }\n+                            (true, ty::Projection(proj))\n+                                if self.tcx.def_kind(proj.item_def_id)\n+                                    == DefKind::ImplTraitPlaceholder =>\n+                            {\n+                                let sm = self.tcx.sess.source_map();\n+                                let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n+                                format!(\n+                                    \" (trait associated opaque type at <{}:{}:{}>)\",\n+                                    sm.filename_for_diagnostics(&pos.file.name),\n+                                    pos.line,\n+                                    pos.col.to_usize() + 1,\n+                                )\n+                            }\n+                            (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n+                            (false, _) => \"\".to_string(),\n+                        };\n+                        if let Some(path) = path {\n+                            s.push_str(&format!(\n+                                \"\\nthe full type name has been written to '{}'\",\n+                                path.display(),\n+                            ));\n                         }\n-                        (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n-                        (false, _) => \"\".to_string(),\n+                        s\n                     };\n                     if !(values.expected.is_simple_text() && values.found.is_simple_text())\n                         || (exp_found.map_or(false, |ef| {\n@@ -1865,8 +1869,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             expected,\n                             &found_label,\n                             found,\n-                            &sort_string(values.expected),\n-                            &sort_string(values.found),\n+                            &sort_string(values.expected, exp_p),\n+                            &sort_string(values.found, found_p),\n                         );\n                     }\n                 }\n@@ -2339,7 +2343,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let code = trace.cause.code();\n                 if let &MatchExpressionArm(box MatchExpressionArmCause { source, .. }) = code\n                     && let hir::MatchSource::TryDesugar = source\n-                    && let Some((expected_ty, found_ty)) = self.values_str(trace.values)\n+                    && let Some((expected_ty, found_ty, _, _)) = self.values_str(trace.values)\n                 {\n                     err.note(&format!(\n                         \"`?` operator cannot convert from `{}` to `{}`\",\n@@ -2455,7 +2459,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     fn values_str(\n         &self,\n         values: ValuePairs<'tcx>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>\n+    {\n         match values {\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n@@ -2465,7 +2470,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n                 match self.expected_found_str(pretty_exp_found) {\n-                    Some((expected, found)) if expected == found => {\n+                    Some((expected, found, _, _)) if expected == found => {\n                         self.expected_found_str(exp_found)\n                     }\n                     ret => ret,\n@@ -2477,7 +2482,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n                 match self.expected_found_str(pretty_exp_found) {\n-                    Some((expected, found)) if expected == found => {\n+                    Some((expected, found, _, _)) if expected == found => {\n                         self.expected_found_str(exp_found)\n                     }\n                     ret => ret,\n@@ -2489,17 +2494,41 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     fn expected_found_str_term(\n         &self,\n         exp_found: ty::error::ExpectedFound<ty::Term<'tcx>>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>\n+    {\n         let exp_found = self.resolve_vars_if_possible(exp_found);\n         if exp_found.references_error() {\n             return None;\n         }\n \n         Some(match (exp_found.expected.unpack(), exp_found.found.unpack()) {\n-            (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => self.cmp(expected, found),\n+            (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => {\n+                let (mut exp, mut fnd) = self.cmp(expected, found);\n+                // Use the terminal width as the basis to determine when to compress the printed\n+                // out type, but give ourselves some leeway to avoid ending up creating a file for\n+                // a type that is somewhat shorter than the path we'd write to.\n+                let len = self.tcx.sess().diagnostic_width() + 40;\n+                let exp_s = exp.content();\n+                let fnd_s = fnd.content();\n+                let mut exp_p = None;\n+                let mut fnd_p = None;\n+                if exp_s.len() > len {\n+                    let (exp_s, exp_path) = self.tcx.short_ty_string(expected);\n+                    exp = DiagnosticStyledString::highlighted(exp_s);\n+                    exp_p = exp_path;\n+                }\n+                if fnd_s.len() > len {\n+                    let (fnd_s, fnd_path) = self.tcx.short_ty_string(found);\n+                    fnd = DiagnosticStyledString::highlighted(fnd_s);\n+                    fnd_p = fnd_path;\n+                }\n+                (exp, fnd, exp_p, fnd_p)\n+            }\n             _ => (\n                 DiagnosticStyledString::highlighted(exp_found.expected.to_string()),\n                 DiagnosticStyledString::highlighted(exp_found.found.to_string()),\n+                None,\n+                None,\n             ),\n         })\n     }\n@@ -2508,7 +2537,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     fn expected_found_str<T: fmt::Display + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: ty::error::ExpectedFound<T>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString, Option<PathBuf>, Option<PathBuf>)>\n+    {\n         let exp_found = self.resolve_vars_if_possible(exp_found);\n         if exp_found.references_error() {\n             return None;\n@@ -2517,6 +2547,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         Some((\n             DiagnosticStyledString::highlighted(exp_found.expected.to_string()),\n             DiagnosticStyledString::highlighted(exp_found.found.to_string()),\n+            None,\n+            None,\n         ))\n     }\n \n@@ -2850,36 +2882,29 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         debug!(\"report_sub_sup_conflict: sup_region={:?}\", sup_region);\n         debug!(\"report_sub_sup_conflict: sup_origin={:?}\", sup_origin);\n \n-        if let (&infer::Subtype(ref sup_trace), &infer::Subtype(ref sub_trace)) =\n-            (&sup_origin, &sub_origin)\n+        if let infer::Subtype(ref sup_trace) = sup_origin\n+            && let infer::Subtype(ref sub_trace) = sub_origin\n+            && let Some((sup_expected, sup_found, _, _)) = self.values_str(sup_trace.values)\n+            && let Some((sub_expected, sub_found, _, _)) = self.values_str(sub_trace.values)\n+            && sub_expected == sup_expected\n+            && sub_found == sup_found\n         {\n-            debug!(\"report_sub_sup_conflict: sup_trace={:?}\", sup_trace);\n-            debug!(\"report_sub_sup_conflict: sub_trace={:?}\", sub_trace);\n-            debug!(\"report_sub_sup_conflict: sup_trace.values={:?}\", sup_trace.values);\n-            debug!(\"report_sub_sup_conflict: sub_trace.values={:?}\", sub_trace.values);\n-\n-            if let (Some((sup_expected, sup_found)), Some((sub_expected, sub_found))) =\n-                (self.values_str(sup_trace.values), self.values_str(sub_trace.values))\n-            {\n-                if sub_expected == sup_expected && sub_found == sup_found {\n-                    note_and_explain_region(\n-                        self.tcx,\n-                        &mut err,\n-                        \"...but the lifetime must also be valid for \",\n-                        sub_region,\n-                        \"...\",\n-                        None,\n-                    );\n-                    err.span_note(\n-                        sup_trace.cause.span,\n-                        &format!(\"...so that the {}\", sup_trace.cause.as_requirement_str()),\n-                    );\n+            note_and_explain_region(\n+                self.tcx,\n+                &mut err,\n+                \"...but the lifetime must also be valid for \",\n+                sub_region,\n+                \"...\",\n+                None,\n+            );\n+            err.span_note(\n+                sup_trace.cause.span,\n+                &format!(\"...so that the {}\", sup_trace.cause.as_requirement_str()),\n+            );\n \n-                    err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);\n-                    err.emit();\n-                    return;\n-                }\n-            }\n+            err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);\n+            err.emit();\n+            return;\n         }\n \n         self.note_region_origin(&mut err, &sup_origin);"}, {"sha": "d2dffa4a0b78e5ef1d75606e165b0a137fbf87e0", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -16,7 +16,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             infer::Subtype(ref trace) => RegionOriginNote::WithRequirement {\n                 span: trace.cause.span,\n                 requirement: ObligationCauseAsDiagArg(trace.cause.clone()),\n-                expected_found: self.values_str(trace.values),\n+                expected_found: self.values_str(trace.values).map(|(e, f, _, _)| (e, f)),\n             }\n             .add_to_diagnostic(err),\n             infer::Reborrow(span) => {"}, {"sha": "aa61c39b8d81931d9f78c15695641b5873464c47", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -986,23 +986,32 @@ fn foo(&self) -> Self::T { String::new() }\n     }\n \n     pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n-        let length_limit = 50;\n-        let type_limit = 4;\n+        let width = self.sess.diagnostic_width();\n+        let length_limit = width.saturating_sub(30);\n+        let mut type_limit = 50;\n         let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .pretty_print_type(ty)\n             .expect(\"could not write to `String`\")\n             .into_buffer();\n-        if regular.len() <= length_limit {\n+        if regular.len() <= width {\n             return (regular, None);\n         }\n-        let short = FmtPrinter::new_with_limit(\n-            self,\n-            hir::def::Namespace::TypeNS,\n-            rustc_session::Limit(type_limit),\n-        )\n-        .pretty_print_type(ty)\n-        .expect(\"could not write to `String`\")\n-        .into_buffer();\n+        let mut short;\n+        loop {\n+            // Look for the longest properly trimmed path that still fits in lenght_limit.\n+            short = FmtPrinter::new_with_limit(\n+                self,\n+                hir::def::Namespace::TypeNS,\n+                rustc_session::Limit(type_limit),\n+            )\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+            if short.len() <= length_limit || type_limit == 0 {\n+                break;\n+            }\n+            type_limit -= 1;\n+        }\n         if regular == short {\n             return (regular, None);\n         }"}, {"sha": "cbbba2252bf600b34b61a783c49c1bded1891f22", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -18,6 +18,7 @@ rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n smallvec = \"1.8.1\"\n+termize = \"0.1.1\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\""}, {"sha": "4c049a8d628ef0e4336f111cb57c49fddbd3166d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -952,6 +952,17 @@ impl Session {\n     ) -> Option<Symbol> {\n         attrs.iter().find(|at| at.has_name(name)).and_then(|at| at.value_str())\n     }\n+\n+    pub fn diagnostic_width(&self) -> usize {\n+        let default_column_width = 140;\n+        if let Some(width) = self.opts.diagnostic_width {\n+            width\n+        } else if self.opts.unstable_opts.ui_testing {\n+            default_column_width\n+        } else {\n+            termize::dimensions().map_or(default_column_width, |(w, _)| w)\n+        }\n+    }\n }\n \n // JUSTIFICATION: defn of the suggested wrapper fns"}, {"sha": "3fd7a7110fd973191eb0fb6ab0bef6fc09a4cf24", "filename": "src/test/ui/diagnostic-width/long-E0308.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.rs?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -0,0 +1,86 @@\n+// compile-flags: --diagnostic-width=60\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+\n+struct Atype<T, K>(T, K);\n+struct Btype<T, K>(T, K);\n+struct Ctype<T, K>(T, K);\n+\n+fn main() {\n+    let x: Atype<\n+      Btype<\n+        Ctype<\n+          Atype<\n+            Btype<\n+              Ctype<\n+                Atype<\n+                  Btype<\n+                    Ctype<i32, i32>,\n+                    i32\n+                  >,\n+                  i32\n+                >,\n+                i32\n+              >,\n+              i32\n+            >,\n+            i32\n+          >,\n+          i32\n+        >,\n+        i32\n+      >,\n+      i32\n+    > = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+        Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+            Ok(\"\")\n+        ))))))))))))))))))))))))))))))\n+    ))))))))))))))))))))))))))))));\n+    //~^^^^^ ERROR E0308\n+\n+    let _ = Some(Ok(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(\n+        Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(\n+            Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(Some(\n+                Some(Some(Some(Some(Some(Some(Some(Some(Some(\"\")))))))))\n+            )))))))))))))))))\n+        ))))))))))))))))))\n+    ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+        Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+            Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+        ))))))))))))))))))))))))))))))\n+    ))))))))))))))))))))))));\n+    //~^^^^^ ERROR E0308\n+\n+    let x: Atype<\n+      Btype<\n+        Ctype<\n+          Atype<\n+            Btype<\n+              Ctype<\n+                Atype<\n+                  Btype<\n+                    Ctype<i32, i32>,\n+                    i32\n+                  >,\n+                  i32\n+                >,\n+                i32\n+              >,\n+              i32\n+            >,\n+            i32\n+          >,\n+          i32\n+        >,\n+        i32\n+      >,\n+      i32\n+    > = ();\n+    //~^ ERROR E0308\n+\n+    let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+        Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(\n+            Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+        ))))))))))))))))))))))))))))))\n+    ))))))))))))))))))))))));\n+    //~^^^^^ ERROR E0308\n+}"}, {"sha": "487ab23a1c100ea37ce18f68b701a09b563454a7", "filename": "src/test/ui/diagnostic-width/long-E0308.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -0,0 +1,80 @@\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:33:9\n+   |\n+LL |        let x: Atype<\n+   |  _____________-\n+LL | |        Btype<\n+LL | |          Ctype<\n+LL | |            Atype<\n+...  |\n+LL | |        i32\n+LL | |      > = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n+   | | _____-___^\n+   | ||_____|\n+   |  |     expected due to this\n+LL |  |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n+LL |  |             Ok(\"\")\n+LL |  |         ))))))))))))))))))))))))))))))\n+LL |  |     ))))))))))))))))))))))))))))));\n+   |  |__________________________________^ expected struct `Atype`, found enum `Result`\n+   |\n+   = note: expected struct `Atype<Btype<..., ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+                found enum `Result<Result<..., ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:46:26\n+   |\n+LL |       ))))))))))))))))) == Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n+   |  __________________________^\n+LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n+LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+LL | |         ))))))))))))))))))))))))))))))\n+LL | |     ))))))))))))))))))))))));\n+   | |____________________________^ expected enum `Option`, found enum `Result`\n+   |\n+   = note: expected enum `Option<Result<..., ...>>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+              found enum `Result<Result<..., ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:77:9\n+   |\n+LL |       let x: Atype<\n+   |  ____________-\n+LL | |       Btype<\n+LL | |         Ctype<\n+LL | |           Atype<\n+...  |\n+LL | |       i32\n+LL | |     > = ();\n+   | |     -   ^^ expected struct `Atype`, found `()`\n+   | |_____|\n+   |       expected due to this\n+   |\n+   = note: expected struct `Atype<Btype<..., ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+           found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/long-E0308.rs:80:17\n+   |\n+LL |       let _: () = Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(O...\n+   |  ____________--___^\n+   | |            |\n+   | |            expected due to this\n+LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n+LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n+LL | |         ))))))))))))))))))))))))))))))\n+LL | |     ))))))))))))))))))))))));\n+   | |____________________________^ expected `()`, found enum `Result`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<Result<..., ...>, ...>`\n+           the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "451a683ac8a6effeec6de3067304913763e77885", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -5,7 +5,7 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n-note: required for `Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>` to implement `Foo`\n+note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n   --> $DIR/E0275.rs:6:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}"}, {"sha": "78df445972c94d34102044a095a0c10edc600cb4", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -14,7 +14,7 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>` to implement `Foo`\n+note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>>>>>>>>` to implement `Foo`\n   --> $DIR/issue-20413.rs:9:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n@@ -30,13 +30,13 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n@@ -52,13 +52,13 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {"}, {"sha": "1f50b06a0e4c553fc5b39160878ca3bd22c0d560", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -5,7 +5,7 @@ LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n-note: required for `GetNext<<<<<<... as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>` to implement `Next`\n+note: required for `GetNext<<<<<<<... as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>` to implement `Next`\n   --> $DIR/issue-23122-2.rs:10:15\n    |\n LL | impl<T: Next> Next for GetNext<T> {"}, {"sha": "dde8ad1b6b327615fe66c1c2c75a644275dd3477", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -12,7 +12,7 @@ LL |     func(&mut iter.map(|x| x + 1))\n error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n+   = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>, ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "fd71248d9cb458fc53300679e1d72ea404b778e1", "filename": "src/test/ui/regions/issue-102374.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fregions%2Fissue-102374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fregions%2Fissue-102374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102374.rs?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n use std::cell::Cell;\n \n #[rustfmt::skip]"}, {"sha": "157850693ab506ad96fd63ebed1062efe6ac83c5", "filename": "src/test/ui/regions/issue-102374.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fregions%2Fissue-102374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Fregions%2Fissue-102374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102374.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-102374.rs:16:5\n+  --> $DIR/issue-102374.rs:17:5\n    |\n LL | ) -> i32 {\n    |      --- expected `i32` because of return type\n LL |     f\n    |     ^ expected `i32`, found fn pointer\n    |\n    = note:    expected type `i32`\n-           found fn pointer `for<'z1, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'z0> fn(Cell<(&'z1 i32, &'a i32, &'b i32, &'c i32, &'d i32, &'e i32, &'f i32, &'g i32, &'h i32, &'i i32, &'j i32, &'k i32, &'l i32, &'m i32, &'n i32, &'o i32, &'p i32, &'q i32, &'r i32, &'s i32, &'t i32, &'u i32, &'v i32, &'w i32, &'x i32, &'y i32, &'z i32, &'z0 i32)>)`\n+           found fn pointer `for<'z1, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'z0> fn(Cell<...>)`\n+           the full type name has been written to '$TEST_BUILD_DIR/regions/issue-102374/issue-102374.long-type-hash.txt'\n \n error: aborting due to previous error\n "}, {"sha": "1f18c5daf66e3dd2c0944da6fe3f8becd61e2552", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "patch": "@@ -17,7 +17,7 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required for `std::iter::Empty<()>` to implement `Iterator`\n    = note: 171 redundant requirements hidden\n-   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>` to implement `Iterator`\n+   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>, ...>>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/traits/issue-91949-hangs-on-recursion/issue-91949-hangs-on-recursion.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted"}]}