{"sha": "300d10fb9992a1f2770ab5edb448abcabe1764c9", "node_id": "C_kwDOAAsO6NoAKDMwMGQxMGZiOTk5MmExZjI3NzBhYjVlZGI0NDhhYmNhYmUxNzY0Yzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T17:14:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T17:14:42Z"}, "message": "Auto merge of #104321 - Swatinem:async-gen, r=oli-obk\n\nAvoid `GenFuture` shim when compiling async constructs\n\nPreviously, async constructs would be lowered to \"normal\" generators, with an additional `from_generator` / `GenFuture` shim in between to convert from `Generator` to `Future`.\n\nThe compiler will now special-case these generators internally so that async constructs will *directly* implement `Future` without the need to go through the `from_generator` / `GenFuture` shim.\n\nThe primary motivation for this change was hiding this implementation detail in stack traces and debuginfo, but it can in theory also help the optimizer as there is less abstractions to see through.\n\n---\n\nGiven this demo code:\n\n```rust\npub async fn a(arg: u32) -> Backtrace {\n    let bt = b().await;\n    let _arg = arg;\n    bt\n}\n\npub async fn b() -> Backtrace {\n    Backtrace::force_capture()\n}\n```\n\nI would get the following with the latest stable compiler (on Windows):\n\n```\n   4: async_codegen::b::async_fn$0\n             at .\\src\\lib.rs:10\n   5: core::future::from_generator::impl$1::poll<enum2$<async_codegen::b::async_fn_env$0> >\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120\\library\\core\\src\\future\\mod.rs:91\n   6: async_codegen::a::async_fn$0\n             at .\\src\\lib.rs:4\n   7: core::future::from_generator::impl$1::poll<enum2$<async_codegen::a::async_fn_env$0> >\n             at /rustc/897e37553bba8b42751c67658967889d11ecd120\\library\\core\\src\\future\\mod.rs:91\n```\n\nwhereas now I get a much cleaner stack trace:\n\n```\n   3: async_codegen::b::async_fn$0\n             at .\\src\\lib.rs:10\n   4: async_codegen::a::async_fn$0\n             at .\\src\\lib.rs:4\n```", "tree": {"sha": "247c947464cba0e03105d65ce4ebbd48fd8cd855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247c947464cba0e03105d65ce4ebbd48fd8cd855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/300d10fb9992a1f2770ab5edb448abcabe1764c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/300d10fb9992a1f2770ab5edb448abcabe1764c9", "html_url": "https://github.com/rust-lang/rust/commit/300d10fb9992a1f2770ab5edb448abcabe1764c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/300d10fb9992a1f2770ab5edb448abcabe1764c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6a77ed951b63aad0133469fb8914d121e156ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6a77ed951b63aad0133469fb8914d121e156ce", "html_url": "https://github.com/rust-lang/rust/commit/ac6a77ed951b63aad0133469fb8914d121e156ce"}, {"sha": "1ebdcca8b97feca67ce077a2bad87e7655bc774a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ebdcca8b97feca67ce077a2bad87e7655bc774a", "html_url": "https://github.com/rust-lang/rust/commit/1ebdcca8b97feca67ce077a2bad87e7655bc774a"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "ae5f9424b2323b015f34a85547c880b5b387bb49", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/300d10fb9992a1f2770ab5edb448abcabe1764c9/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300d10fb9992a1f2770ab5edb448abcabe1764c9/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=300d10fb9992a1f2770ab5edb448abcabe1764c9", "patch": "@@ -427,9 +427,7 @@ fn lint_for_missing_headers(\n                 let body = cx.tcx.hir().body(body_id);\n                 let ret_ty = typeck.expr_ty(body.value);\n                 if implements_trait(cx, ret_ty, future, &[]);\n-                if let ty::Opaque(_, subs) = ret_ty.kind();\n-                if let Some(gen) = subs.types().next();\n-                if let ty::Generator(_, subs, _) = gen.kind();\n+                if let ty::Generator(_, subs, _) = ret_ty.kind();\n                 if is_type_diagnostic_item(cx, subs.as_generator().return_ty(), sym::Result);\n                 then {\n                     span_lint("}, {"sha": "6a98df4991259a34e7d99424ab988314c58440c8", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/300d10fb9992a1f2770ab5edb448abcabe1764c9/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/300d10fb9992a1f2770ab5edb448abcabe1764c9/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=300d10fb9992a1f2770ab5edb448abcabe1764c9", "patch": "@@ -177,7 +177,7 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(args) = cx\n             .tcx\n             .lang_items()\n-            .from_generator_fn()\n+            .identity_future_fn()\n             .and_then(|def_id| match_function_call_with_def_id(cx, block_expr, def_id));\n         if args.len() == 1;\n         if let Expr {"}, {"sha": "c6acf24c21ecf73cd57470a72d0f1a82a3c602a6", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/300d10fb9992a1f2770ab5edb448abcabe1764c9/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/300d10fb9992a1f2770ab5edb448abcabe1764c9/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=300d10fb9992a1f2770ab5edb448abcabe1764c9", "patch": "@@ -45,7 +45,7 @@ if let ExprKind::Closure(CaptureBy::Value, fn_decl, body_id, _, None) = expr.kin\n     && expr1 = &cx.tcx.hir().body(body_id).value\n     && let ExprKind::Call(func, args) = expr1.kind\n     && let ExprKind::Path(ref qpath) = func.kind\n-    && matches!(qpath, QPath::LangItem(LangItem::FromGenerator, _))\n+    && matches!(qpath, QPath::LangItem(LangItem::IdentityFuture, _))\n     && args.len() == 1\n     && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = args[0].kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl1.output"}]}