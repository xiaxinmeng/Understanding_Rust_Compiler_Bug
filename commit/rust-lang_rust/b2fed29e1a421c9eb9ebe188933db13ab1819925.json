{"sha": "b2fed29e1a421c9eb9ebe188933db13ab1819925", "node_id": "C_kwDOAAsO6NoAKGIyZmVkMjllMWE0MjFjOWViOWViZTE4ODkzM2RiMTNhYjE4MTk5MjU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-12T12:47:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-12T12:47:57Z"}, "message": "Update Cranelift", "tree": {"sha": "da46985781e9e2ceac0f287c337d4a2cc0e110e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da46985781e9e2ceac0f287c337d4a2cc0e110e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2fed29e1a421c9eb9ebe188933db13ab1819925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2fed29e1a421c9eb9ebe188933db13ab1819925", "html_url": "https://github.com/rust-lang/rust/commit/b2fed29e1a421c9eb9ebe188933db13ab1819925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2fed29e1a421c9eb9ebe188933db13ab1819925/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d195107514cbdfe6b4fb6e077b3b46003bf24884", "url": "https://api.github.com/repos/rust-lang/rust/commits/d195107514cbdfe6b4fb6e077b3b46003bf24884", "html_url": "https://github.com/rust-lang/rust/commit/d195107514cbdfe6b4fb6e077b3b46003bf24884"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "cdf471d81eb6f1298e5c66cd7efc7f9caa5640df", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2fed29e1a421c9eb9ebe188933db13ab1819925/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b2fed29e1a421c9eb9ebe188933db13ab1819925/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b2fed29e1a421c9eb9ebe188933db13ab1819925", "patch": "@@ -34,15 +34,15 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n@@ -58,7 +58,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n@@ -67,17 +67,17 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-shared\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n \n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -88,7 +88,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-jit\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -105,7 +105,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-module\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -116,7 +116,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-native\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -126,7 +126,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-object\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#783bb1f759705cc1d5116340431015cee6728760\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\","}, {"sha": "2a9b399b9eddb7a5a23f160892fb857c8aebf8aa", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=b2fed29e1a421c9eb9ebe188933db13ab1819925", "patch": "@@ -204,7 +204,6 @@ pub(super) fn from_casted_value<'tcx>(\n         // It may also be smaller for example when the type is a wrapper around an integer with a\n         // larger alignment than the integer.\n         size: (std::cmp::max(abi_param_size, layout_size) + 15) / 16 * 16,\n-        offset: None,\n     });\n     let ptr = Pointer::new(fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0));\n     let mut offset = 0;"}, {"sha": "b16b43cc4f84f00dda3bb2b2fc61c1c61bd12977", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b2fed29e1a421c9eb9ebe188933db13ab1819925", "patch": "@@ -203,7 +203,6 @@ pub(crate) fn verify_func(\n                 tcx.sess.err(&format!(\"{:?}\", err));\n                 let pretty_error = cranelift_codegen::print_errors::pretty_verifier_error(\n                     &func,\n-                    None,\n                     Some(Box::new(writer)),\n                     err,\n                 );"}, {"sha": "e0116c8b77876bbe356629cacbf0ee5b8dfd6e31", "filename": "src/inline_asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=b2fed29e1a421c9eb9ebe188933db13ab1819925", "patch": "@@ -263,7 +263,6 @@ fn call_inline_asm<'tcx>(\n ) {\n     let stack_slot = fx.bcx.func.create_stack_slot(StackSlotData {\n         kind: StackSlotKind::ExplicitSlot,\n-        offset: None,\n         size: u32::try_from(slot_size.bytes()).unwrap(),\n     });\n     if fx.clif_comments.enabled() {"}, {"sha": "4dffb89e1057071035c32b32974cbaa4a3ad1dbc", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=b2fed29e1a421c9eb9ebe188933db13ab1819925", "patch": "@@ -57,7 +57,7 @@ use std::io::Write;\n \n use cranelift_codegen::{\n     entity::SecondaryMap,\n-    ir::{entities::AnyEntity, function::DisplayFunctionAnnotations},\n+    ir::entities::AnyEntity,\n     write::{FuncWriter, PlainWriter},\n };\n \n@@ -129,7 +129,6 @@ impl FuncWriter for &'_ CommentWriter {\n         &mut self,\n         w: &mut dyn fmt::Write,\n         func: &Function,\n-        reg_info: Option<&isa::RegInfo>,\n     ) -> Result<bool, fmt::Error> {\n         for comment in &self.global_comments {\n             if !comment.is_empty() {\n@@ -142,7 +141,7 @@ impl FuncWriter for &'_ CommentWriter {\n             writeln!(w)?;\n         }\n \n-        self.super_preamble(w, func, reg_info)\n+        self.super_preamble(w, func)\n     }\n \n     fn write_entity_definition(\n@@ -165,23 +164,21 @@ impl FuncWriter for &'_ CommentWriter {\n         &mut self,\n         w: &mut dyn fmt::Write,\n         func: &Function,\n-        isa: Option<&dyn isa::TargetIsa>,\n         block: Block,\n         indent: usize,\n     ) -> fmt::Result {\n-        PlainWriter.write_block_header(w, func, isa, block, indent)\n+        PlainWriter.write_block_header(w, func, block, indent)\n     }\n \n     fn write_instruction(\n         &mut self,\n         w: &mut dyn fmt::Write,\n         func: &Function,\n         aliases: &SecondaryMap<Value, Vec<Value>>,\n-        isa: Option<&dyn isa::TargetIsa>,\n         inst: Inst,\n         indent: usize,\n     ) -> fmt::Result {\n-        PlainWriter.write_instruction(w, func, aliases, isa, inst, indent)?;\n+        PlainWriter.write_instruction(w, func, aliases, inst, indent)?;\n         if let Some(comment) = self.entity_comments.get(&inst.into()) {\n             writeln!(w, \"; {}\", comment.replace('\\n', \"\\n; \"))?;\n         }\n@@ -249,7 +246,6 @@ pub(crate) fn write_clif_file<'tcx>(\n                 &mut clif_comments,\n                 &mut clif,\n                 &context.func,\n-                &DisplayFunctionAnnotations { isa: Some(isa), value_ranges: None },\n             )\n             .unwrap();\n \n@@ -278,7 +274,6 @@ impl fmt::Debug for FunctionCx<'_, '_, '_> {\n             &mut &self.clif_comments,\n             &mut clif,\n             &self.bcx.func,\n-            &DisplayFunctionAnnotations::default(),\n         )\n         .unwrap();\n         writeln!(f, \"\\n{}\", clif)"}, {"sha": "b13dc54653b1c72bbe3d959c42d628b6313691ca", "filename": "src/value_and_place.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fed29e1a421c9eb9ebe188933db13ab1819925/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=b2fed29e1a421c9eb9ebe188933db13ab1819925", "patch": "@@ -329,7 +329,6 @@ impl<'tcx> CPlace<'tcx> {\n             // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n             // specify stack slot alignment.\n             size: (u32::try_from(layout.size.bytes()).unwrap() + 15) / 16 * 16,\n-            offset: None,\n         });\n         CPlace { inner: CPlaceInner::Addr(Pointer::stack_slot(stack_slot), None), layout }\n     }\n@@ -472,7 +471,6 @@ impl<'tcx> CPlace<'tcx> {\n                         // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n                         // specify stack slot alignment.\n                         size: (src_ty.bytes() + 15) / 16 * 16,\n-                        offset: None,\n                     });\n                     let ptr = Pointer::stack_slot(stack_slot);\n                     ptr.store(fx, data, MemFlags::trusted());"}]}