{"sha": "b08e51d79a0a4051eab997007ff36d9ca1ee4ace", "node_id": "C_kwDOAAsO6NoAKGIwOGU1MWQ3OWEwYTQwNTFlYWI5OTcwMDdmZjM2ZDljYTFlZTRhY2U", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T15:54:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-23T16:30:48Z"}, "message": "refactor away some 'else { None }'", "tree": {"sha": "7bc7cd1dc97473bb14a68ee03cde2481d6bd33f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc7cd1dc97473bb14a68ee03cde2481d6bd33f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08e51d79a0a4051eab997007ff36d9ca1ee4ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08e51d79a0a4051eab997007ff36d9ca1ee4ace", "html_url": "https://github.com/rust-lang/rust/commit/b08e51d79a0a4051eab997007ff36d9ca1ee4ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08e51d79a0a4051eab997007ff36d9ca1ee4ace/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302e9ae206ed148fc009d84c05ce0c99877ef6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/302e9ae206ed148fc009d84c05ce0c99877ef6aa", "html_url": "https://github.com/rust-lang/rust/commit/302e9ae206ed148fc009d84c05ce0c99877ef6aa"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "3e45f77d54c3a33ad8ca17124ce45a046596220d", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b08e51d79a0a4051eab997007ff36d9ca1ee4ace/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08e51d79a0a4051eab997007ff36d9ca1ee4ace/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b08e51d79a0a4051eab997007ff36d9ca1ee4ace", "patch": "@@ -367,20 +367,14 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             measureme::Profiler::new(out).expect(\"Couldn't create `measureme` profiler\")\n         });\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n-        let stacked_borrows = if config.stacked_borrows {\n-            Some(RefCell::new(stacked_borrows::GlobalStateInner::new(\n+        let stacked_borrows = config.stacked_borrows.then(|| {\n+            RefCell::new(stacked_borrows::GlobalStateInner::new(\n                 config.tracked_pointer_tags.clone(),\n                 config.tracked_call_ids.clone(),\n                 config.retag_fields,\n-            )))\n-        } else {\n-            None\n-        };\n-        let data_race = if config.data_race_detector {\n-            Some(data_race::GlobalState::new(config))\n-        } else {\n-            None\n-        };\n+            ))\n+        });\n+        let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n         Evaluator {\n             stacked_borrows,\n             data_race,\n@@ -691,32 +685,24 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         }\n \n         let alloc = alloc.into_owned();\n-        let stacks = if let Some(stacked_borrows) = &ecx.machine.stacked_borrows {\n-            Some(Stacks::new_allocation(\n+        let stacks = ecx.machine.stacked_borrows.as_ref().map(|stacked_borrows| {\n+            Stacks::new_allocation(\n                 id,\n                 alloc.size(),\n                 stacked_borrows,\n                 kind,\n                 ecx.machine.current_span(),\n-            ))\n-        } else {\n-            None\n-        };\n-        let race_alloc = if let Some(data_race) = &ecx.machine.data_race {\n-            Some(data_race::AllocExtra::new_allocation(\n+            )\n+        });\n+        let race_alloc = ecx.machine.data_race.as_ref().map(|data_race| {\n+            data_race::AllocExtra::new_allocation(\n                 data_race,\n                 &ecx.machine.threads,\n                 alloc.size(),\n                 kind,\n-            ))\n-        } else {\n-            None\n-        };\n-        let buffer_alloc = if ecx.machine.weak_memory {\n-            Some(weak_memory::AllocExtra::new_allocation())\n-        } else {\n-            None\n-        };\n+            )\n+        });\n+        let buffer_alloc = ecx.machine.weak_memory.then(weak_memory::AllocExtra::new_allocation);\n         let alloc: Allocation<Provenance, Self::AllocExtra> = alloc.adjust_from_tcx(\n             &ecx.tcx,\n             AllocExtra {"}]}