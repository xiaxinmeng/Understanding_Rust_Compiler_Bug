{"sha": "7bc5839e99411aad9061a632b62075d1346cbb3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzU4MzllOTk0MTFhYWQ5MDYxYTYzMmI2MjA3NWQxMzQ2Y2JiM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T17:32:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T17:32:28Z"}, "message": "Auto merge of #77337 - lzutao:asm-mips64, r=Amanieu\n\nAdd asm! support for mips64\n\n- [x] Updated `src/doc/unstable-book/src/library-features/asm.md`.\n- [ ] No vector type support. I don't know much about those types.\n\ncc #76839", "tree": {"sha": "97beb238b58e124bba9cd8599fea132f38885b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97beb238b58e124bba9cd8599fea132f38885b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc5839e99411aad9061a632b62075d1346cbb3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc5839e99411aad9061a632b62075d1346cbb3b", "html_url": "https://github.com/rust-lang/rust/commit/7bc5839e99411aad9061a632b62075d1346cbb3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc5839e99411aad9061a632b62075d1346cbb3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b71ed68b69361ab0d45653a972ad4cf7a65cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b71ed68b69361ab0d45653a972ad4cf7a65cba", "html_url": "https://github.com/rust-lang/rust/commit/87b71ed68b69361ab0d45653a972ad4cf7a65cba"}, {"sha": "4d570fb45e7650f274853a2f47f86d17c2aa0784", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d570fb45e7650f274853a2f47f86d17c2aa0784", "html_url": "https://github.com/rust-lang/rust/commit/4d570fb45e7650f274853a2f47f86d17c2aa0784"}], "stats": {"total": 269, "additions": 161, "deletions": 108}, "files": [{"sha": "1eb852e6b012b271e20d26dddc9d1706a285f50e", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7bc5839e99411aad9061a632b62075d1346cbb3b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc5839e99411aad9061a632b62075d1346cbb3b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=7bc5839e99411aad9061a632b62075d1346cbb3b", "patch": "@@ -259,7 +259,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {}\n                 InlineAsmArch::Nvptx64 => {}\n                 InlineAsmArch::Hexagon => {}\n-                InlineAsmArch::Mips => {}\n+                InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -710,6 +710,7 @@ fn llvm_fixup_input(\n             // MIPS only supports register-length arithmetics.\n             Primitive::Int(Integer::I8 | Integer::I16, _) => bx.zext(value, bx.cx.type_i32()),\n             Primitive::F32 => bx.bitcast(value, bx.cx.type_i32()),\n+            Primitive::F64 => bx.bitcast(value, bx.cx.type_i64()),\n             _ => value,\n         },\n         _ => value,\n@@ -785,6 +786,7 @@ fn llvm_fixup_output(\n             Primitive::Int(Integer::I8, _) => bx.trunc(value, bx.cx.type_i8()),\n             Primitive::Int(Integer::I16, _) => bx.trunc(value, bx.cx.type_i16()),\n             Primitive::F32 => bx.bitcast(value, bx.cx.type_f32()),\n+            Primitive::F64 => bx.bitcast(value, bx.cx.type_f64()),\n             _ => value,\n         },\n         _ => value,\n@@ -854,6 +856,7 @@ fn llvm_fixup_output_type(\n             // MIPS only supports register-length arithmetics.\n             Primitive::Int(Integer::I8 | Integer::I16, _) => cx.type_i32(),\n             Primitive::F32 => cx.type_i32(),\n+            Primitive::F64 => cx.type_i64(),\n             _ => layout.llvm_type(cx),\n         },\n         _ => layout.llvm_type(cx),"}, {"sha": "b19489aa439bf54ddcb27cbbd52baca70c503f1f", "filename": "compiler/rustc_target/src/asm/mips.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7bc5839e99411aad9061a632b62075d1346cbb3b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc5839e99411aad9061a632b62075d1346cbb3b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs?ref=7bc5839e99411aad9061a632b62075d1346cbb3b", "patch": "@@ -32,43 +32,44 @@ impl MipsInlineAsmRegClass {\n \n     pub fn supported_types(\n         self,\n-        _arch: InlineAsmArch,\n+        arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n-        match self {\n-            Self::reg => types! { _: I8, I16, I32, F32; },\n-            Self::freg => types! { _: F32; },\n+        match (self, arch) {\n+            (Self::reg, InlineAsmArch::Mips64) => types! { _: I8, I16, I32, I64, F32, F64; },\n+            (Self::reg, _) => types! { _: I8, I16, I32, F32; },\n+            (Self::freg, _) => types! { _: F32, F64; },\n         }\n     }\n }\n \n // The reserved registers are somewhat taken from <https://git.io/JUR1k#L150>.\n def_regs! {\n     Mips MipsInlineAsmReg MipsInlineAsmRegClass {\n-        v0: reg = [\"$2\", \"$v0\"],\n-        v1: reg = [\"$3\", \"$v1\"],\n-        a0: reg = [\"$4\", \"$a0\"],\n-        a1: reg = [\"$5\", \"$a1\"],\n-        a2: reg = [\"$6\", \"$a2\"],\n-        a3: reg = [\"$7\", \"$a3\"],\n+        r2: reg = [\"$2\"],\n+        r3: reg = [\"$3\"],\n+        r4: reg = [\"$4\"],\n+        r5: reg = [\"$5\"],\n+        r6: reg = [\"$6\"],\n+        r7: reg = [\"$7\"],\n         // FIXME: Reserve $t0, $t1 if in mips16 mode.\n-        t0: reg = [\"$8\", \"$t0\"],\n-        t1: reg = [\"$9\", \"$t1\"],\n-        t2: reg = [\"$10\", \"$t2\"],\n-        t3: reg = [\"$11\", \"$t3\"],\n-        t4: reg = [\"$12\", \"$t4\"],\n-        t5: reg = [\"$13\", \"$t5\"],\n-        t6: reg = [\"$14\", \"$t6\"],\n-        t7: reg = [\"$15\", \"$t7\"],\n-        s0: reg = [\"$16\", \"$s0\"],\n-        s1: reg = [\"$17\", \"$s1\"],\n-        s2: reg = [\"$18\", \"$s2\"],\n-        s3: reg = [\"$19\", \"$s3\"],\n-        s4: reg = [\"$20\", \"$s4\"],\n-        s5: reg = [\"$21\", \"$s5\"],\n-        s6: reg = [\"$22\", \"$s6\"],\n-        s7: reg = [\"$23\", \"$s7\"],\n-        t8: reg = [\"$24\", \"$t8\"],\n-        t9: reg = [\"$25\", \"$t9\"],\n+        r8: reg = [\"$8\"],\n+        r9: reg = [\"$9\"],\n+        r10: reg = [\"$10\"],\n+        r11: reg = [\"$11\"],\n+        r12: reg = [\"$12\"],\n+        r13: reg = [\"$13\"],\n+        r14: reg = [\"$14\"],\n+        r15: reg = [\"$15\"],\n+        r16: reg = [\"$16\"],\n+        r17: reg = [\"$17\"],\n+        r18: reg = [\"$18\"],\n+        r19: reg = [\"$19\"],\n+        r20: reg = [\"$20\"],\n+        r21: reg = [\"$21\"],\n+        r22: reg = [\"$22\"],\n+        r23: reg = [\"$23\"],\n+        r24: reg = [\"$24\"],\n+        r25: reg = [\"$25\"],\n         f0: freg = [\"$f0\"],\n         f1: freg = [\"$f1\"],\n         f2: freg = [\"$f2\"],\n@@ -101,21 +102,21 @@ def_regs! {\n         f29: freg = [\"$f29\"],\n         f30: freg = [\"$f30\"],\n         f31: freg = [\"$f31\"],\n-        #error = [\"$0\", \"$zero\"] =>\n+        #error = [\"$0\"] =>\n             \"constant zero cannot be used as an operand for inline asm\",\n-        #error = [\"$1\", \"$at\"] =>\n+        #error = [\"$1\"] =>\n             \"reserved for assembler (Assembler Temp)\",\n-        #error = [\"$26\", \"$k0\"] =>\n+        #error = [\"$26\"] =>\n             \"OS-reserved register cannot be used as an operand for inline asm\",\n-        #error = [\"$27\", \"$k1\"] =>\n+        #error = [\"$27\"] =>\n             \"OS-reserved register cannot be used as an operand for inline asm\",\n-        #error = [\"$28\", \"$gp\"] =>\n+        #error = [\"$28\"] =>\n             \"the global pointer cannot be used as an operand for inline asm\",\n-        #error = [\"$29\", \"$sp\"] =>\n+        #error = [\"$29\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n-        #error = [\"$30\", \"$s8\", \"$fp\"] =>\n+        #error = [\"$30\"] =>\n             \"the frame pointer cannot be used as an operand for inline asm\",\n-        #error = [\"$31\", \"$ra\"] =>\n+        #error = [\"$31\"] =>\n             \"the return address register cannot be used as an operand for inline asm\",\n     }\n }"}, {"sha": "0d691dc441eb130aef932e306c735948be1da5d8", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bc5839e99411aad9061a632b62075d1346cbb3b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc5839e99411aad9061a632b62075d1346cbb3b/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=7bc5839e99411aad9061a632b62075d1346cbb3b", "patch": "@@ -176,6 +176,7 @@ pub enum InlineAsmArch {\n     Nvptx64,\n     Hexagon,\n     Mips,\n+    Mips64,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -192,6 +193,7 @@ impl FromStr for InlineAsmArch {\n             \"nvptx64\" => Ok(Self::Nvptx64),\n             \"hexagon\" => Ok(Self::Hexagon),\n             \"mips\" => Ok(Self::Mips),\n+            \"mips64\" => Ok(Self::Mips64),\n             _ => Err(()),\n         }\n     }\n@@ -259,7 +261,7 @@ impl InlineAsmReg {\n             InlineAsmArch::Hexagon => {\n                 Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::Mips => {\n+            InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n         })\n@@ -409,7 +411,9 @@ impl InlineAsmRegClass {\n                 InlineAsmArch::Hexagon => {\n                     Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?)\n                 }\n-                InlineAsmArch::Mips => Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?),\n+                InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n+                    Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n+                }\n             })\n         })\n     }\n@@ -565,7 +569,7 @@ pub fn allocatable_registers(\n             hexagon::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n-        InlineAsmArch::Mips => {\n+        InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n             let mut map = mips::regclass_map();\n             mips::fill_reg_map(arch, has_feature, target, &mut map);\n             map"}, {"sha": "6e4e1f78b96940abd8fda07725e9d1535fdfe9ff", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7bc5839e99411aad9061a632b62075d1346cbb3b/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/7bc5839e99411aad9061a632b62075d1346cbb3b/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=7bc5839e99411aad9061a632b62075d1346cbb3b", "patch": "@@ -27,7 +27,7 @@ Inline assembly is currently supported on the following architectures:\n - RISC-V\n - NVPTX\n - Hexagon\n-- MIPS32\n+- MIPS32r2 and MIPS64r2\n \n ## Basic usage\n \n@@ -513,8 +513,8 @@ Here is the list of currently supported register classes:\n | ARM | `qreg` | `q[0-15]` | `w` |\n | ARM | `qreg_low8` | `q[0-7]` | `t` |\n | ARM | `qreg_low4` | `q[0-3]` | `x` |\n-| MIPS32 | `reg` | `$[2-25]` | `r` |\n-| MIPS32 | `freg` | `$f[0-31]` | `f` |\n+| MIPS | `reg` | `$[2-25]` | `r` |\n+| MIPS | `freg` | `$f[0-31]` | `f` |\n | NVPTX | `reg16` | None\\* | `h` |\n | NVPTX | `reg32` | None\\* | `r` |\n | NVPTX | `reg64` | None\\* | `l` |\n@@ -551,7 +551,9 @@ Each register class has constraints on which value types they can be used with.\n | ARM | `dreg` | `vfp2` | `i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2` |\n | ARM | `qreg` | `neon` | `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4` |\n | MIPS32 | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n-| MIPS32 | `freg` | None | `f32` |\n+| MIPS32 | `freg` | None | `f32`, `f64` |\n+| MIPS64 | `reg` | None | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n+| MIPS64 | `freg` | None | `f32`, `f64` |\n | NVPTX | `reg16` | None | `i8`, `i16` |\n | NVPTX | `reg32` | None | `i8`, `i16`, `i32`, `f32` |\n | NVPTX | `reg64` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n@@ -600,7 +602,6 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | ARM | `r13` | `sp` |\n | ARM | `r14` | `lr` |\n | ARM | `r15` | `pc` |\n-| MIPS32 | `$[2-25]` | Please [see the Wikipedia page][mips-regs] |\n | RISC-V | `x0` | `zero` |\n | RISC-V | `x1` | `ra` |\n | RISC-V | `x2` | `sp` |\n@@ -621,8 +622,6 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | Hexagon | `r30` | `fr` |\n | Hexagon | `r31` | `lr` |\n \n-[mips-regs]: https://en.wikibooks.org/wiki/MIPS_Assembly/Register_File#Registers\n-\n Some registers cannot be used for input or output operands:\n \n | Architecture | Unsupported register | Reason |\n@@ -637,11 +636,11 @@ Some registers cannot be used for input or output operands:\n | x86 | `st([0-7])` | x87 registers are not currently supported (but may be in the future). |\n | AArch64 | `xzr` | This is a constant zero register which can't be modified. |\n | ARM | `pc` | This is the program counter, not a real register. |\n-| MIPS32 | `$0` or `$zero` | This is a constant zero register which can't be modified. |\n-| MIPS32 | `$1` or `$at` | Reserved for assembler. |\n-| MIPS32 | `$26`/`$k0`, `$27`/`$k1` | OS-reserved registers. |\n-| MIPS32 | `$28`/`$gp` | Global pointer cannot be used as inputs or outputs. |\n-| MIPS32 | `$ra` | Return address cannot be used as inputs or outputs. |\n+| MIPS | `$0` or `$zero` | This is a constant zero register which can't be modified. |\n+| MIPS | `$1` or `$at` | Reserved for assembler. |\n+| MIPS | `$26`/`$k0`, `$27`/`$k1` | OS-reserved registers. |\n+| MIPS | `$28`/`$gp` | Global pointer cannot be used as inputs or outputs. |\n+| MIPS | `$ra` | Return address cannot be used as inputs or outputs. |\n | RISC-V | `x0` | This is a constant zero register which can't be modified. |\n | RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n | Hexagon | `lr` | This is the link register which cannot be used as an input or output. |\n@@ -689,8 +688,8 @@ The supported modifiers are a subset of LLVM's (and GCC's) [asm template argumen\n | ARM | `dreg` | None | `d0` | `P` |\n | ARM | `qreg` | None | `q0` | `q` |\n | ARM | `qreg` | `e` / `f` | `d0` / `d1` | `e` / `f` |\n-| MIPS32 | `reg` | None | `$2` | None |\n-| MIPS32 | `freg` | None | `$f0` | None |\n+| MIPS | `reg` | None | `$2` | None |\n+| MIPS | `freg` | None | `$f0` | None |\n | NVPTX | `reg16` | None | `rs0` | None |\n | NVPTX | `reg32` | None | `r0` | None |\n | NVPTX | `reg64` | None | `rd0` | None |"}, {"sha": "04e840dc166d822e84e9930c89db9fd7d3078880", "filename": "src/test/assembly/asm/mips-types.rs", "status": "modified", "additions": 100, "deletions": 54, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/7bc5839e99411aad9061a632b62075d1346cbb3b/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc5839e99411aad9061a632b62075d1346cbb3b/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=7bc5839e99411aad9061a632b62075d1346cbb3b", "patch": "@@ -1,6 +1,8 @@\n // no-system-llvm\n+// revisions: mips32 mips64\n // assembly-output: emit-asm\n-// compile-flags: --target mips-unknown-linux-gnu\n+//[mips32] compile-flags: --target mips-unknown-linux-gnu\n+//[mips64] compile-flags: --target mips64-unknown-linux-gnuabi64\n // needs-llvm-components: mips\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n@@ -32,7 +34,9 @@ impl Copy for i8 {}\n impl Copy for u8 {}\n impl Copy for i16 {}\n impl Copy for i32 {}\n+impl Copy for i64 {}\n impl Copy for f32 {}\n+impl Copy for f64 {}\n impl Copy for ptr {}\n extern \"C\" {\n     fn extern_func();\n@@ -44,148 +48,190 @@ extern \"Rust\" {\n     fn dont_merge(s: &str);\n }\n \n-macro_rules! check { ($func:ident, $ty:ty, $class:ident) => {\n+macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n     #[no_mangle]\n     pub unsafe fn $func(x: $ty) -> $ty {\n         dont_merge(stringify!($func));\n \n         let y;\n-        asm!(\"move {}, {}\", out($class) y, in($class) x);\n+        asm!(concat!($mov,\" {}, {}\"), out($class) y, in($class) x);\n         y\n     }\n };}\n \n-macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt) => {\n+macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n     #[no_mangle]\n     pub unsafe fn $func(x: $ty) -> $ty {\n         dont_merge(stringify!($func));\n \n         let y;\n-        asm!(concat!(\"move \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+        asm!(concat!($mov, \" \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n         y\n     }\n };}\n \n-// CHECK-LABEL: sym_static:\n-// CHECK: #APP\n-// CHECK: lw $3, %got(extern_static)\n-// CHECK: #NO_APP\n+// mips32-LABEL: sym_static_32:\n+// mips32: #APP\n+// mips32: lw $3, %got(extern_static)\n+// mips32: #NO_APP\n+#[cfg(mips32)]\n #[no_mangle]\n-pub unsafe fn sym_static() {\n-    dont_merge(stringify!($func));\n+pub unsafe fn sym_static_32() {\n+    asm!(\"lw $v1, {}\", sym extern_static);\n+}\n \n-    asm!(\"la $v1, {}\", sym extern_static);\n+// mips32-LABEL: sym_fn_32:\n+// mips32: #APP\n+// mips32: lw $3, %got(extern_func)\n+// mips32: #NO_APP\n+#[cfg(mips32)]\n+#[no_mangle]\n+pub unsafe fn sym_fn_32() {\n+    asm!(\"lw $v1, {}\", sym extern_func);\n }\n \n-// CHECK-LABEL: sym_fn:\n-// CHECK: #APP\n-// CHECK: lw $3, %got(extern_func)\n-// CHECK: #NO_APP\n+// mips64-LABEL: sym_static_64:\n+// mips64: #APP\n+// mips64: ld $3, %got_disp(extern_static)\n+// mips64: #NO_APP\n+#[cfg(mips64)]\n #[no_mangle]\n-pub unsafe fn sym_fn() {\n-    dont_merge(stringify!($func));\n+pub unsafe fn sym_static_64() {\n+    asm!(\"ld $v1, {}\", sym extern_static);\n+}\n \n-    asm!(\"la $v1, {}\", sym extern_func);\n+// mips64-LABEL: sym_fn_64:\n+// mips64: #APP\n+// mips64: ld $3, %got_disp(extern_func)\n+// mips64: #NO_APP\n+#[cfg(mips64)]\n+#[no_mangle]\n+pub unsafe fn sym_fn_64() {\n+    asm!(\"ld $v1, {}\", sym extern_func);\n }\n \n // CHECK-LABEL: reg_f32:\n // CHECK: #APP\n // CHECK: mov.s $f{{[0-9]+}}, $f{{[0-9]+}}\n // CHECK: #NO_APP\n-#[no_mangle]\n-pub unsafe fn reg_f32(x: f32) -> f32 {\n-    dont_merge(\"reg_f32\");\n-    let y;\n-    asm!(\"mov.s {}, {}\", out(freg) y, in(freg) x);\n-    y\n-}\n+check!(reg_f32, f32, freg, \"mov.s\");\n \n // CHECK-LABEL: f0_f32:\n // CHECK: #APP\n // CHECK: mov.s $f0, $f0\n // CHECK: #NO_APP\n #[no_mangle]\n-pub unsafe fn f0_f32(x: f32) -> f32 {\n-    dont_merge(\"f0_f32\");\n-    let y;\n-    asm!(\"mov.s $f0, $f0\", lateout(\"$f0\") y, in(\"$f0\") x);\n-    y\n-}\n+check_reg!(f0_f32, f32, \"$f0\", \"mov.s\");\n+\n+// CHECK-LABEL: reg_f32_64:\n+// CHECK: #APP\n+// CHECK: mov.d $f{{[0-9]+}}, $f{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32_64, f32, freg, \"mov.d\");\n+\n+// CHECK-LABEL: f0_f32_64:\n+// CHECK: #APP\n+// CHECK: mov.d $f0, $f0\n+// CHECK: #NO_APP\n+#[no_mangle]\n+check_reg!(f0_f32_64, f32, \"$f0\", \"mov.d\");\n+\n+// CHECK-LABEL: reg_f64:\n+// CHECK: #APP\n+// CHECK: mov.d $f{{[0-9]+}}, $f{{[0-9]+}}\n+// CHECK: #NO_APP\n+#[no_mangle]\n+check!(reg_f64, f64, freg, \"mov.d\");\n+\n+// CHECK-LABEL: f0_f64:\n+// CHECK: #APP\n+// CHECK: mov.d $f0, $f0\n+// CHECK: #NO_APP\n+#[no_mangle]\n+check_reg!(f0_f64, f64, \"$f0\", \"mov.d\");\n \n // CHECK-LABEL: reg_ptr:\n // CHECK: #APP\n // CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n // CHECK: #NO_APP\n-check!(reg_ptr, ptr, reg);\n+check!(reg_ptr, ptr, reg, \"move\");\n \n // CHECK-LABEL: reg_i32:\n // CHECK: #APP\n // CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n // CHECK: #NO_APP\n-check!(reg_i32, i32, reg);\n+check!(reg_i32, i32, reg, \"move\");\n \n // CHECK-LABEL: reg_f32_soft:\n // CHECK: #APP\n // CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n // CHECK: #NO_APP\n-check!(reg_f32_soft, f32, reg);\n+check!(reg_f32_soft, f32, reg, \"move\");\n+\n+// mips64-LABEL: reg_f64_soft:\n+// mips64: #APP\n+// mips64: move ${{[0-9]+}}, ${{[0-9]+}}\n+// mips64: #NO_APP\n+#[cfg(mips64)]\n+check!(reg_f64_soft, f64, reg, \"move\");\n \n // CHECK-LABEL: reg_i8:\n // CHECK: #APP\n // CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n // CHECK: #NO_APP\n-check!(reg_i8, i8, reg);\n+check!(reg_i8, i8, reg, \"move\");\n \n // CHECK-LABEL: reg_u8:\n // CHECK: #APP\n // CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n // CHECK: #NO_APP\n-check!(reg_u8, u8, reg);\n+check!(reg_u8, u8, reg, \"move\");\n \n // CHECK-LABEL: reg_i16:\n // CHECK: #APP\n // CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n // CHECK: #NO_APP\n-check!(reg_i16, i16, reg);\n+check!(reg_i16, i16, reg, \"move\");\n \n-// CHECK-LABEL: t0_ptr:\n-// CHECK: #APP\n-// CHECK: move $8, $8\n-// CHECK: #NO_APP\n-check_reg!(t0_ptr, ptr, \"$t0\");\n+// mips64-LABEL: reg_i64:\n+// mips64: #APP\n+// mips64: move ${{[0-9]+}}, ${{[0-9]+}}\n+// mips64: #NO_APP\n+#[cfg(mips64)]\n+check!(reg_i64, i64, reg, \"move\");\n \n-// CHECK-LABEL: t0_i32:\n+// CHECK-LABEL: r8_ptr:\n // CHECK: #APP\n // CHECK: move $8, $8\n // CHECK: #NO_APP\n-check_reg!(t0_i32, i32, \"$t0\");\n+check_reg!(r8_ptr, ptr, \"$8\", \"move\");\n \n-// CHECK-LABEL: t0_f32:\n+// CHECK-LABEL: r8_i32:\n // CHECK: #APP\n // CHECK: move $8, $8\n // CHECK: #NO_APP\n-check_reg!(t0_f32, f32, \"$t0\");\n+check_reg!(r8_i32, i32, \"$8\", \"move\");\n \n-// CHECK-LABEL: t0_i8:\n+// CHECK-LABEL: r8_f32:\n // CHECK: #APP\n // CHECK: move $8, $8\n // CHECK: #NO_APP\n-check_reg!(t0_i8, i8, \"$t0\");\n+check_reg!(r8_f32, f32, \"$8\", \"move\");\n \n-// CHECK-LABEL: t0_u8:\n+// CHECK-LABEL: r8_i8:\n // CHECK: #APP\n // CHECK: move $8, $8\n // CHECK: #NO_APP\n-check_reg!(t0_u8, u8, \"$t0\");\n+check_reg!(r8_i8, i8, \"$8\", \"move\");\n \n-// CHECK-LABEL: t0_i16:\n+// CHECK-LABEL: r8_u8:\n // CHECK: #APP\n // CHECK: move $8, $8\n // CHECK: #NO_APP\n-check_reg!(t0_i16, i16, \"$t0\");\n+check_reg!(r8_u8, u8, \"$8\", \"move\");\n \n // CHECK-LABEL: r8_i16:\n // CHECK: #APP\n // CHECK: move $8, $8\n // CHECK: #NO_APP\n-check_reg!(r8_i16, i16, \"$8\");\n+check_reg!(r8_i16, i16, \"$8\", \"move\");"}]}