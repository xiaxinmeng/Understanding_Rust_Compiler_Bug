{"sha": "c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTRmNzYwYTIxZjBkMjUyMTVhOWI1YjZiMDE3OThlNWQwOGM1Y2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T07:23:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T08:47:28Z"}, "message": "allow dangling ptr-to-int casts; use force_bits for ptr comparison", "tree": {"sha": "7c1fb53430a1437b6c7766e6d06450813eae57b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1fb53430a1437b6c7766e6d06450813eae57b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca", "html_url": "https://github.com/rust-lang/rust/commit/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457c8237652e123010555b5ecc795a5a4fd6111f", "url": "https://api.github.com/repos/rust-lang/rust/commits/457c8237652e123010555b5ecc795a5a4fd6111f", "html_url": "https://github.com/rust-lang/rust/commit/457c8237652e123010555b5ecc795a5a4fd6111f"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "805cc2ad2a503dea9ba80f473bdaec1fda9e4d6d", "filename": "src/intptrcast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca", "patch": "@@ -75,7 +75,9 @@ impl<'mir, 'tcx> GlobalState {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n         let global_state = &mut *global_state;\n \n-        let (size, align) = memory.get_size_and_align(ptr.alloc_id, AllocCheck::Live)?;\n+        // There is nothing wrong with a raw pointer being cast to an integer only after\n+        // it became dangling.  Hence `MaybeDead`.\n+        let (size, align) = memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?;\n \n         let base_addr = match global_state.base_addr.entry(ptr.alloc_id) {\n             Entry::Occupied(entry) => *entry.get(),"}, {"sha": "2194484316833f65ecaf711ed1c1648453429a64", "filename": "src/operator.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=c6e4f760a21f0d25215a9b5b6b01798e5d08c5ca", "patch": "@@ -59,6 +59,8 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         // If intptrcast is enabled, treat everything of integer *type* at integer *value*.\n         if self.memory().extra.rng.is_some() && left.layout.ty.is_integral() {\n             // This is actually an integer operation, so dispatch back to the core engine.\n+            // TODO: Once intptrcast is the default, librustc_mir should never even call us\n+            // for integer types.\n             assert!(right.layout.ty.is_integral());\n             let l_bits = self.force_bits(left.imm.to_scalar()?, left.layout.size)?;\n             let r_bits = self.force_bits(right.imm.to_scalar()?, right.layout.size)?;\n@@ -186,6 +188,13 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         right: Scalar<Tag>,\n     ) -> InterpResult<'tcx, bool> {\n         let size = self.pointer_size();\n+        if self.memory().extra.rng.is_some() {\n+            // Just compare the integers.\n+            // TODO: Do we really want to *always* do that, even when comparing two live in-bounds pointers?\n+            let left = self.force_bits(left, size)?;\n+            let right = self.force_bits(right, size)?;\n+            return Ok(left == right);\n+        }\n         Ok(match (left, right) {\n             (Scalar::Raw { .. }, Scalar::Raw { .. }) =>\n                 left.to_bits(size)? == right.to_bits(size)?,"}]}