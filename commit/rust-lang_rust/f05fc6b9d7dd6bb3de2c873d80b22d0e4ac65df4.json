{"sha": "f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWZjNmI5ZDdkZDZiYjNkZTJjODczZDgwYjIyZDBlNGFjNjVkZjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T01:25:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T01:25:16Z"}, "message": "Different, not quite correct yet, but I think slightly closer to correct, approach to convincing the typechecker to get along with this new type grammar.", "tree": {"sha": "d809b781284f7120afaa2ac5727baf5883f1bea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d809b781284f7120afaa2ac5727baf5883f1bea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4", "html_url": "https://github.com/rust-lang/rust/commit/f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a00a61ef34b558250aacd796c6564d8440fcf6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a00a61ef34b558250aacd796c6564d8440fcf6d", "html_url": "https://github.com/rust-lang/rust/commit/2a00a61ef34b558250aacd796c6564d8440fcf6d"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "8554d4b54274ec12916dcbba5d2f2182732f2767", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=f05fc6b9d7dd6bb3de2c873d80b22d0e4ac65df4", "patch": "@@ -2,7 +2,7 @@ open Common;;\n open Semant;;\n \n type tyspec =\n-    TYSPEC_equiv of tyvar\n+    TYSPEC_equiv of (simpl * tyvar)\n   | TYSPEC_all\n   | TYSPEC_resolved of (Ast.ty_param array) * Ast.ty\n   | TYSPEC_callable of (tyvar * tyvar array)   (* out, ins *)\n@@ -19,6 +19,10 @@ type tyspec =\n   | TYSPEC_vector of tyvar\n   | TYSPEC_app of (tyvar * Ast.ty array)\n \n+and simpl = SIMPL_none\n+            | SIMPL_exterior\n+            | SIMPL_mutable\n+\n and dict = (Ast.ident, tyvar) Hashtbl.t\n \n and tyvar = tyspec ref;;\n@@ -101,7 +105,15 @@ let rec tyspec_to_str (ts:tyspec) : string =\n           else\n             Ast.fmt_ty ff ty\n \n-      | TYSPEC_equiv tv ->\n+      | TYSPEC_equiv (SIMPL_none, tv) ->\n+          fmt_tyspec ff (!tv)\n+\n+      | TYSPEC_equiv (SIMPL_exterior, tv) ->\n+          fmt ff \"@\";\n+          fmt_tyspec ff (!tv)\n+\n+      | TYSPEC_equiv (SIMPL_mutable, tv) ->\n+          fmt ff \"mutable \";\n           fmt_tyspec ff (!tv)\n \n       | TYSPEC_callable (out, ins) ->\n@@ -156,7 +168,7 @@ let iflog cx thunk =\n \n let rec resolve_tyvar (tv:tyvar) : tyvar =\n   match !tv with\n-      TYSPEC_equiv subtv -> resolve_tyvar subtv\n+      TYSPEC_equiv (_, subtv) -> resolve_tyvar subtv\n     | _ -> tv\n ;;\n \n@@ -243,20 +255,23 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n      *)\n     and unify_tyvars' (simplify:bool) (av:tyvar) (bv:tyvar) : unit =\n       let (a, b) = ((resolve_tyvar av), (resolve_tyvar bv)) in\n-      let simplified tv =\n+      let wrap tv =\n         match !tv with\n-            TYSPEC_resolved (params_a, Ast.TY_mutable ty_a) ->\n-              Some (ref (TYSPEC_resolved (params_a, ty_a)))\n-          | TYSPEC_resolved (params_a, Ast.TY_exterior ty_a) ->\n-              Some (ref (TYSPEC_resolved (params_a, ty_a)))\n-          | _ -> None\n+            TYSPEC_resolved (params, Ast.TY_mutable ty) ->\n+              tv := TYSPEC_equiv (SIMPL_mutable,\n+                                  (ref (TYSPEC_resolved (params, ty))));\n+              true\n+          | TYSPEC_resolved (params, Ast.TY_exterior ty) ->\n+              tv := TYSPEC_equiv (SIMPL_exterior,\n+                                  (ref (TYSPEC_resolved (params, ty))));\n+              true\n+          | _ -> false\n       in\n         if simplify\n         then\n-          match (simplified a, simplified b) with\n-              (Some a', _) -> unify_tyvars' simplify a' bv\n-            | (_, Some b') -> unify_tyvars' simplify av b'\n-            | (None, None) -> unify_tyvars'' av bv\n+          if (wrap a) || (wrap b)\n+          then unify_tyvars' simplify a b\n+          else unify_tyvars'' a b\n         else\n           unify_tyvars'' av bv\n \n@@ -777,8 +792,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               TYSPEC_vector av\n       in\n       let c = ref result in\n-        a := TYSPEC_equiv c;\n-        b := TYSPEC_equiv c\n+        a := TYSPEC_equiv (SIMPL_none, c);\n+        b := TYSPEC_equiv (SIMPL_none, c)\n \n     and unify_ty_parametric\n         (simplify:bool)\n@@ -1371,24 +1386,21 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               | _ -> bug () \"check_auto_tyvar: no slot defn\"\n         in\n \n-        let get_resolved_ty tv id =\n-          let ts = !(resolve_tyvar tv) in\n-            match ts with\n-                TYSPEC_resolved ([||], ty) -> ty\n-              | TYSPEC_vector (tv) ->\n-                  begin\n-                    match !(resolve_tyvar tv) with\n-                        TYSPEC_resolved ([||], ty) ->\n-                          (Ast.TY_vec ty)\n-                      | _ ->\n-                          err (Some id)\n-                            \"unresolved vector-element type in %s (%d)\"\n-                            (tyspec_to_str ts) (int_of_node id)\n-                  end\n-              | _ -> err (Some id)\n-                  \"unresolved type %s (%d)\"\n-                    (tyspec_to_str ts)\n-                    (int_of_node id)\n+        let rec get_resolved_ty tv id =\n+          match !tv with\n+              TYSPEC_resolved ([||], ty) -> ty\n+            | TYSPEC_vector tv ->\n+                Ast.TY_vec (get_resolved_ty tv id)\n+            | TYSPEC_equiv (SIMPL_none, tv) ->\n+                get_resolved_ty tv id\n+            | TYSPEC_equiv (SIMPL_mutable, tv) ->\n+                Ast.TY_mutable (get_resolved_ty tv id)\n+            | TYSPEC_equiv (SIMPL_exterior, tv) ->\n+                Ast.TY_exterior (get_resolved_ty tv id)\n+            | _ -> err (Some id)\n+                \"unresolved type %s (%d)\"\n+                  (tyspec_to_str !tv)\n+                  (int_of_node id)\n         in\n \n         let check_auto_tyvar id ="}]}