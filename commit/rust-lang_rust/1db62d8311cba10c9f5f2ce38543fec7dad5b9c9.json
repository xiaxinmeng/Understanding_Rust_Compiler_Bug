{"sha": "1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjYyZDgzMTFjYmExMGM5ZjVmMmNlMzg1NDNmZWM3ZGFkNWI5Yzk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T03:22:59Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T14:33:21Z"}, "message": "std: Iterator.chain_ -> .chain", "tree": {"sha": "ac68bac692b496c5eb1693f40ea1031402738eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac68bac692b496c5eb1693f40ea1031402738eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "html_url": "https://github.com/rust-lang/rust/commit/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c2661684b5a7c07a7bf951567aaca0ca6bcf93", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c2661684b5a7c07a7bf951567aaca0ca6bcf93", "html_url": "https://github.com/rust-lang/rust/commit/60c2661684b5a7c07a7bf951567aaca0ca6bcf93"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "740ba884fb7b8d379edbccd0ace3370154e35012", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "patch": "@@ -366,12 +366,12 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n                     param_uses: Option<@~[type_use::type_uses]>) -> mono_id {\n     // FIXME (possibly #5801): Need a lot of type hints to get\n     // .collect() to work.\n-    let substs_iter = substs.self_ty.iter().chain_(substs.tys.iter());\n+    let substs_iter = substs.self_ty.iter().chain(substs.tys.iter());\n     let precise_param_ids: ~[(ty::t, Option<@~[mono_id]>)] = match substs.vtables {\n       Some(vts) => {\n         debug!(\"make_mono_id vtables=%s substs=%s\",\n                vts.repr(ccx.tcx), substs.tys.repr(ccx.tcx));\n-        let vts_iter = substs.self_vtables.iter().chain_(vts.iter());\n+        let vts_iter = substs.self_vtables.iter().chain(vts.iter());\n         vts_iter.zip(substs_iter).map(|(vtable, subst)| {\n             let v = vtable.map(|vt| meth::vtable_id(ccx, vt));\n             (*subst, if !v.is_empty() { Some(@v) } else { None })\n@@ -387,7 +387,7 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n         // We just say it is fully used.\n         let self_use =\n             substs.self_ty.map(|_| type_use::use_repr|type_use::use_tydesc);\n-        let uses_iter = self_use.iter().chain_(uses.iter());\n+        let uses_iter = self_use.iter().chain(uses.iter());\n \n         precise_param_ids.iter().zip(uses_iter).map(|(id, uses)| {\n             if ccx.sess.no_monomorphic_collapse() {"}, {"sha": "7a22477685911cf9ee0a52afdc9f882b1ce3f49d", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "patch": "@@ -724,7 +724,7 @@ impl<T:Hash + Eq> HashSet<T> {\n     /// Visit the values representing the symmetric difference\n     pub fn symmetric_difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n         -> Chain<SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n-        self.difference_iter(other).chain_(other.difference_iter(self))\n+        self.difference_iter(other).chain(other.difference_iter(self))\n     }\n \n     /// Visit the values representing the intersection\n@@ -740,7 +740,7 @@ impl<T:Hash + Eq> HashSet<T> {\n     /// Visit the values representing the union\n     pub fn union_iter<'a>(&'a self, other: &'a HashSet<T>)\n         -> Chain<HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n-        self.iter().chain_(other.difference_iter(self))\n+        self.iter().chain(other.difference_iter(self))\n     }\n \n }"}, {"sha": "944b568db3f7df5f9a75d58665239316b58dd41b", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "patch": "@@ -59,13 +59,13 @@ pub trait Iterator<A> {\n     /// ~~~ {.rust}\n     /// let a = [0];\n     /// let b = [1];\n-    /// let mut it = a.iter().chain_(b.iter());\n+    /// let mut it = a.iter().chain(b.iter());\n     /// assert_eq!(it.next().get(), &0);\n     /// assert_eq!(it.next().get(), &1);\n     /// assert!(it.next().is_none());\n     /// ~~~\n     #[inline]\n-    fn chain_<U: Iterator<A>>(self, other: U) -> Chain<Self, U> {\n+    fn chain<U: Iterator<A>>(self, other: U) -> Chain<Self, U> {\n         Chain{a: self, b: other, flag: false}\n     }\n \n@@ -1534,7 +1534,7 @@ mod tests {\n         let xs = [0u, 1, 2, 3, 4, 5];\n         let ys = [30u, 40, 50, 60];\n         let expected = [0, 1, 2, 3, 4, 5, 30, 40, 50, 60];\n-        let mut it = xs.iter().chain_(ys.iter());\n+        let mut it = xs.iter().chain(ys.iter());\n         let mut i = 0;\n         for &x in it {\n             assert_eq!(x, expected[i]);\n@@ -1543,7 +1543,7 @@ mod tests {\n         assert_eq!(i, expected.len());\n \n         let ys = count(30u, 10).take(4);\n-        let mut it = xs.iter().map(|&x| x).chain_(ys);\n+        let mut it = xs.iter().map(|&x| x).chain(ys);\n         let mut i = 0;\n         for x in it {\n             assert_eq!(x, expected[i]);\n@@ -1771,7 +1771,7 @@ mod tests {\n         assert_eq!(c.take_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.skip_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.enumerate().size_hint(), (uint::max_value, None));\n-        assert_eq!(c.chain_(vi.map(|&i| i)).size_hint(), (uint::max_value, None));\n+        assert_eq!(c.chain(vi.map(|&i| i)).size_hint(), (uint::max_value, None));\n         assert_eq!(c.zip(vi).size_hint(), (10, Some(10)));\n         assert_eq!(c.scan(0, |_,_| Some(0)).size_hint(), (0, None));\n         assert_eq!(c.filter(|_| false).size_hint(), (0, None));\n@@ -1785,7 +1785,7 @@ mod tests {\n         assert_eq!(vi.take_while(|_| false).size_hint(), (0, Some(10)));\n         assert_eq!(vi.skip_while(|_| false).size_hint(), (0, Some(10)));\n         assert_eq!(vi.enumerate().size_hint(), (10, Some(10)));\n-        assert_eq!(vi.chain_(v2.iter()).size_hint(), (13, Some(13)));\n+        assert_eq!(vi.chain(v2.iter()).size_hint(), (13, Some(13)));\n         assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n         assert_eq!(vi.scan(0, |_,_| Some(0)).size_hint(), (0, Some(10)));\n         assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n@@ -1900,7 +1900,7 @@ mod tests {\n     fn test_double_ended_chain() {\n         let xs = [1, 2, 3, 4, 5];\n         let ys = ~[7, 9, 11];\n-        let mut it = xs.iter().chain_(ys.iter()).invert();\n+        let mut it = xs.iter().chain(ys.iter()).invert();\n         assert_eq!(it.next().unwrap(), &11)\n         assert_eq!(it.next().unwrap(), &9)\n         assert_eq!(it.next_back().unwrap(), &1)\n@@ -1953,7 +1953,7 @@ mod tests {\n     fn test_random_access_chain() {\n         let xs = [1, 2, 3, 4, 5];\n         let ys = ~[7, 9, 11];\n-        let mut it = xs.iter().chain_(ys.iter());\n+        let mut it = xs.iter().chain(ys.iter());\n         assert_eq!(it.idx(0).unwrap(), &1);\n         assert_eq!(it.idx(5).unwrap(), &7);\n         assert_eq!(it.idx(7).unwrap(), &11);"}, {"sha": "9fd325798d76da256a05d3855a7224b4d917033e", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db62d8311cba10c9f5f2ce38543fec7dad5b9c9/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=1db62d8311cba10c9f5f2ce38543fec7dad5b9c9", "patch": "@@ -576,7 +576,7 @@ impl Context {\n         }\n \n         let args = names.move_iter().map(|a| a.unwrap());\n-        let mut args = locals.move_iter().chain_(args);\n+        let mut args = locals.move_iter().chain(args);\n \n         // Next, build up the actual call to the sprintf function.\n         let result = self.ecx.expr_call_global(self.fmtsp, ~["}]}