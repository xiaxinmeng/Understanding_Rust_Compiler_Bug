{"sha": "9b453d695481f8898bf29eef25f3027c769e1a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDUzZDY5NTQ4MWY4ODk4YmYyOWVlZjI1ZjMwMjdjNzY5ZTFhOTk=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-20T09:05:00Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-20T09:05:00Z"}, "message": "Use DroplessArena for variance inference", "tree": {"sha": "39b8efe1fe0e6793485b0129d93bc27b7c7c1447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39b8efe1fe0e6793485b0129d93bc27b7c7c1447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b453d695481f8898bf29eef25f3027c769e1a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b453d695481f8898bf29eef25f3027c769e1a99", "html_url": "https://github.com/rust-lang/rust/commit/9b453d695481f8898bf29eef25f3027c769e1a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b453d695481f8898bf29eef25f3027c769e1a99/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07ce65d56d527273a2a80862c8a69d0dbc88906", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07ce65d56d527273a2a80862c8a69d0dbc88906", "html_url": "https://github.com/rust-lang/rust/commit/d07ce65d56d527273a2a80862c8a69d0dbc88906"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1565efbb022f4bc03d3058bf0faa25391903e74b", "filename": "compiler/rustc_typeck/src/variance/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b453d695481f8898bf29eef25f3027c769e1a99/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b453d695481f8898bf29eef25f3027c769e1a99/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs?ref=9b453d695481f8898bf29eef25f3027c769e1a99", "patch": "@@ -4,7 +4,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/variance.html\n \n use hir::Node;\n-use rustc_arena::TypedArena;\n+use rustc_arena::DroplessArena;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_middle::ty::query::Providers;\n@@ -32,8 +32,8 @@ pub fn provide(providers: &mut Providers) {\n \n fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateVariancesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n-    let mut arena = TypedArena::default();\n-    let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n+    let arena = DroplessArena::default();\n+    let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     solve::solve_constraints(constraints_cx)\n }"}, {"sha": "81c858c53cb8e4035a2a8143882fd7e231e91809", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b453d695481f8898bf29eef25f3027c769e1a99/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b453d695481f8898bf29eef25f3027c769e1a99/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=9b453d695481f8898bf29eef25f3027c769e1a99", "patch": "@@ -9,7 +9,7 @@\n // `InferredIndex` is a newtype'd int representing the index of such\n // a variable.\n \n-use rustc_arena::TypedArena;\n+use rustc_arena::DroplessArena;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::HirIdMap;\n@@ -47,7 +47,7 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n \n pub struct TermsContext<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n-    pub arena: &'a TypedArena<VarianceTerm<'a>>,\n+    pub arena: &'a DroplessArena,\n \n     // For marker types, UnsafeCell, and other lang items where\n     // variance is hardcoded, records the item-id and the hardcoded\n@@ -64,7 +64,7 @@ pub struct TermsContext<'a, 'tcx> {\n \n pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    arena: &'a mut TypedArena<VarianceTerm<'a>>,\n+    arena: &'a DroplessArena,\n ) -> TermsContext<'a, 'tcx> {\n     let mut terms_cx = TermsContext {\n         tcx,"}]}