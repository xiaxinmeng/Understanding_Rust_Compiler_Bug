{"sha": "610db04222445e2e25c911dda9a0ae7e30df3cd9", "node_id": "C_kwDOAAsO6NoAKDYxMGRiMDQyMjI0NDVlMmUyNWM5MTFkZGE5YTBhZTdlMzBkZjNjZDk", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-03-25T20:39:03Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-03-25T20:47:54Z"}, "message": "Provide suggestion context in map_unit_fn", "tree": {"sha": "b9acc7bafc348192a97508963b67579b0fb9388b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9acc7bafc348192a97508963b67579b0fb9388b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610db04222445e2e25c911dda9a0ae7e30df3cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610db04222445e2e25c911dda9a0ae7e30df3cd9", "html_url": "https://github.com/rust-lang/rust/commit/610db04222445e2e25c911dda9a0ae7e30df3cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610db04222445e2e25c911dda9a0ae7e30df3cd9/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebe766695e66a97775e4992d3d08f74ce2a7270", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebe766695e66a97775e4992d3d08f74ce2a7270", "html_url": "https://github.com/rust-lang/rust/commit/8ebe766695e66a97775e4992d3d08f74ce2a7270"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "f552d5c1afab9268f4448af24acbd7e881cd2a84", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet;\n+use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_context};\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{iter_input_pats, method_chain_args};\n use if_chain::if_chain;\n@@ -217,36 +217,33 @@ fn lint_map_unit_fn(cx: &LateContext<'_>, stmt: &hir::Stmt<'_>, expr: &hir::Expr\n     let fn_arg = &map_args[1];\n \n     if is_unit_function(cx, fn_arg) {\n+        let mut applicability = Applicability::MachineApplicable;\n         let msg = suggestion_msg(\"function\", map_type);\n         let suggestion = format!(\n             \"if let {0}({binding}) = {1} {{ {2}({binding}) }}\",\n             variant,\n-            snippet(cx, var_arg.span, \"_\"),\n-            snippet(cx, fn_arg.span, \"_\"),\n+            snippet_with_applicability(cx, var_arg.span, \"_\", &mut applicability),\n+            snippet_with_applicability(cx, fn_arg.span, \"_\", &mut applicability),\n             binding = let_binding_name(cx, var_arg)\n         );\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |diag| {\n-            diag.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::MachineApplicable);\n+            diag.span_suggestion(stmt.span, \"try this\", suggestion, applicability);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |diag| {\n             if let Some(reduced_expr_span) = reduce_unit_expression(cx, closure_expr) {\n+                let mut applicability = Applicability::MachineApplicable;\n                 let suggestion = format!(\n                     \"if let {0}({1}) = {2} {{ {3} }}\",\n                     variant,\n-                    snippet(cx, binding.pat.span, \"_\"),\n-                    snippet(cx, var_arg.span, \"_\"),\n-                    snippet(cx, reduced_expr_span, \"_\")\n-                );\n-                diag.span_suggestion(\n-                    stmt.span,\n-                    \"try this\",\n-                    suggestion,\n-                    Applicability::MachineApplicable, // snippet\n+                    snippet_with_applicability(cx, binding.pat.span, \"_\", &mut applicability),\n+                    snippet_with_applicability(cx, var_arg.span, \"_\", &mut applicability),\n+                    snippet_with_context(cx, reduced_expr_span, var_arg.span.ctxt(), \"_\", &mut applicability).0,\n                 );\n+                diag.span_suggestion(stmt.span, \"try this\", suggestion, applicability);\n             } else {\n                 let suggestion = format!(\n                     \"if let {0}({1}) = {2} {{ ... }}\","}, {"sha": "1290bd8efebd287eda8df11864090b9202a229ba", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -80,6 +80,9 @@ fn option_map_unit_fn() {\n \n     if let Some(ref value) = x.field { do_nothing(value + captured) }\n \n-    if let Some(a) = option() { do_nothing(a) }}\n+    if let Some(a) = option() { do_nothing(a) }\n+\n+    if let Some(value) = option() { println!(\"{:?}\", value) }\n+}\n \n fn main() {}"}, {"sha": "f3e5b62c65b7f769bb0812d8460a2791b0a14c65", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -80,6 +80,9 @@ fn option_map_unit_fn() {\n \n     x.field.map(|ref value| { do_nothing(value + captured) });\n \n-    option().map(do_nothing);}\n+    option().map(do_nothing);\n+\n+    option().map(|value| println!(\"{:?}\", value));\n+}\n \n fn main() {}"}, {"sha": "ab2a294a060f0c2507b81f1eedd6288e4b486f3d", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -139,10 +139,18 @@ LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:83:5\n    |\n-LL |     option().map(do_nothing);}\n+LL |     option().map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(a) = option() { do_nothing(a) }`\n \n-error: aborting due to 18 previous errors\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n+  --> $DIR/option_map_unit_fn_fixable.rs:85:5\n+   |\n+LL |     option().map(|value| println!(\"{:?}\", value));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Some(value) = option() { println!(\"{:?}\", value) }`\n+\n+error: aborting due to 19 previous errors\n "}, {"sha": "14c331f67e739c34ca722ff0776a83fbe88f5566", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -75,6 +75,8 @@ fn result_map_unit_fn() {\n \n \n     if let Ok(ref value) = x.field { do_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { println!(\"{:?}\", value) }\n }\n \n fn main() {}"}, {"sha": "8b0fca9ece1a375d45e532a5eda015265db5a383", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -75,6 +75,8 @@ fn result_map_unit_fn() {\n \n \n     x.field.map(|ref value| { do_nothing(value + captured) });\n+\n+    x.field.map(|value| println!(\"{:?}\", value));\n }\n \n fn main() {}"}, {"sha": "782febd52644128e0e7e18e4c1f4316efbb33b9e", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/610db04222445e2e25c911dda9a0ae7e30df3cd9/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=610db04222445e2e25c911dda9a0ae7e30df3cd9", "patch": "@@ -136,5 +136,13 @@ LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     |\n    |     help: try this: `if let Ok(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: aborting due to 17 previous errors\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n+  --> $DIR/result_map_unit_fn_fixable.rs:79:5\n+   |\n+LL |     x.field.map(|value| println!(\"{:?}\", value));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |\n+   |     help: try this: `if let Ok(value) = x.field { println!(\"{:?}\", value) }`\n+\n+error: aborting due to 18 previous errors\n "}]}