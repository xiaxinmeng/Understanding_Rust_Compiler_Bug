{"sha": "90164587dcd7290ba46ac7b5ae054c849bc8c551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTY0NTg3ZGNkNzI5MGJhNDZhYzdiNWFlMDU0Yzg0OWJjOGM1NTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-19T14:02:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-19T14:02:26Z"}, "message": "Rollup merge of #74419 - Lokathor:gba-target, r=jonas-schievink\n\nAdd a thumbv4t-none-eabi target\n\n(cc @ketsuban, one of the few other Rust users who programs for GBA.)\n\n---\n\n**EDIT:** This is now a more general `thumbv4t-none-eabi` PR! See [this comment](https://github.com/rust-lang/rust/pull/74419#issuecomment-660391579)\n\n---\n\nNow that the PSP officially has an official target within Rust, well as the lead of the `gba` crate I can't _not_ add a GBA target as well.\n\nI know that the [target tier policy](https://github.com/rust-lang/rfcs/pull/2803) isn't ratified and official, but I'll use it as an outline (cc @joshtriplett):\n* Designated Developer: Lokathor\n* Naming consistent with any existing targets\n* Doesn't create Rust project legal issues.\n* No license issues\n* Uses the standard Apache/mit license.\n* Rust tooling users don't have to accept any new licensing requirements\n* Does not support hosting rust tooling.\n* Doesn't require linking in proprietary code to obtain a functional binary. However, you will need to do some post-build steps to turn the ELF file into a usable GBA ROM (either for an emulator or for the actual hardware).\n* This is a `no_std` environment, without even a standard global allocator, so this adds no new code to `alloc` or `std`.\n* The process of building for this target is documented in the `gba` crate ([link](https://rust-console.github.io/gba/development-setup.html)). Well, the docs there are currently a little out of date, they're back on using `cargo-xbuild`, but the crate docs there will get updated once this target is available.\n* This places no new burden on any other targets\n* Does not break any existing targets.\n\nI'm not fully confident in specifying the same linker script for all possible projects, so I'm currently just not giving a linker script at all, and users can continue to select their own linker script by using `-C` to provide a linker arg.\n\nI added the file, and added it to the `supported_targets!` macro usage, and I think that's all there is to do.", "tree": {"sha": "e6d3f93d79f2ee59786c8b5bdb0dfeeacc2deda5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6d3f93d79f2ee59786c8b5bdb0dfeeacc2deda5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90164587dcd7290ba46ac7b5ae054c849bc8c551", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfFFJyCRBK7hj4Ov3rIwAAdHIIADIQL2AmLPZULCOive3pyiSC\nIuRSWDY4/Vh9O020sMCS/iPAKCUgcuKadcsdywm22JkANXUl/bCvHvP56ogW5orV\nADtMxBA+QA+josghlbu/ZqgMozerpfD8Ky+lcTVi2YJgFOuZ+eR/NSyWqRREOsv5\n7M7SNmZ1K9EOQwEQufpuvLzmbXZAa8ai2EzvhpaHeuy9C951pwJu9YHisA/h9P1O\nEDm0IlgInMcdr6+A0Mym1fgHvByi7KSEg5Z9bsPOqmSar0FsOZmi8iuWYiMt9q0U\nh4GuFOVr7/goLbQ3iu/tgeKoZ++H5gaTM0XOcCsjB5979t5+vzrMO5Y7yoUKEuo=\n=dmhM\n-----END PGP SIGNATURE-----\n", "payload": "tree e6d3f93d79f2ee59786c8b5bdb0dfeeacc2deda5\nparent cc4e880c62605a490ca846a86d7b0f8bb50fb8a5\nparent ec9c8d81f65cf4a1d8ce720bfe06b8312903f845\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595167346 -0700\ncommitter GitHub <noreply@github.com> 1595167346 -0700\n\nRollup merge of #74419 - Lokathor:gba-target, r=jonas-schievink\n\nAdd a thumbv4t-none-eabi target\n\n(cc @ketsuban, one of the few other Rust users who programs for GBA.)\n\n---\n\n**EDIT:** This is now a more general `thumbv4t-none-eabi` PR! See [this comment](https://github.com/rust-lang/rust/pull/74419#issuecomment-660391579)\n\n---\n\nNow that the PSP officially has an official target within Rust, well as the lead of the `gba` crate I can't _not_ add a GBA target as well.\n\nI know that the [target tier policy](https://github.com/rust-lang/rfcs/pull/2803) isn't ratified and official, but I'll use it as an outline (cc @joshtriplett):\n* Designated Developer: Lokathor\n* Naming consistent with any existing targets\n* Doesn't create Rust project legal issues.\n* No license issues\n* Uses the standard Apache/mit license.\n* Rust tooling users don't have to accept any new licensing requirements\n* Does not support hosting rust tooling.\n* Doesn't require linking in proprietary code to obtain a functional binary. However, you will need to do some post-build steps to turn the ELF file into a usable GBA ROM (either for an emulator or for the actual hardware).\n* This is a `no_std` environment, without even a standard global allocator, so this adds no new code to `alloc` or `std`.\n* The process of building for this target is documented in the `gba` crate ([link](https://rust-console.github.io/gba/development-setup.html)). Well, the docs there are currently a little out of date, they're back on using `cargo-xbuild`, but the crate docs there will get updated once this target is available.\n* This places no new burden on any other targets\n* Does not break any existing targets.\n\nI'm not fully confident in specifying the same linker script for all possible projects, so I'm currently just not giving a linker script at all, and users can continue to select their own linker script by using `-C` to provide a linker arg.\n\nI added the file, and added it to the `supported_targets!` macro usage, and I think that's all there is to do.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90164587dcd7290ba46ac7b5ae054c849bc8c551", "html_url": "https://github.com/rust-lang/rust/commit/90164587dcd7290ba46ac7b5ae054c849bc8c551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90164587dcd7290ba46ac7b5ae054c849bc8c551/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4e880c62605a490ca846a86d7b0f8bb50fb8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e880c62605a490ca846a86d7b0f8bb50fb8a5", "html_url": "https://github.com/rust-lang/rust/commit/cc4e880c62605a490ca846a86d7b0f8bb50fb8a5"}, {"sha": "ec9c8d81f65cf4a1d8ce720bfe06b8312903f845", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c8d81f65cf4a1d8ce720bfe06b8312903f845", "html_url": "https://github.com/rust-lang/rust/commit/ec9c8d81f65cf4a1d8ce720bfe06b8312903f845"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "d53033ba3ba2043d79e4330df412e17455f5f782", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90164587dcd7290ba46ac7b5ae054c849bc8c551/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90164587dcd7290ba46ac7b5ae054c849bc8c551/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=90164587dcd7290ba46ac7b5ae054c849bc8c551", "patch": "@@ -676,6 +676,7 @@ supported_targets! {\n     (\"powerpc64-wrs-vxworks\", powerpc64_wrs_vxworks),\n \n     (\"mipsel-sony-psp\", mipsel_sony_psp),\n+    (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "31417b0154759faa03b14f51e61fc522ca407890", "filename": "src/librustc_target/spec/thumbv4t_none_eabi.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/90164587dcd7290ba46ac7b5ae054c849bc8c551/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90164587dcd7290ba46ac7b5ae054c849bc8c551/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs?ref=90164587dcd7290ba46ac7b5ae054c849bc8c551", "patch": "@@ -0,0 +1,62 @@\n+//! Targets the ARMv4T, with code as `t32` code by default.\n+//!\n+//! Primarily of use for the GBA, but usable with other devices too.\n+//!\n+//! Please ping @Lokathor if changes are needed.\n+//!\n+//! This target profile assumes that you have the ARM binutils in your path (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free for all major OSes from the ARM developer's website, and they may also be available in your system's package manager. Unfortunately, the standard linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we must use the GNU `ld` linker.\n+//!\n+//! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n+\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"thumbv4t-none-eabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n+        arch: \"arm\".to_string(),\n+        /* Data layout args are '-' separated:\n+         * little endian\n+         * stack is 64-bit aligned (EABI)\n+         * pointers are 32-bit\n+         * i64 must be 64-bit aligned (EABI)\n+         * mangle names with ELF style\n+         * native integers are 32-bit\n+         * All other elements are default\n+         */\n+        data_layout: \"e-S64-p:32:32-i64:64-m:e-n32\".to_string(),\n+        linker_flavor: LinkerFlavor::Ld,\n+        options: TargetOptions {\n+            linker: Some(\"arm-none-eabi-ld\".to_string()),\n+            linker_is_gnu: true,\n+\n+            // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n+            // * activate t32/a32 interworking\n+            // * use arch ARMv4T\n+            // * use little-endian\n+            asm_args: vec![\n+                \"-mthumb-interwork\".to_string(),\n+                \"-march=armv4t\".to_string(),\n+                \"-mlittle-endian\".to_string(),\n+            ],\n+\n+            // minimum extra features, these cannot be disabled via -C\n+            features: \"+soft-float,+strict-align\".to_string(),\n+\n+            main_needs_argc_argv: false,\n+\n+            // No thread-local storage (just use a static Cell)\n+            has_elf_tls: false,\n+\n+            // don't have atomic compare-and-swap\n+            atomic_cas: false,\n+\n+            ..super::thumb_base::opts()\n+        },\n+    })\n+}"}]}