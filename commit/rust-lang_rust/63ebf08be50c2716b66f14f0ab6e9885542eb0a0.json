{"sha": "63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZWJmMDhiZTUwYzI3MTZiNjZmMTRmMGFiNmU5ODg1NTQyZWIwYTA=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2017-03-08T21:28:47Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-04-11T11:36:05Z"}, "message": "Initial attempt at implementing optimization fuel and re-enabling struct field reordering.", "tree": {"sha": "e88943c8988eefe57eb334b89ade8ef4564f3fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88943c8988eefe57eb334b89ade8ef4564f3fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "html_url": "https://github.com/rust-lang/rust/commit/63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6edc59685382d3ec0b6b89b05897a22a597c48a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6edc59685382d3ec0b6b89b05897a22a597c48a1", "html_url": "https://github.com/rust-lang/rust/commit/6edc59685382d3ec0b6b89b05897a22a597c48a1"}], "stats": {"total": 177, "additions": 138, "deletions": 39}, "files": [{"sha": "b9a974045bced110527e953ebffe296dccceb6b6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -643,6 +643,8 @@ macro_rules! options {\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_linker_flavor: Option<&'static str> =\n             Some(::rustc_back::LinkerFlavor::one_of());\n+        pub const parse_optimization_fuel: Option<&'static str> =\n+            Some(\"crate=integer\");\n     }\n \n     #[allow(dead_code)]\n@@ -787,6 +789,21 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_optimization_fuel(slot: &mut Option<(String, u64)>, v: Option<&str>) -> bool {\n+            match v {\n+                None => false,\n+                Some(s) => {\n+                    let parts = s.split('=').collect::<Vec<_>>();\n+                    if parts.len() != 2 { return false; }\n+                    let crate_name = parts[0].to_string();\n+                    let fuel = parts[1].parse::<u64>();\n+                    if fuel.is_err() { return false; }\n+                    *slot = Some((crate_name, fuel.unwrap()));\n+                    true\n+                }\n+            }\n+        }\n     }\n ) }\n \n@@ -991,6 +1008,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                                    \"Use a sanitizer\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n+    fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n+        \"Set the optimization fuel quota for a crate.\"),\n+    print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"Make Rustc print the total optimization fuel used by a crate.\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1784,11 +1805,13 @@ mod dep_tracking {\n \n     impl_dep_tracking_hash_via_hash!(bool);\n     impl_dep_tracking_hash_via_hash!(usize);\n+    impl_dep_tracking_hash_via_hash!(u64);\n     impl_dep_tracking_hash_via_hash!(String);\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n+    impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n@@ -1810,6 +1833,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n                                                  Option<cstore::NativeLibraryKind>));\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl DepTrackingHash for SearchPaths {\n         fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self"}, {"sha": "2d204908a521cab47c4c4ec665685d5e368a88b6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -123,6 +123,20 @@ pub struct Session {\n     pub code_stats: RefCell<CodeStats>,\n \n     next_node_id: Cell<ast::NodeId>,\n+\n+    /// If -zfuel=crate=n is specified, Some(crate).\n+    optimization_fuel_crate: Option<String>,\n+    /// If -zfuel=crate=n is specified, initially set to n. Otherwise 0.\n+    optimization_fuel_limit: Cell<u64>,\n+    /// We're rejecting all further optimizations.\n+    out_of_fuel: Cell<bool>,\n+\n+    // The next two are public because the driver needs to read them.\n+\n+    /// If -zprint-fuel=crate, Some(crate).\n+    pub print_fuel_crate: Option<String>,\n+    /// Always set to zero and incremented so that we can print fuel expended by a crate.\n+    pub print_fuel: Cell<u64>,\n }\n \n pub struct PerfStats {\n@@ -507,6 +521,33 @@ impl Session {\n         println!(\"Total time spent decoding DefPath tables:      {}\",\n                  duration_to_secs_str(self.perf_stats.decode_def_path_tables_time.get()));\n     }\n+\n+    /// We want to know if we're allowed to do an optimization for crate crate.\n+    /// This expends fuel if applicable, and records fuel if applicable.\n+    pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n+        let mut ret = true;\n+        match self.optimization_fuel_crate {\n+            Some(ref c) if c == crate_name => {\n+                let fuel = self.optimization_fuel_limit.get();\n+                ret = fuel != 0;\n+                if fuel == 0 && !self.out_of_fuel.get(){\n+                    println!(\"optimization-fuel-exhausted: {}\", msg());\n+                    self.out_of_fuel.set(true);\n+                }\n+                else {\n+                    self.optimization_fuel_limit.set(fuel-1);\n+                }\n+            }\n+            _ => {}\n+        }\n+        match self.print_fuel_crate {\n+            Some(ref c) if c == crate_name=> {\n+                self.print_fuel.set(self.print_fuel.get()+1);\n+            },\n+            _ => {}\n+        }\n+        ret\n+    }\n }\n \n pub fn build_session(sopts: config::Options,\n@@ -602,6 +643,12 @@ pub fn build_session_(sopts: config::Options,\n         }\n     );\n \n+    let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n+    let optimization_fuel_limit = Cell::new(sopts.debugging_opts.fuel.as_ref()\n+        .map(|i| i.1).unwrap_or(0));\n+    let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n+    let print_fuel = Cell::new(0);\n+\n     let sess = Session {\n         dep_graph: dep_graph.clone(),\n         target: target_cfg,\n@@ -643,6 +690,11 @@ pub fn build_session_(sopts: config::Options,\n             decode_def_path_tables_time: Cell::new(Duration::from_secs(0)),\n         },\n         code_stats: RefCell::new(CodeStats::new()),\n+        optimization_fuel_crate: optimization_fuel_crate,\n+        optimization_fuel_limit: optimization_fuel_limit,\n+        print_fuel_crate: print_fuel_crate,\n+        print_fuel: print_fuel,\n+        out_of_fuel: Cell::new(false),\n     };\n \n     init_llvm(&sess);"}, {"sha": "8b7438c0bfad2ed5f73efbfece42ffbbd22978d4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -732,6 +732,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n        }, f)\n     }\n+\n+    pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {\n+        let cname = self.crate_name(LOCAL_CRATE).as_str();\n+        self.sess.consider_optimizing(&cname, msg)\n+    }\n }\n \n impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {"}, {"sha": "a344f89a66830c76db37af1f248feb4044782d7f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -580,7 +580,6 @@ enum StructKind {\n }\n \n impl<'a, 'gcx, 'tcx> Struct {\n-    // FIXME(camlorn): reprs need a better representation to deal with multiple reprs on one type.\n     fn new(dl: &TargetDataLayout, fields: &Vec<&'a Layout>,\n                   repr: &ReprOptions, kind: StructKind,\n                   scapegoat: Ty<'gcx>) -> Result<Struct, LayoutError<'gcx>> {\n@@ -598,12 +597,8 @@ impl<'a, 'gcx, 'tcx> Struct {\n         // Neither do  1-member and 2-member structs.\n         // In addition, code in trans assume that 2-element structs can become pairs.\n         // It's easier to just short-circuit here.\n-        let mut can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n-            && ! (repr.c || repr.packed);\n-\n-        // Disable field reordering until we can decide what to do.\n-        // The odd pattern here avoids a warning about the value never being read.\n-        if can_optimize { can_optimize = false; }\n+        let can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n+            && ! (repr.c || repr.packed || repr.linear || repr.simd);\n \n         let (optimize, sort_ascending) = match kind {\n             StructKind::AlwaysSizedUnivariant => (can_optimize, false),"}, {"sha": "ba9c177f90483fe59c7e4494baff590947dcfab5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -1411,6 +1411,8 @@ pub struct ReprOptions {\n     pub packed: bool,\n     pub simd: bool,\n     pub int: Option<attr::IntType>,\n+    // Internal only for now. If true, don't reorder fields.\n+    pub linear: bool,\n }\n \n impl_stable_hash_for!(struct ReprOptions {\n@@ -1440,6 +1442,9 @@ impl ReprOptions {\n             ret.simd = true;\n         }\n \n+        // This is here instead of layout because the choice must make it into metadata.\n+        ret.linear = !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\",\n+            tcx.item_path_str(did)));\n         ret\n     }\n "}, {"sha": "1fef97d54a14145ca28592825943e08e4f5a9b0d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -517,6 +517,14 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.make_glob_map = resolve::MakeGlobMap::Yes;\n         }\n \n+        if sess.print_fuel_crate.is_some() {\n+            control.compilation_done.callback = box |state| {\n+                let sess = state.session;\n+                println!(\"Fuel used by {}: {}\",\n+                    sess.print_fuel_crate.as_ref().unwrap(),\n+                    sess.print_fuel.get());\n+            }\n+        }\n         control\n     }\n }"}, {"sha": "9d1a3500a582ae626ca2c2ee33f8e2c0e9b21054", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -31,6 +31,17 @@ enum e3 {\n     a([u16; 0], u8), b\n }\n \n+struct ReorderedStruct {\n+    a: u8,\n+    b: u64,\n+    c: u8\n+}\n+\n+enum ReorderedEnum {\n+    A(u8, u64, u8),\n+    B(u8, u64, u8),\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -54,4 +65,6 @@ pub fn main() {\n     assert_eq!(size_of::<e1>(), 8 as usize);\n     assert_eq!(size_of::<e2>(), 8 as usize);\n     assert_eq!(size_of::<e3>(), 4 as usize);\n+    assert_eq!(size_of::<ReorderedStruct>(), 16);\n+    assert_eq!(size_of::<ReorderedEnum>(), 16);\n }"}, {"sha": "830678f174f88cf38e0d76836bac2cc7c9a9ee96", "filename": "src/test/ui/print_type_sizes/nullable.stdout", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -1,25 +1,22 @@\n-print-type-size type: `IndirectNonZero<u32>`: 20 bytes, alignment: 4 bytes\n-print-type-size     field `.pre`: 1 bytes\n-print-type-size     padding: 3 bytes\n-print-type-size     field `.nested`: 12 bytes, alignment: 4 bytes\n+print-type-size type: `IndirectNonZero<u32>`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.nested`: 8 bytes\n print-type-size     field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n-print-type-size type: `MyOption<IndirectNonZero<u32>>`: 20 bytes, alignment: 4 bytes\n-print-type-size     variant `Some`: 20 bytes\n-print-type-size         field `.0`: 20 bytes\n-print-type-size type: `EmbeddedDiscr`: 12 bytes, alignment: 4 bytes\n-print-type-size     variant `Record`: 10 bytes\n-print-type-size         field `.pre`: 1 bytes\n-print-type-size         padding: 3 bytes\n-print-type-size         field `.val`: 4 bytes, alignment: 4 bytes\n-print-type-size         field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n-print-type-size type: `NestedNonZero<u32>`: 12 bytes, alignment: 4 bytes\n print-type-size     field `.pre`: 1 bytes\n-print-type-size     padding: 3 bytes\n-print-type-size     field `.val`: 4 bytes, alignment: 4 bytes\n+print-type-size     end padding: 1 bytes\n+print-type-size type: `MyOption<IndirectNonZero<u32>>`: 12 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 12 bytes\n+print-type-size         field `.0`: 12 bytes\n+print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     variant `Record`: 7 bytes\n+print-type-size         field `.val`: 4 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.pre`: 1 bytes\n+print-type-size     end padding: 1 bytes\n+print-type-size type: `NestedNonZero<u32>`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n+print-type-size     field `.pre`: 1 bytes\n+print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<core::nonzero::NonZero<u32>>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes"}, {"sha": "83fd333c9c7fc45dba547de22add55c477521ef9", "filename": "src/test/ui/print_type_sizes/packed.stdout", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -1,13 +1,11 @@\n-print-type-size type: `Padded`: 16 bytes, alignment: 4 bytes\n+print-type-size type: `Padded`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.g`: 4 bytes\n+print-type-size     field `.h`: 2 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes\n-print-type-size     padding: 2 bytes\n-print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.c`: 1 bytes\n-print-type-size     padding: 1 bytes\n-print-type-size     field `.h`: 2 bytes, alignment: 2 bytes\n print-type-size     field `.d`: 1 bytes\n-print-type-size     end padding: 3 bytes\n+print-type-size     end padding: 2 bytes\n print-type-size type: `Packed`: 10 bytes, alignment: 1 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes"}, {"sha": "0eaff7118b35c38a528dab7052d2cd498acb15aa", "filename": "src/test/ui/print_type_sizes/padding.stdout", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63ebf08be50c2716b66f14f0ab6e9885542eb0a0/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout?ref=63ebf08be50c2716b66f14f0ab6e9885542eb0a0", "patch": "@@ -1,10 +1,12 @@\n print-type-size type: `E1`: 12 bytes, alignment: 4 bytes\n-print-type-size     discriminant: 4 bytes\n-print-type-size     variant `A`: 5 bytes\n-print-type-size         field `.0`: 4 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `A`: 7 bytes\n print-type-size         field `.1`: 1 bytes\n-print-type-size     variant `B`: 8 bytes\n-print-type-size         field `.0`: 8 bytes\n+print-type-size         padding: 2 bytes\n+print-type-size         field `.0`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `B`: 11 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `E2`: 12 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `A`: 7 bytes\n@@ -15,7 +17,7 @@ print-type-size     variant `B`: 11 bytes\n print-type-size         padding: 3 bytes\n print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `S`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.g`: 4 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes\n-print-type-size     padding: 2 bytes\n-print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n+print-type-size     end padding: 2 bytes"}]}