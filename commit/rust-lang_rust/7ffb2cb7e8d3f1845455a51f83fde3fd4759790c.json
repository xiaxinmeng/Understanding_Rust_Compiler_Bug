{"sha": "7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZmIyY2I3ZThkM2YxODQ1NDU1YTUxZjgzZmRlM2ZkNDc1OTc5MGM=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-19T08:50:51Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-19T09:54:38Z"}, "message": "rustc: Name the lint-style check module `lint`\n\nIssue #1543", "tree": {"sha": "c94f04c555ac77099b07f30862f6d6d7eae1dfea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94f04c555ac77099b07f30862f6d6d7eae1dfea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "html_url": "https://github.com/rust-lang/rust/commit/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "327a15d58c06136794621315388959b390511834", "url": "https://api.github.com/repos/rust-lang/rust/commits/327a15d58c06136794621315388959b390511834", "html_url": "https://github.com/rust-lang/rust/commit/327a15d58c06136794621315388959b390511834"}], "stats": {"total": 164, "additions": 93, "deletions": 71}, "files": [{"sha": "741f9a2cba8b962bf0a080b9a5709803597b6b40", "filename": "man/rustc.1", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "patch": "@@ -124,8 +124,10 @@ Build a test harness.\n \\fB--warn-unused-imports\\fR:\n Warn about unnecessary imports.\n .TP\n-\\fB--no-check-usage\\fR:\n-Disables various one-off usage analyses.\n+\\fB--no-lint-ctypes\\fR:\n+Disables checking of possibly incorrect usage of Rust int or uint types in\n+native function declarations, where types defined in libcore::ctypes should be\n+used instead. Ctypes check emits warnings by default.\n .SH \"BUGS\"\n See \\fBhttps://github.com/mozilla/rust/issues\\fR for a list of known bugs.\n .SH \"AUTHOR\""}, {"sha": "6c2a646f35d4b751fd182177bcf59e8866a57abf", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "patch": "@@ -6,7 +6,7 @@ import syntax::parse::{parser};\n import syntax::{ast, codemap};\n import front::attr;\n import middle::{trans, resolve, freevars, kind, ty, typeck, fn_usage,\n-                last_use, check_usage};\n+                last_use, lint};\n import syntax::print::{pp, pprust};\n import util::{ppaux, filesearch};\n import back::link;\n@@ -203,9 +203,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n-    if sess.opts.check_usage {\n-        time(time_passes, \"usage analyses\",\n-             bind check_usage::check_crate(ty_cx, crate));\n+    if vec::len(sess.opts.lint_opts) > 0u {\n+        let timer = bind time(time_passes, _, _);\n+        lint::check_crate(ty_cx, crate, sess.opts.lint_opts, timer)\n     }\n \n     if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n@@ -384,6 +384,10 @@ fn build_session_options(match: getopts::match,\n \n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n+    let lint_opts : [lint::option] = [];\n+    if !opt_present(match, \"no-lint-ctypes\") {\n+        lint_opts += [lint::ctypes];\n+    }\n \n     let output_type =\n         if parse_only || no_trans {\n@@ -399,7 +403,6 @@ fn build_session_options(match: getopts::match,\n         } else { link::output_type_exe };\n     let libcore = !opt_present(match, \"no-core\");\n     let verify = !opt_present(match, \"no-verify\");\n-    let check_usage = !opt_present(match, \"no-usage-check\");\n     let save_temps = opt_present(match, \"save-temps\");\n     let extra_debuginfo = opt_present(match, \"xg\");\n     let debuginfo = opt_present(match, \"g\") || extra_debuginfo;\n@@ -451,7 +454,7 @@ fn build_session_options(match: getopts::match,\n           debuginfo: debuginfo,\n           extra_debuginfo: extra_debuginfo,\n           verify: verify,\n-          check_usage: check_usage,\n+          lint_opts: lint_opts,\n           save_temps: save_temps,\n           stats: stats,\n           time_passes: time_passes,\n@@ -520,7 +523,7 @@ fn opts() -> [getopts::opt] {\n          optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n          optflag(\"no-verify\"),\n-         optflag(\"no-usage-check\"),\n+         optflag(\"no-lint-ctypes\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"no-core\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),"}, {"sha": "8ca9a3e6f72b7a363e50fe1a89912ea49ed59006", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "patch": "@@ -38,7 +38,6 @@ options:\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     --no-verify        suppress LLVM verification step (slight speedup)\n-    --no-check-usage   suppress various one-off usage analyses\n     --parse-only       parse only; do not compile, assemble, or link\n     --no-trans         run all passes except translation; no output\n     -g                 produce debug info\n@@ -59,6 +58,7 @@ options:\n     --gc               garbage collect shared data (experimental/temporary)\n     --warn-unused-imports\n                        warn about unnecessary imports\n+    --no-lint-ctypes   suppress lint-style ctypes usage check\n \n \");\n }"}, {"sha": "67a8268f5fdd73bda84e0b38aa0d55b570671541", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "patch": "@@ -8,6 +8,7 @@ import option::{some, none};\n import syntax::parse::parser::parse_sess;\n import util::filesearch;\n import back::target_strs;\n+import middle::lint;\n \n tag os { os_win32; os_macos; os_linux; os_freebsd; }\n \n@@ -33,7 +34,7 @@ type options =\n      debuginfo: bool,\n      extra_debuginfo: bool,\n      verify: bool,\n-     check_usage: bool,\n+     lint_opts: [lint::option],\n      save_temps: bool,\n      stats: bool,\n      time_passes: bool,"}, {"sha": "227e563ed7c5ce86d821688299b80408a4ac3218", "filename": "src/comp/middle/check_usage.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fmiddle%2Fcheck_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fmiddle%2Fcheck_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_usage.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -1,59 +0,0 @@\n-import driver::session::session;\n-import middle::ty::ctxt;\n-import syntax::{ast, visit};\n-\n-type crate_ctxt = {tcx: ty::ctxt};\n-\n-fn check_native_fn(ccx: @crate_ctxt, decl: ast::fn_decl) {\n-    let tys = vec::map(decl.inputs) {|a| a.ty };\n-    for ty in (tys + [decl.output]) {\n-        alt ty.node {\n-          ast::ty_int(ast::ty_i.) {\n-            ccx.tcx.sess.span_warn(\n-                ty.span, \"found rust type `int` in native module, while \" +\n-                         \"ctypes::c_int or ctypes::long should be used\");\n-          }\n-          ast::ty_uint(ast::ty_u.) {\n-            ccx.tcx.sess.span_warn(\n-                ty.span, \"found rust type `uint` in native module, while \" +\n-                         \"ctypes::c_uint or ctypes::ulong should be used\");\n-          }\n-          _ { }\n-        }\n-    }\n-}\n-\n-fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n-    alt it.node {\n-      ast::item_native_mod(nmod) {\n-        for ni in nmod.items {\n-            alt ni.node {\n-              ast::native_item_fn(decl, tps) {\n-                check_native_fn(ccx, decl);\n-              }\n-              _ { }\n-            }\n-        }\n-      }\n-      _ {/* nothing to do */ }\n-    }\n-}\n-\n-fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n-    let ccx = @{tcx: tcx};\n-    let visit = visit::mk_simple_visitor(@{\n-        visit_item: bind check_item(ccx, _)\n-        with *visit::default_simple_visitor()\n-    });\n-    visit::visit_crate(*crate, (), visit);\n-    tcx.sess.abort_if_errors();\n-}\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "1b19fd6006626399f8c1e442266baa31de07599a", "filename": "src/comp/middle/lint.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flint.rs?ref=7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "patch": "@@ -0,0 +1,75 @@\n+import driver::session::session;\n+import middle::ty::ctxt;\n+import syntax::{ast, visit};\n+\n+type crate_ctxt = {tcx: ty::ctxt};\n+\n+enum option {\n+    ctypes;\n+}\n+\n+fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n+               checks: [option], timer: block(str, fn@())) {\n+    let ccx = @{tcx: tcx};\n+    vec::iter(checks) {|c|\n+        alt c {\n+          ctypes {\n+            timer(\"ctypes usage checking\", bind check_ctypes(ccx, crate))\n+          }\n+        }\n+    }\n+}\n+\n+fn check_ctypes(ccx: @crate_ctxt, crate: @ast::crate) {\n+    fn check_native_fn(ccx: @crate_ctxt, decl: ast::fn_decl) {\n+        let tys = vec::map(decl.inputs) {|a| a.ty };\n+        for ty in (tys + [decl.output]) {\n+            alt ty.node {\n+              ast::ty_int(ast::ty_i) {\n+                ccx.tcx.sess.span_warn(\n+                    ty.span,\n+                    \"found rust type `int` in native module, while \\\n+                     ctypes::c_int or ctypes::long should be used\");\n+              }\n+              ast::ty_uint(ast::ty_u) {\n+                ccx.tcx.sess.span_warn(\n+                    ty.span,\n+                    \"found rust type `uint` in native module, while \\\n+                     ctypes::c_uint or ctypes::ulong should be used\");\n+              }\n+              _ { }\n+            }\n+        }\n+    }\n+\n+    fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n+        alt it.node {\n+          ast::item_native_mod(nmod) {\n+            for ni in nmod.items {\n+                alt ni.node {\n+                  ast::native_item_fn(decl, tps) {\n+                    check_native_fn(ccx, decl);\n+                  }\n+                  _ { }\n+                }\n+            }\n+          }\n+          _ {/* nothing to do */ }\n+        }\n+    }\n+\n+    let visit = visit::mk_simple_visitor(@{\n+        visit_item: bind check_item(ccx, _)\n+        with *visit::default_simple_visitor()\n+    });\n+    visit::visit_crate(*crate, (), visit);\n+}\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "20364cc53695a7fa6f4ef7681a8cb6d808f35583", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "patch": "@@ -29,7 +29,7 @@ mod middle {\n     mod fn_usage;\n     mod check_alt;\n     mod check_const;\n-    mod check_usage;\n+    mod lint;\n     mod mut;\n     mod alias;\n     mod last_use;"}]}