{"sha": "bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "node_id": "C_kwDOAAsO6NoAKGJkNzdkOGMzZDFjODBjYTM3NWMzZTllMzA0NmFmNWFjOGE0ZjUxNWE", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-11T21:40:22Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:11Z"}, "message": "removed prints", "tree": {"sha": "b5fd951462385a083a64efa893f93b30e8bf745f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5fd951462385a083a64efa893f93b30e8bf745f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0psACgkQeO9fUvOM\nSb0niAwA03gT4veC9GmVfCQW6/A6iMUZiKNC7ZYsBxnnifDuo1thlGMQ2DYbdNVb\nV8Qs9TsuDtSJA5ZgO+gJDDCCfjiGBSxlL1gJH9JeYwrtw3z2tqAl1naBYeF0NJRy\nG44HZpL+DZl91AXxGA49K6+jbl5a9OiRvxXjg/lwdqIw4Yl6N6iUVa87KohUgGVO\nmYoiTAPEFXq52rRs8CXy6TM2qclk0BdpdxqTxHD0O8Y3/jENYD91QuQ8w4hDcSJf\n1SgjRkOSRUNh0dgUaMPG1gYsViADDq9DuhiKHhmEJ4ij0Yycf5izTvx2wCKMGJw9\niSSbxZQZe013FjJaJc+QHEZRoIO1qgqfQ1FFkmPKVQvReLN9yGsRGjDr8ej6mlrc\nGyMbQ6tJX/Auk2L5ft3OIIytYRwFg4meOWJhInqq7hVpVHdCMAc1rsVP1P0hZSay\nmV70uDpv2JidWiysbse8qAvVl784lgOJv9Hdbjh4CAz5whTIQm7HiHQNoAGq2DpI\nzBDjllkN\n=/EXV\n-----END PGP SIGNATURE-----", "payload": "tree b5fd951462385a083a64efa893f93b30e8bf745f\nparent 18fb5412b2c9b05a767ed6c315c3521453cd50fc\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641937222 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123931 +0000\n\nremoved prints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "html_url": "https://github.com/rust-lang/rust/commit/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fb5412b2c9b05a767ed6c315c3521453cd50fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fb5412b2c9b05a767ed6c315c3521453cd50fc", "html_url": "https://github.com/rust-lang/rust/commit/18fb5412b2c9b05a767ed6c315c3521453cd50fc"}], "stats": {"total": 5, "additions": 0, "deletions": 5}, "files": [{"sha": "4e09bb2a702210e46fb75b14a22461a6b6bfb6b8", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=bd77d8c3d1c80ca375c3e9e3046af5ac8a4f515a", "patch": "@@ -52,7 +52,6 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n                     return false;\n                 }\n \n-                println!(\"Checking types\");\n                 return are_same_types(&current_arm_types, arm, ctx);\n             }\n             _ => false,\n@@ -104,15 +103,13 @@ fn are_same_types(\n     for other_arm_type_entry in arm_types {\n         let current_arm_type = current_arm_types.get_key_value(&other_arm_type_entry.0);\n         if current_arm_type.is_none() {\n-            println!(\"No corresponding type found for {:?}\", {other_arm_type_entry});\n             return false;\n         }\n \n         let unwrapped_current_arm_type = current_arm_type.unwrap().1;\n         \n         if let (Some(other_arm_type), Some(current_arm_type)) = (other_arm_type_entry.1, unwrapped_current_arm_type) {\n             if other_arm_type.original != current_arm_type.original {\n-                println!(\"Type {:?} is different from {:?}\", &other_arm_type.original, &current_arm_type.original);\n                 return false;\n             }\n         }\n@@ -126,7 +123,6 @@ fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Opt\n     \n     fn recurse(pat: &Option<Pat>, map: &mut HashMap<String, Option<TypeInfo>>, ctx: &AssistContext) {\n         if let Some(local_pat) = pat {\n-            println!(\"{:?}\", pat);\n             match pat {\n                 Some(ast::Pat::TupleStructPat(tuple)) => {\n                     for field in tuple.fields() {\n@@ -142,7 +138,6 @@ fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Opt\n                 },\n                 Some(ast::Pat::IdentPat(ident_pat)) => {\n                     if let Some(name) = ident_pat.name() {\n-                        println!(\"Found name: {:?}\", name.text().to_string());\n                         let pat_type = ctx.sema.type_of_pat(local_pat);\n                         map.insert(name.text().to_string(), pat_type);\n                     }"}]}