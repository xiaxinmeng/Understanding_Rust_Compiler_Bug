{"sha": "d2834525ba9378bb69214f3c3f7e868b9f6d4880", "node_id": "C_kwDOAAsO6NoAKGQyODM0NTI1YmE5Mzc4YmI2OTIxNGYzYzNmN2U4NjhiOWY2ZDQ4ODA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-11T22:05:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-11T22:05:50Z"}, "message": "Use TyCtxt::trait_solver_next in some places", "tree": {"sha": "898aff6912f132ed8b19c4734466a43afcbaf21c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898aff6912f132ed8b19c4734466a43afcbaf21c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2834525ba9378bb69214f3c3f7e868b9f6d4880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2834525ba9378bb69214f3c3f7e868b9f6d4880", "html_url": "https://github.com/rust-lang/rust/commit/d2834525ba9378bb69214f3c3f7e868b9f6d4880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2834525ba9378bb69214f3c3f7e868b9f6d4880/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a73f50d875840b8077b8ec080fa41881d7ce40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a73f50d875840b8077b8ec080fa41881d7ce40d", "html_url": "https://github.com/rust-lang/rust/commit/8a73f50d875840b8077b8ec080fa41881d7ce40d"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "f84b2f4428d1a26c8ae71a503151fac849ef392c", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2834525ba9378bb69214f3c3f7e868b9f6d4880/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2834525ba9378bb69214f3c3f7e868b9f6d4880/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=d2834525ba9378bb69214f3c3f7e868b9f6d4880", "patch": "@@ -1,6 +1,5 @@\n use rustc_middle::traits::solve::{Certainty, Goal, MaybeCause};\n use rustc_middle::ty;\n-use rustc_session::config::TraitSolver;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n@@ -80,13 +79,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             _ => obligation.param_env.without_const(),\n         };\n \n-        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n-            let c_pred = self.canonicalize_query_keep_static(\n-                param_env.and(obligation.predicate),\n-                &mut _orig_values,\n-            );\n-            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n-        } else {\n+        if self.tcx.trait_solver_next() {\n             self.probe(|snapshot| {\n                 if let Ok((_, certainty)) =\n                     self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n@@ -111,6 +104,12 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     Ok(EvaluationResult::EvaluatedToErr)\n                 }\n             })\n+        } else {\n+            let c_pred = self.canonicalize_query_keep_static(\n+                param_env.and(obligation.predicate),\n+                &mut _orig_values,\n+            );\n+            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n         }\n     }\n "}, {"sha": "d7ce0078124500c75c0a4b7301ed46aa7dbd13ec", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2834525ba9378bb69214f3c3f7e868b9f6d4880/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2834525ba9378bb69214f3c3f7e868b9f6d4880/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d2834525ba9378bb69214f3c3f7e868b9f6d4880", "patch": "@@ -50,7 +50,6 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitableExt};\n-use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};\n@@ -545,13 +544,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.evaluation_probe(|this| {\n-            if this.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            if this.tcx().trait_solver_next() {\n+                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n+            } else {\n                 this.evaluate_predicate_recursively(\n                     TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n                     obligation.clone(),\n                 )\n-            } else {\n-                this.evaluate_predicates_recursively_in_new_solver([obligation.clone()])\n             }\n         })\n     }\n@@ -591,7 +590,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     where\n         I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,\n     {\n-        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+        if self.tcx().trait_solver_next() {\n+            self.evaluate_predicates_recursively_in_new_solver(predicates)\n+        } else {\n             let mut result = EvaluatedToOk;\n             for obligation in predicates {\n                 let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;\n@@ -604,8 +605,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n             Ok(result)\n-        } else {\n-            self.evaluate_predicates_recursively_in_new_solver(predicates)\n         }\n     }\n "}]}