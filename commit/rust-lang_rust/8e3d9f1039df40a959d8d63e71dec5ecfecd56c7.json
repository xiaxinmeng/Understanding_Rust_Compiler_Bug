{"sha": "8e3d9f1039df40a959d8d63e71dec5ecfecd56c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlM2Q5ZjEwMzlkZjQwYTk1OWQ4ZDYzZTcxZGVjNWVjZmVjZDU2Yzc=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-04-25T12:52:34Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-05-04T09:47:26Z"}, "message": "add to_result to ty::MaybeResult", "tree": {"sha": "1b520ddcd5b6dc0d88e894903b2b951a016e1a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b520ddcd5b6dc0d88e894903b2b951a016e1a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3d9f1039df40a959d8d63e71dec5ecfecd56c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3d9f1039df40a959d8d63e71dec5ecfecd56c7", "html_url": "https://github.com/rust-lang/rust/commit/8e3d9f1039df40a959d8d63e71dec5ecfecd56c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3d9f1039df40a959d8d63e71dec5ecfecd56c7/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35bd58b4e85791e9c94f1eea7387f59c5feb6b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/35bd58b4e85791e9c94f1eea7387f59c5feb6b60", "html_url": "https://github.com/rust-lang/rust/commit/35bd58b4e85791e9c94f1eea7387f59c5feb6b60"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "7f879cd77fdffad9cf856191025952b8f7387b1f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8e3d9f1039df40a959d8d63e71dec5ecfecd56c7/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3d9f1039df40a959d8d63e71dec5ecfecd56c7/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8e3d9f1039df40a959d8d63e71dec5ecfecd56c7", "patch": "@@ -5,6 +5,7 @@ use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n use syntax_pos::DUMMY_SP;\n \n+// use std::convert::From;\n use std::cmp;\n use std::fmt;\n use std::i128;\n@@ -1544,32 +1545,38 @@ impl<'gcx, 'tcx, T: HasTyCtxt<'gcx>> HasTyCtxt<'gcx> for LayoutCx<'tcx, T> {\n }\n \n pub trait MaybeResult<T> {\n+    type Item;\n+\n     fn from_ok(x: T) -> Self;\n     fn map_same<F: FnOnce(T) -> T>(self, f: F) -> Self;\n-    fn ok(self) -> Option<T>;\n+    fn to_result(self) -> Result<T, Self::Item>;\n }\n \n impl<T> MaybeResult<T> for T {\n+    type Item = !;\n+\n     fn from_ok(x: T) -> Self {\n         x\n     }\n     fn map_same<F: FnOnce(T) -> T>(self, f: F) -> Self {\n         f(self)\n     }\n-    fn ok(self) -> Option<T> {\n-        Some(self)\n+    fn to_result(self) -> Result<T, !> {\n+        Ok(self)\n     }\n }\n \n impl<T, E> MaybeResult<T> for Result<T, E> {\n+    type Item = E;\n+\n     fn from_ok(x: T) -> Self {\n         Ok(x)\n     }\n     fn map_same<F: FnOnce(T) -> T>(self, f: F) -> Self {\n         self.map(f)\n     }\n-    fn ok(self) -> Option<T> {\n-        self.ok()\n+    fn to_result(self) -> Result<T, E> {\n+        self\n     }\n }\n \n@@ -1843,7 +1850,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n     ) -> Option<PointeeInfo> {\n         match this.ty.sty {\n             ty::RawPtr(mt) if offset.bytes() == 0 => {\n-                cx.layout_of(mt.ty).ok()\n+                cx.layout_of(mt.ty).to_result().ok()\n                     .map(|layout| PointeeInfo {\n                         size: layout.size,\n                         align: layout.align.abi,\n@@ -1882,7 +1889,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     }\n                 };\n \n-                cx.layout_of(ty).ok()\n+                cx.layout_of(ty).to_result().ok()\n                     .map(|layout| PointeeInfo {\n                         size: layout.size,\n                         align: layout.align.abi,\n@@ -1930,7 +1937,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                         let field_start = variant.fields.offset(i);\n                         if field_start <= offset {\n                             let field = variant.field(cx, i);\n-                            result = field.ok()\n+                            result = field.to_result().ok()\n                                 .and_then(|field| {\n                                     if ptr_end <= field_start + field.size {\n                                         // We found the right field, look inside it."}]}