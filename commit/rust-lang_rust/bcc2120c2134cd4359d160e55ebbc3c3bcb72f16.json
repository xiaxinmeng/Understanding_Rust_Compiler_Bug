{"sha": "bcc2120c2134cd4359d160e55ebbc3c3bcb72f16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYzIxMjBjMjEzNGNkNDM1OWQxNjBlNTVlYmJjM2MzYmNiNzJmMTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T01:13:30Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:26Z"}, "message": "rustc_borrowck: unbox closures used in function arguments", "tree": {"sha": "2e710a21ee77cacf6f23f515b1857b7716e0d597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e710a21ee77cacf6f23f515b1857b7716e0d597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc2120c2134cd4359d160e55ebbc3c3bcb72f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc2120c2134cd4359d160e55ebbc3c3bcb72f16", "html_url": "https://github.com/rust-lang/rust/commit/bcc2120c2134cd4359d160e55ebbc3c3bcb72f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc2120c2134cd4359d160e55ebbc3c3bcb72f16/comments", "author": null, "committer": null, "parents": [{"sha": "24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "html_url": "https://github.com/rust-lang/rust/commit/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "547e7d272c69d9026430952264f8ce682f001c0e", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcc2120c2134cd4359d160e55ebbc3c3bcb72f16/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc2120c2134cd4359d160e55ebbc3c3bcb72f16/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=bcc2120c2134cd4359d160e55ebbc3c3bcb72f16", "patch": "@@ -521,15 +521,17 @@ impl<'tcx> MoveData<'tcx> {\n         return true;\n     }\n \n-    // FIXME(#19596) unbox `f`\n-    fn each_extending_path(&self, index: MovePathIndex, f: |MovePathIndex| -> bool) -> bool {\n-        if !f(index) {\n+    // FIXME(#19596) This is a workaround, but there should be better way to do this\n+    fn each_extending_path_<F>(&self, index: MovePathIndex, f: &mut F) -> bool where\n+        F: FnMut(MovePathIndex) -> bool,\n+    {\n+        if !(*f)(index) {\n             return false;\n         }\n \n         let mut p = self.path_first_child(index);\n         while p != InvalidMovePathIndex {\n-            if !self.each_extending_path(p, |x| f(x)) {\n+            if !self.each_extending_path_(p, f) {\n                 return false;\n             }\n             p = self.path_next_sibling(p);\n@@ -538,6 +540,12 @@ impl<'tcx> MoveData<'tcx> {\n         return true;\n     }\n \n+    fn each_extending_path<F>(&self, index: MovePathIndex, mut f: F) -> bool where\n+        F: FnMut(MovePathIndex) -> bool,\n+    {\n+        self.each_extending_path_(index, &mut f)\n+    }\n+\n     fn each_applicable_move<F>(&self, index0: MovePathIndex, mut f: F) -> bool where\n         F: FnMut(MoveIndex) -> bool,\n     {"}]}