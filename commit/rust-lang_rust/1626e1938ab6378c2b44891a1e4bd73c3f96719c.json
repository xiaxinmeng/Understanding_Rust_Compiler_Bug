{"sha": "1626e1938ab6378c2b44891a1e4bd73c3f96719c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MjZlMTkzOGFiNjM3OGMyYjQ0ODkxYTFlNGJkNzNjM2Y5NjcxOWM=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-05-27T03:00:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:27:24Z"}, "message": "Add support for associated functions to `future_prelude_collision` lint", "tree": {"sha": "779bdf092b3a7f43a82f99e56f5ce34da0a7b390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779bdf092b3a7f43a82f99e56f5ce34da0a7b390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1626e1938ab6378c2b44891a1e4bd73c3f96719c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1626e1938ab6378c2b44891a1e4bd73c3f96719c", "html_url": "https://github.com/rust-lang/rust/commit/1626e1938ab6378c2b44891a1e4bd73c3f96719c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1626e1938ab6378c2b44891a1e4bd73c3f96719c/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dc234c436b17896e3109a88c12c093db515666", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dc234c436b17896e3109a88c12c093db515666", "html_url": "https://github.com/rust-lang/rust/commit/a9dc234c436b17896e3109a88c12c093db515666"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "19f55c47d581c10cc88936c5eead214c64116191", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1626e1938ab6378c2b44891a1e4bd73c3f96719c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1626e1938ab6378c2b44891a1e4bd73c3f96719c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1626e1938ab6378c2b44891a1e4bd73c3f96719c", "patch": "@@ -587,6 +587,7 @@ symbols! {\n         from,\n         from_desugaring,\n         from_generator,\n+        from_iter,\n         from_method,\n         from_output,\n         from_residual,"}, {"sha": "1960e757bad59dbce397f4914490618e6002819a", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1626e1938ab6378c2b44891a1e4bd73c3f96719c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1626e1938ab6378c2b44891a1e4bd73c3f96719c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=1626e1938ab6378c2b44891a1e4bd73c3f96719c", "patch": "@@ -201,7 +201,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n         if span.edition() < Edition::Edition2021 {\n-            if let sym::try_from | sym::try_into = segment.ident.name {\n+            if let sym::try_into = segment.ident.name {\n                 if let probe::PickKind::TraitPick = pick.kind {\n                     if !matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core)\n                     {\n@@ -526,6 +526,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr_id,\n             ProbeScope::TraitsInScope,\n         )?;\n+\n+        if span.edition() < Edition::Edition2021 {\n+            if let sym::try_into | sym::try_from | sym::from_iter = method_name.name {\n+                if let probe::PickKind::TraitPick = pick.kind {\n+                    if !matches!(tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n+                        tcx.struct_span_lint_hir(FUTURE_PRELUDE_COLLISION, expr_id, span, |lint| {\n+                            let trait_name = tcx.def_path_str(pick.item.container.assert_trait());\n+\n+                            let mut lint = lint.build(&format!(\n+                                \"trait method `{}` will become ambiguous in Rust 2021\",\n+                                method_name.name\n+                            ));\n+\n+                            lint.span_suggestion(\n+                                span,\n+                                \"disambiguate the associated function\",\n+                                format!(\"<{} as {}>::{}\", self_ty, trait_name, method_name.name,),\n+                                Applicability::MachineApplicable,\n+                            );\n+\n+                            lint.emit();\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+\n         debug!(\"resolve_ufcs: pick={:?}\", pick);\n         {\n             let mut typeck_results = self.typeck_results.borrow_mut();"}]}