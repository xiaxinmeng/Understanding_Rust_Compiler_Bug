{"sha": "ae70d072374f3c4d14abdccbe61661cf02b41b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNzBkMDcyMzc0ZjNjNGQxNGFiZGNjYmU2MTY2MWNmMDJiNDFiMzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T13:26:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T13:26:59Z"}, "message": "Rename", "tree": {"sha": "7b4540f55d2cae95e2682920a6946736a22c351f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4540f55d2cae95e2682920a6946736a22c351f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae70d072374f3c4d14abdccbe61661cf02b41b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae70d072374f3c4d14abdccbe61661cf02b41b33", "html_url": "https://github.com/rust-lang/rust/commit/ae70d072374f3c4d14abdccbe61661cf02b41b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae70d072374f3c4d14abdccbe61661cf02b41b33/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4", "html_url": "https://github.com/rust-lang/rust/commit/f55be75a17dab2ca23b34c45e7597fe19a5fc8e4"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "de5551a4c75df791e9d5436b54c255259c17332a", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=ae70d072374f3c4d14abdccbe61661cf02b41b33", "patch": "@@ -76,10 +76,10 @@ pub(crate) fn reference_definition(\n     let name_kind = classify_name_ref(sb, name_ref).map(|d| d.kind);\n     match name_kind {\n         Some(Macro(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(Field(it)) => return Exact(it.to_nav(sb.db)),\n+        Some(StructField(it)) => return Exact(it.to_nav(sb.db)),\n         Some(TypeParam(it)) => return Exact(it.to_nav(sb.db)),\n         Some(Local(it)) => return Exact(it.to_nav(sb.db)),\n-        Some(Def(def)) => match NavigationTarget::from_def(sb.db, def) {\n+        Some(ModuleDef(def)) => match NavigationTarget::from_def(sb.db, def) {\n             Some(nav) => return Exact(nav),\n             None => return Approximate(vec![]),\n         },"}, {"sha": "3f88bb260681dc2a768c3b56821f37f86d393645", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=ae70d072374f3c4d14abdccbe61661cf02b41b33", "patch": "@@ -98,14 +98,14 @@ fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<S\n             let src = it.source(db);\n             hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)))\n         }\n-        Field(it) => {\n+        StructField(it) => {\n             let src = it.source(db);\n             match src.value {\n                 hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n                 _ => None,\n             }\n         }\n-        Def(it) => match it {\n+        ModuleDef(it) => match it {\n             hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n                 hir::ModuleSource::Module(it) => {\n                     hover_text(it.doc_comment_text(), it.short_label())"}, {"sha": "a6320bd2f5701b93fae09f31001cb4b483f92ec8", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=ae70d072374f3c4d14abdccbe61661cf02b41b33", "patch": "@@ -127,8 +127,8 @@ pub(crate) fn find_all_refs(\n \n     let declaration = match def.kind {\n         NameKind::Macro(mac) => mac.to_nav(db),\n-        NameKind::Field(field) => field.to_nav(db),\n-        NameKind::Def(def) => NavigationTarget::from_def(db, def)?,\n+        NameKind::StructField(field) => field.to_nav(db),\n+        NameKind::ModuleDef(def) => NavigationTarget::from_def(db, def)?,\n         NameKind::SelfType(imp) => imp.to_nav(db),\n         NameKind::Local(local) => local.to_nav(db),\n         NameKind::TypeParam(_) => return None,\n@@ -239,7 +239,7 @@ fn decl_access(\n     range: TextRange,\n ) -> Option<ReferenceAccess> {\n     match kind {\n-        NameKind::Local(_) | NameKind::Field(_) => {}\n+        NameKind::Local(_) | NameKind::StructField(_) => {}\n         _ => return None,\n     };\n \n@@ -259,7 +259,7 @@ fn decl_access(\n fn reference_access(kind: &NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAccess> {\n     // Only Locals and Fields have accesses for now.\n     match kind {\n-        NameKind::Local(_) | NameKind::Field(_) => {}\n+        NameKind::Local(_) | NameKind::StructField(_) => {}\n         _ => return None,\n     };\n "}, {"sha": "174e135951a34f438880a2f623ff120d24550643", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=ae70d072374f3c4d14abdccbe61661cf02b41b33", "patch": "@@ -320,16 +320,16 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n     match name_kind {\n         Macro(_) => tags::MACRO,\n-        Field(_) => tags::FIELD,\n-        Def(hir::ModuleDef::Module(_)) => tags::MODULE,\n-        Def(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n-        Def(hir::ModuleDef::Adt(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n-        Def(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n-        Def(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n-        Def(hir::ModuleDef::Trait(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n-        Def(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n+        StructField(_) => tags::FIELD,\n+        ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n+        ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n+        ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n+        ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n+        ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n+        ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n+        ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n+        ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n+        ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n         SelfType(_) => tags::TYPE_SELF,\n         TypeParam(_) => tags::TYPE_PARAM,\n         Local(local) => {"}, {"sha": "030f44f8649ddc1b0f0e4eb5ce3bcec8ee0bfd80", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=ae70d072374f3c4d14abdccbe61661cf02b41b33", "patch": "@@ -20,8 +20,8 @@ use crate::RootDatabase;\n #[derive(Debug, PartialEq, Eq)]\n pub enum NameKind {\n     Macro(MacroDef),\n-    Field(StructField),\n-    Def(ModuleDef),\n+    StructField(StructField),\n+    ModuleDef(ModuleDef),\n     SelfType(ImplBlock),\n     Local(Local),\n     TypeParam(TypeParam),\n@@ -130,7 +130,7 @@ pub fn classify_name(\n }\n \n pub fn from_struct_field(db: &RootDatabase, field: StructField) -> NameDefinition {\n-    let kind = NameKind::Field(field);\n+    let kind = NameKind::StructField(field);\n     let parent = field.parent_def(db);\n     let container = parent.module(db);\n     let visibility = match parent {\n@@ -146,7 +146,7 @@ pub fn from_module_def(\n     def: ModuleDef,\n     module: Option<Module>,\n ) -> NameDefinition {\n-    let kind = NameKind::Def(def);\n+    let kind = NameKind::ModuleDef(def);\n     let (container, visibility) = match def {\n         ModuleDef::Module(it) => {\n             let container = it.parent(db).or_else(|| Some(it)).unwrap();"}, {"sha": "86383bcd03c9e6ca63bb189454561ae9396b2516", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae70d072374f3c4d14abdccbe61661cf02b41b33/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=ae70d072374f3c4d14abdccbe61661cf02b41b33", "patch": "@@ -44,7 +44,7 @@ impl<'a> ImportsLocator<'a> {\n             .chain(lib_results.into_iter())\n             .filter_map(|import_candidate| self.get_name_definition(db, &import_candidate))\n             .filter_map(|name_definition_to_import| match name_definition_to_import {\n-                NameKind::Def(module_def) => Some(module_def),\n+                NameKind::ModuleDef(module_def) => Some(module_def),\n                 _ => None,\n             })\n             .collect()"}]}