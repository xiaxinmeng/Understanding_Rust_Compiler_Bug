{"sha": "5137f7c9db44f2f4b4bb0300506aeb0d7483e35f", "node_id": "C_kwDOAAsO6NoAKDUxMzdmN2M5ZGI0NGYyZjRiNGJiMDMwMDUwNmFlYjBkNzQ4M2UzNWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-01T21:49:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T21:49:48Z"}, "message": "Rollup merge of #91593 - upsuper-forks:hashmap-set-methods-bound, r=dtolnay\n\nRemove unnecessary bounds for some Hash{Map,Set} methods\n\nThis PR moves `HashMap::{into_keys,into_values,retain}` and `HashSet::retain` from `impl` blocks with `K: Eq + Hash, S: BuildHasher` into the blocks without them. It doesn't seem to me there is any reason these methods need to be bounded by that. This change brings `HashMap::{into_keys,into_values}` on par with `HashMap::{keys,values,values_mut}` which are not bounded either.", "tree": {"sha": "f551fc6011e8532e581799460e99344a72a227ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f551fc6011e8532e581799460e99344a72a227ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0Mx8CRBK7hj4Ov3rIwAACQkIADYbuz2z+ndKOitJBbYVHwcr\nIxjLdF/iOXguzBxqee6kkghnDfpuL0utSOkg9npV0veQPnSKlBy89goaDsD+xyfm\ns+3+hBlWiRFmSwnvA8kwZp8wEvJpDZbey81iWnII/gG8ucOph3B/iODzezF9lZJR\nzRrrTV1/r94Hztkm5Xe06iNdGdk2Ur/SYDCyqx2SKrIm6nT+8e4pAYFZUdVH2dIe\nYewg9OArk1EfDoSFv1qDoiNMitkxgzofZ4GmRr6FOgRypC+m+gA+72OuV9TzsZqK\ntLsW6P61RrWT4WeaATWH/Jhrlkp6U63oF0/AvouDmhyXcRJu9Q7T1pwM0bDYau8=\n=PI6Q\n-----END PGP SIGNATURE-----\n", "payload": "tree f551fc6011e8532e581799460e99344a72a227ce\nparent 30ec1f0384338351902a22d9d0e7f867f142a1f6\nparent fb1e03168570852507dd4852af501fec571137e8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641073788 +0100\ncommitter GitHub <noreply@github.com> 1641073788 +0100\n\nRollup merge of #91593 - upsuper-forks:hashmap-set-methods-bound, r=dtolnay\n\nRemove unnecessary bounds for some Hash{Map,Set} methods\n\nThis PR moves `HashMap::{into_keys,into_values,retain}` and `HashSet::retain` from `impl` blocks with `K: Eq + Hash, S: BuildHasher` into the blocks without them. It doesn't seem to me there is any reason these methods need to be bounded by that. This change brings `HashMap::{into_keys,into_values}` on par with `HashMap::{keys,values,values_mut}` which are not bounded either.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f", "html_url": "https://github.com/rust-lang/rust/commit/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30ec1f0384338351902a22d9d0e7f867f142a1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/30ec1f0384338351902a22d9d0e7f867f142a1f6", "html_url": "https://github.com/rust-lang/rust/commit/30ec1f0384338351902a22d9d0e7f867f142a1f6"}, {"sha": "fb1e03168570852507dd4852af501fec571137e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1e03168570852507dd4852af501fec571137e8", "html_url": "https://github.com/rust-lang/rust/commit/fb1e03168570852507dd4852af501fec571137e8"}], "stats": {"total": 198, "additions": 99, "deletions": 99}, "files": [{"sha": "c64377dfbc8acd9a8383e4ea9f84c31c01c39c63", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=5137f7c9db44f2f4b4bb0300506aeb0d7483e35f", "patch": "@@ -349,6 +349,33 @@ impl<K, V, S> HashMap<K, V, S> {\n         Keys { inner: self.iter() }\n     }\n \n+    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n+    ///\n+    /// let mut vec: Vec<&str> = map.into_keys().collect();\n+    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n+    /// // keys must be sorted to test them against a sorted array.\n+    /// vec.sort_unstable();\n+    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n     /// An iterator visiting all values in arbitrary order.\n     /// The iterator element type is `&'a V`.\n     ///\n@@ -399,6 +426,33 @@ impl<K, V, S> HashMap<K, V, S> {\n         ValuesMut { inner: self.iter_mut() }\n     }\n \n+    /// Creates a consuming iterator visiting all the values in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n+    ///\n+    /// let mut vec: Vec<i32> = map.into_values().collect();\n+    /// // The `IntoValues` iterator produces values in arbitrary order, so\n+    /// // the values must be sorted to test them against a sorted array.\n+    /// vec.sort_unstable();\n+    /// assert_eq!(vec, [1, 2, 3]);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// The iterator element type is `(&'a K, &'a V)`.\n     ///\n@@ -555,6 +609,29 @@ impl<K, V, S> HashMap<K, V, S> {\n         DrainFilter { base: self.base.drain_filter(pred) }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n+    /// map.retain(|&k, _| k % 2 == 0);\n+    /// assert_eq!(map.len(), 4);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&K, &mut V) -> bool,\n+    {\n+        self.base.retain(f)\n+    }\n+\n     /// Clears the map, removing all key-value pairs. Keeps the allocated memory\n     /// for reuse.\n     ///\n@@ -937,83 +1014,6 @@ where\n     {\n         self.base.remove_entry(k)\n     }\n-\n-    /// Retains only the elements specified by the predicate.\n-    ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n-    /// The elements are visited in unsorted (and unspecified) order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n-    /// map.retain(|&k, _| k % 2 == 0);\n-    /// assert_eq!(map.len(), 4);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n-    pub fn retain<F>(&mut self, f: F)\n-    where\n-        F: FnMut(&K, &mut V) -> bool,\n-    {\n-        self.base.retain(f)\n-    }\n-\n-    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n-    /// The map cannot be used after calling this.\n-    /// The iterator element type is `K`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let map = HashMap::from([\n-    ///     (\"a\", 1),\n-    ///     (\"b\", 2),\n-    ///     (\"c\", 3),\n-    /// ]);\n-    ///\n-    /// let mut vec: Vec<&str> = map.into_keys().collect();\n-    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n-    /// // keys must be sorted to test them against a sorted array.\n-    /// vec.sort_unstable();\n-    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n-    pub fn into_keys(self) -> IntoKeys<K, V> {\n-        IntoKeys { inner: self.into_iter() }\n-    }\n-\n-    /// Creates a consuming iterator visiting all the values in arbitrary order.\n-    /// The map cannot be used after calling this.\n-    /// The iterator element type is `V`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let map = HashMap::from([\n-    ///     (\"a\", 1),\n-    ///     (\"b\", 2),\n-    ///     (\"c\", 3),\n-    /// ]);\n-    ///\n-    /// let mut vec: Vec<i32> = map.into_values().collect();\n-    /// // The `IntoValues` iterator produces values in arbitrary order, so\n-    /// // the values must be sorted to test them against a sorted array.\n-    /// vec.sort_unstable();\n-    /// assert_eq!(vec, [1, 2, 3]);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n-    pub fn into_values(self) -> IntoValues<K, V> {\n-        IntoValues { inner: self.into_iter() }\n-    }\n }\n \n impl<K, V, S> HashMap<K, V, S>"}, {"sha": "0d087772bf931053a54660844e15e6f7997e189a", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5137f7c9db44f2f4b4bb0300506aeb0d7483e35f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=5137f7c9db44f2f4b4bb0300506aeb0d7483e35f", "patch": "@@ -290,6 +290,28 @@ impl<T, S> HashSet<T, S> {\n         DrainFilter { base: self.base.drain_filter(pred) }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n+    /// set.retain(|&k| k % 2 == 0);\n+    /// assert_eq!(set.len(), 3);\n+    /// ```\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&T) -> bool,\n+    {\n+        self.base.retain(f)\n+    }\n+\n     /// Clears the set, removing all values.\n     ///\n     /// # Examples\n@@ -906,28 +928,6 @@ where\n     {\n         self.base.take(value)\n     }\n-\n-    /// Retains only the elements specified by the predicate.\n-    ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n-    /// The elements are visited in unsorted (and unspecified) order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashSet;\n-    ///\n-    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n-    /// set.retain(|&k| k % 2 == 0);\n-    /// assert_eq!(set.len(), 3);\n-    /// ```\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n-    pub fn retain<F>(&mut self, f: F)\n-    where\n-        F: FnMut(&T) -> bool,\n-    {\n-        self.base.retain(f)\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}