{"sha": "738c958a044361dc84a0f27e57b40f66a5815990", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOGM5NThhMDQ0MzYxZGM4NGEwZjI3ZTU3YjQwZjY2YTU4MTU5OTA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-11T18:08:00Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-11T18:08:00Z"}, "message": "Merge #498\n\n498: actually produce missing def kinds r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c57734dc82350c2d853f557a40f7aafdc7470bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57734dc82350c2d853f557a40f7aafdc7470bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738c958a044361dc84a0f27e57b40f66a5815990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738c958a044361dc84a0f27e57b40f66a5815990", "html_url": "https://github.com/rust-lang/rust/commit/738c958a044361dc84a0f27e57b40f66a5815990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738c958a044361dc84a0f27e57b40f66a5815990/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "html_url": "https://github.com/rust-lang/rust/commit/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9"}, {"sha": "f193fbcbae0783953cfaa88aaec6a8d4e1255007", "url": "https://api.github.com/repos/rust-lang/rust/commits/f193fbcbae0783953cfaa88aaec6a8d4e1255007", "html_url": "https://github.com/rust-lang/rust/commit/f193fbcbae0783953cfaa88aaec6a8d4e1255007"}], "stats": {"total": 216, "additions": 168, "deletions": 48}, "files": [{"sha": "d4244f70c53eb6ba4b77af1f3d3a9162e2ec267a", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 74, "deletions": 23, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n use ra_db::{CrateId, Cancelable, FileId};\n-use ra_syntax::{ast, TreeArc, SyntaxNode, AstNode};\n+use ra_syntax::{ast, TreeArc, SyntaxNode};\n \n use crate::{\n     Name, DefId, Path, PerNs, ScopesWithSyntaxMapping, Ty, HirFileId,\n@@ -12,6 +12,7 @@ use crate::{\n     expr::BodySyntaxMapping,\n     ty::InferenceResult,\n     adt::VariantData,\n+    code_model_impl::def_id_to_ast,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -40,12 +41,17 @@ impl Crate {\n     }\n }\n \n+#[derive(Debug)]\n pub enum Def {\n     Module(Module),\n     Struct(Struct),\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n     Function(Function),\n+    Const(Const),\n+    Static(Static),\n+    Trait(Trait),\n+    Type(Type),\n     Item,\n }\n \n@@ -186,13 +192,7 @@ impl Struct {\n         &self,\n         db: &impl HirDatabase,\n     ) -> Cancelable<(HirFileId, TreeArc<ast::StructDef>)> {\n-        let (file_id, syntax) = self.def_id.source(db);\n-        Ok((\n-            file_id,\n-            ast::StructDef::cast(&syntax)\n-                .expect(\"struct def should point to StructDef node\")\n-                .to_owned(),\n-        ))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n }\n \n@@ -219,13 +219,7 @@ impl Enum {\n     }\n \n     pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::EnumDef>)> {\n-        let (file_id, syntax) = self.def_id.source(db);\n-        Ok((\n-            file_id,\n-            ast::EnumDef::cast(&syntax)\n-                .expect(\"enum def should point to EnumDef node\")\n-                .to_owned(),\n-        ))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n }\n \n@@ -259,13 +253,7 @@ impl EnumVariant {\n         &self,\n         db: &impl HirDatabase,\n     ) -> Cancelable<(HirFileId, TreeArc<ast::EnumVariant>)> {\n-        let (file_id, syntax) = self.def_id.source(db);\n-        Ok((\n-            file_id,\n-            ast::EnumVariant::cast(&syntax)\n-                .expect(\"variant def should point to EnumVariant node\")\n-                .to_owned(),\n-        ))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n }\n \n@@ -304,7 +292,7 @@ impl Function {\n     }\n \n     pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::FnDef>)> {\n-        Ok(self.source_impl(db))\n+        Ok(def_id_to_ast(db, self.def_id))\n     }\n \n     pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Cancelable<Arc<BodySyntaxMapping>> {\n@@ -328,3 +316,66 @@ impl Function {\n         db.infer(self.def_id)\n     }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Const {\n+    pub(crate) def_id: DefId,\n+}\n+\n+impl Const {\n+    pub(crate) fn new(def_id: DefId) -> Const {\n+        Const { def_id }\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::ConstDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Static {\n+    pub(crate) def_id: DefId,\n+}\n+\n+impl Static {\n+    pub(crate) fn new(def_id: DefId) -> Static {\n+        Static { def_id }\n+    }\n+\n+    pub fn source(\n+        &self,\n+        db: &impl HirDatabase,\n+    ) -> Cancelable<(HirFileId, TreeArc<ast::StaticDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Trait {\n+    pub(crate) def_id: DefId,\n+}\n+\n+impl Trait {\n+    pub(crate) fn new(def_id: DefId) -> Trait {\n+        Trait { def_id }\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::TraitDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Type {\n+    pub(crate) def_id: DefId,\n+}\n+\n+impl Type {\n+    pub(crate) fn new(def_id: DefId) -> Type {\n+        Type { def_id }\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::TypeDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}"}, {"sha": "0cea9f7b6ff767ef48684c1c1a3309d0c3cd5380", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -1,3 +1,18 @@\n mod krate; // `crate` is invalid ident :(\n mod module;\n pub(crate) mod function;\n+\n+use ra_syntax::{AstNode, TreeArc};\n+\n+use crate::{HirDatabase, DefId, HirFileId};\n+\n+pub(crate) fn def_id_to_ast<N: AstNode>(\n+    db: &impl HirDatabase,\n+    def_id: DefId,\n+) -> (HirFileId, TreeArc<N>) {\n+    let (file_id, syntax) = def_id.source(db);\n+    let ast = N::cast(&syntax)\n+        .unwrap_or_else(|| panic!(\"def points to wrong source {:?} {:?}\", def_id, syntax))\n+        .to_owned();\n+    (file_id, ast)\n+}"}, {"sha": "1ce939e05afaa4264453f6cfd0b3f5908a5a3b27", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -3,16 +3,14 @@ mod scope;\n use std::sync::Arc;\n \n use ra_db::Cancelable;\n-use ra_syntax::{\n-    TreeArc,\n-    ast::{self, AstNode, NameOwner},\n-};\n+use ra_syntax::{TreeArc, ast::{self, NameOwner}};\n \n use crate::{\n-    DefId, DefKind, HirDatabase, Name, AsName, Function, FnSignature, Module, HirFileId,\n+    DefId, HirDatabase, Name, AsName, Function, FnSignature, Module,\n     type_ref::{TypeRef, Mutability},\n     expr::Body,\n     impl_block::ImplBlock,\n+    code_model_impl::def_id_to_ast,\n };\n \n pub use self::scope::{FnScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n@@ -22,16 +20,6 @@ impl Function {\n         Function { def_id }\n     }\n \n-    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n-        let def_loc = self.def_id.loc(db);\n-        assert!(def_loc.kind == DefKind::Function);\n-        let syntax = db.file_item(def_loc.source_item_id);\n-        (\n-            def_loc.source_item_id.file_id,\n-            ast::FnDef::cast(&syntax).unwrap().to_owned(),\n-        )\n-    }\n-\n     pub(crate) fn body(&self, db: &impl HirDatabase) -> Cancelable<Arc<Body>> {\n         db.body_hir(self.def_id)\n     }\n@@ -48,8 +36,8 @@ impl Function {\n \n impl FnSignature {\n     pub(crate) fn fn_signature_query(db: &impl HirDatabase, def_id: DefId) -> Arc<FnSignature> {\n-        let func = Function::new(def_id);\n-        let node = func.source_impl(db).1; // TODO we're using source_impl here to avoid returning Cancelable... this is a bit hacky\n+        // FIXME: we're using def_id_to_ast here to avoid returning Cancelable... this is a bit hacky\n+        let node: TreeArc<ast::FnDef> = def_id_to_ast(db, def_id).1;\n         let name = node\n             .name()\n             .map(|n| n.as_name())"}, {"sha": "316896dce21131b7bdb3698f7d18e10e14d78722", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -4,11 +4,10 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n     HirDatabase, PerNs, Def, Function, Struct, Enum, EnumVariant, ImplBlock, Crate,\n+    Module, Trait, Type, Static, Const,\n     module_tree::ModuleId,\n };\n \n-use crate::code_model_api::Module;\n-\n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor\n /// (but for hir objects).\n@@ -146,6 +145,10 @@ pub(crate) enum DefKind {\n     Struct,\n     Enum,\n     EnumVariant,\n+    Const,\n+    Static,\n+    Trait,\n+    Type,\n     Item,\n \n     StructCtor,\n@@ -173,6 +176,23 @@ impl DefId {\n             }\n             DefKind::Enum => Def::Enum(Enum::new(self)),\n             DefKind::EnumVariant => Def::EnumVariant(EnumVariant::new(self)),\n+            DefKind::Const => {\n+                let def = Const::new(self);\n+                Def::Const(def)\n+            }\n+            DefKind::Static => {\n+                let def = Static::new(self);\n+                Def::Static(def)\n+            }\n+            DefKind::Trait => {\n+                let def = Trait::new(self);\n+                Def::Trait(def)\n+            }\n+            DefKind::Type => {\n+                let def = Type::new(self);\n+                Def::Type(def)\n+            }\n+\n             DefKind::StructCtor => Def::Item,\n             DefKind::Item => Def::Item,\n         };\n@@ -218,10 +238,10 @@ impl DefKind {\n             SyntaxKind::STRUCT_DEF => PerNs::both(DefKind::Struct, DefKind::StructCtor),\n             SyntaxKind::ENUM_DEF => PerNs::types(DefKind::Enum),\n             // These define items, but don't have their own DefKinds yet:\n-            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Item),\n-            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Item),\n-            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Item),\n-            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Item),\n+            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Trait),\n+            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Type),\n+            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Const),\n+            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Static),\n             _ => PerNs::none(),\n         }\n     }"}, {"sha": "45dda4f7fb3870d4c1bf4c28c7f8edb5c1c521bb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -60,4 +60,6 @@ pub use self::code_model_api::{\n     Module, ModuleSource, Problem,\n     Struct, Enum, EnumVariant,\n     Function, FnSignature, ScopeEntryWithSyntax,\n+    Static, Const,\n+    Trait, Type,\n };"}, {"sha": "0c24a065270f0f58d95a1c970f8625b45c68d8dc", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -470,8 +470,12 @@ pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<T\n         Def::Struct(s) => type_for_struct(db, s),\n         Def::Enum(e) => type_for_enum(db, e),\n         Def::EnumVariant(ev) => type_for_enum_variant(db, ev),\n-        Def::Item => {\n-            log::debug!(\"trying to get type for item of unknown type {:?}\", def_id);\n+        _ => {\n+            log::debug!(\n+                \"trying to get type for item of unknown type {:?} {:?}\",\n+                def_id,\n+                def\n+            );\n             Ok(Ty::Unknown)\n         }\n     }"}, {"sha": "e7fa967a03df2688f0ee204910a2c3240328c8a2", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -33,6 +33,10 @@ pub enum CompletionItemKind {\n     EnumVariant,\n     Binding,\n     Field,\n+    Static,\n+    Const,\n+    Trait,\n+    TypeAlias,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -153,6 +157,22 @@ impl Builder {\n                 types: Some(hir::Def::Enum(..)),\n                 ..\n             } => CompletionItemKind::Enum,\n+            PerNs {\n+                types: Some(hir::Def::Trait(..)),\n+                ..\n+            } => CompletionItemKind::Trait,\n+            PerNs {\n+                types: Some(hir::Def::Type(..)),\n+                ..\n+            } => CompletionItemKind::TypeAlias,\n+            PerNs {\n+                values: Some(hir::Def::Const(..)),\n+                ..\n+            } => CompletionItemKind::Const,\n+            PerNs {\n+                values: Some(hir::Def::Static(..)),\n+                ..\n+            } => CompletionItemKind::Static,\n             PerNs {\n                 values: Some(hir::Def::Function(function)),\n                 .."}, {"sha": "b0d0a3e8bb2d49df0982085f81f8edca1e745307", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -108,6 +108,22 @@ impl NavigationTarget {\n                 let (file_id, node) = f.source(db)?;\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n+            Def::Trait(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            Def::Type(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            Def::Static(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            Def::Const(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n             Def::Module(m) => NavigationTarget::from_module(db, m)?,\n             Def::Item => return Ok(None),\n         };"}, {"sha": "7ca2f437dd98ae3619abc5dd89b93bac3d11ce33", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c958a044361dc84a0f27e57b40f66a5815990/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=738c958a044361dc84a0f27e57b40f66a5815990", "patch": "@@ -65,6 +65,10 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::EnumVariant => EnumMember,\n             CompletionItemKind::Binding => Variable,\n             CompletionItemKind::Field => Field,\n+            CompletionItemKind::Trait => Interface,\n+            CompletionItemKind::TypeAlias => Struct,\n+            CompletionItemKind::Const => Constant,\n+            CompletionItemKind::Static => Value,\n         }\n     }\n }"}]}