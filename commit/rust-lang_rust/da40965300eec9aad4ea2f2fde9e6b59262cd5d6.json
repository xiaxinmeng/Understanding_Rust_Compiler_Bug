{"sha": "da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "node_id": "C_kwDOAAsO6NoAKGRhNDA5NjUzMDBlZWM5YWFkNGVhMmYyZmRlOWU2YjU5MjYyY2Q1ZDY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T18:22:51Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T20:26:31Z"}, "message": "Add `Mutability::{is_mut,is_not}`", "tree": {"sha": "57171d455fea2007b2cf5e7fc710ae71d47e7028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57171d455fea2007b2cf5e7fc710ae71d47e7028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "html_url": "https://github.com/rust-lang/rust/commit/da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9c7d0ecc9d902b3ed5eac2f06f8669fed57f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9c7d0ecc9d902b3ed5eac2f06f8669fed57f43", "html_url": "https://github.com/rust-lang/rust/commit/9b9c7d0ecc9d902b3ed5eac2f06f8669fed57f43"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "146fe7cd5938aa45911d5b335b4232493095644e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -803,6 +803,16 @@ impl Mutability {\n             Mutability::Mut => \"&mut \",\n         }\n     }\n+\n+    /// Return `true` if self is mutable\n+    pub fn is_mut(self) -> bool {\n+        matches!(self, Self::Mut)\n+    }\n+\n+    /// Return `true` if self is **not** mutable\n+    pub fn is_not(self) -> bool {\n+        matches!(self, Self::Not)\n+    }\n }\n \n /// The kind of borrow in an `AddrOf` expression,"}, {"sha": "68bcdd828deeb8104f97b85ad847bc2affeed49a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -1781,9 +1781,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Given we are only considering `ImplicitSelf` types, we needn't consider\n                     // the case where we have a mutable pattern to a reference as that would\n                     // no longer be an `ImplicitSelf`.\n-                    TyKind::Rptr(_, mt)\n-                        if mt.ty.kind.is_implicit_self() && mt.mutbl == ast::Mutability::Mut =>\n-                    {\n+                    TyKind::Rptr(_, mt) if mt.ty.kind.is_implicit_self() && mt.mutbl.is_mut() => {\n                         hir::ImplicitSelfKind::MutRef\n                     }\n                     TyKind::Rptr(_, mt) if mt.ty.kind.is_implicit_self() => {"}, {"sha": "3922c637a8c051b4aa39b14423b23d70cecdfd7e", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -578,7 +578,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.multipart_suggestion_verbose(\n             &format!(\n                 \"consider {}borrowing {value_name}\",\n-                if borrow_level == hir::Mutability::Mut { \"mutably \" } else { \"\" }\n+                if borrow_level.is_mut() { \"mutably \" } else { \"\" }\n             ),\n             sugg,\n             Applicability::MaybeIncorrect,"}, {"sha": "a6bde88408497ed9d12a7cd28a82966d7fc52439", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -257,9 +257,9 @@ pub(crate) fn data_id_for_alloc_id(\n     mutability: rustc_hir::Mutability,\n ) -> DataId {\n     cx.todo.push(TodoItem::Alloc(alloc_id));\n-    *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n-        module.declare_anonymous_data(mutability == rustc_hir::Mutability::Mut, false).unwrap()\n-    })\n+    *cx.anon_allocs\n+        .entry(alloc_id)\n+        .or_insert_with(|| module.declare_anonymous_data(mutability.is_mut(), false).unwrap())\n }\n \n fn data_id_for_static(\n@@ -343,12 +343,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     }\n                 };\n                 let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n-                    module\n-                        .declare_anonymous_data(\n-                            alloc.inner().mutability == rustc_hir::Mutability::Mut,\n-                            false,\n-                        )\n-                        .unwrap()\n+                    module.declare_anonymous_data(alloc.inner().mutability.is_mut(), false).unwrap()\n                 });\n                 (data_id, alloc, None)\n             }"}, {"sha": "2f5dd519b2600af5113b40afb83fb0c6ac04d376", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -1500,7 +1500,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let (_, element_ty1) = arg_tys[1].simd_size_and_type(bx.tcx());\n         let (_, element_ty2) = arg_tys[2].simd_size_and_type(bx.tcx());\n         let (pointer_count, underlying_ty) = match element_ty1.kind() {\n-            ty::RawPtr(p) if p.ty == in_elem && p.mutbl == hir::Mutability::Mut => {\n+            ty::RawPtr(p) if p.ty == in_elem && p.mutbl.is_mut() => {\n                 (ptr_count(element_ty1), non_ptr(element_ty1))\n             }\n             _ => {"}, {"sha": "cc5114dba5efefbdb1283de86487177a701094e6", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -292,7 +292,7 @@ fn emit_newtype_suggestion_for_raw_ptr(\n     diag: &mut Diagnostic,\n ) {\n     if !self_ty.needs_subst() {\n-        let mut_key = if ptr_ty.mutbl == rustc_middle::mir::Mutability::Mut { \"mut \" } else { \"\" };\n+        let mut_key = ptr_ty.mutbl.prefix_str();\n         let msg_sugg = \"consider introducing a new wrapper type\".to_owned();\n         let sugg = vec![\n             ("}, {"sha": "99a7f52efdb742716f7ced2626359cfeafcb3a5c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -398,7 +398,7 @@ impl<'a> State<'a> {\n             }\n             hir::ForeignItemKind::Static(t, m) => {\n                 self.head(\"static\");\n-                if m == hir::Mutability::Mut {\n+                if m.is_mut() {\n                     self.word_space(\"mut\");\n                 }\n                 self.print_ident(item.ident);\n@@ -519,7 +519,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::Static(ty, m, expr) => {\n                 self.head(\"static\");\n-                if m == hir::Mutability::Mut {\n+                if m.is_mut() {\n                     self.word_space(\"mut\");\n                 }\n                 self.print_ident(item.ident);"}, {"sha": "dd4b0b294c9939b1b8289daf44edb9dd4a88ff42", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -197,7 +197,7 @@ fn check_panic_info_fn(\n     let arg_is_panic_info = match *inputs[0].kind() {\n         ty::Ref(region, ty, mutbl) => match *ty.kind() {\n             ty::Adt(ref adt, _) => {\n-                adt.did() == panic_info_did && mutbl == hir::Mutability::Not && !region.is_static()\n+                adt.did() == panic_info_did && mutbl.is_not() && !region.is_static()\n             }\n             _ => false,\n         },"}, {"sha": "f1213983e61652f94bbad45bc895d9b3c2d5ba1f", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -452,7 +452,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             return Err(err);\n         };\n \n-        if ty == a && mt_a.mutbl == hir::Mutability::Not && autoderef.step_count() == 1 {\n+        if ty == a && mt_a.mutbl.is_not() && autoderef.step_count() == 1 {\n             // As a special case, if we would produce `&'a *x`, that's\n             // a total no-op. We end up with the type `&'a T` just as\n             // we started with.  In that case, just skip it"}, {"sha": "f60ceb94733754c24d6e12cd6fb55736f77860d3", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -856,7 +856,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ..\n                         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n                         {\n-                            if mutability == hir::Mutability::Mut {\n+                            if mutability.is_mut() {\n                                 // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n                                 return None;\n                             }"}, {"sha": "01e360f860353725a3260251a423230d87737c28", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -702,7 +702,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n             let mut_var_suggestion = 'block: {\n-                if !matches!(mutbl, ast::Mutability::Mut) {\n+                if mutbl.is_not() {\n                     break 'block None;\n                 }\n "}, {"sha": "74048ff7da3bdd0c5edf1075a75f693728ad066c", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -169,7 +169,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let mut prefix = \"&\".to_owned();\n                 prefix.push_str(&lifetime.name.ident().to_string());\n                 prefix.push(' ');\n-                if let hir::Mutability::Mut = mt.mutbl {\n+                if mt.mutbl.is_mut() {\n                     prefix.push_str(\"mut \");\n                 };\n \n@@ -332,7 +332,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n         match self.kind {\n             hir::ItemKind::Static(ref ty, m, ref body) => {\n                 let mut text = \"static \".to_owned();\n-                if m == hir::Mutability::Mut {\n+                if m.is_mut() {\n                     text.push_str(\"mut \");\n                 }\n                 let name = self.ident.to_string();"}, {"sha": "2c1f3eb9421071c6dbf0fcbd9eef292a13d3fa59", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -621,7 +621,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 });\n \n                 match inner_ty.kind() {\n-                    ty::Str if *mutbl == hir::Mutability::Not => {\n+                    ty::Str if mutbl.is_not() => {\n                         match ct.kind() {\n                             ty::ConstKind::Value(valtree) => {\n                                 let slice ="}, {"sha": "72a495e66a32937d7b13ce7a4cbbd63a71035ffc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40965300eec9aad4ea2f2fde9e6b59262cd5d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=da40965300eec9aad4ea2f2fde9e6b59262cd5d6", "patch": "@@ -1059,7 +1059,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 {\n                     (\n                         mk_result(old_pred.map_bound(|trait_pred| (trait_pred, *ty))),\n-                        matches!(mutability, hir::Mutability::Mut),\n+                        mutability.is_mut(),\n                     )\n                 } else {\n                     (false, false)\n@@ -1348,7 +1348,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         .sess\n                         .source_map()\n                         .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n-                    if points_at_arg && mutability == hir::Mutability::Not && refs_number > 0 {\n+                    if points_at_arg && mutability.is_not() && refs_number > 0 {\n                         err.span_suggestion_verbose(\n                             sp,\n                             \"consider changing this borrow's mutability\","}]}