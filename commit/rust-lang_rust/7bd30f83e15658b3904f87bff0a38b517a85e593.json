{"sha": "7bd30f83e15658b3904f87bff0a38b517a85e593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDMwZjgzZTE1NjU4YjM5MDRmODdiZmYwYTM4YjUxN2E4NWU1OTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-20T20:54:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-20T20:54:50Z"}, "message": "Put out burning tree (sizeof / alignof bug).", "tree": {"sha": "feba90fcffebc75dd064ca7281573165adad405f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feba90fcffebc75dd064ca7281573165adad405f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd30f83e15658b3904f87bff0a38b517a85e593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd30f83e15658b3904f87bff0a38b517a85e593", "html_url": "https://github.com/rust-lang/rust/commit/7bd30f83e15658b3904f87bff0a38b517a85e593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd30f83e15658b3904f87bff0a38b517a85e593/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490da3564be081eb40a711e83ae05fe07d5c6d2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/490da3564be081eb40a711e83ae05fe07d5c6d2c", "html_url": "https://github.com/rust-lang/rust/commit/490da3564be081eb40a711e83ae05fe07d5c6d2c"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "0de5b56b321e3cf074b1f4911fa9b28edc3ca41b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7bd30f83e15658b3904f87bff0a38b517a85e593/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd30f83e15658b3904f87bff0a38b517a85e593/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7bd30f83e15658b3904f87bff0a38b517a85e593", "patch": "@@ -549,13 +549,21 @@ fn find_scope_cx(@block_ctxt cx) -> @block_ctxt {\n     }\n }\n \n+fn size_of(TypeRef t) -> ValueRef {\n+    ret llvm.LLVMConstIntCast(lib.llvm.llvm.LLVMSizeOf(t), T_int(), False);\n+}\n+\n+fn align_of(TypeRef t) -> ValueRef {\n+    ret llvm.LLVMConstIntCast(lib.llvm.llvm.LLVMAlignOf(t), T_int(), False);\n+}\n+\n fn trans_malloc(@block_ctxt cx, @typeck.ty t) -> result {\n     auto scope_cx = find_scope_cx(cx);\n     auto ptr_ty = type_of(cx.fcx.ccx, t);\n     auto body_ty = lib.llvm.llvm.LLVMGetElementType(ptr_ty);\n     // FIXME: need a table to collect tydesc globals.\n     auto tydesc = C_int(0);\n-    auto sz = cx.build.IntCast(lib.llvm.llvm.LLVMSizeOf(body_ty), T_int());\n+    auto sz = size_of(body_ty);\n     auto sub = trans_upcall(cx, \"upcall_malloc\", vec(sz, tydesc));\n     sub.val = sub.bcx.build.IntToPtr(sub.val, ptr_ty);\n     scope_cx.cleanups += clean(bind drop_ty(_, sub.val, t));\n@@ -590,8 +598,8 @@ fn make_tydesc(@crate_ctxt cx, @typeck.ty ty) {\n     auto pvoid = T_ptr(T_i8());\n     auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(), pvoid), T_void()));\n     auto tydesc = C_struct(vec(C_null(pvoid),\n-                               llvm.LLVMSizeOf(llty),\n-                               llvm.LLVMAlignOf(llty),\n+                               size_of(llty),\n+                               align_of(llty),\n                                take_glue,             // copy_glue_off\n                                drop_glue,             // drop_glue_off\n                                C_null(glue_fn_ty),    // free_glue_off\n@@ -924,8 +932,7 @@ fn iter_sequence(@block_ctxt cx,\n                                           C_int(abi.vec_elt_fill)));\n \n         auto llunit_ty = type_of(cx.fcx.ccx, elt_ty);\n-        auto unit_sz = llvm.LLVMConstIntCast(llvm.LLVMSizeOf(llunit_ty),\n-                                             T_int(), False);\n+        auto unit_sz = size_of(llunit_ty);\n \n         auto len = cx.build.Load(lenptr);\n         if (trailing_null) {\n@@ -1599,8 +1606,8 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n     fail;\n }\n \n-fn trans_field(@block_ctxt cx, &ast.span sp, @ast.expr base,\n-               &ast.ident field, &ast.ann ann) -> tup(result, bool) {\n+impure fn trans_field(@block_ctxt cx, &ast.span sp, @ast.expr base,\n+                      &ast.ident field, &ast.ann ann) -> tup(result, bool) {\n     auto lv = trans_lval(cx, base);\n     auto r = lv._0;\n     auto ty = typeck.expr_ty(base);\n@@ -1621,16 +1628,15 @@ fn trans_field(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     fail;\n }\n \n-fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n-               @ast.expr idx, &ast.ann ann) -> tup(result, bool) {\n+impure fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n+                      @ast.expr idx, &ast.ann ann) -> tup(result, bool) {\n \n     auto lv = trans_expr(cx, base);\n     auto ix = trans_expr(lv.bcx, idx);\n     auto v = lv.val;\n \n     auto llunit_ty = node_type(cx.fcx.ccx, ann);\n-    auto unit_sz = ix.bcx.build.IntCast(lib.llvm.llvm.LLVMSizeOf(llunit_ty),\n-                                      T_int());\n+    auto unit_sz = size_of(llunit_ty);\n     auto scaled_ix = ix.bcx.build.Mul(ix.val, unit_sz);\n \n     auto lim = ix.bcx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_fill)));\n@@ -1660,7 +1666,7 @@ fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n // represented as an alloca or heap, hence needs a 'load' to be used as an\n // immediate).\n \n-fn trans_lval(@block_ctxt cx, @ast.expr e) -> tup(result, bool) {\n+impure fn trans_lval(@block_ctxt cx, @ast.expr e) -> tup(result, bool) {\n     alt (e.node) {\n         case (ast.expr_name(?n, ?dopt, _)) {\n             ret trans_name(cx, n, dopt);\n@@ -1828,8 +1834,7 @@ impure fn trans_vec(@block_ctxt cx, vec[@ast.expr] args,\n     }\n \n     auto llunit_ty = type_of(cx.fcx.ccx, unit_ty);\n-    auto unit_sz = llvm.LLVMConstIntCast(llvm.LLVMSizeOf(llunit_ty),\n-                                         T_int(), False);\n+    auto unit_sz = size_of(llunit_ty);\n     auto data_sz = llvm.LLVMConstMul(C_int(_vec.len[@ast.expr](args) as int),\n                                      unit_sz);\n "}]}