{"sha": "6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjN2VjZDAwN2Y5YzhmZGY3ZjVjYmJjMDE4MzdjYzA0YzgxYTc4MWM=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-26T21:27:42Z"}, "committer": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-29T10:02:12Z"}, "message": "Pre-canoncalize ExternLocation::ExactPaths", "tree": {"sha": "9da1b5ed7a022386d2b38bed8164d7cf112eb80b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da1b5ed7a022386d2b38bed8164d7cf112eb80b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "html_url": "https://github.com/rust-lang/rust/commit/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bc46227ab57a844fc7a9ed3a6c9efb35c725a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bc46227ab57a844fc7a9ed3a6c9efb35c725a9", "html_url": "https://github.com/rust-lang/rust/commit/c6bc46227ab57a844fc7a9ed3a6c9efb35c725a9"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "31e293518567a3f39b46ee407ac521fcad6680ea", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "patch": "@@ -11,7 +11,7 @@ use rustc_session::config::{\n };\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n-use rustc_session::utils::NativeLibKind;\n+use rustc_session::utils::{CanonicalizedPath, NativeLibKind};\n use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n@@ -20,7 +20,7 @@ use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy}\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n type CfgSpecs = FxHashSet<(String, Option<String>)>;\n \n@@ -50,7 +50,8 @@ where\n     S: Into<String>,\n     I: IntoIterator<Item = S>,\n {\n-    let locations: BTreeSet<_> = locations.into_iter().map(|s| s.into()).collect();\n+    let locations: BTreeSet<CanonicalizedPath> =\n+        locations.into_iter().map(|s| CanonicalizedPath::new(Path::new(&s.into()))).collect();\n \n     ExternEntry {\n         location: ExternLocation::ExactPaths(locations),"}, {"sha": "e3fbd1a2b29eae538f0a1aacf91b9dfdf72930de", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "patch": "@@ -28,7 +28,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use proc_macro::bridge::client::ProcMacro;\n use std::path::Path;\n-use std::{cmp, env, fs};\n+use std::{cmp, env};\n use tracing::{debug, info};\n \n #[derive(Clone)]\n@@ -252,10 +252,10 @@ impl<'a> CrateLoader<'a> {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n                 if let Some(mut files) = entry.files() {\n                     if files.any(|l| {\n-                        let l = fs::canonicalize(l).unwrap_or(l.clone().into());\n-                        source.dylib.as_ref().map(|(p, _)| p) == Some(&l)\n-                            || source.rlib.as_ref().map(|(p, _)| p) == Some(&l)\n-                            || source.rmeta.as_ref().map(|(p, _)| p) == Some(&l)\n+                        let l = l.canonicalized();\n+                        source.dylib.as_ref().map(|(p, _)| p) == Some(l)\n+                            || source.rlib.as_ref().map(|(p, _)| p) == Some(l)\n+                            || source.rmeta.as_ref().map(|(p, _)| p) == Some(l)\n                     }) {\n                         ret = Some(cnum);\n                     }"}, {"sha": "b66c6cffb1b2601f64c19e3ae64b7083fb67e7b3", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "patch": "@@ -224,6 +224,7 @@ use rustc_middle::middle::cstore::{CrateSource, MetadataLoader};\n use rustc_session::config::{self, CrateType};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc_session::search_paths::PathKind;\n+use rustc_session::utils::CanonicalizedPath;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -244,7 +245,7 @@ crate struct CrateLocator<'a> {\n \n     // Immutable per-search configuration.\n     crate_name: Symbol,\n-    exact_paths: Vec<PathBuf>,\n+    exact_paths: Vec<CanonicalizedPath>,\n     pub hash: Option<Svh>,\n     pub host_hash: Option<Svh>,\n     extra_filename: Option<&'a str>,\n@@ -315,7 +316,7 @@ impl<'a> CrateLocator<'a> {\n                     .into_iter()\n                     .filter_map(|entry| entry.files())\n                     .flatten()\n-                    .map(PathBuf::from)\n+                    .cloned()\n                     .collect()\n             } else {\n                 // SVH being specified means this is a transitive dependency,\n@@ -664,13 +665,19 @@ impl<'a> CrateLocator<'a> {\n         let mut rmetas = FxHashMap::default();\n         let mut dylibs = FxHashMap::default();\n         for loc in &self.exact_paths {\n-            if !loc.exists() {\n-                return Err(CrateError::ExternLocationNotExist(self.crate_name, loc.clone()));\n+            if !loc.canonicalized().exists() {\n+                return Err(CrateError::ExternLocationNotExist(\n+                    self.crate_name,\n+                    loc.original().clone(),\n+                ));\n             }\n-            let file = match loc.file_name().and_then(|s| s.to_str()) {\n+            let file = match loc.original().file_name().and_then(|s| s.to_str()) {\n                 Some(file) => file,\n                 None => {\n-                    return Err(CrateError::ExternLocationNotFile(self.crate_name, loc.clone()));\n+                    return Err(CrateError::ExternLocationNotFile(\n+                        self.crate_name,\n+                        loc.original().clone(),\n+                    ));\n                 }\n             };\n \n@@ -685,7 +692,8 @@ impl<'a> CrateLocator<'a> {\n                 // e.g. symbolic links. If we canonicalize too early, we resolve\n                 // the symlink, the file type is lost and we might treat rlibs and\n                 // rmetas as dylibs.\n-                let loc_canon = fs::canonicalize(&loc).unwrap_or_else(|_| loc.clone());\n+                let loc_canon = loc.canonicalized().clone();\n+                let loc = loc.original();\n                 if loc.file_name().unwrap().to_str().unwrap().ends_with(\".rlib\") {\n                     rlibs.insert(loc_canon, PathKind::ExternFlag);\n                 } else if loc.file_name().unwrap().to_str().unwrap().ends_with(\".rmeta\") {\n@@ -695,7 +703,7 @@ impl<'a> CrateLocator<'a> {\n                 }\n             } else {\n                 self.rejected_via_filename\n-                    .push(CrateMismatch { path: loc.clone(), got: String::new() });\n+                    .push(CrateMismatch { path: loc.original().clone(), got: String::new() });\n             }\n         }\n "}, {"sha": "9d73c3b4424cbdbd8405f204743d968041043c01", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "patch": "@@ -5,7 +5,7 @@ pub use crate::options::*;\n \n use crate::lint;\n use crate::search_paths::SearchPath;\n-use crate::utils::NativeLibKind;\n+use crate::utils::{CanonicalizedPath, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -436,7 +436,7 @@ pub enum ExternLocation {\n     /// which one to use.\n     ///\n     /// Added via `--extern prelude_name=some_file.rlib`\n-    ExactPaths(BTreeSet<String>),\n+    ExactPaths(BTreeSet<CanonicalizedPath>),\n }\n \n impl Externs {\n@@ -458,7 +458,7 @@ impl ExternEntry {\n         ExternEntry { location, is_private_dep: false, add_prelude: false }\n     }\n \n-    pub fn files(&self) -> Option<impl Iterator<Item = &String>> {\n+    pub fn files(&self) -> Option<impl Iterator<Item = &CanonicalizedPath>> {\n         match &self.location {\n             ExternLocation::ExactPaths(set) => Some(set.iter()),\n             _ => None,\n@@ -1639,13 +1639,15 @@ pub fn parse_externs(\n     for arg in matches.opt_strs(\"extern\") {\n         let (name, path) = match arg.split_once('=') {\n             None => (arg, None),\n-            Some((name, path)) => (name.to_string(), Some(path.to_string())),\n+            Some((name, path)) => (name.to_string(), Some(Path::new(path))),\n         };\n         let (options, name) = match name.split_once(':') {\n             None => (None, name),\n             Some((opts, name)) => (Some(opts), name.to_string()),\n         };\n \n+        let path = path.map(|p| CanonicalizedPath::new(p));\n+\n         let entry = externs.entry(name.to_owned());\n \n         use std::collections::btree_map::Entry;"}, {"sha": "f3d333091246486df2eabce509a98c4deaeac26d", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=6c7ecd007f9c8fdf7f5cbbc01837cc04c81a781c", "patch": "@@ -1,5 +1,6 @@\n use crate::session::Session;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n+use std::path::{Path, PathBuf};\n \n impl Session {\n     pub fn timer<'a>(&'a self, what: &'static str) -> VerboseTimingGuard<'a> {\n@@ -30,3 +31,25 @@ pub enum NativeLibKind {\n }\n \n rustc_data_structures::impl_stable_hash_via_hash!(NativeLibKind);\n+\n+/// A path that has been canonicalized along with its original, non-canonicalized form\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+pub struct CanonicalizedPath {\n+    // Optional since canonicalization can sometimes fail\n+    canonicalized: Option<PathBuf>,\n+    original: PathBuf,\n+}\n+\n+impl CanonicalizedPath {\n+    pub fn new(path: &Path) -> Self {\n+        Self { original: path.to_owned(), canonicalized: std::fs::canonicalize(path).ok() }\n+    }\n+\n+    pub fn canonicalized(&self) -> &PathBuf {\n+        self.canonicalized.as_ref().unwrap_or(self.original())\n+    }\n+\n+    pub fn original(&self) -> &PathBuf {\n+        &self.original\n+    }\n+}"}]}