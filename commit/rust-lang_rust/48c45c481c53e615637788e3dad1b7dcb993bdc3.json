{"sha": "48c45c481c53e615637788e3dad1b7dcb993bdc3", "node_id": "C_kwDOAAsO6NoAKDQ4YzQ1YzQ4MWM1M2U2MTU2Mzc3ODhlM2RhZDFiN2RjYjk5M2JkYzM", "commit": {"author": {"name": "Afonso Bordado", "email": "afonso360@users.noreply.github.com", "date": "2022-08-23T10:42:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T10:42:35Z"}, "message": "Use native scalar `fma` instruction (#1267)\n\nCranelift 0.87 now supports lowering `fma` as a libcall on x86 [0].\r\nWith 0.88 enabling the native x86 instruction under the `has_fma` flag.\r\n\r\naarch64 and s390x already support this as a native instruction, so it's\r\nnice that we emit it for those.\r\n\r\nWe can't lower the SIMD version using the `fma` instruction since the\r\nlowering can fail if the x86 `has_fma` flag is not enabled. Cranelift\r\ndoesn't yet know how to fallback for these cases\r\n\r\n[0]: https://github.com/bytecodealliance/wasmtime/commit/709716bb8e6adaf7e65f3497168af23ce0cf09ef", "tree": {"sha": "e12e8611735ec36f9f84d3504dd9d0432ad31bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12e8611735ec36f9f84d3504dd9d0432ad31bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c45c481c53e615637788e3dad1b7dcb993bdc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBK8bCRBK7hj4Ov3rIwAAN8EIADo6sh5A2wQhwmPp8aq7YqjP\nMdveOL8dTXJW0aVD1ZoMNPPGHIMYCJMcrMh1rjni+PwrBQfmMU0Mr2Ko6OW71bNW\nzxKob99XAWILMa+6CRby99lrfPnZD5+G4N2Y+jW/Qq4Q8EvoIQFygpoNbfZJfl8e\nML5niRFzM10h9O4rAmXG4jz7RGzOtSHgy02dm+dfpLGkG5jFvm0XfLujipUUyJLW\nXjoTswta620tRVjvdIqWJtONqoyj4NzQI3yVLKikKXKL8TzLfUkav7hl48S5Lbaz\nNxy8h0UATrf+mPmKbi88b1q+/RbjKBph8OI+U9VySRk5isdOhnB4XWQJ6VsYql4=\n=31wJ\n-----END PGP SIGNATURE-----\n", "payload": "tree e12e8611735ec36f9f84d3504dd9d0432ad31bc7\nparent 156bda8bc708cca60e9de18743d833c8d97dd7ff\nauthor Afonso Bordado <afonso360@users.noreply.github.com> 1661251355 +0100\ncommitter GitHub <noreply@github.com> 1661251355 +0200\n\nUse native scalar `fma` instruction (#1267)\n\nCranelift 0.87 now supports lowering `fma` as a libcall on x86 [0].\r\nWith 0.88 enabling the native x86 instruction under the `has_fma` flag.\r\n\r\naarch64 and s390x already support this as a native instruction, so it's\r\nnice that we emit it for those.\r\n\r\nWe can't lower the SIMD version using the `fma` instruction since the\r\nlowering can fail if the x86 `has_fma` flag is not enabled. Cranelift\r\ndoesn't yet know how to fallback for these cases\r\n\r\n[0]: https://github.com/bytecodealliance/wasmtime/commit/709716bb8e6adaf7e65f3497168af23ce0cf09ef"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c45c481c53e615637788e3dad1b7dcb993bdc3", "html_url": "https://github.com/rust-lang/rust/commit/48c45c481c53e615637788e3dad1b7dcb993bdc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c45c481c53e615637788e3dad1b7dcb993bdc3/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156bda8bc708cca60e9de18743d833c8d97dd7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/156bda8bc708cca60e9de18743d833c8d97dd7ff", "html_url": "https://github.com/rust-lang/rust/commit/156bda8bc708cca60e9de18743d833c8d97dd7ff"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "ef3d5ccea8a2406d42d1cae971cd9a1658a94473", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48c45c481c53e615637788e3dad1b7dcb993bdc3/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c45c481c53e615637788e3dad1b7dcb993bdc3/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=48c45c481c53e615637788e3dad1b7dcb993bdc3", "patch": "@@ -303,6 +303,12 @@ fn codegen_float_intrinsic_call<'tcx>(\n \n     let layout = fx.layout_of(ty);\n     let res = match intrinsic {\n+        sym::fmaf32 | sym::fmaf64 => {\n+            let a = args[0].load_scalar(fx);\n+            let b = args[1].load_scalar(fx);\n+            let c = args[2].load_scalar(fx);\n+            CValue::by_val(fx.bcx.ins().fma(a, b, c), layout)\n+        }\n         sym::copysignf32 | sym::copysignf64 => {\n             let a = args[0].load_scalar(fx);\n             let b = args[1].load_scalar(fx);"}, {"sha": "a32b413d45f938d093f7f4efcae7e3a8fc2a240a", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48c45c481c53e615637788e3dad1b7dcb993bdc3/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c45c481c53e615637788e3dad1b7dcb993bdc3/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=48c45c481c53e615637788e3dad1b7dcb993bdc3", "patch": "@@ -397,21 +397,15 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             let layout = a.layout();\n             let (lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+            let res_lane_layout = fx.layout_of(lane_ty);\n \n             for lane in 0..lane_count {\n-                let a_lane = a.value_lane(fx, lane);\n-                let b_lane = b.value_lane(fx, lane);\n-                let c_lane = c.value_lane(fx, lane);\n+                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n+                let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n+                let c_lane = c.value_lane(fx, lane).load_scalar(fx);\n \n-                let res_lane = match lane_ty.kind() {\n-                    ty::Float(FloatTy::F32) => {\n-                        fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty)\n-                    }\n-                    ty::Float(FloatTy::F64) => {\n-                        fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty)\n-                    }\n-                    _ => unreachable!(),\n-                };\n+                let res_lane = fx.bcx.ins().fma(a_lane, b_lane, c_lane);\n+                let res_lane = CValue::by_val(res_lane, res_lane_layout);\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }"}]}