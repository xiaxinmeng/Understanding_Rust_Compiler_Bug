{"sha": "2746e12948ee4d152f8d8acfb5873f970effe501", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NDZlMTI5NDhlZTRkMTUyZjhkOGFjZmI1ODczZjk3MGVmZmU1MDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-01T02:52:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-01T02:52:45Z"}, "message": "check_binding_alt_eq_ty: improve precision wrt. `if let`.", "tree": {"sha": "f7d0a3a9207db524c414d7df8016803837a73bcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7d0a3a9207db524c414d7df8016803837a73bcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2746e12948ee4d152f8d8acfb5873f970effe501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2746e12948ee4d152f8d8acfb5873f970effe501", "html_url": "https://github.com/rust-lang/rust/commit/2746e12948ee4d152f8d8acfb5873f970effe501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2746e12948ee4d152f8d8acfb5873f970effe501/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c79346a3e7ddbb5fb417810f226ac5a9209007", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c79346a3e7ddbb5fb417810f226ac5a9209007", "html_url": "https://github.com/rust-lang/rust/commit/d3c79346a3e7ddbb5fb417810f226ac5a9209007"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "2a8be6a02445fc7fe61dfb5fdddb7f0d7851bf6c", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2746e12948ee4d152f8d8acfb5873f970effe501/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2746e12948ee4d152f8d8acfb5873f970effe501/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=2746e12948ee4d152f8d8acfb5873f970effe501", "patch": "@@ -559,8 +559,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let var_ty = self.resolve_vars_with_obligations(var_ty);\n             let msg = format!(\"first introduced with type `{}` here\", var_ty);\n             err.span_label(hir.span(var_id), msg);\n-            let in_arm = hir.parent_iter(var_id).any(|(_, n)| matches!(n, hir::Node::Arm(..)));\n-            let pre = if in_arm { \"in the same arm, \" } else { \"\" };\n+            let in_match = hir.parent_iter(var_id).any(|(_, n)| {\n+                matches!(\n+                    n,\n+                    hir::Node::Expr(hir::Expr {\n+                        kind: hir::ExprKind::Match(.., hir::MatchSource::Normal),\n+                        ..\n+                    })\n+                )\n+            });\n+            let pre = if in_match { \"in the same arm, \" } else { \"\" };\n             err.note(&format!(\"{}a binding must have the same type in all alternatives\", pre));\n             err.emit();\n         }"}, {"sha": "1dabb7c975430058b2ca0c5be09f9a2b743a82d7", "filename": "src/test/ui/or-patterns/or-patterns-binding-type-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2746e12948ee4d152f8d8acfb5873f970effe501/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2746e12948ee4d152f8d8acfb5873f970effe501/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-binding-type-mismatch.stderr?ref=2746e12948ee4d152f8d8acfb5873f970effe501", "patch": "@@ -101,7 +101,7 @@ LL |     if let Blah::A(_, x, y) | Blah::B(x, y) = Blah::A(1, 1, 2) {\n    |                          |               expected `usize`, found `isize`\n    |                          first introduced with type `usize` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:38:47\n@@ -112,7 +112,7 @@ LL |     if let Some(Blah::A(_, x, y) | Blah::B(x, y)) = Some(Blah::A(1, 1, 2))\n    |                               |               expected `usize`, found `isize`\n    |                               first introduced with type `usize` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:42:22\n@@ -123,7 +123,7 @@ LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    |                |     expected `u16`, found `u8`\n    |                first introduced with type `u16` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:42:25\n@@ -134,7 +134,7 @@ LL |     if let (x, y) | (y, x) = (0u8, 1u16) {\n    |             |           expected `u8`, found `u16`\n    |             first introduced with type `u8` here\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:44\n@@ -147,7 +147,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:53\n@@ -160,7 +160,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:62\n@@ -173,7 +173,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:47:65\n@@ -184,7 +184,7 @@ LL |     if let Some((x, Some((y, z)))) | Some((y, Some((x, z) | (z, x))))\n LL |     = Some((0u8, Some((1u16, 2u32))))\n    |       ------------------------------- this expression has type `std::option::Option<(u8, std::option::Option<(u16, u32)>)>`\n    |\n-   = note: in the same arm, a binding must have the same type in all alternatives\n+   = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n   --> $DIR/or-patterns-binding-type-mismatch.rs:55:39"}]}