{"sha": "dab3a80f235ed86d64d002e58b35adc3664e21a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjNhODBmMjM1ZWQ4NmQ2NGQwMDJlNThiMzVhZGMzNjY0ZTIxYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-04T23:16:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-04T23:16:08Z"}, "message": "Auto merge of #81761 - m-ou-se:rollup-xp7v07n, r=m-ou-se\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #74304 (Stabilize the Wake trait)\n - #79805 (Rename Iterator::fold_first to reduce and stabilize it)\n - #81556 (introduce future-compatibility warning for forbidden lint groups)\n - #81645 (Add lint for `panic!(123)` which is not accepted in Rust 2021.)\n - #81710 (OsStr eq_ignore_ascii_case takes arg by value)\n - #81711 (add #[inline] to all the public IpAddr functions)\n - #81725 (Move test to be with the others)\n - #81727 (Revert stabilizing integer::BITS.)\n - #81745 (Stabilize poison API of Once, rename poisoned())\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "61ffa795a2e1c4bdfd66d9439de3139b653b40d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61ffa795a2e1c4bdfd66d9439de3139b653b40d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab3a80f235ed86d64d002e58b35adc3664e21a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab3a80f235ed86d64d002e58b35adc3664e21a4", "html_url": "https://github.com/rust-lang/rust/commit/dab3a80f235ed86d64d002e58b35adc3664e21a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab3a80f235ed86d64d002e58b35adc3664e21a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4656d46d84a488ae3df34b08f362d7071036a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4656d46d84a488ae3df34b08f362d7071036a0", "html_url": "https://github.com/rust-lang/rust/commit/4f4656d46d84a488ae3df34b08f362d7071036a0"}, {"sha": "6f014cd4db1182adf80f540a269a4f0917c063d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f014cd4db1182adf80f540a269a4f0917c063d3", "html_url": "https://github.com/rust-lang/rust/commit/6f014cd4db1182adf80f540a269a4f0917c063d3"}], "stats": {"total": 1477, "additions": 1122, "deletions": 355}, "files": [{"sha": "ddf52caed088a452414802dc9470169e2e33a217", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -14,7 +14,6 @@\n #![feature(const_fn_transmute)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n-#![feature(iterator_fold_self)]\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(or_patterns)]"}, {"sha": "024d9687f311940710bac84eb21f04f908aa8383", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -28,7 +28,7 @@ pub trait ExpectOne<A: Array> {\n \n impl<A: Array> ExpectOne<A> for SmallVec<A> {\n     fn expect_one(self, err: &'static str) -> A::Item {\n-        assert!(self.len() == 1, err);\n+        assert!(self.len() == 1, \"{}\", err);\n         self.into_iter().next().unwrap()\n     }\n }"}, {"sha": "5880bbd3de44e83018d2d69b3476fd47aef11df0", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -13,6 +13,7 @@\n #![feature(unboxed_closures)]\n #![feature(generator_trait)]\n #![feature(fn_traits)]\n+#![feature(int_bits_const)]\n #![feature(min_specialization)]\n #![feature(auto_traits)]\n #![feature(nll)]"}, {"sha": "aa88233209940c13e756ae1e5764a55d18d94902", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -901,7 +901,7 @@ impl HandlerInner {\n \n     fn span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Bug, msg), sp);\n-        panic!(ExplicitBug);\n+        panic::panic_any(ExplicitBug);\n     }\n \n     fn emit_diag_at_span(&mut self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n@@ -955,7 +955,7 @@ impl HandlerInner {\n \n     fn bug(&mut self, msg: &str) -> ! {\n         self.emit_diagnostic(&Diagnostic::new(Bug, msg));\n-        panic!(ExplicitBug);\n+        panic::panic_any(ExplicitBug);\n     }\n \n     fn delay_as_bug(&mut self, diagnostic: Diagnostic) {"}, {"sha": "6487b23a6a60af7312e7894e6022545c2cecd51c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -358,7 +358,7 @@ impl GenericArgs<'_> {\n             .iter()\n             .filter(|arg| !arg.is_synthetic())\n             .map(|arg| arg.span())\n-            .fold_first(|span1, span2| span1.to(span2))\n+            .reduce(|span1, span2| span1.to(span2))\n     }\n \n     /// Returns span encompassing arguments and their surrounding `<>` or `()`"}, {"sha": "c69a9b063aeca618cd943422ae4e94ff8ecd409d", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -6,7 +6,6 @@\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n-#![feature(iterator_fold_self)]\n #![feature(once_cell)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "58a9064b9195bf1fdfc937c3cb332d392c8a1931", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -39,6 +39,7 @@ use rustc_session::SessionLintStore;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use rustc_target::abi::LayoutOf;\n+use tracing::debug;\n \n use std::cell::Cell;\n use std::slice;\n@@ -336,6 +337,20 @@ impl LintStore {\n         }\n     }\n \n+    /// True if this symbol represents a lint group name.\n+    pub fn is_lint_group(&self, lint_name: Symbol) -> bool {\n+        debug!(\n+            \"is_lint_group(lint_name={:?}, lint_groups={:?})\",\n+            lint_name,\n+            self.lint_groups.keys().collect::<Vec<_>>()\n+        );\n+        let lint_name_str = &*lint_name.as_str();\n+        self.lint_groups.contains_key(&lint_name_str) || {\n+            let warnings_name_str = crate::WARNINGS.name_lower();\n+            lint_name_str == &*warnings_name_str\n+        }\n+    }\n+\n     /// Checks the name of a lint for its existence, and whether it was\n     /// renamed or removed. Generates a DiagnosticBuilder containing a\n     /// warning for renamed and removed lints. This is over both lint"}, {"sha": "1fc2bd091675779dfe4861665119f3c9b18f3ae7", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 73, "deletions": 28, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::attr;\n use rustc_ast::unwrap_or;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n@@ -17,11 +17,15 @@ use rustc_middle::lint::{\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::lint::{builtin, Level, Lint, LintId};\n+use rustc_session::lint::{\n+    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    Level, Lint, LintId,\n+};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n+use tracing::debug;\n \n use std::cmp;\n \n@@ -51,6 +55,7 @@ pub struct LintLevelsBuilder<'s> {\n     id_to_set: FxHashMap<HirId, u32>,\n     cur: u32,\n     warn_about_weird_lints: bool,\n+    store: &'s LintStore,\n }\n \n pub struct BuilderPush {\n@@ -59,13 +64,14 @@ pub struct BuilderPush {\n }\n \n impl<'s> LintLevelsBuilder<'s> {\n-    pub fn new(sess: &'s Session, warn_about_weird_lints: bool, store: &LintStore) -> Self {\n+    pub fn new(sess: &'s Session, warn_about_weird_lints: bool, store: &'s LintStore) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n             sets: LintLevelSets::new(),\n             cur: 0,\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n+            store,\n         };\n         builder.process_command_line(sess, store);\n         assert_eq!(builder.sets.list.len(), 1);\n@@ -120,36 +126,75 @@ impl<'s> LintLevelsBuilder<'s> {\n             if let (Level::Forbid, old_src) =\n                 self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess)\n             {\n-                let mut diag_builder = struct_span_err!(\n-                    self.sess,\n-                    src.span(),\n-                    E0453,\n-                    \"{}({}) incompatible with previous forbid\",\n-                    level.as_str(),\n-                    src.name(),\n+                // Backwards compatibility check:\n+                //\n+                // We used to not consider `forbid(lint_group)`\n+                // as preventing `allow(lint)` for some lint `lint` in\n+                // `lint_group`. For now, issue a future-compatibility\n+                // warning for this case.\n+                let id_name = id.lint.name_lower();\n+                let fcw_warning = match old_src {\n+                    LintLevelSource::Default => false,\n+                    LintLevelSource::Node(symbol, _, _) => self.store.is_lint_group(symbol),\n+                    LintLevelSource::CommandLine(symbol, _) => self.store.is_lint_group(symbol),\n+                };\n+                debug!(\n+                    \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n+                    fcw_warning, specs, old_src, id_name\n                 );\n-                diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n-                match old_src {\n-                    LintLevelSource::Default => {\n-                        diag_builder.note(&format!(\n-                            \"`forbid` lint level is the default for {}\",\n-                            id.to_string()\n-                        ));\n-                    }\n-                    LintLevelSource::Node(_, forbid_source_span, reason) => {\n-                        diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n-                        if let Some(rationale) = reason {\n-                            diag_builder.note(&rationale.as_str());\n+\n+                let decorate_diag_builder = |mut diag_builder: DiagnosticBuilder<'_>| {\n+                    diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n+                    match old_src {\n+                        LintLevelSource::Default => {\n+                            diag_builder.note(&format!(\n+                                \"`forbid` lint level is the default for {}\",\n+                                id.to_string()\n+                            ));\n+                        }\n+                        LintLevelSource::Node(_, forbid_source_span, reason) => {\n+                            diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n+                            if let Some(rationale) = reason {\n+                                diag_builder.note(&rationale.as_str());\n+                            }\n+                        }\n+                        LintLevelSource::CommandLine(_, _) => {\n+                            diag_builder.note(\"`forbid` lint level was set on command line\");\n                         }\n                     }\n-                    LintLevelSource::CommandLine(_, _) => {\n-                        diag_builder.note(\"`forbid` lint level was set on command line\");\n-                    }\n+                    diag_builder.emit();\n+                };\n+                if !fcw_warning {\n+                    let diag_builder = struct_span_err!(\n+                        self.sess,\n+                        src.span(),\n+                        E0453,\n+                        \"{}({}) incompatible with previous forbid\",\n+                        level.as_str(),\n+                        src.name(),\n+                    );\n+                    decorate_diag_builder(diag_builder);\n+                } else {\n+                    self.struct_lint(\n+                        FORBIDDEN_LINT_GROUPS,\n+                        Some(src.span().into()),\n+                        |diag_builder| {\n+                            let diag_builder = diag_builder.build(&format!(\n+                                \"{}({}) incompatible with previous forbid\",\n+                                level.as_str(),\n+                                src.name(),\n+                            ));\n+                            decorate_diag_builder(diag_builder);\n+                        },\n+                    );\n                 }\n-                diag_builder.emit();\n \n-                // Retain the forbid lint level\n-                return;\n+                // Retain the forbid lint level, unless we are\n+                // issuing a FCW. In the FCW case, we want to\n+                // respect the new setting.\n+                if !fcw_warning {\n+                    return;\n+                }\n             }\n         }\n         specs.insert(id, (level, src));"}, {"sha": "638b73c27a8d7c467f99e6dddce83cc37f6212b4", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -55,8 +55,8 @@ mod late;\n mod levels;\n mod methods;\n mod non_ascii_idents;\n+mod non_fmt_panic;\n mod nonstandard_style;\n-mod panic_fmt;\n mod passes;\n mod redundant_semicolon;\n mod traits;\n@@ -81,8 +81,8 @@ use builtin::*;\n use internal::*;\n use methods::*;\n use non_ascii_idents::*;\n+use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n-use panic_fmt::PanicFmt;\n use redundant_semicolon::*;\n use traits::*;\n use types::*;\n@@ -169,7 +169,7 @@ macro_rules! late_lint_passes {\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n                 DropTraitConstraints: DropTraitConstraints,\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n-                PanicFmt: PanicFmt,\n+                NonPanicFmt: NonPanicFmt,\n             ]\n         );\n     };"}, {"sha": "e98297b692c92d887ec3fec65114f7959d3dcd9a", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,197 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_ast as ast;\n+use rustc_errors::{pluralize, Applicability};\n+use rustc_hir as hir;\n+use rustc_middle::ty;\n+use rustc_parse_format::{ParseMode, Parser, Piece};\n+use rustc_span::{sym, symbol::kw, InnerSpan, Span, Symbol};\n+\n+declare_lint! {\n+    /// The `non_fmt_panic` lint detects `panic!(..)` invocations where the first\n+    /// argument is not a formatting string.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,no_run\n+    /// panic!(\"{}\");\n+    /// panic!(123);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In Rust 2018 and earlier, `panic!(x)` directly uses `x` as the message.\n+    /// That means that `panic!(\"{}\")` panics with the message `\"{}\"` instead\n+    /// of using it as a formatting string, and `panic!(123)` will panic with\n+    /// an `i32` as message.\n+    ///\n+    /// Rust 2021 always interprets the first argument as format string.\n+    NON_FMT_PANIC,\n+    Warn,\n+    \"detect single-argument panic!() invocations in which the argument is not a format string\",\n+    report_in_external_macro\n+}\n+\n+declare_lint_pass!(NonPanicFmt => [NON_FMT_PANIC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n+            if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n+                if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n+                    || Some(def_id) == cx.tcx.lang_items().panic_fn()\n+                    || Some(def_id) == cx.tcx.lang_items().panic_str()\n+                {\n+                    if let Some(id) = f.span.ctxt().outer_expn_data().macro_def_id {\n+                        if cx.tcx.is_diagnostic_item(sym::std_panic_2015_macro, id)\n+                            || cx.tcx.is_diagnostic_item(sym::core_panic_2015_macro, id)\n+                        {\n+                            check_panic(cx, f, arg);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n+    if let hir::ExprKind::Lit(lit) = &arg.kind {\n+        if let ast::LitKind::Str(sym, _) = lit.node {\n+            // The argument is a string literal.\n+            check_panic_str(cx, f, arg, &sym.as_str());\n+            return;\n+        }\n+    }\n+\n+    // The argument is *not* a string literal.\n+\n+    let (span, panic) = panic_call(cx, f);\n+\n+    cx.struct_span_lint(NON_FMT_PANIC, arg.span, |lint| {\n+        let mut l = lint.build(\"panic message is not a string literal\");\n+        l.note(\"this is no longer accepted in Rust 2021\");\n+        if span.contains(arg.span) {\n+            l.span_suggestion_verbose(\n+                arg.span.shrink_to_lo(),\n+                \"add a \\\"{}\\\" format string to Display the message\",\n+                \"\\\"{}\\\", \".into(),\n+                Applicability::MaybeIncorrect,\n+            );\n+            if panic == sym::std_panic_macro {\n+                l.span_suggestion_verbose(\n+                    span.until(arg.span),\n+                    \"or use std::panic::panic_any instead\",\n+                    \"std::panic::panic_any(\".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+        l.emit();\n+    });\n+}\n+\n+fn check_panic_str<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    f: &'tcx hir::Expr<'tcx>,\n+    arg: &'tcx hir::Expr<'tcx>,\n+    fmt: &str,\n+) {\n+    if !fmt.contains(&['{', '}'][..]) {\n+        // No brace, no problem.\n+        return;\n+    }\n+\n+    let fmt_span = arg.span.source_callsite();\n+\n+    let (snippet, style) = match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n+        Ok(snippet) => {\n+            // Count the number of `#`s between the `r` and `\"`.\n+            let style = snippet.strip_prefix('r').and_then(|s| s.find('\"'));\n+            (Some(snippet), style)\n+        }\n+        Err(_) => (None, None),\n+    };\n+\n+    let mut fmt_parser =\n+        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n+    let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n+\n+    let (span, _) = panic_call(cx, f);\n+\n+    if n_arguments > 0 && fmt_parser.errors.is_empty() {\n+        let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n+            [] => vec![fmt_span],\n+            v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n+        };\n+        cx.struct_span_lint(NON_FMT_PANIC, arg_spans, |lint| {\n+            let mut l = lint.build(match n_arguments {\n+                1 => \"panic message contains an unused formatting placeholder\",\n+                _ => \"panic message contains unused formatting placeholders\",\n+            });\n+            l.note(\"this message is not used as a format string when given without arguments, but will be in Rust 2021\");\n+            if span.contains(arg.span) {\n+                l.span_suggestion(\n+                    arg.span.shrink_to_hi(),\n+                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n+                    \", ...\".into(),\n+                    Applicability::HasPlaceholders,\n+                );\n+                l.span_suggestion(\n+                    arg.span.shrink_to_lo(),\n+                    \"or add a \\\"{}\\\" format string to use the message literally\",\n+                    \"\\\"{}\\\", \".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            l.emit();\n+        });\n+    } else {\n+        let brace_spans: Option<Vec<_>> =\n+            snippet.filter(|s| s.starts_with('\"') || s.starts_with(\"r#\")).map(|s| {\n+                s.char_indices()\n+                    .filter(|&(_, c)| c == '{' || c == '}')\n+                    .map(|(i, _)| fmt_span.from_inner(InnerSpan { start: i, end: i + 1 }))\n+                    .collect()\n+            });\n+        let msg = match &brace_spans {\n+            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n+            _ => \"panic message contains braces\",\n+        };\n+        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or(vec![span]), |lint| {\n+            let mut l = lint.build(msg);\n+            l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n+            if span.contains(arg.span) {\n+                l.span_suggestion(\n+                    arg.span.shrink_to_lo(),\n+                    \"add a \\\"{}\\\" format string to use the message literally\",\n+                    \"\\\"{}\\\", \".into(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            l.emit();\n+        });\n+    }\n+}\n+\n+fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol) {\n+    let mut expn = f.span.ctxt().outer_expn_data();\n+\n+    let mut panic_macro = kw::Empty;\n+\n+    // Unwrap more levels of macro expansion, as panic_2015!()\n+    // was likely expanded from panic!() and possibly from\n+    // [debug_]assert!().\n+    for &i in\n+        &[sym::std_panic_macro, sym::core_panic_macro, sym::assert_macro, sym::debug_assert_macro]\n+    {\n+        let parent = expn.call_site.ctxt().outer_expn_data();\n+        if parent.macro_def_id.map_or(false, |id| cx.tcx.is_diagnostic_item(i, id)) {\n+            expn = parent;\n+            panic_macro = i;\n+        }\n+    }\n+\n+    (expn.call_site, panic_macro)\n+}"}, {"sha": "4a6aca72acbbec957c2b4af13594c57ee60a22ed", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "removed", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/4f4656d46d84a488ae3df34b08f362d7071036a0/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4656d46d84a488ae3df34b08f362d7071036a0/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=4f4656d46d84a488ae3df34b08f362d7071036a0", "patch": "@@ -1,155 +0,0 @@\n-use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_ast as ast;\n-use rustc_errors::{pluralize, Applicability};\n-use rustc_hir as hir;\n-use rustc_middle::ty;\n-use rustc_parse_format::{ParseMode, Parser, Piece};\n-use rustc_span::{sym, InnerSpan};\n-\n-declare_lint! {\n-    /// The `panic_fmt` lint detects `panic!(\"..\")` with `{` or `}` in the string literal.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,no_run\n-    /// panic!(\"{}\");\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// In Rust 2018 and earlier, `panic!(\"{}\")` panics with the message `\"{}\"`,\n-    /// as a `panic!()` invocation with a single argument does not use `format_args!()`.\n-    /// Rust 2021 interprets this string as format string, which breaks this.\n-    PANIC_FMT,\n-    Warn,\n-    \"detect braces in single-argument panic!() invocations\",\n-    report_in_external_macro\n-}\n-\n-declare_lint_pass!(PanicFmt => [PANIC_FMT]);\n-\n-impl<'tcx> LateLintPass<'tcx> for PanicFmt {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n-            if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n-                if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n-                    || Some(def_id) == cx.tcx.lang_items().panic_fn()\n-                {\n-                    check_panic(cx, f, arg);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n-    if let hir::ExprKind::Lit(lit) = &arg.kind {\n-        if let ast::LitKind::Str(sym, _) = lit.node {\n-            let mut expn = f.span.ctxt().outer_expn_data();\n-            if let Some(id) = expn.macro_def_id {\n-                if cx.tcx.is_diagnostic_item(sym::std_panic_2015_macro, id)\n-                    || cx.tcx.is_diagnostic_item(sym::core_panic_2015_macro, id)\n-                {\n-                    let fmt = sym.as_str();\n-                    if !fmt.contains(&['{', '}'][..]) {\n-                        return;\n-                    }\n-\n-                    let fmt_span = arg.span.source_callsite();\n-\n-                    let (snippet, style) =\n-                        match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n-                            Ok(snippet) => {\n-                                // Count the number of `#`s between the `r` and `\"`.\n-                                let style = snippet.strip_prefix('r').and_then(|s| s.find('\"'));\n-                                (Some(snippet), style)\n-                            }\n-                            Err(_) => (None, None),\n-                        };\n-\n-                    let mut fmt_parser =\n-                        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n-                    let n_arguments =\n-                        (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n-\n-                    // Unwrap more levels of macro expansion, as panic_2015!()\n-                    // was likely expanded from panic!() and possibly from\n-                    // [debug_]assert!().\n-                    for &assert in &[\n-                        sym::std_panic_macro,\n-                        sym::core_panic_macro,\n-                        sym::assert_macro,\n-                        sym::debug_assert_macro,\n-                    ] {\n-                        let parent = expn.call_site.ctxt().outer_expn_data();\n-                        if parent\n-                            .macro_def_id\n-                            .map_or(false, |id| cx.tcx.is_diagnostic_item(assert, id))\n-                        {\n-                            expn = parent;\n-                        }\n-                    }\n-\n-                    if n_arguments > 0 && fmt_parser.errors.is_empty() {\n-                        let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n-                            [] => vec![fmt_span],\n-                            v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n-                        };\n-                        cx.struct_span_lint(PANIC_FMT, arg_spans, |lint| {\n-                            let mut l = lint.build(match n_arguments {\n-                                1 => \"panic message contains an unused formatting placeholder\",\n-                                _ => \"panic message contains unused formatting placeholders\",\n-                            });\n-                            l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust edition\");\n-                            if expn.call_site.contains(arg.span) {\n-                                l.span_suggestion(\n-                                    arg.span.shrink_to_hi(),\n-                                    &format!(\"add the missing argument{}\", pluralize!(n_arguments)),\n-                                    \", ...\".into(),\n-                                    Applicability::HasPlaceholders,\n-                                );\n-                                l.span_suggestion(\n-                                    arg.span.shrink_to_lo(),\n-                                    \"or add a \\\"{}\\\" format string to use the message literally\",\n-                                    \"\\\"{}\\\", \".into(),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            l.emit();\n-                        });\n-                    } else {\n-                        let brace_spans: Option<Vec<_>> = snippet\n-                            .filter(|s| s.starts_with('\"') || s.starts_with(\"r#\"))\n-                            .map(|s| {\n-                                s.char_indices()\n-                                    .filter(|&(_, c)| c == '{' || c == '}')\n-                                    .map(|(i, _)| {\n-                                        fmt_span.from_inner(InnerSpan { start: i, end: i + 1 })\n-                                    })\n-                                    .collect()\n-                            });\n-                        let msg = match &brace_spans {\n-                            Some(v) if v.len() == 1 => \"panic message contains a brace\",\n-                            _ => \"panic message contains braces\",\n-                        };\n-                        cx.struct_span_lint(PANIC_FMT, brace_spans.unwrap_or(vec![expn.call_site]), |lint| {\n-                            let mut l = lint.build(msg);\n-                            l.note(\"this message is not used as a format string, but will be in a future Rust edition\");\n-                            if expn.call_site.contains(arg.span) {\n-                                l.span_suggestion(\n-                                    arg.span.shrink_to_lo(),\n-                                    \"add a \\\"{}\\\" format string to use the message literally\",\n-                                    \"\\\"{}\\\", \".into(),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            l.emit();\n-                        });\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "da62ad3a6b1cdced003d53e394bb85c296174b02", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -5,10 +5,48 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n+// ignore-tidy-filelength\n+\n use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n+declare_lint! {\n+    /// The `forbidden_lint_groups` lint detects violations of\n+    /// `forbid` applied to a lint group. Due to a bug in the compiler,\n+    /// these used to be overlooked entirely. They now generate a warning.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![forbid(warnings)]\n+    /// #![deny(bad_style)]\n+    ///\n+    /// fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Recommended fix\n+    ///\n+    /// If your crate is using `#![forbid(warnings)]`,\n+    /// we recommend that you change to `#![deny(warnings)]`.\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Due to a compiler bug, applying `forbid` to lint groups\n+    /// previously had no effect. The bug is now fixed but instead of\n+    /// enforcing `forbid` we issue this future-compatibility warning\n+    /// to avoid breaking existing crates.\n+    pub FORBIDDEN_LINT_GROUPS,\n+    Warn,\n+    \"applying forbid to lint-groups\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #81670 <https://github.com/rust-lang/rust/issues/81670>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint! {\n     /// The `ill_formed_attribute_input` lint detects ill-formed attribute\n     /// inputs that were previously accepted and used in practice.\n@@ -2888,6 +2926,7 @@ declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n     HardwiredLints => [\n+        FORBIDDEN_LINT_GROUPS,\n         ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n         ARITHMETIC_OVERFLOW,\n         UNCONDITIONAL_PANIC,"}, {"sha": "ca73481b21699bed3d020a79ec8135f674a543d2", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -5,7 +5,10 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n-use rustc_session::lint::{builtin, Level, Lint, LintId};\n+use rustc_session::lint::{\n+    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    Level, Lint, LintId,\n+};\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n@@ -89,7 +92,12 @@ impl LintLevelSets {\n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an\n         // `allow(warnings)` in scope then we want to respect that instead.\n-        if level == Level::Warn {\n+        //\n+        // We exempt `FORBIDDEN_LINT_GROUPS` from this because it specifically\n+        // triggers in cases (like #80988) where you have `forbid(warnings)`,\n+        // and so if we turned that into an error, it'd defeat the purpose of the\n+        // future compatibility warning.\n+        if level == Level::Warn && LintId::of(lint) != LintId::of(FORBIDDEN_LINT_GROUPS) {\n             let (warnings_level, warnings_src) =\n                 self.get_lint_id_level(LintId::of(builtin::WARNINGS), idx, aux);\n             if let Some(configured_warning_level) = warnings_level {"}, {"sha": "791d5060fe5c7b953c49acf4185012969888f636", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -3,7 +3,7 @@\n use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n-use std::panic::Location;\n+use std::panic::{panic_any, Location};\n \n #[cold]\n #[inline(never)]\n@@ -32,7 +32,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n         match (tcx, span) {\n             (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n-            (None, _) => panic!(msg),\n+            (None, _) => panic_any(msg),\n         }\n     });\n     unreachable!();"}, {"sha": "53c3adcc20c02221e769f74004b77d8f612f5429", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -17,6 +17,7 @@ Core encoding and decoding interfaces.\n #![feature(min_specialization)]\n #![feature(vec_spare_capacity)]\n #![feature(core_intrinsics)]\n+#![feature(int_bits_const)]\n #![feature(maybe_uninit_slice)]\n #![feature(new_uninit)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "a2bcf2c251d7ab1295f4293c9628819d956bcb20", "filename": "compiler/rustc_serialize/tests/leb128.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,3 +1,4 @@\n+#![feature(int_bits_const)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n "}, {"sha": "a49979fb7aa182d5c0ff3dc6fd3d8ae05904e1c7", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -102,6 +102,7 @@\n #![feature(fn_traits)]\n #![feature(fundamental)]\n #![feature(inplace_iteration)]\n+#![feature(int_bits_const)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(maybe_uninit_ref)]"}, {"sha": "ab7611ae071e7bdb91926ba4b5dd892a333518fe", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"wake_trait\", issue = \"69912\")]\n+#![stable(feature = \"wake_trait\", since = \"1.51.0\")]\n //! Types and Traits for working with asynchronous tasks.\n use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n@@ -16,26 +16,78 @@ use crate::sync::Arc;\n /// to wake up a task is stored in an [`Arc`]. Some executors (especially\n /// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n-#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+///\n+/// [arc]: ../../std/sync/struct.Arc.html\n+///\n+/// # Examples\n+///\n+/// A basic `block_on` function that takes a future and runs it to completion on\n+/// the current thread.\n+///\n+/// **Note:** This example trades correctness for simplicity. In order to prevent\n+/// deadlocks, production-grade implementations will also need to handle\n+/// intermediate calls to `thread::unpark` as well as nested invocations.\n+///\n+/// ```rust\n+/// use std::future::Future;\n+/// use std::sync::Arc;\n+/// use std::task::{Context, Poll, Wake};\n+/// use std::thread::{self, Thread};\n+///\n+/// /// A waker that wakes up the current thread when called.\n+/// struct ThreadWaker(Thread);\n+///\n+/// impl Wake for ThreadWaker {\n+///     fn wake(self: Arc<Self>) {\n+///         self.0.unpark();\n+///     }\n+/// }\n+///\n+/// /// Run a future to completion on the current thread.\n+/// fn block_on<T>(fut: impl Future<Output = T>) -> T {\n+///     // Pin the future so it can be polled.\n+///     let mut fut = Box::pin(fut);\n+///\n+///     // Create a new context to be passed to the future.\n+///     let t = thread::current();\n+///     let waker = Arc::new(ThreadWaker(t)).into();\n+///     let mut cx = Context::from_waker(&waker);\n+///\n+///     // Run the future to completion.\n+///     loop {\n+///         match fut.as_mut().poll(&mut cx) {\n+///             Poll::Ready(res) => return res,\n+///             Poll::Pending => thread::park(),\n+///         }\n+///     }\n+/// }\n+///\n+/// block_on(async {\n+///     println!(\"Hi from inside a future!\");\n+/// });\n+/// ```\n+#[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n pub trait Wake {\n     /// Wake this task.\n-    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n     fn wake(self: Arc<Self>);\n \n     /// Wake this task without consuming the waker.\n     ///\n     /// If an executor supports a cheaper way to wake without consuming the\n     /// waker, it should override this method. By default, it clones the\n-    /// [`Arc`] and calls `wake` on the clone.\n-    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    /// [`Arc`] and calls [`wake`] on the clone.\n+    ///\n+    /// [`wake`]: Wake::wake\n+    #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n     fn wake_by_ref(self: &Arc<Self>) {\n         self.clone().wake();\n     }\n }\n \n #[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n #[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n-#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+#[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n         // SAFETY: This is safe because raw_waker safely constructs\n@@ -46,7 +98,7 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n \n #[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n #[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n-#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+#[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n     fn from(waker: Arc<W>) -> RawWaker {\n         raw_waker(waker)"}, {"sha": "dd98f806451d8be671722bca6ba4a4c262f5bee3", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -17,6 +17,7 @@\n #![feature(binary_heap_retain)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]\n+#![feature(int_bits_const)]\n #![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n #![feature(vec_extend_from_within)]"}, {"sha": "6b42d456205cdd263637a0c29877e855d7644d90", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -2028,7 +2028,8 @@ pub trait Iterator {\n         self.try_fold((), call(f))\n     }\n \n-    /// An iterator method that applies a function, producing a single, final value.\n+    /// Folds every element into an accumulator by applying an operation,\n+    /// returning the final result.\n     ///\n     /// `fold()` takes two arguments: an initial value, and a closure with two\n     /// arguments: an 'accumulator', and an element. The closure returns the value that\n@@ -2049,6 +2050,9 @@ pub trait Iterator {\n     /// may not terminate for infinite iterators, even on traits for which a\n     /// result is determinable in finite time.\n     ///\n+    /// Note: [`reduce()`] can be used to use the first element as the initial\n+    /// value, if the accumulator type and item type is the same.\n+    ///\n     /// # Note to Implementors\n     ///\n     /// Several of the other (forward) methods have default implementations in\n@@ -2104,6 +2108,8 @@ pub trait Iterator {\n     /// // they're the same\n     /// assert_eq!(result, result2);\n     /// ```\n+    ///\n+    /// [`reduce()`]: Iterator::reduce\n     #[doc(alias = \"reduce\")]\n     #[doc(alias = \"inject\")]\n     #[inline]\n@@ -2120,10 +2126,15 @@ pub trait Iterator {\n         accum\n     }\n \n-    /// The same as [`fold()`], but uses the first element in the\n-    /// iterator as the initial value, folding every subsequent element into it.\n-    /// If the iterator is empty, return [`None`]; otherwise, return the result\n-    /// of the fold.\n+    /// Reduces the elements to a single one, by repeatedly applying a reducing\n+    /// operation.\n+    ///\n+    /// If the iterator is empty, returns [`None`]; otherwise, returns the\n+    /// result of the reduction.\n+    ///\n+    /// For iterators with at least one element, this is the same as [`fold()`]\n+    /// with the first element of the iterator as the initial value, folding\n+    /// every subsequent element into it.\n     ///\n     /// [`fold()`]: Iterator::fold\n     ///\n@@ -2132,13 +2143,11 @@ pub trait Iterator {\n     /// Find the maximum value:\n     ///\n     /// ```\n-    /// #![feature(iterator_fold_self)]\n-    ///\n     /// fn find_max<I>(iter: I) -> Option<I::Item>\n     ///     where I: Iterator,\n     ///           I::Item: Ord,\n     /// {\n-    ///     iter.fold_first(|a, b| {\n+    ///     iter.reduce(|a, b| {\n     ///         if a >= b { a } else { b }\n     ///     })\n     /// }\n@@ -2149,8 +2158,8 @@ pub trait Iterator {\n     /// assert_eq!(find_max(b.iter()), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_fold_self\", issue = \"68125\")]\n-    fn fold_first<F>(mut self, f: F) -> Option<Self::Item>\n+    #[stable(feature = \"iterator_fold_self\", since = \"1.51.0\")]\n+    fn reduce<F>(mut self, f: F) -> Option<Self::Item>\n     where\n         Self: Sized,\n         F: FnMut(Self::Item, Self::Item) -> Self::Item,\n@@ -2647,7 +2656,7 @@ pub trait Iterator {\n             move |x, y| cmp::max_by(x, y, &mut compare)\n         }\n \n-        self.fold_first(fold(compare))\n+        self.reduce(fold(compare))\n     }\n \n     /// Returns the element that gives the minimum value from the\n@@ -2707,7 +2716,7 @@ pub trait Iterator {\n             move |x, y| cmp::min_by(x, y, &mut compare)\n         }\n \n-        self.fold_first(fold(compare))\n+        self.reduce(fold(compare))\n     }\n \n     /// Reverses an iterator's direction."}, {"sha": "6e502426df90643e689bb65e7defc0855c280787", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -10,22 +10,23 @@ tests. `panic!` is closely tied with the `unwrap` method of both\n `panic!` when they are set to [`None`] or [`Err`] variants.\n \n This macro is used to inject panic into a Rust thread, causing the thread to\n-panic entirely. Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n-and the single-argument form of the `panic!` macro will be the value which\n-is transmitted.\n+panic entirely. This macro panics with a string and uses the [`format!`] syntax\n+for building the message.\n+\n+Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n+which contains either a `&str` or `String` for regular `panic!()` invocations.\n+To panic with a value of another other type, [`panic_any`] can be used.\n \n [`Result`] enum is often a better solution for recovering from errors than\n using the `panic!` macro. This macro should be used to avoid proceeding using\n incorrect values, such as from external sources. Detailed information about\n error handling is found in the [book].\n \n-The multi-argument form of this macro panics with a string and has the\n-[`format!`] syntax for building a string.\n-\n See also the macro [`compile_error!`], for raising errors during compilation.\n \n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n+[`panic_any`]: ../std/panic/fn.panic_any.html\n [`Box`]: ../std/boxed/struct.Box.html\n [`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n@@ -42,6 +43,6 @@ program with code `101`.\n # #![allow(unreachable_code)]\n panic!();\n panic!(\"this is a terrible mistake!\");\n-panic!(4); // panic with the value of 4 to be collected elsewhere\n panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+std::panic::panic_any(4); // panic with the value of 4 to be collected elsewhere\n ```"}, {"sha": "8fdd7c9e5d7fbc105c5a560fe31d2e2c631492d8", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -32,9 +32,10 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```\n+        /// #![feature(int_bits_const)]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::BITS, \", stringify!($BITS), \");\")]\n         /// ```\n-        #[stable(feature = \"int_bits_const\", since = \"1.51.0\")]\n+        #[unstable(feature = \"int_bits_const\", issue = \"76904\")]\n         pub const BITS: u32 = $BITS;\n \n         /// Converts a string slice in a given base to an integer."}, {"sha": "9fccf3f72ce1a46b16f167c929b40a77aee95622", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -32,9 +32,10 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```\n+        /// #![feature(int_bits_const)]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::BITS, \", stringify!($BITS), \");\")]\n         /// ```\n-        #[stable(feature = \"int_bits_const\", since = \"1.51.0\")]\n+        #[unstable(feature = \"int_bits_const\", issue = \"76904\")]\n         pub const BITS: u32 = $BITS;\n \n         /// Converts a string slice in a given base to an integer."}, {"sha": "bc0e3e059c9172ff86d26d106828740b4015c329", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -70,6 +70,7 @@\n #![feature(partition_point)]\n #![feature(once_cell)]\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![feature(int_bits_const)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n #![feature(integer_atomics)]"}, {"sha": "9ce9c477ec0f0ae18f8722fb6062ab0d1d936b6d", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -18,6 +18,7 @@\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\"\n )]\n #![feature(core_intrinsics)]\n+#![feature(int_bits_const)]\n #![feature(lang_items)]\n #![feature(nll)]\n #![feature(panic_unwind)]"}, {"sha": "c9c8f68cd9cce7069b0eeec5922de019bf9145cc", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -826,7 +826,7 @@ impl OsStr {\n     /// assert!(!OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00d6S\"));\n     /// ```\n     #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n-    pub fn eq_ignore_ascii_case<S: ?Sized + AsRef<OsStr>>(&self, other: &S) -> bool {\n+    pub fn eq_ignore_ascii_case<S: AsRef<OsStr>>(&self, other: S) -> bool {\n         self.inner.eq_ignore_ascii_case(&other.as_ref().inner)\n     }\n }"}, {"sha": "961cff661e3ba803b807a42cd2b8cc2194241219", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -329,7 +329,6 @@\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n #![feature(vec_spare_capacity)]\n-#![feature(wake_trait)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n \n@@ -508,7 +507,7 @@ pub mod task {\n     pub use core::task::*;\n \n     #[doc(inline)]\n-    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n     pub use alloc::task::*;\n }\n "}, {"sha": "2aa305d7f831eacc3d86e62587cc207ade95f6d8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -150,6 +150,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_unspecified(),\n@@ -172,6 +173,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_loopback(),\n@@ -195,6 +197,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_global(),\n@@ -217,6 +220,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_multicast(),\n@@ -243,6 +247,7 @@ impl IpAddr {\n     /// );\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_documentation(),\n@@ -265,6 +270,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[inline]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(self, IpAddr::V4(_))\n     }\n@@ -284,6 +290,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[inline]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n     }\n@@ -303,6 +310,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // `s_addr` is stored as BE on all machine and the array is in BE order.\n         // So the native endian conversion method is used so that it's never swapped.\n@@ -360,6 +368,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn octets(&self) -> [u8; 4] {\n         // This returns the order we want because s_addr is stored in big-endian.\n         self.inner.s_addr.to_ne_bytes()\n@@ -382,6 +391,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n@@ -402,6 +412,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n     }\n@@ -431,6 +442,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_private(&self) -> bool {\n         match self.octets() {\n             [10, ..] => true,\n@@ -457,6 +469,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_link_local(&self) -> bool {\n         matches!(self.octets(), [169, 254, ..])\n     }\n@@ -531,6 +544,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n         // globally routable addresses in the 192.0.0.0/24 range.\n@@ -568,6 +582,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n     }\n@@ -600,6 +615,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_ietf_protocol_assignment(&self) -> bool {\n         self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n     }\n@@ -623,6 +639,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n     }\n@@ -655,6 +672,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_reserved(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n     }\n@@ -677,6 +695,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n@@ -697,6 +716,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_broadcast(&self) -> bool {\n         u32::from_be_bytes(self.octets()) == u32::from_be_bytes(Self::BROADCAST.octets())\n     }\n@@ -723,6 +743,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self.octets() {\n             [192, 0, 2, _] => true,\n@@ -753,6 +774,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n         Ipv6Addr {\n@@ -776,6 +798,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n         Ipv6Addr {\n@@ -817,6 +840,7 @@ impl From<Ipv4Addr> for IpAddr {\n     ///     IpAddr::from(addr)\n     /// )\n     /// ```\n+    #[inline]\n     fn from(ipv4: Ipv4Addr) -> IpAddr {\n         IpAddr::V4(ipv4)\n     }\n@@ -838,6 +862,7 @@ impl From<Ipv6Addr> for IpAddr {\n     ///     IpAddr::from(addr)\n     /// );\n     /// ```\n+    #[inline]\n     fn from(ipv6: Ipv6Addr) -> IpAddr {\n         IpAddr::V6(ipv6)\n     }\n@@ -875,20 +900,23 @@ impl fmt::Debug for Ipv4Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Clone for Ipv4Addr {\n+    #[inline]\n     fn clone(&self) -> Ipv4Addr {\n         *self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for Ipv4Addr {\n+    #[inline]\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n         self.inner.s_addr == other.inner.s_addr\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv4Addr> for IpAddr {\n+    #[inline]\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n         match self {\n             IpAddr::V4(v4) => v4 == other,\n@@ -899,6 +927,7 @@ impl PartialEq<Ipv4Addr> for IpAddr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv4Addr {\n+    #[inline]\n     fn eq(&self, other: &IpAddr) -> bool {\n         match other {\n             IpAddr::V4(v4) => self == v4,\n@@ -912,6 +941,7 @@ impl Eq for Ipv4Addr {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for Ipv4Addr {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n         // NOTE:\n         // * hash in big endian order\n@@ -923,13 +953,15 @@ impl hash::Hash for Ipv4Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for Ipv4Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv4Addr> for IpAddr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n         match self {\n             IpAddr::V4(v4) => v4.partial_cmp(other),\n@@ -940,6 +972,7 @@ impl PartialOrd<Ipv4Addr> for IpAddr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv4Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n         match other {\n             IpAddr::V4(v4) => self.partial_cmp(v4),\n@@ -950,6 +983,7 @@ impl PartialOrd<IpAddr> for Ipv4Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv4Addr {\n+    #[inline]\n     fn cmp(&self, other: &Ipv4Addr) -> Ordering {\n         // Compare as native endian\n         u32::from_be(self.inner.s_addr).cmp(&u32::from_be(other.inner.s_addr))\n@@ -974,6 +1008,7 @@ impl From<Ipv4Addr> for u32 {\n     /// let addr = Ipv4Addr::new(0xca, 0xfe, 0xba, 0xbe);\n     /// assert_eq!(0xcafebabe, u32::from(addr));\n     /// ```\n+    #[inline]\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n         u32::from_be_bytes(ip)\n@@ -992,6 +1027,7 @@ impl From<u32> for Ipv4Addr {\n     /// let addr = Ipv4Addr::from(0xcafebabe);\n     /// assert_eq!(Ipv4Addr::new(0xca, 0xfe, 0xba, 0xbe), addr);\n     /// ```\n+    #[inline]\n     fn from(ip: u32) -> Ipv4Addr {\n         Ipv4Addr::from(ip.to_be_bytes())\n     }\n@@ -1009,6 +1045,7 @@ impl From<[u8; 4]> for Ipv4Addr {\n     /// let addr = Ipv4Addr::from([13u8, 12u8, 11u8, 10u8]);\n     /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 4]) -> Ipv4Addr {\n         Ipv4Addr::new(octets[0], octets[1], octets[2], octets[3])\n     }\n@@ -1026,6 +1063,7 @@ impl From<[u8; 4]> for IpAddr {\n     /// let addr = IpAddr::from([13u8, 12u8, 11u8, 10u8]);\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(13, 12, 11, 10)), addr);\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 4]) -> IpAddr {\n         IpAddr::V4(Ipv4Addr::from(octets))\n     }\n@@ -1046,6 +1084,7 @@ impl Ipv6Addr {\n     #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = [\n             a.to_be(),\n@@ -1107,6 +1146,7 @@ impl Ipv6Addr {\n     #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn segments(&self) -> [u16; 8] {\n         // All elements in `s6_addr` must be big endian.\n         // SAFETY: `[u8; 16]` is always safe to transmute to `[u16; 8]`.\n@@ -1142,6 +1182,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n     }\n@@ -1162,6 +1203,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n     }\n@@ -1186,6 +1228,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n             Some(Ipv6MulticastScope::Global) => true,\n@@ -1211,6 +1254,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n@@ -1265,6 +1309,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_link_local_strict(&self) -> bool {\n         matches!(self.segments(), [0xfe80, 0, 0, 0, ..])\n     }\n@@ -1318,6 +1363,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n@@ -1357,6 +1403,7 @@ impl Ipv6Addr {\n     ///\n     /// [RFC 3879]: https://tools.ietf.org/html/rfc3879\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n@@ -1379,6 +1426,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n@@ -1414,6 +1462,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n             && !self.is_loopback()\n@@ -1439,6 +1488,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n             match self.segments()[0] & 0x000f {\n@@ -1472,6 +1522,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n@@ -1498,6 +1549,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, a, b, c, d] => {\n@@ -1527,6 +1579,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n             let [a, b] = ab.to_be_bytes();\n@@ -1547,6 +1600,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }\n@@ -1658,20 +1712,23 @@ impl fmt::Debug for Ipv6Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Clone for Ipv6Addr {\n+    #[inline]\n     fn clone(&self) -> Ipv6Addr {\n         *self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for Ipv6Addr {\n+    #[inline]\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n         self.inner.s6_addr == other.inner.s6_addr\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv6Addr {\n+    #[inline]\n     fn eq(&self, other: &IpAddr) -> bool {\n         match other {\n             IpAddr::V4(_) => false,\n@@ -1682,6 +1739,7 @@ impl PartialEq<IpAddr> for Ipv6Addr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv6Addr> for IpAddr {\n+    #[inline]\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n         match self {\n             IpAddr::V4(_) => false,\n@@ -1695,20 +1753,23 @@ impl Eq for Ipv6Addr {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for Ipv6Addr {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n         self.inner.s6_addr.hash(s)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for Ipv6Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv6Addr> for IpAddr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n         match self {\n             IpAddr::V4(_) => Some(Ordering::Less),\n@@ -1719,6 +1780,7 @@ impl PartialOrd<Ipv6Addr> for IpAddr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv6Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n         match other {\n             IpAddr::V4(_) => Some(Ordering::Greater),\n@@ -1729,6 +1791,7 @@ impl PartialOrd<IpAddr> for Ipv6Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv6Addr {\n+    #[inline]\n     fn cmp(&self, other: &Ipv6Addr) -> Ordering {\n         self.segments().cmp(&other.segments())\n     }\n@@ -1760,6 +1823,7 @@ impl From<Ipv6Addr> for u128 {\n     /// );\n     /// assert_eq!(0x102030405060708090A0B0C0D0E0F00D_u128, u128::from(addr));\n     /// ```\n+    #[inline]\n     fn from(ip: Ipv6Addr) -> u128 {\n         let ip = ip.octets();\n         u128::from_be_bytes(ip)\n@@ -1782,6 +1846,7 @@ impl From<u128> for Ipv6Addr {\n     ///     ),\n     ///     addr);\n     /// ```\n+    #[inline]\n     fn from(ip: u128) -> Ipv6Addr {\n         Ipv6Addr::from(ip.to_be_bytes())\n     }\n@@ -1810,6 +1875,7 @@ impl From<[u8; 16]> for Ipv6Addr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 16]) -> Ipv6Addr {\n         let inner = c::in6_addr { s6_addr: octets };\n         Ipv6Addr::from_inner(inner)\n@@ -1839,6 +1905,7 @@ impl From<[u16; 8]> for Ipv6Addr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(segments: [u16; 8]) -> Ipv6Addr {\n         let [a, b, c, d, e, f, g, h] = segments;\n         Ipv6Addr::new(a, b, c, d, e, f, g, h)\n@@ -1868,6 +1935,7 @@ impl From<[u8; 16]> for IpAddr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 16]) -> IpAddr {\n         IpAddr::V6(Ipv6Addr::from(octets))\n     }\n@@ -1896,6 +1964,7 @@ impl From<[u16; 8]> for IpAddr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(segments: [u16; 8]) -> IpAddr {\n         IpAddr::V6(Ipv6Addr::from(segments))\n     }"}, {"sha": "2e5f843fc43cb8ba712ac3107680655b65bb80b1", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -125,7 +125,7 @@ unsafe impl Send for Once {}\n \n /// State yielded to [`Once::call_once_force()`]\u2019s closure parameter. The state\n /// can be used to query the poison status of the [`Once`].\n-#[unstable(feature = \"once_poison\", issue = \"33577\")]\n+#[stable(feature = \"once_poison\", since = \"1.51.0\")]\n #[derive(Debug)]\n pub struct OnceState {\n     poisoned: bool,\n@@ -280,8 +280,6 @@ impl Once {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_poison)]\n-    ///\n     /// use std::sync::Once;\n     /// use std::thread;\n     ///\n@@ -301,13 +299,13 @@ impl Once {\n     ///\n     /// // call_once_force will still run and reset the poisoned state\n     /// INIT.call_once_force(|state| {\n-    ///     assert!(state.poisoned());\n+    ///     assert!(state.is_poisoned());\n     /// });\n     ///\n     /// // once any success happens, we stop propagating the poison\n     /// INIT.call_once(|| {});\n     /// ```\n-    #[unstable(feature = \"once_poison\", issue = \"33577\")]\n+    #[stable(feature = \"once_poison\", since = \"1.51.0\")]\n     pub fn call_once_force<F>(&self, f: F)\n     where\n         F: FnOnce(&OnceState),\n@@ -526,8 +524,6 @@ impl OnceState {\n     /// A poisoned [`Once`]:\n     ///\n     /// ```\n-    /// #![feature(once_poison)]\n-    ///\n     /// use std::sync::Once;\n     /// use std::thread;\n     ///\n@@ -540,24 +536,22 @@ impl OnceState {\n     /// assert!(handle.join().is_err());\n     ///\n     /// INIT.call_once_force(|state| {\n-    ///     assert!(state.poisoned());\n+    ///     assert!(state.is_poisoned());\n     /// });\n     /// ```\n     ///\n     /// An unpoisoned [`Once`]:\n     ///\n     /// ```\n-    /// #![feature(once_poison)]\n-    ///\n     /// use std::sync::Once;\n     ///\n     /// static INIT: Once = Once::new();\n     ///\n     /// INIT.call_once_force(|state| {\n-    ///     assert!(!state.poisoned());\n+    ///     assert!(!state.is_poisoned());\n     /// });\n-    #[unstable(feature = \"once_poison\", issue = \"33577\")]\n-    pub fn poisoned(&self) -> bool {\n+    #[stable(feature = \"once_poison\", since = \"1.51.0\")]\n+    pub fn is_poisoned(&self) -> bool {\n         self.poisoned\n     }\n "}, {"sha": "0c35597e11c5126e0ebfe028e1ec36536ff4b097", "filename": "library/std/src/sync/once/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fsync%2Fonce%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fstd%2Fsrc%2Fsync%2Fonce%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce%2Ftests.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -69,7 +69,7 @@ fn poison_bad() {\n     let mut called = false;\n     O.call_once_force(|p| {\n         called = true;\n-        assert!(p.poisoned())\n+        assert!(p.is_poisoned())\n     });\n     assert!(called);\n \n@@ -92,7 +92,7 @@ fn wait_for_force_to_finish() {\n     let (tx2, rx2) = channel();\n     let t1 = thread::spawn(move || {\n         O.call_once_force(|p| {\n-            assert!(p.poisoned());\n+            assert!(p.is_poisoned());\n             tx1.send(()).unwrap();\n             rx2.recv().unwrap();\n         });"}, {"sha": "1cc0967c8f42e50e6e6c63654a1a7448269cb80d", "filename": "library/term/src/terminfo/parm/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -77,15 +77,15 @@ fn test_comparison_ops() {\n     for &(op, bs) in v.iter() {\n         let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[0]]);\n         let s = format!(\"%{{1}}%{{1}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[1]]);\n         let s = format!(\"%{{2}}%{{1}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[2]]);\n     }\n }\n@@ -95,13 +95,13 @@ fn test_conditionals() {\n     let mut vars = Variables::new();\n     let s = b\"\\\\E[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m\";\n     let res = expand(s, &[Number(1)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[31m\".bytes().collect::<Vec<_>>());\n     let res = expand(s, &[Number(8)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[90m\".bytes().collect::<Vec<_>>());\n     let res = expand(s, &[Number(42)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[38;5;42m\".bytes().collect::<Vec<_>>());\n }\n "}, {"sha": "f0586d510dbdb5f7db31a89d4a814e30ec97fe2a", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -199,7 +199,7 @@ fn test_should_panic_bad_message() {\n fn test_should_panic_non_string_message_type() {\n     use crate::tests::TrFailedMsg;\n     fn f() {\n-        panic!(1i32);\n+        std::panic::panic_any(1i32);\n     }\n     let expected = \"foobar\";\n     let failed_msg = format!("}, {"sha": "c7ef5ad70a114002fdad17f7e7c47c83d083aaa3", "filename": "src/test/ui-fulldeps/issue-15149.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -50,7 +50,7 @@ fn test() {\n                                                       .output().unwrap();\n \n     assert!(child_output.status.success(),\n-            format!(\"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n-                    str::from_utf8(&child_output.stdout).unwrap(),\n-                    str::from_utf8(&child_output.stderr).unwrap()));\n+            \"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n+            str::from_utf8(&child_output.stdout).unwrap(),\n+            str::from_utf8(&child_output.stderr).unwrap());\n }"}, {"sha": "c43ce2cadba046672c01a7e664572adae43c80a0", "filename": "src/test/ui/async-await/issue-73137.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -4,7 +4,6 @@\n // edition:2018\n \n #![allow(dead_code)]\n-#![feature(wake_trait)]\n use std::future::Future;\n use std::task::{Waker, Wake, Context};\n use std::sync::Arc;"}, {"sha": "8ae8376ae4a6f53df0098ecedc172f1d8b0a9787", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_panic)]\n+#![allow(non_fmt_panic)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "74907a0b49518f82e2bd5f2bcbbfb657ef7c5d99", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,119 +1,119 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:6:15\n+  --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:16\n+  --> $DIR/const_panic.rs:11:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:11:16\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:14:15\n+  --> $DIR/const_panic.rs:15:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:14:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:15:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:18:15\n+  --> $DIR/const_panic.rs:19:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:18:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:19:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:22:15\n+  --> $DIR/const_panic.rs:23:15\n    |\n LL | const W: () = std::panic!(MSG);\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:15\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:23:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:26:20\n+  --> $DIR/const_panic.rs:27:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:26:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:27:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:30:21\n+  --> $DIR/const_panic.rs:31:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:30:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:31:21\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:35:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:34:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:35:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:38:20\n+  --> $DIR/const_panic.rs:39:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:38:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:39:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:42:20\n+  --> $DIR/const_panic.rs:43:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n    | -------------------^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:42:20\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:43:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>"}, {"sha": "cb6d58a23d9368a79ba13df4fc66b0c59dda0487", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -82,7 +82,7 @@ impl Allocator {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n     }\n }"}, {"sha": "e28bedb982dd91d48095ec9ee4809a8a2a517446", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -46,7 +46,7 @@ impl Allocator {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n \n         let mut data = self.data.borrow_mut();\n@@ -67,7 +67,7 @@ impl<'a> Drop for Ptr<'a> {\n         self.1.cur_ops.set(self.1.cur_ops.get() + 1);\n \n         if self.1.cur_ops.get() == self.1.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n     }\n }"}, {"sha": "d5886a13558c627d8703fdee6705cf23322ff318", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -31,7 +31,7 @@ fn panic_with_single_argument_does_not_get_formatted() {\n     // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n     // For stability reasons this will need to part of an edition change.\n \n-    #[allow(panic_fmt)]\n+    #[allow(non_fmt_panic)]\n     let msg = std::panic::catch_unwind(|| {\n         panic!(\"{foo}\");\n     }).unwrap_err();"}, {"sha": "80f7db4e56036b99c9c109e2ed354eda5e71db90", "filename": "src/test/ui/lint/forbid-group-group-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,13 @@\n+// Check what happens when we forbid a smaller group but\n+// then allow a superset of that group.\n+\n+#![forbid(nonstandard_style)]\n+\n+// FIXME: Arguably this should be an error, but the WARNINGS group is\n+// treated in a very special (and rather ad-hoc) way and\n+// it fails to trigger.\n+#[allow(warnings)]\n+fn main() {\n+    let A: ();\n+    //~^ ERROR should have a snake case name\n+}"}, {"sha": "fd425e5f74e6fdaaad05baacb273da03f6a628e5", "filename": "src/test/ui/lint/forbid-group-group-1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-1.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,15 @@\n+error: variable `A` should have a snake case name\n+  --> $DIR/forbid-group-group-1.rs:11:9\n+   |\n+LL |     let A: ();\n+   |         ^ help: convert the identifier to snake case: `a`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/forbid-group-group-1.rs:4:11\n+   |\n+LL | #![forbid(nonstandard_style)]\n+   |           ^^^^^^^^^^^^^^^^^\n+   = note: `#[forbid(non_snake_case)]` implied by `#[forbid(nonstandard_style)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b12fd72da74946bc5355159eb03887cf8ae4339b", "filename": "src/test/ui/lint/forbid-group-group-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,26 @@\n+// Check what happens when we forbid a bigger group but\n+// then deny a subset of that group.\n+\n+#![forbid(warnings)]\n+#![deny(forbidden_lint_groups)]\n+\n+#[allow(nonstandard_style)]\n+//~^ ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+//~| ERROR incompatible with previous\n+//~| WARNING previously accepted by the compiler\n+fn main() {}"}, {"sha": "214e949c11a748990d8b906b48c2b82414d1f3a4", "filename": "src/test/ui/lint/forbid-group-group-2.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,115 @@\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+note: the lint level is defined here\n+  --> $DIR/forbid-group-group-2.rs:5:9\n+   |\n+LL | #![deny(forbidden_lint_groups)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: allow(nonstandard_style) incompatible with previous forbid\n+  --> $DIR/forbid-group-group-2.rs:7:9\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+...\n+LL | #[allow(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "6f1b2e9f668124a94a726fe7f6266bd6fdc7afb4", "filename": "src/test/ui/lint/forbid-group-member.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,19 @@\n+// Check what happens when we forbid a group but\n+// then allow a member of that group.\n+//\n+// check-pass\n+\n+#![forbid(unused)]\n+\n+#[allow(unused_variables)]\n+//~^ WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING previously accepted\n+fn main() {\n+    let a: ();\n+}"}, {"sha": "c818d7ff606050529ce2a8589c1e06071d7d4e18", "filename": "src/test/ui/lint/forbid-group-member.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,51 @@\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `#[warn(forbidden_lint_groups)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/forbid-group-member.rs:8:9\n+   |\n+LL | #![forbid(unused)]\n+   |           ------ `forbid` level set here\n+LL | \n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "3279029a9cbc3fe4d7097d423d589edf640c96ae", "filename": "src/test/ui/lint/forbid-member-group.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,12 @@\n+// Check what happens when we forbid a member of\n+// a group but then allow the group.\n+\n+#![forbid(unused_variables)]\n+\n+#[allow(unused)]\n+//~^ ERROR incompatible with previous forbid\n+//~| ERROR incompatible with previous forbid\n+//~| ERROR incompatible with previous forbid\n+fn main() {\n+    let a: ();\n+}"}, {"sha": "1d8ab4d5edb0ce6019c11b1c9599f7e924c6062e", "filename": "src/test/ui/lint/forbid-member-group.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,30 @@\n+error[E0453]: allow(unused) incompatible with previous forbid\n+  --> $DIR/forbid-member-group.rs:6:9\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ---------------- `forbid` level set here\n+LL | \n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused) incompatible with previous forbid\n+  --> $DIR/forbid-member-group.rs:6:9\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ---------------- `forbid` level set here\n+LL | \n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused) incompatible with previous forbid\n+  --> $DIR/forbid-member-group.rs:6:9\n+   |\n+LL | #![forbid(unused_variables)]\n+   |           ---------------- `forbid` level set here\n+LL | \n+LL | #[allow(unused)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "05d7d924c8fabe0aa762309665c09358d27db06f", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -14,14 +14,17 @@\n \n // compile-flags: -Z deduplicate-diagnostics=yes\n \n+#![forbid(forbidden_lint_groups)]\n+\n fn forbid_first(num: i32) -> i32 {\n     #![forbid(unused)]\n     #![deny(unused)]\n     //~^ ERROR: deny(unused) incompatible with previous forbid\n+    //~| WARNING being phased out\n+    //~| ERROR: deny(unused) incompatible with previous forbid\n+    //~| WARNING being phased out\n     #![warn(unused)]\n-    //~^ ERROR: warn(unused) incompatible with previous forbid\n     #![allow(unused)]\n-    //~^ ERROR: allow(unused) incompatible with previous forbid\n \n     num * num\n }"}, {"sha": "475410cecffa30b105a618f9924fa93ef502bb62", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,29 +1,29 @@\n-error[E0453]: deny(unused) incompatible with previous forbid\n-  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:19:13\n+error: deny(unused) incompatible with previous forbid\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n    |\n LL |     #![forbid(unused)]\n    |               ------ `forbid` level set here\n LL |     #![deny(unused)]\n    |             ^^^^^^ overruled by previous forbid\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:17:11\n+   |\n+LL | #![forbid(forbidden_lint_groups)]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error[E0453]: warn(unused) incompatible with previous forbid\n+error: deny(unused) incompatible with previous forbid\n   --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n    |\n LL |     #![forbid(unused)]\n    |               ------ `forbid` level set here\n-...\n-LL |     #![warn(unused)]\n+LL |     #![deny(unused)]\n    |             ^^^^^^ overruled by previous forbid\n-\n-error[E0453]: allow(unused) incompatible with previous forbid\n-  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:23:14\n    |\n-LL |     #![forbid(unused)]\n-   |               ------ `forbid` level set here\n-...\n-LL |     #![allow(unused)]\n-   |              ^^^^^^ overruled by previous forbid\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0453`."}, {"sha": "16a041928db73b6814e203331ca5d0d44737edd8", "filename": "src/test/ui/lint/issue-80988.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-80988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-80988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #80988\n+//\n+// check-pass\n+\n+#![forbid(warnings)]\n+\n+#[deny(warnings)]\n+//~^ WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+//~| WARNING incompatible with previous forbid\n+//~| WARNING being phased out\n+fn main() {}"}, {"sha": "4cae11f97c0fb1f322aa1c39208082333aec9cf9", "filename": "src/test/ui/lint/issue-80988.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,51 @@\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: `#[warn(forbidden_lint_groups)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: deny(warnings) incompatible with previous forbid\n+  --> $DIR/issue-80988.rs:7:8\n+   |\n+LL | #![forbid(warnings)]\n+   |           -------- `forbid` level set here\n+LL | \n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "f02aa9040ebc50351daff68dd97af117fe9e1abd", "filename": "src/test/ui/lint/issue-81218.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-81218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fissue-81218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81218.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #81218\n+//\n+// check-pass\n+\n+#![forbid(warnings)]\n+\n+#[allow(unused_variables)]\n+fn main() {\n+    // We want to ensure that you don't get an error\n+    // here. The idea is that a derive might generate\n+    // code that would otherwise trigger the \"unused variables\"\n+    // lint, but it is meant to be suppressed.\n+    let x: ();\n+}"}, {"sha": "486ec3c46804fb0f0d01f760baa7c4c4b5cdfaa7", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -15,11 +15,16 @@\n // compile-flags: -Z deduplicate-diagnostics=yes\n \n #![forbid(unused, non_snake_case)]\n+#![forbid(forbidden_lint_groups)]\n \n #[allow(unused_variables)] //~ ERROR incompatible with previous\n+//~^ ERROR incompatible with previous\n+//~| WARNING this was previously accepted by the compiler\n+//~| WARNING this was previously accepted by the compiler\n fn foo() {}\n \n #[allow(unused)] //~ ERROR incompatible with previous\n+//~^ WARNING this was previously accepted by the compiler\n fn bar() {}\n \n #[allow(nonstandard_style)] //~ ERROR incompatible with previous"}, {"sha": "d69157a8bb3adc9d316d331c3810bc4348702c26", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,30 +1,53 @@\n-error[E0453]: allow(unused_variables) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:19:9\n+error: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/outer-forbid.rs:20:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n-LL | \n+...\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+note: the lint level is defined here\n+  --> $DIR/outer-forbid.rs:18:11\n+   |\n+LL | #![forbid(forbidden_lint_groups)]\n+   |           ^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n-error[E0453]: allow(unused) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:22:9\n+error: allow(unused) incompatible with previous forbid\n+  --> $DIR/outer-forbid.rs:26:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n ...\n LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error[E0453]: allow(nonstandard_style) incompatible with previous forbid\n-  --> $DIR/outer-forbid.rs:25:9\n+  --> $DIR/outer-forbid.rs:30:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |                   -------------- `forbid` level set here\n ...\n LL | #[allow(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n \n-error: aborting due to 3 previous errors\n+error: allow(unused_variables) incompatible with previous forbid\n+  --> $DIR/outer-forbid.rs:20:9\n+   |\n+LL | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+...\n+LL | #[allow(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "2846f2a1f835332074f6bed990fc8c83d4124f80", "filename": "src/test/ui/macros/assert-macro-owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -2,6 +2,8 @@\n // error-pattern:panicked at 'test-assert-owned'\n // ignore-emscripten no processes\n \n+#![allow(non_fmt_panic)]\n+\n fn main() {\n     assert!(false, \"test-assert-owned\".to_string());\n }"}, {"sha": "fd2c590ae5fd6eac0af7664732daf8ddd034b728", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -57,7 +57,7 @@ fn writeln_1arg() {\n //\n // (Example: Issue #48042)\n #[test]\n-#[allow(panic_fmt)]\n+#[allow(non_fmt_panic)]\n fn to_format_or_not_to_format() {\n     // (\"{}\" is the easiest string to test because if this gets\n     // sent to format_args!, it'll simply fail to compile."}, {"sha": "22c804abf5cc85deedb2a746d0221986ac2d2043", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     assert_eq!(get(), vec![0, 2, 3, 1]);\n \n     let _ = std::panic::catch_unwind(|| {\n-        (d(4), &d(5), d(6), &d(7), panic!(InjectedFailure));\n+        (d(4), &d(5), d(6), &d(7), panic::panic_any(InjectedFailure));\n     });\n \n     // here, the temporaries (5/7) live until the end of the"}, {"sha": "25c53316e1290a04436fad7dab169ac900d44d18", "filename": "src/test/ui/non-fmt-panic.rs", "status": "renamed", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -13,19 +13,27 @@ fn main() {\n     core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n     assert!(false, \"{:03x} {test} bla\");\n     //~^ WARN panic message contains unused formatting placeholders\n+    assert!(false, S);\n+    //~^ WARN panic message is not a string literal\n     debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n-    panic!(C); // No warning (yet)\n-    panic!(S); // No warning (yet)\n+    panic!(C); //~ WARN panic message is not a string literal\n+    panic!(S); //~ WARN panic message is not a string literal\n+    std::panic!(123); //~ WARN panic message is not a string literal\n+    core::panic!(&*\"abc\"); //~ WARN panic message is not a string literal\n     panic!(concat!(\"{\", \"}\")); //~ WARN panic message contains an unused formatting placeholder\n     panic!(concat!(\"{\", \"{\")); //~ WARN panic message contains braces\n \n     fancy_panic::fancy_panic!(\"test {} 123\");\n     //~^ WARN panic message contains an unused formatting placeholder\n \n+    fancy_panic::fancy_panic!(S);\n+    //~^ WARN panic message is not a string literal\n+\n     // Check that the lint only triggers for std::panic and core::panic,\n     // not any panic macro:\n     macro_rules! panic {\n         ($e:expr) => ();\n     }\n     panic!(\"{}\"); // OK\n+    panic!(S); // OK\n }", "previous_filename": "src/test/ui/panic-brace.rs"}, {"sha": "45187c518c423901ffc246209bc4fb8598e34d9b", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "renamed", "additions": 98, "deletions": 18, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,35 +1,35 @@\n warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:11:29\n+  --> $DIR/non-fmt-panic.rs:11:29\n    |\n LL |     panic!(\"here's a brace: {\");\n    |                             ^\n    |\n-   = note: `#[warn(panic_fmt)]` on by default\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: `#[warn(non_fmt_panic)]` on by default\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", \"here's a brace: {\");\n    |            ^^^^^\n \n warning: panic message contains a brace\n-  --> $DIR/panic-brace.rs:12:31\n+  --> $DIR/non-fmt-panic.rs:12:31\n    |\n LL |     std::panic!(\"another one: }\");\n    |                               ^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 ^^^^^\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:13:25\n+  --> $DIR/non-fmt-panic.rs:13:25\n    |\n LL |     core::panic!(\"Hello {}\");\n    |                         ^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n help: add the missing argument\n    |\n LL |     core::panic!(\"Hello {}\", ...);\n@@ -40,12 +40,12 @@ LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  ^^^^^\n \n warning: panic message contains unused formatting placeholders\n-  --> $DIR/panic-brace.rs:14:21\n+  --> $DIR/non-fmt-panic.rs:14:21\n    |\n LL |     assert!(false, \"{:03x} {test} bla\");\n    |                     ^^^^^^ ^^^^^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n help: add the missing arguments\n    |\n LL |     assert!(false, \"{:03x} {test} bla\", ...);\n@@ -55,25 +55,97 @@ help: or add a \"{}\" format string to use the message literally\n LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n    |                    ^^^^^\n \n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:16:20\n+   |\n+LL |     assert!(false, S);\n+   |                    ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     assert!(false, \"{}\", S);\n+   |                    ^^^^^\n+\n warning: panic message contains braces\n-  --> $DIR/panic-brace.rs:16:27\n+  --> $DIR/non-fmt-panic.rs:18:27\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n    |                           ^^^^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n    |                          ^^^^^\n \n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:19:12\n+   |\n+LL |     panic!(C);\n+   |            ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", C);\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(C);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:20:12\n+   |\n+LL |     panic!(S);\n+   |            ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     panic!(\"{}\", S);\n+   |            ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(S);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:21:17\n+   |\n+LL |     std::panic!(123);\n+   |                 ^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     std::panic!(\"{}\", 123);\n+   |                 ^^^^^\n+help: or use std::panic::panic_any instead\n+   |\n+LL |     std::panic::panic_any(123);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:22:18\n+   |\n+LL |     core::panic!(&*\"abc\");\n+   |                  ^^^^^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     core::panic!(\"{}\", &*\"abc\");\n+   |                  ^^^^^\n+\n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:19:12\n+  --> $DIR/non-fmt-panic.rs:23:12\n    |\n LL |     panic!(concat!(\"{\", \"}\"));\n    |            ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n help: add the missing argument\n    |\n LL |     panic!(concat!(\"{\", \"}\"), ...);\n@@ -84,24 +156,32 @@ LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n    |            ^^^^^\n \n warning: panic message contains braces\n-  --> $DIR/panic-brace.rs:20:5\n+  --> $DIR/non-fmt-panic.rs:24:5\n    |\n LL |     panic!(concat!(\"{\", \"{\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this message is not used as a format string, but will be in a future Rust edition\n+   = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n    |            ^^^^^\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:22:37\n+  --> $DIR/non-fmt-panic.rs:26:37\n    |\n LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |                                     ^^\n    |\n-   = note: this message is not used as a format string when given without arguments, but will be in a future Rust edition\n+   = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:29:31\n+   |\n+LL |     fancy_panic::fancy_panic!(S);\n+   |                               ^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n \n-warning: 8 warnings emitted\n+warning: 14 warnings emitted\n ", "previous_filename": "src/test/ui/panic-brace.stderr"}, {"sha": "8749407675b375f7447d52a4327f2b150feb18f1", "filename": "src/test/ui/or-patterns/macro-pat.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2For-patterns%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2For-patterns%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmacro-pat.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "previous_filename": "src/test/ui/pattern/or-pattern-macro-pat.rs"}, {"sha": "bfcc12cd186bd5a8d59160baaf0694f45c6e7d66", "filename": "src/test/ui/panics/explicit-panic-msg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,5 +1,6 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n+#![allow(non_fmt_panic)]\n \n // run-fail\n // error-pattern:wooooo"}, {"sha": "95ae6ffe8be02e231576436500aaf183aa0adc8d", "filename": "src/test/ui/panics/panic-macro-any-wrapped.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -2,6 +2,8 @@\n // error-pattern:panicked at 'Box<Any>'\n // ignore-emscripten no processes\n \n+#![allow(non_fmt_panic)]\n+\n fn main() {\n     panic!(Box::new(612_i64));\n }"}, {"sha": "d2a7ba3713a514cf07333795ec15d7fe2bc8e421", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -3,6 +3,7 @@\n // ignore-emscripten no processes\n \n #![feature(box_syntax)]\n+#![allow(non_fmt_panic)]\n \n fn main() {\n     panic!(box 413 as Box<dyn std::any::Any + Send>);"}, {"sha": "3c6ee8fa3155e3ddce3de76c4c958294dae7f49c", "filename": "src/test/ui/panics/while-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -5,7 +5,7 @@\n // ignore-emscripten no processes\n \n fn main() {\n-    panic!({\n+    panic!(\"{}\", {\n         while true {\n             panic!(\"giraffe\")\n         }"}, {"sha": "4ee423b383b0f431c89db4193206a99b83c88410", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -2183,7 +2183,7 @@ fn lint_expect_fun_call(\n         span_replace_word,\n         &format!(\"use of `{}` followed by a function call\", name),\n         \"try this\",\n-        format!(\"unwrap_or_else({} {{ panic!({}) }})\", closure_args, arg_root_snippet),\n+        format!(\"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\", closure_args, arg_root_snippet),\n         applicability,\n     );\n }"}, {"sha": "9cef7438d225cbc51cdedd1b471ece46bbb89e78", "filename": "src/tools/clippy/tests/missing-test-files.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fmissing-test-files.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -9,14 +9,12 @@ fn test_missing_tests() {\n     if !missing_files.is_empty() {\n         assert!(\n             false,\n-            format!(\n-                \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n-                missing_files\n-                    .iter()\n-                    .map(|s| format!(\"\\t{}\", s))\n-                    .collect::<Vec<_>>()\n-                    .join(\"\\n\")\n-            )\n+            \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n+            missing_files\n+                .iter()\n+                .map(|s| format!(\"\\t{}\", s))\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\")\n         );\n     }\n }"}, {"sha": "e989de654045632a1a496859c9cff7640742492a", "filename": "src/tools/clippy/tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,3 +1,5 @@\n+#![allow(non_fmt_panic)]\n+\n macro_rules! assert_const {\n     ($len:expr) => {\n         assert!($len > 0);"}, {"sha": "c66fdf093f5148a9a6aa660bea88dd23c6d9f61d", "filename": "src/tools/clippy/tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -1,5 +1,5 @@\n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:9:5\n+  --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true);\n    |     ^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     assert!(true);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:10:5\n+  --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |     assert!(false);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:11:5\n+  --> $DIR/assertions_on_constants.rs:13:5\n    |\n LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     assert!(true, \"true message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"false message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:12:5\n+  --> $DIR/assertions_on_constants.rs:14:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     assert!(false, \"false message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, msg.to_uppercase())` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:15:5\n+  --> $DIR/assertions_on_constants.rs:17:5\n    |\n LL |     assert!(false, msg.to_uppercase());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     assert!(false, msg.to_uppercase());\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:18:5\n+  --> $DIR/assertions_on_constants.rs:20:5\n    |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     assert!(B);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:21:5\n+  --> $DIR/assertions_on_constants.rs:23:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     assert!(C);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"C message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:22:5\n+  --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     assert!(C, \"C message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:24:5\n+  --> $DIR/assertions_on_constants.rs:26:5\n    |\n LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a756d1cf50659473e1c43bbaca97ed675b9c4755", "filename": "src/tools/clippy/tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.fixed?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -74,12 +74,12 @@ fn main() {\n             \"foo\"\n         }\n \n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n \n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_static_str()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_static_str()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) });\n     }\n \n     //Issue #3839"}, {"sha": "6dc796f5cee37d7e4effecde55e3775344710dc8", "filename": "src/tools/clippy/tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_fun_call.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -34,31 +34,31 @@ error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:77:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:78:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:79:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:81:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_static_str()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_static_str()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:82:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:86:16"}, {"sha": "5d5af4e4632970afe821f9b42b82eae5bd445e08", "filename": "src/tools/clippy/tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.rs?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -36,7 +36,7 @@ impl From<Option<String>> for Invalid {\n     fn from(s: Option<String>) -> Invalid {\n         let s = s.unwrap();\n         if !s.is_empty() {\n-            panic!(42);\n+            panic!(\"42\");\n         } else if s.parse::<u32>().unwrap() != 42 {\n             panic!(\"{:?}\", s);\n         }"}, {"sha": "f787b30bdabc557641a968518485a53abcb72b7a", "filename": "src/tools/clippy/tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab3a80f235ed86d64d002e58b35adc3664e21a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr?ref=dab3a80f235ed86d64d002e58b35adc3664e21a4", "patch": "@@ -59,8 +59,8 @@ note: potential failure(s)\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n LL |         if !s.is_empty() {\n-LL |             panic!(42);\n-   |             ^^^^^^^^^^^\n+LL |             panic!(\"42\");\n+   |             ^^^^^^^^^^^^^\n LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);"}]}