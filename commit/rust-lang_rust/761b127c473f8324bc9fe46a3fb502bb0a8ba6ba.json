{"sha": "761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "node_id": "C_kwDOAAsO6NoAKDc2MWIxMjdjNDczZjgzMjRiYzlmZTQ2YTNmYjUwMmJiMGE4YmE2YmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T21:11:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T21:11:38Z"}, "message": "Auto merge of #13806 - WaffleLapkin:typed_bl\u00e5haj, r=Veykril\n\nfix: Skip adjustment hints if the adjustment is identity (`T` -> `T`)\n\nSupersedes https://github.com/rust-lang/rust-analyzer/pull/13765", "tree": {"sha": "3f337588d0fe9226248c5449512a2c7880bf227b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f337588d0fe9226248c5449512a2c7880bf227b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "html_url": "https://github.com/rust-lang/rust/commit/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927d56a67d10299a751b3b571c841d1c6b6af106", "url": "https://api.github.com/repos/rust-lang/rust/commits/927d56a67d10299a751b3b571c841d1c6b6af106", "html_url": "https://github.com/rust-lang/rust/commit/927d56a67d10299a751b3b571c841d1c6b6af106"}, {"sha": "874ff2bc9d94072653c3d249bbe260a334c27637", "url": "https://api.github.com/repos/rust-lang/rust/commits/874ff2bc9d94072653c3d249bbe260a334c27637", "html_url": "https://github.com/rust-lang/rust/commit/874ff2bc9d94072653c3d249bbe260a334c27637"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "b841e580b6cd43a57466efab1be677ce330fb90b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "patch": "@@ -3691,6 +3691,13 @@ impl From<ItemInNs> for ScopeDef {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct Adjustment {\n+    pub source: Type,\n+    pub target: Type,\n+    pub kind: Adjust,\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum Adjust {\n     /// Go from ! to any type."}, {"sha": "2ed62372ae2c8423e43c6841715532c7901c4dcc", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "patch": "@@ -2,7 +2,7 @@\n \n mod source_to_def;\n \n-use std::{cell::RefCell, fmt, iter, ops};\n+use std::{cell::RefCell, fmt, iter, mem, ops};\n \n use base_db::{FileId, FileRange};\n use hir_def::{\n@@ -29,7 +29,7 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, Adjust, AutoBorrow, BindingMode, BuiltinAttr, Callable, ConstParam, Crate,\n+    Access, Adjust, Adjustment, AutoBorrow, BindingMode, BuiltinAttr, Callable, ConstParam, Crate,\n     DeriveHelper, Field, Function, HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local,\n     Macro, Module, ModuleDef, Name, OverloadedDeref, Path, ScopeDef, ToolModule, Trait, Type,\n     TypeAlias, TypeParam, VariantDef,\n@@ -334,7 +334,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_trait(trait_)\n     }\n \n-    pub fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjust>> {\n+    pub fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjustment>> {\n         self.imp.expr_adjustments(expr)\n     }\n \n@@ -1067,26 +1067,42 @@ impl<'db> SemanticsImpl<'db> {\n         }\n     }\n \n-    fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjust>> {\n+    fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjustment>> {\n         let mutability = |m| match m {\n             hir_ty::Mutability::Not => Mutability::Shared,\n             hir_ty::Mutability::Mut => Mutability::Mut,\n         };\n-        self.analyze(expr.syntax())?.expr_adjustments(self.db, expr).map(|it| {\n+\n+        let analyzer = self.analyze(expr.syntax())?;\n+\n+        let (mut source_ty, _) = analyzer.type_of_expr(self.db, expr)?;\n+\n+        analyzer.expr_adjustments(self.db, expr).map(|it| {\n             it.iter()\n-                .map(|adjust| match adjust.kind {\n-                    hir_ty::Adjust::NeverToAny => Adjust::NeverToAny,\n-                    hir_ty::Adjust::Deref(Some(hir_ty::OverloadedDeref(m))) => {\n-                        Adjust::Deref(Some(OverloadedDeref(mutability(m))))\n-                    }\n-                    hir_ty::Adjust::Deref(None) => Adjust::Deref(None),\n-                    hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::RawPtr(m)) => {\n-                        Adjust::Borrow(AutoBorrow::RawPtr(mutability(m)))\n-                    }\n-                    hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::Ref(m)) => {\n-                        Adjust::Borrow(AutoBorrow::Ref(mutability(m)))\n-                    }\n-                    hir_ty::Adjust::Pointer(pc) => Adjust::Pointer(pc),\n+                .map(|adjust| {\n+                    let target =\n+                        Type::new_with_resolver(self.db, &analyzer.resolver, adjust.target.clone());\n+                    let kind = match adjust.kind {\n+                        hir_ty::Adjust::NeverToAny => Adjust::NeverToAny,\n+                        hir_ty::Adjust::Deref(Some(hir_ty::OverloadedDeref(m))) => {\n+                            Adjust::Deref(Some(OverloadedDeref(mutability(m))))\n+                        }\n+                        hir_ty::Adjust::Deref(None) => Adjust::Deref(None),\n+                        hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::RawPtr(m)) => {\n+                            Adjust::Borrow(AutoBorrow::RawPtr(mutability(m)))\n+                        }\n+                        hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::Ref(m)) => {\n+                            Adjust::Borrow(AutoBorrow::Ref(mutability(m)))\n+                        }\n+                        hir_ty::Adjust::Pointer(pc) => Adjust::Pointer(pc),\n+                    };\n+\n+                    // Update `source_ty` for the next adjustment\n+                    let source = mem::replace(&mut source_ty, target.clone());\n+\n+                    let adjustment = Adjustment { source, target, kind };\n+\n+                    adjustment\n                 })\n                 .collect()\n         })"}, {"sha": "b2bec10d05d7bd62b299850efce931a462215d3e", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761b127c473f8324bc9fe46a3fb502bb0a8ba6ba/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=761b127c473f8324bc9fe46a3fb502bb0a8ba6ba", "patch": "@@ -59,8 +59,12 @@ pub(super) fn hints(\n         });\n     }\n     for adjustment in adjustments.into_iter().rev() {\n+        if adjustment.source == adjustment.target {\n+            continue;\n+        }\n+\n         // FIXME: Add some nicer tooltips to each of these\n-        let text = match adjustment {\n+        let text = match adjustment.kind {\n             Adjust::NeverToAny if config.adjustment_hints == AdjustmentHints::Always => {\n                 \"<never-to-any>\"\n             }\n@@ -213,4 +217,20 @@ impl Trait for Struct {}\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn never_to_never_is_never_shown() {\n+        check_with_config(\n+            InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n+            r#\"\n+fn never() -> ! {\n+    return loop {};\n+}\n+\n+fn or_else() {\n+    let () = () else { return };\n+}\n+            \"#,\n+        )\n+    }\n }"}]}