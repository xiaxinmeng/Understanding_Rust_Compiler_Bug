{"sha": "a89690ec00ca98397183c3ef011f944448098f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OTY5MGVjMDBjYTk4Mzk3MTgzYzNlZjAxMWY5NDQ0NDgwOThmOGI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-14T15:15:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-14T15:15:37Z"}, "message": "Rollup merge of #36396 - athulappadan:Default-docs, r=bluss\n\nDocumentation of what Default does for each type\n\nAddresses #36265\nI haven't changed the following types due to doubts:\n\n1)src/libstd/ffi/c_str.rs\n2)src/libcore/iter/sources.rs\n3)src/libcore/hash/mod.rs\n4)src/libcore/hash/mod.rs\n5)src/librustc/middle/privacy.rs\n\nr? @steveklabnik", "tree": {"sha": "223b94f42aed89fbfb7fd84a474cf2bb64b45694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223b94f42aed89fbfb7fd84a474cf2bb64b45694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a89690ec00ca98397183c3ef011f944448098f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a89690ec00ca98397183c3ef011f944448098f8b", "html_url": "https://github.com/rust-lang/rust/commit/a89690ec00ca98397183c3ef011f944448098f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a89690ec00ca98397183c3ef011f944448098f8b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4476b7b43b2826b6f0e71f4638159f8718c0a440", "url": "https://api.github.com/repos/rust-lang/rust/commits/4476b7b43b2826b6f0e71f4638159f8718c0a440", "html_url": "https://github.com/rust-lang/rust/commit/4476b7b43b2826b6f0e71f4638159f8718c0a440"}, {"sha": "5798003438469313c0616270b8b285d9afbb4730", "url": "https://api.github.com/repos/rust-lang/rust/commits/5798003438469313c0616270b8b285d9afbb4730", "html_url": "https://github.com/rust-lang/rust/commit/5798003438469313c0616270b8b285d9afbb4730"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "3d579641b96583961f48466c346e1c23d355ca84", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -718,6 +718,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n \n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n+    /// Constructs a new `Weak<T>` without an accompanying instance of T.\n     fn default() -> Weak<T> {\n         Weak::new()\n     }\n@@ -923,6 +924,7 @@ impl<T: ?Sized> fmt::Pointer for Arc<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Arc<T> {\n+    /// Creates a new `Arc<T>`, with the `Default` value for T.\n     fn default() -> Arc<T> {\n         Arc::new(Default::default())\n     }"}, {"sha": "bc9b6e805efc91ee5107229de22de8d01ec78148", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -290,6 +290,7 @@ impl<T: ?Sized> Box<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Box<T> {\n+    /// Creates a `Box<T>`, with the `Default` value for T.\n     fn default() -> Box<T> {\n         box Default::default()\n     }"}, {"sha": "dadddbc2cb3e523af14c2d055f456cc8ddc8d34a", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -870,6 +870,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n \n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n+    /// Creates a new `Weak<T>`.\n     fn default() -> Weak<T> {\n         Weak::new()\n     }"}, {"sha": "1fe921543bd4ed681f0ff359afd4f24c1e0273ca", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -263,6 +263,7 @@ impl<T: Clone> Clone for BinaryHeap<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BinaryHeap<T> {\n+    /// Creates an empty `BinaryHeap<T>`.\n     #[inline]\n     fn default() -> BinaryHeap<T> {\n         BinaryHeap::new()"}, {"sha": "700f88dc0f267688bb91e057616256fc84c00e1c", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -249,6 +249,7 @@ impl<'a, B: ?Sized> Default for Cow<'a, B>\n     where B: ToOwned,\n           <B as ToOwned>::Owned: Default\n {\n+    /// Creates an owned Cow<'a, B> with the default value for the contained owned value.\n     fn default() -> Cow<'a, B> {\n         Owned(<B as ToOwned>::Owned::default())\n     }"}, {"sha": "36cb5a1fd9f6d6150a6e6d262d60e933205b3cf1", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -1667,6 +1667,7 @@ impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> {\n }\n \n impl<K: Ord, V> Default for BTreeMap<K, V> {\n+    /// Creates an empty `BTreeMap<K, V>`.\n     fn default() -> BTreeMap<K, V> {\n         BTreeMap::new()\n     }"}, {"sha": "fc2a7f825474d607deaaab737ccb86aced888812", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -674,6 +674,7 @@ impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BTreeSet<T> {\n+    /// Makes an empty `BTreeSet<T>` with a reasonable choice of B.\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()\n     }"}, {"sha": "690c4f4af35896df5b24cb5be112bfbf279b34e4", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -164,6 +164,7 @@ impl<T> LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for LinkedList<T> {\n+    /// Creates an empty `LinkedList<T>`.\n     #[inline]\n     fn default() -> Self {\n         Self::new()"}, {"sha": "773e94f1b414e140fac6a735ff157ef0e00e88b9", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -1567,6 +1567,7 @@ impl_eq! { Cow<'a, str>, String }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for String {\n+    /// Creates an empty `String`.\n     #[inline]\n     fn default() -> String {\n         String::new()"}, {"sha": "f8b4a92df2c5dca5dc25317e7fc6ac23d8a9fb8e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -1652,6 +1652,7 @@ impl<T> Drop for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Vec<T> {\n+    /// Creates an empty `Vec<T>`.\n     fn default() -> Vec<T> {\n         Vec::new()\n     }"}, {"sha": "2e561dabb479451bef0aae4621d8f8243180e219", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -84,6 +84,7 @@ impl<T> Drop for VecDeque<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for VecDeque<T> {\n+    /// Creates an empty `VecDeque<T>`.\n     #[inline]\n     fn default() -> VecDeque<T> {\n         VecDeque::new()"}, {"sha": "51221f1b9b9e94a009b599e6d1d4399cf5b3e192", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -317,6 +317,7 @@ impl<T:Copy> Clone for Cell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default + Copy> Default for Cell<T> {\n+    /// Creates a `Cell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> Cell<T> {\n         Cell::new(Default::default())\n@@ -758,6 +759,7 @@ impl<T: Clone> Clone for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default> Default for RefCell<T> {\n+    /// Creates a `RefCell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> RefCell<T> {\n         RefCell::new(Default::default())\n@@ -1139,6 +1141,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n \n #[stable(feature = \"unsafe_cell_default\", since = \"1.9.0\")]\n impl<T: Default> Default for UnsafeCell<T> {\n+    /// Creates an `UnsafeCell`, with the `Default` value for T.\n     fn default() -> UnsafeCell<T> {\n         UnsafeCell::new(Default::default())\n     }"}, {"sha": "dc53683d6337cd9c2dec11676056c4e3da8f002c", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -333,6 +333,7 @@ impl<S: Sip> Clone for Hasher<S> {\n }\n \n impl<S: Sip> Default for Hasher<S> {\n+    /// Creates a `Hasher<S>` with the two initial keys set to 0.\n     #[inline]\n     fn default() -> Hasher<S> {\n         Hasher::new_with_keys(0, 0)"}, {"sha": "b9fb2dc90c728054c0deb7f786abfc8b69ca5bd9", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -714,6 +714,7 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n+    /// Returns None.\n     #[inline]\n     fn default() -> Option<T> { None }\n }"}, {"sha": "7b147faccd20fbaa16079ef095f77aaeb7d730be", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -755,11 +755,13 @@ impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Default for &'a [T] {\n+    /// Creates an empty slice.\n     fn default() -> &'a [T] { &[] }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n impl<'a, T> Default for &'a mut [T] {\n+    /// Creates a mutable empty slice.\n     fn default() -> &'a mut [T] { &mut [] }\n }\n "}, {"sha": "1f1ae6f12ab457e1d38342fa46854c9184db572d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -1987,5 +1987,6 @@ impl AsRef<[u8]> for str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Default for &'a str {\n+    /// Creates an empty str\n     fn default() -> &'a str { \"\" }\n }"}, {"sha": "f5f37be52de6ec7ea82258933d38cbf62a545507", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -95,6 +95,7 @@ pub struct AtomicBool {\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n+    /// Creates an `AtomicBool` initialised as false.\n     fn default() -> Self {\n         Self::new(false)\n     }\n@@ -117,6 +118,7 @@ pub struct AtomicPtr<T> {\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for AtomicPtr<T> {\n+    /// Creates a null `AtomicPtr<T>`.\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(::ptr::null_mut())\n     }"}, {"sha": "48395c12fafebde6d55cfc315edd9939ce390070", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -113,6 +113,7 @@ impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for ReseedWithDefault {\n+    /// Creates an instance of `ReseedWithDefault`.\n     fn default() -> ReseedWithDefault {\n         ReseedWithDefault\n     }\n@@ -137,6 +138,7 @@ mod tests {\n         }\n     }\n     impl Default for Counter {\n+    /// Constructs a `Counter` with initial value zero.\n         fn default() -> Counter {\n             Counter { i: 0 }\n         }"}, {"sha": "6fec698cfac9b969f3e61ce7644100942c08f10e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -45,6 +45,7 @@ pub struct TargetDataLayout {\n }\n \n impl Default for TargetDataLayout {\n+    /// Creates an instance of `TargetDataLayout`.\n     fn default() -> TargetDataLayout {\n         TargetDataLayout {\n             endian: Endian::Big,"}, {"sha": "ae90c2fac83218c21c27574ec88959d82f4596fd", "filename": "src/librustc_data_structures/fnv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrustc_data_structures%2Ffnv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrustc_data_structures%2Ffnv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffnv.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -35,6 +35,7 @@ pub fn FnvHashSet<V: Hash + Eq>() -> FnvHashSet<V> {\n pub struct FnvHasher(u64);\n \n impl Default for FnvHasher {\n+    /// Creates a `FnvHasher`, with a 64-bit hex initial value.\n     #[inline]\n     fn default() -> FnvHasher {\n         FnvHasher(0xcbf29ce484222325)"}, {"sha": "29add1f9b9d4972b2329426593b0909c43d49002", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -109,6 +109,7 @@ enum SingleImports<'a> {\n }\n \n impl<'a> Default for SingleImports<'a> {\n+    /// Creates a `SingleImports<'a>` of None type.\n     fn default() -> Self {\n         SingleImports::None\n     }"}, {"sha": "eb1653f18cba18001d6ad0628345f3407766bc9e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -1218,6 +1218,7 @@ impl<K, V, S> Default for HashMap<K, V, S>\n     where K: Eq + Hash,\n           S: BuildHasher + Default,\n {\n+    /// Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.\n     fn default() -> HashMap<K, V, S> {\n         HashMap::with_hasher(Default::default())\n     }\n@@ -2026,6 +2027,7 @@ impl Hasher for DefaultHasher {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for RandomState {\n+    /// Constructs a new `RandomState`.\n     #[inline]\n     fn default() -> RandomState {\n         RandomState::new()"}, {"sha": "ff56747fee6af42069f084cffb52be2bf15e26cc", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -665,6 +665,7 @@ impl<T, S> Default for HashSet<T, S>\n     where T: Eq + Hash,\n           S: BuildHasher + Default,\n {\n+    /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n     fn default() -> HashSet<T, S> {\n         HashSet::with_hasher(Default::default())\n     }"}, {"sha": "1c449712e1f7aac8e37424cb1d902f32df5a873f", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -361,6 +361,7 @@ impl<'a> Default for &'a CStr {\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl Default for CString {\n+    /// Creates an empty `CString`.\n     fn default() -> CString {\n         let a: &CStr = Default::default();\n         a.to_owned()"}, {"sha": "d93d3c7362261223d2b678450372b04837c3c9b1", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -170,6 +170,7 @@ impl ops::Deref for OsString {\n \n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n impl Default for OsString {\n+    /// Constructs an empty `OsString`.\n     #[inline]\n     fn default() -> OsString {\n         OsString::new()\n@@ -342,6 +343,7 @@ impl OsStr {\n \n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n impl<'a> Default for &'a OsStr {\n+    /// Creates an empty `OsStr`.\n     #[inline]\n     fn default() -> &'a OsStr {\n         OsStr::new(\"\")"}, {"sha": "3db8b05b954c3dacf4b157a8edc73f9d83118613", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -241,6 +241,7 @@ impl Condvar {\n \n #[stable(feature = \"condvar_default\", since = \"1.9.0\")]\n impl Default for Condvar {\n+    /// Creates a `Condvar` which is ready to be waited on and notified.\n     fn default() -> Condvar {\n         Condvar::new()\n     }"}, {"sha": "098a3e44258c77f2d116826b5dffe71560d355e5", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -287,6 +287,7 @@ impl<T: ?Sized> Drop for Mutex<T> {\n \n #[stable(feature = \"mutex_default\", since = \"1.9.0\")]\n impl<T: ?Sized + Default> Default for Mutex<T> {\n+    /// Creates a `Mutex<T>`, with the `Default` value for T.\n     fn default() -> Mutex<T> {\n         Mutex::new(Default::default())\n     }"}, {"sha": "7f053c6704b56dffb09b5b32bf135fbc07345ef9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -311,6 +311,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n \n #[stable(feature = \"rw_lock_default\", since = \"1.9.0\")]\n impl<T: Default> Default for RwLock<T> {\n+    /// Creates a new `RwLock<T>`, with the `Default` value for T.\n     fn default() -> RwLock<T> {\n         RwLock::new(Default::default())\n     }"}, {"sha": "40c8ba93bd5d92fbf1ef6426ece268379a4daa40", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -362,6 +362,7 @@ impl Generics {\n }\n \n impl Default for Generics {\n+    /// Creates an instance of `Generics`.\n     fn default() ->  Generics {\n         Generics {\n             lifetimes: Vec::new(),"}, {"sha": "5875015893144db01dc58244a4f110a43774ebc9", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a89690ec00ca98397183c3ef011f944448098f8b/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=a89690ec00ca98397183c3ef011f944448098f8b", "patch": "@@ -154,6 +154,7 @@ impl<T> P<[T]> {\n }\n \n impl<T> Default for P<[T]> {\n+    /// Creates an empty `P<[T]>`.\n     fn default() -> P<[T]> {\n         P::new()\n     }"}]}