{"sha": "10ee80c288cc8a2c506f6147f4b33fbec05536b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZWU4MGMyODhjYzhhMmM1MDZmNjE0N2Y0YjMzZmJlYzA1NTM2YjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-14T13:34:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-14T13:34:07Z"}, "message": "Write dummy return value on unimplemented simd_{insert,extract}\n\nFixes #919", "tree": {"sha": "a2466aef692f42e2dece23b2a5ecd32aa8ebaf31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2466aef692f42e2dece23b2a5ecd32aa8ebaf31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ee80c288cc8a2c506f6147f4b33fbec05536b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ee80c288cc8a2c506f6147f4b33fbec05536b0", "html_url": "https://github.com/rust-lang/rust/commit/10ee80c288cc8a2c506f6147f4b33fbec05536b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ee80c288cc8a2c506f6147f4b33fbec05536b0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd8b84a4b8df7c4b0fe4bcb17585e5a147fd5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd8b84a4b8df7c4b0fe4bcb17585e5a147fd5bc", "html_url": "https://github.com/rust-lang/rust/commit/9fd8b84a4b8df7c4b0fe4bcb17585e5a147fd5bc"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "e42309663d05ca3415c469e725526920414cc8c3", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10ee80c288cc8a2c506f6147f4b33fbec05536b0/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee80c288cc8a2c506f6147f4b33fbec05536b0/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=10ee80c288cc8a2c506f6147f4b33fbec05536b0", "patch": "@@ -127,7 +127,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 fx.mir.span,\n                 \"`simd_insert` is not yet implemented. Calling this function will panic.\",\n             );\n-            crate::trap::trap_unimplemented(fx, \"`simd_insert` is not yet implemented\");\n+            let val = crate::trap::trap_unimplemented_ret_value(fx, ret.layout(), \"`simd_insert` is not yet implemented\");\n+            ret.write_cvalue(fx, val);\n         };\n \n         simd_extract, (c v, o idx) {\n@@ -138,7 +139,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.mir.span,\n                     \"`#[rustc_arg_required_const(..)]` is not yet supported. Calling this function will panic.\",\n                 );\n-                crate::trap::trap_unimplemented(fx, \"`#[rustc_arg_required_const(..)]` is not yet supported.\");\n+                let val = crate::trap::trap_unimplemented_ret_value(fx, ret.layout(), \"`#[rustc_arg_required_const(..)]` is not yet supported.\");\n+                ret.write_cvalue(fx, val);\n                 return;\n             };\n "}, {"sha": "a223e6397da6df9338dcda617e3ad76468357fe4", "filename": "src/trap.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10ee80c288cc8a2c506f6147f4b33fbec05536b0/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ee80c288cc8a2c506f6147f4b33fbec05536b0/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=10ee80c288cc8a2c506f6147f4b33fbec05536b0", "patch": "@@ -75,6 +75,18 @@ pub fn trap_unreachable(\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n \n+/// Like `trap_unreachable` but returns a fake value of the specified type.\n+///\n+/// Trap code: user65535\n+pub fn trap_unreachable_ret_value<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n+    dest_layout: TyLayout<'tcx>,\n+    msg: impl AsRef<str>,\n+) -> CValue<'tcx> {\n+    trap_unreachable(fx, msg);\n+    CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout)\n+}\n+\n /// Use this when something is unimplemented, but `libcore` or `libstd` requires it to codegen.\n /// Unlike `trap_unreachable` this will not fill the current block, so you **must** add instructions\n /// to it afterwards.\n@@ -89,10 +101,10 @@ pub fn trap_unimplemented(\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n }\n \n-/// Like `trap_unreachable` but returns a fake value of the specified type.\n+/// Like `trap_unimplemented` but returns a fake value of the specified type.\n ///\n /// Trap code: user65535\n-pub fn trap_unreachable_ret_value<'tcx>(\n+pub fn trap_unimplemented_ret_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n     dest_layout: TyLayout<'tcx>,\n     msg: impl AsRef<str>,"}]}