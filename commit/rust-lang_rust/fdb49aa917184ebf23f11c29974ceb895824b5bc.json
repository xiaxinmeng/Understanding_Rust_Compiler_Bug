{"sha": "fdb49aa917184ebf23f11c29974ceb895824b5bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYjQ5YWE5MTcxODRlYmYyM2YxMWMyOTk3NGNlYjg5NTgyNGI1YmM=", "commit": {"author": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-10-06T19:27:36Z"}, "committer": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-10-07T09:33:50Z"}, "message": "Hide internal stuff in check_match.rs", "tree": {"sha": "4de9c140be617dfb34dfbe9bd13d7ddc4416a072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de9c140be617dfb34dfbe9bd13d7ddc4416a072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb49aa917184ebf23f11c29974ceb895824b5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb49aa917184ebf23f11c29974ceb895824b5bc", "html_url": "https://github.com/rust-lang/rust/commit/fdb49aa917184ebf23f11c29974ceb895824b5bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb49aa917184ebf23f11c29974ceb895824b5bc/comments", "author": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "html_url": "https://github.com/rust-lang/rust/commit/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "e8282368c89d10fb2441919fea175a28497f5f25", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fdb49aa917184ebf23f11c29974ceb895824b5bc/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb49aa917184ebf23f11c29974ceb895824b5bc/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=fdb49aa917184ebf23f11c29974ceb895824b5bc", "patch": "@@ -28,7 +28,7 @@ use syntax::codemap::{Span, dummy_sp, Spanned};\n use syntax::visit;\n use syntax::visit::{Visitor,fn_kind};\n \n-pub struct MatchCheckCtxt {\n+struct MatchCheckCtxt {\n     tcx: ty::ctxt,\n     method_map: method_map,\n     moves_map: moves::MovesMap\n@@ -64,7 +64,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     tcx.sess.abort_if_errors();\n }\n \n-pub fn check_expr(v: &mut CheckMatchVisitor,\n+fn check_expr(v: &mut CheckMatchVisitor,\n                   cx: @MatchCheckCtxt,\n                   ex: @Expr,\n                   s: ()) {\n@@ -115,7 +115,7 @@ pub fn check_expr(v: &mut CheckMatchVisitor,\n }\n \n // Check for unreachable patterns\n-pub fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n+fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n     let mut seen = ~[];\n     for arm in arms.iter() {\n         for pat in arm.pats.iter() {\n@@ -154,14 +154,14 @@ pub fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n     }\n }\n \n-pub fn raw_pat(p: @Pat) -> @Pat {\n+fn raw_pat(p: @Pat) -> @Pat {\n     match p.node {\n       PatIdent(_, _, Some(s)) => { raw_pat(s) }\n       _ => { p }\n     }\n }\n \n-pub fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n+fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n     assert!((!pats.is_empty()));\n     let ext = match is_useful(cx, &pats.map(|p| ~[*p]), [wild()]) {\n         not_useful => {\n@@ -209,12 +209,12 @@ pub fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n     cx.tcx.sess.span_err(sp, msg);\n }\n \n-pub type matrix = ~[~[@Pat]];\n+type matrix = ~[~[@Pat]];\n \n-pub enum useful { useful(ty::t, ctor), useful_, not_useful }\n+enum useful { useful(ty::t, ctor), useful_, not_useful }\n \n #[deriving(Eq)]\n-pub enum ctor {\n+enum ctor {\n     single,\n     variant(DefId),\n     val(const_val),\n@@ -235,7 +235,7 @@ pub enum ctor {\n \n // Note: is_useful doesn't work on empty types, as the paper notes.\n // So it assumes that v is non-empty.\n-pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n+fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n     if m.len() == 0u { return useful_; }\n     if m[0].len() == 0u { return not_useful; }\n     let real_pat = match m.iter().find(|r| r[0].id != 0) {\n@@ -314,7 +314,7 @@ pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n     }\n }\n \n-pub fn is_useful_specialized(cx: &MatchCheckCtxt,\n+fn is_useful_specialized(cx: &MatchCheckCtxt,\n                              m: &matrix,\n                              v: &[@Pat],\n                              ctor: ctor,\n@@ -330,7 +330,7 @@ pub fn is_useful_specialized(cx: &MatchCheckCtxt,\n     }\n }\n \n-pub fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n+fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n     let pat = raw_pat(p);\n     match pat.node {\n       PatWild => { None }\n@@ -366,7 +366,7 @@ pub fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n     }\n }\n \n-pub fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n+fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n     let pat = raw_pat(p);\n     match pat.node {\n       PatWild => { true }\n@@ -380,7 +380,7 @@ pub fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n     }\n }\n \n-pub fn missing_ctor(cx: &MatchCheckCtxt,\n+fn missing_ctor(cx: &MatchCheckCtxt,\n                     m: &matrix,\n                     left_ty: ty::t)\n                  -> Option<ctor> {\n@@ -505,7 +505,7 @@ pub fn missing_ctor(cx: &MatchCheckCtxt,\n     }\n }\n \n-pub fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n+fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n     match ty::get(ty).sty {\n       ty::ty_tup(ref fs) => fs.len(),\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) => 1u,\n@@ -528,11 +528,11 @@ pub fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n     }\n }\n \n-pub fn wild() -> @Pat {\n+fn wild() -> @Pat {\n     @Pat {id: 0, node: PatWild, span: dummy_sp()}\n }\n \n-pub fn specialize(cx: &MatchCheckCtxt,\n+fn specialize(cx: &MatchCheckCtxt,\n                   r: &[@Pat],\n                   ctor_id: &ctor,\n                   arity: uint,\n@@ -798,12 +798,12 @@ pub fn specialize(cx: &MatchCheckCtxt,\n     }\n }\n \n-pub fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<~[@Pat]> {\n+fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<~[@Pat]> {\n     if is_wild(cx, r[0]) { Some(r.tail().to_owned()) }\n     else { None }\n }\n \n-pub fn check_local(v: &mut CheckMatchVisitor,\n+fn check_local(v: &mut CheckMatchVisitor,\n                    cx: &MatchCheckCtxt,\n                    loc: @Local,\n                    s: ()) {\n@@ -817,7 +817,7 @@ pub fn check_local(v: &mut CheckMatchVisitor,\n     check_legality_of_move_bindings(cx, false, [ loc.pat ]);\n }\n \n-pub fn check_fn(v: &mut CheckMatchVisitor,\n+fn check_fn(v: &mut CheckMatchVisitor,\n                 cx: &MatchCheckCtxt,\n                 kind: &visit::fn_kind,\n                 decl: &fn_decl,\n@@ -834,7 +834,7 @@ pub fn check_fn(v: &mut CheckMatchVisitor,\n     }\n }\n \n-pub fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n+fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n     match cx.tcx.def_map.find(&pat.id) {\n       Some(&DefVariant(enum_id, _, _)) => {\n         if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n@@ -872,7 +872,7 @@ pub fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n \n // Legality of move bindings checking\n \n-pub fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n+fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                                        has_guard: bool,\n                                        pats: &[@Pat]) {\n     let tcx = cx.tcx;"}]}