{"sha": "c1c4cd57b3dbf8d151f0067994e5e120d4833f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzRjZDU3YjNkYmY4ZDE1MWYwMDY3OTk0ZTVlMTIwZDQ4MzNmNmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-19T22:19:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-19T22:19:02Z"}, "message": "Rollup merge of #85315 - satylogin:master, r=yaahc\n\nadding time complexity for partition_in_place iter method\n\nI feel that one thing missing from rust docs compared to cpp references is existence of time complexity for all methods and functions. While it would be humongous task to include it for everything in single go, it is still doable if we as community keep on adding it in relevant places as and when we find them.\n\nThis PR adds the time complexity for partition_in_place method in iter.", "tree": {"sha": "82566a4b544af7c335df972442481ef82653db8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82566a4b544af7c335df972442481ef82653db8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c4cd57b3dbf8d151f0067994e5e120d4833f6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpY7YCRBK7hj4Ov3rIwAA9ecIABYTCSnYwfkoMAtPGuV7es80\n9nR8CUqgJiBDS7TKD611Ae+TZd3y4eWgGoYXAQPgnUYMYAL5Lb98Nf/YMzsjK8Zd\nmIzVEtJICbTU9WT4j659zlzrStGSF/xBEp8CEkPNnrrTYLTF7LCO8xnmnijekiyb\nMvM0BJcI7nbIYsbQ9ehcWjhqykpurNAQWboeGXzJXIasJ+uni21FyuUcI2F2C3tp\nIjlX4bqJeWFxrqZd9O8C8dxVR3bTfKKQ36rAcdm3+wVbWCEJ491xCU4dgCJy9vG8\nSxWhM7Mo12qrL2aec0hjH5lv+X4tBO9tOCZYrGhB7gLpd9mpaHHekQVMmAULoCw=\n=zxI9\n-----END PGP SIGNATURE-----\n", "payload": "tree 82566a4b544af7c335df972442481ef82653db8f\nparent a552b5b04bcd546d788798a3bd94ded2dbba048e\nparent 85e417718403cc0a8b058585fb8633b4698ea3e2\nauthor Ralf Jung <post@ralfj.de> 1621462742 +0200\ncommitter GitHub <noreply@github.com> 1621462742 +0200\n\nRollup merge of #85315 - satylogin:master, r=yaahc\n\nadding time complexity for partition_in_place iter method\n\nI feel that one thing missing from rust docs compared to cpp references is existence of time complexity for all methods and functions. While it would be humongous task to include it for everything in single go, it is still doable if we as community keep on adding it in relevant places as and when we find them.\n\nThis PR adds the time complexity for partition_in_place method in iter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c4cd57b3dbf8d151f0067994e5e120d4833f6d", "html_url": "https://github.com/rust-lang/rust/commit/c1c4cd57b3dbf8d151f0067994e5e120d4833f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c4cd57b3dbf8d151f0067994e5e120d4833f6d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a552b5b04bcd546d788798a3bd94ded2dbba048e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a552b5b04bcd546d788798a3bd94ded2dbba048e", "html_url": "https://github.com/rust-lang/rust/commit/a552b5b04bcd546d788798a3bd94ded2dbba048e"}, {"sha": "85e417718403cc0a8b058585fb8633b4698ea3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e417718403cc0a8b058585fb8633b4698ea3e2", "html_url": "https://github.com/rust-lang/rust/commit/85e417718403cc0a8b058585fb8633b4698ea3e2"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "c2e280ff07d1990a64b2d4255060a5b36255adea", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1c4cd57b3dbf8d151f0067994e5e120d4833f6d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c4cd57b3dbf8d151f0067994e5e120d4833f6d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c1c4cd57b3dbf8d151f0067994e5e120d4833f6d", "patch": "@@ -1849,6 +1849,12 @@ pub trait Iterator {\n     ///\n     /// The relative order of partitioned items is not maintained.\n     ///\n+    /// # Current implementation\n+    /// Current algorithms tries finding the first element for which the predicate evaluates\n+    /// to false, and the last element for which it evaluates to true and repeatedly swaps them.\n+    ///\n+    /// Time Complexity: *O*(*N*)\n+    ///\n     /// See also [`is_partitioned()`] and [`partition()`].\n     ///\n     /// [`is_partitioned()`]: Iterator::is_partitioned"}]}