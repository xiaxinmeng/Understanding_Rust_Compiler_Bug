{"sha": "1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMzdlODNkYzA1YTdjMzU5ZWJiODgxODhiMGEyMTc5YThlYzkwNjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-31T03:34:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-31T03:34:22Z"}, "message": "Auto merge of #88414 - Aaron1011:guess-foreign-head-span, r=estebank\n\nDon't use `guess_head_span` in `predicates_of` for foreign span\n\nPreviously, the result of `predicates_of` for a foreign trait\nwould depend on the *current* state of the corresponding source\nfile in the foreign crate. This could lead to ICEs during incremental\ncompilation, since the on-disk contents of the upstream source file\ncould potentially change without the upstream crate being recompiled.\n\nAdditionally, this ensure that that the metadata we produce for a crate\nonly depends on its *compiled* upstream dependencies (e.g an rlib or\nrmeta file), *not* the current on-disk state of the upstream crate\nsource files.", "tree": {"sha": "38f3cf59508321f9ab3bc71268a8b8a9fd992a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f3cf59508321f9ab3bc71268a8b8a9fd992a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "html_url": "https://github.com/rust-lang/rust/commit/1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ea5e0ee948999a916ff5f3d78ed79716d1006b", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ea5e0ee948999a916ff5f3d78ed79716d1006b", "html_url": "https://github.com/rust-lang/rust/commit/56ea5e0ee948999a916ff5f3d78ed79716d1006b"}, {"sha": "c9157efad6e3e7b1802a2c4f5122140e1752985d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9157efad6e3e7b1802a2c4f5122140e1752985d", "html_url": "https://github.com/rust-lang/rust/commit/c9157efad6e3e7b1802a2c4f5122140e1752985d"}], "stats": {"total": 112, "additions": 97, "deletions": 15}, "files": [{"sha": "c2de5ed2f5838dc5d58f2a4e3b766f6e300d75fa", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -567,6 +567,17 @@ impl SourceMap {\n         }\n     }\n \n+    /// Returns whether or not this span points into a file\n+    /// in the current crate. This may be `false` for spans\n+    /// produced by a macro expansion, or for spans associated\n+    /// with the definition of an item in a foreign crate\n+    pub fn is_local_span(&self, sp: Span) -> bool {\n+        let local_begin = self.lookup_byte_offset(sp.lo());\n+        let local_end = self.lookup_byte_offset(sp.hi());\n+        // This might be a weird span that covers multiple files\n+        local_begin.sf.src.is_some() && local_end.sf.src.is_some()\n+    }\n+\n     /// Returns the source snippet as `String` corresponding to the given `Span`.\n     pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, end_index| {"}, {"sha": "64120510e5624a5c7fbed86eb89d7250d790d4e4", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -2002,7 +2002,16 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n         // prove that the trait applies to the types that were\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n-        let span = tcx.sess.source_map().guess_head_span(tcx.def_span(def_id));\n+        let mut span = tcx.def_span(def_id);\n+        if tcx.sess.source_map().is_local_span(span) {\n+            // `guess_head_span` reads the actual source file from\n+            // disk to try to determine the 'head' snippet of the span.\n+            // Don't do this for a span that comes from a file outside\n+            // of our crate, since this would make our query output\n+            // (and overall crate metadata) dependent on the\n+            // *current* state of an external file.\n+            span = tcx.sess.source_map().guess_head_span(span);\n+        }\n         result.predicates =\n             tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n                 ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(tcx),"}, {"sha": "712965eaa883af043370b01940ffbb8dc1fef6e2", "filename": "src/test/run-make/incr-foreign-head-span/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2FMakefile?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -0,0 +1,21 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-none no-std is not supported\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for 'std'\n+\n+# Ensure that modifying a crate on disk (without recompiling it)\n+# does not cause ICEs in downstream crates.\n+# Previously, we would call `SourceMap.guess_head_span` on a span\n+# from an external crate, which would cause us to read an upstream\n+# source file from disk during compilation of a downstream crate\n+# See #86480 for more details\n+\n+INCR=$(TMPDIR)/incr\n+\n+all:\n+\tcp first_crate.rs second_crate.rs $(TMPDIR)\n+\t$(RUSTC) $(TMPDIR)/first_crate.rs  -C incremental=$(INCR) --target $(TARGET) --crate-type lib\n+\t$(RUSTC) $(TMPDIR)/second_crate.rs -C incremental=$(INCR) --target $(TARGET)  --extern first-crate=$(TMPDIR) --crate-type lib\n+\trm $(TMPDIR)/first_crate.rs\n+\t$(RUSTC) $(TMPDIR)/second_crate.rs  -C incremental=$(INCR) --target $(TARGET) --cfg second_run --crate-type lib\n+"}, {"sha": "69dd103bfc02b0d37bc85b3f4883eceec38a94fb", "filename": "src/test/run-make/incr-foreign-head-span/first_crate.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2Ffirst_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2Ffirst_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2Ffirst_crate.rs?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -0,0 +1 @@\n+pub trait OtherTrait {}"}, {"sha": "102f6b26c8d7574201e0095b5902f90480b5d210", "filename": "src/test/run-make/incr-foreign-head-span/second_crate.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2Fsecond_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2Fsecond_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fincr-foreign-head-span%2Fsecond_crate.rs?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -0,0 +1,8 @@\n+extern crate first_crate;\n+use first_crate::OtherTrait;\n+\n+#[cfg(not(second_run))]\n+trait Foo: OtherTrait {}\n+\n+#[cfg(second_run)]\n+trait Bar: OtherTrait {}"}, {"sha": "57aacf67e05fd8919da971f76449af18101c69f4", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -8,8 +8,10 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n note: required by a bound in `Send`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n-LL | pub unsafe auto trait Send {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Send`\n+LL | / pub unsafe auto trait Send {\n+LL | |     // empty.\n+LL | | }\n+   | |_^ required by this bound in `Send`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n@@ -25,8 +27,14 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n note: required by a bound in `Iterator`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n-LL | pub trait Iterator {\n-   | ^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator`\n+LL | / pub trait Iterator {\n+LL | |     /// The type of the elements being iterated over.\n+LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+LL | |     type Item;\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^ required by this bound in `Iterator`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n@@ -42,8 +50,14 @@ LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8\n note: required by a bound in `Sync`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n-LL | pub unsafe auto trait Sync {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Sync`\n+LL | / pub unsafe auto trait Sync {\n+LL | |     // FIXME(estebank): once support to add notes in `rustc_on_unimplemented`\n+LL | |     // lands in beta, and it has been extended to check whether a closure is\n+LL | |     // anywhere in the requirement chain, extend it as such (#48534):\n+...  |\n+LL | |     // Empty\n+LL | | }\n+   | |_^ required by this bound in `Sync`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Sync {"}, {"sha": "4da5a2cbd41a6b588bc35a07ef146de7a68b874a", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -8,8 +8,14 @@ LL |     type A: Iterator<Item: Debug>;\n note: required by a bound in `Debug`\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n-LL | pub trait Debug {\n-   | ^^^^^^^^^^^^^^^ required by this bound in `Debug`\n+LL | / pub trait Debug {\n+LL | |     /// Formats the value using the given formatter.\n+LL | |     ///\n+LL | |     /// # Examples\n+...  |\n+LL | |     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+LL | | }\n+   | |_^ required by this bound in `Debug`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::A as Iterator>::Item: Debug {\n@@ -24,8 +30,14 @@ LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n note: required by a bound in `Default`\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n    |\n-LL | pub trait Default: Sized {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Default`\n+LL | / pub trait Default: Sized {\n+LL | |     /// Returns the \"default value\" for a type.\n+LL | |     ///\n+LL | |     /// Default values are often some kind of initial value, identity value, or anything else that\n+...  |\n+LL | |     fn default() -> Self;\n+LL | | }\n+   | |_^ required by this bound in `Default`\n help: consider further restricting the associated type\n    |\n LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: Default { type Out: Baz<Assoc: Default>; }"}, {"sha": "8df5fbcc7eba290e17c5d8c0f20ab15f3a6de60d", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -142,8 +142,10 @@ LL |     type A: Iterator<Item: Copy>;\n note: required by a bound in `Copy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n-LL | pub trait Copy: Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Copy`\n+LL | / pub trait Copy: Clone {\n+LL | |     // Empty.\n+LL | | }\n+   | |_^ required by this bound in `Copy`\n help: consider further restricting the associated type\n    |\n LL | trait _Tr3 where <<Self as _Tr3>::A as Iterator>::Item: Copy {"}, {"sha": "1f81fa72547df3e32df878ca6aa03c6be8ce2791", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e37e83dc05a7c359ebb88188b0a2179a8ec9067/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=1e37e83dc05a7c359ebb88188b0a2179a8ec9067", "patch": "@@ -8,8 +8,12 @@ LL |     T: FnMut(&'a ()),\n note: required by a bound in `FnMut`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait FnMut<Args>: FnOnce<Args> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `FnMut`\n+LL | / pub trait FnMut<Args>: FnOnce<Args> {\n+LL | |     /// Performs the call operation.\n+LL | |     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+LL | |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+LL | | }\n+   | |_^ required by this bound in `FnMut`\n \n error: aborting due to previous error\n "}]}