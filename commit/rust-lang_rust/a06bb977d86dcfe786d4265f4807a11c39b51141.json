{"sha": "a06bb977d86dcfe786d4265f4807a11c39b51141", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNmJiOTc3ZDg2ZGNmZTc4NmQ0MjY1ZjQ4MDdhMTFjMzliNTExNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T07:35:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T07:35:10Z"}, "message": "Auto merge of #30458 - fhahn:fix-warnings-tests-stdlib, r=sanxiyn\n\nThis PR siliences some warnings when compiling stdlib with --test. Mostly remove some unused imports and added a few `#[allow(..)]`.\n\nI also marked some signal handling functions with `#[cfg(not(test))]`, because they are only called through `rt::lang_start`, which is also marked as  `#[cfg(not(test))]`", "tree": {"sha": "27a2b4e75bd918cbe2276a3e9a26eac34825e72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a2b4e75bd918cbe2276a3e9a26eac34825e72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06bb977d86dcfe786d4265f4807a11c39b51141", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06bb977d86dcfe786d4265f4807a11c39b51141", "html_url": "https://github.com/rust-lang/rust/commit/a06bb977d86dcfe786d4265f4807a11c39b51141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06bb977d86dcfe786d4265f4807a11c39b51141/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2a64b57a74f35bef215972adf1b803cff288bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2a64b57a74f35bef215972adf1b803cff288bd", "html_url": "https://github.com/rust-lang/rust/commit/6e2a64b57a74f35bef215972adf1b803cff288bd"}, {"sha": "e27cbeff370897b8450caa204c08049651a10c13", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27cbeff370897b8450caa204c08049651a10c13", "html_url": "https://github.com/rust-lang/rust/commit/e27cbeff370897b8450caa204c08049651a10c13"}], "stats": {"total": 156, "additions": 81, "deletions": 75}, "files": [{"sha": "41001153c3cc47e7de8c0036b9cc873a87e83435", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -132,6 +132,7 @@ mod tests {\n     #[cfg_attr(any(windows,\n                    target_os = \"android\",  // FIXME #10379\n                    target_env = \"musl\"), ignore)]\n+    #[allow(deprecated)]\n     fn test_loading_cosine() {\n         // The math library does not need to be loaded since it is already\n         // statically linked in\n@@ -164,6 +165,7 @@ mod tests {\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"openbsd\"))]\n+    #[allow(deprecated)]\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash."}, {"sha": "66e4c6013a45ce949fe4c0b6aac0266bcd418083", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -1281,7 +1281,6 @@ mod tests {\n     use io::{ErrorKind, SeekFrom};\n     use path::PathBuf;\n     use path::Path as Path2;\n-    use os;\n     use rand::{self, StdRng, Rng};\n     use str;\n \n@@ -1410,8 +1409,8 @@ mod tests {\n         let message = \"ten-four\";\n         let mut read_mem = [0; 4];\n         let set_cursor = 4 as u64;\n-        let mut tell_pos_pre_read;\n-        let mut tell_pos_post_read;\n+        let tell_pos_pre_read;\n+        let tell_pos_post_read;\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seeking.txt\");\n         {"}, {"sha": "16ce05ef2dcaf72497b171796eda90357dc1b624", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -791,7 +791,7 @@ impl<W: Read + Write> Read for InternalBufWriter<W> {\n mod tests {\n     use prelude::v1::*;\n     use io::prelude::*;\n-    use io::{self, BufReader, BufWriter, Cursor, LineWriter, SeekFrom};\n+    use io::{self, BufReader, BufWriter, LineWriter, SeekFrom};\n     use test;\n \n     /// A dummy reader intended at testing short-reads propagation."}, {"sha": "e3f17c839f135be9c4ef4c26848f9bde3d89a071", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -377,7 +377,7 @@ mod test {\n         struct TestError;\n \n         impl fmt::Display for TestError {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n                 Ok(())\n             }\n         }"}, {"sha": "2ad45e80dd153e68e82cf9769bcba032b4e2d130", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -1983,7 +1983,7 @@ mod tests {\n         b.iter(|| {\n             let mut lr = repeat(1).take(10000000);\n             let mut vec = Vec::with_capacity(1024);\n-            super::read_to_end(&mut lr, &mut vec);\n+            super::read_to_end(&mut lr, &mut vec)\n         });\n     }\n }"}, {"sha": "e05a0d577ff895b6c366c5c7f8d577c7e56d8e8b", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -199,6 +199,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn tee() {\n         let mut buf = [0; 10];\n         {\n@@ -209,6 +210,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn broadcast() {\n         let mut buf1 = [0; 10];\n         let mut buf2 = [0; 10];"}, {"sha": "74d308dbf0cf5b117890ef55dc5a70cebe36345f", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -468,9 +468,7 @@ impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n-    use io;\n     use net::*;\n-    use net::Ipv6MulticastScope::*;\n     use net::test::{tsa, sa6, sa4};\n \n     #[test]"}, {"sha": "808cf5cc031be7604ace9967acb8d74e9666a670", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -527,7 +527,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n-    use io;\n     use net::*;\n     use net::Ipv6MulticastScope::*;\n     use net::test::{tsa, sa6, sa4};"}, {"sha": "f9c38c38458475661a87e298266849114991d7e7", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -319,7 +319,7 @@ mod tests {\n     use net::test::{next_test_ip4, next_test_ip6};\n     use sync::mpsc::channel;\n     use sys_common::AsInner;\n-    use time::Duration;\n+    use time::{Instant, Duration};\n     use thread;\n \n     fn each_ip(f: &mut FnMut(SocketAddr)) {\n@@ -929,6 +929,7 @@ mod tests {\n \n         t!(stream.set_write_timeout(None));\n         assert_eq!(None, t!(stream.write_timeout()));\n+        drop(listener);\n     }\n \n     #[test]\n@@ -940,11 +941,11 @@ mod tests {\n         t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         let mut buf = [0; 10];\n-        let wait = Duration::span(|| {\n-            let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n-            assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n-        });\n-        assert!(wait > Duration::from_millis(400));\n+        let start = Instant::now();\n+        let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        assert!(start.elapsed() > Duration::from_millis(400));\n+        drop(listener);\n     }\n \n     #[test]\n@@ -962,10 +963,10 @@ mod tests {\n         t!(stream.read(&mut buf));\n         assert_eq!(b\"hello world\", &buf[..]);\n \n-        let wait = Duration::span(|| {\n-            let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n-            assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n-        });\n-        assert!(wait > Duration::from_millis(400));\n+        let start = Instant::now();\n+        let kind = stream.read(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        assert!(start.elapsed() > Duration::from_millis(400));\n+        drop(listener);\n     }\n }"}, {"sha": "8c7eb4515808463f0a2208beb31107e19f60bd65", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -169,7 +169,7 @@ mod tests {\n     use net::test::{next_test_ip4, next_test_ip6};\n     use sync::mpsc::channel;\n     use sys_common::AsInner;\n-    use time::Duration;\n+    use time::{Instant, Duration};\n     use thread;\n \n     fn each_ip(f: &mut FnMut(SocketAddr, SocketAddr)) {\n@@ -370,22 +370,22 @@ mod tests {\n     fn test_read_timeout() {\n         let addr = next_test_ip4();\n \n-        let mut stream = t!(UdpSocket::bind(&addr));\n+        let stream = t!(UdpSocket::bind(&addr));\n         t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         let mut buf = [0; 10];\n-        let wait = Duration::span(|| {\n-            let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n-            assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n-        });\n-        assert!(wait > Duration::from_millis(400));\n+\n+        let start = Instant::now();\n+        let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        assert!(start.elapsed() > Duration::from_millis(400));\n     }\n \n     #[test]\n     fn test_read_with_timeout() {\n         let addr = next_test_ip4();\n \n-        let mut stream = t!(UdpSocket::bind(&addr));\n+        let stream = t!(UdpSocket::bind(&addr));\n         t!(stream.set_read_timeout(Some(Duration::from_millis(1000))));\n \n         t!(stream.send_to(b\"hello world\", &addr));\n@@ -394,10 +394,9 @@ mod tests {\n         t!(stream.recv_from(&mut buf));\n         assert_eq!(b\"hello world\", &buf[..]);\n \n-        let wait = Duration::span(|| {\n-            let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n-            assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n-        });\n-        assert!(wait > Duration::from_millis(400));\n+        let start = Instant::now();\n+        let kind = stream.recv_from(&mut buf).err().expect(\"expected error\").kind();\n+        assert!(kind == ErrorKind::WouldBlock || kind == ErrorKind::TimedOut);\n+        assert!(start.elapsed() > Duration::from_millis(400));\n     }\n }"}, {"sha": "1cd258a5a728b46bd9042a8556a490f0a211bd4c", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -15,11 +15,16 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n+#[cfg(not(test))]\n use core::num;\n+#[cfg(not(test))]\n use intrinsics;\n+#[cfg(not(test))]\n use libc::c_int;\n+#[cfg(not(test))]\n use num::FpCategory;\n \n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b6a85ee0e9f586d017ede8f78a48d660af2314bb", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -15,9 +15,13 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n+#[cfg(not(test))]\n use core::num;\n+#[cfg(not(test))]\n use intrinsics;\n+#[cfg(not(test))]\n use libc::c_int;\n+#[cfg(not(test))]\n use num::FpCategory;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "faaff494cab51133329e52d3bf99d1162e8ecf23", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -47,11 +47,6 @@ pub fn test_num<T>(ten: T, two: T) where\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use i8;\n-    use i16;\n-    use i32;\n-    use i64;\n-    use isize;\n     use u8;\n     use u16;\n     use u32;"}, {"sha": "3bc063f4269206eef6cf7e3a4217f5b6e46d9e3c", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -88,7 +88,8 @@ mod tests {\n             c_longlong c_ulonglong c_float c_double);\n     }\n \n-    #[cfg(unix)]\n+    #[cfg(all(unix, not(target_os = \"android\")))]\n+    #[test]\n     fn unix() {\n         {\n             use os::unix::raw;\n@@ -101,6 +102,7 @@ mod tests {\n     }\n \n     #[cfg(windows)]\n+    #[test]\n     fn windows() {\n         use os::windows::raw;\n     }"}, {"sha": "0ba0e01ce29102d03968deb06915a4ac07b2a5cb", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -377,8 +377,6 @@ mod imp {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::mpsc::channel;\n     use rand::Rng;\n     use super::OsRng;"}, {"sha": "08bc809ed4d4632ac29dc8f5422487ce2dacfa1a", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -63,8 +63,6 @@ impl<R: Read> Rng for ReaderRng<R> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use super::ReaderRng;\n     use rand::Rng;\n "}, {"sha": "fcd827e2a8b722e9b4e18d17299d90cf12192ee0", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -22,13 +22,7 @@\n             issue = \"0\")]\n #![doc(hidden)]\n \n-use borrow::ToOwned;\n-use mem;\n-use panic;\n-use sys;\n-use sys_common::thread_info::{self, NewThread};\n-use sys_common;\n-use thread::Thread;\n+\n \n // Reexport some of our utilities which are expected by other crates.\n pub use sys_common::unwind::{begin_unwind, begin_unwind_fmt};\n@@ -41,6 +35,14 @@ pub use sys_common::unwind::imp::eh_frame_registry::*;\n #[cfg(not(test))]\n #[lang = \"start\"]\n fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n+    use borrow::ToOwned;\n+    use mem;\n+    use panic;\n+    use sys;\n+    use sys_common;\n+    use sys_common::thread_info::{self, NewThread};\n+    use thread::Thread;\n+\n     sys::init();\n \n     let failed = unsafe {"}, {"sha": "1f7fe820bf86a37c7edd5dbdd240afabce4df954", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -510,15 +510,15 @@ mod tests {\n         static M: StaticMutex = StaticMutex::new();\n \n         let g = M.lock().unwrap();\n-        let (g, _no_timeout) = C.wait_timeout_ms(g, 1).unwrap();\n+        let (g, _no_timeout) = C.wait_timeout(g, Duration::from_millis(1)).unwrap();\n         // spurious wakeups mean this isn't necessarily true\n         // assert!(!no_timeout);\n         let _t = thread::spawn(move || {\n             let _g = M.lock().unwrap();\n             C.notify_one();\n         });\n-        let (g, no_timeout) = C.wait_timeout_ms(g, u32::MAX).unwrap();\n-        assert!(no_timeout);\n+        let (g, timeout_res) = C.wait_timeout(g, Duration::from_millis(u32::MAX as u64)).unwrap();\n+        assert!(!timeout_res.timed_out());\n         drop(g);\n         unsafe { C.destroy(); M.destroy(); }\n     }"}, {"sha": "9f2f0df3a64705577537e4eaf90e7249924baa13", "filename": "src/libstd/sys/common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -133,7 +133,7 @@ mod tests {\n         b.iter(|| {\n             let mut lr = repeat(1).take(10000000);\n             let mut vec = Vec::with_capacity(1024);\n-            unsafe { read_to_end_uninitialized(&mut lr, &mut vec) };\n+            unsafe { read_to_end_uninitialized(&mut lr, &mut vec) }\n         });\n     }\n }"}, {"sha": "31caa68c4b7ea70bcd89871e305a68076738eebf", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -167,7 +167,6 @@ mod tests {\n     use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n     use cell::RefCell;\n     use sync::Arc;\n-    use boxed;\n     use thread;\n \n     #[test]\n@@ -208,13 +207,13 @@ mod tests {\n     fn trylock_works() {\n         let m = Arc::new(ReentrantMutex::new(()));\n         let m2 = m.clone();\n-        let lock = m.try_lock().unwrap();\n-        let lock2 = m.try_lock().unwrap();\n+        let _lock = m.try_lock().unwrap();\n+        let _lock2 = m.try_lock().unwrap();\n         thread::spawn(move || {\n             let lock = m2.try_lock();\n             assert!(lock.is_err());\n         }).join().unwrap();\n-        let lock3 = m.try_lock().unwrap();\n+        let _lock3 = m.try_lock().unwrap();\n     }\n \n     pub struct Answer<'a>(pub ReentrantMutexGuard<'a, RefCell<u32>>);\n@@ -233,9 +232,8 @@ mod tests {\n             *lock.borrow_mut() = 1;\n             let lock2 = mc.lock().unwrap();\n             *lock.borrow_mut() = 2;\n-            let answer = Answer(lock2);\n+            let _answer = Answer(lock2);\n             panic!(\"What the answer to my lifetimes dilemma is?\");\n-            drop(answer);\n         }).join();\n         assert!(result.is_err());\n         let r = m.lock().err().unwrap().into_inner();"}, {"sha": "bc997af3a27e46ae2e8edd61d0b74876652bac28", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -1067,7 +1067,7 @@ mod tests {\n     #[test]\n     fn wtf8buf_show_str() {\n         let text = \"a\\t\u00e9 \ud83d\udca9\\r\";\n-        let mut string = Wtf8Buf::from_str(text);\n+        let string = Wtf8Buf::from_str(text);\n         assert_eq!(format!(\"{:?}\", text), format!(\"{:?}\", string));\n     }\n "}, {"sha": "929fd2fb0c38b8a0c3dc146d634c1fb63e5b396f", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -45,7 +45,7 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n-#[cfg(not(target_os = \"nacl\"))]\n+#[cfg(not(any(target_os = \"nacl\", test)))]\n pub fn init() {\n     use libc::signal;\n     // By default, some platforms will send a *signal* when an EPIPE error\n@@ -59,7 +59,8 @@ pub fn init() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n     }\n }\n-#[cfg(target_os = \"nacl\")]\n+\n+#[cfg(all(target_os = \"nacl\", not(test)))]\n pub fn init() { }\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {"}, {"sha": "495f45f5c7e224346f26e0ac06ead4b70738aad1", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -462,8 +462,7 @@ mod tests {\n     use mem;\n     use ptr;\n     use libc;\n-    use slice;\n-    use sys::{self, cvt, pipe};\n+    use sys::{self, cvt};\n \n     macro_rules! t {\n         ($e:expr) => {\n@@ -482,6 +481,8 @@ mod tests {\n \n     #[cfg(target_os = \"android\")]\n     unsafe fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int {\n+        use slice;\n+\n         let raw = slice::from_raw_parts_mut(set as *mut u8, mem::size_of::<libc::sigset_t>());\n         let bit = (signum - 1) as usize;\n         raw[bit / 8] |= 1 << (bit % 8);"}, {"sha": "776acd20b069bbc0598eb417c4f10dd78d1d6ca6", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -7,11 +7,13 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![cfg_attr(test, allow(dead_code))]\n \n use libc;\n use self::imp::{make_handler, drop_handler};\n \n-pub use self::imp::{init, cleanup};\n+pub use self::imp::cleanup;\n+pub use self::imp::init;\n \n pub struct Handler {\n     _data: *mut libc::c_void\n@@ -40,12 +42,11 @@ impl Drop for Handler {\n           target_os = \"openbsd\"))]\n mod imp {\n     use super::Handler;\n-    use sys_common::util::report_overflow;\n     use mem;\n     use ptr;\n+    use libc::{sigaltstack, SIGSTKSZ};\n     use libc::{sigaction, SIGBUS, SIG_DFL,\n-               SA_SIGINFO, SA_ONSTACK, sigaltstack,\n-               SIGSTKSZ, sighandler_t};\n+               SA_SIGINFO, SA_ONSTACK, sighandler_t};\n     use libc;\n     use libc::{mmap, munmap};\n     use libc::{SIGSEGV, PROT_READ, PROT_WRITE, MAP_PRIVATE, MAP_ANON};\n@@ -94,6 +95,8 @@ mod imp {\n     unsafe extern fn signal_handler(signum: libc::c_int,\n                                     info: *mut libc::siginfo_t,\n                                     _data: *mut libc::c_void) {\n+        use sys_common::util::report_overflow;\n+\n         let guard = thread_info::stack_guard().unwrap_or(0);\n         let addr = siginfo_si_addr(info) as usize;\n "}, {"sha": "116cd5da2ce7b273a4cfc8ad07d0154e43b84dc0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -830,14 +830,14 @@ mod tests {\n     fn test_park_timeout_unpark_before() {\n         for _ in 0..10 {\n             thread::current().unpark();\n-            thread::park_timeout_ms(u32::MAX);\n+            thread::park_timeout(Duration::from_millis(u32::MAX as u64));\n         }\n     }\n \n     #[test]\n     fn test_park_timeout_unpark_not_called() {\n         for _ in 0..10 {\n-            thread::park_timeout_ms(10);\n+            thread::park_timeout(Duration::from_millis(10));\n         }\n     }\n \n@@ -847,17 +847,17 @@ mod tests {\n             let th = thread::current();\n \n             let _guard = thread::spawn(move || {\n-                super::sleep_ms(50);\n+                super::sleep(Duration::from_millis(50));\n                 th.unpark();\n             });\n \n-            thread::park_timeout_ms(u32::MAX);\n+            thread::park_timeout(Duration::from_millis(u32::MAX as u64));\n         }\n     }\n \n     #[test]\n     fn sleep_ms_smoke() {\n-        thread::sleep_ms(2);\n+        thread::sleep(Duration::from_millis(2));\n     }\n \n     // NOTE: the corresponding test for stderr is in run-pass/thread-stderr, due"}, {"sha": "ad1be82d6d8422a9a28b1b14481c0961a8847056", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06bb977d86dcfe786d4265f4807a11c39b51141/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=a06bb977d86dcfe786d4265f4807a11c39b51141", "patch": "@@ -173,7 +173,6 @@ impl Div<u32> for Duration {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use super::Duration;\n \n     #[test]"}]}