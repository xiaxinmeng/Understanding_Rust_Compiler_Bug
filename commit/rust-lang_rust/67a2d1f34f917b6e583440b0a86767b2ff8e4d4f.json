{"sha": "67a2d1f34f917b6e583440b0a86767b2ff8e4d4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTJkMWYzNGY5MTdiNmU1ODM0NDBiMGE4Njc2N2IyZmY4ZTRkNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-19T06:21:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-19T06:21:10Z"}, "message": "Auto merge of #30403 - webmobster:master, r=alexcrichton\n\nI didn't see any reason that debug couldn't be added to this object, since every field derives debug.", "tree": {"sha": "1a0eadd1fa29d7c8c01da9fcff3883d2d3d1986e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0eadd1fa29d7c8c01da9fcff3883d2d3d1986e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a2d1f34f917b6e583440b0a86767b2ff8e4d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a2d1f34f917b6e583440b0a86767b2ff8e4d4f", "html_url": "https://github.com/rust-lang/rust/commit/67a2d1f34f917b6e583440b0a86767b2ff8e4d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a2d1f34f917b6e583440b0a86767b2ff8e4d4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2", "html_url": "https://github.com/rust-lang/rust/commit/440ef8b1548edf9d03a5b880d77a8b476cfb7fa2"}, {"sha": "21030f1fc9510d9808c0f8352ea8a5eeacfa4ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21030f1fc9510d9808c0f8352ea8a5eeacfa4ca5", "html_url": "https://github.com/rust-lang/rust/commit/21030f1fc9510d9808c0f8352ea8a5eeacfa4ca5"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "be1fe9b2a9bd7d27344379acf6638be59cbf88b3", "filename": "src/libstd/process.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/67a2d1f34f917b6e583440b0a86767b2ff8e4d4f/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a2d1f34f917b6e583440b0a86767b2ff8e4d4f/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=67a2d1f34f917b6e583440b0a86767b2ff8e4d4f", "patch": "@@ -20,6 +20,7 @@ use ffi::OsStr;\n use fmt;\n use io::{self, Error, ErrorKind};\n use path;\n+use str;\n use sys::pipe::{self, AnonPipe};\n use sys::process as imp;\n use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n@@ -400,6 +401,32 @@ pub struct Output {\n     pub stderr: Vec<u8>,\n }\n \n+// If either stderr or stdout are valid utf8 strings it prints the valid\n+// strings, otherwise it prints the byte sequence instead\n+#[stable(feature = \"process_output_debug\", since = \"1.7.0\")]\n+impl fmt::Debug for Output {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+\n+        let stdout_utf8 = str::from_utf8(&self.stdout);\n+        let stdout_debug: &fmt::Debug = match stdout_utf8 {\n+            Ok(ref str) => str,\n+            Err(_) => &self.stdout\n+        };\n+\n+        let stderr_utf8 = str::from_utf8(&self.stderr);\n+        let stderr_debug: &fmt::Debug = match stderr_utf8 {\n+            Ok(ref str) => str,\n+            Err(_) => &self.stderr\n+        };\n+\n+        fmt.debug_struct(\"Output\")\n+            .field(\"status\", &self.status)\n+            .field(\"stdout\", stdout_debug)\n+            .field(\"stderr\", stderr_debug)\n+            .finish()\n+    }\n+}\n+\n /// Describes what to do with a standard I/O stream for a child process.\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(StdioImp);"}]}