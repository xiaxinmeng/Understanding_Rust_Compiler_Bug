{"sha": "ef2eabbfa84fb11deda705df724b28ef3431256c", "node_id": "C_kwDOAAsO6NoAKGVmMmVhYmJmYTg0ZmIxMWRlZGE3MDVkZjcyNGIyOGVmMzQzMTI1NmM", "commit": {"author": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-03T20:27:43Z"}, "committer": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-03T20:27:43Z"}, "message": "Tidy formatted", "tree": {"sha": "77cb5b85d43bb6125dbf05f102416686196a8566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cb5b85d43bb6125dbf05f102416686196a8566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2eabbfa84fb11deda705df724b28ef3431256c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2eabbfa84fb11deda705df724b28ef3431256c", "html_url": "https://github.com/rust-lang/rust/commit/ef2eabbfa84fb11deda705df724b28ef3431256c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2eabbfa84fb11deda705df724b28ef3431256c/comments", "author": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "html_url": "https://github.com/rust-lang/rust/commit/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "cd02c802e50e6eef0d9ccf2e4c9cc7647a973014", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef2eabbfa84fb11deda705df724b28ef3431256c/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2eabbfa84fb11deda705df724b28ef3431256c/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=ef2eabbfa84fb11deda705df724b28ef3431256c", "patch": "@@ -263,14 +263,14 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                     };\n \n                     let [pat, in_token, iter] = [\n-                        (SyntaxKind::UNDERSCORE, \"_\"), \n-                        (SyntaxKind::IN_KW, \"in\"), \n+                        (SyntaxKind::UNDERSCORE, \"_\"),\n+                        (SyntaxKind::IN_KW, \"in\"),\n                         (SyntaxKind::IDENT, \"__ra_fixup\")\n                     ].map(|(kind, text)| SyntheticToken { kind, text: text.into(), range: end_range, id: EMPTY_ID});\n \n                     if it.pat().is_none() && it.in_token().is_none() && it.iterable().is_none() {\n                         append.insert(for_token.into(), vec![pat, in_token, iter]);\n-                    } \n+                    }\n \n                     // Tricky: add logic to add in just a pattern or iterable if not all\n                     // the pieces are missing"}]}