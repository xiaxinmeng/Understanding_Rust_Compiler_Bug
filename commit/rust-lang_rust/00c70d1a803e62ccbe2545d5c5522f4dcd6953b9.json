{"sha": "00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYzcwZDFhODAzZTYyY2NiZTI1NDVkNWM1NTIyZjRkY2Q2OTUzYjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-08T06:19:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-17T06:16:12Z"}, "message": "librustc: Allow the new UFCS explicit self in trait definitions, and\nremove `~self` from the test suite.", "tree": {"sha": "162e3b98fc57b10079f3ed04ff2144bafbfabae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162e3b98fc57b10079f3ed04ff2144bafbfabae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "html_url": "https://github.com/rust-lang/rust/commit/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe49cbeb82deaa771dcaa4f512cb9f967beb5996", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe49cbeb82deaa771dcaa4f512cb9f967beb5996", "html_url": "https://github.com/rust-lang/rust/commit/fe49cbeb82deaa771dcaa4f512cb9f967beb5996"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "c94759d7d7e8deef96b7bb838cb44c55d753b4fe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -1003,7 +1003,7 @@ impl Clean<Item> for ty::Method {\n                 };\n                 let s = match s {\n                     ty::ByReferenceExplicitSelfCategory(..) => {\n-                        match ty::get(*self.fty.sig.inputs[0]).sty {\n+                        match ty::get(self.fty.sig.inputs[0]).sty {\n                             ty::ty_rptr(r, mt) => {\n                                 SelfBorrowed(r.clean(), mt.mutbl.clean())\n                             }"}, {"sha": "57a158d2438dd98ab5b9efb0cf08fccc0b57d848", "filename": "src/test/compile-fail/issue-5153.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -11,11 +11,11 @@\n // error-pattern: type `&Foo` does not implement any method in scope named `foo`\n \n trait Foo {\n-    fn foo(~self);\n+    fn foo(self: Box<Self>);\n }\n \n impl Foo for int {\n-    fn foo(~self) { }\n+    fn foo(self: Box<int>) { }\n }\n \n fn main() {"}, {"sha": "fc19a1ba06f9b2324435ba2faa2d7d36cb2c38d3", "filename": "src/test/compile-fail/lint-unused-mut-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -16,7 +16,7 @@\n struct Foo;\n impl Foo {\n     fn foo(mut self) {} //~ ERROR: variable does not need to be mutable\n-    fn bar(mut ~self) {} //~ ERROR: variable does not need to be mutable\n+    fn bar(mut self: Box<Foo>) {} //~ ERROR: variable does not need to be mutable\n }\n \n fn main() {}"}, {"sha": "84e7f98a40dc2229bd04fa6b7a6efcd1f8b7ecb8", "filename": "src/test/compile-fail/object-pointer-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -13,7 +13,7 @@ trait Foo {\n     fn borrowed(&self);\n     fn borrowed_mut(&mut self);\n \n-    fn owned(~self);\n+    fn owned(self: Box<Self>);\n }\n \n fn borrowed_receiver(x: &Foo) {"}, {"sha": "2e43dcdeb498efe9599b35386b922dd65ad09696", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -134,7 +134,7 @@ impl<T1> Struct<T1> {\n         arg1\n     }\n \n-    fn self_owned<T2>(~self, arg1: int, arg2: T2) -> int {\n+    fn self_owned<T2>(self: Box<Struct<T1>>, arg1: int, arg2: T2) -> int {\n         zzz(); // #break\n         arg1\n     }"}, {"sha": "74f4882bd4bf494918a01cb3515fcf98735a90c5", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -136,7 +136,7 @@ impl Enum {\n         arg1 + arg2\n     }\n \n-    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+    fn self_owned(self: Box<Enum>, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         arg1 + arg2\n     }"}, {"sha": "590a821fcb6e10017d1af6240eca4af91613c925", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -134,7 +134,7 @@ impl<T> Struct<T> {\n         arg1 + arg2\n     }\n \n-    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+    fn self_owned(self: Box<Struct<T>>, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         arg1 + arg2\n     }"}, {"sha": "5ea89f1548915e520dca0b9accf293edf72759aa", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -133,7 +133,7 @@ impl Struct {\n         self.x + arg1 + arg2\n     }\n \n-    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+    fn self_owned(self: Box<Struct>, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         self.x + arg1 + arg2\n     }"}, {"sha": "1fc136ac1f695c95945871dbebc40f604cb1f5bb", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -124,7 +124,7 @@ struct Struct {\n trait Trait {\n     fn self_by_ref(&self, arg1: int, arg2: int) -> int;\n     fn self_by_val(self, arg1: int, arg2: int) -> int;\n-    fn self_owned(~self, arg1: int, arg2: int) -> int;\n+    fn self_owned(self: Box<Self>, arg1: int, arg2: int) -> int;\n }\n \n impl Trait for Struct {\n@@ -139,7 +139,7 @@ impl Trait for Struct {\n         self.x + arg1 + arg2\n     }\n \n-    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+    fn self_owned(self: Box<Struct>, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         self.x + arg1 + arg2\n     }"}, {"sha": "d4051e333c184319761c5e21e7853e2ed28f1529", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -131,7 +131,7 @@ impl TupleStruct {\n         arg1 + arg2\n     }\n \n-    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+    fn self_owned(self: Box<TupleStruct>, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         arg1 + arg2\n     }"}, {"sha": "4268c0adcc396f6408b976ab139c88009c10161f", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -133,7 +133,7 @@ trait Trait {\n         arg1 + arg2\n     }\n \n-    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+    fn self_owned(self: Box<Self>, arg1: int, arg2: int) -> int {\n         zzz(); // #break\n         arg1 + arg2\n     }"}, {"sha": "35f3dffa0b63748fe64c1e66d1353768e2385450", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -134,7 +134,7 @@ trait Trait {\n         arg1\n     }\n \n-    fn self_owned<T>(~self, arg1: int, arg2: T) -> int {\n+    fn self_owned<T>(self: Box<Self>, arg1: int, arg2: T) -> int {\n         zzz(); // #break\n         arg1\n     }"}, {"sha": "f13f598fda28c26032f3bf7bc96574e77392fb48", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -10,11 +10,11 @@\n \n \n trait double {\n-    fn double(~self) -> uint;\n+    fn double(self: Box<Self>) -> uint;\n }\n \n impl double for uint {\n-    fn double(~self) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2u }\n }\n \n pub fn main() {"}, {"sha": "856ee686db30e89c988c547aa97b6d6b5197ed7b", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -10,11 +10,11 @@\n \n \n trait double {\n-    fn double(~self) -> uint;\n+    fn double(self: Box<Self>) -> uint;\n }\n \n impl double for Box<uint> {\n-    fn double(~self) -> uint { **self * 2u }\n+    fn double(self: Box<Box<uint>>) -> uint { **self * 2u }\n }\n \n pub fn main() {"}, {"sha": "94da61483eaaecf1f58f57996f2491c8b97a13ca", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double(~self) -> uint;\n+    fn double(self: Box<Self>) -> uint;\n }\n \n impl double for uint {\n-    fn double(~self) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2u }\n }\n \n pub fn main() {"}, {"sha": "2e9751ce6acfccd405f527709718962891cf0898", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait double {\n-    fn double(~self) -> uint;\n+    fn double(self: Box<Self>) -> uint;\n }\n \n impl double for uint {\n-    fn double(~self) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2u }\n }\n \n pub fn main() {"}, {"sha": "e566f218aa8f61b02486073e7774071f545be693", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -10,15 +10,15 @@\n \n \n trait Foo {\n-    fn f(~self);\n+    fn f(self: Box<Self>);\n }\n \n struct S {\n     x: int\n }\n \n impl Foo for S {\n-    fn f(~self) {\n+    fn f(self: Box<S>) {\n         assert_eq!(self.x, 3);\n     }\n }"}, {"sha": "32ac14ab18074ccdce1e5ae26191203bf5693874", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -57,7 +57,7 @@ fn thing(x: A) -> thing {\n }\n \n impl thing {\n-    pub fn bar(~self) -> int { self.x.a }\n+    pub fn bar(self: Box<thing>) -> int { self.x.a }\n     pub fn quux(&self) -> int { self.x.a }\n     pub fn baz<'a>(&'a self) -> &'a A { &self.x }\n     pub fn spam(self) -> int { self.x.a }"}, {"sha": "c7087f8e3a8ca5982663b681e72850ff75d27f26", "filename": "src/test/run-pass/issue-7320.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fissue-7320.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fissue-7320.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7320.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -10,7 +10,7 @@\n \n \n trait Foo {\n-    fn foo(~self) { bar(self as Box<Foo>); }\n+    fn foo(self: Box<Self>) { bar(self as Box<Foo>); }\n }\n \n fn bar(_b: Box<Foo>) { }"}, {"sha": "14ddc5d660f0cea9d71ab409c065643ce2aa3c2e", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -14,15 +14,15 @@\n \n \n trait FooTrait {\n-    fn foo(~self) -> uint;\n+    fn foo(self: Box<Self>) -> uint;\n }\n \n struct BarStruct {\n     x: uint\n }\n \n impl FooTrait for BarStruct {\n-    fn foo(~self) -> uint {\n+    fn foo(self: Box<BarStruct>) -> uint {\n         self.x\n     }\n }"}, {"sha": "b4a46f34015a2455e78c0a27b74ff7e08d9550ea", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -19,7 +19,7 @@ trait Changer {\n         self\n     }\n \n-    fn change_again(mut ~self) -> Box<Self> {\n+    fn change_again(mut self: Box<Self>) -> Box<Self> {\n         self.set_to(45);\n         self\n     }"}, {"sha": "4d7830e1cdca1ee70435b871410ca31d1cb1a7a0", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c70d1a803e62ccbe2545d5c5522f4dcd6953b9/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=00c70d1a803e62ccbe2545d5c5522f4dcd6953b9", "patch": "@@ -14,11 +14,11 @@ struct X {\n }\n \n trait Changer {\n-    fn change(mut ~self) -> Box<Self>;\n+    fn change(mut self: Box<Self>) -> Box<Self>;\n }\n \n impl Changer for X {\n-    fn change(mut ~self) -> Box<X> {\n+    fn change(mut self: Box<X>) -> Box<X> {\n         self.a = 55;\n         self\n     }"}]}