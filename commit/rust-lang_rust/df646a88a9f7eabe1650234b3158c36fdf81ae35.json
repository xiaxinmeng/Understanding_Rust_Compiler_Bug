{"sha": "df646a88a9f7eabe1650234b3158c36fdf81ae35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjQ2YTg4YTlmN2VhYmUxNjUwMjM0YjMxNThjMzZmZGY4MWFlMzU=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-04T08:07:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-04T08:07:11Z"}, "message": "Merge pull request #3109 from shssoichiro/3034-needless-collect\n\nLint against needless uses of `collect()`", "tree": {"sha": "f4bf0c884c304b651ede02297e07fdf93f79069c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4bf0c884c304b651ede02297e07fdf93f79069c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df646a88a9f7eabe1650234b3158c36fdf81ae35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbjj0vCRBK7hj4Ov3rIwAAdHIIABGYf9qY9rXMvtm1Ny7AJ9c/\nenvIwmvRmy4X+IKCcCkGKyNfcJBmDistulawk6sqIy5BRXmw1G1G7+DecCM7qS8P\ncyQEeV2F52v6oRuQdyDiBh9omV7TeOgJ6VkjeZgIoUP0zCA1WanNjbIgTPCf5u3M\nfBu4/uQGWNyzmgTn/n1xjFCXyKlderzXr2+ngaC4Ut3zaWqzmOW5NJTKPEqGnDu0\ni0QEFGdd14tVuSYVVb0P2hOGZKiyhWAfn8AGGGYNlbrp399YR26U0wwYdEzPn0H6\nWz02JVrjHhYpHmJOH/fFu6zcZoKMj79PpparcLFpPnn9eoQKiiHR4qD46vrSpVU=\n=z07+\n-----END PGP SIGNATURE-----\n", "payload": "tree f4bf0c884c304b651ede02297e07fdf93f79069c\nparent c0513097ab648f497e18e565bf00b71edd60c65c\nparent f7d2aeefe89d20f6ddad190b6976fba8e3b22584\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1536048431 +0200\ncommitter GitHub <noreply@github.com> 1536048431 +0200\n\nMerge pull request #3109 from shssoichiro/3034-needless-collect\n\nLint against needless uses of `collect()`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df646a88a9f7eabe1650234b3158c36fdf81ae35", "html_url": "https://github.com/rust-lang/rust/commit/df646a88a9f7eabe1650234b3158c36fdf81ae35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df646a88a9f7eabe1650234b3158c36fdf81ae35/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0513097ab648f497e18e565bf00b71edd60c65c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0513097ab648f497e18e565bf00b71edd60c65c", "html_url": "https://github.com/rust-lang/rust/commit/c0513097ab648f497e18e565bf00b71edd60c65c"}, {"sha": "f7d2aeefe89d20f6ddad190b6976fba8e3b22584", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d2aeefe89d20f6ddad190b6976fba8e3b22584", "html_url": "https://github.com/rust-lang/rust/commit/f7d2aeefe89d20f6ddad190b6976fba8e3b22584"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "23fdbf648e3078a49b2e7a2ea6f681a7031f7c36", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df646a88a9f7eabe1650234b3158c36fdf81ae35/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df646a88a9f7eabe1650234b3158c36fdf81ae35/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=df646a88a9f7eabe1650234b3158c36fdf81ae35", "patch": "@@ -554,6 +554,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::ITER_NEXT_LOOP,\n         loops::MANUAL_MEMCPY,\n         loops::MUT_RANGE_BOUND,\n+        loops::NEEDLESS_COLLECT,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n@@ -904,6 +905,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         escape::BOXED_LOCAL,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         loops::MANUAL_MEMCPY,\n+        loops::NEEDLESS_COLLECT,\n         loops::UNUSED_COLLECT,\n         methods::EXPECT_FUN_CALL,\n         methods::ITER_NTH,"}, {"sha": "8a12530cb0d2591636f2490923d6d76c1cae190b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/df646a88a9f7eabe1650234b3158c36fdf81ae35/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df646a88a9f7eabe1650234b3158c36fdf81ae35/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=df646a88a9f7eabe1650234b3158c36fdf81ae35", "patch": "@@ -14,10 +14,12 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n+use rustc_errors::Applicability;\n use std::collections::{HashMap, HashSet};\n use std::iter::{once, Iterator};\n use syntax::ast;\n use syntax::source_map::Span;\n+use syntax_pos::BytePos;\n use crate::utils::{sugg, sext};\n use crate::utils::usage::mutated_variables;\n use crate::consts::{constant, Constant};\n@@ -223,6 +225,27 @@ declare_clippy_lint! {\n      written as a for loop\"\n }\n \n+/// **What it does:** Checks for functions collecting an iterator when collect\n+/// is not needed.\n+///\n+/// **Why is this bad?** `collect` causes the allocation of a new data structure,\n+/// when this allocation may not be needed.\n+///\n+/// **Known problems:**\n+/// None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let len = iterator.collect::<Vec<_>>().len();\n+/// // should be\n+/// let len = iterator.count();\n+/// ```\n+declare_clippy_lint! {\n+    pub NEEDLESS_COLLECT,\n+    perf,\n+    \"collecting an iterator when collect is not needed\"\n+}\n+\n /// **What it does:** Checks for loops over ranges `x..y` where both `x` and `y`\n /// are constant and `x` is greater or equal to `y`, unless the range is\n /// reversed or has a negative `.step_by(_)`.\n@@ -400,6 +423,7 @@ impl LintPass for Pass {\n             FOR_LOOP_OVER_OPTION,\n             WHILE_LET_LOOP,\n             UNUSED_COLLECT,\n+            NEEDLESS_COLLECT,\n             REVERSE_RANGE_LOOP,\n             EXPLICIT_COUNTER_LOOP,\n             EMPTY_LOOP,\n@@ -523,6 +547,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if let ExprKind::While(ref cond, _, _) = expr.node {\n             check_infinite_loop(cx, cond, expr);\n         }\n+\n+        check_needless_collect(expr, cx);\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n@@ -2241,3 +2267,71 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n         NestedVisitorMap::None\n     }\n }\n+\n+const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n+\n+fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method, _, ref args) = expr.node;\n+        if let ExprKind::MethodCall(ref chain_method, _, _) = args[0].node;\n+        if chain_method.ident.name == \"collect\" && match_trait_method(cx, &args[0], &paths::ITERATOR);\n+        if let Some(ref generic_args) = chain_method.args;\n+        if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n+        then {\n+            let ty = cx.tables.node_id_to_type(ty.hir_id);\n+            if match_type(cx, ty, &paths::VEC) ||\n+                match_type(cx, ty, &paths::VEC_DEQUE) ||\n+                match_type(cx, ty, &paths::BTREEMAP) ||\n+                match_type(cx, ty, &paths::HASHMAP) {\n+                if method.ident.name == \"len\" {\n+                    let span = shorten_needless_collect_span(expr);\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        db.span_suggestion_with_applicability(\n+                            span,\n+                            \"replace with\",\n+                            \".count()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+                if method.ident.name == \"is_empty\" {\n+                    let span = shorten_needless_collect_span(expr);\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        db.span_suggestion_with_applicability(\n+                            span,\n+                            \"replace with\",\n+                            \".next().is_none()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+                if method.ident.name == \"contains\" {\n+                    let contains_arg = snippet(cx, args[1].span, \"??\");\n+                    let span = shorten_needless_collect_span(expr);\n+                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        db.span_suggestion_with_applicability(\n+                            span,\n+                            \"replace with\",\n+                            format!(\n+                                \".any(|&x| x == {})\",\n+                                if contains_arg.starts_with('&') { &contains_arg[1..] } else { &contains_arg }\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn shorten_needless_collect_span(expr: &Expr) -> Span {\n+    if_chain! {\n+        if let ExprKind::MethodCall(_, _, ref args) = expr.node;\n+        if let ExprKind::MethodCall(_, ref span, _) = args[0].node;\n+        then {\n+            return expr.span.with_lo(span.lo() - BytePos(1));\n+        }\n+    }\n+    unreachable!()\n+}"}, {"sha": "b001f20d5279f6d664274148f29bf55116cff231", "filename": "tests/ui/needless_collect.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df646a88a9f7eabe1650234b3158c36fdf81ae35/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df646a88a9f7eabe1650234b3158c36fdf81ae35/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=df646a88a9f7eabe1650234b3158c36fdf81ae35", "patch": "@@ -0,0 +1,19 @@\n+#![feature(tool_lints)]\n+\n+use std::collections::{HashMap, HashSet, BTreeSet};\n+\n+#[warn(clippy::needless_collect)]\n+#[allow(unused_variables, clippy::iter_cloned_collect)]\n+fn main() {\n+    let sample = [1; 5];\n+    let len = sample.iter().collect::<Vec<_>>().len();\n+    if sample.iter().collect::<Vec<_>>().is_empty() {\n+        // Empty\n+    }\n+    sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n+    sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+    // Notice the `HashSet`--this should not be linted\n+    sample.iter().collect::<HashSet<_>>().len();\n+    // Neither should this\n+    sample.iter().collect::<BTreeSet<_>>().len();\n+}"}, {"sha": "0124db3b9758a84436f87c7b5325b3013c4d0624", "filename": "tests/ui/needless_collect.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df646a88a9f7eabe1650234b3158c36fdf81ae35/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df646a88a9f7eabe1650234b3158c36fdf81ae35/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=df646a88a9f7eabe1650234b3158c36fdf81ae35", "patch": "@@ -0,0 +1,28 @@\n+error: avoid using `collect()` when not needed\n+ --> $DIR/needless_collect.rs:9:28\n+  |\n+9 |     let len = sample.iter().collect::<Vec<_>>().len();\n+  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n+  |\n+  = note: `-D clippy::needless-collect` implied by `-D warnings`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:10:21\n+   |\n+10 |     if sample.iter().collect::<Vec<_>>().is_empty() {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.next().is_none()`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:13:27\n+   |\n+13 |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.any(|&x| x == 1)`\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:14:34\n+   |\n+14 |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n+\n+error: aborting due to 4 previous errors\n+"}]}