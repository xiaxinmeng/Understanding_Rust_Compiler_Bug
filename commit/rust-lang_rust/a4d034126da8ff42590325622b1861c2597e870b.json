{"sha": "a4d034126da8ff42590325622b1861c2597e870b", "node_id": "C_kwDOAAsO6NoAKGE0ZDAzNDEyNmRhOGZmNDI1OTAzMjU2MjJiMTg2MWMyNTk3ZTg3MGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-07T13:49:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-07T13:49:58Z"}, "message": "Auto merge of #101432 - nnethercote:shrink-PredicateS, r=lcnr\n\nShrink `PredicateS`\n\nr? `@ghost`", "tree": {"sha": "0136a885f398dded0b25e1021f6b642b510703e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0136a885f398dded0b25e1021f6b642b510703e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d034126da8ff42590325622b1861c2597e870b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d034126da8ff42590325622b1861c2597e870b", "html_url": "https://github.com/rust-lang/rust/commit/a4d034126da8ff42590325622b1861c2597e870b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d034126da8ff42590325622b1861c2597e870b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c7aa7288559f8e5ea7ce3543ff946b09783628", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c7aa7288559f8e5ea7ce3543ff946b09783628", "html_url": "https://github.com/rust-lang/rust/commit/e7c7aa7288559f8e5ea7ce3543ff946b09783628"}, {"sha": "79db32b64ec946afbef2ed50282f03b71d933480", "url": "https://api.github.com/repos/rust-lang/rust/commits/79db32b64ec946afbef2ed50282f03b71d933480", "html_url": "https://github.com/rust-lang/rust/commit/79db32b64ec946afbef2ed50282f03b71d933480"}], "stats": {"total": 323, "additions": 202, "deletions": 121}, "files": [{"sha": "0196bd262179eac45c502a874f2b6d5f7df2cd4d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -1586,28 +1586,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             Some(values) => {\n                 let values = self.resolve_vars_if_possible(values);\n                 let (is_simple_error, exp_found) = match values {\n-                    ValuePairs::Terms(infer::ExpectedFound {\n-                        expected: ty::Term::Ty(expected),\n-                        found: ty::Term::Ty(found),\n-                    }) => {\n-                        let is_simple_err = expected.is_simple_text() && found.is_simple_text();\n-                        OpaqueTypesVisitor::visit_expected_found(self.tcx, expected, found, span)\n-                            .report(diag);\n-\n-                        (\n-                            is_simple_err,\n-                            Mismatch::Variable(infer::ExpectedFound { expected, found }),\n-                        )\n+                    ValuePairs::Terms(infer::ExpectedFound { expected, found }) => {\n+                        match (expected.unpack(), found.unpack()) {\n+                            (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => {\n+                                let is_simple_err =\n+                                    expected.is_simple_text() && found.is_simple_text();\n+                                OpaqueTypesVisitor::visit_expected_found(\n+                                    self.tcx, expected, found, span,\n+                                )\n+                                .report(diag);\n+\n+                                (\n+                                    is_simple_err,\n+                                    Mismatch::Variable(infer::ExpectedFound { expected, found }),\n+                                )\n+                            }\n+                            (ty::TermKind::Const(_), ty::TermKind::Const(_)) => {\n+                                (false, Mismatch::Fixed(\"constant\"))\n+                            }\n+                            _ => (false, Mismatch::Fixed(\"type\")),\n+                        }\n                     }\n-                    ValuePairs::Terms(infer::ExpectedFound {\n-                        expected: ty::Term::Const(_),\n-                        found: ty::Term::Const(_),\n-                    }) => (false, Mismatch::Fixed(\"constant\")),\n                     ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n                         (false, Mismatch::Fixed(\"trait\"))\n                     }\n                     ValuePairs::Regions(_) => (false, Mismatch::Fixed(\"lifetime\")),\n-                    _ => (false, Mismatch::Fixed(\"type\")),\n                 };\n                 let vals = match self.values_str(values) {\n                     Some((expected, found)) => Some((expected, found)),\n@@ -2273,11 +2276,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return None;\n         }\n \n-        Some(match (exp_found.expected, exp_found.found) {\n-            (ty::Term::Ty(expected), ty::Term::Ty(found)) => self.cmp(expected, found),\n-            (expected, found) => (\n-                DiagnosticStyledString::highlighted(expected.to_string()),\n-                DiagnosticStyledString::highlighted(found.to_string()),\n+        Some(match (exp_found.expected.unpack(), exp_found.found.unpack()) {\n+            (ty::TermKind::Ty(expected), ty::TermKind::Ty(found)) => self.cmp(expected, found),\n+            _ => (\n+                DiagnosticStyledString::highlighted(exp_found.expected.to_string()),\n+                DiagnosticStyledString::highlighted(exp_found.found.to_string()),\n             ),\n         })\n     }"}, {"sha": "bbbc044b85a48e7f17a899116691a99e36e816d4", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -353,12 +353,11 @@ pub enum ValuePairs<'tcx> {\n \n impl<'tcx> ValuePairs<'tcx> {\n     pub fn ty(&self) -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n-        if let ValuePairs::Terms(ExpectedFound {\n-            expected: ty::Term::Ty(expected),\n-            found: ty::Term::Ty(found),\n-        }) = self\n+        if let ValuePairs::Terms(ExpectedFound { expected, found }) = self\n+            && let Some(expected) = expected.ty()\n+            && let Some(found) = found.ty()\n         {\n-            Some((*expected, *found))\n+            Some((expected, found))\n         } else {\n             None\n         }"}, {"sha": "c22c899c5cce17104de0d82db5ea8052be002b3a", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, InferConst, Term, Ty, TypeFlags};\n+use crate::ty::{self, InferConst, Ty, TypeFlags};\n use std::slice;\n \n #[derive(Debug)]\n@@ -243,9 +243,9 @@ impl FlagComputation {\n             }\n             ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {\n                 self.add_projection_ty(projection_ty);\n-                match term {\n-                    Term::Ty(ty) => self.add_ty(ty),\n-                    Term::Const(c) => self.add_const(c),\n+                match term.unpack() {\n+                    ty::TermKind::Ty(ty) => self.add_ty(ty),\n+                    ty::TermKind::Const(c) => self.add_const(c),\n                 }\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n@@ -320,9 +320,9 @@ impl FlagComputation {\n \n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n-        match projection.term {\n-            ty::Term::Ty(ty) => self.add_ty(ty),\n-            ty::Term::Const(ct) => self.add_const(ct),\n+        match projection.term.unpack() {\n+            ty::TermKind::Ty(ty) => self.add_ty(ty),\n+            ty::TermKind::Const(ct) => self.add_const(ct),\n         }\n     }\n "}, {"sha": "ee4e8ff50f82434c3903c1170186cc7f8182e6d7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 107, "deletions": 25, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -41,6 +41,7 @@ use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n+use rustc_serialize::{Decodable, Encodable};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, Span};\n@@ -50,6 +51,9 @@ pub use vtable::*;\n \n use std::fmt::Debug;\n use std::hash::{Hash, Hasher};\n+use std::marker::PhantomData;\n+use std::mem;\n+use std::num::NonZeroUsize;\n use std::ops::ControlFlow;\n use std::{fmt, str};\n \n@@ -459,15 +463,6 @@ pub(crate) struct TyS<'tcx> {\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n-// `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyS<'_>, 40);\n-\n-// We are actually storing a stable hash cache next to the type, so let's\n-// also check the full size\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(WithStableHash<TyS<'_>>, 56);\n-\n /// Use this rather than `TyS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_diagnostic_item = \"Ty\"]\n@@ -524,10 +519,6 @@ pub(crate) struct PredicateS<'tcx> {\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n-// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PredicateS<'_>, 56);\n-\n /// Use this rather than `PredicateS`, whenever possible.\n #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n #[rustc_pass_by_value]\n@@ -911,42 +902,122 @@ pub struct CoercePredicate<'tcx> {\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, TypeVisitable)]\n-pub enum Term<'tcx> {\n-    Ty(Ty<'tcx>),\n-    Const(Const<'tcx>),\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct Term<'tcx> {\n+    ptr: NonZeroUsize,\n+    marker: PhantomData<(Ty<'tcx>, Const<'tcx>)>,\n }\n \n impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {\n     fn from(ty: Ty<'tcx>) -> Self {\n-        Term::Ty(ty)\n+        TermKind::Ty(ty).pack()\n     }\n }\n \n impl<'tcx> From<Const<'tcx>> for Term<'tcx> {\n     fn from(c: Const<'tcx>) -> Self {\n-        Term::Const(c)\n+        TermKind::Const(c).pack()\n+    }\n+}\n+\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Term<'tcx> {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        self.unpack().hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for Term<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(self.unpack().try_fold_with(folder)?.pack())\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Term<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.unpack().visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx, E: TyEncoder<I = TyCtxt<'tcx>>> Encodable<E> for Term<'tcx> {\n+    fn encode(&self, e: &mut E) {\n+        self.unpack().encode(e)\n+    }\n+}\n+\n+impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for Term<'tcx> {\n+    fn decode(d: &mut D) -> Self {\n+        let res: TermKind<'tcx> = Decodable::decode(d);\n+        res.pack()\n     }\n }\n \n impl<'tcx> Term<'tcx> {\n+    #[inline]\n+    pub fn unpack(self) -> TermKind<'tcx> {\n+        let ptr = self.ptr.get();\n+        // SAFETY: use of `Interned::new_unchecked` here is ok because these\n+        // pointers were originally created from `Interned` types in `pack()`,\n+        // and this is just going in the other direction.\n+        unsafe {\n+            match ptr & TAG_MASK {\n+                TYPE_TAG => TermKind::Ty(Ty(Interned::new_unchecked(\n+                    &*((ptr & !TAG_MASK) as *const WithStableHash<ty::TyS<'tcx>>),\n+                ))),\n+                CONST_TAG => TermKind::Const(ty::Const(Interned::new_unchecked(\n+                    &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),\n+                ))),\n+                _ => core::intrinsics::unreachable(),\n+            }\n+        }\n+    }\n+\n     pub fn ty(&self) -> Option<Ty<'tcx>> {\n-        if let Term::Ty(ty) = self { Some(*ty) } else { None }\n+        if let TermKind::Ty(ty) = self.unpack() { Some(ty) } else { None }\n     }\n \n     pub fn ct(&self) -> Option<Const<'tcx>> {\n-        if let Term::Const(c) = self { Some(*c) } else { None }\n+        if let TermKind::Const(c) = self.unpack() { Some(c) } else { None }\n     }\n \n     pub fn into_arg(self) -> GenericArg<'tcx> {\n-        match self {\n-            Term::Ty(ty) => ty.into(),\n-            Term::Const(c) => c.into(),\n+        match self.unpack() {\n+            TermKind::Ty(ty) => ty.into(),\n+            TermKind::Const(c) => c.into(),\n         }\n     }\n }\n \n+const TAG_MASK: usize = 0b11;\n+const TYPE_TAG: usize = 0b00;\n+const CONST_TAG: usize = 0b01;\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n+pub enum TermKind<'tcx> {\n+    Ty(Ty<'tcx>),\n+    Const(Const<'tcx>),\n+}\n+\n+impl<'tcx> TermKind<'tcx> {\n+    #[inline]\n+    fn pack(self) -> Term<'tcx> {\n+        let (tag, ptr) = match self {\n+            TermKind::Ty(ty) => {\n+                // Ensure we can use the tag bits.\n+                assert_eq!(mem::align_of_val(&*ty.0.0) & TAG_MASK, 0);\n+                (TYPE_TAG, ty.0.0 as *const WithStableHash<ty::TyS<'tcx>> as usize)\n+            }\n+            TermKind::Const(ct) => {\n+                // Ensure we can use the tag bits.\n+                assert_eq!(mem::align_of_val(&*ct.0.0) & TAG_MASK, 0);\n+                (CONST_TAG, ct.0.0 as *const ty::ConstS<'tcx> as usize)\n+            }\n+        };\n+\n+        Term { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n@@ -2531,3 +2602,14 @@ pub struct DestructuredConst<'tcx> {\n     pub variant: Option<VariantIdx>,\n     pub fields: &'tcx [ty::Const<'tcx>],\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(PredicateS<'_>, 48);\n+    static_assert_size!(TyS<'_>, 40);\n+    static_assert_size!(WithStableHash<TyS<'_>>, 56);\n+}"}, {"sha": "1ae3063dae4e7f51d3ffcb0704c3e27d0cccdd87", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -1,7 +1,7 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{\n-    self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable,\n+    self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_apfloat::ieee::{Double, Single};\n@@ -855,7 +855,7 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n \n                         p!(\")\");\n-                        if let Term::Ty(ty) = return_ty.skip_binder() {\n+                        if let Some(ty) = return_ty.skip_binder().ty() {\n                             if !ty.is_unit() {\n                                 p!(\" -> \", print(return_ty));\n                             }\n@@ -942,13 +942,9 @@ pub trait PrettyPrinter<'tcx>:\n \n                         p!(write(\"{} = \", tcx.associated_item(assoc_item_def_id).name));\n \n-                        match term {\n-                            Term::Ty(ty) => {\n-                                p!(print(ty))\n-                            }\n-                            Term::Const(c) => {\n-                                p!(print(c));\n-                            }\n+                        match term.unpack() {\n+                            TermKind::Ty(ty) => p!(print(ty)),\n+                            TermKind::Const(c) => p!(print(c)),\n                         };\n                     }\n \n@@ -2608,9 +2604,9 @@ define_print_and_forward_display! {\n     }\n \n     ty::Term<'tcx> {\n-      match self {\n-        ty::Term::Ty(ty) => p!(print(ty)),\n-        ty::Term::Const(c) => p!(print(c)),\n+      match self.unpack() {\n+        ty::TermKind::Ty(ty) => p!(print(ty)),\n+        ty::TermKind::Const(c) => p!(print(c)),\n       }\n     }\n "}, {"sha": "109a4df83b02947b6b728d0838c3d83229aba157", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -6,7 +6,7 @@\n \n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n-use crate::ty::{self, ImplSubject, Term, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, ImplSubject, Term, TermKind, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n@@ -803,15 +803,15 @@ impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {\n+impl<'tcx> Relate<'tcx> for Term<'tcx> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Self,\n         b: Self,\n     ) -> RelateResult<'tcx, Self> {\n-        Ok(match (a, b) {\n-            (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),\n-            (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),\n+        Ok(match (a.unpack(), b.unpack()) {\n+            (TermKind::Ty(a), TermKind::Ty(b)) => relation.relate(a, b)?.into(),\n+            (TermKind::Const(a), TermKind::Const(b)) => relation.relate(a, b)?.into(),\n             _ => return Err(TypeError::Mismatch),\n         })\n     }"}, {"sha": "e6bd2eed565a15d96c34306b60b0556f0990b4fe", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -7,7 +7,7 @@ use crate::mir::ProjectionKind;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n+use crate::ty::{self, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n@@ -344,10 +344,13 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n impl<'a, 'tcx> Lift<'tcx> for Term<'a> {\n     type Lifted = ty::Term<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        Some(match self {\n-            Term::Ty(ty) => Term::Ty(tcx.lift(ty)?),\n-            Term::Const(c) => Term::Const(tcx.lift(c)?),\n-        })\n+        Some(\n+            match self.unpack() {\n+                TermKind::Ty(ty) => TermKind::Ty(tcx.lift(ty)?),\n+                TermKind::Const(c) => TermKind::Const(tcx.lift(c)?),\n+            }\n+            .pack(),\n+        )\n     }\n }\n "}, {"sha": "831724bc4b09bec92079c2d999ac5e648da5570f", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -165,9 +165,9 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                         }\n                     };\n \n-                    substs.iter().rev().chain(opt_ty.map(|term| match term {\n-                        ty::Term::Ty(ty) => ty.into(),\n-                        ty::Term::Const(ct) => ct.into(),\n+                    substs.iter().rev().chain(opt_ty.map(|term| match term.unpack() {\n+                        ty::TermKind::Ty(ty) => ty.into(),\n+                        ty::TermKind::Const(ct) => ct.into(),\n                     }))\n                 }));\n             }"}, {"sha": "b1de979e8f8ec4f82f4c83b61930923b2e4fd4c8", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -13,7 +13,7 @@ use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n     self, Binder, Const, ExistentialPredicate, FloatTy, FnSig, IntTy, List, Region, RegionKind,\n-    Term, Ty, TyCtxt, UintTy,\n+    TermKind, Ty, TyCtxt, UintTy,\n };\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::sym;\n@@ -243,13 +243,9 @@ fn encode_predicate<'tcx>(\n             let name = encode_ty_name(tcx, projection.item_def_id);\n             let _ = write!(s, \"u{}{}\", name.len(), &name);\n             s.push_str(&encode_substs(tcx, projection.substs, dict, options));\n-            match projection.term {\n-                Term::Ty(ty) => {\n-                    s.push_str(&encode_ty(tcx, ty, dict, options));\n-                }\n-                Term::Const(c) => {\n-                    s.push_str(&encode_const(tcx, c, dict, options));\n-                }\n+            match projection.term.unpack() {\n+                TermKind::Ty(ty) => s.push_str(&encode_ty(tcx, ty, dict, options)),\n+                TermKind::Const(c) => s.push_str(&encode_const(tcx, c, dict, options)),\n             }\n         }\n         ty::ExistentialPredicate::AutoTrait(def_id) => {"}, {"sha": "cfb8d47e54534d3b2b1187652b2e71cf30aaff7d", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -543,9 +543,9 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                         let name = cx.tcx.associated_item(projection.item_def_id).name;\n                         cx.push(\"p\");\n                         cx.push_ident(name.as_str());\n-                        cx = match projection.term {\n-                            ty::Term::Ty(ty) => ty.print(cx),\n-                            ty::Term::Const(c) => c.print(cx),\n+                        cx = match projection.term.unpack() {\n+                            ty::TermKind::Ty(ty) => ty.print(cx),\n+                            ty::TermKind::Const(c) => c.print(cx),\n                         }?;\n                     }\n                     ty::ExistentialPredicate::AutoTrait(def_id) => {"}, {"sha": "98e93ad3fc5046fdd8b38c4f91bffed2ba49a8d4", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -10,7 +10,7 @@ use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{Region, RegionVid, Term};\n+use rustc_middle::ty::{Region, RegionVid};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n@@ -612,7 +612,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     }\n \n     fn is_self_referential_projection(&self, p: ty::PolyProjectionPredicate<'_>) -> bool {\n-        if let Term::Ty(ty) = p.term().skip_binder() {\n+        if let Some(ty) = p.term().skip_binder().ty() {\n             matches!(ty.kind(), ty::Projection(proj) if proj == &p.skip_binder().projection_ty)\n         } else {\n             false"}, {"sha": "76c1ade0680c5b4f5847fc554682f95ce7677daa", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -552,7 +552,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     )\n                     .ok()\n                     .flatten()\n-                    .unwrap_or_else(|| ty::Term::Ty(ty.super_fold_with(self)))\n+                    .unwrap_or_else(|| ty.super_fold_with(self).into())\n                 };\n                 // For cases like #95134 we would like to catch overflows early\n                 // otherwise they slip away away and cause ICE."}, {"sha": "018ead2e1302048452af6ceceff98c822c30d0d0", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -129,9 +129,9 @@ pub fn predicate_obligations<'a, 'tcx>(\n         }\n         ty::PredicateKind::Projection(t) => {\n             wf.compute_projection(t.projection_ty);\n-            wf.compute(match t.term {\n-                ty::Term::Ty(ty) => ty.into(),\n-                ty::Term::Const(c) => c.into(),\n+            wf.compute(match t.term.unpack() {\n+                ty::TermKind::Ty(ty) => ty.into(),\n+                ty::TermKind::Const(c) => c.into(),\n             })\n         }\n         ty::PredicateKind::WellFormed(arg) => {"}, {"sha": "19bf4a0b3cc9fe280abad988783ee25910d93e94", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -1183,11 +1183,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // `<T as Iterator>::Item = u32`\n                 let assoc_item_def_id = projection_ty.skip_binder().item_def_id;\n                 let def_kind = tcx.def_kind(assoc_item_def_id);\n-                match (def_kind, term) {\n-                    (hir::def::DefKind::AssocTy, ty::Term::Ty(_))\n-                    | (hir::def::DefKind::AssocConst, ty::Term::Const(_)) => (),\n+                match (def_kind, term.unpack()) {\n+                    (hir::def::DefKind::AssocTy, ty::TermKind::Ty(_))\n+                    | (hir::def::DefKind::AssocConst, ty::TermKind::Const(_)) => (),\n                     (_, _) => {\n-                        let got = if let ty::Term::Ty(_) = term { \"type\" } else { \"constant\" };\n+                        let got = if let Some(_) = term.ty() { \"type\" } else { \"constant\" };\n                         let expected = def_kind.descr(assoc_item_def_id);\n                         tcx.sess\n                             .struct_span_err(\n@@ -1375,9 +1375,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let pred = bound_predicate.rebind(pred);\n                         // A `Self` within the original bound will be substituted with a\n                         // `trait_object_dummy_self`, so check for that.\n-                        let references_self = match pred.skip_binder().term {\n-                            ty::Term::Ty(ty) => ty.walk().any(|arg| arg == dummy_self.into()),\n-                            ty::Term::Const(c) => c.ty().walk().any(|arg| arg == dummy_self.into()),\n+                        let references_self = match pred.skip_binder().term.unpack() {\n+                            ty::TermKind::Ty(ty) => ty.walk().any(|arg| arg == dummy_self.into()),\n+                            ty::TermKind::Const(c) => {\n+                                c.ty().walk().any(|arg| arg == dummy_self.into())\n+                            }\n                         };\n \n                         // If the projection output contains `Self`, force the user to"}, {"sha": "c597efbe7468ebce3b6d12ffb5bd6967a242b186", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{\n-    self, AssocKind, DefIdTree, GenericParamDefKind, ProjectionPredicate, ProjectionTy, Term,\n+    self, AssocKind, DefIdTree, GenericParamDefKind, ProjectionPredicate, ProjectionTy,\n     ToPredicate, Ty, TypeVisitable,\n };\n use rustc_span::symbol::Ident;\n@@ -349,7 +349,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             opt_output_ty.zip(opt_output_assoc_item).map(|(output_ty, output_assoc_item)| {\n                 ty::Binder::dummy(ty::PredicateKind::Projection(ProjectionPredicate {\n                     projection_ty: ProjectionTy { substs, item_def_id: output_assoc_item.def_id },\n-                    term: Term::Ty(output_ty),\n+                    term: output_ty.into(),\n                 }))\n                 .to_predicate(self.tcx)\n             });"}, {"sha": "4fe213ffeea35bcf69026b18a67b9177dadf188b", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -271,11 +271,11 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n \n                 for projection in data.projection_bounds() {\n-                    match projection.skip_binder().term {\n-                        ty::Term::Ty(ty) => {\n+                    match projection.skip_binder().term.unpack() {\n+                        ty::TermKind::Ty(ty) => {\n                             self.add_constraints_from_ty(current, ty, self.invariant);\n                         }\n-                        ty::Term::Const(c) => {\n+                        ty::TermKind::Const(c) => {\n                             self.add_constraints_from_const(current, c, self.invariant)\n                         }\n                     }"}, {"sha": "980a1485b59b7674e296099d2a4816986d8615a9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -370,9 +370,9 @@ fn clean_type_outlives_predicate<'tcx>(\n }\n \n fn clean_middle_term<'tcx>(term: ty::Term<'tcx>, cx: &mut DocContext<'tcx>) -> Term {\n-    match term {\n-        ty::Term::Ty(ty) => Term::Type(clean_middle_ty(ty, cx, None)),\n-        ty::Term::Const(c) => Term::Constant(clean_middle_const(c, cx)),\n+    match term.unpack() {\n+        ty::TermKind::Ty(ty) => Term::Type(clean_middle_ty(ty, cx, None)),\n+        ty::TermKind::Const(c) => Term::Constant(clean_middle_const(c, cx)),\n     }\n }\n "}, {"sha": "d1ab7fb67962ea83c19d93360024b334b704cbaf", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -1175,7 +1175,7 @@ fn replace_types<'tcx>(\n         if replaced.insert(param_ty.index) {\n             for projection_predicate in projection_predicates {\n                 if projection_predicate.projection_ty.self_ty() == param_ty.to_ty(cx.tcx)\n-                    && let ty::Term::Ty(term_ty) = projection_predicate.term\n+                    && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n                     let item_def_id = projection_predicate.projection_ty.item_def_id;"}, {"sha": "48a9d6e7c329e806ec571ebde331b7e0dbc63c0d", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -3304,9 +3304,9 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n-                        let assoc_ty = match projection_predicate.term {\n-                            ty::Term::Ty(ty) => ty,\n-                            ty::Term::Const(_c) => continue,\n+                        let assoc_ty = match projection_predicate.term.unpack() {\n+                            ty::TermKind::Ty(ty) => ty,\n+                            ty::TermKind::Const(_c) => continue,\n                         };\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {"}, {"sha": "85da97a39f9a1539435c7f4d202b2dd5eb06fda9", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d034126da8ff42590325622b1861c2597e870b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d034126da8ff42590325622b1861c2597e870b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=a4d034126da8ff42590325622b1861c2597e870b", "patch": "@@ -274,7 +274,7 @@ fn check_other_call_arg<'tcx>(\n                         .subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n                     && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\")\n-                        .map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n+                        .map_or(false, |ty| ty::TermKind::Ty(ty) == normalized_ty.unpack())\n             } else {\n                 false\n             }"}]}