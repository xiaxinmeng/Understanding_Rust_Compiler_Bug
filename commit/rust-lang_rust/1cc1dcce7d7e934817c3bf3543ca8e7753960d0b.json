{"sha": "1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzFkY2NlN2Q3ZTkzNDgxN2MzYmYzNTQzY2E4ZTc3NTM5NjBkMGI=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-18T17:39:47Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-18T17:39:47Z"}, "message": "run rustfmt on libpanic_unwind", "tree": {"sha": "8d04676be07ea43c9891d23d9a40362a38f3eb10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d04676be07ea43c9891d23d9a40362a38f3eb10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYBl5jAAoJEAkcWPS/w2VxmuUQAMQfFkiKk0p/bzWwqAUZkP5q\nf345zydhCfXgdJ/dKxWdocnxbk/iXJ/ThmO5kvIShmSgBH+tK9h9Ls1UQLbXgoMM\n+4lKa4uZbvlc2zKZV8ioyHh+I0HRs4dhXO491nGKEkKWdWELz/mTOnr5T/0fDx4a\nXsUPXdD7yM1vjej0HH5HolJXjg01VLiH+xI4bbGOOySWTQxQxc18m3/CB3ew5khR\nW7DM2MOSbLiqPPZ9x+sdNP8/VFXH7KNSiHXCBRZV9mU/0OpwLYXVJhX8M43BMBPT\nYacXTxO6npYiDR7rS7I9jCmJCMQKAYPI44uRcXihbw4UVhwD36qQx/nH+CHsCZy1\nrxDzbQgErY1iJmhsMN4k4mgd2slfevq5T0jdhxaPVBPCfuGCuZfrHhyccjWZBeRw\nLM9usd/YDObKic7nX35qmJgklUc511uAahBr2qKsTorCmaGhtkV96EfNm0sT7mpH\ny9kdr1qI0DPYrVTOmXaKx4MqIYYxavge+pY6FpVJ0lIZwk/nTigDaewTul0n2A4/\nlOzlgTOkj392ZbLfOePEtqvVOQ3s62wZW4y8Y9VhCKIblgIvn/nKjy4Rz9Gd8utW\n8pdc9RP03DaH0z/LtPUjhIMP0jB5yMxJ01/Cjtm3rHWPTysmWRN//TJWv6YNJA6q\n+hFZI7OPJAOqXb5klrPS\n=gtoP\n-----END PGP SIGNATURE-----", "payload": "tree 8d04676be07ea43c9891d23d9a40362a38f3eb10\nparent 16eeeac783d2ede28e09f2a433c612dea309fe33\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476812387 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476812387 +0530\n\nrun rustfmt on libpanic_unwind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "html_url": "https://github.com/rust-lang/rust/commit/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16eeeac783d2ede28e09f2a433c612dea309fe33", "url": "https://api.github.com/repos/rust-lang/rust/commits/16eeeac783d2ede28e09f2a433c612dea309fe33", "html_url": "https://github.com/rust-lang/rust/commit/16eeeac783d2ede28e09f2a433c612dea309fe33"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "e7994f4e0ef0a3837ee33ad2719db00e18d45c80", "filename": "src/libpanic_unwind/dwarf/eh.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs?ref=1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "patch": "@@ -116,7 +116,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext) -> EHAction {\n         // The \"IP\" is an index into the call-site table, with two exceptions:\n         // -1 means 'no-action', and 0 means 'terminate'.\n         match ip as isize {\n-           -1 => return EHAction::None,\n+            -1 => return EHAction::None,\n             0 => return EHAction::Terminate,\n             _ => (),\n         }\n@@ -182,12 +182,8 @@ unsafe fn read_encoded_pointer(reader: &mut DwarfReader,\n             assert!(context.func_start != 0);\n             context.func_start\n         }\n-        DW_EH_PE_textrel => {\n-            (*context.get_text_start)()\n-        }\n-        DW_EH_PE_datarel => {\n-            (*context.get_data_start)()\n-        }\n+        DW_EH_PE_textrel => (*context.get_text_start)(),\n+        DW_EH_PE_datarel => (*context.get_data_start)(),\n         _ => panic!(),\n     };\n "}, {"sha": "0e48e37c92358150f285f4cc5db6357e098b9fb3", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "patch": "@@ -57,13 +57,10 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n                                          exception_object: *mut uw::_Unwind_Exception,\n                                          context: *mut uw::_Unwind_Context)\n                                          -> uw::_Unwind_Reason_Code {\n-    __gxx_personality_v0(version, actions,\n-                         exception_class,\n-                         exception_object,\n-                         context)\n+    __gxx_personality_v0(version, actions, exception_class, exception_object, context)\n }\n \n-extern {\n+extern \"C\" {\n     fn __cxa_allocate_exception(thrown_size: libc::size_t) -> *mut libc::c_void;\n     fn __cxa_free_exception(thrown_exception: *mut libc::c_void);\n     fn __cxa_throw(thrown_exception: *mut libc::c_void,"}, {"sha": "f0f19be3366bd064f9699fa87271f7518007f401", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "patch": "@@ -156,14 +156,16 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n     let eh_action = find_eh_action(context);\n     if actions as i32 & uw::_UA_SEARCH_PHASE as i32 != 0 {\n         match eh_action {\n-            EHAction::None | EHAction::Cleanup(_) => return uw::_URC_CONTINUE_UNWIND,\n+            EHAction::None |\n+            EHAction::Cleanup(_) => return uw::_URC_CONTINUE_UNWIND,\n             EHAction::Catch(_) => return uw::_URC_HANDLER_FOUND,\n             EHAction::Terminate => return uw::_URC_FATAL_PHASE1_ERROR,\n         }\n     } else {\n         match eh_action {\n             EHAction::None => return uw::_URC_CONTINUE_UNWIND,\n-            EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => {\n+            EHAction::Cleanup(lpad) |\n+            EHAction::Catch(lpad) => {\n                 uw::_Unwind_SetGR(context, UNWIND_DATA_REG.0, exception_object as uintptr_t);\n                 uw::_Unwind_SetGR(context, UNWIND_DATA_REG.1, 0);\n                 uw::_Unwind_SetIP(context, lpad);\n@@ -182,7 +184,7 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n                                          exception_object: *mut uw::_Unwind_Exception,\n                                          context: *mut uw::_Unwind_Context)\n-                                        -> uw::_Unwind_Reason_Code {\n+                                         -> uw::_Unwind_Reason_Code {\n     let state = state as c_int;\n     let action = state & uw::_US_ACTION_MASK as c_int;\n     let search_phase = if action == uw::_US_VIRTUAL_UNWIND_FRAME as c_int {\n@@ -191,7 +193,7 @@ unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n         // we want to continue unwinding the stack, otherwise all our backtraces\n         // would end at __rust_try\n         if state & uw::_US_FORCE_UNWIND as c_int != 0 {\n-            return continue_unwind(exception_object, context)\n+            return continue_unwind(exception_object, context);\n         }\n         true\n     } else if action == uw::_US_UNWIND_FRAME_STARTING as c_int {\n@@ -207,7 +209,9 @@ unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n     // To preserve signatures of functions like _Unwind_GetLanguageSpecificData(), which\n     // take only the context pointer, GCC personality routines stash a pointer to exception_object\n     // in the context, using location reserved for ARM's \"scratch register\" (r12).\n-    uw::_Unwind_SetGR(context, uw::UNWIND_POINTER_REG, exception_object as uw::_Unwind_Ptr);\n+    uw::_Unwind_SetGR(context,\n+                      uw::UNWIND_POINTER_REG,\n+                      exception_object as uw::_Unwind_Ptr);\n     // ...A more principled approach would be to provide the full definition of ARM's\n     // _Unwind_Context in our libunwind bindings and fetch the required data from there directly,\n     // bypassing DWARF compatibility functions.\n@@ -223,7 +227,8 @@ unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n     } else {\n         match eh_action {\n             EHAction::None => return continue_unwind(exception_object, context),\n-            EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => {\n+            EHAction::Cleanup(lpad) |\n+            EHAction::Catch(lpad) => {\n                 uw::_Unwind_SetGR(context, UNWIND_DATA_REG.0, exception_object as uintptr_t);\n                 uw::_Unwind_SetGR(context, UNWIND_DATA_REG.1, 0);\n                 uw::_Unwind_SetIP(context, lpad);\n@@ -247,8 +252,8 @@ unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n     // defined in libgcc\n     extern \"C\" {\n         fn __gnu_unwind_frame(exception_object: *mut uw::_Unwind_Exception,\n-                                context: *mut uw::_Unwind_Context)\n-                                -> uw::_Unwind_Reason_Code;\n+                              context: *mut uw::_Unwind_Context)\n+                              -> uw::_Unwind_Reason_Code;\n     }\n }\n "}, {"sha": "d4906b556b31a5be0fd2e9922dd7c9ade6629f0e", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc1dcce7d7e934817c3bf3543ca8e7753960d0b/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=1cc1dcce7d7e934817c3bf3543ca8e7753960d0b", "patch": "@@ -129,7 +129,8 @@ unsafe fn find_landing_pad(dc: &c::DISPATCHER_CONTEXT) -> Option<usize> {\n     };\n     match find_eh_action(dc.HandlerData, &eh_ctx) {\n         EHAction::None => None,\n-        EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => Some(lpad),\n+        EHAction::Cleanup(lpad) |\n+        EHAction::Catch(lpad) => Some(lpad),\n         EHAction::Terminate => intrinsics::abort(),\n     }\n }"}]}