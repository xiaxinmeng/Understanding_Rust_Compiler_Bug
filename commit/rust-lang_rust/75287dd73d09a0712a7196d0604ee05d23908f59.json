{"sha": "75287dd73d09a0712a7196d0604ee05d23908f59", "node_id": "C_kwDOAAsO6NoAKDc1Mjg3ZGQ3M2QwOWEwNzEyYTcxOTZkMDYwNGVlMDVkMjM5MDhmNTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-13T20:59:45Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-14T09:54:28Z"}, "message": "remove function param that is only used in recursive of fn inner()", "tree": {"sha": "8ef63701598323ed1f626454d6dfbe2fdea5f2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef63701598323ed1f626454d6dfbe2fdea5f2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75287dd73d09a0712a7196d0604ee05d23908f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75287dd73d09a0712a7196d0604ee05d23908f59", "html_url": "https://github.com/rust-lang/rust/commit/75287dd73d09a0712a7196d0604ee05d23908f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75287dd73d09a0712a7196d0604ee05d23908f59/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d4d12b6ab97fae8b9a6f607473fe149f38f6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d4d12b6ab97fae8b9a6f607473fe149f38f6bd", "html_url": "https://github.com/rust-lang/rust/commit/f9d4d12b6ab97fae8b9a6f607473fe149f38f6bd"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "63aac64989dfaa4d4712bbade80c1cc4eee67b8c", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75287dd73d09a0712a7196d0604ee05d23908f59/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75287dd73d09a0712a7196d0604ee05d23908f59/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=75287dd73d09a0712a7196d0604ee05d23908f59", "patch": "@@ -77,7 +77,6 @@ use crate::mbe::{KleeneOp, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, NonterminalKind, Token};\n use rustc_parse::parser::{NtOrTt, Parser};\n-use rustc_session::parse::ParseSess;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n@@ -128,9 +127,8 @@ pub(super) enum MatcherLoc {\n     Eof,\n }\n \n-pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<MatcherLoc> {\n+pub(super) fn compute_locs(matcher: &[TokenTree]) -> Vec<MatcherLoc> {\n     fn inner(\n-        sess: &ParseSess,\n         tts: &[TokenTree],\n         locs: &mut Vec<MatcherLoc>,\n         next_metavar: &mut usize,\n@@ -147,7 +145,7 @@ pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<Match\n \n                     locs.push(MatcherLoc::Delimited);\n                     locs.push(MatcherLoc::Token { token: open_token });\n-                    inner(sess, &delimited.tts, locs, next_metavar, seq_depth);\n+                    inner(&delimited.tts, locs, next_metavar, seq_depth);\n                     locs.push(MatcherLoc::Token { token: close_token });\n                 }\n                 TokenTree::Sequence(_, seq) => {\n@@ -162,7 +160,7 @@ pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<Match\n                     let op = seq.kleene.op;\n                     let idx_first = locs.len();\n                     let idx_seq = idx_first - 1;\n-                    inner(sess, &seq.tts, locs, next_metavar, seq_depth + 1);\n+                    inner(&seq.tts, locs, next_metavar, seq_depth + 1);\n \n                     if let Some(separator) = &seq.separator {\n                         locs.push(MatcherLoc::SequenceSep { separator: separator.clone() });\n@@ -197,7 +195,7 @@ pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<Match\n \n     let mut locs = vec![];\n     let mut next_metavar = 0;\n-    inner(sess, matcher, &mut locs, &mut next_metavar, /* seq_depth */ 0);\n+    inner(matcher, &mut locs, &mut next_metavar, /* seq_depth */ 0);\n \n     // A final entry is needed for eof.\n     locs.push(MatcherLoc::Eof);"}, {"sha": "009b6bb1505190fb405323832c0bfc85dd9d2d1a", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75287dd73d09a0712a7196d0604ee05d23908f59/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75287dd73d09a0712a7196d0604ee05d23908f59/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=75287dd73d09a0712a7196d0604ee05d23908f59", "patch": "@@ -435,7 +435,7 @@ pub fn compile_declarative_macro(\n         ),\n     ];\n     // Convert it into `MatcherLoc` form.\n-    let argument_gram = mbe::macro_parser::compute_locs(&sess.parse_sess, &argument_gram);\n+    let argument_gram = mbe::macro_parser::compute_locs(&argument_gram);\n \n     let parser = Parser::new(&sess.parse_sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n     let mut tt_parser =\n@@ -540,7 +540,7 @@ pub fn compile_declarative_macro(\n                 // Ignore the delimiters around the matcher.\n                 match lhs {\n                     mbe::TokenTree::Delimited(_, delimited) => {\n-                        mbe::macro_parser::compute_locs(&sess.parse_sess, &delimited.tts)\n+                        mbe::macro_parser::compute_locs(&delimited.tts)\n                     }\n                     _ => sess.parse_sess.span_diagnostic.span_bug(def.span, \"malformed macro lhs\"),\n                 }"}]}