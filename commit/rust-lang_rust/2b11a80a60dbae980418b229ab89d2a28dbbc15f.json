{"sha": "2b11a80a60dbae980418b229ab89d2a28dbbc15f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTFhODBhNjBkYmFlOTgwNDE4YjIyOWFiODlkMmEyOGRiYmMxNWY=", "commit": {"author": {"name": "Liigo Zhuang", "email": "com.liigo@gmail.com", "date": "2015-01-16T12:56:26Z"}, "committer": {"name": "Liigo Zhuang", "email": "com.liigo@gmail.com", "date": "2015-01-21T13:31:09Z"}, "message": "address review comments: reuse Escape etc.", "tree": {"sha": "f250a2c384d0ca7b873ee008f47ea53d19b78fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f250a2c384d0ca7b873ee008f47ea53d19b78fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b11a80a60dbae980418b229ab89d2a28dbbc15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b11a80a60dbae980418b229ab89d2a28dbbc15f", "html_url": "https://github.com/rust-lang/rust/commit/2b11a80a60dbae980418b229ab89d2a28dbbc15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b11a80a60dbae980418b229ab89d2a28dbbc15f/comments", "author": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ebb6053edd7b7d6e8ab5f59dd093f53db7ae44", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ebb6053edd7b7d6e8ab5f59dd093f53db7ae44", "html_url": "https://github.com/rust-lang/rust/commit/17ebb6053edd7b7d6e8ab5f59dd093f53db7ae44"}], "stats": {"total": 25, "additions": 4, "deletions": 21}, "files": [{"sha": "31c01e7777a226b240fb7cbaa78e8f9016399c41", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b11a80a60dbae980418b229ab89d2a28dbbc15f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11a80a60dbae980418b229ab89d2a28dbbc15f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2b11a80a60dbae980418b229ab89d2a28dbbc15f", "patch": "@@ -471,17 +471,14 @@ impl<'a> fmt::String for MarkdownWithToc<'a> {\n }\n \n pub fn plain_summary_line(md: &str) -> String {\n-    extern \"C\" fn link(_ob: *mut hoedown_buffer,\n+    extern fn link(_ob: *mut hoedown_buffer,\n                        _link: *const hoedown_buffer,\n                        _title: *const hoedown_buffer,\n                        content: *const hoedown_buffer,\n                        opaque: *mut libc::c_void) -> libc::c_int\n     {\n         unsafe {\n             if !content.is_null() && (*content).size > 0 {\n-                // FIXME(liigo): I don't know why the parameter `_ob` is\n-                // not the value passed in by `hoedown_document_render`.\n-                // I have to manually pass in `ob` through `opaque` currently.\n                 let ob = opaque as *mut hoedown_buffer;\n                 hoedown_buffer_put(ob, (*content).data as *const libc::c_char,\n                                    (*content).size);\n@@ -490,7 +487,7 @@ pub fn plain_summary_line(md: &str) -> String {\n         1\n     }\n \n-    extern \"C\" fn normal_text(_ob: *mut hoedown_buffer,\n+    extern fn normal_text(_ob: *mut hoedown_buffer,\n                               text: *const hoedown_buffer,\n                               opaque: *mut libc::c_void)\n     {"}, {"sha": "480c61534e6bff2be7f2d6ff643c2d4949137e8e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b11a80a60dbae980418b229ab89d2a28dbbc15f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11a80a60dbae980418b229ab89d2a28dbbc15f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2b11a80a60dbae980418b229ab89d2a28dbbc15f", "patch": "@@ -64,6 +64,7 @@ use html::item_type::ItemType;\n use html::layout;\n use html::markdown::Markdown;\n use html::markdown;\n+use html::escape::Escape;\n use stability_summary;\n \n /// A pair of name and its optional document.\n@@ -2197,21 +2198,6 @@ fn item_typedef(w: &mut fmt::Formatter, it: &clean::Item,\n     document(w, it)\n }\n \n-fn escape_title(title: &str) -> String {\n-    let title = markdown::plain_summary_line(title);\n-    let mut result = String::with_capacity(title.len());\n-    for c in title.chars() {\n-        match c {\n-            '<' => result.push_str(\"&lt;\"),\n-            '>' => result.push_str(\"&gt;\"),\n-            '\"' => result.push_str(\"&quot;\"),\n-            '\\'' => result.push_str(\"&#39;\"),\n-            _ => result.push(c),\n-        }\n-    }\n-    result\n-}\n-\n impl<'a> fmt::String for Sidebar<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let cx = self.cx;\n@@ -2251,7 +2237,7 @@ impl<'a> fmt::String for Sidebar<'a> {\n                        } else {\n                            format!(\"{}.{}.html\", short, name.as_slice())\n                        },\n-                       title = escape_title(doc.as_ref().unwrap().as_slice()),\n+                       title = Escape(doc.as_ref().unwrap().as_slice()),\n                        name = name.as_slice()));\n             }\n             try!(write!(w, \"</div>\"));"}]}