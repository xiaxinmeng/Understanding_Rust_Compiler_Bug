{"sha": "0487b58f9afc249e850dc1bf2c8ae6d660237244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODdiNThmOWFmYzI0OWU4NTBkYzFiZjJjOGFlNmQ2NjAyMzcyNDQ=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-08T12:33:34Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-08T13:22:52Z"}, "message": "Fix macro expansion in try_err lint", "tree": {"sha": "f00255089321109ac046f6f765f392ac01db65f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f00255089321109ac046f6f765f392ac01db65f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0487b58f9afc249e850dc1bf2c8ae6d660237244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0487b58f9afc249e850dc1bf2c8ae6d660237244", "html_url": "https://github.com/rust-lang/rust/commit/0487b58f9afc249e850dc1bf2c8ae6d660237244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0487b58f9afc249e850dc1bf2c8ae6d660237244/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b041511b5fcd386c4ae74a30b60a5081f8717fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b041511b5fcd386c4ae74a30b60a5081f8717fbe", "html_url": "https://github.com/rust-lang/rust/commit/b041511b5fcd386c4ae74a30b60a5081f8717fbe"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "3734b609861b973b9506d82a87e6857ee85dbff3", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0487b58f9afc249e850dc1bf2c8ae6d660237244/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487b58f9afc249e850dc1bf2c8ae6d660237244/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=0487b58f9afc249e850dc1bf2c8ae6d660237244", "patch": "@@ -1,10 +1,11 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro_or_desugar, match_qpath, paths, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::Ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n+use syntax::source_map::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usages of `Err(x)?`.\n@@ -67,10 +68,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n \n             then {\n                 let err_type = cx.tables.expr_ty(err_arg);\n+                let span = if in_macro_or_desugar(err_arg.span) {\n+                    span_to_outer_expn(err_arg.span)\n+                } else {\n+                    err_arg.span\n+                };\n                 let suggestion = if err_type == return_type {\n-                    format!(\"return Err({})\", snippet(cx, err_arg.span, \"_\"))\n+                    format!(\"return Err({})\", snippet(cx, span, \"_\"))\n                 } else {\n-                    format!(\"return Err({}.into())\", snippet(cx, err_arg.span, \"_\"))\n+                    format!(\"return Err({}.into())\", snippet(cx, span, \"_\"))\n                 };\n \n                 span_lint_and_sugg(\n@@ -87,6 +93,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n     }\n }\n \n+fn span_to_outer_expn(span: Span) -> Span {\n+    let mut span = span;\n+    while let Some(expr) = span.ctxt().outer_expn_info() {\n+        span = expr.call_site;\n+    }\n+    span\n+}\n+\n // In order to determine whether to suggest `.into()` or not, we need to find the error type the\n // function returns. To do that, we look for the From::from call (see tree above), and capture\n // its output type."}, {"sha": "a2087316e3768f622787f45d421e2621f1efbe6e", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0487b58f9afc249e850dc1bf2c8ae6d660237244/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0487b58f9afc249e850dc1bf2c8ae6d660237244/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=0487b58f9afc249e850dc1bf2c8ae6d660237244", "patch": "@@ -78,3 +78,22 @@ fn main() {\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n }\n+\n+macro_rules! bar {\n+    () => {\n+        String::from(\"aasdfasdfasdfa\")\n+    };\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        bar!()\n+    };\n+}\n+\n+pub fn macro_inside(fail: bool) -> Result<i32, String> {\n+    if fail {\n+        return Err(foo!());\n+    }\n+    Ok(0)\n+}"}, {"sha": "5ef1b615dc70232f7ce0d17f0aa71dcec69018ba", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0487b58f9afc249e850dc1bf2c8ae6d660237244/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0487b58f9afc249e850dc1bf2c8ae6d660237244/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=0487b58f9afc249e850dc1bf2c8ae6d660237244", "patch": "@@ -78,3 +78,22 @@ fn main() {\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n }\n+\n+macro_rules! bar {\n+    () => {\n+        String::from(\"aasdfasdfasdfa\")\n+    };\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        bar!()\n+    };\n+}\n+\n+pub fn macro_inside(fail: bool) -> Result<i32, String> {\n+    if fail {\n+        Err(foo!())?;\n+    }\n+    Ok(0)\n+}"}, {"sha": "b915d6b601d12f2d0fea5c682b9cb88349944945", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0487b58f9afc249e850dc1bf2c8ae6d660237244/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0487b58f9afc249e850dc1bf2c8ae6d660237244/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=0487b58f9afc249e850dc1bf2c8ae6d660237244", "patch": "@@ -28,5 +28,11 @@ error: returning an `Err(_)` with the `?` operator\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n-error: aborting due to 4 previous errors\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:96:9\n+   |\n+LL |         Err(foo!())?;\n+   |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n+\n+error: aborting due to 5 previous errors\n "}]}