{"sha": "a3b034938ebe12b29ef37ff6e54bad3c574464be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjAzNDkzOGViZTEyYjI5ZWYzN2ZmNmU1NGJhZDNjNTc0NDY0YmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-09T15:55:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-09T15:55:42Z"}, "message": "Merge #8781\n\n8781: internal: rewrite **Repalce impl Trait** assist to mutable syntax trees r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1ed28e5499d4db6948c18f96e2136a2f61f5e222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed28e5499d4db6948c18f96e2136a2f61f5e222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b034938ebe12b29ef37ff6e54bad3c574464be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmAX+CRBK7hj4Ov3rIwAAo5EIAAHPgMwMU9DEADcRiIFO467E\nQ8CtSwuNYyhF3rPLAKE/qUYNhrocwRcPZFKr97aAuD1qdxzW13SFp75iEQNNYp7z\npc4uvA1489c2S1d5ACJuYQ8ajcysT0cEj1QM11ereN6CiRPjSEfhJAd5I4cf/wgu\n44upLHJ4q3NtWCottMNCAPYKSbeZPnBGsWZ8JE5Se3a3tqcyt14Im+k2/uXZ7swR\nqg4q466k8f5mpl7eUdG64XM0YJVbJtPbDKwJhBKuZ9DTiOCWDxZFTtmvZCC3hPau\nKC3tSjMGnQYtfzQpbdRdn9lA+QCTRfR18Xj8EZrFQpOqorgcLVBimUfNBD2oMJA=\n=M4XT\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ed28e5499d4db6948c18f96e2136a2f61f5e222\nparent 0900beeaa2ca4b9e91d51165545935d4e1db7bb6\nparent 5342800147679a0ded5546322c94aa6339d58fbc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620575742 +0000\ncommitter GitHub <noreply@github.com> 1620575742 +0000\n\nMerge #8781\n\n8781: internal: rewrite **Repalce impl Trait** assist to mutable syntax trees r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b034938ebe12b29ef37ff6e54bad3c574464be", "html_url": "https://github.com/rust-lang/rust/commit/a3b034938ebe12b29ef37ff6e54bad3c574464be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b034938ebe12b29ef37ff6e54bad3c574464be/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0900beeaa2ca4b9e91d51165545935d4e1db7bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0900beeaa2ca4b9e91d51165545935d4e1db7bb6", "html_url": "https://github.com/rust-lang/rust/commit/0900beeaa2ca4b9e91d51165545935d4e1db7bb6"}, {"sha": "5342800147679a0ded5546322c94aa6339d58fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5342800147679a0ded5546322c94aa6339d58fbc", "html_url": "https://github.com/rust-lang/rust/commit/5342800147679a0ded5546322c94aa6339d58fbc"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "61dcbb399ddc1aaf7e2e2b977548a26b6f8ab8a8", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryFrom;\n+\n use ide_assists::utils::extract_trivial_expression;\n use itertools::Itertools;\n use syntax::{\n@@ -65,6 +67,14 @@ fn remove_newlines(edit: &mut TextEditBuilder, token: &SyntaxToken, range: TextR\n \n fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextSize) {\n     if token.kind() != WHITESPACE || token.text().bytes().filter(|&b| b == b'\\n').count() != 1 {\n+        let n_spaces_after_line_break = {\n+            let suff = &token.text()[TextRange::new(\n+                offset - token.text_range().start() + TextSize::of('\\n'),\n+                TextSize::of(token.text()),\n+            )];\n+            suff.bytes().take_while(|&b| b == b' ').count()\n+        };\n+\n         let mut no_space = false;\n         if let Some(string) = ast::String::cast(token.clone()) {\n             if let Some(range) = string.open_quote_text_range() {\n@@ -73,18 +83,13 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n             }\n             if let Some(range) = string.close_quote_text_range() {\n                 cov_mark::hit!(join_string_literal_close_quote);\n-                no_space |= range.start() == offset + TextSize::of('\\n');\n+                no_space |= range.start()\n+                    == offset\n+                        + TextSize::of('\\n')\n+                        + TextSize::try_from(n_spaces_after_line_break).unwrap();\n             }\n         }\n \n-        let n_spaces_after_line_break = {\n-            let suff = &token.text()[TextRange::new(\n-                offset - token.text_range().start() + TextSize::of('\\n'),\n-                TextSize::of(token.text()),\n-            )];\n-            suff.bytes().take_while(|&b| b == b' ').count()\n-        };\n-\n         let range = TextRange::at(offset, ((n_spaces_after_line_break + 1) as u32).into());\n         let replace_with = if no_space { \"\" } else { \" \" };\n         edit.replace(range, replace_with.to_string());\n@@ -833,6 +838,19 @@ fn main() {\n fn main() {\n     $0\"hello\";\n }\n+\"#,\n+            );\n+            check_join_lines(\n+                r#\"\n+fn main() {\n+    $0r\"hello\n+    \";\n+}\n+\"#,\n+                r#\"\n+fn main() {\n+    $0r\"hello\";\n+}\n \"#,\n             );\n         }"}, {"sha": "ae084c86c2f57c624a1f65b99db6862aed3ae5fa", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let var_name = match &field_shorthand {\n                 Some(it) => it.to_string(),\n-                None => suggest_name::variable(&to_extract, &ctx.sema),\n+                None => suggest_name::for_variable(&to_extract, &ctx.sema),\n             };\n             let expr_range = match &field_shorthand {\n                 Some(it) => it.syntax().text_range().cover(to_extract.syntax().text_range()),"}, {"sha": "cb71ca8bdc89df6f25254a1379624475d511460e", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -139,12 +139,12 @@ fn generate_unique_lifetime_param_name(\n \n fn add_lifetime_param(type_params: ast::GenericParamList, new_lifetime_param: char) {\n     let generic_param =\n-        make::generic_param(format!(\"'{}\", new_lifetime_param), None).clone_for_update();\n+        make::generic_param(&format!(\"'{}\", new_lifetime_param), None).clone_for_update();\n     type_params.add_generic_param(generic_param);\n }\n \n fn make_ast_lifetime(new_lifetime_param: char) -> ast::Lifetime {\n-    make::generic_param(format!(\"'{}\", new_lifetime_param), None)\n+    make::generic_param(&format!(\"'{}\", new_lifetime_param), None)\n         .syntax()\n         .descendants()\n         .find_map(ast::Lifetime::cast)"}, {"sha": "16cae028143d6c825b64c0fb87dc479098ba8a77", "filename": "crates/ide_assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 49, "deletions": 71, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -1,6 +1,9 @@\n-use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, GenericParamsOwner};\n+use syntax::{\n+    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode},\n+    ted,\n+};\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_impl_trait_with_generic\n //\n@@ -17,30 +20,29 @@ pub(crate) fn replace_impl_trait_with_generic(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n ) -> Option<()> {\n-    let type_impl_trait = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n-    let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n-    let type_fn = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+    let impl_trait_type = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n+    let param = impl_trait_type.syntax().parent().and_then(ast::Param::cast)?;\n+    let fn_ = param.syntax().ancestors().find_map(ast::Fn::cast)?;\n \n-    let impl_trait_ty = type_impl_trait.type_bound_list()?;\n+    let type_bound_list = impl_trait_type.type_bound_list()?;\n \n-    let target = type_fn.syntax().text_range();\n+    let target = fn_.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_impl_trait_with_generic\", AssistKind::RefactorRewrite),\n         \"Replace impl trait with generic\",\n         target,\n         |edit| {\n-            let generic_letter = impl_trait_ty.to_string().chars().next().unwrap().to_string();\n+            let impl_trait_type = edit.make_ast_mut(impl_trait_type);\n+            let fn_ = edit.make_ast_mut(fn_);\n \n-            let generic_param_list = type_fn\n-                .generic_param_list()\n-                .unwrap_or_else(|| make::generic_param_list(None))\n-                .append_param(make::generic_param(generic_letter.clone(), Some(impl_trait_ty)));\n+            let type_param_name = suggest_name::for_generic_parameter(&impl_trait_type);\n \n-            let new_type_fn = type_fn\n-                .replace_descendant::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter))\n-                .with_generic_param_list(generic_param_list);\n+            let type_param =\n+                make::generic_param(&type_param_name, Some(type_bound_list)).clone_for_update();\n+            let new_ty = make::ty(&type_param_name).clone_for_update();\n \n-            edit.replace_ast(type_fn.clone(), new_type_fn);\n+            ted::replace(impl_trait_type.syntax(), new_ty.syntax());\n+            fn_.get_or_create_generic_param_list().add_generic_param(type_param)\n         },\n     )\n }\n@@ -55,51 +57,35 @@ mod tests {\n     fn replace_impl_trait_with_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<G>(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<G, B: Bar>(bar: B) {}\n-            \"#,\n+            r#\"fn foo<G>(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<G, B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n     #[test]\n     fn replace_impl_trait_without_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<B: Bar>(bar: B) {}\n-            \"#,\n+            r#\"fn foo(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n     #[test]\n     fn replace_two_impl_trait_with_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\n-            \"#,\n+            r#\"fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\"#,\n         );\n     }\n \n     #[test]\n     fn replace_impl_trait_with_empty_generic_params() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<>(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<B: Bar>(bar: B) {}\n-            \"#,\n+            r#\"fn foo<>(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<B: Bar>(bar: B) {}\"#,\n         );\n     }\n \n@@ -108,13 +94,13 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<\n-            >(bar: $0impl Bar) {}\n-            \"#,\n+fn foo<\n+>(bar: $0impl Bar) {}\n+\"#,\n             r#\"\n-            fn foo<B: Bar\n-            >(bar: B) {}\n-            \"#,\n+fn foo<B: Bar\n+>(bar: B) {}\n+\"#,\n         );\n     }\n \n@@ -123,12 +109,8 @@ mod tests {\n     fn replace_impl_trait_with_exist_generic_letter() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo<B>(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<B, C: Bar>(bar: C) {}\n-            \"#,\n+            r#\"fn foo<B>(bar: $0impl Bar) {}\"#,\n+            r#\"fn foo<B, C: Bar>(bar: C) {}\"#,\n         );\n     }\n \n@@ -137,32 +119,28 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<\n-                G: Foo,\n-                F,\n-                H,\n-            >(bar: $0impl Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<\n-                G: Foo,\n-                F,\n-                H, B: Bar\n-            >(bar: B) {}\n-            \"#,\n+fn foo<\n+    G: Foo,\n+    F,\n+    H,\n+>(bar: $0impl Bar) {}\n+\"#,\n+            r#\"\n+fn foo<\n+    G: Foo,\n+    F,\n+    H, B: Bar,\n+>(bar: B) {}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn replace_impl_trait_multiple() {\n         check_assist(\n             replace_impl_trait_with_generic,\n-            r#\"\n-            fn foo(bar: $0impl Foo + Bar) {}\n-            \"#,\n-            r#\"\n-            fn foo<F: Foo + Bar>(bar: F) {}\n-            \"#,\n+            r#\"fn foo(bar: $0impl Foo + Bar) {}\"#,\n+            r#\"fn foo<F: Foo + Bar>(bar: F) {}\"#,\n         );\n     }\n }"}, {"sha": "b3aabeab37adc77cd146275250ae3c0dbbacf229", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -6,7 +6,7 @@ use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, NameOwner},\n-    match_ast, AstNode,\n+    match_ast, AstNode, SmolStr,\n };\n \n /// Trait names, that will be ignored when in `impl Trait` and `dyn Trait`\n@@ -57,6 +57,14 @@ const USELESS_METHODS: &[&str] = &[\n     \"iter_mut\",\n ];\n \n+pub(crate) fn for_generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {\n+    let c = ty\n+        .type_bound_list()\n+        .and_then(|bounds| bounds.syntax().text().char_at(0.into()))\n+        .unwrap_or('T');\n+    c.encode_utf8(&mut [0; 4]).into()\n+}\n+\n /// Suggest name of variable for given expression\n ///\n /// **NOTE**: it is caller's responsibility to guarantee uniqueness of the name.\n@@ -75,7 +83,8 @@ const USELESS_METHODS: &[&str] = &[\n /// It also applies heuristics to filter out less informative names\n ///\n /// Currently it sticks to the first name found.\n-pub(crate) fn variable(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> String {\n+// FIXME: Microoptimize and return a `SmolStr` here.\n+pub(crate) fn for_variable(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> String {\n     // `from_param` does not benifit from stripping\n     // it need the largest context possible\n     // so we check firstmost\n@@ -276,7 +285,7 @@ mod tests {\n             frange.range,\n             \"selection is not an expression(yet contained in one)\"\n         );\n-        let name = variable(&expr, &sema);\n+        let name = for_variable(&expr, &sema);\n         assert_eq!(&name, expected);\n     }\n "}, {"sha": "168355555778bdc5e906bcf229cf3b492eae5539", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -195,18 +195,13 @@ impl ast::GenericParamList {\n     pub fn add_generic_param(&self, generic_param: ast::GenericParam) {\n         match self.generic_params().last() {\n             Some(last_param) => {\n-                let mut elems = Vec::new();\n-                if !last_param\n-                    .syntax()\n-                    .siblings_with_tokens(Direction::Next)\n-                    .any(|it| it.kind() == T![,])\n-                {\n-                    elems.push(make::token(T![,]).into());\n-                    elems.push(make::tokens::single_space().into());\n-                };\n-                elems.push(generic_param.syntax().clone().into());\n-                let after_last_param = Position::after(last_param.syntax());\n-                ted::insert_all(after_last_param, elems);\n+                let position = Position::after(last_param.syntax());\n+                let elements = vec![\n+                    make::token(T![,]).into(),\n+                    make::tokens::single_space().into(),\n+                    generic_param.syntax().clone().into(),\n+                ];\n+                ted::insert_all(position, elements);\n             }\n             None => {\n                 let after_l_angle = Position::after(self.l_angle_token().unwrap());"}, {"sha": "2289d8f3e6af26484c38e5b406f0114835eae0db", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b034938ebe12b29ef37ff6e54bad3c574464be/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=a3b034938ebe12b29ef37ff6e54bad3c574464be", "patch": "@@ -475,8 +475,8 @@ pub fn param_list(\n     };\n     ast_from_text(&list)\n }\n-\n-pub fn generic_param(name: String, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n+// FIXME: s/&str/ast:Name\n+pub fn generic_param(name: &str, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n     let bound = match ty {\n         Some(it) => format!(\": {}\", it),\n         None => String::new(),"}]}