{"sha": "1ed1c14b2b4d14f5869ee4c73260f89ff60aca17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZDFjMTRiMmI0ZDE0ZjU4NjllZTRjNzMyNjBmODlmZjYwYWNhMTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-10T11:24:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T11:24:52Z"}, "message": "Merge #7229\n\n7229: Cleanup r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "da33c3d7ad226421e4c760cf08491cfe0fb30643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da33c3d7ad226421e4c760cf08491cfe0fb30643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+uQECRBK7hj4Ov3rIwAAdHIIAHZXWRF/xlJaogd7LNOsrIWJ\nHxf1P4OS3AZr7cojdol5B6yV4qEEPVeR3CdUyNIFDYyU2SX6mIhJGoNmQUABBsiA\nsntajzVZ/K8WZWAn3xBqgfchYC3Dx4VxtkvoHT7v0JKWUy1DqKwuTylWhNiZspsa\nR0NtjbGN+Fzvr4lOmXbtBxFrGQStphjuwjCwugVNS4y7k3J+/+22uxlSRQte1Qb9\nYMRFJP4TuqPEi4lSv4ZpFAc8SvUJm1Fv79UfrcGgO2laKWchzH510WpAJ4GLkS5X\nodzzEXPCDApiHCu8wVtWfXz0qKPdB9/qSVkV3TAmm9/CnyZxZfO6qcJpd0bMXF4=\n=39N1\n-----END PGP SIGNATURE-----\n", "payload": "tree da33c3d7ad226421e4c760cf08491cfe0fb30643\nparent 6a0a47dd1492975959f6719202c3fb175df0349c\nparent 3a6ae42eacabeef0332273db216bc287d4fff613\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610277892 +0000\ncommitter GitHub <noreply@github.com> 1610277892 +0000\n\nMerge #7229\n\n7229: Cleanup r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17", "html_url": "https://github.com/rust-lang/rust/commit/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0a47dd1492975959f6719202c3fb175df0349c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a47dd1492975959f6719202c3fb175df0349c", "html_url": "https://github.com/rust-lang/rust/commit/6a0a47dd1492975959f6719202c3fb175df0349c"}, {"sha": "3a6ae42eacabeef0332273db216bc287d4fff613", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6ae42eacabeef0332273db216bc287d4fff613", "html_url": "https://github.com/rust-lang/rust/commit/3a6ae42eacabeef0332273db216bc287d4fff613"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "939efa43ff13a38763477d4b2d26fa576d3c5871", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1ed1c14b2b4d14f5869ee4c73260f89ff60aca17", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     doc_links::{remove_links, rewrite_links},\n     markdown_remove::remove_markdown,\n     markup::Markup,\n-    runnables::{runnable, runnable_fn},\n+    runnables::{runnable_fn, runnable_mod},\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n \n@@ -192,7 +192,7 @@ fn runnable_action(\n         Definition::ModuleDef(it) => match it {\n             ModuleDef::Module(it) => match it.definition_source(sema.db).value {\n                 ModuleSource::Module(it) => {\n-                    runnable(&sema, it.syntax().clone()).map(|it| HoverAction::Runnable(it))\n+                    runnable_mod(&sema, it).map(|it| HoverAction::Runnable(it))\n                 }\n                 _ => None,\n             },"}, {"sha": "3a1e204db545fc3f1aa13395ea261df718f7c6ee", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed1c14b2b4d14f5869ee4c73260f89ff60aca17/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=1ed1c14b2b4d14f5869ee4c73260f89ff60aca17", "patch": "@@ -96,21 +96,23 @@ impl Runnable {\n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(file_id);\n-    source_file.syntax().descendants().filter_map(|i| runnable(&sema, i)).collect()\n-}\n-\n-pub(crate) fn runnable(sema: &Semantics<RootDatabase>, item: SyntaxNode) -> Option<Runnable> {\n-    let runnable_item = match_ast! {\n-        match (item.clone()) {\n-            ast::Fn(func) => {\n-                let def = sema.to_def(&func)?;\n-                runnable_fn(sema, def)\n-            },\n-            ast::Module(it) => runnable_mod(sema, it),\n-            _ => None,\n-        }\n-    };\n-    runnable_item.or_else(|| runnable_doctest(sema, item))\n+    source_file\n+        .syntax()\n+        .descendants()\n+        .filter_map(|item| {\n+            let runnable = match_ast! {\n+                match item {\n+                    ast::Fn(func) => {\n+                        let def = sema.to_def(&func)?;\n+                        runnable_fn(&sema, def)\n+                    },\n+                    ast::Module(it) => runnable_mod(&sema, it),\n+                    _ => None,\n+                }\n+            };\n+            runnable.or_else(|| runnable_doctest(&sema, item))\n+        })\n+        .collect()\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n@@ -145,6 +147,29 @@ pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) ->\n     Some(Runnable { nav, kind, cfg })\n }\n \n+pub(crate) fn runnable_mod(\n+    sema: &Semantics<RootDatabase>,\n+    module: ast::Module,\n+) -> Option<Runnable> {\n+    if !has_test_function_or_multiple_test_submodules(&module) {\n+        return None;\n+    }\n+    let module_def = sema.to_def(&module)?;\n+\n+    let path = module_def\n+        .path_to_root(sema.db)\n+        .into_iter()\n+        .rev()\n+        .filter_map(|it| it.name(sema.db))\n+        .join(\"::\");\n+\n+    let def = sema.to_def(&module)?;\n+    let attrs = def.attrs(sema.db);\n+    let cfg = attrs.cfg();\n+    let nav = module_def.to_nav(sema.db);\n+    Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n+}\n+\n fn runnable_doctest(sema: &Semantics<RootDatabase>, item: SyntaxNode) -> Option<Runnable> {\n     match_ast! {\n         match item {\n@@ -253,26 +278,6 @@ fn has_runnable_doc_test(attrs: &hir::Attrs) -> bool {\n     })\n }\n \n-fn runnable_mod(sema: &Semantics<RootDatabase>, module: ast::Module) -> Option<Runnable> {\n-    if !has_test_function_or_multiple_test_submodules(&module) {\n-        return None;\n-    }\n-    let module_def = sema.to_def(&module)?;\n-\n-    let path = module_def\n-        .path_to_root(sema.db)\n-        .into_iter()\n-        .rev()\n-        .filter_map(|it| it.name(sema.db))\n-        .join(\"::\");\n-\n-    let def = sema.to_def(&module)?;\n-    let attrs = def.attrs(sema.db);\n-    let cfg = attrs.cfg();\n-    let nav = module_def.to_nav(sema.db);\n-    Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n-}\n-\n // We could create runnables for modules with number_of_test_submodules > 0,\n // but that bloats the runnables for no real benefit, since all tests can be run by the submodule already\n fn has_test_function_or_multiple_test_submodules(module: &ast::Module) -> bool {"}]}