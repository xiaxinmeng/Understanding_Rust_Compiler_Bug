{"sha": "f5e68ccd09c774c4395ad0eed0b171b5f1cf678b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTY4Y2NkMDljNzc0YzQzOTVhZDBlZWQwYjE3MWI1ZjFjZjY3OGI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-06T04:36:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-10T23:03:46Z"}, "message": "Optimize `shallow_resolve_changed`.\n\nIt can be made even more specialized.", "tree": {"sha": "ed250036ee14405621ee18702d365b15d8e0a849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed250036ee14405621ee18702d365b15d8e0a849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e68ccd09c774c4395ad0eed0b171b5f1cf678b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e68ccd09c774c4395ad0eed0b171b5f1cf678b", "html_url": "https://github.com/rust-lang/rust/commit/f5e68ccd09c774c4395ad0eed0b171b5f1cf678b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e68ccd09c774c4395ad0eed0b171b5f1cf678b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "html_url": "https://github.com/rust-lang/rust/commit/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "fca7704d5eefe4fc077c980c6a59bb0dda5fd968", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5e68ccd09c774c4395ad0eed0b171b5f1cf678b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e68ccd09c774c4395ad0eed0b171b5f1cf678b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f5e68ccd09c774c4395ad0eed0b171b5f1cf678b", "patch": "@@ -1617,38 +1617,40 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n     // `resolver.shallow_resolve(ty) != ty`, but more efficient. It's always\n     // inlined, despite being large, because it has only two call sites that\n     // are extremely hot.\n+    //\n+    // Note that `typ` is always a `ty::Infer(_)`.\n     #[inline(always)]\n-    pub fn shallow_resolve_changed(&mut self, typ: Ty<'tcx>) -> bool {\n+    pub fn shallow_resolve_changed(&self, typ: Ty<'tcx>) -> bool {\n         match typ.kind {\n             ty::Infer(ty::TyVar(v)) => {\n                 use self::type_variable::TypeVariableValue;\n \n-                // See the comment in `shallow_resolve()`.\n+                // If `inlined_probe` returns a `Known` value it never matches\n+                // `typ`.\n                 match self.infcx.type_variables.borrow_mut().inlined_probe(v) {\n-                    TypeVariableValue::Known { value: t } => self.fold_ty(t) != typ,\n                     TypeVariableValue::Unknown { .. } => false,\n+                    TypeVariableValue::Known { .. } => true,\n                 }\n             }\n \n             ty::Infer(ty::IntVar(v)) => {\n-                match self.infcx.int_unification_table.borrow_mut().inlined_probe_value(v) {\n-                    Some(v) => v.to_type(self.infcx.tcx) != typ,\n-                    None => false,\n-                }\n+                // If inlined_probe_value returns a value it's always a\n+                // `ty::Int(_)` or `ty::UInt(_)`, which nevers matches a\n+                // `ty::Infer(_)`.\n+                self.infcx.int_unification_table.borrow_mut().inlined_probe_value(v).is_some()\n             }\n \n             ty::Infer(ty::FloatVar(v)) => {\n+                // If inlined_probe_value returns a value it's always a\n+                // `ty::Float(_)`, which nevers matches a `ty::Infer(_)`.\n+                //\n                 // Not `inlined_probe_value(v)` because this call site is colder.\n-                match self.infcx.float_unification_table.borrow_mut().probe_value(v) {\n-                    Some(v) => v.to_type(self.infcx.tcx) != typ,\n-                    None => false,\n-                }\n+                self.infcx.float_unification_table.borrow_mut().probe_value(v).is_some()\n             }\n \n-            _ => false,\n+            _ => unreachable!(),\n         }\n     }\n-\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {"}]}