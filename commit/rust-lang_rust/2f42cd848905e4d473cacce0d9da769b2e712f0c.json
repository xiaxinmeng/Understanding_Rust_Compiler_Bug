{"sha": "2f42cd848905e4d473cacce0d9da769b2e712f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDJjZDg0ODkwNWU0ZDQ3M2NhY2NlMGQ5ZGE3NjliMmU3MTJmMGM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-03T18:55:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-03T18:55:41Z"}, "message": "rustc_mir: use Local in ProjectionElem::Index.", "tree": {"sha": "ce1bf0fcc9c822e2ef31a1a5d7e0e169b1d281a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce1bf0fcc9c822e2ef31a1a5d7e0e169b1d281a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f42cd848905e4d473cacce0d9da769b2e712f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f42cd848905e4d473cacce0d9da769b2e712f0c", "html_url": "https://github.com/rust-lang/rust/commit/2f42cd848905e4d473cacce0d9da769b2e712f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f42cd848905e4d473cacce0d9da769b2e712f0c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9119252438a0f6c6c7a289bac91dd9600d45dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9119252438a0f6c6c7a289bac91dd9600d45dd0", "html_url": "https://github.com/rust-lang/rust/commit/c9119252438a0f6c6c7a289bac91dd9600d45dd0"}], "stats": {"total": 139, "additions": 65, "deletions": 74}, "files": [{"sha": "4732f99c5c4804cdb2d78237127d40769f6a722d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -1077,12 +1077,12 @@ pub enum ProjectionElem<'tcx, V, T> {\n }\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n-/// and the index is an operand.\n-pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Operand<'tcx>, Ty<'tcx>>;\n+/// and the index is a local.\n+pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Local, Ty<'tcx>>;\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n-/// and the index is an operand.\n-pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Operand<'tcx>, Ty<'tcx>>;\n+/// and the index is a local.\n+pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n newtype_index!(Field, \"field\");\n \n@@ -1099,7 +1099,7 @@ impl<'tcx> Lvalue<'tcx> {\n         self.elem(ProjectionElem::Downcast(adt_def, variant_index))\n     }\n \n-    pub fn index(self, index: Operand<'tcx>) -> Lvalue<'tcx> {\n+    pub fn index(self, index: Local) -> Lvalue<'tcx> {\n         self.elem(ProjectionElem::Index(index))\n     }\n "}, {"sha": "5394d42aeaa5a04c4c0a82887686af1a0bf63f17", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -664,8 +664,8 @@ macro_rules! make_mir_visitor {\n                     ProjectionElem::Field(_field, ref $($mutability)* ty) => {\n                         self.visit_ty(ty, Lookup::Loc(location));\n                     }\n-                    ProjectionElem::Index(ref $($mutability)* operand) => {\n-                        self.visit_operand(operand, location);\n+                    ProjectionElem::Index(ref $($mutability)* local) => {\n+                        self.visit_local(local, LvalueContext::Consume, location);\n                     }\n                     ProjectionElem::ConstantIndex { offset: _,\n                                                     min_length: _,"}, {"sha": "44b505e19658f5cf45ecec30a8e51af71cc3707d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -421,7 +421,7 @@ macro_rules! CopyImpls {\n     }\n }\n \n-CopyImpls! { (), hir::Unsafety, abi::Abi, hir::def_id::DefId }\n+CopyImpls! { (), hir::Unsafety, abi::Abi, hir::def_id::DefId, ::mir::Local }\n \n impl<'tcx, T:TypeFoldable<'tcx>, U:TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> (T, U) {"}, {"sha": "edce75425a4979a3a0ea085455b070edfd1d4f64", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -710,7 +710,7 @@ mod restrictions {\n \n     use rustc::hir;\n     use rustc::ty::{self, TyCtxt};\n-    use rustc::mir::{Lvalue, Mir, Operand, ProjectionElem};\n+    use rustc::mir::{Lvalue, Mir, ProjectionElem};\n \n     pub(super) struct Restrictions<'c, 'tcx: 'c> {\n         mir: &'c Mir<'tcx>,\n@@ -809,12 +809,7 @@ mod restrictions {\n                         ProjectionElem::Downcast(..) |\n                         ProjectionElem::Subslice { .. } |\n                         ProjectionElem::ConstantIndex { .. } |\n-                        ProjectionElem::Index(Operand::Constant(..)) => {\n-                            cursor = &proj.base;\n-                            continue 'cursor;\n-                        }\n-                        ProjectionElem::Index(Operand::Consume(ref index)) => {\n-                            self.lvalue_stack.push(index); // FIXME: did old borrowck do this?\n+                        ProjectionElem::Index(_) => {\n                             cursor = &proj.base;\n                             continue 'cursor;\n                         }\n@@ -1004,7 +999,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                         (\"\",   format!(\"\"), None), // (dont emit downcast info)\n                     ProjectionElem::Field(field, _ty) =>\n                         (\"\",   format!(\".{}\", field.index()), None),\n-                    ProjectionElem::Index(ref index) =>\n+                    ProjectionElem::Index(index) =>\n                         (\"\",   format!(\"\"), Some(index)),\n                     ProjectionElem::ConstantIndex { offset, min_length, from_end: true } =>\n                         (\"\",   format!(\"[{} of {}]\", offset, min_length), None),\n@@ -1021,23 +1016,11 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                 self.append_lvalue_to_string(&proj.base, buf);\n                 if let Some(index) = index_operand {\n                     buf.push_str(\"[\");\n-                    self.append_operand_to_string(index, buf);\n+                    self.append_lvalue_to_string(&Lvalue::Local(index), buf);\n                     buf.push_str(\"]\");\n                 } else {\n                     buf.push_str(&suffix);\n                 }\n-\n-            }\n-        }\n-    }\n-\n-    fn append_operand_to_string(&self, operand: &Operand, buf: &mut String) {\n-        match *operand {\n-            Operand::Consume(ref lvalue) => {\n-                self.append_lvalue_to_string(lvalue, buf);\n-            }\n-            Operand::Constant(ref constant) => {\n-                buf.push_str(&format!(\"{:?}\", constant));\n             }\n         }\n     }"}, {"sha": "9cbaff2c113b6fb6f9a51753f9d5a30f8635e375", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // region_scope=None so lvalue indexes live forever. They are scalars so they\n                 // do not need storage annotations, and they are often copied between\n                 // places.\n-                let idx = unpack!(block = this.as_operand(block, None, index));\n+                let idx = unpack!(block = this.as_temp(block, None, index));\n \n                 // bounds check:\n                 let (len, lt) = (this.temp(usize_ty.clone(), expr_span),\n@@ -70,12 +70,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                      &len, Rvalue::Len(slice.clone()));\n                 this.cfg.push_assign(block, source_info, // lt = idx < len\n                                      &lt, Rvalue::BinaryOp(BinOp::Lt,\n-                                                           idx.clone(),\n+                                                           Operand::Consume(Lvalue::Local(idx)),\n                                                            Operand::Consume(len.clone())));\n \n                 let msg = AssertMessage::BoundsCheck {\n                     len: Operand::Consume(len),\n-                    index: idx.clone()\n+                    index: Operand::Consume(Lvalue::Local(idx))\n                 };\n                 let success = this.assert(block, Operand::Consume(lt), true,\n                                           msg, expr_span);\n@@ -127,7 +127,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     Some(Category::Lvalue) => false,\n                     _ => true,\n                 });\n-                this.as_temp(block, expr.temp_lifetime, expr)\n+                let temp = unpack!(block = this.as_temp(block, expr.temp_lifetime, expr));\n+                block.and(Lvalue::Local(temp))\n             }\n         }\n     }"}, {"sha": "0a72ce8d05e146055b58f9ed212217cf786abfa9", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             Category::Rvalue(..) => {\n                 let operand =\n                     unpack!(block = this.as_temp(block, scope, expr));\n-                block.and(Operand::Consume(operand))\n+                block.and(Operand::Consume(Lvalue::Local(operand)))\n             }\n         }\n     }"}, {"sha": "675d43dd4b62450a918694f8d3c0868726438c7e", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                       block: BasicBlock,\n                       temp_lifetime: Option<region::Scope>,\n                       expr: M)\n-                      -> BlockAnd<Lvalue<'tcx>>\n+                      -> BlockAnd<Local>\n         where M: Mirror<'tcx, Output = Expr<'tcx>>\n     {\n         let expr = self.hir.mirror(expr);\n@@ -34,7 +34,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     mut block: BasicBlock,\n                     temp_lifetime: Option<region::Scope>,\n                     expr: Expr<'tcx>)\n-                    -> BlockAnd<Lvalue<'tcx>> {\n+                    -> BlockAnd<Local> {\n         debug!(\"expr_as_temp(block={:?}, temp_lifetime={:?}, expr={:?})\",\n                block, temp_lifetime, expr);\n         let this = self;\n@@ -47,13 +47,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             });\n         }\n \n-        let expr_ty = expr.ty.clone();\n-        let temp = this.temp(expr_ty.clone(), expr_span);\n+        let expr_ty = expr.ty;\n+        let temp = this.local_decls.push(LocalDecl::new_temp(expr_ty, expr_span));\n \n         if !expr_ty.is_never() {\n             this.cfg.push(block, Statement {\n                 source_info,\n-                kind: StatementKind::StorageLive(temp.clone())\n+                kind: StatementKind::StorageLive(Lvalue::Local(temp))\n             });\n         }\n \n@@ -68,18 +68,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             Category::Lvalue => {\n                 let lvalue = unpack!(block = this.as_lvalue(block, expr));\n                 let rvalue = Rvalue::Use(Operand::Consume(lvalue));\n-                this.cfg.push_assign(block, source_info, &temp, rvalue);\n+                this.cfg.push_assign(block, source_info, &Lvalue::Local(temp), rvalue);\n             }\n             _ => {\n-                unpack!(block = this.into(&temp, block, expr));\n+                unpack!(block = this.into(&Lvalue::Local(temp), block, expr));\n             }\n         }\n \n         // In constants, temp_lifetime is None. We should not need to drop\n         // anything because no values with a destructor can be created in\n         // a constant at this time, even if the type may need dropping.\n         if let Some(temp_lifetime) = temp_lifetime {\n-            this.schedule_drop(expr_span, temp_lifetime, &temp, expr_ty);\n+            this.schedule_drop(expr_span, temp_lifetime, &Lvalue::Local(temp), expr_ty);\n         }\n \n         block.and(temp)"}, {"sha": "80a126dc42569c2d0563116237137fe2ddfcda59", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                     let topmost_scope = this.topmost_scope();\n                     let ptr = unpack!(block = this.as_temp(block, Some(topmost_scope), ptr));\n-                    this.into(&ptr.deref(), block, val)\n+                    this.into(&Lvalue::Local(ptr).deref(), block, val)\n                 } else {\n                     let args: Vec<_> =\n                         args.into_iter()"}, {"sha": "00825c7a880e9568d429e8add3bbf2ac30072a27", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -21,8 +21,7 @@\n //! `a[x]` would still overlap them both. But that is not this\n //! representation does today.)\n \n-use rustc::mir::LvalueElem;\n-use rustc::mir::{Operand, ProjectionElem};\n+use rustc::mir::{Local, LvalueElem, Operand, ProjectionElem};\n use rustc::ty::Ty;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n@@ -40,6 +39,10 @@ impl<'tcx> Lift for Operand<'tcx> {\n     type Abstract = AbstractOperand;\n     fn lift(&self) -> Self::Abstract { AbstractOperand }\n }\n+impl Lift for Local {\n+    type Abstract = AbstractOperand;\n+    fn lift(&self) -> Self::Abstract { AbstractOperand }\n+}\n impl<'tcx> Lift for Ty<'tcx> {\n     type Abstract = AbstractType;\n     fn lift(&self) -> Self::Abstract { AbstractType }"}, {"sha": "d3c886dab4e86348509aacdc6031d01a2cf7fff6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -479,9 +479,10 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n     fn array_shim(&mut self, ty: ty::Ty<'tcx>, len: usize) {\n         let tcx = self.tcx;\n+        let span = self.span;\n         let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n \n-        let beg = self.make_lvalue(Mutability::Mut, tcx.types.usize);\n+        let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n         let end = self.make_lvalue(Mutability::Not, tcx.types.usize);\n         let ret = self.make_lvalue(Mutability::Mut, tcx.mk_array(ty, len));\n \n@@ -492,7 +493,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let inits = vec![\n             self.make_statement(\n                 StatementKind::Assign(\n-                    beg.clone(),\n+                    Lvalue::Local(beg),\n                     Rvalue::Use(Operand::Constant(self.make_usize(0)))\n                 )\n             ),\n@@ -510,19 +511,19 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         //     BB #3;\n         // }\n         // BB #4;\n-        self.loop_header(beg.clone(), end, BasicBlock::new(2), BasicBlock::new(4), false);\n+        self.loop_header(Lvalue::Local(beg), end, BasicBlock::new(2), BasicBlock::new(4), false);\n \n         // BB #2\n         // `let cloned = Clone::clone(rcvr[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n-        let rcvr_field = rcvr.clone().index(Operand::Consume(beg.clone()));\n+        let rcvr_field = rcvr.clone().index(beg);\n         let cloned = self.make_clone_call(ty, rcvr_field, BasicBlock::new(3), BasicBlock::new(5));\n \n         // BB #3\n         // `ret[beg] = cloned;`\n         // `beg = beg + 1;`\n         // `goto #1`;\n-        let ret_field = ret.clone().index(Operand::Consume(beg.clone()));\n+        let ret_field = ret.clone().index(beg);\n         let statements = vec![\n             self.make_statement(\n                 StatementKind::Assign(\n@@ -532,10 +533,10 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             ),\n             self.make_statement(\n                 StatementKind::Assign(\n-                    beg.clone(),\n+                    Lvalue::Local(beg),\n                     Rvalue::BinaryOp(\n                         BinOp::Add,\n-                        Operand::Consume(beg.clone()),\n+                        Operand::Consume(Lvalue::Local(beg)),\n                         Operand::Constant(self.make_usize(1))\n                     )\n                 )\n@@ -558,10 +559,10 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         // `let mut beg = 0;`\n         // goto #6;\n         let end = beg;\n-        let beg = self.make_lvalue(Mutability::Mut, tcx.types.usize);\n+        let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n         let init = self.make_statement(\n             StatementKind::Assign(\n-                beg.clone(),\n+                Lvalue::Local(beg),\n                 Rvalue::Use(Operand::Constant(self.make_usize(0)))\n             )\n         );\n@@ -572,12 +573,13 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         //     BB #8;\n         // }\n         // BB #9;\n-        self.loop_header(beg.clone(), end, BasicBlock::new(7), BasicBlock::new(9), true);\n+        self.loop_header(Lvalue::Local(beg), Lvalue::Local(end),\n+                         BasicBlock::new(7), BasicBlock::new(9), true);\n \n         // BB #7 (cleanup)\n         // `drop(ret[beg])`;\n         self.block(vec![], TerminatorKind::Drop {\n-            location: ret.index(Operand::Consume(beg.clone())),\n+            location: ret.index(beg),\n             target: BasicBlock::new(8),\n             unwind: None,\n         }, true);\n@@ -587,10 +589,10 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         // `goto #6;`\n         let statement = self.make_statement(\n             StatementKind::Assign(\n-                beg.clone(),\n+                Lvalue::Local(beg),\n                 Rvalue::BinaryOp(\n                     BinOp::Add,\n-                    Operand::Consume(beg.clone()),\n+                    Operand::Consume(Lvalue::Local(beg)),\n                     Operand::Constant(self.make_usize(1))\n                 )\n             )"}, {"sha": "ac610ca163b7df107285725a7bf760b7178aec72", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                            base: LvalueTy<'tcx>,\n                            pi: &LvalueElem<'tcx>,\n                            lvalue: &Lvalue<'tcx>,\n-                           location: Location)\n+                           _: Location)\n                            -> LvalueTy<'tcx> {\n         debug!(\"sanitize_projection: {:?} {:?} {:?}\", base, pi, lvalue);\n         let tcx = self.tcx();\n@@ -181,9 +181,8 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                     })\n                 }\n             }\n-            ProjectionElem::Index(ref i) => {\n-                self.visit_operand(i, location);\n-                let index_ty = i.ty(self.mir, tcx);\n+            ProjectionElem::Index(i) => {\n+                let index_ty = Lvalue::Local(i).ty(self.mir, tcx).to_ty(tcx);\n                 if index_ty != tcx.types.usize {\n                     LvalueTy::Ty {\n                         ty: span_mirbug_and_err!(self, i, \"index by non-usize {:?}\", i)"}, {"sha": "f3b121f2eed57856745f4520e79e35d478c8e357", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -565,7 +565,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///    drop(ptr)\n     fn drop_loop(&mut self,\n                  succ: BasicBlock,\n-                 cur: &Lvalue<'tcx>,\n+                 cur: Local,\n                  length_or_end: &Lvalue<'tcx>,\n                  ety: Ty<'tcx>,\n                  unwind: Unwind,\n@@ -584,20 +584,20 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n         let one = self.constant_usize(1);\n         let (ptr_next, cur_next) = if ptr_based {\n-            (Rvalue::Use(use_(cur)),\n-             Rvalue::BinaryOp(BinOp::Offset, use_(cur), one))\n+            (Rvalue::Use(use_(&Lvalue::Local(cur))),\n+             Rvalue::BinaryOp(BinOp::Offset, use_(&Lvalue::Local(cur)), one))\n         } else {\n             (Rvalue::Ref(\n                  tcx.types.re_erased,\n                  BorrowKind::Mut,\n-                 self.lvalue.clone().index(use_(cur))),\n-             Rvalue::BinaryOp(BinOp::Add, use_(cur), one))\n+                 self.lvalue.clone().index(cur)),\n+             Rvalue::BinaryOp(BinOp::Add, use_(&Lvalue::Local(cur)), one))\n         };\n \n         let drop_block = BasicBlockData {\n             statements: vec![\n                 self.assign(ptr, ptr_next),\n-                self.assign(cur, cur_next)\n+                self.assign(&Lvalue::Local(cur), cur_next)\n             ],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -611,7 +611,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let loop_block = BasicBlockData {\n             statements: vec![\n                 self.assign(can_go, Rvalue::BinaryOp(BinOp::Eq,\n-                                                     use_(cur),\n+                                                     use_(&Lvalue::Local(cur)),\n                                                      use_(length_or_end)))\n             ],\n             is_cleanup: unwind.is_cleanup(),\n@@ -678,7 +678,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             tcx.types.usize\n         };\n \n-        let cur = Lvalue::Local(self.new_temp(iter_ty));\n+        let cur = self.new_temp(iter_ty);\n         let length = Lvalue::Local(self.new_temp(tcx.types.usize));\n         let length_or_end = if ptr_based {\n             Lvalue::Local(self.new_temp(iter_ty))\n@@ -688,7 +688,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n         let unwind = self.unwind.map(|unwind| {\n             self.drop_loop(unwind,\n-                           &cur,\n+                           cur,\n                            &length_or_end,\n                            ety,\n                            Unwind::InCleanup,\n@@ -698,12 +698,13 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let succ = self.succ; // FIXME(#6393)\n         let loop_block = self.drop_loop(\n             succ,\n-            &cur,\n+            cur,\n             &length_or_end,\n             ety,\n             unwind,\n             ptr_based);\n \n+        let cur = Lvalue::Local(cur);\n         let zero = self.constant_usize(0);\n         let mut drop_block_stmts = vec![];\n         drop_block_stmts.push(self.assign(&length, Rvalue::Len(self.lvalue.clone())));"}, {"sha": "9987c9c33102d30c82c8214d6551523e6dfd2438", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -471,7 +471,8 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         };\n                         (Base::Value(llprojected), llextra)\n                     }\n-                    mir::ProjectionElem::Index(ref index) => {\n+                    mir::ProjectionElem::Index(index) => {\n+                        let index = &mir::Operand::Consume(mir::Lvalue::Local(index));\n                         let llindex = self.const_operand(index, span)?.llval;\n \n                         let iv = if let Some(iv) = common::const_to_opt_u128(llindex, false) {"}, {"sha": "8155303b0d3fc39ed8c085772e74d5068fff1610", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f42cd848905e4d473cacce0d9da769b2e712f0c/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=2f42cd848905e4d473cacce0d9da769b2e712f0c", "patch": "@@ -333,7 +333,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         };\n                         (tr_base.trans_field_ptr(bcx, field.index()), llextra)\n                     }\n-                    mir::ProjectionElem::Index(ref index) => {\n+                    mir::ProjectionElem::Index(index) => {\n+                        let index = &mir::Operand::Consume(mir::Lvalue::Local(index));\n                         let index = self.trans_operand(bcx, index);\n                         let llindex = self.prepare_index(bcx, index.immediate());\n                         ((tr_base.project_index(bcx, llindex), align), ptr::null_mut())"}]}