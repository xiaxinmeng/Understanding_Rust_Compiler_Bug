{"sha": "75fddee700c67ccef35e9496451fbe15e29084d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmRkZWU3MDBjNjdjY2VmMzVlOTQ5NjQ1MWZiZTE1ZTI5MDg0ZDg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-19T11:29:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-20T12:28:18Z"}, "message": "Simplify the return lvalue", "tree": {"sha": "d2e270f4061693914d001101acea498ac942e28e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e270f4061693914d001101acea498ac942e28e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fddee700c67ccef35e9496451fbe15e29084d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAllJFOIACgkQpp+NIls6\n19nRcg/9HFJ07g7sPfP+eBTDH+P88/GwLRg3N+pSZIIadaQkN9UMEYFuoBrcazv7\nGg8ec5PEjlyzXeSxEqdZzJoXqfT3Y3TCYqKuf8ClttdCPIzS42ZEQObrxvWSUbYy\nsggky9huhudE9pYkPCSCIlgKo3c83qHymCYo3Z1p7+h9VXOfkMWC1p11OwKHWcoD\nz5NurjxAOpVglnrabYdxDSJ27tKqnngUz+JxUcajZXtpHO47eX1EZRxuOdDyTED0\nz45jVT/GX09APzOLNJOA7tv8g2N6WY40KAYNzKg5/I6xBiyhG0OJRxjb0gdr9Mo7\nwnP6aGrl73NvGMplmKg7oOQst82a5Cdh69sNAFUhUQ7M3OcC3KBTXdiLTOvn0An5\n3pzRhCUMLMWTpjz1djviwVq+tpqrDeLGzY3iEL4Kp5OOc0btNBIMxpu4nqsAYz6V\nbQ9Q3kJobF0jMgrYPgcoHusPElXN6ZqA0/IT1fqvK86uOQh2WT0MimhERhqD2HSx\ngF0cFkh2PyV0fa6TJnSTwOv2pRNMmL0sETIOSiy11ShXzYrJsA0zMAmy4e/LN722\nHZAouo9sgdcOLmdz5KXeSj3KfrCfYAXJH5D1ofSqkt8sYJGRF8Y3kwOTiojDhqoR\nyxyT+irREsNIM2rS/3eRSiIxJZ2yGyYarhQ8LkJsdeJmn+01PaQ=\n=oBGq\n-----END PGP SIGNATURE-----", "payload": "tree d2e270f4061693914d001101acea498ac942e28e\nparent a2baeb516cd24c78bdedb8a6ddcbfb9d82a79b50\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1497871744 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1497961698 +0200\n\nSimplify the return lvalue\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fddee700c67ccef35e9496451fbe15e29084d8", "html_url": "https://github.com/rust-lang/rust/commit/75fddee700c67ccef35e9496451fbe15e29084d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fddee700c67ccef35e9496451fbe15e29084d8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2baeb516cd24c78bdedb8a6ddcbfb9d82a79b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2baeb516cd24c78bdedb8a6ddcbfb9d82a79b50", "html_url": "https://github.com/rust-lang/rust/commit/a2baeb516cd24c78bdedb8a6ddcbfb9d82a79b50"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "185f4e1709b2284c5d6016c46f2d915287ad9838", "filename": "src/eval_context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=75fddee700c67ccef35e9496451fbe15e29084d8", "patch": "@@ -66,8 +66,7 @@ pub struct Frame<'tcx> {\n     pub return_to_block: StackPopCleanup,\n \n     /// The location where the result of the current stack frame should be written to.\n-    /// None if the function is a diverging function\n-    pub return_lvalue: Option<Lvalue<'tcx>>,\n+    pub return_lvalue: Lvalue<'tcx>,\n \n     /// The list of locals for this stack frame, stored in order as\n     /// `[arguments..., variables..., temporaries...]`. The locals are stored as `Option<Value>`s.\n@@ -272,7 +271,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         instance: ty::Instance<'tcx>,\n         span: codemap::Span,\n         mir: &'tcx mir::Mir<'tcx>,\n-        return_lvalue: Option<Lvalue<'tcx>>,\n+        return_lvalue: Lvalue<'tcx>,\n         return_to_block: StackPopCleanup,\n     ) -> EvalResult<'tcx> {\n         ::log_settings::settings().indentation += 1;\n@@ -329,7 +328,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ::log_settings::settings().indentation -= 1;\n         let frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         match frame.return_to_block {\n-            StackPopCleanup::MarkStatic(mutable) => if let Lvalue::Global(id) = frame.return_lvalue.expect(\"diverging static\") {\n+            StackPopCleanup::MarkStatic(mutable) => if let Lvalue::Global(id) = frame.return_lvalue {\n                 let global_value = self.globals.get_mut(&id)\n                     .expect(\"global should have been cached (static)\");\n                 match global_value.value {"}, {"sha": "0205472254ce6fdf8a1a359b7f5e520926b6ff3c", "filename": "src/lvalue.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=75fddee700c67ccef35e9496451fbe15e29084d8", "patch": "@@ -64,6 +64,14 @@ pub struct Global<'tcx> {\n }\n \n impl<'tcx> Lvalue<'tcx> {\n+    /// Produces an Lvalue that will error if attempted to be read from\n+    pub fn undef() -> Self {\n+        Lvalue::Ptr {\n+            ptr: PrimVal::Undef,\n+            extra: LvalueExtra::None,\n+        }\n+    }\n+\n     pub fn zst() -> Self {\n         Self::from_ptr(Pointer::zst_ptr())\n     }\n@@ -148,7 +156,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn eval_lvalue(&mut self, mir_lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue<'tcx>> {\n         use rustc::mir::Lvalue::*;\n         let lvalue = match *mir_lvalue {\n-            Local(mir::RETURN_POINTER) => self.frame().return_lvalue.expect(\"diverging function returned\"),\n+            Local(mir::RETURN_POINTER) => self.frame().return_lvalue,\n             Local(local) => Lvalue::Local { frame: self.stack.len() - 1, local, field: None },\n \n             Static(ref static_) => {"}, {"sha": "48b9fecd3d39e47cd4e42ab972ff841ed410b8e7", "filename": "src/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=75fddee700c67ccef35e9496451fbe15e29084d8", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n                 instance,\n                 span,\n                 mir,\n-                Some(Lvalue::Global(cid)),\n+                Lvalue::Global(cid),\n                 cleanup,\n             )\n         });\n@@ -235,7 +235,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                     this.ecx.push_stack_frame(this.instance,\n                                               constant.span,\n                                               mir,\n-                                              Some(Lvalue::Global(cid)),\n+                                              Lvalue::Global(cid),\n                                               StackPopCleanup::MarkStatic(false),\n                     )\n                 });"}, {"sha": "663d05254e5ccd0fee6e4a8485ce4e7b8986e8b6", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=75fddee700c67ccef35e9496451fbe15e29084d8", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             instance,\n             span,\n             mir,\n-            Some(Lvalue::zst()),\n+            Lvalue::zst(),\n             StackPopCleanup::None,\n         )?;\n "}, {"sha": "6ec607295dc72ccc75c45e164e4877b865fc705b", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fddee700c67ccef35e9496451fbe15e29084d8/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=75fddee700c67ccef35e9496451fbe15e29084d8", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::mir::TerminatorKind::*;\n         match terminator.kind {\n             Return => {\n-                self.dump_local(self.frame().return_lvalue.expect(\"diverging function returned\"));\n+                self.dump_local(self.frame().return_lvalue);\n                 self.pop_stack_frame()?\n             }\n \n@@ -430,8 +430,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Err(other) => return Err(other),\n         };\n         let (return_lvalue, return_to_block) = match destination {\n-            Some((lvalue, block)) => (Some(lvalue), StackPopCleanup::Goto(block)),\n-            None => (None, StackPopCleanup::None),\n+            Some((lvalue, block)) => (lvalue, StackPopCleanup::Goto(block)),\n+            None => (Lvalue::undef(), StackPopCleanup::None),\n         };\n \n         self.push_stack_frame(\n@@ -606,7 +606,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     f_instance,\n                     mir.span,\n                     mir,\n-                    Some(Lvalue::zst()),\n+                    Lvalue::zst(),\n                     StackPopCleanup::Goto(dest_block),\n                 )?;\n "}]}