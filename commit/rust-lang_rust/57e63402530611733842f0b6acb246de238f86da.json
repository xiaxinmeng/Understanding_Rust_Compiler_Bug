{"sha": "57e63402530611733842f0b6acb246de238f86da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTYzNDAyNTMwNjExNzMzODQyZjBiNmFjYjI0NmRlMjM4Zjg2ZGE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-01T11:03:05Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-01T15:51:43Z"}, "message": "Allow 'newtype' syntax for tags\n\nDoing this:\n\n    tag foo = mytype;\n\nis now equivalent to doing this:\n\n    tag foo { foo(mytype); }", "tree": {"sha": "5cca3cd649b307d56be0e0b81d704c70a9878a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cca3cd649b307d56be0e0b81d704c70a9878a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e63402530611733842f0b6acb246de238f86da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e63402530611733842f0b6acb246de238f86da", "html_url": "https://github.com/rust-lang/rust/commit/57e63402530611733842f0b6acb246de238f86da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e63402530611733842f0b6acb246de238f86da/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb72be0a8990f530d20437bf9d11a31fcffc5a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb72be0a8990f530d20437bf9d11a31fcffc5a9d", "html_url": "https://github.com/rust-lang/rust/commit/fb72be0a8990f530d20437bf9d11a31fcffc5a9d"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "e2f51cba6a590edcfea0f34a3f84c8a9d31cdb6b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57e63402530611733842f0b6acb246de238f86da/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e63402530611733842f0b6acb246de238f86da/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=57e63402530611733842f0b6acb246de238f86da", "patch": "@@ -945,7 +945,7 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         hi = es.span.hi;\n         ex = ast::expr_call(f, es.node);\n     } else if (is_ident(p.peek()) && !is_word(p, \"true\") &&\n-                   !is_word(p, \"false\")) {\n+               !is_word(p, \"false\")) {\n         check_bad_word(p);\n         auto pth = parse_path_and_ty_param_substs(p);\n         hi = pth.span.hi;\n@@ -1979,6 +1979,21 @@ fn parse_item_tag(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto id = parse_ident(p);\n     auto ty_params = parse_ty_params(p);\n     let vec[ast::variant] variants = [];\n+    // Newtype syntax\n+    if (p.peek() == token::EQ) {\n+        if (p.get_bad_expr_words().contains_key(id)) {\n+            p.fatal(\"found \" + id + \" in tag constructor position\");\n+        }\n+        p.bump();\n+        auto ty = parse_ty(p);\n+        expect(p, token::SEMI);\n+        auto variant = spanned(ty.span.lo, ty.span.hi,\n+                               rec(name=id,\n+                                   args=[rec(ty=ty, id=p.get_id())],\n+                                   id=p.get_id()));\n+        ret mk_item(p, lo, ty.span.hi, id,\n+                    ast::item_tag([variant], ty_params), attrs);\n+    }\n     expect(p, token::LBRACE);\n     while (p.peek() != token::RBRACE) {\n         auto tok = p.peek();"}, {"sha": "4190c69448e2bfdd8548407a22b4b89b12792437", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/57e63402530611733842f0b6acb246de238f86da/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e63402530611733842f0b6acb246de238f86da/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=57e63402530611733842f0b6acb246de238f86da", "patch": "@@ -383,27 +383,43 @@ fn print_item(&ps s, &@ast::item item) {\n             break_offset(s.s, 0u, 0);\n         }\n         case (ast::item_tag(?variants, ?params)) {\n-            head(s, \"tag\");\n+            auto newtype = vec::len(variants) == 1u &&\n+                str::eq(item.ident, variants.(0).node.name) &&\n+                vec::len(variants.(0).node.args) == 1u;\n+            if (newtype) {\n+                ibox(s, indent_unit);\n+                word_space(s, \"tag\");\n+            } else {\n+                head(s, \"tag\");\n+            }\n             word(s.s, item.ident);\n             print_type_params(s, params);\n             space(s.s);\n-            bopen(s);\n-            for (ast::variant v in variants) {\n-                space(s.s);\n-                maybe_print_comment(s, v.span.lo);\n-                word(s.s, v.node.name);\n-                if (vec::len(v.node.args) > 0u) {\n-                    popen(s);\n-                    fn print_variant_arg(&ps s, &ast::variant_arg arg) {\n-                        print_type(s, *arg.ty);\n+            if (newtype) {\n+                word_space(s, \"=\");\n+                print_type(s, *variants.(0).node.args.(0).ty);\n+                word(s.s, \";\");\n+                end(s);\n+            } else {\n+                bopen(s);\n+                for (ast::variant v in variants) {\n+                    space(s.s);\n+                    maybe_print_comment(s, v.span.lo);\n+                    word(s.s, v.node.name);\n+                    if (vec::len(v.node.args) > 0u) {\n+                        popen(s);\n+                        fn print_variant_arg(&ps s, &ast::variant_arg arg) {\n+                            print_type(s, *arg.ty);\n+                        }\n+                        commasep(s, consistent, v.node.args,\n+                                 print_variant_arg);\n+                        pclose(s);\n                     }\n-                    commasep(s, consistent, v.node.args, print_variant_arg);\n-                    pclose(s);\n+                    word(s.s, \";\");\n+                    maybe_print_trailing_comment(s, v.span, none[uint]);\n                 }\n-                word(s.s, \";\");\n-                maybe_print_trailing_comment(s, v.span, none[uint]);\n+                bclose(s, item.span);\n             }\n-            bclose(s, item.span);\n         }\n         case (ast::item_obj(?_obj, ?params, _)) {\n             head(s, \"obj\");"}]}