{"sha": "1c32fcfeb40f64eea0d00f497990553bdb59c4da", "node_id": "C_kwDOAAsO6NoAKDFjMzJmY2ZlYjQwZjY0ZWVhMGQwMGY0OTc5OTA1NTNiZGI1OWM0ZGE", "commit": {"author": {"name": "Michael Chisolm", "email": "aj2vm@yahoo.com", "date": "2022-07-20T04:26:50Z"}, "committer": {"name": "Michael Chisolm", "email": "aj2vm@yahoo.com", "date": "2022-07-20T04:26:50Z"}, "message": "Fix generated `PartialEq::ne`", "tree": {"sha": "2e0abfdfd4287a97229dfb31d6ecc5dc2036f7ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e0abfdfd4287a97229dfb31d6ecc5dc2036f7ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c32fcfeb40f64eea0d00f497990553bdb59c4da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3FfCkBpmovWxsxQ75uKi0a8TC/AFAmLXhAoACgkQ5uKi0a8T\nC/BS+g//fYNHLh8WK4vSFWl4w63eLxwWYwE+LgjrIvHvY1bjvL5Ico/Y5VEtbg7r\nWsVy8Mcb0owjsiJ/we+WY3m2tevwybWJ1ab+DgVAFQpTTvddpaxlz6OSKkltvva0\nhcFAQOiXMkhhDo8dIuIQMFZkev+X1KmSsNQsUmXJaU6q5wbbjJ/+Azc758IKRtFH\nlddDprBcdo7EuJ48T1IfKN1GLnPTYlj/SYhfJTm+VGom30Ly5SN9e/SCLo9gEZ5q\nFGxgBZ3CmzhLKVPqvLQde/l+MtDdHNf/85Xpeptr/fyD4EMeqY72+h2d1r2LcDO9\n/3ovskSmS3KtlxRHqEc1aH+/0GhmA7yATdGGgw4VkeXPN5FQmFMPqEaKD7HjVM+y\nK1Ho626tXU/q4XXgRYiQxrbjD6kbV6KcQ2OccOhSriu8TjG8TuQ58T8wkBsOB2NC\nBBiKhjxB3vH2P8avyHtiY86IWtRGhxLKgx7XR+6x413ni4B1TjMDHArz0jV1g/Gr\nEaahKJJ2EknrN1in7G2SeksJRyMQ6xq6XfG8hr3m+MoHn7CFEeCQj7Mf5WmLifQd\nzDqb2SUxgudOdAx2Q02PkklJVgqu56Y3MFimh0gjzvH8TQNvbThHhTKywCxzhMWZ\nC8J0xhyt8G3lj9Z8lHWRPVzbQ8wCOj0fD2sNSdtT3s8agd3D5ow=\n=JeEY\n-----END PGP SIGNATURE-----", "payload": "tree 2e0abfdfd4287a97229dfb31d6ecc5dc2036f7ea\nparent 0e7135615f9a9878269853861890b7baf26ba14b\nauthor Michael Chisolm <aj2vm@yahoo.com> 1658291210 -0400\ncommitter Michael Chisolm <aj2vm@yahoo.com> 1658291210 -0400\n\nFix generated `PartialEq::ne`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c32fcfeb40f64eea0d00f497990553bdb59c4da", "html_url": "https://github.com/rust-lang/rust/commit/1c32fcfeb40f64eea0d00f497990553bdb59c4da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c32fcfeb40f64eea0d00f497990553bdb59c4da/comments", "author": {"login": "SpecialMike", "id": 12124561, "node_id": "MDQ6VXNlcjEyMTI0NTYx", "avatar_url": "https://avatars.githubusercontent.com/u/12124561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpecialMike", "html_url": "https://github.com/SpecialMike", "followers_url": "https://api.github.com/users/SpecialMike/followers", "following_url": "https://api.github.com/users/SpecialMike/following{/other_user}", "gists_url": "https://api.github.com/users/SpecialMike/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpecialMike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpecialMike/subscriptions", "organizations_url": "https://api.github.com/users/SpecialMike/orgs", "repos_url": "https://api.github.com/users/SpecialMike/repos", "events_url": "https://api.github.com/users/SpecialMike/events{/privacy}", "received_events_url": "https://api.github.com/users/SpecialMike/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SpecialMike", "id": 12124561, "node_id": "MDQ6VXNlcjEyMTI0NTYx", "avatar_url": "https://avatars.githubusercontent.com/u/12124561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpecialMike", "html_url": "https://github.com/SpecialMike", "followers_url": "https://api.github.com/users/SpecialMike/followers", "following_url": "https://api.github.com/users/SpecialMike/following{/other_user}", "gists_url": "https://api.github.com/users/SpecialMike/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpecialMike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpecialMike/subscriptions", "organizations_url": "https://api.github.com/users/SpecialMike/orgs", "repos_url": "https://api.github.com/users/SpecialMike/repos", "events_url": "https://api.github.com/users/SpecialMike/events{/privacy}", "received_events_url": "https://api.github.com/users/SpecialMike/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7135615f9a9878269853861890b7baf26ba14b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7135615f9a9878269853861890b7baf26ba14b", "html_url": "https://github.com/rust-lang/rust/commit/0e7135615f9a9878269853861890b7baf26ba14b"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "6e6fd96a684fb5612e9be1fa9385037c2cb8e133", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c32fcfeb40f64eea0d00f497990553bdb59c4da/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c32fcfeb40f64eea0d00f497990553bdb59c4da/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=1c32fcfeb40f64eea0d00f497990553bdb59c4da", "patch": "@@ -1305,4 +1305,30 @@ impl Trait<u32> for Impl {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_default_partial_eq() {\n+        check_assist(\n+            add_missing_default_members,\n+            r#\"\n+//- minicore: eq\n+struct SomeStruct {\n+    data: usize,\n+    field: (usize, usize),\n+}\n+impl PartialEq for SomeStruct {$0}\n+\"#,\n+            r#\"\n+struct SomeStruct {\n+    data: usize,\n+    field: (usize, usize),\n+}\n+impl PartialEq for SomeStruct {\n+    $0fn ne(&self, other: &Self) -> bool {\n+            !self.eq(other)\n+        }\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "ec4835969f886017c984ca8cec528e134ca9a441", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c32fcfeb40f64eea0d00f497990553bdb59c4da/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c32fcfeb40f64eea0d00f497990553bdb59c4da/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=1c32fcfeb40f64eea0d00f497990553bdb59c4da", "patch": "@@ -394,6 +394,9 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `PartialEq` impl based on the fields and members of the target type.\n fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    if func.name().map_or(false, |name| name.text() == \"ne\") {\n+        return None;\n+    }\n     fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n         match expr {\n             Some(expr) => Some(make::expr_bin_op(expr, BinaryOp::LogicOp(LogicOp::And), cmp)),\n@@ -424,7 +427,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     // generate this code `Self` for the time being.\n \n     let body = match adt {\n-        // `Hash` cannot be derived for unions, so no default impl can be provided.\n+        // `PartialEq` cannot be derived for unions, so no default impl can be provided.\n         ast::Adt::Union(_) => return None,\n \n         ast::Adt::Enum(enum_) => {"}, {"sha": "f48d1ec66aae5a8e7093ee3d9caab98059793756", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c32fcfeb40f64eea0d00f497990553bdb59c4da/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c32fcfeb40f64eea0d00f497990553bdb59c4da/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=1c32fcfeb40f64eea0d00f497990553bdb59c4da", "patch": "@@ -354,6 +354,9 @@ pub mod cmp {\n     #[lang = \"eq\"]\n     pub trait PartialEq<Rhs: ?Sized = Self> {\n         fn eq(&self, other: &Rhs) -> bool;\n+        fn ne(&self, other: &Rhs) -> bool {\n+            !self.eq(other)\n+        }\n     }\n \n     pub trait Eq: PartialEq<Self> {}"}]}