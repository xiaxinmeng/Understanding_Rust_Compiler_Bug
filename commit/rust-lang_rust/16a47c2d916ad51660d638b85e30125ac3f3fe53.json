{"sha": "16a47c2d916ad51660d638b85e30125ac3f3fe53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YTQ3YzJkOTE2YWQ1MTY2MGQ2MzhiODVlMzAxMjVhYzNmM2ZlNTM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-27T18:15:24Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-28T16:51:01Z"}, "message": "remove references to IoResult\n\nThis is now std::io::Result", "tree": {"sha": "cbbcaad2b3240a4079163a5dcd9e23e22232206d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbcaad2b3240a4079163a5dcd9e23e22232206d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a47c2d916ad51660d638b85e30125ac3f3fe53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a47c2d916ad51660d638b85e30125ac3f3fe53", "html_url": "https://github.com/rust-lang/rust/commit/16a47c2d916ad51660d638b85e30125ac3f3fe53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a47c2d916ad51660d638b85e30125ac3f3fe53/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a5fcee386119b016c4ef8908cbd449dc65b730", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a5fcee386119b016c4ef8908cbd449dc65b730", "html_url": "https://github.com/rust-lang/rust/commit/a5a5fcee386119b016c4ef8908cbd449dc65b730"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f2e23963e106c8fbd5c8a28a8bdd0619c441f02e", "filename": "src/doc/style/errors/ergonomics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md?ref=16a47c2d916ad51660d638b85e30125ac3f3fe53", "patch": "@@ -63,4 +63,4 @@ for more details.\n ### The `Result`-`impl` pattern [FIXME]\n \n > **[FIXME]** Document the way that the `io` module uses trait impls\n-> on `IoResult` to painlessly propagate errors.\n+> on `std::io::Result` to painlessly propagate errors."}, {"sha": "a1310de2e60637609c7e388299a55c36314abb42", "filename": "src/doc/style/features/functions-and-methods/input.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md?ref=16a47c2d916ad51660d638b85e30125ac3f3fe53", "patch": "@@ -121,7 +121,7 @@ The primary exception: sometimes a function is meant to modify data\n that the caller already owns, for example to re-use a buffer:\n \n ```rust\n-fn read(&mut self, buf: &mut [u8]) -> IoResult<usize>\n+fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize>\n ```\n \n (From the [Reader trait](http://static.rust-lang.org/doc/master/std/io/trait.Reader.html#tymethod.read).)"}, {"sha": "54992341ce54ae7f1fa3c1e8a78e3a6688b37268", "filename": "src/doc/style/ownership/builders.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "raw_url": "https://github.com/rust-lang/rust/raw/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md?ref=16a47c2d916ad51660d638b85e30125ac3f3fe53", "patch": "@@ -75,7 +75,7 @@ impl Command {\n     }\n \n     /// Executes the command as a child process, which is returned.\n-    pub fn spawn(&self) -> IoResult<Process> {\n+    pub fn spawn(&self) -> std::io::Result<Process> {\n         ...\n     }\n }"}, {"sha": "817a5baf3d1be707cf9a1001fb1c5ccb03be4eec", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=16a47c2d916ad51660d638b85e30125ac3f3fe53", "patch": "@@ -164,8 +164,8 @@\n //! provides some helper methods.\n //!\n //! Additionally, the return value of this function is `fmt::Result` which is a\n-//! typedef to `Result<(), IoError>` (also known as `IoResult<()>`). Formatting\n-//! implementations should ensure that they return errors from `write!`\n+//! typedef to `Result<(), std::io::Error>` (also known as `std::io::Result<()>`).\n+//! Formatting implementations should ensure that they return errors from `write!`\n //! correctly (propagating errors upward).\n //!\n //! An example of implementing the formatting traits would look"}, {"sha": "b806afc5951d8651c0c7b4ce987317f4f0fcf0d1", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a47c2d916ad51660d638b85e30125ac3f3fe53/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=16a47c2d916ad51660d638b85e30125ac3f3fe53", "patch": "@@ -95,7 +95,7 @@ impl StdRng {\n     /// appropriate.\n     ///\n     /// Reading the randomness from the OS may fail, and any error is\n-    /// propagated via the `IoResult` return value.\n+    /// propagated via the `io::Result` return value.\n     pub fn new() -> io::Result<StdRng> {\n         OsRng::new().map(|mut r| StdRng { rng: r.gen() })\n     }"}]}