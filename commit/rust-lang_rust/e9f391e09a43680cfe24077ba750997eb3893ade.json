{"sha": "e9f391e09a43680cfe24077ba750997eb3893ade", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZjM5MWUwOWE0MzY4MGNmZTI0MDc3YmE3NTA5OTdlYjM4OTNhZGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-13T01:52:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T01:52:49Z"}, "message": "Rollup merge of #69008 - Aaron1011:fix/opaque-ty-parent, r=matthewjasper\n\nProperly use parent generics for opaque types\n\nFixes #67844\n\nPreviously, opaque types would only get parent generics if they\na return-position-impl-trait (e.g. `fn foo<A>() -> impl MyTrait<A>`).\n\nHowever, it's possible for opaque types to be nested inside one another:\n\n```rust\ntrait WithAssoc { type AssocType; }\n\ntrait WithParam<A> {}\n\ntype Return<A> = impl WithAssoc<AssocType = impl WithParam<A>>;\n```\n\nWhen this occurs, we need to ensure that the nested opaque types\nproperly inherit generic parameters from their parent opaque type.\n\nThis commit fixes the `generics_of` query to take the parent item\ninto account when determining the generics for an opaque type.", "tree": {"sha": "54b842d7610d1cd6fd92763c640de4f2f76bce6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b842d7610d1cd6fd92763c640de4f2f76bce6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9f391e09a43680cfe24077ba750997eb3893ade", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRKvxCRBK7hj4Ov3rIwAAdHIIACqUlAD1ub5gMPAslDtjsmmR\nR69LLTrCIEKlhGIE/wN9pMY3b7N7g2v+Tf596iAjt1vlQcUbQ8DSMC+UjjXGS8Rx\n8/SYh9IdPDBKp3zdyDiH73TYGY8hZvPu10v0L06AelzviJfiAhpL8xPrP2bLv8vf\nnEGPkAVTO/4EOOoK9wEGXlUs30PxdK5d+zP7dwHQb/Jo41oonX4+r4AgIdqD/eZw\ncSI19bepWeIHCqcKn2YvHMXucWhvSWIH4K1BtkN1sVTX3TjQcTG65D0Yca0lzICa\nCf2z2GCXcBPrjJk6CK9iyQZ4Zi+KQArJxf8s7R4iD+qIKeKBPQ8mEgxX8FRW/HA=\n=CKNA\n-----END PGP SIGNATURE-----\n", "payload": "tree 54b842d7610d1cd6fd92763c640de4f2f76bce6a\nparent 87ba8f2a19ef97790571a8b092b95fe87b6b6f76\nparent 34cf0b32674da79403746716e5a7ed2072dfabe2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581558769 +0100\ncommitter GitHub <noreply@github.com> 1581558769 +0100\n\nRollup merge of #69008 - Aaron1011:fix/opaque-ty-parent, r=matthewjasper\n\nProperly use parent generics for opaque types\n\nFixes #67844\n\nPreviously, opaque types would only get parent generics if they\na return-position-impl-trait (e.g. `fn foo<A>() -> impl MyTrait<A>`).\n\nHowever, it's possible for opaque types to be nested inside one another:\n\n```rust\ntrait WithAssoc { type AssocType; }\n\ntrait WithParam<A> {}\n\ntype Return<A> = impl WithAssoc<AssocType = impl WithParam<A>>;\n```\n\nWhen this occurs, we need to ensure that the nested opaque types\nproperly inherit generic parameters from their parent opaque type.\n\nThis commit fixes the `generics_of` query to take the parent item\ninto account when determining the generics for an opaque type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f391e09a43680cfe24077ba750997eb3893ade", "html_url": "https://github.com/rust-lang/rust/commit/e9f391e09a43680cfe24077ba750997eb3893ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9f391e09a43680cfe24077ba750997eb3893ade/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ba8f2a19ef97790571a8b092b95fe87b6b6f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ba8f2a19ef97790571a8b092b95fe87b6b6f76", "html_url": "https://github.com/rust-lang/rust/commit/87ba8f2a19ef97790571a8b092b95fe87b6b6f76"}, {"sha": "34cf0b32674da79403746716e5a7ed2072dfabe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/34cf0b32674da79403746716e5a7ed2072dfabe2", "html_url": "https://github.com/rust-lang/rust/commit/34cf0b32674da79403746716e5a7ed2072dfabe2"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "a7d38725d323af9633b2269137aad95fada2b854", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9f391e09a43680cfe24077ba750997eb3893ade/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f391e09a43680cfe24077ba750997eb3893ade/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e9f391e09a43680cfe24077ba750997eb3893ade", "patch": "@@ -1054,7 +1054,27 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             Some(tcx.closure_base_def_id(def_id))\n         }\n         Node::Item(item) => match item.kind {\n-            ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => impl_trait_fn,\n+            ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => {\n+                impl_trait_fn.or_else(|| {\n+                    let parent_id = tcx.hir().get_parent_item(hir_id);\n+                    if parent_id != hir_id && parent_id != CRATE_HIR_ID {\n+                        debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);\n+                        // If this 'impl Trait' is nested inside another 'impl Trait'\n+                        // (e.g. `impl Foo<MyType = impl Bar<A>>`), we need to use the 'parent'\n+                        // 'impl Trait' for its generic parameters, since we can reference them\n+                        // from the 'child' 'impl Trait'\n+                        if let Node::Item(hir::Item { kind: ItemKind::OpaqueTy(..), .. }) =\n+                            tcx.hir().get(parent_id)\n+                        {\n+                            Some(tcx.hir().local_def_id(parent_id))\n+                        } else {\n+                            None\n+                        }\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n             _ => None,\n         },\n         _ => None,"}, {"sha": "2f844b4a05f5f6bc884a35b0ee2ad11b8b3a6c85", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9f391e09a43680cfe24077ba750997eb3893ade/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f391e09a43680cfe24077ba750997eb3893ade/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs?ref=e9f391e09a43680cfe24077ba750997eb3893ade", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// Regression test for issue #67844\n+// Ensures that we properly handle nested TAIT occurences\n+// with generic parameters\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait WithAssoc { type AssocType; }\n+\n+trait WithParam<A> {}\n+\n+type Return<A> = impl WithAssoc<AssocType = impl WithParam<A>>;\n+\n+struct MyParam;\n+impl<A> WithParam<A> for MyParam {}\n+\n+struct MyStruct;\n+\n+impl WithAssoc for MyStruct {\n+    type AssocType = MyParam;\n+}\n+\n+\n+fn my_fun<A>() -> Return<A> {\n+    MyStruct\n+}\n+\n+fn my_other_fn<A>() -> impl WithAssoc<AssocType = impl WithParam<A>> {\n+    MyStruct\n+}\n+\n+fn main() {}"}]}