{"sha": "61687b9db67d34bbcce8596496448c0717d98316", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjg3YjlkYjY3ZDM0YmJjY2U4NTk2NDk2NDQ4YzA3MTdkOTgzMTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T10:41:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:35:29Z"}, "message": "fix tests", "tree": {"sha": "2b0b6ab5288e5d50230604298a86f76028cc3aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0b6ab5288e5d50230604298a86f76028cc3aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61687b9db67d34bbcce8596496448c0717d98316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61687b9db67d34bbcce8596496448c0717d98316", "html_url": "https://github.com/rust-lang/rust/commit/61687b9db67d34bbcce8596496448c0717d98316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61687b9db67d34bbcce8596496448c0717d98316/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4d2770362f3c2950f110f8e116ed8f537ec1a1", "html_url": "https://github.com/rust-lang/rust/commit/8c4d2770362f3c2950f110f8e116ed8f537ec1a1"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "44e7aca44f2688cfc3c97b4304cd05fe3a1b273c", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=61687b9db67d34bbcce8596496448c0717d98316", "patch": "@@ -105,39 +105,36 @@ impl db::RootDatabase {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Vec<NavigationTarget>> {\n-        let descr = match source_binder::module_from_position(self, position)? {\n+        let module = match source_binder::module_from_position(self, position)? {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n-        let (file_id, decl) = match descr.parent_link_source(self) {\n+        let (file_id, ast_module) = module.source(self);\n+        let ast_module = match ast_module {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n-        let decl = decl.borrowed();\n-        let decl_name = decl.name().unwrap();\n+        let ast_module = ast_module.borrowed();\n+        let name = ast_module.name().unwrap();\n         Ok(vec![NavigationTarget {\n             file_id,\n-            name: decl_name.text(),\n-            range: decl_name.syntax().range(),\n+            name: name.text(),\n+            range: name.syntax().range(),\n             kind: MODULE,\n             ptr: None,\n         }])\n     }\n     /// Returns `Vec` for the same reason as `parent_module`\n     pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        let descr = match source_binder::module_from_file_id(self, file_id)? {\n+        let module = match source_binder::module_from_file_id(self, file_id)? {\n+            Some(it) => it,\n             None => return Ok(Vec::new()),\n+        };\n+        let krate = match module.krate(self)? {\n             Some(it) => it,\n+            None => return Ok(Vec::new()),\n         };\n-        let root = descr.crate_root();\n-        let file_id = root.file_id();\n-\n-        let crate_graph = self.crate_graph();\n-        let crate_id = crate_graph.crate_id_for_crate_root(file_id);\n-        Ok(crate_id.into_iter().collect())\n-    }\n-    pub(crate) fn crate_root(&self, crate_id: CrateId) -> FileId {\n-        self.crate_graph().crate_root(crate_id)\n+        Ok(vec![krate.crate_id()])\n     }\n     pub(crate) fn find_all_refs(\n         &self,"}, {"sha": "2f968d97c6a9b484f100d91bd5d6482076a57163", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=61687b9db67d34bbcce8596496448c0717d98316", "patch": "@@ -1,4 +1,5 @@\n-use ra_db::{CrateId, Cancelable};\n+use ra_db::{CrateId, Cancelable, FileId};\n+use ra_syntax::ast;\n \n use crate::{Name, db::HirDatabase, DefId};\n \n@@ -17,6 +18,9 @@ pub struct CrateDependency {\n }\n \n impl Crate {\n+    pub fn crate_id(&self) -> CrateId {\n+        self.crate_id\n+    }\n     pub fn dependencies(&self, db: &impl HirDatabase) -> Vec<CrateDependency> {\n         self.dependencies_impl(db)\n     }\n@@ -31,6 +35,10 @@ pub struct Module {\n }\n \n impl Module {\n+    pub fn source(&self, db: &impl HirDatabase) -> (FileId, Option<ast::ModuleNode>) {\n+        self.source_impl(db)\n+    }\n+\n     /// Returns the crate this module is part of.\n     pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n         self.krate_impl(db)"}, {"sha": "83ee8186e479a003192b93c1f990397731098a26", "filename": "crates/ra_hir/src/code_model_impl.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl.rs?ref=61687b9db67d34bbcce8596496448c0717d98316", "patch": "@@ -1,4 +1,5 @@\n-use ra_db::{CrateId, Cancelable};\n+use ra_db::{CrateId, Cancelable, FileId};\n+use ra_syntax::{AstNode, ast};\n \n use crate::{HirFileId, db::HirDatabase, Crate, CrateDependency, AsName, DefId, DefLoc, DefKind, Name};\n \n@@ -48,6 +49,22 @@ impl Module {\n         crate::code_model_api::Module { def_id }\n     }\n \n+    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> (FileId, Option<ast::ModuleNode>) {\n+        let loc = self.def_id.loc(db);\n+        let source_item_id = loc.source_item_id;\n+        let module = match source_item_id.item_id {\n+            None => None,\n+            Some(_) => {\n+                let syntax_node = db.file_item(source_item_id);\n+                let module = ast::Module::cast(syntax_node.borrowed()).unwrap().owned();\n+                Some(module)\n+            }\n+        };\n+        // FIXME: remove `as_original_file` here\n+        let file_id = source_item_id.file_id.as_original_file();\n+        (file_id, module)\n+    }\n+\n     pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n         let root = self.crate_root(db)?;\n         let loc = root.def_id.loc(db);"}, {"sha": "dcbe65aec36a921d1157302f468ac4eec30d1615", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61687b9db67d34bbcce8596496448c0717d98316/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=61687b9db67d34bbcce8596496448c0717d98316", "patch": "@@ -17,7 +17,7 @@ fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n     let module = hir::source_binder::module_from_position(&db, pos)\n         .unwrap()\n         .unwrap();\n-    let module_id = module.module_id;\n+    let module_id = module.def_id.loc(&db).module_id;\n     (db.item_map(source_root).unwrap(), module_id)\n }\n \n@@ -155,7 +155,7 @@ fn item_map_across_crates() {\n     let module = hir::source_binder::module_from_file_id(&db, main_id)\n         .unwrap()\n         .unwrap();\n-    let module_id = module.module_id;\n+    let module_id = module.def_id.loc(&db).module_id;\n     let item_map = db.item_map(source_root).unwrap();\n \n     check_module_item_map("}]}