{"sha": "508d0326475e0ceef2ea5755a03cacf181b34d7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOGQwMzI2NDc1ZTBjZWVmMmVhNTc1NWEwM2NhY2YxODFiMzRkN2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-24T22:44:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-24T22:44:43Z"}, "message": "review comment: deduplicate logic", "tree": {"sha": "a84831a09e4ea5240bfc105ba2443150b6d3b339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a84831a09e4ea5240bfc105ba2443150b6d3b339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508d0326475e0ceef2ea5755a03cacf181b34d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508d0326475e0ceef2ea5755a03cacf181b34d7c", "html_url": "https://github.com/rust-lang/rust/commit/508d0326475e0ceef2ea5755a03cacf181b34d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508d0326475e0ceef2ea5755a03cacf181b34d7c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0baf61bfdb95980c69fbfcc0fc95ce82e8d81ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0baf61bfdb95980c69fbfcc0fc95ce82e8d81ac9", "html_url": "https://github.com/rust-lang/rust/commit/0baf61bfdb95980c69fbfcc0fc95ce82e8d81ac9"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "2a7f9ad25def00afd6a4e9291b9a19dd801dea52", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/508d0326475e0ceef2ea5755a03cacf181b34d7c/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508d0326475e0ceef2ea5755a03cacf181b34d7c/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=508d0326475e0ceef2ea5755a03cacf181b34d7c", "patch": "@@ -1583,27 +1583,26 @@ impl EmitterWriter {\n         Ok(())\n     }\n \n-    fn emit_messages_default(&mut self,\n-                             level: &Level,\n-                             message: &[(String, Style)],\n-                             code: &Option<DiagnosticId>,\n-                             span: &MultiSpan,\n-                             children: &[SubDiagnostic],\n-                             suggestions: &[CodeSuggestion]) {\n+    fn emit_messages_default(\n+        &mut self,\n+        level: &Level,\n+        message: &[(String, Style)],\n+        code: &Option<DiagnosticId>,\n+        span: &MultiSpan,\n+        children: &[SubDiagnostic],\n+        suggestions: &[CodeSuggestion],\n+    ) {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n         } else {\n             self.get_max_line_num(span, children).to_string().len()\n         };\n \n-        match self.emit_message_default(span,\n-                                        message,\n-                                        code,\n-                                        level,\n-                                        max_line_num_len,\n-                                        false) {\n+        match self.emit_message_default(span, message, code, level, max_line_num_len, false) {\n             Ok(()) => {\n-                if !children.is_empty() {\n+                if !children.is_empty() || suggestions.iter().any(|s| {\n+                    s.style != SuggestionStyle::CompletelyHidden\n+                }) {\n                     let mut buffer = StyledBuffer::new();\n                     if !self.short_message {\n                         draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);\n@@ -1629,19 +1628,6 @@ impl EmitterWriter {\n                             _ => ()\n                         }\n                     }\n-                    if children.is_empty() && suggestions.iter().any(|s| {\n-                        s.style != SuggestionStyle::CompletelyHidden\n-                    }) {\n-                        let mut buffer = StyledBuffer::new();\n-                        if !self.short_message {\n-                            draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);\n-                        }\n-                        match emit_to_destination(&buffer.render(), level, &mut self.dst,\n-                                                self.short_message) {\n-                            Ok(()) => (),\n-                            Err(e) => panic!(\"failed to emit error: {}\", e)\n-                        }\n-                    }\n                     for sugg in suggestions {\n                         if sugg.style == SuggestionStyle::CompletelyHidden {\n                             // do not display this suggestion, it is meant only for tools"}]}