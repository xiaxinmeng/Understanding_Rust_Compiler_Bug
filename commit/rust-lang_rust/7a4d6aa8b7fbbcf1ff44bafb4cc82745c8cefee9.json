{"sha": "7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGQ2YWE4YjdmYmJjZjFmZjQ0YmFmYjRjYzgyNzQ1YzhjZWZlZTk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T13:36:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T13:49:54Z"}, "message": "Use same error message for OPTION_UNWRAP_USED and RESULT_UNWRAP_USED\n\nIIRC, Result::expect wasn't stable until quite recently, which might be\nwhy there was 2 different error messages.", "tree": {"sha": "1d8187f38d17f051c5992c894a9f44421fbec078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d8187f38d17f051c5992c894a9f44421fbec078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9", "html_url": "https://github.com/rust-lang/rust/commit/7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fbf1989df18ba669f1542bb6706a42bb5db6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fbf1989df18ba669f1542bb6706a42bb5db6f1", "html_url": "https://github.com/rust-lang/rust/commit/52fbf1989df18ba669f1542bb6706a42bb5db6f1"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "2aa3b040e55ac58c543c264f45e4ebc66e689286", "filename": "src/methods.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=7a4d6aa8b7fbbcf1ff44bafb4cc82745c8cefee9", "patch": "@@ -258,14 +258,21 @@ impl LateLintPass for MethodsPass {\n fn lint_unwrap(cx: &LateContext, expr: &Expr, unwrap_args: &MethodArgs) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&unwrap_args[0]));\n \n-    if match_type(cx, obj_ty, &OPTION_PATH) {\n-        span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n-                  \"used unwrap() on an Option value. If you don't want to handle the None case \\\n-                   gracefully, consider using expect() to provide a better panic message\");\n+    let mess = if match_type(cx, obj_ty, &OPTION_PATH) {\n+        Some((OPTION_UNWRAP_USED, \"an Option\", \"None\"))\n     }\n     else if match_type(cx, obj_ty, &RESULT_PATH) {\n-        span_lint(cx, RESULT_UNWRAP_USED, expr.span,\n-                  \"used unwrap() on a Result value. Graceful handling of Err values is preferred\");\n+        Some((RESULT_UNWRAP_USED, \"a Result\", \"Err\"))\n+    }\n+    else {\n+        None\n+    };\n+\n+    if let Some((lint, kind, none_value)) = mess {\n+        span_lint(cx, lint, expr.span,\n+                  &format!(\"used unwrap() on {} value. If you don't want to handle the {} \\\n+                            case gracefully, consider using expect() to provide a better panic\n+                            message\", kind, none_value));\n     }\n }\n "}]}