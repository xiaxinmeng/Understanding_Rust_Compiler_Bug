{"sha": "77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZDVmY2EzZWZmZDcxYjIyNzBkN2JkMDBhNzU4ZmQ4NTIyYzBkNGI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-16T08:44:54Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-16T11:07:40Z"}, "message": "Rollup merge of #27030 - nrc:save-ctors, r=alexcrichton", "tree": {"sha": "e82daa4d803152b3f6aa1ddeb0665c879946ff93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e82daa4d803152b3f6aa1ddeb0665c879946ff93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "html_url": "https://github.com/rust-lang/rust/commit/77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a9c801662fbddb833ff30aae578fcf6659bf77", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a9c801662fbddb833ff30aae578fcf6659bf77", "html_url": "https://github.com/rust-lang/rust/commit/b8a9c801662fbddb833ff30aae578fcf6659bf77"}, {"sha": "49d3a93c52e65b5b37370390dd352471c21dbaf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d3a93c52e65b5b37370390dd352471c21dbaf7", "html_url": "https://github.com/rust-lang/rust/commit/49d3a93c52e65b5b37370390dd352471c21dbaf7"}], "stats": {"total": 65, "additions": 48, "deletions": 17}, "files": [{"sha": "5c10cc6aaa8dbe23003e61649cc228f5bde3651b", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "patch": "@@ -411,6 +411,13 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n+    pub fn expect_trait_item(&self, id: NodeId) -> &'ast TraitItem {\n+        match self.find(id) {\n+            Some(NodeTraitItem(item)) => item,\n+            _ => panic!(\"expected trait item, found {}\", self.node_to_string(id))\n+        }\n+    }\n+\n     pub fn expect_struct(&self, id: NodeId) -> &'ast StructDef {\n         match self.find(id) {\n             Some(NodeItem(i)) => {"}, {"sha": "680999717eae5a2f038d4116d200e34be039332e", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "patch": "@@ -35,7 +35,6 @@ use session::Session;\n use middle::def;\n use middle::ty::{self, Ty};\n \n-use std::cell::Cell;\n use std::fs::File;\n use std::path::Path;\n \n@@ -76,14 +75,11 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     pub fn new(tcx: &'l ty::ctxt<'tcx>,\n                analysis: &'l ty::CrateAnalysis,\n                output_file: Box<File>) -> DumpCsvVisitor<'l, 'tcx> {\n-        let span_utils = SpanUtils {\n-            sess: &tcx.sess,\n-            err_count: Cell::new(0)\n-        };\n+        let span_utils = SpanUtils::new(&tcx.sess);\n         DumpCsvVisitor {\n             sess: &tcx.sess,\n             tcx: tcx,\n-            save_ctxt: SaveContext::new(tcx, span_utils.clone()),\n+            save_ctxt: SaveContext::from_span_utils(tcx, span_utils.clone()),\n             analysis: analysis,\n             span: span_utils.clone(),\n             fmt: FmtStrs::new(box Recorder {"}, {"sha": "26da803de6557538a42e487d35f663f7f59e1120", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "patch": "@@ -163,9 +163,14 @@ pub struct MethodCallData {\n \n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n-    pub fn new(tcx: &'l ty::ctxt<'tcx>,\n-               span_utils: SpanUtils<'l>)\n-               -> SaveContext<'l, 'tcx> {\n+    pub fn new(tcx: &'l ty::ctxt<'tcx>) -> SaveContext <'l, 'tcx> {\n+        let span_utils = SpanUtils::new(&tcx.sess);\n+        SaveContext::from_span_utils(tcx, span_utils)\n+    }\n+\n+    pub fn from_span_utils(tcx: &'l ty::ctxt<'tcx>,\n+                           span_utils: SpanUtils<'l>)\n+                           -> SaveContext<'l, 'tcx> {\n         SaveContext {\n             tcx: tcx,\n             span_utils: span_utils,\n@@ -527,7 +532,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ref_id: def.def_id(),\n                 })\n             }\n-            def::DefStruct(def_id) | def::DefTy(def_id, _) => {\n+            def::DefStruct(def_id) |\n+            def::DefTy(def_id, _) |\n+            def::DefTrait(def_id) |\n+            def::DefTyParam(_, _, def_id, _) => {\n                 Data::TypeRefData(TypeRefData {\n                     span: sub_span.unwrap(),\n                     ref_id: def_id,\n@@ -540,13 +548,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     let ti = self.tcx.impl_or_trait_item(decl_id);\n                     match provenence {\n                         def::FromTrait(def_id) => {\n-                            Some(self.tcx.trait_items(def_id)\n-                                    .iter()\n-                                    .find(|mr| {\n-                                        mr.name() == ti.name()\n-                                    })\n-                                    .unwrap()\n-                                    .def_id())\n+                            self.tcx.trait_items(def_id)\n+                                .iter()\n+                                .find(|mr| {\n+                                    mr.name() == ti.name() && self.trait_method_has_body(mr)\n+                                })\n+                                .map(|mr| mr.def_id())\n                         }\n                         def::FromImpl(def_id) => {\n                             let impl_items = self.tcx.impl_items.borrow();\n@@ -586,6 +593,20 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    fn trait_method_has_body(&self, mr: &ty::ImplOrTraitItem) -> bool {\n+        let def_id = mr.def_id();\n+        if def_id.krate != ast::LOCAL_CRATE {\n+            return false;\n+        }\n+\n+        let trait_item = self.tcx.map.expect_trait_item(def_id.node);\n+        if let ast::TraitItem_::MethodTraitItem(_, Some(_)) = trait_item.node {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     pub fn get_field_ref_data(&self,\n                               field_ref: &ast::Field,\n                               struct_id: DefId,"}, {"sha": "ee7b1c4ff6e29a5d12a71c28619a8ffa231908a7", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d5fca3effd71b2270d7bd00a758fd8522c0d4b/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=77d5fca3effd71b2270d7bd00a758fd8522c0d4b", "patch": "@@ -28,6 +28,13 @@ pub struct SpanUtils<'a> {\n }\n \n impl<'a> SpanUtils<'a> {\n+    pub fn new(sess: &'a Session) -> SpanUtils<'a> {\n+        SpanUtils {\n+            sess: sess,\n+            err_count: Cell::new(0)\n+        }\n+    }\n+\n     // Standard string for extents/location.\n     pub fn extent_str(&self, span: Span) -> String {\n         let lo_loc = self.sess.codemap().lookup_char_pos(span.lo);"}]}