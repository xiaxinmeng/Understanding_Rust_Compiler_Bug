{"sha": "8c74fd96192679525f985b9f6f85e9bdc011aa09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzRmZDk2MTkyNjc5NTI1Zjk4NWI5ZjZmODVlOWJkYzAxMWFhMDk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-15T20:59:33Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-15T20:59:33Z"}, "message": "Merge #101\n\n101: migrate to salsa-rs/salsa r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c606c0c34cb6a1e8ea3ea92b5bac0edaafa4d81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c606c0c34cb6a1e8ea3ea92b5bac0edaafa4d81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c74fd96192679525f985b9f6f85e9bdc011aa09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c74fd96192679525f985b9f6f85e9bdc011aa09", "html_url": "https://github.com/rust-lang/rust/commit/8c74fd96192679525f985b9f6f85e9bdc011aa09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c74fd96192679525f985b9f6f85e9bdc011aa09/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "575b8635073ae0ea9e2aebbab613daf97fe9af90", "url": "https://api.github.com/repos/rust-lang/rust/commits/575b8635073ae0ea9e2aebbab613daf97fe9af90", "html_url": "https://github.com/rust-lang/rust/commit/575b8635073ae0ea9e2aebbab613daf97fe9af90"}, {"sha": "f30a7deff17d7a69e1e9876d96d00392cd8f6fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30a7deff17d7a69e1e9876d96d00392cd8f6fd1", "html_url": "https://github.com/rust-lang/rust/commit/f30a7deff17d7a69e1e9876d96d00392cd8f6fd1"}], "stats": {"total": 1496, "additions": 432, "deletions": 1064}, "files": [{"sha": "707257a31c231c55ccc591fd62cb223cace21256", "filename": "Cargo.lock", "status": "modified", "additions": 196, "deletions": 100, "changes": 296, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -14,6 +14,11 @@ dependencies = [\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"arrayref\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arrayvec\"\n version = \"0.4.7\"\n@@ -67,6 +72,20 @@ name = \"bitflags\"\n version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"block-buffer\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"byte-tools\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.2.6\"\n@@ -79,9 +98,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -187,6 +206,16 @@ name = \"crossbeam-utils\"\n version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"derive-new\"\n+version = \"0.5.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"deunicode\"\n version = \"0.4.3\"\n@@ -197,6 +226,14 @@ name = \"difference\"\n version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"digest\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"drop_bomb\"\n version = \"0.1.4\"\n@@ -229,12 +266,17 @@ name = \"failure_derive\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"synstructure 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"fake-simd\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"flexi_logger\"\n version = \"0.9.2\"\n@@ -277,9 +319,17 @@ dependencies = [\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.51.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"generic-array\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -312,13 +362,18 @@ dependencies = [\n \n [[package]]\n name = \"im\"\n-version = \"12.1.0\"\n+version = \"12.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"indexmap\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"itertools\"\n version = \"0.7.8\"\n@@ -343,11 +398,11 @@ version = \"0.51.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-derive 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-derive 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -382,6 +437,11 @@ dependencies = [\n  \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"maplit\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\n@@ -418,13 +478,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"num-derive\"\n-version = \"0.2.2\"\n+version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -492,38 +552,57 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"pest\"\n-version = \"1.0.6\"\n+version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"pest_derive\"\n-version = \"1.0.8\"\n+version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest_generator 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"proc-macro2\"\n-version = \"0.4.19\"\n+name = \"pest_generator\"\n+version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest_meta 2.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"quote\"\n-version = \"0.3.15\"\n+name = \"pest_meta\"\n+version = \"2.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sha-1 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"0.4.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"quote\"\n version = \"0.6.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -532,7 +611,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"im 12.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -541,7 +620,7 @@ dependencies = [\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.1.0\",\n+ \"salsa 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -579,7 +658,7 @@ dependencies = [\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gen_lsp_server 0.1.0\",\n- \"im 12.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.51.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_analysis 0.1.0\",\n@@ -588,10 +667,10 @@ dependencies = [\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smol_str 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_unit 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -629,13 +708,21 @@ dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_core\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -712,7 +799,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"base64 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -721,7 +808,7 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smol_str 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_unit 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -758,10 +845,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.1.0\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"im 12.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -783,7 +875,7 @@ version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -793,30 +885,41 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.79\"\n+version = \"1.0.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.79\"\n+version = \"1.0.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.31\"\n+version = \"1.0.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"sha-1\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -837,10 +940,10 @@ dependencies = [\n \n [[package]]\n name = \"smol_str\"\n-version = \"0.1.6\"\n+version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -858,50 +961,32 @@ name = \"superslice\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"syn\"\n-version = \"0.11.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"syn\"\n version = \"0.14.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.7\"\n+version = \"0.15.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"synom\"\n-version = \"0.11.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"synstructure\"\n version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -918,19 +1003,19 @@ dependencies = [\n \n [[package]]\n name = \"tera\"\n-version = \"0.11.16\"\n+version = \"0.11.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pest_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest_derive 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unic-segment 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -960,7 +1045,7 @@ name = \"text_unit\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -998,7 +1083,7 @@ dependencies = [\n  \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tera 0.11.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tera 0.11.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1007,6 +1092,11 @@ name = \"typenum\"\n version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"ucd-trie\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"ucd-util\"\n version = \"0.1.1\"\n@@ -1079,11 +1169,6 @@ name = \"unicode-width\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.0.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"unicode-xid\"\n version = \"0.1.0\"\n@@ -1112,7 +1197,7 @@ name = \"url_serde\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1176,12 +1261,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [metadata]\n \"checksum aho-corasick 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68f56c7353e5a9547cbd76ed90f7bb5ffc3ba09d4ea9bd1d8c06c8b1142eeb5a\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n \"checksum backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c66d56ac8dabd07f6aacdaf633f4b8262f5b3601a810a0dcddffd5c22c69daa0\"\n \"checksum base64 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"489d6c0ed21b11d038c31b6ceccca973e65d73ba3bd8ecb9a2babf5546164643\"\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n+\"checksum block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a076c298b9ecdb530ed9d967e74a6027d6a7478924520acddcddc24c1c8ab3ab\"\n+\"checksum byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"560c32574a12a89ecd91f5e742165893f86e3ab98d21f8ea548658eb9eef5f40\"\n \"checksum byteorder 1.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90492c5858dd7d2e78691cfb89f90d273a2800fc11d98f60786e5d87e2f83781\"\n \"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f159dfd43363c4d08055a07703eb7a3406b0dac4d0584d96965a3262db3c9d16\"\n@@ -1195,22 +1283,27 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum crossbeam-epoch 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c90f1474584f38e270b5b613e898c8c328aa4f3dea85e0a27ac2e642f009416\"\n \"checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9\"\n \"checksum crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"677d453a17e8bd2b913fa38e8b9cf04bcdbb5be790aa294f2389661d72036015\"\n+\"checksum derive-new 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"899ec79626c14e00ccc9729b4d750bbe67fe76a8f436824c16e0233bbd9d7daa\"\n \"checksum deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"850878694b7933ca4c9569d30a34b55031b9b139ee1fc7b94a527c4ef960d690\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n+\"checksum digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03b072242a8cbaf9c145665af9d250c59af3b958f83ed6824e13533cf76d5b90\"\n \"checksum drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"69b26e475fd29098530e709294e94e661974c851aed42512793f120fed4e199f\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e791d3be96241c77c43846b665ef1384606da2cd2a48730abe606a12906e02\"\n \"checksum failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7efb22686e4a466b1ec1a15c2898f91fa9cb340452496dca654032de20ff95b9\"\n \"checksum failure_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"946d0e98a50d9831f5d589038d2ca7f8f455b1c21028c0db0e84116a12696426\"\n+\"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \"checksum flexi_logger 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2103a4bd3f67bf8b3e89fe0695cd13ac23c9968a2a81f2ccf2d95f1bb4e5a520\"\n \"checksum fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b0408ab57c1bf7c634b2ac6a165d14f642dc3335a43203090a7f8c78b54577b\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n+\"checksum generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef25c5683767570c2bbd7deba372926a55eaae9982d7726ee2a1050239d45b9d\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea04fa3ead4e05e51a7c806fc07271fdbde4e246a6c6d1efd52e72230b771b82\"\n \"checksum humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n-\"checksum im 12.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90742b94a13db9b161eeab35f89bc9723634eb72bfd124f3ebb025734fdfef18\"\n+\"checksum im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9c7f9bb8aee47fc16d535a705f7867a9fc83bb822e5e1043bb98e77ffeed3c\"\n+\"checksum indexmap 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08173ba1e906efb6538785a8844dd496f5d34f0a2d88038e95195172fc667220\"\n \"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n \"checksum join_to_string 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bddc885f3fd69dd4b5d747c2efe6dd2c36d795ea9938281ed50910e32c95e31\"\n@@ -1219,12 +1312,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76e3a3ef172f1a0b9a9ff0dd1491ae5e6c948b94479a3021819ba7d860c8645d\"\n \"checksum lock_api 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"775751a3e69bde4df9b38dd00a1b5d6ac13791e4223d4a0506577f0dd27cfb7a\"\n \"checksum log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fcce5fa49cc693c312001daf1d13411c4a5283796bac1084299ea3e567113f\"\n+\"checksum maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08cbb6b4fef96b6d77bfc40ec491b1690c779e77b05cd9f07f787ed376fd4c43\"\n \"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \"checksum memchr 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b3629fe9fdbff6daa6c33b90f7c08355c1aca05a3d01fa8063b822fcf185f3b\"\n \"checksum memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a2228dca57108069a5262f2ed8bd2e82496d2e074a06d1ccc7ce1687b6ae0a2\"\n-\"checksum num-derive 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2c31b75c36a993d30c7a13d70513cb93f02acafdd5b7ba250f9b0e18615de7\"\n+\"checksum num-derive 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8af1847c907c2f04d7bfd572fb25bbb4385c637fe5be163cf2f8c5d778fe1e7d\"\n \"checksum num-integer 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e83d528d2677f0518c570baf2b7abdcf0cd2d248860b68507bdcb3e91d4c0cea\"\n \"checksum num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b3a5d7cc97d6d30d8b9bc8fa19bf45349ffe46241e8816f50f62f6d6aaabee1\"\n \"checksum num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a3322e4bca9d212ad9a158a02abc6934d005490c054a2778df73a70aa0a30\"\n@@ -1233,14 +1327,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0802bff09003b291ba756dc7e79313e51cc31667e94afbe847def490424cde5\"\n \"checksum parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad7f7e6ebdc79edff6fdcb87a55b620174f7a989e3eb31b65231f4af57f00b8c\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n-\"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n-\"checksum pest_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3294f437119209b084c797604295f40227cffa35c57220b1e99a6ff3bf8ee4\"\n-\"checksum proc-macro2 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffe022fb8c8bd254524b0b3305906c1921fa37a84a644e29079a9e62200c3901\"\n-\"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum pest 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3abb0d36ede865dcc689fd3bee2ff39094eff6e57a814f4a53c3c6108088353\"\n+\"checksum pest_derive 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b76f477146419bc539a63f4ef40e902166cb43b3e51cecc71d9136fd12c567e7\"\n+\"checksum pest_generator 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ebee4e9680be4fd162e6f3394ae4192a6b60b1e4d17d845e631f0c68d1a3386\"\n+\"checksum pest_meta 2.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f6d5f6f0e6082578c86af197d780dc38328e3f768cec06aac9bc46d714e8221\"\n+\"checksum proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d7b7eaaa90b4a90a932a9ea6666c95a389e424eff347f0f793979289429feee\"\n \"checksum quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd636425967c33af890042c483632d33fa7a18f19ad1d7ea72e8998c6ef8dea5\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n \"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n-\"checksum rand_core 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edecf0f94da5551fc9b492093e30b041a891657db7940ee221f9d2f66e82eef2\"\n+\"checksum rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1961a422c4d189dfb50ffa9320bf1f2a9bd54ecb92792fb9477f99a1045f3372\"\n+\"checksum rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0905b6b7079ec73b314d4c748701f6931eb79fd97c668caa3f1899b22b32c6db\"\n \"checksum rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df7a791f788cb4c516f0e091301a29c2b71ef680db5e644a7d68835c8ae6dbfa\"\n \"checksum rayon-core 1.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b055d1e92aba6877574d8fe604a63c8b5df60f60e5982bf7ccbb1338ea527356\"\n \"checksum redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c214e91d3ecf43e9a4e41e578973adeb14b474f2bee858742d127af75a0112b1\"\n@@ -1256,32 +1352,33 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7153dd96dade874ab973e098cb62fcdbb89a03682e46b144fd09550998d4a4a7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\"\n+\"checksum salsa 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8301c563959d6d50fe0a34817f0d9ff08fe12eda7456e01e2bbde1588ea30602\"\n \"checksum same-file 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10f7794e2fda7f594866840e95f5c5962e886e228e68b6505885811a94dd728c\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\" = \"84257ccd054dc351472528c8587b4de2dbf0dc0fe2e634030c1a90bfdacebaa9\"\n-\"checksum serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31569d901045afbff7a9479f793177fe9259819aff10ab4f89ef69bbc5f567fe\"\n-\"checksum serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb47a3d5c84320222f66d7db21157c4a7407755de41798f9b4c1c40593397b1a\"\n+\"checksum serde 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15c141fc7027dd265a47c090bf864cf62b42c4d228bbcf4e51a0c9e2b0d3f7ef\"\n+\"checksum serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"225de307c6302bec3898c51ca302fc94a7a1697ef0845fcee6448f33c032249c\"\n+\"checksum serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43344e7ce05d0d8280c5940cabb4964bea626aa58b1ec0e8c73fa2a8512a38ce\"\n+\"checksum sha-1 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51b9d1f3b5de8a167ab06834a7c883bd197f2191e1dda1a22d9ccfeedbf9aded\"\n \"checksum slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bc762e6a4b6c6fcaade73e77f9ebc6991b676f88bb2358bddb56560f073373\"\n \"checksum smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"153ffa32fd170e9944f7e0838edf824a754ec4c1fc64746fcc9fe1f8fa602e5d\"\n-\"checksum smol_str 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"248055d41f4c53f8ee7048e8a578a5190d0cca306630718091e4d481735e44b9\"\n+\"checksum smol_str 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3ed6f19b800d76574926e458d5f8e2dbea86c2b58c08d33a982448f09ac8d0c\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum superslice 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b50b13d42370e0f5fc62eafdd5c2d20065eaf5458dab215ff3e20e63eea96b30\"\n-\"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"261ae9ecaa397c42b960649561949d69311f08eeaea86a65696e6e46517cf741\"\n-\"checksum syn 0.15.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"455a6ec9b368f8c479b0ae5494d13b22dc00990d2f00d68c9dc6a2dc4f17f210\"\n-\"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n+\"checksum syn 0.15.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b036b7b35e846707c0e55c2c9441fa47867c0f87fca416921db3261b1d8c741a\"\n \"checksum synstructure 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85bb9b7550d063ea184027c9b8c20ac167cd36d3e06b3a40bceb9d746dc1a7b7\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n-\"checksum tera 0.11.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f79f17fe555fffe4838a082a63636883ee13022888dc7bdc99edad8e0a411cd\"\n+\"checksum tera 0.11.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2829d259c4699fbbe8acb353d231e6da31ff4301c52244413ed29ff6093da412\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum text_unit 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"93fc86da66d0b9aa8d359b0ec31b4342c6bc52637eadef05b91b098551a9f8e9\"\n \"checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum time 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d825be0eb33fda1a7e68012d51e9c7f451dc1a69391e7fdc197060bb8c56667b\"\n \"checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169\"\n+\"checksum ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71a9c5b1fe77426cf144cc30e49e955270f5086e31a6441dfa8b32efc09b9d77\"\n \"checksum ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd2be2d6639d0f8fe6cdda291ad456e23629558d466e2789d2c3e9892bda285d\"\n \"checksum unic-char-property 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce36d3f7ce754afdbccccf8ff0dd0134e50fb44aaae579f96218856e9e5dbd1e\"\n \"checksum unic-char-range 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab85fab42ad1b26cafc03bf891f69cb4d6e15f491030e89a0122197baa8ae8\"\n@@ -1293,7 +1390,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a0180bc61fc5a987082bfa111f4cc95c4caff7f9799f3e46df09163a937aa25\"\n \"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\"\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n-\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a321979c09843d272956e73700d12c4e7d3d92b2ee112b31548aef0d4efc5a6\""}, {"sha": "17b04182fb5f541b9effa0a7e6e91ac72e00dead", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -15,7 +15,7 @@ fst = \"0.3.1\"\n im = \"12.0.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n-salsa = { path = \"../salsa\" }\n+salsa = \"0.5.0\"\n rustc-hash = \"1.0\"\n \n [dev-dependencies]"}, {"sha": "c69577233995f473fd8989b64a9baaaa4e0ca5b4", "filename": "crates/ra_analysis/src/db.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -0,0 +1,117 @@\n+use std::{\n+    fmt,\n+    sync::Arc,\n+    hash::{Hash, Hasher},\n+};\n+use salsa;\n+use rustc_hash::FxHashSet;\n+use ra_syntax::File;\n+use ra_editor::{LineIndex};\n+use crate::{\n+    symbol_index::SymbolIndex,\n+    module_map::{ModulesDatabase, ModuleTreeQuery, ModuleDescriptorQuery},\n+    FileId, FileResolverImp,\n+};\n+\n+#[derive(Default)]\n+pub(crate) struct RootDatabase {\n+    runtime: salsa::runtime::Runtime<RootDatabase>,\n+}\n+\n+impl fmt::Debug for RootDatabase {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.write_str(\"RootDatabase { ... }\")\n+    }\n+}\n+\n+impl salsa::Database for RootDatabase {\n+    fn salsa_runtime(&self) -> &salsa::runtime::Runtime<RootDatabase> {\n+        &self.runtime\n+    }\n+}\n+\n+impl salsa::ParallelDatabase for RootDatabase {\n+    fn fork(&self) -> Self {\n+        RootDatabase {\n+            runtime: self.runtime.fork(),\n+        }\n+    }\n+}\n+\n+impl Clone for RootDatabase {\n+    fn clone(&self) -> RootDatabase {\n+        salsa::ParallelDatabase::fork(self)\n+    }\n+}\n+\n+salsa::database_storage! {\n+    pub(crate) struct RootDatabaseStorage for RootDatabase {\n+        impl FilesDatabase {\n+            fn file_text() for FileTextQuery;\n+            fn file_set() for FileSetQuery;\n+        }\n+        impl SyntaxDatabase {\n+            fn file_syntax() for FileSyntaxQuery;\n+            fn file_lines() for FileLinesQuery;\n+            fn file_symbols() for FileSymbolsQuery;\n+        }\n+        impl ModulesDatabase {\n+            fn module_tree() for ModuleTreeQuery;\n+            fn module_descriptor() for ModuleDescriptorQuery;\n+        }\n+    }\n+}\n+\n+salsa::query_group! {\n+    pub(crate) trait FilesDatabase: salsa::Database {\n+        fn file_text(file_id: FileId) -> Arc<String> {\n+            type FileTextQuery;\n+            storage input;\n+        }\n+        fn file_set(key: ()) -> Arc<FileSet> {\n+            type FileSetQuery;\n+            storage input;\n+        }\n+    }\n+}\n+\n+#[derive(Default, Debug, PartialEq, Eq)]\n+pub(crate) struct FileSet {\n+    pub(crate) files: FxHashSet<FileId>,\n+    pub(crate) resolver: FileResolverImp,\n+}\n+\n+impl Hash for FileSet {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        let mut files = self.files.iter().cloned().collect::<Vec<_>>();\n+        files.sort();\n+        files.hash(hasher);\n+    }\n+}\n+\n+salsa::query_group! {\n+    pub(crate) trait SyntaxDatabase: FilesDatabase {\n+        fn file_syntax(file_id: FileId) -> File {\n+            type FileSyntaxQuery;\n+        }\n+        fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n+            type FileLinesQuery;\n+        }\n+        fn file_symbols(file_id: FileId) -> Arc<SymbolIndex> {\n+            type FileSymbolsQuery;\n+        }\n+    }\n+}\n+\n+fn file_syntax(db: &impl SyntaxDatabase, file_id: FileId) -> File {\n+    let text = db.file_text(file_id);\n+    File::parse(&*text)\n+}\n+fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n+    let text = db.file_text(file_id);\n+    Arc::new(LineIndex::new(&*text))\n+}\n+fn file_symbols(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n+    let syntax = db.file_syntax(file_id);\n+    Arc::new(SymbolIndex::for_file(file_id, syntax))\n+}"}, {"sha": "7669b6184550c61efd33315987dd8964765cb47d", "filename": "crates/ra_analysis/src/db/imp.rs", "status": "removed", "additions": 0, "deletions": 153, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fra_analysis%2Fsrc%2Fdb%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fra_analysis%2Fsrc%2Fdb%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb%2Fimp.rs?ref=575b8635073ae0ea9e2aebbab613daf97fe9af90", "patch": "@@ -1,153 +0,0 @@\n-use std::{\n-    sync::Arc,\n-    any::Any,\n-    hash::{Hash, Hasher},\n-    collections::hash_map::{DefaultHasher},\n-    iter,\n-};\n-use rustc_hash::FxHashMap;\n-use salsa;\n-use crate::{FileId, imp::FileResolverImp};\n-use super::{State, Query, QueryCtx};\n-\n-pub(super) type Data = Arc<Any + Send + Sync + 'static>;\n-\n-#[derive(Debug)]\n-pub(super) struct Db {\n-    names: Arc<FxHashMap<salsa::QueryTypeId, &'static str>>,\n-    pub(super) imp: salsa::Db<State, Data>,\n-}\n-\n-impl Db {\n-    pub(super) fn new(mut reg: QueryRegistry) -> Db {\n-        let config = reg.config.take().unwrap();\n-        Db {\n-            names: Arc::new(reg.names),\n-            imp: salsa::Db::new(config, State::default())\n-        }\n-    }\n-    pub(crate) fn with_changes(&self, new_state: State, changed_files: &[FileId], resolver_changed: bool) -> Db {\n-        let names = self.names.clone();\n-        let mut invalidations = salsa::Invalidations::new();\n-        invalidations.invalidate(FILE_TEXT, changed_files.iter().map(hash).map(salsa::InputFingerprint));\n-        if resolver_changed {\n-            invalidations.invalidate(FILE_SET, iter::once(salsa::InputFingerprint(hash(&()))));\n-        } else {\n-            invalidations.invalidate(FILE_SET, iter::empty());\n-        }\n-        let imp = self.imp.with_ground_data(\n-            new_state,\n-            invalidations,\n-        );\n-        Db { names, imp }\n-    }\n-    pub(super) fn extract_trace(&self, ctx: &salsa::QueryCtx<State, Data>) -> Vec<&'static str> {\n-        ctx.trace().into_iter().map(|it| self.names[&it]).collect()\n-    }\n-}\n-\n-pub(crate) trait EvalQuery {\n-    type Params;\n-    type Output;\n-    fn query_type(&self) -> salsa::QueryTypeId;\n-    fn f(&self) -> salsa::QueryFn<State, Data>;\n-    fn get(&self, ctx: &QueryCtx, params: Self::Params) -> Arc<Self::Output>;\n-}\n-\n-impl<T, R> EvalQuery for Query<T, R>\n-where\n-    T: Hash + Send + Sync + 'static,\n-    R: Hash + Send + Sync + 'static,\n-{\n-    type Params = T;\n-    type Output = R;\n-    fn query_type(&self) -> salsa::QueryTypeId {\n-        salsa::QueryTypeId(self.0)\n-    }\n-    fn f(&self) -> salsa::QueryFn<State, Data> {\n-        let f = self.1;\n-        Box::new(move |ctx, data| {\n-            let ctx = QueryCtx { imp: ctx };\n-            let data: &T = data.downcast_ref().unwrap();\n-            let res = f(ctx, data);\n-            let h = hash(&res);\n-            (Arc::new(res), salsa::OutputFingerprint(h))\n-        })\n-    }\n-    fn get(&self, ctx: &QueryCtx, params: Self::Params) -> Arc<Self::Output> {\n-        let query_id = salsa::QueryId(\n-            self.query_type(),\n-            salsa::InputFingerprint(hash(&params)),\n-        );\n-        let res = ctx.imp.get(query_id, Arc::new(params));\n-        res.downcast().unwrap()\n-    }\n-}\n-\n-pub(super) struct QueryRegistry {\n-    config: Option<salsa::QueryConfig<State, Data>>,\n-    names: FxHashMap<salsa::QueryTypeId, &'static str>,\n-}\n-\n-impl QueryRegistry {\n-    pub(super) fn new() -> QueryRegistry {\n-        let mut config = salsa::QueryConfig::<State, Data>::new();\n-        config = config.with_ground_query(\n-            FILE_TEXT, Box::new(|state, params| {\n-                let file_id: &FileId = params.downcast_ref().unwrap();\n-                let res = state.file_map[file_id].clone();\n-                let fingerprint = salsa::OutputFingerprint(hash(&res));\n-                (res, fingerprint)\n-            })\n-        );\n-        config = config.with_ground_query(\n-            FILE_SET, Box::new(|state, _params| {\n-                let file_ids: Vec<FileId> = state.file_map.keys().cloned().collect();\n-                let hash = hash(&file_ids);\n-                let file_resolver = state.file_resolver.clone();\n-                let res = (file_ids, file_resolver);\n-                let fingerprint = salsa::OutputFingerprint(hash);\n-                (Arc::new(res), fingerprint)\n-            })\n-        );\n-        let mut names = FxHashMap::default();\n-        names.insert(FILE_TEXT, \"FILE_TEXT\");\n-        names.insert(FILE_SET, \"FILE_SET\");\n-        QueryRegistry { config: Some(config), names }\n-    }\n-    pub(super) fn add<Q: EvalQuery>(&mut self, q: Q, name: &'static str) {\n-        let id = q.query_type();\n-        let prev = self.names.insert(id, name);\n-        assert!(prev.is_none(), \"duplicate query: {:?}\", id);\n-        let config = self.config.take().unwrap();\n-        let config = config.with_query(id, q.f());\n-        self.config= Some(config);\n-    }\n-}\n-\n-fn hash<T: Hash>(x: &T) -> u64 {\n-    let mut hasher = DefaultHasher::new();\n-    x.hash(&mut hasher);\n-    hasher.finish()\n-}\n-\n-const FILE_TEXT: salsa::QueryTypeId = salsa::QueryTypeId(0);\n-pub(super) fn file_text(ctx: QueryCtx, file_id: FileId) -> Arc<String> {\n-    let query_id = salsa::QueryId(\n-        FILE_TEXT,\n-        salsa::InputFingerprint(hash(&file_id)),\n-    );\n-    let res = ctx.imp.get(query_id, Arc::new(file_id));\n-    res.downcast().unwrap()\n-}\n-\n-const FILE_SET: salsa::QueryTypeId = salsa::QueryTypeId(1);\n-pub(super) fn file_set(ctx: QueryCtx) -> Arc<(Vec<FileId>, FileResolverImp)> {\n-    let query_id = salsa::QueryId(\n-        FILE_SET,\n-        salsa::InputFingerprint(hash(&())),\n-    );\n-    let res = ctx.imp.get(query_id, Arc::new(()));\n-    res.downcast().unwrap()\n-}\n-"}, {"sha": "4eb7d922d9bc46c35b779d3aa5236ec2095c8077", "filename": "crates/ra_analysis/src/db/mod.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fra_analysis%2Fsrc%2Fdb%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fra_analysis%2Fsrc%2Fdb%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb%2Fmod.rs?ref=575b8635073ae0ea9e2aebbab613daf97fe9af90", "patch": "@@ -1,85 +0,0 @@\n-mod imp;\n-\n-use std::{\n-    sync::Arc,\n-};\n-use im;\n-use salsa;\n-use crate::{FileId, imp::FileResolverImp};\n-\n-#[derive(Debug, Default, Clone)]\n-pub(crate) struct State {\n-    pub(crate) file_map: im::HashMap<FileId, Arc<String>>,\n-    pub(crate) file_resolver: FileResolverImp\n-}\n-\n-#[derive(Debug)]\n-pub(crate) struct Db {\n-    imp: imp::Db,\n-}\n-\n-#[derive(Clone, Copy)]\n-pub(crate) struct QueryCtx<'a> {\n-    imp: &'a salsa::QueryCtx<State, imp::Data>,\n-}\n-\n-pub(crate) struct Query<T, R>(pub(crate) u16, pub(crate) fn(QueryCtx, &T) -> R);\n-\n-pub(crate) struct QueryRegistry {\n-    imp: imp::QueryRegistry,\n-}\n-\n-impl Default for Db {\n-    fn default() -> Db {\n-        Db::new()\n-    }\n-}\n-\n-impl Db {\n-    pub(crate) fn new() -> Db {\n-        let reg = QueryRegistry::new();\n-        Db { imp: imp::Db::new(reg.imp) }\n-    }\n-    pub(crate) fn state(&self) -> &State {\n-        self.imp.imp.ground_data()\n-    }\n-    pub(crate) fn with_changes(&self, new_state: State, changed_files: &[FileId], resolver_changed: bool) -> Db {\n-        Db { imp: self.imp.with_changes(new_state, changed_files, resolver_changed) }\n-    }\n-    pub(crate) fn make_query<F: FnOnce(QueryCtx) -> R, R>(&self, f: F) -> R {\n-        let ctx = QueryCtx { imp: &self.imp.imp.query_ctx() };\n-        f(ctx)\n-    }\n-    #[allow(unused)]\n-    pub(crate) fn trace_query<F: FnOnce(QueryCtx) -> R, R>(&self, f: F) -> (R, Vec<&'static str>) {\n-        let ctx = QueryCtx { imp: &self.imp.imp.query_ctx() };\n-        let res = f(ctx);\n-        let trace = self.imp.extract_trace(ctx.imp);\n-        (res, trace)\n-    }\n-}\n-\n-impl<'a> QueryCtx<'a> {\n-    pub(crate) fn get<Q: imp::EvalQuery>(&self, q: Q, params: Q::Params) -> Arc<Q::Output> {\n-        q.get(self, params)\n-    }\n-}\n-\n-pub(crate) fn file_text(ctx: QueryCtx, file_id: FileId) -> Arc<String> {\n-    imp::file_text(ctx, file_id)\n-}\n-\n-pub(crate) fn file_set(ctx: QueryCtx) -> Arc<(Vec<FileId>, FileResolverImp)> {\n-    imp::file_set(ctx)\n-}\n-impl QueryRegistry {\n-    fn new() -> QueryRegistry {\n-        let mut reg = QueryRegistry { imp: imp::QueryRegistry::new() };\n-        crate::queries::register_queries(&mut reg);\n-        crate::module_map::register_queries(&mut reg);\n-        reg\n-    }\n-    pub(crate) fn add<Q: imp::EvalQuery>(&mut self, q: Q, name: &'static str) {\n-        self.imp.add(q, name)\n-    }\n-}"}, {"sha": "8d9f38ca592535adaf43d76f0992944295f74133", "filename": "crates/ra_analysis/src/descriptors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     imp::FileResolverImp,\n };\n \n-#[derive(Debug, Hash)]\n+#[derive(Debug, PartialEq, Eq, Hash)]\n pub struct ModuleDescriptor {\n     pub submodules: Vec<Submodule>\n }\n@@ -43,7 +43,7 @@ pub struct Submodule {\n     pub name: SmolStr,\n }\n \n-#[derive(Hash, Debug)]\n+#[derive(Debug, PartialEq, Eq, Hash)]\n pub(crate) struct ModuleTreeDescriptor {\n     nodes: Vec<NodeData>,\n     links: Vec<LinkData>,\n@@ -52,7 +52,7 @@ pub(crate) struct ModuleTreeDescriptor {\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n struct Node(usize);\n-#[derive(Hash, Debug)]\n+#[derive(Hash, Debug, PartialEq, Eq)]\n struct NodeData {\n     file_id: FileId,\n     links: Vec<Link>,\n@@ -61,7 +61,7 @@ struct NodeData {\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub(crate) struct Link(usize);\n-#[derive(Hash, Debug)]\n+#[derive(Hash, Debug, PartialEq, Eq)]\n struct LinkData {\n     owner: Node,\n     name: SmolStr,\n@@ -70,7 +70,7 @@ struct LinkData {\n }\n \n \n-#[derive(Clone, Debug, Hash)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub enum Problem {\n     UnresolvedModule {\n         candidate: RelativePathBuf,"}, {"sha": "5efcaeca04aa6b02c7773e38dc59e38470fc03a8", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -1,8 +1,8 @@\n use std::{\n     sync::{\n         Arc,\n-        atomic::{AtomicBool, Ordering::SeqCst},\n     },\n+    hash::{Hash, Hasher},\n     fmt,\n     collections::VecDeque,\n     iter,\n@@ -29,6 +29,21 @@ pub(crate) struct FileResolverImp {\n     inner: Arc<FileResolver>\n }\n \n+impl PartialEq for FileResolverImp {\n+    fn eq(&self, other: &FileResolverImp) -> bool {\n+        self.inner() == other.inner()\n+    }\n+}\n+\n+impl Eq for FileResolverImp {\n+}\n+\n+impl Hash for FileResolverImp {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.inner().hash(hasher);\n+    }\n+}\n+\n impl FileResolverImp {\n     pub(crate) fn new(inner: Arc<FileResolver>) -> FileResolverImp {\n         FileResolverImp { inner }\n@@ -39,6 +54,9 @@ impl FileResolverImp {\n     pub(crate) fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId> {\n         self.inner.resolve(file_id, path)\n     }\n+    fn inner(&self) -> *const FileResolver {\n+        &*self.inner\n+    }\n }\n \n impl Default for FileResolverImp {\n@@ -59,29 +77,27 @@ impl Default for FileResolverImp {\n \n #[derive(Debug)]\n pub(crate) struct AnalysisHostImpl {\n-    data: Arc<WorldData>\n+    data: WorldData\n }\n \n impl AnalysisHostImpl {\n     pub fn new() -> AnalysisHostImpl {\n         AnalysisHostImpl {\n-            data: Arc::new(WorldData::default()),\n+            data: WorldData::default(),\n         }\n     }\n     pub fn analysis(&self) -> AnalysisImpl {\n         AnalysisImpl {\n-            needs_reindex: AtomicBool::new(false),\n             data: self.data.clone(),\n         }\n     }\n     pub fn change_files(&mut self, changes: &mut dyn Iterator<Item=(FileId, Option<String>)>) {\n-        let data = self.data_mut();\n-        data.root = Arc::new(data.root.apply_changes(changes, None));\n+        self.data_mut()\n+            .root.apply_changes(changes, None);\n     }\n     pub fn set_file_resolver(&mut self, resolver: FileResolverImp) {\n-        let data = self.data_mut();\n-        data.file_resolver = resolver.clone();\n-        data.root = Arc::new(data.root.apply_changes(&mut iter::empty(), Some(resolver)));\n+        self.data_mut()\n+            .root.apply_changes(&mut iter::empty(), Some(resolver));\n     }\n     pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n         let mut visited = FxHashSet::default();\n@@ -96,34 +112,24 @@ impl AnalysisHostImpl {\n         self.data_mut().libs.push(Arc::new(root));\n     }\n     fn data_mut(&mut self) -> &mut WorldData {\n-        Arc::make_mut(&mut self.data)\n+        &mut self.data\n     }\n }\n \n pub(crate) struct AnalysisImpl {\n-    needs_reindex: AtomicBool,\n-    data: Arc<WorldData>,\n+    data: WorldData,\n }\n \n impl fmt::Debug for AnalysisImpl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (&*self.data).fmt(f)\n-    }\n-}\n-\n-impl Clone for AnalysisImpl {\n-    fn clone(&self) -> AnalysisImpl {\n-        AnalysisImpl {\n-            needs_reindex: AtomicBool::new(self.needs_reindex.load(SeqCst)),\n-            data: Arc::clone(&self.data),\n-        }\n+        self.data.fmt(f)\n     }\n }\n \n impl AnalysisImpl {\n     fn root(&self, file_id: FileId) -> &SourceRoot {\n         if self.data.root.contains(file_id) {\n-            return &*self.data.root;\n+            return &self.data.root;\n         }\n         &**self.data.libs.iter().find(|it| it.contains(file_id)).unwrap()\n     }\n@@ -386,9 +392,8 @@ impl AnalysisImpl {\n \n #[derive(Default, Clone, Debug)]\n struct WorldData {\n-    file_resolver: FileResolverImp,\n     crate_graph: CrateGraph,\n-    root: Arc<WritableSourceRoot>,\n+    root: WritableSourceRoot,\n     libs: Vec<Arc<ReadonlySourceRoot>>,\n }\n "}, {"sha": "d8b355a81aad96f2504841ad71075140cb14aa28", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -19,7 +19,6 @@ mod imp;\n mod job;\n mod roots;\n mod db;\n-mod queries;\n mod descriptors;\n \n use std::{\n@@ -162,7 +161,7 @@ impl Query {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct Analysis {\n     imp: AnalysisImpl\n }\n@@ -258,3 +257,9 @@ impl LibraryData {\n         LibraryData { root }\n     }\n }\n+\n+#[test]\n+fn analysis_is_send() {\n+    fn is_send<T: Send>() {}\n+    is_send::<Analysis>();\n+}"}, {"sha": "c1799e3d4a81b2fc09c8f2a1013d49c8ea114b9a", "filename": "crates/ra_analysis/src/module_map.rs", "status": "modified", "additions": 20, "deletions": 143, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fmodule_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fmodule_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmodule_map.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -1,157 +1,34 @@\n use std::sync::Arc;\n use crate::{\n     FileId,\n-    db::{\n-        Query, QueryRegistry, QueryCtx,\n-        file_set\n-    },\n-    queries::file_syntax,\n+    db::{SyntaxDatabase},\n     descriptors::{ModuleDescriptor, ModuleTreeDescriptor},\n };\n \n-pub(crate) fn register_queries(reg: &mut QueryRegistry) {\n-    reg.add(MODULE_DESCR, \"MODULE_DESCR\");\n-    reg.add(MODULE_TREE, \"MODULE_TREE\");\n-}\n-\n-pub(crate) fn module_tree(ctx: QueryCtx) -> Arc<ModuleTreeDescriptor> {\n-    ctx.get(MODULE_TREE, ())\n-}\n-\n-const MODULE_DESCR: Query<FileId, ModuleDescriptor> = Query(30, |ctx, &file_id| {\n-    let file = file_syntax(ctx, file_id);\n-    ModuleDescriptor::new(file.ast())\n-});\n-\n-const MODULE_TREE: Query<(), ModuleTreeDescriptor> = Query(31, |ctx, _| {\n-    let file_set = file_set(ctx);\n-    let mut files = Vec::new();\n-    for &file_id in file_set.0.iter() {\n-        let module_descr = ctx.get(MODULE_DESCR, file_id);\n-        files.push((file_id, module_descr));\n-    }\n-    ModuleTreeDescriptor::new(files.iter().map(|(file_id, descr)| (*file_id, &**descr)), &file_set.1)\n-});\n-\n-#[cfg(test)]\n-mod tests {\n-    use std::collections::HashMap;\n-    use im;\n-    use relative_path::{RelativePath, RelativePathBuf};\n-    use crate::{\n-        db::{Db},\n-        imp::FileResolverImp,\n-        FileId, FileResolver,\n-    };\n-    use super::*;\n-\n-    #[derive(Debug)]\n-    struct FileMap(im::HashMap<FileId, RelativePathBuf>);\n-\n-    impl FileResolver for FileMap {\n-        fn file_stem(&self, file_id: FileId) -> String {\n-            self.0[&file_id].file_stem().unwrap().to_string()\n+salsa::query_group! {\n+    pub(crate) trait ModulesDatabase: SyntaxDatabase {\n+        fn module_tree(key: ()) -> Arc<ModuleTreeDescriptor> {\n+            type ModuleTreeQuery;\n         }\n-        fn resolve(&self, file_id: FileId, rel: &RelativePath) -> Option<FileId> {\n-            let path = self.0[&file_id].join(rel).normalize();\n-            self.0.iter()\n-                .filter_map(|&(id, ref p)| Some(id).filter(|_| p == &path))\n-                .next()\n+        fn module_descriptor(file_id: FileId) -> Arc<ModuleDescriptor> {\n+            type ModuleDescriptorQuery;\n         }\n     }\n+}\n \n-    struct Fixture {\n-        next_file_id: u32,\n-        fm: im::HashMap<FileId, RelativePathBuf>,\n-        db: Db,\n-    }\n-\n-    impl Fixture {\n-        fn new() -> Fixture {\n-            Fixture {\n-                next_file_id: 1,\n-                fm: im::HashMap::new(),\n-                db: Db::new(),\n-            }\n-        }\n-        fn add_file(&mut self, path: &str, text: &str) -> FileId {\n-            assert!(path.starts_with(\"/\"));\n-            let file_id = FileId(self.next_file_id);\n-            self.next_file_id += 1;\n-            self.fm.insert(file_id, RelativePathBuf::from(&path[1..]));\n-            let mut new_state = self.db.state().clone();\n-            new_state.file_map.insert(file_id, Arc::new(text.to_string()));\n-            new_state.file_resolver = FileResolverImp::new(\n-                Arc::new(FileMap(self.fm.clone()))\n-            );\n-            self.db = self.db.with_changes(new_state, &[file_id], true);\n-            file_id\n-        }\n-        fn remove_file(&mut self, file_id: FileId) {\n-            self.fm.remove(&file_id);\n-            let mut new_state = self.db.state().clone();\n-            new_state.file_map.remove(&file_id);\n-            new_state.file_resolver = FileResolverImp::new(\n-                Arc::new(FileMap(self.fm.clone()))\n-            );\n-            self.db = self.db.with_changes(new_state, &[file_id], true);\n-        }\n-        fn change_file(&mut self, file_id: FileId, new_text: &str) {\n-            let mut new_state = self.db.state().clone();\n-            new_state.file_map.insert(file_id, Arc::new(new_text.to_string()));\n-            self.db = self.db.with_changes(new_state, &[file_id], false);\n-        }\n-        fn check_parent_modules(\n-            &self,\n-            file_id: FileId,\n-            expected: &[FileId],\n-            queries: &[(&'static str, u64)]\n-        ) {\n-            let (tree, events) = self.db.trace_query(|ctx| module_tree(ctx));\n-            let actual = tree.parent_modules(file_id)\n-                .into_iter()\n-                .map(|link| link.owner(&tree))\n-                .collect::<Vec<_>>();\n-            assert_eq!(actual.as_slice(), expected);\n-            let mut counts = HashMap::new();\n-            events.into_iter()\n-               .for_each(|event| *counts.entry(event).or_insert(0) += 1);\n-            for &(query_id, expected_count) in queries.iter() {\n-                let actual_count = *counts.get(&query_id).unwrap_or(&0);\n-                assert_eq!(\n-                    actual_count,\n-                    expected_count,\n-                    \"counts for {} differ\",\n-                    query_id,\n-                )\n-            }\n-\n-        }\n-    }\n-\n-    #[test]\n-    fn test_parent_module() {\n-        let mut f = Fixture::new();\n-        let foo = f.add_file(\"/foo.rs\", \"\");\n-        f.check_parent_modules(foo, &[], &[(\"MODULE_DESCR\", 1)]);\n-\n-        let lib = f.add_file(\"/lib.rs\", \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib], &[(\"MODULE_DESCR\", 1)]);\n-        f.check_parent_modules(foo, &[lib], &[(\"MODULE_DESCR\", 0)]);\n-\n-        f.change_file(lib, \"\");\n-        f.check_parent_modules(foo, &[], &[(\"MODULE_DESCR\", 1)]);\n-\n-        f.change_file(lib, \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib], &[(\"MODULE_DESCR\", 1)]);\n-\n-        f.change_file(lib, \"mod bar;\");\n-        f.check_parent_modules(foo, &[], &[(\"MODULE_DESCR\", 1)]);\n \n-        f.change_file(lib, \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib], &[(\"MODULE_DESCR\", 1)]);\n+fn module_descriptor(db: &impl ModulesDatabase, file_id: FileId) -> Arc<ModuleDescriptor> {\n+    let file = db.file_syntax(file_id);\n+    Arc::new(ModuleDescriptor::new(file.ast()))\n+}\n \n-        f.remove_file(lib);\n-        f.check_parent_modules(foo, &[], &[(\"MODULE_DESCR\", 0)]);\n+fn module_tree(db: &impl ModulesDatabase, (): ()) -> Arc<ModuleTreeDescriptor> {\n+    let file_set = db.file_set(());\n+    let mut files = Vec::new();\n+    for &file_id in file_set.files.iter() {\n+        let module_descr = db.module_descriptor(file_id);\n+        files.push((file_id, module_descr));\n     }\n+    let res = ModuleTreeDescriptor::new(files.iter().map(|(file_id, descr)| (*file_id, &**descr)), &file_set.resolver);\n+    Arc::new(res)\n }"}, {"sha": "613bf1e61031f40fd28eba72fd39396808150d5e", "filename": "crates/ra_analysis/src/queries.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fra_analysis%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fra_analysis%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fqueries.rs?ref=575b8635073ae0ea9e2aebbab613daf97fe9af90", "patch": "@@ -1,39 +0,0 @@\n-use std::sync::Arc;\n-use ra_syntax::File;\n-use ra_editor::LineIndex;\n-use crate::{\n-    FileId,\n-    db::{Query, QueryCtx, QueryRegistry},\n-    symbol_index::SymbolIndex,\n-};\n-\n-pub(crate) use crate::db::{file_text, file_set};\n-\n-pub(crate) fn file_syntax(ctx: QueryCtx, file_id: FileId) -> File {\n-    (&*ctx.get(FILE_SYNTAX, file_id)).clone()\n-}\n-pub(crate) fn file_lines(ctx: QueryCtx, file_id: FileId) -> Arc<LineIndex> {\n-    ctx.get(FILE_LINES, file_id)\n-}\n-pub(crate) fn file_symbols(ctx: QueryCtx, file_id: FileId) -> Arc<SymbolIndex> {\n-    ctx.get(FILE_SYMBOLS, file_id)\n-}\n-\n-const FILE_SYNTAX: Query<FileId, File> = Query(16, |ctx, file_id: &FileId| {\n-    let text = file_text(ctx, *file_id);\n-    File::parse(&*text)\n-});\n-const FILE_LINES: Query<FileId, LineIndex> = Query(17, |ctx, file_id: &FileId| {\n-    let text = file_text(ctx, *file_id);\n-    LineIndex::new(&*text)\n-});\n-const FILE_SYMBOLS: Query<FileId, SymbolIndex> = Query(18, |ctx, file_id: &FileId| {\n-    let syntax = file_syntax(ctx, *file_id);\n-    SymbolIndex::for_file(*file_id, syntax)\n-});\n-\n-pub(crate) fn register_queries(reg: &mut QueryRegistry) {\n-    reg.add(FILE_SYNTAX, \"FILE_SYNTAX\");\n-    reg.add(FILE_LINES, \"FILE_LINES\");\n-    reg.add(FILE_SYMBOLS, \"FILE_SYMBOLS\");\n-}"}, {"sha": "76bcecd38edec24cccb5a67f16e3ad132e1960e3", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -5,7 +5,8 @@ use std::{\n \n use once_cell::sync::OnceCell;\n use rayon::prelude::*;\n-use rustc_hash::FxHashMap;\n+use salsa::Database;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use ra_editor::LineIndex;\n use ra_syntax::File;\n \n@@ -14,7 +15,8 @@ use crate::{\n     imp::FileResolverImp,\n     symbol_index::SymbolIndex,\n     descriptors::{ModuleDescriptor, ModuleTreeDescriptor},\n-    db::Db,\n+    db::{self, FilesDatabase, SyntaxDatabase},\n+    module_map::ModulesDatabase,\n };\n \n pub(crate) trait SourceRoot {\n@@ -25,62 +27,68 @@ pub(crate) trait SourceRoot {\n     fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>);\n }\n \n-#[derive(Default, Debug)]\n+#[derive(Default, Debug, Clone)]\n pub(crate) struct WritableSourceRoot {\n-    db: Db,\n+    db: db::RootDatabase,\n }\n \n impl WritableSourceRoot {\n     pub fn apply_changes(\n-        &self,\n+        &mut self,\n         changes: &mut dyn Iterator<Item=(FileId, Option<String>)>,\n         file_resolver: Option<FileResolverImp>,\n-    ) -> WritableSourceRoot {\n-        let resolver_changed = file_resolver.is_some();\n-        let mut changed_files = Vec::new();\n-        let mut new_state = self.db.state().clone();\n-\n+    ) {\n+        let mut changed = FxHashSet::default();\n+        let mut removed = FxHashSet::default();\n         for (file_id, text) in changes {\n-            changed_files.push(file_id);\n             match text {\n-                Some(text) => {\n-                    new_state.file_map.insert(file_id, Arc::new(text));\n-                },\n                 None => {\n-                    new_state.file_map.remove(&file_id);\n+                    removed.insert(file_id);\n+                }\n+                Some(text) => {\n+                    self.db.query(db::FileTextQuery)\n+                        .set(file_id, Arc::new(text));\n+                    changed.insert(file_id);\n                 }\n             }\n         }\n-        if let Some(file_resolver) = file_resolver {\n-            new_state.file_resolver = file_resolver\n-        }\n-        WritableSourceRoot {\n-            db: self.db.with_changes(new_state, &changed_files, resolver_changed)\n+        let file_set = self.db.file_set(());\n+        let mut files: FxHashSet<FileId> = file_set\n+            .files\n+            .clone();\n+        for file_id in removed {\n+            files.remove(&file_id);\n         }\n+        files.extend(changed);\n+        let resolver = file_resolver.unwrap_or_else(|| file_set.resolver.clone());\n+        self.db.query(db::FileSetQuery)\n+            .set((), Arc::new(db::FileSet { files, resolver }));\n     }\n }\n \n impl SourceRoot for WritableSourceRoot {\n     fn module_tree(&self) -> Arc<ModuleTreeDescriptor> {\n-        self.db.make_query(crate::module_map::module_tree)\n+        self.db.module_tree(())\n     }\n-\n     fn contains(&self, file_id: FileId) -> bool {\n-        self.db.state().file_map.contains_key(&file_id)\n+        self.db.file_set(())\n+            .files\n+            .contains(&file_id)\n     }\n     fn lines(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.db.make_query(|ctx| crate::queries::file_lines(ctx, file_id))\n+        self.db.file_lines(file_id)\n     }\n     fn syntax(&self, file_id: FileId) -> File {\n-        self.db.make_query(|ctx| crate::queries::file_syntax(ctx, file_id))\n+        self.db.file_syntax(file_id)\n     }\n     fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) {\n-        self.db.make_query(|ctx| {\n-            let file_set = crate::queries::file_set(ctx);\n-            let syms = file_set.0.iter()\n-                .map(|file_id| crate::queries::file_symbols(ctx, *file_id));\n-            acc.extend(syms);\n-        });\n+        let db = &self.db;\n+        let symbols =  db.file_set(());\n+        let symbols = symbols\n+            .files\n+            .iter()\n+            .map(|&file_id| db.file_symbols(file_id));\n+        acc.extend(symbols);\n     }\n }\n "}, {"sha": "54672fde42d2067bc9afcdce241de43268f9846e", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -17,6 +17,15 @@ pub(crate) struct SymbolIndex {\n     map: fst::Map,\n }\n \n+impl PartialEq for SymbolIndex {\n+    fn eq(&self, other: &SymbolIndex) -> bool {\n+        self.symbols == other.symbols\n+    }\n+}\n+\n+impl Eq for SymbolIndex {\n+}\n+\n impl Hash for SymbolIndex {\n     fn hash<H: Hasher>(&self, hasher: &mut H) {\n         self.symbols.hash(hasher)"}, {"sha": "2d3679fa92cb5aa29048716bbd77cc44e63ac993", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -238,4 +238,4 @@ fn bar() {\n     assert_eq!(desc.params, vec![\"&self\".to_string(), \"x\".to_string()]);\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, Some(1));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "95d64b8a8072013165a1004f69728e2af842510e", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -1,7 +1,7 @@\n use superslice::Ext;\n use crate::TextUnit;\n \n-#[derive(Clone, Debug, Hash)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub struct LineIndex {\n     newlines: Vec<TextUnit>,\n }"}, {"sha": "d9e4b2df7a4eef3ef130b5054b5d87982e07671c", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -17,7 +17,7 @@ pub struct StructureNode {\n     pub kind: SyntaxKind,\n }\n \n-#[derive(Debug, Clone, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FileSymbol {\n     pub name: SmolStr,\n     pub node_range: TextRange,"}, {"sha": "5acb39b6001984c294263855a9b819c67a229d10", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -478,7 +478,7 @@ pub fn handle_code_action(\n }\n \n pub fn publish_diagnostics(\n-    world: ServerWorld,\n+    world: &ServerWorld,\n     file_id: FileId,\n ) -> Result<req::PublishDiagnosticsParams> {\n     let uri = world.file_id_to_uri(file_id)?;\n@@ -497,7 +497,7 @@ pub fn publish_diagnostics(\n }\n \n pub fn publish_decorations(\n-    world: ServerWorld,\n+    world: &ServerWorld,\n     file_id: FileId,\n ) -> Result<req::PublishDecorationsParams> {\n     let uri = world.file_id_to_uri(file_id)?;"}, {"sha": "cf2477cb519b5b694323fd5fe73f2aa021f56804", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -391,7 +391,7 @@ fn update_file_notifications_on_threadpool(\n ) {\n     pool.spawn(move || {\n         for file_id in subscriptions {\n-            match handlers::publish_diagnostics(world.clone(), file_id) {\n+            match handlers::publish_diagnostics(&world, file_id) {\n                 Err(e) => {\n                     error!(\"failed to compute diagnostics: {:?}\", e)\n                 }\n@@ -400,7 +400,7 @@ fn update_file_notifications_on_threadpool(\n                     sender.send(Task::Notify(not));\n                 }\n             }\n-            match handlers::publish_decorations(world.clone(), file_id) {\n+            match handlers::publish_decorations(&world, file_id) {\n                 Err(e) => {\n                     error!(\"failed to compute decorations: {:?}\", e)\n                 }"}, {"sha": "9b3013ae8b48c5ef33d722d010f5711c9fb0d079", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -23,7 +23,6 @@ pub struct ServerWorldState {\n     pub mem_map: FxHashMap<FileId, Option<String>>,\n }\n \n-#[derive(Clone)]\n pub struct ServerWorld {\n     pub workspaces: Arc<Vec<CargoWorkspace>>,\n     pub analysis: Analysis,"}, {"sha": "7eba5ee614fb92b7dbe66458c307db5ab22fb849", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c74fd96192679525f985b9f6f85e9bdc011aa09/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=8c74fd96192679525f985b9f6f85e9bdc011aa09", "patch": "@@ -59,7 +59,7 @@ use crate::{\n     yellow::{GreenNode},\n };\n \n-#[derive(Clone, Debug, Hash)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub struct File {\n     root: SyntaxNode\n }"}, {"sha": "9eb83234f0cbe92f802314002f4aaa198ccfd721", "filename": "crates/salsa/Cargo.toml", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fsalsa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fsalsa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2FCargo.toml?ref=575b8635073ae0ea9e2aebbab613daf97fe9af90", "patch": "@@ -1,8 +0,0 @@\n-[package]\n-name = \"salsa\"\n-version = \"0.1.0\"\n-authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n-\n-[dependencies]\n-parking_lot = \"0.6.3\"\n-im = \"12.0.0\""}, {"sha": "35deed37417c5ba2559669cd575f02589dfdcd7b", "filename": "crates/salsa/src/lib.rs", "status": "removed", "additions": 0, "deletions": 293, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fsalsa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fsalsa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2Fsrc%2Flib.rs?ref=575b8635073ae0ea9e2aebbab613daf97fe9af90", "patch": "@@ -1,293 +0,0 @@\n-extern crate im;\n-extern crate parking_lot;\n-\n-use std::{\n-    sync::Arc,\n-    collections::{HashSet, HashMap},\n-    cell::RefCell,\n-};\n-use parking_lot::Mutex;\n-\n-pub type GroundQueryFn<T, D> = Box<Fn(&T, &D) -> (D, OutputFingerprint) + Send + Sync + 'static>;\n-pub type QueryFn<T, D> = Box<Fn(&QueryCtx<T, D>, &D) -> (D, OutputFingerprint) + Send + Sync + 'static>;\n-\n-#[derive(Debug)]\n-pub struct Db<T, D> {\n-    db: Arc<DbState<T, D>>,\n-    query_config: Arc<QueryConfig<T, D>>,\n-}\n-\n-pub struct QueryConfig<T, D> {\n-    ground_fn: HashMap<QueryTypeId, GroundQueryFn<T, D>>,\n-    query_fn: HashMap<QueryTypeId, QueryFn<T, D>>,\n-}\n-\n-impl<T, D> ::std::fmt::Debug for QueryConfig<T, D> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-        ::std::fmt::Display::fmt(\"QueryConfig { ... }\", f)\n-    }\n-}\n-\n-#[derive(Debug)]\n-struct DbState<T, D> {\n-    ground_data: T,\n-    gen: Gen,\n-    graph: Mutex<im::HashMap<QueryId, (Gen, Arc<QueryRecord<D>>)>>,\n-}\n-\n-#[derive(Debug)]\n-struct QueryRecord<D> {\n-    params: D,\n-    output: D,\n-    output_fingerprint: OutputFingerprint,\n-    deps: Vec<(QueryId, OutputFingerprint)>,\n-}\n-\n-impl<T, D> DbState<T, D> {\n-    fn record(\n-        &self,\n-        query_id: QueryId,\n-        params: D,\n-        output: D,\n-        output_fingerprint: OutputFingerprint,\n-        deps: Vec<(QueryId, OutputFingerprint)>,\n-    ) {\n-        let gen = self.gen;\n-        let record = QueryRecord {\n-            params,\n-            output,\n-            output_fingerprint,\n-            deps,\n-        };\n-        self.graph.lock().insert(query_id, (gen, Arc::new(record)));\n-    }\n-}\n-\n-impl<T, D> QueryConfig<T, D> {\n-    pub fn new() -> Self {\n-        QueryConfig {\n-            ground_fn: HashMap::new(),\n-            query_fn: HashMap::new(),\n-        }\n-    }\n-    pub fn with_ground_query(\n-        mut self,\n-        query_type: QueryTypeId,\n-        query_fn: GroundQueryFn<T, D>\n-    ) -> Self {\n-        let prev = self.ground_fn.insert(query_type, query_fn);\n-        assert!(prev.is_none());\n-        self\n-    }\n-    pub fn with_query(\n-        mut self,\n-        query_type: QueryTypeId,\n-        query_fn: QueryFn<T, D>,\n-    ) -> Self {\n-        let prev = self.query_fn.insert(query_type, query_fn);\n-        assert!(prev.is_none());\n-        self\n-    }\n-}\n-\n-pub struct QueryCtx<T, D> {\n-    db: Arc<DbState<T, D>>,\n-    query_config: Arc<QueryConfig<T, D>>,\n-    stack: RefCell<Vec<Vec<(QueryId, OutputFingerprint)>>>,\n-    executed: RefCell<Vec<QueryTypeId>>,\n-}\n-\n-impl<T, D> QueryCtx<T, D>\n-where\n-    D: Clone\n-{\n-    fn new(db: &Db<T, D>) -> QueryCtx<T, D> {\n-        QueryCtx {\n-            db: Arc::clone(&db.db),\n-            query_config: Arc::clone(&db.query_config),\n-            stack: RefCell::new(vec![Vec::new()]),\n-            executed: RefCell::new(Vec::new()),\n-        }\n-    }\n-    pub fn get(\n-        &self,\n-        query_id: QueryId,\n-        params: D,\n-    ) -> D {\n-        let (res, output_fingerprint) = self.get_inner(query_id, params);\n-        self.record_dep(query_id, output_fingerprint);\n-        res\n-    }\n-    pub fn trace(&self) -> Vec<QueryTypeId> {\n-        ::std::mem::replace(&mut *self.executed.borrow_mut(), Vec::new())\n-    }\n-\n-    fn get_inner(\n-        &self,\n-        query_id: QueryId,\n-        params: D,\n-    ) -> (D, OutputFingerprint) {\n-        let (gen, record) = {\n-            let guard = self.db.graph.lock();\n-            match guard.get(&query_id).map(|it| it.clone()){\n-                None => {\n-                    drop(guard);\n-                    return self.force(query_id, params);\n-                },\n-                Some(it) => it,\n-            }\n-        };\n-        if gen == self.db.gen {\n-            return (record.output.clone(), record.output_fingerprint)\n-        }\n-        if self.query_config.ground_fn.contains_key(&query_id.0) {\n-            let (invalidated, record) = {\n-                let guard = self.db.graph.lock();\n-                let (gen, ref record) = guard[&query_id];\n-                (gen == INVALIDATED, record.clone())\n-            };\n-            if invalidated {\n-                return self.force(query_id, params);\n-            } else {\n-                return (record.output.clone(), record.output_fingerprint);\n-            }\n-        }\n-        for (dep_query_id, prev_fingerprint) in record.deps.iter().cloned() {\n-            let dep_params: D = {\n-                let guard = self.db.graph.lock();\n-                guard[&dep_query_id]\n-                .1\n-                .params\n-                .clone()\n-            };\n-            if prev_fingerprint != self.get_inner(dep_query_id, dep_params).1 {\n-                return self.force(query_id, params)\n-            }\n-        }\n-        let gen = self.db.gen;\n-        {\n-            let mut guard = self.db.graph.lock();\n-            guard[&query_id].0 = gen;\n-        }\n-        (record.output.clone(), record.output_fingerprint)\n-    }\n-    fn force(\n-        &self,\n-        query_id: QueryId,\n-        params: D,\n-    ) -> (D, OutputFingerprint) {\n-        self.executed.borrow_mut().push(query_id.0);\n-        self.stack.borrow_mut().push(Vec::new());\n-\n-        let (res, output_fingerprint) = if let Some(f) = self.query_config.ground_fn.get(&query_id.0) {\n-            f(&self.db.ground_data, &params)\n-        } else if let Some(f) = self.query_config.query_fn.get(&query_id.0) {\n-            f(self, &params)\n-        } else {\n-            panic!(\"unknown query type: {:?}\", query_id.0);\n-        };\n-\n-        let res: D = res.into();\n-\n-        let deps = self.stack.borrow_mut().pop().unwrap();\n-        self.db.record(query_id, params, res.clone(), output_fingerprint, deps);\n-        (res, output_fingerprint)\n-    }\n-    fn record_dep(\n-        &self,\n-        query_id: QueryId,\n-        output_fingerprint: OutputFingerprint,\n-    ) -> () {\n-        let mut stack = self.stack.borrow_mut();\n-        let deps = stack.last_mut().unwrap();\n-        deps.push((query_id, output_fingerprint))\n-    }\n-}\n-\n-pub struct Invalidations {\n-    types: HashSet<QueryTypeId>,\n-    ids: Vec<QueryId>,\n-}\n-\n-impl Invalidations {\n-    pub fn new() -> Invalidations {\n-        Invalidations {\n-            types: HashSet::new(),\n-            ids: Vec::new(),\n-        }\n-    }\n-    pub fn invalidate(\n-        &mut self,\n-        query_type: QueryTypeId,\n-        params: impl Iterator<Item=InputFingerprint>,\n-    ) {\n-        self.types.insert(query_type);\n-        self.ids.extend(params.map(|it| QueryId(query_type, it)))\n-    }\n-}\n-\n-impl<T, D> Db<T, D>\n-where\n-    D: Clone\n-{\n-    pub fn new(query_config: QueryConfig<T, D>, ground_data: T) -> Db<T, D> {\n-        Db {\n-            db: Arc::new(DbState { ground_data, gen: Gen(0), graph: Default::default() }),\n-            query_config: Arc::new(query_config),\n-        }\n-    }\n-    pub fn ground_data(&self) -> &T {\n-        &self.db.ground_data\n-    }\n-    pub fn with_ground_data(\n-        &self,\n-        ground_data: T,\n-        invalidations: Invalidations,\n-    ) -> Db<T, D> {\n-        for id in self.query_config.ground_fn.keys() {\n-            assert!(\n-                invalidations.types.contains(id),\n-                \"all ground queries must be invalidated\"\n-            );\n-        }\n-\n-        let gen = Gen(self.db.gen.0 + 1);\n-        let mut graph = self.db.graph.lock().clone();\n-        for id in invalidations.ids {\n-            if let Some((gen, _)) = graph.get_mut(&id) {\n-                *gen = INVALIDATED;\n-            }\n-        }\n-        let graph = Mutex::new(graph);\n-        Db {\n-            db: Arc::new(DbState { ground_data, gen, graph }),\n-            query_config: Arc::clone(&self.query_config)\n-        }\n-    }\n-    pub fn query_ctx(&self) -> QueryCtx<T, D> {\n-        QueryCtx::new(self)\n-    }\n-    pub fn get(\n-        &self,\n-        query_id: QueryId,\n-        params: D,\n-    ) -> (D, Vec<QueryTypeId>) {\n-        let ctx = self.query_ctx();\n-        let res = ctx.get(query_id, params.into());\n-        let executed = ::std::mem::replace(&mut *ctx.executed.borrow_mut(), Vec::new());\n-        (res, executed)\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-struct Gen(u64);\n-const INVALIDATED: Gen = Gen(!0);\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct InputFingerprint(pub u64);\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct OutputFingerprint(pub u64);\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct QueryTypeId(pub u16);\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct QueryId(pub QueryTypeId, pub InputFingerprint);\n-"}, {"sha": "aed9219bee1fb5da5c0af202aff86240f3f11547", "filename": "crates/salsa/tests/integration.rs", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fsalsa%2Ftests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575b8635073ae0ea9e2aebbab613daf97fe9af90/crates%2Fsalsa%2Ftests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2Ftests%2Fintegration.rs?ref=575b8635073ae0ea9e2aebbab613daf97fe9af90", "patch": "@@ -1,170 +0,0 @@\n-extern crate salsa;\n-use std::{\n-    iter::once,\n-    sync::Arc,\n-    collections::hash_map::{HashMap, DefaultHasher},\n-    any::Any,\n-    hash::{Hash, Hasher},\n-};\n-\n-type State = HashMap<u32, String>;\n-type Data = Arc<Any + Send + Sync + 'static>;\n-const GET_TEXT: salsa::QueryTypeId = salsa::QueryTypeId(1);\n-const GET_FILES: salsa::QueryTypeId = salsa::QueryTypeId(2);\n-const FILE_NEWLINES: salsa::QueryTypeId = salsa::QueryTypeId(3);\n-const TOTAL_NEWLINES: salsa::QueryTypeId = salsa::QueryTypeId(4);\n-\n-fn mk_ground_query<T, R>(\n-    state: &State,\n-    params: &Data,\n-    f: fn(&State, &T) -> R,\n-) -> (Data, salsa::OutputFingerprint)\n-where\n-    T: 'static,\n-    R: Hash + Send + Sync + 'static,\n-{\n-    let params = params.downcast_ref().unwrap();\n-    let result = f(state, params);\n-    let fingerprint = o_print(&result);\n-    (Arc::new(result), fingerprint)\n-}\n-\n-fn get<T, R>(db: &salsa::Db<State, Data>, query_type: salsa::QueryTypeId, param: T) -> (Arc<R>, Vec<salsa::QueryTypeId>)\n-where\n-    T: Hash + Send + Sync + 'static,\n-    R: Send + Sync + 'static,\n-{\n-    let i_print = i_print(&param);\n-    let param = Arc::new(param);\n-    let (res, trace) = db.get(salsa::QueryId(query_type, i_print), param);\n-    (res.downcast().unwrap(), trace)\n-}\n-\n-struct QueryCtx<'a>(&'a salsa::QueryCtx<State, Data>);\n-\n-impl<'a> QueryCtx<'a> {\n-    fn get_text(&self, id: u32) -> Arc<String> {\n-        let i_print = i_print(&id);\n-        let text = self.0.get(salsa::QueryId(GET_TEXT, i_print), Arc::new(id));\n-        text.downcast().unwrap()\n-    }\n-    fn get_files(&self) -> Arc<Vec<u32>> {\n-        let i_print = i_print(&());\n-        let files = self.0.get(salsa::QueryId(GET_FILES, i_print), Arc::new(()));\n-        let res = files.downcast().unwrap();\n-        res\n-    }\n-    fn get_n_lines(&self, id: u32) -> usize {\n-        let i_print = i_print(&id);\n-        let n_lines = self.0.get(salsa::QueryId(FILE_NEWLINES, i_print), Arc::new(id));\n-        *n_lines.downcast().unwrap()\n-    }\n-}\n-\n-fn mk_query<T, R>(\n-    query_ctx: &salsa::QueryCtx<State, Data>,\n-    params: &Data,\n-    f: fn(QueryCtx, &T) -> R,\n-) -> (Data, salsa::OutputFingerprint)\n-where\n-    T: 'static,\n-    R: Hash + Send + Sync + 'static,\n-{\n-    let params: &T = params.downcast_ref().unwrap();\n-    let query_ctx = QueryCtx(query_ctx);\n-    let result = f(query_ctx, params);\n-    let fingerprint = o_print(&result);\n-    (Arc::new(result), fingerprint)\n-}\n-\n-fn mk_queries() -> salsa::QueryConfig<State, Data> {\n-    salsa::QueryConfig::<State, Data>::new()\n-        .with_ground_query(GET_TEXT, Box::new(|state, id| {\n-            mk_ground_query::<u32, String>(state, id, |state, id| state[id].clone())\n-        }))\n-        .with_ground_query(GET_FILES, Box::new(|state, id| {\n-            mk_ground_query::<(), Vec<u32>>(state, id, |state, &()| state.keys().cloned().collect())\n-        }))\n-        .with_query(FILE_NEWLINES, Box::new(|query_ctx, id| {\n-            mk_query(query_ctx, id, |query_ctx, &id| {\n-                let text = query_ctx.get_text(id);\n-                text.lines().count()\n-            })\n-        }))\n-        .with_query(TOTAL_NEWLINES, Box::new(|query_ctx, id| {\n-            mk_query(query_ctx, id, |query_ctx, &()| {\n-                let mut total = 0;\n-                for &id in query_ctx.get_files().iter() {\n-                    total += query_ctx.get_n_lines(id)\n-                }\n-                total\n-            })\n-        }))\n-}\n-\n-#[test]\n-fn test_number_of_lines() {\n-    let mut state = State::new();\n-    let db = salsa::Db::new(mk_queries(), state.clone());\n-    let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n-    assert_eq!(*newlines, 0);\n-    assert_eq!(trace.len(), 2);\n-    let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n-    assert_eq!(*newlines, 0);\n-    assert_eq!(trace.len(), 0);\n-\n-    state.insert(1, \"hello\\nworld\".to_string());\n-    let mut inv = salsa::Invalidations::new();\n-    inv.invalidate(GET_TEXT, once(i_print(&1u32)));\n-    inv.invalidate(GET_FILES, once(i_print(&())));\n-    let db = db.with_ground_data(state.clone(), inv);\n-    let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n-    assert_eq!(*newlines, 2);\n-    assert_eq!(trace.len(), 4);\n-\n-    state.insert(2, \"spam\\neggs\".to_string());\n-    let mut inv = salsa::Invalidations::new();\n-    inv.invalidate(GET_TEXT, once(i_print(&2u32)));\n-    inv.invalidate(GET_FILES, once(i_print(&())));\n-    let db = db.with_ground_data(state.clone(), inv);\n-    let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n-    assert_eq!(*newlines, 4);\n-    assert_eq!(trace.len(), 4);\n-\n-    let mut invs = vec![];\n-    for i in 0..10 {\n-        let id = i + 10;\n-        invs.push(i_print(&id));\n-        state.insert(id, \"spam\".to_string());\n-    }\n-    let mut inv = salsa::Invalidations::new();\n-    inv.invalidate(GET_TEXT, invs.into_iter());\n-    inv.invalidate(GET_FILES, once(i_print(&())));\n-    let db = db.with_ground_data(state.clone(), inv);\n-    let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n-    assert_eq!(*newlines, 14);\n-    assert_eq!(trace.len(), 22);\n-\n-    state.insert(15, String::new());\n-    let mut inv = salsa::Invalidations::new();\n-    inv.invalidate(GET_TEXT, once(i_print(&15u32)));\n-    inv.invalidate(GET_FILES, once(i_print(&())));\n-    let db = db.with_ground_data(state.clone(), inv);\n-    let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n-    assert_eq!(*newlines, 13);\n-    assert_eq!(trace.len(), 4);\n-}\n-\n-fn o_print<T: Hash>(x: &T) -> salsa::OutputFingerprint {\n-    let mut hasher = DefaultHasher::new();\n-    x.hash(&mut hasher);\n-    let hash = hasher.finish();\n-    salsa::OutputFingerprint(hash)\n-}\n-\n-fn i_print<T: Hash>(x: &T) -> salsa::InputFingerprint {\n-    let mut hasher = DefaultHasher::new();\n-    x.hash(&mut hasher);\n-    let hash = hasher.finish();\n-    salsa::InputFingerprint(hash)\n-}"}]}