{"sha": "4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYTc2YTRhNzc0MmJiOWMxZmViZTMzMDE5ZjVhOWU3ZTQ4MzlhNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T03:39:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T03:39:32Z"}, "message": "Auto merge of #80828 - SNCPlay42:opaque-projections, r=estebank\n\nFix expected/found order on impl trait projection mismatch error\n\nfixes #68561\n\nThis PR adds a new `ObligationCauseCode` used when checking the concrete type of an impl trait satisfies its bounds, and checks for that cause code in the existing test to see if a projection's normalized type should be the \"expected\" or \"found\" type.\n\nThe second commit adds a `peel_derives` to that test, which appears to be necessary in some cases (see projection-mismatch-in-impl-where-clause.rs, which would still give expected/found in the wrong order otherwise). This caused some other changes in diagnostics not involving impl trait, but they look correct to me.", "tree": {"sha": "7c88fcaa165ab8a48e30f8e8345e756633cf5a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c88fcaa165ab8a48e30f8e8345e756633cf5a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "html_url": "https://github.com/rust-lang/rust/commit/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1065e6cefa41fe6c55c9819552cdd61529096fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1065e6cefa41fe6c55c9819552cdd61529096fc", "html_url": "https://github.com/rust-lang/rust/commit/d1065e6cefa41fe6c55c9819552cdd61529096fc"}, {"sha": "525e23adafc06aec29338cbe46794c63920608a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/525e23adafc06aec29338cbe46794c63920608a7", "html_url": "https://github.com/rust-lang/rust/commit/525e23adafc06aec29338cbe46794c63920608a7"}], "stats": {"total": 164, "additions": 109, "deletions": 55}, "files": [{"sha": "00dec3b355f8f840129dfba9bf59f8fb3a218358", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -323,6 +323,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// #[feature(trivial_bounds)] is not enabled\n     TrivialBound,\n+\n+    /// If `X` is the concrete type of an opaque type `impl Y`, then `X` must implement `Y`\n+    OpaqueType,\n }\n \n impl ObligationCauseCode<'_> {"}, {"sha": "d295b17d902aa4c6f5cf26ad22287f5dae0aaf66", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -511,13 +511,18 @@ impl<T> Trait<T> for X {\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n                         );\n-                        if !self.suggest_constraint(\n+                        if !(self.suggest_constraining_opaque_associated_type(\n+                            db,\n+                            &msg,\n+                            proj_ty,\n+                            values.expected,\n+                        ) || self.suggest_constraint(\n                             db,\n                             &msg,\n                             body_owner_def_id,\n                             proj_ty,\n                             values.expected,\n-                        ) {\n+                        )) {\n                             db.help(&msg);\n                             db.note(\n                                 \"for more information, visit \\\n@@ -701,20 +706,7 @@ impl<T> Trait<T> for X {\n             }\n         }\n \n-        if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n-            // When the expected `impl Trait` is not defined in the current item, it will come from\n-            // a return type. This can occur when dealing with `TryStream` (#71035).\n-            if self.constrain_associated_type_structured_suggestion(\n-                db,\n-                self.def_span(def_id),\n-                &assoc,\n-                proj_ty.trait_ref_and_own_substs(self).1,\n-                values.found,\n-                &msg,\n-            ) {\n-                return;\n-            }\n-        }\n+        self.suggest_constraining_opaque_associated_type(db, &msg, proj_ty, values.found);\n \n         if self.point_at_associated_type(db, body_owner_def_id, values.found) {\n             return;\n@@ -752,6 +744,30 @@ fn foo(&self) -> Self::T { String::new() }\n         }\n     }\n \n+    /// When the expected `impl Trait` is not defined in the current item, it will come from\n+    /// a return type. This can occur when dealing with `TryStream` (#71035).\n+    fn suggest_constraining_opaque_associated_type(\n+        self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        msg: &str,\n+        proj_ty: &ty::ProjectionTy<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> bool {\n+        let assoc = self.associated_item(proj_ty.item_def_id);\n+        if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n+            self.constrain_associated_type_structured_suggestion(\n+                db,\n+                self.def_span(def_id),\n+                &assoc,\n+                proj_ty.trait_ref_and_own_substs(self).1,\n+                ty,\n+                &msg,\n+            )\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn point_at_methods_that_satisfy_associated_type(\n         self,\n         db: &mut DiagnosticBuilder<'_>,"}, {"sha": "fb4a8ce687c4d8335a5c8b89eb191f77d8685700", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -1171,7 +1171,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             // This also instantiates nested instances of `impl Trait`.\n             let predicate = self.instantiate_opaque_types_in_map(predicate);\n \n-            let cause = traits::ObligationCause::new(span, self.body_id, traits::MiscObligation);\n+            let cause = traits::ObligationCause::new(span, self.body_id, traits::OpaqueType);\n \n             // Require that the predicate holds for the concrete type.\n             debug!(\"instantiate_opaque_types: predicate={:?}\", predicate);"}, {"sha": "15a3d3ddd8d857531e9374f5971940407a8d5fc0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -1226,10 +1226,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n \n                 let is_normalized_ty_expected = !matches!(\n-                    obligation.cause.code,\n+                    obligation.cause.code.peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n                         | ObligationCauseCode::ObjectCastObligation(_)\n+                        | ObligationCauseCode::OpaqueType\n                 );\n \n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp("}, {"sha": "0549db06806e22b0816d526a62907f32eb0294d0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -1840,6 +1840,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::MethodReceiver\n             | ObligationCauseCode::ReturnNoExpression\n             | ObligationCauseCode::UnifyReceiver(..)\n+            | ObligationCauseCode::OpaqueType\n             | ObligationCauseCode::MiscObligation => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");"}, {"sha": "89e05b61fc9d89a8097cee7bbbfc05e6d94c10b1", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -2,13 +2,13 @@ error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n   --> $DIR/impl-trait-return-missing-constraint.rs:25:13\n    |\n LL | fn bar() -> impl Bar {\n-   |             -------- the expected opaque type\n+   |             -------- the found opaque type\n ...\n LL | fn baz() -> impl Bar<Item = i32> {\n-   |             ^^^^^^^^^^^^^^^^^^^^ expected associated type, found `i32`\n+   |             ^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |\n-   = note: expected associated type `<impl Bar as Foo>::Item`\n-                         found type `i32`\n+   = note:         expected type `i32`\n+           found associated type `<impl Bar as Foo>::Item`\n help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n    |\n LL | fn bar() -> impl Bar<Item = i32> {"}, {"sha": "cafc8ec52ca7601414cc26c7db6346e7c70f1539", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -5,7 +5,7 @@ LL |     fn visit() {}\n    |     ---------- required by `Visit::visit`\n ...\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n    |\n    = note: required because of the requirements on the impl of `Visit` for `()`\n "}, {"sha": "3f1f33a3b123f40361e4d54bcbc01667e044a307", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -16,10 +16,10 @@ error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n LL | fn foo() -> impl Generator<Return = i32> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found enum `Result`\n    |\n-   = note: expected enum `Result<{integer}, _>`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found enum `Result<{integer}, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6958cd97a4ac0aeae14031c65d5772563dc0e107", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -11,10 +11,10 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n   --> $DIR/bound-normalization-fail.rs:27:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n-   = note:         expected type `()`\n-           found associated type `<T as impl_trait::Trait>::Assoc`\n+   = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n+                         found type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n@@ -30,10 +30,10 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n   --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n-   = note:         expected type `()`\n-           found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n+                         found type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {"}, {"sha": "3318866c52cf95e3ae1930f70e2c252f4958b3e0", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -35,8 +35,10 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |\n    = note:         expected type `i32`\n            found associated type `<impl Foo as Leak>::T`\n-   = help: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n+   |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo<T = i32> {\n+   |                                  ^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10"}, {"sha": "8e42b9d46db390b9d61f6e6ee7e6e764f7f33adb", "filename": "src/test/ui/impl-trait/issues/issue-70877.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -2,13 +2,13 @@ error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'\n   --> $DIR/issue-70877.rs:11:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the expected opaque type\n+   |               -------------------- the found opaque type\n ...\n LL | type Foo = impl Iterator<Item = FooItem>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found enum `Option`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found opaque type\n    |\n-   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n-              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "8e42b9d46db390b9d61f6e6ee7e6e764f7f33adb", "filename": "src/test/ui/impl-trait/issues/issue-70877.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -2,13 +2,13 @@ error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'\n   --> $DIR/issue-70877.rs:11:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the expected opaque type\n+   |               -------------------- the found opaque type\n ...\n LL | type Foo = impl Iterator<Item = FooItem>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found enum `Option`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found opaque type\n    |\n-   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n-              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "b4fd6b3e74364d45c81e926c63f4f09213202236", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.rs?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -0,0 +1,20 @@\n+pub trait Super {\n+    type Assoc;\n+}\n+\n+impl Super for () {\n+    type Assoc = u8;\n+}\n+\n+pub trait Test {}\n+\n+impl<T> Test for T where T: Super<Assoc = ()> {}\n+\n+fn test() -> impl Test {\n+    //~^ERROR type mismatch resolving `<() as Super>::Assoc == ()`\n+    ()\n+}\n+\n+fn main() {\n+    let a = test();\n+}"}, {"sha": "d1956a9afb809b42609a68c977e11575137bf76f", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -0,0 +1,11 @@\n+error[E0271]: type mismatch resolving `<() as Super>::Assoc == ()`\n+  --> $DIR/projection-mismatch-in-impl-where-clause.rs:13:14\n+   |\n+LL | fn test() -> impl Test {\n+   |              ^^^^^^^^^ expected `()`, found `u8`\n+   |\n+   = note: required because of the requirements on the impl of `Test` for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "043658c9508f3721a52cfa2746099d246eceedc9", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -11,10 +11,10 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n   --> $DIR/issue-33941.rs:4:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found tuple\n    |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n+   = note: expected reference `&_`\n+                  found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required by `into_iter`\n@@ -23,10 +23,10 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n   --> $DIR/issue-33941.rs:4:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found tuple\n    |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n+   = note: expected reference `&_`\n+                  found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required by `std::iter::Iterator::next`\n "}, {"sha": "8ecde9d1e68e1b2e986e8c02e7caac365bc8a9d8", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -5,7 +5,7 @@ LL |     fn visit() {}\n    |     ---------- required by `Visit::visit`\n ...\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n    |\n    = note: required because of the requirements on the impl of `Visit` for `()`\n "}, {"sha": "53a0016c08eb56580d1af2c6360837089570d041", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -11,10 +11,10 @@ error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28\n   --> $DIR/issue-63279.rs:8:16\n    |\n LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n    |\n-   = note: expected opaque type `impl FnOnce<()>`\n-                found unit type `()`\n+   = note: expected unit type `()`\n+            found opaque type `impl FnOnce<()>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "be386ab90ea007ebb552be202338f7fb7203860b", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa76a4a7742bb9c1febe33019f5a9e7e4839a65/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr?ref=4fa76a4a7742bb9c1febe33019f5a9e7e4839a65", "patch": "@@ -11,10 +11,10 @@ error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28\n   --> $DIR/issue-63279.rs:8:16\n    |\n LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n    |\n-   = note: expected opaque type `impl FnOnce<()>`\n-                found unit type `()`\n+   = note: expected unit type `()`\n+            found opaque type `impl FnOnce<()>`\n \n error: aborting due to 2 previous errors\n "}]}