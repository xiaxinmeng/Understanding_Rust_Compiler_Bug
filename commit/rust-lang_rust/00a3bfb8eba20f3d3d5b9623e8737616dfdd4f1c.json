{"sha": "00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYTNiZmI4ZWJhMjBmM2QzZDViOTYyM2U4NzM3NjE2ZGZkZDRmMWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T14:42:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T14:42:20Z"}, "message": "Don\u2019t warn for types used in trait implementation", "tree": {"sha": "82da33536b4a77418dd3b11123d0487a4a18d0fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82da33536b4a77418dd3b11123d0487a4a18d0fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYWpTMAAoJEFbW7qD8Z6xG2+oP/094xmj8HvDDC73wz/yv0DyU\nwkjB/nDru4oIsGThq7cXPxFux67w97afmprEfyhYZEVt+M8bt0linzySfx9ESP0C\n1MkMzJgf/T3A8mO5sHJt74JDQK4CEr3+QnJFLyG8emkHB+XaQnp/lRq4EqZfJWNa\n7/k5mYMQ7+1USQVvxlF88vdl37e/GwT9xZJF/YTE6nFAdKPYbfN7XJGjXYS9acI6\nrwI9bN9XuqdIRIGuu6uNa2sf18B/iPG/4xd/O3ns1n0fC/oAd7fa3GKvow9g2b3q\n/c6DvoYYb68phXB6JOLbQ2wfnGLNcAik21o8h3wgIFyP6vt53Z5xYUoQCmOz4/ON\n8IG9IJC5+da/m57EFk9uIuzRcaUZl5QRutmFIobgHmV2DmzBcN8jAkqU4zgc1OWL\ndm0hEFIyleCmcVfX5QLEYpt9egNucOqTNqOeHd19SPgzS4qeoFq6UTZlhFolrLyQ\nVYLK9vF4NAKOzshGdnilFKjwt8My/rFHbiaRRubacxtgJswEBdRUpEZXpYLuAXjj\nTCrc5yu+DZy73maBidBniPIhuwPv0SzXsOLAEpUfcAvasREJaYGZWuWf8o+CoFGQ\nb+rtyqrdc08ldRmscxwodS9b/flFycId50wXo8Yi4jdvMvpwtU+H1PG3Ml28SOLE\nxu76kqhtLxh8D0w8FUOm\n=CILw\n-----END PGP SIGNATURE-----", "payload": "tree 82da33536b4a77418dd3b11123d0487a4a18d0fa\nparent 5060d2fa7cdbe9dc201c64f0814f776a429f4d3e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482331340 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482331340 +0100\n\nDon\u2019t warn for types used in trait implementation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c", "html_url": "https://github.com/rust-lang/rust/commit/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5060d2fa7cdbe9dc201c64f0814f776a429f4d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5060d2fa7cdbe9dc201c64f0814f776a429f4d3e", "html_url": "https://github.com/rust-lang/rust/commit/5060d2fa7cdbe9dc201c64f0814f776a429f4d3e"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "5885d7863b7104c7226afb84f2c9c82d2c6e0b76", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c", "patch": "@@ -70,11 +70,47 @@ impl LintPass for TypePass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n-    fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ast_ty: &'tcx Ty) {\n-        if in_macro(cx, ast_ty.span) {\n-            return;\n+    fn check_fn(&mut self, cx: &LateContext, _: FnKind, decl: &FnDecl, _: &Expr, _: Span, id: NodeId) {\n+        // skip trait implementations, see #605\n+        if let Some(map::NodeItem(item)) = cx.tcx.map.find(cx.tcx.map.get_parent(id)) {\n+            if let ItemImpl(_, _, _, Some(..), _, _) = item.node {\n+                return;\n+            }\n+        }\n+\n+        check_fn_decl(cx, decl);\n+    }\n+\n+    fn check_struct_field(&mut self, cx: &LateContext, field: &StructField) {\n+        check_ty(cx, &field.ty);\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext, item: &TraitItem) {\n+        match item.node {\n+            ConstTraitItem(ref ty, _) |\n+            TypeTraitItem(_, Some(ref ty)) => check_ty(cx, ty),\n+            MethodTraitItem(ref sig, _) => check_fn_decl(cx, &sig.decl),\n+            _ => (),\n         }\n-        if let TyPath(ref qpath) = ast_ty.node {\n+    }\n+}\n+\n+fn check_fn_decl(cx: &LateContext, decl: &FnDecl) {\n+    for input in &decl.inputs {\n+        check_ty(cx, &input.ty);\n+    }\n+\n+    if let FunctionRetTy::Return(ref ty) = decl.output {\n+        check_ty(cx, ty);\n+    }\n+}\n+\n+fn check_ty(cx: &LateContext, ast_ty: &Ty) {\n+    if in_macro(cx, ast_ty.span) {\n+        return;\n+    }\n+    match ast_ty.node {\n+        TyPath(ref qpath) => {\n             let def = cx.tcx.tables().qpath_def(qpath, ast_ty.id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items.owned_box() {\n@@ -92,16 +128,48 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n                                            ast_ty.span,\n                                            \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n                                            \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\");\n+                        return; // don't recurse into the type\n                     }}\n                 } else if match_def_path(cx, def_id, &paths::LINKED_LIST) {\n                     span_help_and_lint(cx,\n                                        LINKEDLIST,\n                                        ast_ty.span,\n                                        \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n                                        \"a VecDeque might work\");\n+                    return; // don't recurse into the type\n                 }\n             }\n-        }\n+            match *qpath {\n+                QPath::Resolved(Some(ref ty), ref p) => {\n+                    check_ty(cx, ty);\n+                    for ty in p.segments.iter().flat_map(|seg| seg.parameters.types()) {\n+                        check_ty(cx, ty);\n+                    }\n+                },\n+                QPath::Resolved(None, ref p) => {\n+                    for ty in p.segments.iter().flat_map(|seg| seg.parameters.types()) {\n+                        check_ty(cx, ty);\n+                    }\n+                },\n+                QPath::TypeRelative(ref ty, ref seg) => {\n+                    check_ty(cx, ty);\n+                    for ty in seg.parameters.types() {\n+                        check_ty(cx, ty);\n+                    }\n+                },\n+            }\n+        },\n+        // recurse\n+        TySlice(ref ty) |\n+        TyArray(ref ty, _) |\n+        TyPtr(MutTy { ref ty, .. }) |\n+        TyRptr(_, MutTy { ref ty, .. }) => check_ty(cx, ty),\n+        TyTup(ref tys) => {\n+            for ty in tys {\n+                check_ty(cx, ty);\n+            }\n+        },\n+        _ => {},\n     }\n }\n "}, {"sha": "63c678eb69c285dabf478fef2ed0b05e223c8e26", "filename": "tests/compile-fail/dlist.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c/tests%2Fcompile-fail%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c/tests%2Fcompile-fail%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdlist.rs?ref=00a3bfb8eba20f3d3d5b9623e8737616dfdd4f1c", "patch": "@@ -1,14 +1,39 @@\n #![feature(plugin, collections)]\n+#![feature(associated_type_defaults)]\n+#![feature(associated_consts)]\n \n #![plugin(clippy)]\n #![deny(clippy)]\n+#![allow(dead_code)]\n \n extern crate collections;\n use collections::linked_list::LinkedList;\n \n-pub fn test(_: LinkedList<u8>) {  //~ ERROR I see you're using a LinkedList!\n+trait Foo {\n+    type Baz = LinkedList<u8>; //~ ERROR I see you're using a LinkedList!\n+    fn foo(LinkedList<u8>); //~ ERROR I see you're using a LinkedList!\n+    const BAR : Option<LinkedList<u8>>; //~ ERROR I see you're using a LinkedList!\n+}\n+\n+// ok, we don\u2019t want to warn for implementations, see #605\n+impl Foo for LinkedList<u8> {\n+    fn foo(_: LinkedList<u8>) {}\n+    const BAR : Option<LinkedList<u8>> = None;\n+}\n+\n+struct Bar;\n+impl Bar {\n+    fn foo(_: LinkedList<u8>) {} //~ ERROR I see you're using a LinkedList!\n+}\n+\n+pub fn test(my_favourite_linked_list: LinkedList<u8>) { //~ ERROR I see you're using a LinkedList!\n+    println!(\"{:?}\", my_favourite_linked_list)\n+}\n+\n+pub fn test_ret() -> Option<LinkedList<u8>> { //~ ERROR I see you're using a LinkedList!\n+    unimplemented!();\n }\n \n fn main(){\n-    test(LinkedList::new()); //~ ERROR I see you're using a LinkedList!\n+    test(LinkedList::new());\n }"}]}