{"sha": "902e59057ee723dd6fda6e757b408d487a388139", "node_id": "C_kwDOAAsO6NoAKDkwMmU1OTA1N2VlNzIzZGQ2ZmRhNmU3NTdiNDA4ZDQ4N2EzODgxMzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-14T05:55:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-14T05:55:26Z"}, "message": "Auto merge of #93937 - bjorn3:simplifications3, r=cjgillot\n\nRemove Config::stderr\n\n1. It captured stdout and not stderr\n2. It isn't used anywhere\n3. All error messages should go to the DiagnosticOutput instead\n4. It modifies thread local state\n\nMarking as blocked as it will conflict a bit with https://github.com/rust-lang/rust/pull/93936.", "tree": {"sha": "1a8eac2292a7e3494f867b89b6700bb0b83f6994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8eac2292a7e3494f867b89b6700bb0b83f6994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/902e59057ee723dd6fda6e757b408d487a388139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/902e59057ee723dd6fda6e757b408d487a388139", "html_url": "https://github.com/rust-lang/rust/commit/902e59057ee723dd6fda6e757b408d487a388139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/902e59057ee723dd6fda6e757b408d487a388139/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e12aef3fab243407f9d71ba9956cb2a1bf105d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e12aef3fab243407f9d71ba9956cb2a1bf105d5", "html_url": "https://github.com/rust-lang/rust/commit/1e12aef3fab243407f9d71ba9956cb2a1bf105d5"}, {"sha": "5eeff3f0733c83be9e0406874e92adf24a5cf2b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eeff3f0733c83be9e0406874e92adf24a5cf2b6", "html_url": "https://github.com/rust-lang/rust/commit/5eeff3f0733c83be9e0406874e92adf24a5cf2b6"}], "stats": {"total": 30, "additions": 4, "deletions": 26}, "files": [{"sha": "3601169528b9d501fc8024c882b105ce4ccc5acd", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -226,7 +226,6 @@ fn run_compiler(\n         output_dir: odir,\n         file_loader,\n         diagnostic_output,\n-        stderr: None,\n         lint_caps: Default::default(),\n         parse_sess_created: None,\n         register_lints: None,"}, {"sha": "9a588b55393e5d0e6db9d6bcdcf5bad45e26f0af", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -21,7 +21,6 @@ use rustc_session::{DiagnosticOutput, Session};\n use rustc_span::source_map::{FileLoader, FileName};\n use std::path::PathBuf;\n use std::result;\n-use std::sync::{Arc, Mutex};\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n \n@@ -155,9 +154,6 @@ pub struct Config {\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     pub diagnostic_output: DiagnosticOutput,\n \n-    /// Set to capture stderr output during compiler execution\n-    pub stderr: Option<Arc<Mutex<Vec<u8>>>>,\n-\n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n     /// This is a callback from the driver that is called when [`ParseSess`] is created.\n@@ -237,13 +233,11 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n     })\n }\n \n-pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n+pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     tracing::trace!(\"run_compiler\");\n-    let stderr = config.stderr.take();\n     util::run_in_thread_pool_with_globals(\n         config.opts.edition,\n         config.opts.debugging_opts.threads,\n-        &stderr,\n         || create_compiler_and_run(config, f),\n     )\n }"}, {"sha": "700710c82c9e08d48ff4a86fe2f3f19e4b17e291", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -27,15 +27,13 @@ use rustc_span::symbol::{sym, Symbol};\n use smallvec::SmallVec;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n-use std::io;\n use std::lazy::SyncOnceCell;\n use std::mem;\n use std::ops::DerefMut;\n #[cfg(not(parallel_compiler))]\n use std::panic;\n use std::path::{Path, PathBuf};\n use std::sync::atomic::{AtomicBool, Ordering};\n-use std::sync::{Arc, Mutex};\n use std::thread;\n use tracing::info;\n \n@@ -131,7 +129,6 @@ fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f: F) -\n pub fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     _threads: usize,\n-    stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n     let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n@@ -140,12 +137,7 @@ pub fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n         cfg = cfg.stack_size(size);\n     }\n \n-    let main_handler = move || {\n-        rustc_span::create_session_globals_then(edition, || {\n-            io::set_output_capture(stderr.clone());\n-            f()\n-        })\n-    };\n+    let main_handler = move || rustc_span::create_session_globals_then(edition, f);\n \n     scoped_thread(cfg, main_handler)\n }\n@@ -177,7 +169,6 @@ unsafe fn handle_deadlock() {\n pub fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     threads: usize,\n-    stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n     let mut config = rayon::ThreadPoolBuilder::new()\n@@ -199,10 +190,7 @@ pub fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n             // the thread local rustc uses. `session_globals` is captured and set\n             // on the new threads.\n             let main_handler = move |thread: rayon::ThreadBuilder| {\n-                rustc_span::set_session_globals_then(session_globals, || {\n-                    io::set_output_capture(stderr.clone());\n-                    thread.run()\n-                })\n+                rustc_span::set_session_globals_then(session_globals, || thread.run())\n             };\n \n             config.build_scoped(main_handler, with_pool).unwrap()\n@@ -339,6 +327,7 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     #[cfg(windows)]\n     fn current_dll_path() -> Option<PathBuf> {\n         use std::ffi::OsString;\n+        use std::io;\n         use std::os::windows::prelude::*;\n         use std::ptr;\n "}, {"sha": "893e126283b01aee60205b9231b081df5e4dfc4e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -256,7 +256,6 @@ crate fn create_config(\n         output_dir: None,\n         file_loader: None,\n         diagnostic_output: DiagnosticOutput::Default,\n-        stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n         register_lints: Some(box crate::lint::register_lints),"}, {"sha": "3a9fb6d14203ee6bcba30f944cb45ee8937833af", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -97,7 +97,6 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n         output_dir: None,\n         file_loader: None,\n         diagnostic_output: DiagnosticOutput::Default,\n-        stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n         register_lints: Some(box crate::lint::register_lints),"}, {"sha": "170f166db500e0d090873b227c7cc1280bc05ce0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -691,7 +691,6 @@ fn main_args(at_args: &[String]) -> MainResult {\n     rustc_interface::util::run_in_thread_pool_with_globals(\n         options.edition,\n         1, // this runs single-threaded, even in a parallel compiler\n-        &None,\n         move || main_options(options),\n     )\n }"}, {"sha": "9172d08eff9362804654c70435d0b7dc274304e9", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/902e59057ee723dd6fda6e757b408d487a388139/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902e59057ee723dd6fda6e757b408d487a388139/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=902e59057ee723dd6fda6e757b408d487a388139", "patch": "@@ -55,7 +55,6 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         output_dir: None,\n         file_loader: None,\n         diagnostic_output: DiagnosticOutput::Default,\n-        stderr: None,\n         lint_caps: Default::default(),\n         parse_sess_created: None,\n         register_lints: None,"}]}