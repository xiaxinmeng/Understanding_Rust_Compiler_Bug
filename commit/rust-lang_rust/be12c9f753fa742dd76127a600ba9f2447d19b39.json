{"sha": "be12c9f753fa742dd76127a600ba9f2447d19b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTJjOWY3NTNmYTc0MmRkNzYxMjdhNjAwYmE5ZjI0NDdkMTliMzk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-03-11T03:47:25Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-03-13T01:58:54Z"}, "message": "std: allow io::File* structs to be hashable", "tree": {"sha": "a2923b1425926da3259d704993a828e754c9f814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2923b1425926da3259d704993a828e754c9f814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be12c9f753fa742dd76127a600ba9f2447d19b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be12c9f753fa742dd76127a600ba9f2447d19b39", "html_url": "https://github.com/rust-lang/rust/commit/be12c9f753fa742dd76127a600ba9f2447d19b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be12c9f753fa742dd76127a600ba9f2447d19b39/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d64441bcb820cf35d3e39dde8514c46765a12a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d64441bcb820cf35d3e39dde8514c46765a12a6", "html_url": "https://github.com/rust-lang/rust/commit/4d64441bcb820cf35d3e39dde8514c46765a12a6"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "c6795fad1a588dbfa4750e5dd8d6d1c4506da685", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be12c9f753fa742dd76127a600ba9f2447d19b39/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12c9f753fa742dd76127a600ba9f2447d19b39/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=be12c9f753fa742dd76127a600ba9f2447d19b39", "patch": "@@ -1320,7 +1320,7 @@ pub enum FileAccess {\n }\n \n /// Different kinds of files which can be identified by a call to stat\n-#[deriving(Eq, Show)]\n+#[deriving(Eq, Show, Hash)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n     TypeFile,\n@@ -1358,6 +1358,7 @@ pub enum FileType {\n /// println!(\"byte size: {}\", info.size);\n /// # }\n /// ```\n+#[deriving(Hash)]\n pub struct FileStat {\n     /// The path that this stat structure is describing\n     path: Path,\n@@ -1399,6 +1400,7 @@ pub struct FileStat {\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n #[allow(missing_doc)]\n+#[deriving(Hash)]\n pub struct UnstableFileStat {\n     device: u64,\n     inode: u64,"}, {"sha": "8345a2d04d174aa069b1f7eb38cced1850863d64", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be12c9f753fa742dd76127a600ba9f2447d19b39/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12c9f753fa742dd76127a600ba9f2447d19b39/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=be12c9f753fa742dd76127a600ba9f2447d19b39", "patch": "@@ -88,10 +88,10 @@ impl ToCStr for Path {\n     }\n }\n \n-impl<H: Writer> ::hash::Hash<H> for Path {\n+impl<S: Writer> ::hash::Hash<S> for Path {\n     #[inline]\n-    fn hash(&self, hasher: &mut H) {\n-        self.repr.hash(hasher)\n+    fn hash(&self, state: &mut S) {\n+        self.repr.hash(state)\n     }\n }\n "}, {"sha": "180078ae9592d929a6e2c855d48bb69ee2336e7d", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be12c9f753fa742dd76127a600ba9f2447d19b39/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12c9f753fa742dd76127a600ba9f2447d19b39/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=be12c9f753fa742dd76127a600ba9f2447d19b39", "patch": "@@ -112,10 +112,10 @@ impl ToCStr for Path {\n     }\n }\n \n-impl<H: Writer> ::hash::Hash<H> for Path {\n+impl<S: Writer> ::hash::Hash<S> for Path {\n     #[inline]\n-    fn hash(&self, hasher: &mut H) {\n-        self.repr.hash(hasher)\n+    fn hash(&self, state: &mut S) {\n+        self.repr.hash(state)\n     }\n }\n "}]}