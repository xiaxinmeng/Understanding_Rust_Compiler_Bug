{"sha": "058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OGEwZjBiMGJiMWMzOWQ2MjBmN2NlMWQ4MTE1MDE0MWM2YTYzNDE=", "commit": {"author": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-06-20T01:11:10Z"}, "committer": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-06-20T03:34:37Z"}, "message": "liblibc: Fix prototype of functions taking `char *const argv[]`\n\nThe execv family of functions do not modify their arguments, so they do\nnot need mutable pointers. The C prototypes take a constant array of\nmutable C-strings, but that's a legacy quirk from before C had const\n(since C string literals have type `char *`). The Rust prototypes had\n`*mut` in the wrong place, anyway: to match the C prototypes, it should\nhave been `*const *mut c_char`. But it is safe to pass constant strings\n(like string literals) to these functions.\n\ngetopt is a special case, since GNU getopt modifies its arguments\ndespite the `const` claim in the prototype. It is apparently only\nwell-defined to call getopt on the actual argc and argv parameters\npassed to main, anyway. Change it to take `*mut *mut c_char` for an\nattempt at safety, but probably nobody should be using it from Rust,\nsince there's no great way to get at the parameters as passed to main.\n\nAlso fix the one caller of execvp in libstd, which now no longer needs\nan unsafe cast.\n\nFixes #16290.", "tree": {"sha": "450444c2ef09f82c2aee249c9377e0260b1c3f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450444c2ef09f82c2aee249c9377e0260b1c3f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "html_url": "https://github.com/rust-lang/rust/commit/058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/058a0f0b0bb1c39d620f7ce1d81150141c6a6341/comments", "author": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9515698fa456390386087ccb6123ce741f18527", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9515698fa456390386087ccb6123ce741f18527", "html_url": "https://github.com/rust-lang/rust/commit/a9515698fa456390386087ccb6123ce741f18527"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "893bceed582314895129a798943ec7eddf629cd9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/058a0f0b0bb1c39d620f7ce1d81150141c6a6341/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058a0f0b0bb1c39d620f7ce1d81150141c6a6341/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "patch": "@@ -5493,17 +5493,17 @@ pub mod funcs {\n                 pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 #[link_name = \"_execv\"]\n                 pub fn execv(prog: *const c_char,\n-                             argv: *mut *const c_char) -> intptr_t;\n+                             argv: *const *const c_char) -> intptr_t;\n                 #[link_name = \"_execve\"]\n-                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n-                              envp: *mut *const c_char)\n+                pub fn execve(prog: *const c_char, argv: *const *const c_char,\n+                              envp: *const *const c_char)\n                               -> c_int;\n                 #[link_name = \"_execvp\"]\n                 pub fn execvp(c: *const c_char,\n-                              argv: *mut *const c_char) -> c_int;\n+                              argv: *const *const c_char) -> c_int;\n                 #[link_name = \"_execvpe\"]\n-                pub fn execvpe(c: *const c_char, argv: *mut *const c_char,\n-                               envp: *mut *const c_char) -> c_int;\n+                pub fn execvpe(c: *const c_char, argv: *const *const c_char,\n+                               envp: *const *const c_char) -> c_int;\n                 #[link_name = \"_getcwd\"]\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n                 #[link_name = \"_getpid\"]\n@@ -5687,12 +5687,12 @@ pub mod funcs {\n                 pub fn dup(fd: c_int) -> c_int;\n                 pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 pub fn execv(prog: *const c_char,\n-                             argv: *mut *const c_char) -> c_int;\n-                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n-                              envp: *mut *const c_char)\n+                             argv: *const *const c_char) -> c_int;\n+                pub fn execve(prog: *const c_char, argv: *const *const c_char,\n+                              envp: *const *const c_char)\n                               -> c_int;\n                 pub fn execvp(c: *const c_char,\n-                              argv: *mut *const c_char) -> c_int;\n+                              argv: *const *const c_char) -> c_int;\n                 pub fn fork() -> pid_t;\n                 pub fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n@@ -5702,7 +5702,9 @@ pub mod funcs {\n                 pub fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n                                  -> c_int;\n                 pub fn getlogin() -> *mut c_char;\n-                pub fn getopt(argc: c_int, argv: *mut *const c_char,\n+                // GNU getopt(3) modifies its arguments despite the\n+                // char * const [] prototype; see the manpage.\n+                pub fn getopt(argc: c_int, argv: *mut *mut c_char,\n                               optstr: *const c_char) -> c_int;\n                 pub fn getpgrp() -> pid_t;\n                 pub fn getpid() -> pid_t;\n@@ -5752,19 +5754,19 @@ pub mod funcs {\n                 pub fn dup(fd: c_int) -> c_int;\n                 pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 pub fn execv(prog: *const c_char,\n-                             argv: *mut *const c_char) -> c_int;\n-                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n-                              envp: *mut *const c_char)\n+                             argv: *const *const c_char) -> c_int;\n+                pub fn execve(prog: *const c_char, argv: *const *const c_char,\n+                              envp: *const *const c_char)\n                               -> c_int;\n                 pub fn execvp(c: *const c_char,\n-                              argv: *mut *const c_char) -> c_int;\n+                              argv: *const *const c_char) -> c_int;\n                 pub fn fork() -> pid_t;\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n                 pub fn getegid() -> gid_t;\n                 pub fn geteuid() -> uid_t;\n                 pub fn getgid() -> gid_t;\n                 pub fn getlogin() -> *mut c_char;\n-                pub fn getopt(argc: c_int, argv: *mut *const c_char,\n+                pub fn getopt(argc: c_int, argv: *const *const c_char,\n                               optstr: *const c_char) -> c_int;\n                 pub fn getuid() -> uid_t;\n                 pub fn getsid(pid: pid_t) -> pid_t;"}, {"sha": "acf6fbc24e461037e7a9346df136a6ce82a6a323", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058a0f0b0bb1c39d620f7ce1d81150141c6a6341/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058a0f0b0bb1c39d620f7ce1d81150141c6a6341/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "patch": "@@ -313,7 +313,7 @@ impl Process {\n         if !envp.is_null() {\n             *sys::os::environ() = envp as *const _;\n         }\n-        let _ = libc::execvp(*argv, argv as *mut _);\n+        let _ = libc::execvp(*argv, argv);\n         fail(&mut output)\n     }\n "}]}