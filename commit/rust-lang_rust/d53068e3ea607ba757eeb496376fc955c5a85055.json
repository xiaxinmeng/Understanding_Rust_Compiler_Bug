{"sha": "d53068e3ea607ba757eeb496376fc955c5a85055", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MzA2OGUzZWE2MDdiYTc1N2VlYjQ5NjM3NmZjOTU1YzVhODUwNTU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-14T20:57:02Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-14T20:57:02Z"}, "message": "improve step_integer_impls macro", "tree": {"sha": "b5f8b3a507fac3a2c39f05d1e08fde6935966a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f8b3a507fac3a2c39f05d1e08fde6935966a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53068e3ea607ba757eeb496376fc955c5a85055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53068e3ea607ba757eeb496376fc955c5a85055", "html_url": "https://github.com/rust-lang/rust/commit/d53068e3ea607ba757eeb496376fc955c5a85055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53068e3ea607ba757eeb496376fc955c5a85055/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b196129b85b5b2ae795e9bd621b95d7bec17b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b196129b85b5b2ae795e9bd621b95d7bec17b4", "html_url": "https://github.com/rust-lang/rust/commit/90b196129b85b5b2ae795e9bd621b95d7bec17b4"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "bae673408c6761a936d73473435a06803d2adc01", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d53068e3ea607ba757eeb496376fc955c5a85055/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53068e3ea607ba757eeb496376fc955c5a85055/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=d53068e3ea607ba757eeb496376fc955c5a85055", "patch": "@@ -196,9 +196,6 @@ macro_rules! step_identical_methods {\n         unsafe fn backward_unchecked(start: Self, n: usize) -> Self {\n             start.unchecked_sub(n as Self)\n         }\n-    };\n-    ( [$u:ident $i:ident] ) => {\n-        step_identical_methods!();\n \n         #[inline]\n         fn forward(start: Self, n: usize) -> Self {\n@@ -207,8 +204,8 @@ macro_rules! step_identical_methods {\n             if Self::forward_checked(start, n).is_none() {\n                 let _ = Add::add(Self::MAX, 1);\n             }\n-            // Do wrapping math to allow e.g. `Step::forward(-128u8, 255)`.\n-            start.wrapping_add(n as Self) as Self\n+            // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.\n+            start.wrapping_add(n as Self)\n         }\n \n         #[inline]\n@@ -218,8 +215,8 @@ macro_rules! step_identical_methods {\n             if Self::backward_checked(start, n).is_none() {\n                 let _ = Sub::sub(Self::MIN, 1);\n             }\n-            // Do wrapping math to allow e.g. `Step::backward(127u8, 255)`.\n-            start.wrapping_sub(n as Self) as Self\n+            // Do wrapping math to allow e.g. `Step::backward(127i8, 255)`.\n+            start.wrapping_sub(n as Self)\n         }\n     };\n }\n@@ -235,7 +232,7 @@ macro_rules! step_integer_impls {\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n             unsafe impl Step for $u_narrower {\n-                step_identical_methods!( [ $u_narrower $i_narrower ] );\n+                step_identical_methods!();\n \n                 #[inline]\n                 fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n@@ -267,7 +264,7 @@ macro_rules! step_integer_impls {\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n             unsafe impl Step for $i_narrower {\n-                step_identical_methods!( [ $u_narrower $i_narrower ] );\n+                step_identical_methods!();\n \n                 #[inline]\n                 fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n@@ -347,20 +344,10 @@ macro_rules! step_integer_impls {\n                     start.checked_add(n as Self)\n                 }\n \n-                #[inline]\n-                fn forward(start: Self, n: usize) -> Self {\n-                    Add::add(start, n as Self)\n-                }\n-\n                 #[inline]\n                 fn backward_checked(start: Self, n: usize) -> Option<Self> {\n                     start.checked_sub(n as Self)\n                 }\n-\n-                #[inline]\n-                fn backward(start: Self, n: usize) -> Self {\n-                    Sub::sub(start, n as Self)\n-                }\n             }\n \n             #[allow(unreachable_patterns)]\n@@ -387,20 +374,10 @@ macro_rules! step_integer_impls {\n                     start.checked_add(n as Self)\n                 }\n \n-                #[inline]\n-                fn forward(start: Self, n: usize) -> Self {\n-                    Add::add(start, n as Self)\n-                }\n-\n                 #[inline]\n                 fn backward_checked(start: Self, n: usize) -> Option<Self> {\n                     start.checked_sub(n as Self)\n                 }\n-\n-                #[inline]\n-                fn backward(start: Self, n: usize) -> Self {\n-                    Sub::sub(start, n as Self)\n-                }\n             }\n         )+\n     };"}]}