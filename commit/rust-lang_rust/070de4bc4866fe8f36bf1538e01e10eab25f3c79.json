{"sha": "070de4bc4866fe8f36bf1538e01e10eab25f3c79", "node_id": "C_kwDOAAsO6NoAKDA3MGRlNGJjNDg2NmZlOGYzNmJmMTUzOGUwMWUxMGVhYjI1ZjNjNzk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-16T12:46:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-16T12:46:11Z"}, "message": "Rollup merge of #99942 - compiler-errors:nonsense-un-tupled-fn-trait-error, r=cjgillot\n\nFix nonsense non-tupled `Fn` trait error\n\nGiven this code:\n\n```rust\n#![feature(unboxed_closures)]\n\nfn a<F: Fn<usize>>(f: F) {}\n\nfn main() {\n    a(|_: usize| {});\n}\n```\n\nWe currently emit this error:\n```\nerror[E0631]: type mismatch in closure arguments\n --> src/main.rs:6:5\n  |\n6 |     a(|_: usize| {});\n  |     ^ ---------- found signature of `fn(usize) -> _`\n  |     |\n  |     expected signature of `fn(usize) -> _`\n  |\nnote: required by a bound in `a`\n --> src/main.rs:3:9\n  |\n3 | fn a<F: Fn<usize>>(f: F) {}\n  |         ^^^^^^^^^ required by this bound in `a`\n\nFor more information about this error, try `rustc --explain E0631`.\nerror: could not compile `playground` due to previous error\n```\nNotably, it says the same thing for \"expected\" and \"found\"!\n\nFix the output so that we instead emit:\n```\nerror[E0308]: mismatched types\n --> /home/gh-compiler-errors/test.rs:6:5\n  |\n6 |     a(|_: usize| {});\n  |     ^ types differ\n  |\n  = note: expected trait `Fn<usize>`\n             found trait `Fn<(usize,)>`\nnote: required by a bound in `a`\n --> /home/gh-compiler-errors/test.rs:3:9\n  |\n3 | fn a<F: Fn<usize>>(f: F) {}\n  |         ^^^^^^^^^ required by this bound in `a`\n\nerror: aborting due to previous error\n```\n\nThe error could still use some work, namely the \"mismatched types\" part, but I'm leaving it a bit rough since the only way you'd ever get this error is when you're messing with `#![feature(unboxed_closures)]`.\n\nSimply making sure we actually print out the difference in trait-refs is good enough for me. I could probably factor in some additional improvements if those are desired.", "tree": {"sha": "e18648a3d3821cb169d2cc855a56e0b84b0e71cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e18648a3d3821cb169d2cc855a56e0b84b0e71cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/070de4bc4866fe8f36bf1538e01e10eab25f3c79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+5GTCRBK7hj4Ov3rIwAAsdQIAFEvALxOuckJ0HFNbiji+C4I\n0VNnxqnWm2Tm/Q/YjCA5qKY2kqZGsdvReX8zMUzKTxra/1HFQZvXigsTyh/sAoNK\n2vLprnu9uXHxFnKR5uA45nJciO0Vude8ipRJqjbInUFus8pVIcb6IJrLqfNdvCxg\nHQn8hAOVQoypiADI++Sl36K+/tlkjc+PWNLSe67vqbSVY+e1Y60kNjiUQEBZv9Zp\nq7aV/FF9ko65urtbHcvxxtjNsZqlDvaRV+Y/Lg3V6xDCkFXH+mR547IAZZsAzqEG\nz2zpzdpUjHU/fmvNFSrqQN94FvnpGM8pvPTDcy2dOByNFD0IsEqnCuDvhjVUyxE=\n=cZpU\n-----END PGP SIGNATURE-----\n", "payload": "tree e18648a3d3821cb169d2cc855a56e0b84b0e71cc\nparent 14a459bf37bc19476d43e0045d078121c12d3fef\nparent 1c084f15f308f1d977fd763c3d8bed831b44abf2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660653971 +0530\ncommitter GitHub <noreply@github.com> 1660653971 +0530\n\nRollup merge of #99942 - compiler-errors:nonsense-un-tupled-fn-trait-error, r=cjgillot\n\nFix nonsense non-tupled `Fn` trait error\n\nGiven this code:\n\n```rust\n#![feature(unboxed_closures)]\n\nfn a<F: Fn<usize>>(f: F) {}\n\nfn main() {\n    a(|_: usize| {});\n}\n```\n\nWe currently emit this error:\n```\nerror[E0631]: type mismatch in closure arguments\n --> src/main.rs:6:5\n  |\n6 |     a(|_: usize| {});\n  |     ^ ---------- found signature of `fn(usize) -> _`\n  |     |\n  |     expected signature of `fn(usize) -> _`\n  |\nnote: required by a bound in `a`\n --> src/main.rs:3:9\n  |\n3 | fn a<F: Fn<usize>>(f: F) {}\n  |         ^^^^^^^^^ required by this bound in `a`\n\nFor more information about this error, try `rustc --explain E0631`.\nerror: could not compile `playground` due to previous error\n```\nNotably, it says the same thing for \"expected\" and \"found\"!\n\nFix the output so that we instead emit:\n```\nerror[E0308]: mismatched types\n --> /home/gh-compiler-errors/test.rs:6:5\n  |\n6 |     a(|_: usize| {});\n  |     ^ types differ\n  |\n  = note: expected trait `Fn<usize>`\n             found trait `Fn<(usize,)>`\nnote: required by a bound in `a`\n --> /home/gh-compiler-errors/test.rs:3:9\n  |\n3 | fn a<F: Fn<usize>>(f: F) {}\n  |         ^^^^^^^^^ required by this bound in `a`\n\nerror: aborting due to previous error\n```\n\nThe error could still use some work, namely the \"mismatched types\" part, but I'm leaving it a bit rough since the only way you'd ever get this error is when you're messing with `#![feature(unboxed_closures)]`.\n\nSimply making sure we actually print out the difference in trait-refs is good enough for me. I could probably factor in some additional improvements if those are desired.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/070de4bc4866fe8f36bf1538e01e10eab25f3c79", "html_url": "https://github.com/rust-lang/rust/commit/070de4bc4866fe8f36bf1538e01e10eab25f3c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/070de4bc4866fe8f36bf1538e01e10eab25f3c79/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14a459bf37bc19476d43e0045d078121c12d3fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/14a459bf37bc19476d43e0045d078121c12d3fef", "html_url": "https://github.com/rust-lang/rust/commit/14a459bf37bc19476d43e0045d078121c12d3fef"}, {"sha": "1c084f15f308f1d977fd763c3d8bed831b44abf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c084f15f308f1d977fd763c3d8bed831b44abf2", "html_url": "https://github.com/rust-lang/rust/commit/1c084f15f308f1d977fd763c3d8bed831b44abf2"}], "stats": {"total": 100, "additions": 87, "deletions": 13}, "files": [{"sha": "3c7dac2bfd816876d04a9b55d7c45595285ac6e2", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -1750,6 +1750,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values\n             && let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind()\n             && let Some(def_id) = def_id.as_local()\n+            && terr.involves_regions()\n         {\n             let span = self.tcx.def_span(def_id);\n             diag.span_note(span, \"this closure does not fulfill the lifetime requirements\");"}, {"sha": "444817f396e567b87744da72c5d221665370ad4b", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -1935,6 +1935,18 @@ impl<'tcx> TypeTrace<'tcx> {\n         }\n     }\n \n+    pub fn poly_trait_refs(\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: ty::PolyTraitRef<'tcx>,\n+        b: ty::PolyTraitRef<'tcx>,\n+    ) -> TypeTrace<'tcx> {\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: PolyTraitRefs(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n+    }\n+\n     pub fn consts(\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,"}, {"sha": "ac89bec702efddd04e176750b07c452b642d881e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -74,6 +74,18 @@ pub enum TypeError<'tcx> {\n     TargetFeatureCast(DefId),\n }\n \n+impl TypeError<'_> {\n+    pub fn involves_regions(self) -> bool {\n+        match self {\n+            TypeError::RegionsDoesNotOutlive(_, _)\n+            | TypeError::RegionsInsufficientlyPolymorphic(_, _)\n+            | TypeError::RegionsOverlyPolymorphic(_, _)\n+            | TypeError::RegionsPlaceholderMismatch => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// Explains the source of a type err in a short, human readable way. This is meant to be placed\n /// in parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\n /// afterwards to present additional details, particularly when it comes to lifetime-related"}, {"sha": "1a39a1680384dced9379ddbeb194c840cfe09330", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -22,6 +22,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n+use rustc_infer::infer::TypeTrace;\n use rustc_infer::traits::TraitEngine;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n@@ -941,20 +942,43 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 self.reported_closure_mismatch.borrow_mut().insert((span, found_span));\n \n+                let mut not_tupled = false;\n+\n                 let found = match found_trait_ref.skip_binder().substs.type_at(1).kind() {\n                     ty::Tuple(ref tys) => vec![ArgKind::empty(); tys.len()],\n-                    _ => vec![ArgKind::empty()],\n+                    _ => {\n+                        not_tupled = true;\n+                        vec![ArgKind::empty()]\n+                    }\n                 };\n \n                 let expected_ty = expected_trait_ref.skip_binder().substs.type_at(1);\n                 let expected = match expected_ty.kind() {\n                     ty::Tuple(ref tys) => {\n                         tys.iter().map(|t| ArgKind::from_expected_ty(t, Some(span))).collect()\n                     }\n-                    _ => vec![ArgKind::Arg(\"_\".to_owned(), expected_ty.to_string())],\n+                    _ => {\n+                        not_tupled = true;\n+                        vec![ArgKind::Arg(\"_\".to_owned(), expected_ty.to_string())]\n+                    }\n                 };\n \n-                if found.len() == expected.len() {\n+                // If this is a `Fn` family trait and either the expected or found\n+                // is not tupled, then fall back to just a regular mismatch error.\n+                // This shouldn't be common unless manually implementing one of the\n+                // traits manually, but don't make it more confusing when it does\n+                // happen.\n+                if Some(expected_trait_ref.def_id()) != tcx.lang_items().gen_trait() && not_tupled {\n+                    self.report_and_explain_type_error(\n+                        TypeTrace::poly_trait_refs(\n+                            &obligation.cause,\n+                            true,\n+                            expected_trait_ref,\n+                            found_trait_ref,\n+                        ),\n+                        ty::error::TypeError::Mismatch,\n+                    )\n+                } else if found.len() == expected.len() {\n                     self.report_closure_arg_mismatch(\n                         span,\n                         found_span,"}, {"sha": "83dbdb77abeb5c1153843e68f4f0ccfcad365e79", "filename": "src/test/ui/mismatched_types/E0631.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -1,7 +1,7 @@\n #![feature(unboxed_closures)]\n \n fn foo<F: Fn(usize)>(_: F) {}\n-fn bar<F: Fn<usize>>(_: F) {}\n+fn bar<F: Fn<(usize,)>>(_: F) {}\n fn main() {\n     fn f(_: u64) {}\n     foo(|_: isize| {}); //~ ERROR type mismatch"}, {"sha": "410ea4b0b3439ebd9f1254d6be34a9b6136c427c", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -27,8 +27,8 @@ LL |     bar(|_: isize| {});\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |\n-LL | fn bar<F: Fn<usize>>(_: F) {}\n-   |           ^^^^^^^^^ required by this bound in `bar`\n+LL | fn bar<F: Fn<(usize,)>>(_: F) {}\n+   |           ^^^^^^^^^^^^ required by this bound in `bar`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n@@ -65,8 +65,8 @@ LL |     bar(f);\n note: required by a bound in `bar`\n   --> $DIR/E0631.rs:4:11\n    |\n-LL | fn bar<F: Fn<usize>>(_: F) {}\n-   |           ^^^^^^^^^ required by this bound in `bar`\n+LL | fn bar<F: Fn<(usize,)>>(_: F) {}\n+   |           ^^^^^^^^^^^^ required by this bound in `bar`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "65c8d6a7e936e2754c82852e40372620afae744c", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -1,6 +1,6 @@\n #![feature(unboxed_closures)]\n \n-fn f<F: Fn<usize>>(_: F) {}\n+fn f<F: Fn<(usize,)>>(_: F) {}\n fn main() {\n     [1, 2, 3].sort_by(|| panic!());\n     //~^ ERROR closure is expected to take"}, {"sha": "a02ec819838833dc2920fdc10ea9e5d380f97ba7", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -56,8 +56,8 @@ LL |     f(|| panic!());\n note: required by a bound in `f`\n   --> $DIR/closure-arg-count.rs:3:9\n    |\n-LL | fn f<F: Fn<usize>>(_: F) {}\n-   |         ^^^^^^^^^ required by this bound in `f`\n+LL | fn f<F: Fn<(usize,)>>(_: F) {}\n+   |         ^^^^^^^^^^^^ required by this bound in `f`\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(|_| panic!());\n@@ -74,8 +74,8 @@ LL |     f(  move    || panic!());\n note: required by a bound in `f`\n   --> $DIR/closure-arg-count.rs:3:9\n    |\n-LL | fn f<F: Fn<usize>>(_: F) {}\n-   |         ^^^^^^^^^ required by this bound in `f`\n+LL | fn f<F: Fn<(usize,)>>(_: F) {}\n+   |         ^^^^^^^^^^^^ required by this bound in `f`\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(  move    |_| panic!());"}, {"sha": "925463d6deedc1fa156434fcd72c8473cff4f9b1", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -0,0 +1,8 @@\n+#![feature(unboxed_closures)]\n+\n+fn a<F: Fn<usize>>(f: F) {}\n+\n+fn main() {\n+    a(|_: usize| {});\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "9a24fb8c2beec57fcf2f38af5418ecde62272af1", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/070de4bc4866fe8f36bf1538e01e10eab25f3c79/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=070de4bc4866fe8f36bf1538e01e10eab25f3c79", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-tupled-arg-mismatch.rs:6:5\n+   |\n+LL |     a(|_: usize| {});\n+   |     ^ types differ\n+   |\n+   = note: expected trait `Fn<usize>`\n+              found trait `Fn<(usize,)>`\n+note: required by a bound in `a`\n+  --> $DIR/non-tupled-arg-mismatch.rs:3:9\n+   |\n+LL | fn a<F: Fn<usize>>(f: F) {}\n+   |         ^^^^^^^^^ required by this bound in `a`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}