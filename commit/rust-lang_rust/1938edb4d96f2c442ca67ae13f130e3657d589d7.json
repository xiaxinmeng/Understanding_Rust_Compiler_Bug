{"sha": "1938edb4d96f2c442ca67ae13f130e3657d589d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MzhlZGI0ZDk2ZjJjNDQyY2E2N2FlMTNmMTMwZTM2NTdkNTg5ZDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T10:59:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T10:59:11Z"}, "message": "remove some no-longer-needed methods", "tree": {"sha": "9136f6b6254151ca7ba31d6597ff403bc6b37bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9136f6b6254151ca7ba31d6597ff403bc6b37bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1938edb4d96f2c442ca67ae13f130e3657d589d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1938edb4d96f2c442ca67ae13f130e3657d589d7", "html_url": "https://github.com/rust-lang/rust/commit/1938edb4d96f2c442ca67ae13f130e3657d589d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1938edb4d96f2c442ca67ae13f130e3657d589d7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9007296a202b62f26aaa66393cefd93e731b9602", "url": "https://api.github.com/repos/rust-lang/rust/commits/9007296a202b62f26aaa66393cefd93e731b9602", "html_url": "https://github.com/rust-lang/rust/commit/9007296a202b62f26aaa66393cefd93e731b9602"}], "stats": {"total": 29, "additions": 2, "deletions": 27}, "files": [{"sha": "8f3364b1fba19b7420cc50e920bb504e2fb4213c", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1938edb4d96f2c442ca67ae13f130e3657d589d7/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1938edb4d96f2c442ca67ae13f130e3657d589d7/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=1938edb4d96f2c442ca67ae13f130e3657d589d7", "patch": "@@ -661,7 +661,7 @@ pub fn const_eval_raw_provider<'tcx>(\n         |body| eval_body_using_ecx(&mut ecx, cid, body, key.param_env)\n     ).and_then(|place| {\n         Ok(RawConst {\n-            alloc_id: place.to_ptr().expect(\"we allocated this ptr!\").alloc_id,\n+            alloc_id: place.ptr.assert_ptr().alloc_id,\n             ty: place.layout.ty\n         })\n     }).map_err(|error| {"}, {"sha": "43f8677cd32943a7665b42971d31aa5fa90da7d3", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1938edb4d96f2c442ca67ae13f130e3657d589d7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1938edb4d96f2c442ca67ae13f130e3657d589d7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=1938edb4d96f2c442ca67ae13f130e3657d589d7", "patch": "@@ -122,21 +122,6 @@ impl<Tag> MemPlace<Tag> {\n         Self::from_scalar_ptr(ptr.into(), align)\n     }\n \n-    #[inline(always)]\n-    pub fn to_scalar_ptr_align(self) -> (Scalar<Tag>, Align) {\n-        assert!(self.meta.is_none());\n-        (self.ptr, self.align)\n-    }\n-\n-    /// metact the ptr part of the mplace\n-    #[inline(always)]\n-    pub fn to_ptr(self) -> InterpResult<'tcx, Pointer<Tag>> {\n-        // At this point, we forget about the alignment information --\n-        // the place has been turned into a reference, and no matter where it came from,\n-        // it now must be aligned.\n-        self.to_scalar_ptr_align().0.to_ptr()\n-    }\n-\n     /// Turn a mplace into a (thin or fat) pointer, as a reference, pointing to the same space.\n     /// This is the inverse of `ref_to_mplace`.\n     #[inline(always)]\n@@ -246,7 +231,7 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n     }\n }\n \n-impl<'tcx, Tag: ::std::fmt::Debug> Place<Tag> {\n+impl<Tag: ::std::fmt::Debug> Place<Tag> {\n     /// Produces a Place that will error if attempted to be read from or written to\n     #[inline(always)]\n     pub fn null(cx: &impl HasDataLayout) -> Self {\n@@ -271,16 +256,6 @@ impl<'tcx, Tag: ::std::fmt::Debug> Place<Tag> {\n \n         }\n     }\n-\n-    #[inline]\n-    pub fn to_scalar_ptr_align(self) -> (Scalar<Tag>, Align) {\n-        self.assert_mem_place().to_scalar_ptr_align()\n-    }\n-\n-    #[inline]\n-    pub fn to_ptr(self) -> InterpResult<'tcx, Pointer<Tag>> {\n-        self.assert_mem_place().to_ptr()\n-    }\n }\n \n impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {"}]}