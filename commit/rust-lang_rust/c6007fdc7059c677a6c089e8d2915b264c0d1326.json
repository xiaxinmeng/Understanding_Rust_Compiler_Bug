{"sha": "c6007fdc7059c677a6c089e8d2915b264c0d1326", "node_id": "C_kwDOAAsO6NoAKGM2MDA3ZmRjNzA1OWM2NzdhNmMwODllOGQyOTE1YjI2NGMwZDEzMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T10:35:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T10:35:24Z"}, "message": "Auto merge of #86853 - usbalbin:const_try, r=oli-obk\n\nConstify ?-operator for Result and Option\n\nTry to make `?`-operator usable in `const fn` with `Result` and `Option`, see #74935 . Note that the try-operator itself was constified in #87237.\n\nTODO\n* [x] Add tests for const T -> T conversions\n* [x] cleanup commits\n* [x] Remove `#![allow(incomplete_features)]`\n* [?] Await decision in #86808 - I'm not sure\n* [x] Await support for parsing `~const` in bootstrapping compiler\n* [x] Tracking issue(s)? - #88674", "tree": {"sha": "c2cf1599068de9c7cc903ccbc8029dc4ee69aa9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2cf1599068de9c7cc903ccbc8029dc4ee69aa9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6007fdc7059c677a6c089e8d2915b264c0d1326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6007fdc7059c677a6c089e8d2915b264c0d1326", "html_url": "https://github.com/rust-lang/rust/commit/c6007fdc7059c677a6c089e8d2915b264c0d1326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6007fdc7059c677a6c089e8d2915b264c0d1326/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c1c6a173dcae20c245348f6c7d19074b6109b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c1c6a173dcae20c245348f6c7d19074b6109b7", "html_url": "https://github.com/rust-lang/rust/commit/69c1c6a173dcae20c245348f6c7d19074b6109b7"}, {"sha": "29029c0bc2383441412f696e430aaa3536b04e37", "url": "https://api.github.com/repos/rust-lang/rust/commits/29029c0bc2383441412f696e430aaa3536b04e37", "html_url": "https://github.com/rust-lang/rust/commit/29029c0bc2383441412f696e430aaa3536b04e37"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "72dbe845c97a9f08ca026bd70a1853ab9daa7370", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -532,9 +532,10 @@ where\n \n // From implies Into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, U> Into<U> for T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, U> const Into<U> for T\n where\n-    U: From<T>,\n+    U: ~const From<T>,\n {\n     fn into(self) -> U {\n         U::from(self)\n@@ -543,7 +544,8 @@ where\n \n // From (and thus Into) is reflexive\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> From<T> for T {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for T {\n     fn from(t: T) -> T {\n         t\n     }"}, {"sha": "9c4429d320f1ff05e5772981617fc7005d5bcea0", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -82,6 +82,7 @@\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_heap)]\n+#![feature(const_convert)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_intrinsic_copy)]"}, {"sha": "a162c0340fb24144a9f82238c4e4eeb499545532", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -2019,7 +2019,8 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T> ops::Try for Option<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const ops::Try for Option<T> {\n     type Output = T;\n     type Residual = Option<convert::Infallible>;\n \n@@ -2038,7 +2039,8 @@ impl<T> ops::Try for Option<T> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T> ops::FromResidual for Option<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const ops::FromResidual for Option<T> {\n     #[inline]\n     fn from_residual(residual: Option<convert::Infallible>) -> Self {\n         match residual {"}, {"sha": "bd4e623732e2a206ff887e28ea6b9d02e8d30ab3", "filename": "library/core/src/result.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -1889,7 +1889,8 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E> ops::Try for Result<T, E> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, E> const ops::Try for Result<T, E> {\n     type Output = T;\n     type Residual = Result<convert::Infallible, E>;\n \n@@ -1908,7 +1909,10 @@ impl<T, E> ops::Try for Result<T, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>\n+    for Result<T, F>\n+{\n     #[inline]\n     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {\n         match residual {"}, {"sha": "f1048f4cf09cb1750d01338132af025d885c3fad", "filename": "library/core/tests/convert.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Ftests%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Ftests%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconvert.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -0,0 +1,16 @@\n+#[test]\n+fn convert() {\n+    const fn from(x: i32) -> i32 {\n+        i32::from(x)\n+    }\n+\n+    const FOO: i32 = from(42);\n+    assert_eq!(FOO, 42);\n+\n+    const fn into(x: Vec<String>) -> Vec<String> {\n+        x.into()\n+    }\n+\n+    const BAR: Vec<String> = into(Vec::new());\n+    assert_eq!(BAR, Vec::<String>::new());\n+}"}, {"sha": "f25106abc88212ece54032050cbc801347c594b9", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -9,12 +9,13 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_convert)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_num_from_num)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]\n #![feature(const_trait_impl)]\n-#![feature(const_num_from_num)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -83,6 +84,7 @@ mod char;\n mod clone;\n mod cmp;\n mod const_ptr;\n+mod convert;\n mod fmt;\n mod hash;\n mod intrinsics;"}, {"sha": "fe43b132cbd7fb63e96a80b6c6b0464f16ca5a89", "filename": "src/test/ui/consts/try-operator.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6007fdc7059c677a6c089e8d2915b264c0d1326/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6007fdc7059c677a6c089e8d2915b264c0d1326/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs?ref=c6007fdc7059c677a6c089e8d2915b264c0d1326", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(try_trait_v2)]\n+#![feature(const_trait_impl)]\n+#![feature(const_try)]\n+#![feature(const_convert)]\n+\n+fn main() {\n+    const fn result() -> Result<bool, ()> {\n+        Err(())?;\n+        Ok(true)\n+    }\n+\n+    const FOO: Result<bool, ()> = result();\n+    assert_eq!(Err(()), FOO);\n+\n+    const fn option() -> Option<()> {\n+        None?;\n+        Some(())\n+    }\n+    const BAR: Option<()> = option();\n+    assert_eq!(None, BAR);\n+}"}]}