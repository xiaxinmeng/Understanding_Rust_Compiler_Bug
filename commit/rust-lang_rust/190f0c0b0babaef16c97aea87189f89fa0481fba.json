{"sha": "190f0c0b0babaef16c97aea87189f89fa0481fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MGYwYzBiMGJhYmFlZjE2Yzk3YWVhODcxODlmODlmYTA0ODFmYmE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-21T13:29:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-23T12:15:15Z"}, "message": "Always just use symbol name for sorting exported symbols.", "tree": {"sha": "b531d9309602bb486f595e9f8174e2fd238969c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b531d9309602bb486f595e9f8174e2fd238969c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190f0c0b0babaef16c97aea87189f89fa0481fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190f0c0b0babaef16c97aea87189f89fa0481fba", "html_url": "https://github.com/rust-lang/rust/commit/190f0c0b0babaef16c97aea87189f89fa0481fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190f0c0b0babaef16c97aea87189f89fa0481fba/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c366cdeaf6cfc2780bae118268eec5c675d6c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c366cdeaf6cfc2780bae118268eec5c675d6c43", "html_url": "https://github.com/rust-lang/rust/commit/0c366cdeaf6cfc2780bae118268eec5c675d6c43"}], "stats": {"total": 38, "additions": 0, "deletions": 38}, "files": [{"sha": "511a77bf830e5dbcc71029f02ba02cb905681d19", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/190f0c0b0babaef16c97aea87189f89fa0481fba/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190f0c0b0babaef16c97aea87189f89fa0481fba/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=190f0c0b0babaef16c97aea87189f89fa0481fba", "patch": "@@ -3,7 +3,6 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use std::cmp;\n use std::mem;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n@@ -43,43 +42,6 @@ impl<'tcx> ExportedSymbol<'tcx> {\n             ExportedSymbol::NoDefId(symbol_name) => symbol_name,\n         }\n     }\n-\n-    pub fn compare_stable(&self, tcx: TyCtxt<'tcx>, other: &ExportedSymbol<'tcx>) -> cmp::Ordering {\n-        match *self {\n-            ExportedSymbol::NonGeneric(self_def_id) => match *other {\n-                ExportedSymbol::NonGeneric(other_def_id) => {\n-                    tcx.def_path_hash(self_def_id).cmp(&tcx.def_path_hash(other_def_id))\n-                }\n-                ExportedSymbol::Generic(..) | ExportedSymbol::NoDefId(_) => cmp::Ordering::Less,\n-            },\n-            ExportedSymbol::Generic(self_def_id, self_substs) => match *other {\n-                ExportedSymbol::NonGeneric(_) => cmp::Ordering::Greater,\n-                ExportedSymbol::Generic(other_def_id, other_substs) => {\n-                    // We compare the symbol names because they are cached as query\n-                    // results which makes them relatively cheap to access repeatedly.\n-                    //\n-                    // It might be even faster to build a local cache of stable IDs\n-                    // for sorting. Exported symbols are really only sorted once\n-                    // in order to make the `exported_symbols` query result stable.\n-                    let self_symbol_name =\n-                        tcx.symbol_name(ty::Instance::new(self_def_id, self_substs));\n-                    let other_symbol_name =\n-                        tcx.symbol_name(ty::Instance::new(other_def_id, other_substs));\n-\n-                    self_symbol_name.cmp(&other_symbol_name)\n-                }\n-                ExportedSymbol::NoDefId(_) => cmp::Ordering::Less,\n-            },\n-            ExportedSymbol::NoDefId(self_symbol_name) => match *other {\n-                ExportedSymbol::NonGeneric(_) | ExportedSymbol::Generic(..) => {\n-                    cmp::Ordering::Greater\n-                }\n-                ExportedSymbol::NoDefId(ref other_symbol_name) => {\n-                    self_symbol_name.cmp(other_symbol_name)\n-                }\n-            },\n-        }\n-    }\n }\n \n pub fn metadata_symbol_name(tcx: TyCtxt<'_>) -> String {"}]}