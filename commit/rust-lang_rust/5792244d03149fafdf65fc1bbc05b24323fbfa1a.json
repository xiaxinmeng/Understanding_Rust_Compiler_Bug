{"sha": "5792244d03149fafdf65fc1bbc05b24323fbfa1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTIyNDRkMDMxNDlmYWZkZjY1ZmMxYmJjMDViMjQzMjNmYmZhMWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-28T00:24:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-28T00:24:50Z"}, "message": "rustc: Implement equality for option types", "tree": {"sha": "bd1f5c326fb8ff126914e01b0f74698955c1ea3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd1f5c326fb8ff126914e01b0f74698955c1ea3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5792244d03149fafdf65fc1bbc05b24323fbfa1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5792244d03149fafdf65fc1bbc05b24323fbfa1a", "html_url": "https://github.com/rust-lang/rust/commit/5792244d03149fafdf65fc1bbc05b24323fbfa1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5792244d03149fafdf65fc1bbc05b24323fbfa1a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/161a82e433fbfbc0bd57a4d951ac37656a8a30f6", "html_url": "https://github.com/rust-lang/rust/commit/161a82e433fbfbc0bd57a4d951ac37656a8a30f6"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "1ecd38b65ac1b09363cb72b3409659c0671b76ce", "filename": "src/libcore/option.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5792244d03149fafdf65fc1bbc05b24323fbfa1a/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5792244d03149fafdf65fc1bbc05b24323fbfa1a/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5792244d03149fafdf65fc1bbc05b24323fbfa1a", "patch": "@@ -8,6 +8,8 @@\n  * type.\n  */\n \n+use cmp::Eq;\n+\n /// The option type\n enum Option<T> {\n     None,\n@@ -247,6 +249,25 @@ impl<T: copy> Option<T> {\n     pure fn while_some(blk: fn(+T) -> Option<T>) { while_some(self, blk) }\n }\n \n+impl<T: Eq> Option<T> : Eq {\n+    pure fn eq(&&other: Option<T>) -> bool {\n+        match self {\n+            None => {\n+                match other {\n+                    None => true,\n+                    Some(_) => false\n+                }\n+            }\n+            Some(self_contents) => {\n+                match other {\n+                    None => false,\n+                    Some(other_contents) => self_contents.eq(other_contents)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[test]\n fn test_unwrap_ptr() {\n     let x = ~0;"}]}