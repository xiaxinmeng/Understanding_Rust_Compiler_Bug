{"sha": "2d6496dd8432c71b65d67c7216fbd4428c06527b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjQ5NmRkODQzMmM3MWI2NWQ2N2M3MjE2ZmJkNDQyOGMwNjUyN2I=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-23T18:25:43Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-26T13:51:38Z"}, "message": "Use .copy_from_slice() where applicable\n\n.copy_from_slice() does the same job of .clone_from_slice(), but the\nformer is explicitly for Copy elements and calls `memcpy` directly, and\nthus is it efficient without optimization too.", "tree": {"sha": "e82e379131bb08248dc4d625b19a3a53673957d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e82e379131bb08248dc4d625b19a3a53673957d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d6496dd8432c71b65d67c7216fbd4428c06527b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6496dd8432c71b65d67c7216fbd4428c06527b", "html_url": "https://github.com/rust-lang/rust/commit/2d6496dd8432c71b65d67c7216fbd4428c06527b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d6496dd8432c71b65d67c7216fbd4428c06527b/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09130044ce7429beb95742afa7fd371960dbe607", "url": "https://api.github.com/repos/rust-lang/rust/commits/09130044ce7429beb95742afa7fd371960dbe607", "html_url": "https://github.com/rust-lang/rust/commit/09130044ce7429beb95742afa7fd371960dbe607"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "b9a7afc400d5e7a8e854ff5fd1ed5e4a78971284", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -210,7 +210,7 @@ impl<'a> Part<'a> {\n                     }\n                 }\n                 Part::Copy(buf) => {\n-                    out[..buf.len()].clone_from_slice(buf);\n+                    out[..buf.len()].copy_from_slice(buf);\n                 }\n             }\n             Some(len)\n@@ -245,7 +245,7 @@ impl<'a> Formatted<'a> {\n     /// (It may still leave partially written bytes in the buffer; do not rely on that.)\n     pub fn write(&self, out: &mut [u8]) -> Option<usize> {\n         if out.len() < self.sign.len() { return None; }\n-        out[..self.sign.len()].clone_from_slice(self.sign);\n+        out[..self.sign.len()].copy_from_slice(self.sign);\n \n         let mut written = self.sign.len();\n         for part in self.parts {"}, {"sha": "e4df99002c8c23116f58249929565ca6c5b3c76e", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -15,6 +15,7 @@\n #![feature(box_syntax)]\n #![feature(cell_extras)]\n #![feature(const_fn)]\n+#![feature(copy_from_slice)]\n #![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}, {"sha": "1a592f3ad4249f3489cffec79b70bb8e01bc9432", "filename": "src/libcoretest/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -100,7 +100,7 @@ fn check_exact<F, T>(mut f: F, v: T, vstr: &str, expected: &[u8], expectedk: i16\n \n     // check significant digits\n     for i in 1..cut.unwrap_or(expected.len() - 1) {\n-        expected_[..i].clone_from_slice(&expected[..i]);\n+        expected_[..i].copy_from_slice(&expected[..i]);\n         let mut expectedk_ = expectedk;\n         if expected[i] >= b'5' {\n             // check if this is a rounding-to-even case.\n@@ -147,7 +147,7 @@ fn check_exact<F, T>(mut f: F, v: T, vstr: &str, expected: &[u8], expectedk: i16\n     // check infinite zero digits\n     if let Some(cut) = cut {\n         for i in cut..expected.len()-1 {\n-            expected_[..cut].clone_from_slice(&expected[..cut]);\n+            expected_[..cut].copy_from_slice(&expected[..cut]);\n             for c in &mut expected_[cut..i] { *c = b'0'; }\n \n             try_exact!(f(&decoded) => &mut buf, &expected_[..i], expectedk;"}, {"sha": "533f2ee3b3e614c8be1429297815c598544a411a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -122,6 +122,7 @@\n        test(attr(deny(warnings))))]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(copy_from_slice)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n \n@@ -519,7 +520,7 @@ pub mod reader {\n             // of the page and segfault.\n \n             let mut b = [0; 8];\n-            b.clone_from_slice(&d.data[d.end - 8..d.end]);\n+            b.copy_from_slice(&d.data[d.end - 8..d.end]);\n             let data = unsafe { (*(b.as_ptr() as *const u64)).to_be() };\n             let len = d.end - d.start;\n             if len < 8 {\n@@ -1043,7 +1044,7 @@ pub mod writer {\n                 {\n                     let last_size_pos = last_size_pos as usize;\n                     let data = &self.writer.get_ref()[last_size_pos + 4..cur_pos as usize];\n-                    buf[..size].clone_from_slice(data);\n+                    buf[..size].copy_from_slice(data);\n                 }\n \n                 // overwrite the size and data and continue"}, {"sha": "712afd00d46869a2b3666491c64b33c73dc7463a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -29,6 +29,7 @@\n #![feature(cell_extras)]\n #![feature(collections)]\n #![feature(const_fn)]\n+#![feature(copy_from_slice)]\n #![feature(enumset)]\n #![feature(iter_arith)]\n #![feature(libc)]"}, {"sha": "3fc45c575f0454682edf081448a1dd9499a9319d", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -489,7 +489,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n                 let bits = &mut self.scope_kills[start.. end];\n                 debug!(\"{} add_kills_from_flow_exits flow_exit={:?} bits={} [before]\",\n                        self.analysis_name, flow_exit, mut_bits_to_string(bits));\n-                bits.clone_from_slice(&orig_kills[..]);\n+                bits.copy_from_slice(&orig_kills[..]);\n                 debug!(\"{} add_kills_from_flow_exits flow_exit={:?} bits={} [after]\",\n                        self.analysis_name, flow_exit, mut_bits_to_string(bits));\n             }\n@@ -556,7 +556,7 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n             let (start, end) = self.dfcx.compute_id_range(node_index);\n \n             // Initialize local bitvector with state on-entry.\n-            in_out.clone_from_slice(&self.dfcx.on_entry[start.. end]);\n+            in_out.copy_from_slice(&self.dfcx.on_entry[start.. end]);\n \n             // Compute state on-exit by applying transfer function to\n             // state on-entry."}, {"sha": "364c2977bfb057fca7c45071befc3ba22e9e063c", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -31,6 +31,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(box_syntax)]\n+#![feature(copy_from_slice)]\n #![feature(libc)]\n #![feature(rand)]\n #![feature(rustc_private)]"}, {"sha": "ba8107e03c9f76fcd153b01a4b8aab2b212c23ba", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -134,13 +134,13 @@ impl FixedBuffer for FixedBuffer64 {\n             let buffer_remaining = size - self.buffer_idx;\n             if input.len() >= buffer_remaining {\n                 self.buffer[self.buffer_idx..size]\n-                    .clone_from_slice(&input[..buffer_remaining]);\n+                    .copy_from_slice(&input[..buffer_remaining]);\n                 self.buffer_idx = 0;\n                 func(&self.buffer);\n                 i += buffer_remaining;\n             } else {\n                 self.buffer[self.buffer_idx..self.buffer_idx + input.len()]\n-                    .clone_from_slice(input);\n+                    .copy_from_slice(input);\n                 self.buffer_idx += input.len();\n                 return;\n             }\n@@ -157,7 +157,7 @@ impl FixedBuffer for FixedBuffer64 {\n         // data left in the input vector will be less than the buffer size and the buffer will\n         // be empty.\n         let input_remaining = input.len() - i;\n-        self.buffer[..input_remaining].clone_from_slice(&input[i..]);\n+        self.buffer[..input_remaining].copy_from_slice(&input[i..]);\n         self.buffer_idx += input_remaining;\n     }\n "}, {"sha": "420fede34d2f835cd4dbca5daeffa42e93c48ebe", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -256,7 +256,7 @@ impl Write for Cursor<Vec<u8>> {\n             let pos = pos as usize;\n             let space = self.inner.len() - pos;\n             let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n-            self.inner[pos..pos + left.len()].clone_from_slice(left);\n+            self.inner[pos..pos + left.len()].copy_from_slice(left);\n             self.inner.extend_from_slice(right);\n         }\n "}, {"sha": "ec63f14d4533217a21a1bd6ca28af70c8a278bf4", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -156,7 +156,7 @@ impl<'a> Read for &'a [u8] {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n         let (a, b) = self.split_at(amt);\n-        buf[..amt].clone_from_slice(a);\n+        buf[..amt].copy_from_slice(a);\n         *self = b;\n         Ok(amt)\n     }\n@@ -168,7 +168,7 @@ impl<'a> Read for &'a [u8] {\n                                   \"failed to fill whole buffer\"));\n         }\n         let (a, b) = self.split_at(buf.len());\n-        buf.clone_from_slice(a);\n+        buf.copy_from_slice(a);\n         *self = b;\n         Ok(())\n     }\n@@ -189,7 +189,7 @@ impl<'a> Write for &'a mut [u8] {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());\n         let (a, b) = mem::replace(self, &mut []).split_at_mut(amt);\n-        a.clone_from_slice(&data[..amt]);\n+        a.copy_from_slice(&data[..amt]);\n         *self = b;\n         Ok(amt)\n     }"}, {"sha": "f9e7c1fede24e798c01cc56087a87c8d6ed1c1e9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -222,6 +222,7 @@\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n+#![feature(copy_from_slice)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n #![feature(decode_utf16)]"}, {"sha": "5851ce7135d2745c08faf78a6c990029db2fdbba", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -191,8 +191,8 @@ impl<'a> Parser<'a> {\n         fn ipv6_addr_from_head_tail(head: &[u16], tail: &[u16]) -> Ipv6Addr {\n             assert!(head.len() + tail.len() <= 8);\n             let mut gs = [0; 8];\n-            gs[..head.len()].clone_from_slice(head);\n-            gs[(8 - tail.len()) .. 8].clone_from_slice(tail);\n+            gs[..head.len()].copy_from_slice(head);\n+            gs[(8 - tail.len()) .. 8].copy_from_slice(tail);\n             Ipv6Addr::new(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n         }\n "}, {"sha": "48e9adb9296bc47b7888fa981193b126c0947f0e", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6496dd8432c71b65d67c7216fbd4428c06527b/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=2d6496dd8432c71b65d67c7216fbd4428c06527b", "patch": "@@ -341,7 +341,7 @@ impl Wtf8Buf {\n                 Some((surrogate_pos, _)) => {\n                     pos = surrogate_pos + 3;\n                     self.bytes[surrogate_pos..pos]\n-                        .clone_from_slice(UTF8_REPLACEMENT_CHARACTER);\n+                        .copy_from_slice(UTF8_REPLACEMENT_CHARACTER);\n                 },\n                 None => return unsafe { String::from_utf8_unchecked(self.bytes) }\n             }"}]}