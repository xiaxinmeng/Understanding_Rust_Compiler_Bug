{"sha": "b371891c7c35f5d561a4847515e41014c652fa26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNzE4OTFjN2MzNWY1ZDU2MWE0ODQ3NTE1ZTQxMDE0YzY1MmZhMjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-24T23:54:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-24T23:54:10Z"}, "message": "rt: Fix walk_obj_contents for type-parameteric objects. Hash tables can be logged now.", "tree": {"sha": "7971cdd95273381c5bfd03e6bca3a2712e8e717c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7971cdd95273381c5bfd03e6bca3a2712e8e717c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b371891c7c35f5d561a4847515e41014c652fa26", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b371891c7c35f5d561a4847515e41014c652fa26", "html_url": "https://github.com/rust-lang/rust/commit/b371891c7c35f5d561a4847515e41014c652fa26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b371891c7c35f5d561a4847515e41014c652fa26/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d78e6a93829703f64bd59f502410bebe64ae91", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d78e6a93829703f64bd59f502410bebe64ae91", "html_url": "https://github.com/rust-lang/rust/commit/72d78e6a93829703f64bd59f502410bebe64ae91"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "6a586860cd60ed597bcdf2787bb0bf22a7aff305", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b371891c7c35f5d561a4847515e41014c652fa26/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b371891c7c35f5d561a4847515e41014c652fa26/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=b371891c7c35f5d561a4847515e41014c652fa26", "patch": "@@ -42,10 +42,21 @@ type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n     return ptrs;\n }\n \n+// Constructs type parameters from an object shape. This is a bit messy,\n+// because it requires that the object shape have a specific format.\n type_param *\n-type_param::from_obj_shape(const uint8_t *sp, arena &arena) {\n-    // TODO\n-    abort();\n+type_param::from_obj_shape(const uint8_t *sp, ptr dp, arena &arena) {\n+    uint8_t shape = *sp++; assert(shape == SHAPE_STRUCT);\n+    get_u16_bump(sp);   // Skip over the size.\n+    shape = *sp++; assert(shape == SHAPE_PTR);\n+    shape = *sp++; assert(shape == SHAPE_STRUCT);\n+\n+    unsigned n_tydescs = get_u16_bump(sp);\n+\n+    // Type descriptors start right after the reference count.\n+    const type_desc **descs = (const type_desc **)(dp + sizeof(uintptr_t));\n+\n+    return make(descs, n_tydescs, arena);\n }\n \n "}, {"sha": "0302338e26d6e58f760915c1c2b49b5dc4c1e7b3", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b371891c7c35f5d561a4847515e41014c652fa26/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/b371891c7c35f5d561a4847515e41014c652fa26/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=b371891c7c35f5d561a4847515e41014c652fa26", "patch": "@@ -46,11 +46,18 @@ const uint8_t SHAPE_OBJ = 19u;\n const uint8_t SHAPE_RES = 20u;\n const uint8_t SHAPE_VAR = 21u;\n \n+#ifdef _LP64\n+const uint8_t SHAPE_PTR = SHAPE_U64;\n+#else\n+const uint8_t SHAPE_PTR = SHAPE_U32;\n+#endif\n+\n \n // Forward declarations\n \n struct rust_obj;\n struct size_align;\n+class ptr;\n class type_param;\n \n \n@@ -129,6 +136,21 @@ struct tag_info {\n };\n \n \n+// Utility functions\n+\n+inline uint16_t\n+get_u16(const uint8_t *addr) {\n+    return *reinterpret_cast<const uint16_t *>(addr);\n+}\n+\n+inline uint16_t\n+get_u16_bump(const uint8_t *&addr) {\n+    uint16_t result = get_u16(addr);\n+    addr += sizeof(uint16_t);\n+    return result;\n+}\n+\n+\n // Contexts\n \n // The base context, an abstract class. We use the curiously recurring\n@@ -166,8 +188,6 @@ class ctxt {\n protected:\n     inline uint8_t peek() { return *sp; }\n \n-    static inline uint16_t get_u16(const uint8_t *addr);\n-    static inline uint16_t get_u16_bump(const uint8_t *&addr);\n     inline size_align get_size_align(const uint8_t *&addr);\n \n private:\n@@ -226,7 +246,8 @@ class type_param {\n     const type_param *params;   // subparameters\n \n     // Creates type parameters from an object shape description.\n-    static type_param *from_obj_shape(const uint8_t *sp, arena &arena);\n+    static type_param *from_obj_shape(const uint8_t *sp, ptr dp,\n+                                      arena &arena);\n \n     template<typename T>\n     inline void set(ctxt<T> *cx) {\n@@ -284,20 +305,6 @@ ctxt<T>::walk_reset(bool align) {\n     sp = old_sp;\n }\n \n-template<typename T>\n-uint16_t\n-ctxt<T>::get_u16(const uint8_t *addr) {\n-    return *reinterpret_cast<const uint16_t *>(addr);\n-}\n-\n-template<typename T>\n-uint16_t\n-ctxt<T>::get_u16_bump(const uint8_t *&addr) {\n-    uint16_t result = get_u16(addr);\n-    addr += sizeof(uint16_t);\n-    return result;\n-}\n-\n template<typename T>\n size_align\n ctxt<T>::get_size_align(const uint8_t *&addr) {\n@@ -892,17 +899,13 @@ data<T,U>::walk_obj_contents(bool align, ptr &dp) {\n     uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n     type_desc *subtydesc =\n         *reinterpret_cast<type_desc **>(box_ptr + sizeof(void *));\n-    ptr obj_closure_dp(*box_ptr + sizeof(void *));\n+    ptr obj_closure_dp(box_ptr + sizeof(void *));\n \n-    // FIXME: Should be type_param::from_obj_shape() below.\n     arena arena;\n-    type_param *params = type_param::from_tydesc(subtydesc, arena);\n+    type_param *params = type_param::from_obj_shape(subtydesc->shape,\n+                                                    obj_closure_dp, arena);\n     T sub(*static_cast<T *>(this), subtydesc->shape, params,\n           subtydesc->shape_tables, obj_closure_dp);\n-\n-    print print(sub);\n-    print.walk(false);\n-\n     sub.walk(true);\n }\n "}]}