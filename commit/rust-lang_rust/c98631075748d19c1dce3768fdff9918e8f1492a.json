{"sha": "c98631075748d19c1dce3768fdff9918e8f1492a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ODYzMTA3NTc0OGQxOWMxZGNlMzc2OGZkZmY5OTE4ZThmMTQ5MmE=", "commit": {"author": {"name": "jD91mZM2", "email": "me@krake.one", "date": "2018-06-27T16:37:44Z"}, "committer": {"name": "jD91mZM2", "email": "me@krake.one", "date": "2018-06-27T16:37:44Z"}, "message": "Add is_unnamed on redox", "tree": {"sha": "d92cf191cbc87493e66ffb85f3407d53eb767ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92cf191cbc87493e66ffb85f3407d53eb767ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c98631075748d19c1dce3768fdff9918e8f1492a", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEvF2uTsFosfm5TJhQMFXVRymnJmYFAlszvVgACgkQMFXVRymn\nJma1wAgAlLr8k3jLHPgonhl+mKjoVM82pMv5L94OrSuMXcxMgvTzMOy8b6mdFWz3\nxD84znVvxHOBTmgAoLvF5gEHvz8aQalTnoOiAncAdkQORP2ecNrVdkUAs0LloGJp\nhqB3ePl3NyfZRd1dBB4LPss96DwckdWe5hOuMSYlT+UqGNPNR1p3GDoQAVb9X9DQ\ng4vzKukALXyukUI+1gCVgQvkp7SCv0XyK4DDZz1q31hYjpgt5FtfAEYYMIvaLE/m\n4YgOAoMb2yuiTb+5C52GLWsVotxbkYKzQPt1TFWk4AMNzPdsEVuJbln+yLqMEJif\nYayH+r0oXC4qU0JyGjitjsUZKm2YoA==\n=PPji\n-----END PGP SIGNATURE-----", "payload": "tree d92cf191cbc87493e66ffb85f3407d53eb767ec4\nparent 79bf00f4063793b3828001a845f6111d628c3349\nauthor jD91mZM2 <me@krake.one> 1530117464 +0200\ncommitter jD91mZM2 <me@krake.one> 1530117464 +0200\n\nAdd is_unnamed on redox\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c98631075748d19c1dce3768fdff9918e8f1492a", "html_url": "https://github.com/rust-lang/rust/commit/c98631075748d19c1dce3768fdff9918e8f1492a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c98631075748d19c1dce3768fdff9918e8f1492a/comments", "author": {"login": "jD91mZM2", "id": 12830969, "node_id": "MDQ6VXNlcjEyODMwOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12830969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jD91mZM2", "html_url": "https://github.com/jD91mZM2", "followers_url": "https://api.github.com/users/jD91mZM2/followers", "following_url": "https://api.github.com/users/jD91mZM2/following{/other_user}", "gists_url": "https://api.github.com/users/jD91mZM2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jD91mZM2/subscriptions", "organizations_url": "https://api.github.com/users/jD91mZM2/orgs", "repos_url": "https://api.github.com/users/jD91mZM2/repos", "events_url": "https://api.github.com/users/jD91mZM2/events{/privacy}", "received_events_url": "https://api.github.com/users/jD91mZM2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jD91mZM2", "id": 12830969, "node_id": "MDQ6VXNlcjEyODMwOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12830969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jD91mZM2", "html_url": "https://github.com/jD91mZM2", "followers_url": "https://api.github.com/users/jD91mZM2/followers", "following_url": "https://api.github.com/users/jD91mZM2/following{/other_user}", "gists_url": "https://api.github.com/users/jD91mZM2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jD91mZM2/subscriptions", "organizations_url": "https://api.github.com/users/jD91mZM2/orgs", "repos_url": "https://api.github.com/users/jD91mZM2/repos", "events_url": "https://api.github.com/users/jD91mZM2/events{/privacy}", "received_events_url": "https://api.github.com/users/jD91mZM2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79bf00f4063793b3828001a845f6111d628c3349", "url": "https://api.github.com/repos/rust-lang/rust/commits/79bf00f4063793b3828001a845f6111d628c3349", "html_url": "https://github.com/rust-lang/rust/commit/79bf00f4063793b3828001a845f6111d628c3349"}], "stats": {"total": 82, "additions": 58, "deletions": 24}, "files": [{"sha": "be37575145aba5cbb8063d0ed90fa4012a40cd00", "filename": "src/libstd/sys/redox/ext/unixsocket.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c98631075748d19c1dce3768fdff9918e8f1492a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Funixsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98631075748d19c1dce3768fdff9918e8f1492a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Funixsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Funixsocket.rs?ref=c98631075748d19c1dce3768fdff9918e8f1492a", "patch": "@@ -20,11 +20,15 @@ use sys::{cvt, fd::FileDesc, syscall};\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n #[derive(Clone)]\n-pub(crate) struct SocketAddr(());\n+pub struct SocketAddr(());\n \n impl SocketAddr {\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn as_pathname(&self) -> Option<&Path> {\n+    pub fn is_unnamed(&self) -> bool {\n+        false\n+    }\n+    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    pub fn as_pathname(&self) -> Option<&Path> {\n         None\n     }\n }\n@@ -36,7 +40,7 @@ impl fmt::Debug for SocketAddr {\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-pub(crate) struct UnixStream(FileDesc);\n+pub struct UnixStream(FileDesc);\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl fmt::Debug for UnixStream {\n@@ -55,7 +59,7 @@ impl fmt::Debug for UnixStream {\n \n impl UnixStream {\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn connect(path: &Path) -> io::Result<UnixStream> {\n+    pub fn connect(path: &Path) -> io::Result<UnixStream> {\n         if let Some(s) = path.to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CLOEXEC))\n                 .map(FileDesc::new)\n@@ -69,7 +73,7 @@ impl UnixStream {\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn pair() -> io::Result<(UnixStream, UnixStream)> {\n+    pub fn pair() -> io::Result<(UnixStream, UnixStream)> {\n         let server = cvt(syscall::open(\"chan:\", syscall::O_CREAT | syscall::O_CLOEXEC))\n             .map(FileDesc::new)?;\n         let client = server.duplicate_path(b\"connect\")?;\n@@ -78,52 +82,52 @@ impl UnixStream {\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn try_clone(&self) -> io::Result<UnixStream> {\n+    pub fn try_clone(&self) -> io::Result<UnixStream> {\n         self.0.duplicate().map(UnixStream)\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn local_addr(&self) -> io::Result<SocketAddr> {\n+    pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::local_addr unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn peer_addr(&self) -> io::Result<SocketAddr> {\n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::peer_addr unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn set_read_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n+    pub fn set_read_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_read_timeout unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn set_write_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n+    pub fn set_write_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_write_timeout unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn read_timeout(&self) -> io::Result<Option<Duration>> {\n+    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::read_timeout unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn write_timeout(&self) -> io::Result<Option<Duration>> {\n+    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::write_timeout unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n+    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn take_error(&self) -> io::Result<Option<io::Error>> {\n+    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn shutdown(&self, _how: Shutdown) -> io::Result<()> {\n+    pub fn shutdown(&self, _how: Shutdown) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::shutdown unimplemented on redox\"))\n     }\n }\n@@ -173,7 +177,7 @@ impl IntoRawFd for UnixStream {\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-pub(crate) struct UnixListener(FileDesc);\n+pub struct UnixListener(FileDesc);\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl fmt::Debug for UnixListener {\n@@ -189,7 +193,7 @@ impl fmt::Debug for UnixListener {\n \n impl UnixListener {\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn bind(path: &Path) -> io::Result<UnixListener> {\n+    pub fn bind(path: &Path) -> io::Result<UnixListener> {\n         if let Some(s) = path.to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CREAT | syscall::O_CLOEXEC))\n                 .map(FileDesc::new)\n@@ -203,27 +207,27 @@ impl UnixListener {\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {\n+    pub fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {\n         self.0.duplicate_path(b\"listen\").map(|fd| (UnixStream(fd), SocketAddr(())))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn try_clone(&self) -> io::Result<UnixListener> {\n+    pub fn try_clone(&self) -> io::Result<UnixListener> {\n         self.0.duplicate().map(UnixListener)\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn local_addr(&self) -> io::Result<SocketAddr> {\n+    pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixListener::local_addr unimplemented on redox\"))\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n+    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n \n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub(crate) fn take_error(&self) -> io::Result<Option<io::Error>> {\n+    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n }"}, {"sha": "124555141a35ddb086a9d11ba5575d41cbd7db62", "filename": "src/libstd/sys/unix/ext/unixsocket.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c98631075748d19c1dce3768fdff9918e8f1492a/src%2Flibstd%2Fsys%2Funix%2Fext%2Funixsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98631075748d19c1dce3768fdff9918e8f1492a/src%2Flibstd%2Fsys%2Funix%2Fext%2Funixsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Funixsocket.rs?ref=c98631075748d19c1dce3768fdff9918e8f1492a", "patch": "@@ -54,7 +54,8 @@ pub struct SocketAddr {\n }\n \n impl SocketAddr {\n-    pub(crate) fn new<F>(f: F) -> io::Result<SocketAddr>\n+    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    pub fn new<F>(f: F) -> io::Result<SocketAddr>\n         where F: FnOnce(*mut libc::sockaddr, *mut libc::socklen_t) -> libc::c_int\n     {\n         unsafe {\n@@ -65,7 +66,8 @@ impl SocketAddr {\n         }\n     }\n \n-    pub(crate) fn from_parts(addr: libc::sockaddr_un, mut len: libc::socklen_t)\n+    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    pub fn from_parts(addr: libc::sockaddr_un, mut len: libc::socklen_t)\n         -> io::Result<SocketAddr>\n     {\n         if len == 0 {"}, {"sha": "c7d71ae67902af2853c0da47cf9c9e737771689b", "filename": "src/libstd/sys_common/unixsocket.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c98631075748d19c1dce3768fdff9918e8f1492a/src%2Flibstd%2Fsys_common%2Funixsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98631075748d19c1dce3768fdff9918e8f1492a/src%2Flibstd%2Fsys_common%2Funixsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Funixsocket.rs?ref=c98631075748d19c1dce3768fdff9918e8f1492a", "patch": "@@ -113,6 +113,34 @@ impl<'a> io::Write for &'a UnixStream {\n }\n \n impl SocketAddr {\n+    /// Returns true if and only if the address is unnamed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// A named address:\n+    ///\n+    /// ```no_run\n+    /// use std::os::unix::net::UnixListener;\n+    ///\n+    /// let socket = UnixListener::bind(\"/tmp/sock\").unwrap();\n+    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    /// assert_eq!(addr.is_unnamed(), false);\n+    /// ```\n+    ///\n+    /// An unnamed address:\n+    ///\n+    /// ```\n+    /// use std::os::unix::net::UnixDatagram;\n+    ///\n+    /// let socket = UnixDatagram::unbound().unwrap();\n+    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    /// assert_eq!(addr.is_unnamed(), true);\n+    /// ```\n+    #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n+    pub fn is_unnamed(&self) -> bool {\n+        self.0.is_unnamed()\n+    }\n+\n     /// Returns the contents of this address if it is a `pathname` address.\n     ///\n     /// # Examples"}]}