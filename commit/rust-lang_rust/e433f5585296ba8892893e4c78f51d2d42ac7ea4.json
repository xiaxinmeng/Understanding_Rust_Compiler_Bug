{"sha": "e433f5585296ba8892893e4c78f51d2d42ac7ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MzNmNTU4NTI5NmJhODg5Mjg5M2U0Yzc4ZjUxZDJkNDJhYzdlYTQ=", "commit": {"author": {"name": "Kevin Jiang", "email": "kwj2104@columbia.edu", "date": "2021-03-18T04:15:39Z"}, "committer": {"name": "K", "email": "kwj2104@columbia.edu", "date": "2021-04-02T02:55:47Z"}, "message": "Fixed diagnostic and added test for issue 81508", "tree": {"sha": "c293ef61f543a20b1b42e8619daadba6fdfed449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c293ef61f543a20b1b42e8619daadba6fdfed449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e433f5585296ba8892893e4c78f51d2d42ac7ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e433f5585296ba8892893e4c78f51d2d42ac7ea4", "html_url": "https://github.com/rust-lang/rust/commit/e433f5585296ba8892893e4c78f51d2d42ac7ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e433f5585296ba8892893e4c78f51d2d42ac7ea4/comments", "author": {"login": "kwj2104", "id": 742632, "node_id": "MDQ6VXNlcjc0MjYzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/742632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwj2104", "html_url": "https://github.com/kwj2104", "followers_url": "https://api.github.com/users/kwj2104/followers", "following_url": "https://api.github.com/users/kwj2104/following{/other_user}", "gists_url": "https://api.github.com/users/kwj2104/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwj2104/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwj2104/subscriptions", "organizations_url": "https://api.github.com/users/kwj2104/orgs", "repos_url": "https://api.github.com/users/kwj2104/repos", "events_url": "https://api.github.com/users/kwj2104/events{/privacy}", "received_events_url": "https://api.github.com/users/kwj2104/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kwj2104", "id": 742632, "node_id": "MDQ6VXNlcjc0MjYzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/742632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwj2104", "html_url": "https://github.com/kwj2104", "followers_url": "https://api.github.com/users/kwj2104/followers", "following_url": "https://api.github.com/users/kwj2104/following{/other_user}", "gists_url": "https://api.github.com/users/kwj2104/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwj2104/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwj2104/subscriptions", "organizations_url": "https://api.github.com/users/kwj2104/orgs", "repos_url": "https://api.github.com/users/kwj2104/repos", "events_url": "https://api.github.com/users/kwj2104/events{/privacy}", "received_events_url": "https://api.github.com/users/kwj2104/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926ec1cb8b81ac47ba2e5b8a6780e95d39241afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/926ec1cb8b81ac47ba2e5b8a6780e95d39241afa", "html_url": "https://github.com/rust-lang/rust/commit/926ec1cb8b81ac47ba2e5b8a6780e95d39241afa"}], "stats": {"total": 114, "additions": 100, "deletions": 14}, "files": [{"sha": "987f1e6cc747a83309624ee4a6da2971396af9df", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e433f5585296ba8892893e4c78f51d2d42ac7ea4/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e433f5585296ba8892893e4c78f51d2d42ac7ea4/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e433f5585296ba8892893e4c78f51d2d42ac7ea4", "patch": "@@ -1031,7 +1031,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n-                debug!(\"resolve_item ItemKind::Const\");\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n@@ -1597,6 +1596,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n                         .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));\n                     self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                    self.r.record_local_span(pat.id, pat.span);\n                 }\n                 PatKind::TupleStruct(ref path, ref sub_patterns) => {\n                     self.smart_resolve_path("}, {"sha": "3a8cb0fd09ad26e4199cb71bdafed5b4ad7aa9ad", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e433f5585296ba8892893e4c78f51d2d42ac7ea4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e433f5585296ba8892893e4c78f51d2d42ac7ea4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e433f5585296ba8892893e4c78f51d2d42ac7ea4", "patch": "@@ -884,6 +884,10 @@ pub struct Resolver<'a> {\n     /// \"self-confirming\" import resolutions during import validation.\n     unusable_binding: Option<&'a NameBinding<'a>>,\n \n+    // Spans for local variables found during resolution\n+    // Used for suggestions during error reporting\n+    local_span_map: NodeMap<Span>,\n+\n     /// Resolutions for nodes that have a single resolution.\n     partial_res_map: NodeMap<PartialRes>,\n     /// Resolutions for import nodes, which have multiple resolutions in different namespaces.\n@@ -1262,6 +1266,7 @@ impl<'a> Resolver<'a> {\n             last_import_segment: false,\n             unusable_binding: None,\n \n+            local_span_map: Default::default(),\n             partial_res_map: Default::default(),\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n@@ -1879,7 +1884,6 @@ impl<'a> Resolver<'a> {\n                     ribs,\n                 )));\n             }\n-\n             module = match ribs[i].kind {\n                 ModuleRibKind(module) => module,\n                 MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n@@ -1890,7 +1894,6 @@ impl<'a> Resolver<'a> {\n                 }\n                 _ => continue,\n             };\n-\n             match module.kind {\n                 ModuleKind::Block(..) => {} // We can see through blocks\n                 _ => break,\n@@ -1909,17 +1912,19 @@ impl<'a> Resolver<'a> {\n                 return Some(LexicalScopeBinding::Item(binding));\n             }\n         }\n+        let returned_item = self\n+            .early_resolve_ident_in_lexical_scope(\n+                orig_ident,\n+                ScopeSet::Late(ns, module, record_used_id),\n+                parent_scope,\n+                record_used,\n+                record_used,\n+                path_span,\n+            )\n+            .ok()\n+            .map(LexicalScopeBinding::Item);\n \n-        self.early_resolve_ident_in_lexical_scope(\n-            orig_ident,\n-            ScopeSet::Late(ns, module, record_used_id),\n-            parent_scope,\n-            record_used,\n-            record_used,\n-            path_span,\n-        )\n-        .ok()\n-        .map(LexicalScopeBinding::Item)\n+        returned_item\n     }\n \n     fn hygienic_lexical_parent(\n@@ -2386,7 +2391,40 @@ impl<'a> Resolver<'a> {\n                             .next()\n                             .map_or(false, |c| c.is_ascii_uppercase())\n                         {\n-                            (format!(\"use of undeclared type `{}`\", ident), None)\n+                            // Add check case for similarly named item in alternative namespace\n+                            let mut suggestion = None;\n+\n+                            if ribs.is_some() {\n+                                if let Some(res) = self.resolve_ident_in_lexical_scope(\n+                                    ident,\n+                                    ValueNS,\n+                                    parent_scope,\n+                                    None,\n+                                    path_span,\n+                                    &ribs.unwrap()[ValueNS],\n+                                ) {\n+                                    let mut match_span: Option<Span> = None;\n+                                    match res {\n+                                        LexicalScopeBinding::Res(Res::Local(id)) => {\n+                                            match_span =\n+                                                Some(*self.local_span_map.get(&id).unwrap());\n+                                        }\n+                                        LexicalScopeBinding::Item(name_binding) => {\n+                                            match_span = Some(name_binding.span);\n+                                        }\n+                                        _ => (),\n+                                    };\n+                                    if let Some(span) = match_span {\n+                                        suggestion = Some((\n+                                            vec![(span, String::from(\"\"))],\n+                                            format!(\"{} is defined here, but is not a type\", ident),\n+                                            Applicability::MaybeIncorrect,\n+                                        ));\n+                                    }\n+                                }\n+                            }\n+\n+                            (format!(\"use of undeclared type `{}`\", ident), suggestion)\n                         } else {\n                             (format!(\"use of undeclared crate or module `{}`\", ident), None)\n                         }\n@@ -2797,6 +2835,11 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn record_local_span(&mut self, node: NodeId, span: Span) {\n+        debug!(\"(recording local) recording {:?} for {:?}\", node, span);\n+        self.local_span_map.insert(node, span);\n+    }\n+\n     fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n         vis.is_accessible_from(module.nearest_parent_mod, self)\n     }"}, {"sha": "23605cd2fd91dfa54acf8dcfd0bbdb30f3c4a60a", "filename": "src/test/ui/resolve/issue-81508.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e433f5585296ba8892893e4c78f51d2d42ac7ea4/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e433f5585296ba8892893e4c78f51d2d42ac7ea4/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.rs?ref=e433f5585296ba8892893e4c78f51d2d42ac7ea4", "patch": "@@ -0,0 +1,22 @@\n+// Confusing diagnostic when using variable as a type:\n+//\n+// Previous warnings indicate Foo is not used, when in fact it is\n+// used improperly as a variable or constant. New warning points\n+// out user may be trying to use variable as a type. Test demonstrates\n+// cases for both local variable and const.\n+\n+fn main() {\n+    let Baz: &str = \"\";\n+\n+    println!(\"{}\", Baz::Bar); //~ ERROR: failed to resolve: use of undeclared type `Baz`\n+}\n+\n+#[allow(non_upper_case_globals)]\n+pub const Foo: &str = \"\";\n+\n+mod submod {\n+    use super::Foo;\n+    fn function() {\n+        println!(\"{}\", Foo::Bar); //~ ERROR: failed to resolve: use of undeclared type `Foo`\n+    }\n+}"}, {"sha": "b0d5e1a26923178e67640f3441825c764489649f", "filename": "src/test/ui/resolve/issue-81508.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e433f5585296ba8892893e4c78f51d2d42ac7ea4/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e433f5585296ba8892893e4c78f51d2d42ac7ea4/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr?ref=e433f5585296ba8892893e4c78f51d2d42ac7ea4", "patch": "@@ -0,0 +1,21 @@\n+error[E0433]: failed to resolve: use of undeclared type `Baz`\n+  --> $DIR/issue-81508.rs:11:20\n+   |\n+LL |     let Baz: &str = \"\";\n+   |         --- help: Baz is defined here, but is not a type\n+LL | \n+LL |     println!(\"{}\", Baz::Bar);\n+   |                    ^^^ use of undeclared type `Baz`\n+\n+error[E0433]: failed to resolve: use of undeclared type `Foo`\n+  --> $DIR/issue-81508.rs:20:24\n+   |\n+LL |     use super::Foo;\n+   |         ---------- help: Foo is defined here, but is not a type\n+LL |     fn function() {\n+LL |         println!(\"{}\", Foo::Bar);\n+   |                        ^^^ use of undeclared type `Foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}]}