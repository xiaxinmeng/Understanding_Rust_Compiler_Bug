{"sha": "d5af360bb2de24235d2873e926d0b6f21135ae38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YWYzNjBiYjJkZTI0MjM1ZDI4NzNlOTI2ZDBiNmYyMTEzNWFlMzg=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-17T09:14:14Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-17T09:14:14Z"}, "message": "add `WRAPPED_SELF: Option<Self>` in the test", "tree": {"sha": "8dc61ee72e3ac402bc7b8c6fbd208dc5b5a31840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc61ee72e3ac402bc7b8c6fbd208dc5b5a31840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5af360bb2de24235d2873e926d0b6f21135ae38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5af360bb2de24235d2873e926d0b6f21135ae38", "html_url": "https://github.com/rust-lang/rust/commit/d5af360bb2de24235d2873e926d0b6f21135ae38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5af360bb2de24235d2873e926d0b6f21135ae38/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc9064921ce0afd2c07c5b576f95c7adf731541", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc9064921ce0afd2c07c5b576f95c7adf731541", "html_url": "https://github.com/rust-lang/rust/commit/2fc9064921ce0afd2c07c5b576f95c7adf731541"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "3afcdca2f04dd165b03f7fb7fcdf0e12d0867073", "filename": "tests/ui/declare_interior_mutable_const.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5af360bb2de24235d2873e926d0b6f21135ae38/tests%2Fui%2Fdeclare_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5af360bb2de24235d2873e926d0b6f21135ae38/tests%2Fui%2Fdeclare_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.rs?ref=d5af360bb2de24235d2873e926d0b6f21135ae38", "patch": "@@ -121,18 +121,24 @@ where\n     const BOUNDED: T::ToBeBounded = AtomicUsize::new(15);\n }\n \n-trait SelfType {\n+// a constant whose type is `Self` should be linted at the implementation site as well.\n+// (`Option` requires `Sized` bound.)\n+trait SelfType: Sized {\n     const SELF: Self;\n+    // this was the one in the original issue (#5050).\n+    const WRAPPED_SELF: Option<Self>;\n }\n \n impl SelfType for u64 {\n     const SELF: Self = 16;\n+    const WRAPPED_SELF: Option<Self> = Some(20);\n }\n \n impl SelfType for AtomicUsize {\n     // this (interior mutable `Self` const) exists in `parking_lot`.\n     // `const_trait_impl` will replace it in the future, hopefully.\n     const SELF: Self = AtomicUsize::new(17); //~ ERROR interior mutable\n+    const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21)); //~ ERROR interior mutable\n }\n \n // Even though a constant contains a generic type, if it also have a interior mutable type,"}, {"sha": "5cb10be88d89cde900cfaa62c2861852dd7bde8a", "filename": "tests/ui/declare_interior_mutable_const.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5af360bb2de24235d2873e926d0b6f21135ae38/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5af360bb2de24235d2873e926d0b6f21135ae38/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.stderr?ref=d5af360bb2de24235d2873e926d0b6f21135ae38", "patch": "@@ -77,28 +77,34 @@ LL |     const BOUNDED: T::ToBeBounded; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:135:5\n+  --> $DIR/declare_interior_mutable_const.rs:140:5\n    |\n LL |     const SELF: Self = AtomicUsize::new(17); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:143:5\n+  --> $DIR/declare_interior_mutable_const.rs:141:5\n+   |\n+LL |     const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21)); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/declare_interior_mutable_const.rs:149:5\n    |\n LL |     const INDIRECT: Cell<*const T>; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:159:5\n+  --> $DIR/declare_interior_mutable_const.rs:165:5\n    |\n LL |     const ATOMIC: AtomicUsize = AtomicUsize::new(18); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:165:5\n+  --> $DIR/declare_interior_mutable_const.rs:171:5\n    |\n LL |     const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n "}]}