{"sha": "57d50299a7621d652fc668045d8f85e5703514d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZDUwMjk5YTc2MjFkNjUyZmM2NjgwNDVkOGY4NWU1NzAzNTE0ZDY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-07-26T21:21:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-26T21:21:13Z"}, "message": "Rollup merge of #35009 - GuillaumeGomez:dir_entry_doc, r=steveklabnik\n\nDir entry doc\n\nPart of #29356.\n\nr? @steveklabnik", "tree": {"sha": "c6bfde53b249d1d9891b7f568ff93124244db649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6bfde53b249d1d9891b7f568ff93124244db649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d50299a7621d652fc668045d8f85e5703514d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d50299a7621d652fc668045d8f85e5703514d6", "html_url": "https://github.com/rust-lang/rust/commit/57d50299a7621d652fc668045d8f85e5703514d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d50299a7621d652fc668045d8f85e5703514d6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905e35f30b70776dd6360c5c03c5608286c46636", "url": "https://api.github.com/repos/rust-lang/rust/commits/905e35f30b70776dd6360c5c03c5608286c46636", "html_url": "https://github.com/rust-lang/rust/commit/905e35f30b70776dd6360c5c03c5608286c46636"}, {"sha": "16699635bc467b0940c11675dd73e7e444088c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16699635bc467b0940c11675dd73e7e444088c4e", "html_url": "https://github.com/rust-lang/rust/commit/16699635bc467b0940c11675dd73e7e444088c4e"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "c1a48aea1edcfd4a2db2b6b7ec394ff0727f7611", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 84, "deletions": 12, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/57d50299a7621d652fc668045d8f85e5703514d6/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d50299a7621d652fc668045d8f85e5703514d6/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=57d50299a7621d652fc668045d8f85e5703514d6", "patch": "@@ -58,28 +58,37 @@ pub struct File {\n \n /// Metadata information about a file.\n ///\n-/// This structure is returned from the `metadata` function or method and\n+/// This structure is returned from the [`metadata`] function or method and\n /// represents known metadata about a file such as its permissions, size,\n /// modification times, etc.\n+///\n+/// [`metadata`]: fn.metadata.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Metadata(fs_imp::FileAttr);\n \n /// Iterator over the entries in a directory.\n ///\n-/// This iterator is returned from the `read_dir` function of this module and\n-/// will yield instances of `io::Result<DirEntry>`. Through a `DirEntry`\n+/// This iterator is returned from the [`read_dir`] function of this module and\n+/// will yield instances of `io::Result<DirEntry>`. Through a [`DirEntry`]\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n+/// [`read_dir`]: fn.read_dir.html\n+/// [`DirEntry`]: struct.DirEntry.html\n+///\n /// # Errors\n ///\n-/// This `io::Result` will be an `Err` if there's some sort of intermittent\n+/// This [`io::Result`] will be an `Err` if there's some sort of intermittent\n /// IO error during iteration.\n+///\n+/// [`io::Result`]: ../io/type.Result.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ReadDir(fs_imp::ReadDir);\n \n-/// Entries returned by the `ReadDir` iterator.\n+/// Entries returned by the [`ReadDir`] iterator.\n+///\n+/// [`ReadDir`]: struct.ReadDir.html\n ///\n /// An instance of `DirEntry` represents an entry inside of a directory on the\n /// filesystem. Each entry can be inspected via methods to learn about the full\n@@ -89,17 +98,23 @@ pub struct DirEntry(fs_imp::DirEntry);\n \n /// Options and flags which can be used to configure how a file is opened.\n ///\n-/// This builder exposes the ability to configure how a `File` is opened and\n-/// what operations are permitted on the open file. The `File::open` and\n-/// `File::create` methods are aliases for commonly used options using this\n+/// This builder exposes the ability to configure how a [`File`] is opened and\n+/// what operations are permitted on the open file. The [`File::open`] and\n+/// [`File::create`] methods are aliases for commonly used options using this\n /// builder.\n ///\n-/// Generally speaking, when using `OpenOptions`, you'll first call `new()`,\n-/// then chain calls to methods to set each option, then call `open()`, passing\n-/// the path of the file you're trying to open. This will give you a\n+/// [`File`]: struct.File.html\n+/// [`File::open`]: struct.File.html#method.open\n+/// [`File::create`]: struct.File.html#method.create\n+///\n+/// Generally speaking, when using `OpenOptions`, you'll first call [`new()`],\n+/// then chain calls to methods to set each option, then call [`open()`],\n+/// passing the path of the file you're trying to open. This will give you a\n /// [`io::Result`][result] with a [`File`][file] inside that you can further\n /// operate on.\n ///\n+/// [`new()`]: struct.OpenOptions.html#method.new\n+/// [`open()`]: struct.OpenOptions.html#method.open\n /// [result]: ../io/type.Result.html\n /// [file]: struct.File.html\n ///\n@@ -131,10 +146,12 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n \n /// Representation of the various permissions on a file.\n ///\n-/// This module only currently provides one bit of information, `readonly`,\n+/// This module only currently provides one bit of information, [`readonly`],\n /// which is exposed on all currently supported platforms. Unix-specific\n /// functionality, such as mode bits, is available through the\n /// `os::unix::PermissionsExt` trait.\n+///\n+/// [`readonly`]: struct.Permissions.html#method.readonly\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Permissions(fs_imp::FilePermissions);\n@@ -829,6 +846,26 @@ impl DirEntry {\n     /// On Windows this function is cheap to call (no extra system calls\n     /// needed), but on Unix platforms this function is the equivalent of\n     /// calling `symlink_metadata` on the path.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             if let Ok(metadata) = entry.metadata() {\n+    ///                 // Now let's show our entry's permissions!\n+    ///                 println!(\"{:?}: {:?}\", entry.path(), metadata.permissions());\n+    ///             } else {\n+    ///                 println!(\"Couldn't get metadata for {:?}\", entry.path());\n+    ///             }\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn metadata(&self) -> io::Result<Metadata> {\n         self.0.metadata().map(Metadata)\n@@ -844,13 +881,48 @@ impl DirEntry {\n     /// On Windows and most Unix platforms this function is free (no extra\n     /// system calls needed), but some Unix platforms may require the equivalent\n     /// call to `symlink_metadata` to learn about the target file type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             if let Ok(file_type) = entry.file_type() {\n+    ///                 // Now let's show our entry's file type!\n+    ///                 println!(\"{:?}: {:?}\", entry.path(), file_type);\n+    ///             } else {\n+    ///                 println!(\"Couldn't get file type for {:?}\", entry.path());\n+    ///             }\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         self.0.file_type().map(FileType)\n     }\n \n     /// Returns the bare file name of this directory entry without any other\n     /// leading path component.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             println!(\"{:?}\", entry.file_name());\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_name(&self) -> OsString {\n         self.0.file_name()"}, {"sha": "54340773a42b52e5bb672e41edde061cc487f769", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57d50299a7621d652fc668045d8f85e5703514d6/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d50299a7621d652fc668045d8f85e5703514d6/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=57d50299a7621d652fc668045d8f85e5703514d6", "patch": "@@ -196,6 +196,22 @@ impl FileTypeExt for fs::FileType {\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n     /// structure.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::fs::DirEntryExt;\n+    ///\n+    /// if let Ok(entries) = fs::read_dir(\".\") {\n+    ///     for entry in entries {\n+    ///         if let Ok(entry) = entry {\n+    ///             // Here, `entry` is a `DirEntry`.\n+    ///             println!(\"{:?}: {}\", entry.file_name(), entry.ino());\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     fn ino(&self) -> u64;\n }"}]}