{"sha": "6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMGNmYmNhYzI5NGZhYWIyYjhiY2Q5NWEwNGNkYTA0MjEwMWEyZDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-15T19:46:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-15T19:46:43Z"}, "message": "Rollup merge of #32923 - jseyfried:fix_hygiene, r=nrc\n\nFix macro hygiene bug\n\nThis fixes #32922 (EDIT: and fixes #31856), macro hygiene bugs.\nIt is a [breaking-change]. For example, the following would break:\n```rust\nfn main() {\n    let x = true;\n    macro_rules! foo { () => {\n        let x = 0;\n        macro_rules! bar { () => {x} }\n        let _: bool = bar!();\n        //^ `bar!()` used to resolve the first `x` (a bool),\n        //| but will now resolve to the second x (an i32).\n    }}\n    foo! {};\n}\n```\n\nr? @nrc", "tree": {"sha": "9960209af7689edfe181a46e2958ccc461e06c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9960209af7689edfe181a46e2958ccc461e06c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "html_url": "https://github.com/rust-lang/rust/commit/6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0cfbcac294faab2b8bcd95a04cda042101a2d8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc7e95a964ece830caf66ad537e89ae6fb397a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc7e95a964ece830caf66ad537e89ae6fb397a6", "html_url": "https://github.com/rust-lang/rust/commit/ccc7e95a964ece830caf66ad537e89ae6fb397a6"}, {"sha": "ca1d29c4debb5a58d9c2a9322eea740ca558ade5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1d29c4debb5a58d9c2a9322eea740ca558ade5", "html_url": "https://github.com/rust-lang/rust/commit/ca1d29c4debb5a58d9c2a9322eea740ca558ade5"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "cd7b0fcfb004450cb04df6642fdddea5eebdf22e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a0cfbcac294faab2b8bcd95a04cda042101a2d8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0cfbcac294faab2b8bcd95a04cda042101a2d8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "patch": "@@ -504,6 +504,13 @@ pub fn expand_item_mac(it: P<ast::Item>,\n \n /// Expand a stmt\n fn expand_stmt(stmt: Stmt, fld: &mut MacroExpander) -> SmallVector<Stmt> {\n+    // perform all pending renames\n+    let stmt = {\n+        let pending_renames = &mut fld.cx.syntax_env.info().pending_renames;\n+        let mut rename_fld = IdentRenamer{renames:pending_renames};\n+        rename_fld.fold_stmt(stmt).expect_one(\"rename_fold didn't return one value\")\n+    };\n+\n     let (mac, style, attrs) = match stmt.node {\n         StmtKind::Mac(mac, style, attrs) => (mac, style, attrs),\n         _ => return expand_non_macro_stmt(stmt, fld)\n@@ -717,14 +724,8 @@ pub fn expand_block(blk: P<Block>, fld: &mut MacroExpander) -> P<Block> {\n pub fn expand_block_elts(b: P<Block>, fld: &mut MacroExpander) -> P<Block> {\n     b.map(|Block {id, stmts, expr, rules, span}| {\n         let new_stmts = stmts.into_iter().flat_map(|x| {\n-            // perform all pending renames\n-            let renamed_stmt = {\n-                let pending_renames = &mut fld.cx.syntax_env.info().pending_renames;\n-                let mut rename_fld = IdentRenamer{renames:pending_renames};\n-                rename_fld.fold_stmt(x).expect_one(\"rename_fold didn't return one value\")\n-            };\n-            // expand macros in the statement\n-            fld.fold_stmt(renamed_stmt).into_iter()\n+            // perform pending renames and expand macros in the statement\n+            fld.fold_stmt(x).into_iter()\n         }).collect();\n         let new_expr = expr.map(|x| {\n             let expr = {"}, {"sha": "491c087c101defeb6d093d8e19f358487a0ea17b", "filename": "src/test/compile-fail/issue-32922.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6a0cfbcac294faab2b8bcd95a04cda042101a2d8/src%2Ftest%2Fcompile-fail%2Fissue-32922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0cfbcac294faab2b8bcd95a04cda042101a2d8/src%2Ftest%2Fcompile-fail%2Fissue-32922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32922.rs?ref=6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+macro_rules! foo { () => {\n+    let x = 1;\n+    macro_rules! bar { () => {x} }\n+    let _ = bar!();\n+}}\n+\n+macro_rules! bar { // test issue #31856\n+    ($n:ident) => (\n+        let a = 1;\n+        let $n = a;\n+    )\n+}\n+\n+macro_rules! baz {\n+    ($i:ident) => {\n+        let mut $i = 2;\n+        $i = $i + 1;\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    foo! {};\n+    bar! {};\n+\n+    let mut a = true;\n+    baz!(a);\n+}"}]}