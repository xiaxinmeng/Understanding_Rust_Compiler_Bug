{"sha": "c34ada7cca0607831dfae955214bc0b95f2ec312", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNGFkYTdjY2EwNjA3ODMxZGZhZTk1NTIxNGJjMGI5NWYyZWMzMTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-14T15:53:36Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-14T15:53:36Z"}, "message": "Fix foreign type handling", "tree": {"sha": "797b24843d7a5ce1bf79a20918f6ea715468d17e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/797b24843d7a5ce1bf79a20918f6ea715468d17e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34ada7cca0607831dfae955214bc0b95f2ec312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34ada7cca0607831dfae955214bc0b95f2ec312", "html_url": "https://github.com/rust-lang/rust/commit/c34ada7cca0607831dfae955214bc0b95f2ec312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34ada7cca0607831dfae955214bc0b95f2ec312/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b267995f397e84da051e5620e8b200a3e27f992b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b267995f397e84da051e5620e8b200a3e27f992b", "html_url": "https://github.com/rust-lang/rust/commit/b267995f397e84da051e5620e8b200a3e27f992b"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "fe50d2a2dc490d32f1939016edf7c3940777dc7e", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c34ada7cca0607831dfae955214bc0b95f2ec312", "patch": "@@ -365,6 +365,7 @@ fn trans_stmt<'tcx>(\n                 Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n                     let operand = trans_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n+                    let to_ty = fx.monomorphize(to_ty);\n \n                     fn is_fat_ptr<'tcx>(\n                         fx: &FunctionCx<'_, 'tcx, impl Backend>,\n@@ -375,9 +376,7 @@ fn trans_stmt<'tcx>(\n                                 |ty::TypeAndMut {\n                                      ty: pointee_ty,\n                                      mutbl: _,\n-                                 }| {\n-                                    fx.layout_of(pointee_ty).is_unsized()\n-                                },\n+                                 }| has_ptr_meta(fx.tcx, pointee_ty),\n                             )\n                             .unwrap_or(false)\n                     }"}, {"sha": "2044930560973ea947d3526c1f806893800809dd", "filename": "src/common.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=c34ada7cca0607831dfae955214bc0b95f2ec312", "patch": "@@ -60,18 +60,28 @@ pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types:\n             FloatTy::F64 => types::F64,\n         },\n         ty::FnPtr(_) => pointer_ty(tcx),\n-        ty::RawPtr(TypeAndMut { ty, mutbl: _ }) | ty::Ref(_, ty, _) => {\n-            if ty.is_sized(tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n-                pointer_ty(tcx)\n-            } else {\n+        ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl: _ }) | ty::Ref(_, pointee_ty, _) => {\n+            if has_ptr_meta(tcx, pointee_ty) {\n                 return None;\n+            } else {\n+                pointer_ty(tcx)\n             }\n         }\n         ty::Param(_) => bug!(\"ty param {:?}\", ty),\n         _ => return None,\n     })\n }\n \n+/// Is a pointer to this type a fat ptr?\n+pub fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    let ptr_ty = tcx.mk_ptr(TypeAndMut { ty, mutbl: rustc::hir::Mutability::MutImmutable });\n+    match &tcx.layout_of(ParamEnv::reveal_all().and(ptr_ty)).unwrap().abi {\n+        Abi::Scalar(_) => false,\n+        Abi::ScalarPair(_, _) => true,\n+        abi => unreachable!(\"Abi of ptr to {:?} is {:?}???\", ty, abi),\n+    }\n+}\n+\n pub fn codegen_select(bcx: &mut FunctionBuilder, cond: Value, lhs: Value, rhs: Value) -> Value {\n     let lhs_ty = bcx.func.dfg.value_type(lhs);\n     let rhs_ty = bcx.func.dfg.value_type(rhs);"}, {"sha": "442ff48550c7117be36375c8e0c401ce01cf677f", "filename": "src/num.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=c34ada7cca0607831dfae955214bc0b95f2ec312", "patch": "@@ -347,14 +347,9 @@ pub fn trans_ptr_binop<'tcx>(\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n ) -> CValue<'tcx> {\n-    let not_fat = match in_lhs.layout().ty.sty {\n-        ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => {\n-            ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all())\n-        }\n-        ty::FnPtr(..) => true,\n-        _ => bug!(\"trans_ptr_binop on non ptr\"),\n-    };\n-    if not_fat {\n+    let pointee_ty = in_lhs.layout().ty.builtin_deref(true).unwrap().ty;\n+\n+    if !has_ptr_meta(fx.tcx, pointee_ty) {\n         match bin_op {\n             BinOp::Eq | BinOp::Lt | BinOp::Le | BinOp::Ne | BinOp::Ge | BinOp::Gt => {\n                 let lhs = in_lhs.load_scalar(fx);\n@@ -364,7 +359,6 @@ pub fn trans_ptr_binop<'tcx>(\n             }\n             BinOp::Offset => {\n                 let (base, offset) = (in_lhs, in_rhs.load_scalar(fx));\n-                let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n                 let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n                 let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n                 let base_val = base.load_scalar(fx);"}, {"sha": "caf41bd1425a008dfdbedde3217c1761e4269cd7", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34ada7cca0607831dfae955214bc0b95f2ec312/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=c34ada7cca0607831dfae955214bc0b95f2ec312", "patch": "@@ -136,7 +136,7 @@ impl<'tcx> CValue<'tcx> {\n             CValueInner::ByRef(addr) => {\n                 let (a_scalar, b_scalar) = match &layout.abi {\n                     layout::Abi::ScalarPair(a, b) => (a, b),\n-                    _ => unreachable!(),\n+                    _ => unreachable!(\"load_scalar_pair({:?})\", self),\n                 };\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n                 let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar.clone());\n@@ -496,26 +496,26 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub fn place_deref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CPlace<'tcx> {\n         let inner_layout = fx.layout_of(self.layout().ty.builtin_deref(true).unwrap().ty);\n-        if !inner_layout.is_unsized() {\n-            CPlace::for_addr(self.to_cvalue(fx).load_scalar(fx), inner_layout)\n-        } else {\n+        if has_ptr_meta(fx.tcx, inner_layout.ty) {\n             let (addr, extra) = self.to_cvalue(fx).load_scalar_pair(fx);\n             CPlace::for_addr_with_extra(addr, extra, inner_layout)\n+        } else {\n+            CPlace::for_addr(self.to_cvalue(fx).load_scalar(fx), inner_layout)\n         }\n     }\n \n     pub fn write_place_ref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n-        if !self.layout().is_unsized() {\n-            let ptr = CValue::by_val(self.to_addr(fx), dest.layout());\n-            dest.write_cvalue(fx, ptr);\n-        } else {\n+        if has_ptr_meta(fx.tcx, self.layout().ty) {\n             let (value, extra) = self.to_addr_maybe_unsized(fx);\n             let ptr = CValue::by_val_pair(\n                 value,\n                 extra.expect(\"unsized type without metadata\"),\n                 dest.layout(),\n             );\n             dest.write_cvalue(fx, ptr);\n+        } else {\n+            let ptr = CValue::by_val(self.to_addr(fx), dest.layout());\n+            dest.write_cvalue(fx, ptr);\n         }\n     }\n "}]}