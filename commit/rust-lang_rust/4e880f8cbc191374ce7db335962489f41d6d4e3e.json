{"sha": "4e880f8cbc191374ce7db335962489f41d6d4e3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODgwZjhjYmMxOTEzNzRjZTdkYjMzNTk2MjQ4OWY0MWQ2ZDRlM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T07:11:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T07:11:01Z"}, "message": "Auto merge of #88214 - notriddle:notriddle/for-loop-span-drop-temps-mut, r=nagisa\n\nrustc: use more correct span data in for loop desugaring\n\nFixes #82462\n\nBefore:\n\n      help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n         |\n      LL |     for x in DroppingSlice(&*v).iter(); {\n         |                                       +\n\nAfter:\n\n      help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n         |\n      LL |     };\n         |      +\n\nThis seems like a reasonable fix: since the desugared \"expr_drop_temps_mut\" contains the entire desugared loop construct, its span should contain the entire loop construct as well.", "tree": {"sha": "f25dad5a8356801beab8d2628bc9d6f613625976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25dad5a8356801beab8d2628bc9d6f613625976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e880f8cbc191374ce7db335962489f41d6d4e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e880f8cbc191374ce7db335962489f41d6d4e3e", "html_url": "https://github.com/rust-lang/rust/commit/4e880f8cbc191374ce7db335962489f41d6d4e3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e880f8cbc191374ce7db335962489f41d6d4e3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22719efcc570b043f2e519d6025e5f36eab38fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/22719efcc570b043f2e519d6025e5f36eab38fe2", "html_url": "https://github.com/rust-lang/rust/commit/22719efcc570b043f2e519d6025e5f36eab38fe2"}, {"sha": "543e601a9d5e0efbb3fff803a0427efcceb0fef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/543e601a9d5e0efbb3fff803a0427efcceb0fef1", "html_url": "https://github.com/rust-lang/rust/commit/543e601a9d5e0efbb3fff803a0427efcceb0fef1"}], "stats": {"total": 95, "additions": 82, "deletions": 13}, "files": [{"sha": "26b1052e0de27246a00c7b5b0be18c5c1a348d19", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -1450,8 +1450,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             )\n         };\n \n+        // #82462: to correctly diagnose borrow errors, the block that contains\n+        // the iter expr needs to have a span that covers the loop body.\n+        let desugared_full_span =\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e.span, None);\n+\n         let match_expr = self.arena.alloc(self.expr_match(\n-            desugared_span,\n+            desugared_full_span,\n             into_iter_expr,\n             arena_vec![self; iter_arm],\n             hir::MatchSource::ForLoopDesugar,\n@@ -1465,7 +1470,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // surrounding scope of the `match` since the `match` is not a terminating scope.\n         //\n         // Also, add the attributes to the outer returned expr node.\n-        self.expr_drop_temps_mut(desugared_span, match_expr, attrs.into())\n+        self.expr_drop_temps_mut(desugared_full_span, match_expr, attrs.into())\n     }\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:"}, {"sha": "02f6e55a9a8b6b56e098eaa3c01eaf22ebfbee56", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -80,7 +80,7 @@\n -         StorageDead(_7);                 // scope 3 at $DIR/remove_storage_markers.rs:8:18: 8:19\n -         StorageDead(_6);                 // scope 2 at $DIR/remove_storage_markers.rs:10:5: 10:6\n -         StorageDead(_4);                 // scope 1 at $DIR/remove_storage_markers.rs:10:5: 10:6\n--         StorageDead(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:8:18: 8:19\n+-         StorageDead(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:10:5: 10:6\n -         StorageDead(_1);                 // scope 0 at $DIR/remove_storage_markers.rs:11:1: 11:2\n           return;                          // scope 0 at $DIR/remove_storage_markers.rs:11:2: 11:2\n       }"}, {"sha": "10497c30e64f72b3e8c32e562622b95295725eac", "filename": "src/test/ui/borrowck/issue-82462.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -0,0 +1,22 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/issue-82462.rs:18:9\n+   |\n+LL |     for x in DroppingSlice(&*v).iter() {\n+   |              ------------------\n+   |              |               |\n+   |              |               immutable borrow occurs here\n+   |              a temporary with access to the immutable borrow is created here ...\n+LL |         v.push(*x);\n+   |         ^ mutable borrow occurs here\n+LL |         break;\n+LL |     }\n+   |     - ... and the immutable borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `DroppingSlice`\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     };\n+   |      +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "5a3c64255cc64a1604625314b0b2b5897c815de2", "filename": "src/test/ui/borrowck/issue-82462.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.rs?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -0,0 +1,21 @@\n+struct DroppingSlice<'a>(&'a [i32]);\n+\n+impl Drop for DroppingSlice<'_> {\n+    fn drop(&mut self) {\n+        println!(\"hi from slice\");\n+    }\n+}\n+\n+impl DroppingSlice<'_> {\n+    fn iter(&self) -> std::slice::Iter<'_, i32> {\n+        self.0.iter()\n+    }\n+}\n+\n+fn main() {\n+    let mut v = vec![1, 2, 3, 4];\n+    for x in DroppingSlice(&*v).iter() {\n+        v.push(*x); //~ERROR\n+        break;\n+    }\n+}"}, {"sha": "a2c291f77979221b98788db63509df88d23138c4", "filename": "src/test/ui/borrowck/issue-82462.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.stderr?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -0,0 +1,22 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/issue-82462.rs:18:9\n+   |\n+LL |     for x in DroppingSlice(&*v).iter() {\n+   |              ------------------\n+   |              |               |\n+   |              |               immutable borrow occurs here\n+   |              a temporary with access to the immutable borrow is created here ...\n+LL |         v.push(*x);\n+   |         ^^^^^^^^^^ mutable borrow occurs here\n+LL |         break;\n+LL |     }\n+   |     - ... and the immutable borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `DroppingSlice`\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     };\n+   |      +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "12ffe7a136457d67219c83c78a2f443cae616b6b", "filename": "src/tools/clippy/clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -15,7 +15,6 @@ pub(super) fn check<'tcx>(\n     pat: &'tcx Pat<'_>,\n     arg: &'tcx Expr<'_>,\n     body: &'tcx Expr<'_>,\n-    expr: &'tcx Expr<'_>,\n ) {\n     let pat_span = pat.span;\n \n@@ -43,7 +42,7 @@ pub(super) fn check<'tcx>(\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,\n-                    expr.span,\n+                    arg_span,\n                     &format!(\"you seem to want to iterate on a map's {}s\", kind),\n                     |diag| {\n                         let map = sugg::Sugg::hir(cx, arg, \"map\");"}, {"sha": "e640c62ebdaceabc102d798869f804e7a1d203b0", "filename": "src/tools/clippy/clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -5,12 +5,12 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, expr: &Expr<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n     if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n             ITER_NEXT_LOOP,\n-            expr.span,\n+            arg.span,\n             \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n             probably not what you want\",\n         );"}, {"sha": "5df1b79640164302d2a8532175486208942569e4", "filename": "src/tools/clippy/clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -616,15 +616,15 @@ fn check_for_loop<'tcx>(\n         needless_range_loop::check(cx, pat, arg, body, expr);\n         explicit_counter_loop::check(cx, pat, arg, body, expr);\n     }\n-    check_for_loop_arg(cx, pat, arg, expr);\n-    for_kv_map::check(cx, pat, arg, body, expr);\n+    check_for_loop_arg(cx, pat, arg);\n+    for_kv_map::check(cx, pat, arg, body);\n     mut_range_bound::check(cx, arg, body);\n     single_element_loop::check(cx, pat, arg, body, expr);\n     same_item_push::check(cx, pat, arg, body, expr);\n     manual_flatten::check(cx, pat, arg, body, span);\n }\n \n-fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n+fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n@@ -637,7 +637,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, expr:\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n             },\n             \"next\" => {\n-                next_loop_linted = iter_next_loop::check(cx, arg, expr);\n+                next_loop_linted = iter_next_loop::check(cx, arg);\n             },\n             _ => {},\n         }"}, {"sha": "7157b80118558b889cc41556e071dd71891a903e", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e880f8cbc191374ce7db335962489f41d6d4e3e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=4e880f8cbc191374ce7db335962489f41d6d4e3e", "patch": "@@ -144,7 +144,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n-                        expr.span,\n+                        arg.span,\n                         &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg(\n@@ -170,7 +170,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n-                        expr.span,\n+                        arg.span,\n                         &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg("}]}