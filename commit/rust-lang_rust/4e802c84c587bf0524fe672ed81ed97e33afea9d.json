{"sha": "4e802c84c587bf0524fe672ed81ed97e33afea9d", "node_id": "C_kwDOAAsO6NoAKDRlODAyYzg0YzU4N2JmMDUyNGZlNjcyZWQ4MWVkOTdlMzNhZmVhOWQ", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-05-15T14:49:09Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-07T02:08:07Z"}, "message": "Remove intrinsics that were adding by the updated script", "tree": {"sha": "4c603ae57aa7a1324d63cb01f3b7db0b2d5790ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c603ae57aa7a1324d63cb01f3b7db0b2d5790ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e802c84c587bf0524fe672ed81ed97e33afea9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e802c84c587bf0524fe672ed81ed97e33afea9d", "html_url": "https://github.com/rust-lang/rust/commit/4e802c84c587bf0524fe672ed81ed97e33afea9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e802c84c587bf0524fe672ed81ed97e33afea9d/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3594044327ea6a426e0b95dd3ffee725089430", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3594044327ea6a426e0b95dd3ffee725089430", "html_url": "https://github.com/rust-lang/rust/commit/3b3594044327ea6a426e0b95dd3ffee725089430"}], "stats": {"total": 132, "additions": 47, "deletions": 85}, "files": [{"sha": "a4cd05a13c706f72e90cd31fbe4764ece4f88477", "filename": "src/intrinsic/llvm.rs", "status": "modified", "additions": 47, "deletions": 85, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4e802c84c587bf0524fe672ed81ed97e33afea9d/src%2Fintrinsic%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e802c84c587bf0524fe672ed81ed97e33afea9d/src%2Fintrinsic%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fllvm.rs?ref=4e802c84c587bf0524fe672ed81ed97e33afea9d", "patch": "@@ -107,43 +107,53 @@ pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc\n \n                     args = new_args.into();\n                 },\n-                    \"__builtin_ia32_addps512_mask\" | \"__builtin_ia32_addpd512_mask\"\n-                        | \"__builtin_ia32_subps512_mask\" | \"__builtin_ia32_subpd512_mask\"\n-                        | \"__builtin_ia32_mulps512_mask\" | \"__builtin_ia32_mulpd512_mask\"\n-                        | \"__builtin_ia32_divps512_mask\" | \"__builtin_ia32_divpd512_mask\" => {\n-                        let mut new_args = args.to_vec();\n-                        let last_arg = new_args.pop().expect(\"last arg\");\n-                        let arg3_type = gcc_func.get_param_type(2);\n-                        let undefined = builder.current_func().new_local(None, arg3_type, \"undefined_for_intrinsic\").to_rvalue();\n-                        new_args.push(undefined);\n-                        let arg4_type = gcc_func.get_param_type(3);\n-                        let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n-                        new_args.push(minus_one);\n-                        new_args.push(last_arg);\n-                        args = new_args.into();\n-                    },\n-                    \"__builtin_ia32_vfmaddsubps512_mask\" | \"__builtin_ia32_vfmaddsubpd512_mask\" => {\n-                        let mut new_args = args.to_vec();\n-                        let last_arg = new_args.pop().expect(\"last arg\");\n-                        let arg4_type = gcc_func.get_param_type(3);\n-                        let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n-                        new_args.push(minus_one);\n-                        new_args.push(last_arg);\n-                        args = new_args.into();\n-                    },\n-                    \"__builtin_ia32_cvtdq2ps512_mask\" | \"__builtin_ia32_cvtudq2ps512_mask\" => {\n-                        let mut new_args = args.to_vec();\n-                        let last_arg = new_args.pop().expect(\"last arg\");\n-                        let arg2_type = gcc_func.get_param_type(1);\n-                        let undefined = builder.current_func().new_local(None, arg2_type, \"undefined_for_intrinsic\").to_rvalue();\n-                        new_args.push(undefined);\n-                        let arg3_type = gcc_func.get_param_type(2);\n-                        let minus_one = builder.context.new_rvalue_from_int(arg3_type, -1);\n-                        new_args.push(minus_one);\n-                        new_args.push(last_arg);\n-                        args = new_args.into();\n-                    },\n-                    _ => (),\n+                \"__builtin_ia32_addps512_mask\" | \"__builtin_ia32_addpd512_mask\"\n+                    | \"__builtin_ia32_subps512_mask\" | \"__builtin_ia32_subpd512_mask\"\n+                    | \"__builtin_ia32_mulps512_mask\" | \"__builtin_ia32_mulpd512_mask\"\n+                    | \"__builtin_ia32_divps512_mask\" | \"__builtin_ia32_divpd512_mask\" => {\n+                    let mut new_args = args.to_vec();\n+                    let last_arg = new_args.pop().expect(\"last arg\");\n+                    let arg3_type = gcc_func.get_param_type(2);\n+                    let undefined = builder.current_func().new_local(None, arg3_type, \"undefined_for_intrinsic\").to_rvalue();\n+                    new_args.push(undefined);\n+                    let arg4_type = gcc_func.get_param_type(3);\n+                    let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n+                    new_args.push(minus_one);\n+                    new_args.push(last_arg);\n+                    args = new_args.into();\n+                },\n+                \"__builtin_ia32_prold512_mask\" => {\n+                    let mut new_args = args.to_vec();\n+                    let arg3_type = gcc_func.get_param_type(2);\n+                    let undefined = builder.current_func().new_local(None, arg3_type, \"undefined_for_intrinsic\").to_rvalue();\n+                    new_args.push(undefined);\n+                    let arg4_type = gcc_func.get_param_type(3);\n+                    let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n+                    new_args.push(minus_one);\n+                    args = new_args.into();\n+                },\n+                \"__builtin_ia32_vfmaddsubps512_mask\" | \"__builtin_ia32_vfmaddsubpd512_mask\" => {\n+                    let mut new_args = args.to_vec();\n+                    let last_arg = new_args.pop().expect(\"last arg\");\n+                    let arg4_type = gcc_func.get_param_type(3);\n+                    let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n+                    new_args.push(minus_one);\n+                    new_args.push(last_arg);\n+                    args = new_args.into();\n+                },\n+                \"__builtin_ia32_cvtdq2ps512_mask\" | \"__builtin_ia32_cvtudq2ps512_mask\" => {\n+                    let mut new_args = args.to_vec();\n+                    let last_arg = new_args.pop().expect(\"last arg\");\n+                    let arg2_type = gcc_func.get_param_type(1);\n+                    let undefined = builder.current_func().new_local(None, arg2_type, \"undefined_for_intrinsic\").to_rvalue();\n+                    new_args.push(undefined);\n+                    let arg3_type = gcc_func.get_param_type(2);\n+                    let minus_one = builder.context.new_rvalue_from_int(arg3_type, -1);\n+                    new_args.push(minus_one);\n+                    new_args.push(last_arg);\n+                    args = new_args.into();\n+                },\n+                _ => (),\n         }\n     }\n \n@@ -202,18 +212,10 @@ pub fn intrinsic<'gcc, 'tcx>(name: &str, cx: &CodegenCx<'gcc, 'tcx>) -> Function\n         \"llvm.sqrt.v2f64\" => \"__builtin_ia32_sqrtpd\",\n         \"llvm.x86.avx512.pmul.dq.512\" => \"__builtin_ia32_pmuldq512_mask\",\n         \"llvm.x86.avx512.pmulu.dq.512\" => \"__builtin_ia32_pmuludq512_mask\",\n-        \"llvm.x86.avx512.mask.pmaxs.q.256\" => \"__builtin_ia32_pmaxsq256_mask\",\n-        \"llvm.x86.avx512.mask.pmaxs.q.128\" => \"__builtin_ia32_pmaxsq128_mask\",\n         \"llvm.x86.avx512.max.ps.512\" => \"__builtin_ia32_maxps512_mask\",\n         \"llvm.x86.avx512.max.pd.512\" => \"__builtin_ia32_maxpd512_mask\",\n-        \"llvm.x86.avx512.mask.pmaxu.q.256\" => \"__builtin_ia32_pmaxuq256_mask\",\n-        \"llvm.x86.avx512.mask.pmaxu.q.128\" => \"__builtin_ia32_pmaxuq128_mask\",\n-        \"llvm.x86.avx512.mask.pmins.q.256\" => \"__builtin_ia32_pminsq256_mask\",\n-        \"llvm.x86.avx512.mask.pmins.q.128\" => \"__builtin_ia32_pminsq128_mask\",\n         \"llvm.x86.avx512.min.ps.512\" => \"__builtin_ia32_minps512_mask\",\n         \"llvm.x86.avx512.min.pd.512\" => \"__builtin_ia32_minpd512_mask\",\n-        \"llvm.x86.avx512.mask.pminu.q.256\" => \"__builtin_ia32_pminuq256_mask\",\n-        \"llvm.x86.avx512.mask.pminu.q.128\" => \"__builtin_ia32_pminuq128_mask\",\n         \"llvm.fma.v16f32\" => \"__builtin_ia32_vfmaddps512_mask\",\n         \"llvm.fma.v8f64\" => \"__builtin_ia32_vfmaddpd512_mask\",\n         \"llvm.x86.avx512.vfmaddsub.ps.512\" => \"__builtin_ia32_vfmaddsubps512_mask\",\n@@ -236,46 +238,6 @@ pub fn intrinsic<'gcc, 'tcx>(name: &str, cx: &CodegenCx<'gcc, 'tcx>) -> Function\n         \"llvm.x86.avx512.vfmadd.pd.512\" => \"__builtin_ia32_vfmaddpd512_mask\",\n         \"llvm.x86.avx512.sitofp.round.v16f32.v16i32\" => \"__builtin_ia32_cvtdq2ps512_mask\",\n         \"llvm.x86.avx512.uitofp.round.v16f32.v16i32\" => \"__builtin_ia32_cvtudq2ps512_mask\",\n-        \"llvm.x86.avx512.mask.cvttps2dq.256\" => \"__builtin_ia32_cvttps2dq256_mask\",\n-        \"llvm.x86.avx512.mask.cvttps2dq.128\" => \"__builtin_ia32_cvttps2dq128_mask\",\n-        \"llvm.x86.avx512.mask.cvttpd2dq.256\" => \"__builtin_ia32_cvttpd2dq256_mask\",\n-        \"llvm.x86.avx512.mask.compress.d.512\" => \"__builtin_ia32_compresssi512_mask\",\n-        \"llvm.x86.avx512.mask.compress.d.256\" => \"__builtin_ia32_compresssi256_mask\",\n-        \"llvm.x86.avx512.mask.compress.d.128\" => \"__builtin_ia32_compresssi128_mask\",\n-        \"llvm.x86.avx512.mask.compress.q.512\" => \"__builtin_ia32_compressdi512_mask\",\n-        \"llvm.x86.avx512.mask.compress.q.256\" => \"__builtin_ia32_compressdi256_mask\",\n-        \"llvm.x86.avx512.mask.compress.q.128\" => \"__builtin_ia32_compressdi128_mask\",\n-        \"llvm.x86.avx512.mask.compress.ps.512\" => \"__builtin_ia32_compresssf512_mask\",\n-        \"llvm.x86.avx512.mask.compress.ps.256\" => \"__builtin_ia32_compresssf256_mask\",\n-        \"llvm.x86.avx512.mask.compress.ps.128\" => \"__builtin_ia32_compresssf128_mask\",\n-        \"llvm.x86.avx512.mask.compress.pd.512\" => \"__builtin_ia32_compressdf512_mask\",\n-        \"llvm.x86.avx512.mask.compress.pd.256\" => \"__builtin_ia32_compressdf256_mask\",\n-        \"llvm.x86.avx512.mask.compress.pd.128\" => \"__builtin_ia32_compressdf128_mask\",\n-        \"llvm.x86.avx512.mask.compress.store.d.512\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.d.256\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.d.128\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.q.512\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.q.256\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.q.128\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.ps.512\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.ps.256\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.ps.128\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.pd.512\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.pd.256\" => \"\",\n-        \"llvm.x86.avx512.mask.compress.store.pd.128\" => \"\",\n-        \"llvm.x86.avx512.mask.expand.d.512\" => \"\",\n-        \"llvm.x86.avx512.mask.expand.d.256\" => \"\",\n-        \"llvm.x86.avx512.mask.expand.d.128\" => \"\",\n-        \"llvm.x86.avx512.mask.expand.q.512\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n-        \"\" => \"\",\n \n         // The above doc points to unknown builtins for the following, so override them:\n         \"llvm.x86.avx2.gather.d.d\" => \"__builtin_ia32_gathersiv4si\","}]}