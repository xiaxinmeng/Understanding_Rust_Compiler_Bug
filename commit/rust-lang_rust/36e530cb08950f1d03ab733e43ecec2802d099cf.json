{"sha": "36e530cb08950f1d03ab733e43ecec2802d099cf", "node_id": "C_kwDOAAsO6NoAKDM2ZTUzMGNiMDg5NTBmMWQwM2FiNzMzZTQzZWNlYzI4MDJkMDk5Y2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-20T07:59:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-20T07:59:48Z"}, "message": "Auto merge of #100793 - matthiaskrgr:rollup-dy7rfdh, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #100186 (Mention `as_mut` alongside `as_ref` in borrowck error message)\n - #100383 (Mitigate stale data reads on SGX platform)\n - #100507 (suggest `once_cell::Lazy` for non-const statics)\n - #100617 (Suggest the right help message for as_ref)\n - #100667 (Migrate \"invalid variable declaration\" errors to SessionDiagnostic)\n - #100709 (Migrate typeck's `used` expected symbol diagnostic to `SessionDiagnostic`)\n - #100723 (Add the diagnostic translation lints to crates that don't emit them)\n - #100729 (Avoid zeroing a 1kb stack buffer on every call to `std::sys::windows::fill_utf16_buf`)\n - #100750 (improved diagnostic for function defined with `def`, `fun`, `func`, or `function` instead of `fn`)\n - #100763 (triagebot: Autolabel `A-rustdoc-json`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e065b491027f2d360e8085f023daffcbe49c89a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e065b491027f2d360e8085f023daffcbe49c89a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e530cb08950f1d03ab733e43ecec2802d099cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e530cb08950f1d03ab733e43ecec2802d099cf", "html_url": "https://github.com/rust-lang/rust/commit/36e530cb08950f1d03ab733e43ecec2802d099cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e530cb08950f1d03ab733e43ecec2802d099cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "html_url": "https://github.com/rust-lang/rust/commit/e1b28cd2f16bd5b832183d7968cae3bb9213e78d"}, {"sha": "60edec9ddf9f59c6e5ec86456070440031a87943", "url": "https://api.github.com/repos/rust-lang/rust/commits/60edec9ddf9f59c6e5ec86456070440031a87943", "html_url": "https://github.com/rust-lang/rust/commit/60edec9ddf9f59c6e5ec86456070440031a87943"}], "stats": {"total": 614, "additions": 476, "deletions": 138}, "files": [{"sha": "dde368e7b924fa870e29482e041b0d96bbce4f76", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -33,6 +33,8 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![no_std]\n #![forbid(unsafe_code)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate alloc;"}, {"sha": "98faacdc1fb59cb14fb6100ef4e610d319a5c1e9", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -19,6 +19,8 @@\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n #![feature(strict_provenance)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n use smallvec::SmallVec;\n "}, {"sha": "2426a0cb7dd10b67ea7a8f21e0912bbc190d5f52", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -19,6 +19,8 @@\n #![feature(slice_internals)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "bf094af5f7bb0910beec66e0b3d114457345943c", "filename": "compiler/rustc_ast_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n #![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(with_negative_coherence)]"}, {"sha": "683084cf09d443d3a8be50472b77b8892871da60", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1086,14 +1086,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ),\n                         );\n                     }\n-                    if is_option_or_result && maybe_reinitialized_locations_is_empty {\n-                        err.span_suggestion_verbose(\n-                            fn_call_span.shrink_to_lo(),\n-                            \"consider calling `.as_ref()` to borrow the type's contents\",\n-                            \"as_ref().\",\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n                     // Avoid pointing to the same function in multiple different\n                     // error messages.\n                     if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span) {\n@@ -1102,6 +1094,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n                         );\n                     }\n+                    if is_option_or_result && maybe_reinitialized_locations_is_empty {\n+                        err.span_label(\n+                            var_span,\n+                            \"help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\",\n+                        );\n+                    }\n                 }\n                 // Other desugarings takes &self, which cannot cause a move\n                 _ => {}"}, {"sha": "c9cfc1f3f469c8f3ce3d5598a14e97f61cbea19f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,6 +1,7 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use hir::def_id::LocalDefId;\n+use hir::ConstContext;\n use rustc_errors::{\n     error_code, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n };\n@@ -331,6 +332,10 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n             ccx.const_kind(),\n         ));\n \n+        if let ConstContext::Static(_) = ccx.const_kind() {\n+            err.note(\"consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\");\n+        }\n+\n         err\n     }\n }"}, {"sha": "c8b09cffe0136e0ef5cfb8b4d5c9a4262fb0c0ea", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -28,6 +28,8 @@\n #![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "bd424dd9d068580fdaf7935eaf72b3ebfe77abff", "filename": "compiler/rustc_error_codes/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,4 +1,6 @@\n #![deny(rustdoc::invalid_codeblock_attributes)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! This library is used to gather all error codes into one place,\n //! the goal being to make their maintenance easier.\n "}, {"sha": "2d378013dd053d86826b36f19b22ebe80a3ab8dc", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -32,3 +32,12 @@ parser_incorrect_use_of_await =\n parser_in_in_typo =\n     expected iterable, found keyword `in`\n     .suggestion = remove the duplicated `in`\n+\n+parser_invalid_variable_declaration =\n+    invalid variable declaration\n+\n+parser_switch_mut_let_order =\n+    switch the order of `mut` and `let`\n+parser_missing_let_before_mut = missing keyword\n+parser_use_let_not_auto = write `let` instead of `auto` to introduce a new variable\n+parser_use_let_not_var = write `let` instead of `var` to introduce a new variable"}, {"sha": "272731d9914cc4cb48df34369c03e0e86fa2c028", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -131,3 +131,5 @@ typeck_unused_extern_crate =\n typeck_extern_crate_not_idiomatic =\n     `extern crate` is not idiomatic in the new edition\n     .suggestion = convert it to a `{$msg_code}`\n+\n+typeck_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`"}, {"sha": "ee978f04be2a5db31b3bdeb42233e8be6b63170a", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,6 +1,8 @@\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;"}, {"sha": "e44c9291f84838c7f66a152b05b211ee4d0171ac", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -12,6 +12,8 @@\n //! symbol to the `accepted` or `removed` modules respectively.\n \n #![feature(once_cell)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n mod accepted;\n mod active;"}, {"sha": "63998bb6b00cf8467305edaad139b7d9d9fd80de", "filename": "compiler/rustc_fs_util/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use std::ffi::CString;\n use std::fs;\n use std::io;"}, {"sha": "3c1bb5532661aa20c4bdc454936ddf4fd0e4d2d5", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -273,6 +273,8 @@\n     html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n use LabelText::*;\n "}, {"sha": "7097f998bebda712288402632ecc1b25dc5e34f8", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -11,6 +11,8 @@\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "42663da8a3f9c173d400e46eca4660dcea8b0c5c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,4 +1,6 @@\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n use rustc_ast as ast;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};"}, {"sha": "aa34673de81d77063902c7575db6f8979223a626", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n #![feature(allow_internal_unstable)]\n #![feature(bench_black_box)]\n #![feature(extend_one)]"}, {"sha": "6993245c605ae950e9bc950b6ee62627269b7822", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -2079,7 +2079,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             diag.span_suggestion(\n                                 span,\n                                 *msg,\n-                                format!(\"{}.as_ref()\", snippet),\n+                                // HACK: fix issue# 100605, suggesting convert from &Option<T> to Option<&T>, remove the extra `&`\n+                                format!(\"{}.as_ref()\", snippet.trim_start_matches('&')),\n                                 Applicability::MachineApplicable,\n                             );\n                         }"}, {"sha": "178366f7d8045a9263ec22a7081bef423f103ffa", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -18,6 +18,8 @@\n //! lexeme types.\n //!\n //! [`rustc_parse::lexer`]: ../rustc_parse/lexer/index.html\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n // We want to be able to build this crate with a stable compiler, so no\n // `#![feature]` attributes should be added.\n "}, {"sha": "a826f599e9cd5f92e5384ba794c9c163bbf316c3", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,4 +1,6 @@\n #![feature(min_specialization)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "8542dcf5bf0fe4012215e4b58daeb2ee9f3508d3", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n \n // NOTE: This crate only exists to allow linking on mingw targets."}, {"sha": "458f5e87baeacff3d4d72e44cb95b8f5c2874ef0", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -38,6 +38,9 @@\n //! debugging, you can make changes inside those crates and quickly run main.rs\n //! to read the debug logs.\n \n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use std::env::{self, VarError};\n use std::fmt::{self, Display};\n use std::io;"}, {"sha": "e01d035767ba6d68e0f121fbf7472b5c1801787a", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -4,6 +4,8 @@\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_span)]\n #![allow(rustc::default_hash_types)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n #![recursion_limit = \"128\"]\n \n use synstructure::decl_derive;"}, {"sha": "744ec7e611402b15701c4d1186c1ea547c4ff464", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -334,6 +334,35 @@ struct InInTypo {\n     sugg_span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(parser::invalid_variable_declaration)]\n+pub struct InvalidVariableDeclaration {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sub: InvalidVariableDeclarationSub,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum InvalidVariableDeclarationSub {\n+    #[suggestion(\n+        parser::switch_mut_let_order,\n+        applicability = \"maybe-incorrect\",\n+        code = \"let mut\"\n+    )]\n+    SwitchMutLetOrder(#[primary_span] Span),\n+    #[suggestion(\n+        parser::missing_let_before_mut,\n+        applicability = \"machine-applicable\",\n+        code = \"let mut\"\n+    )]\n+    MissingLet(#[primary_span] Span),\n+    #[suggestion(parser::use_let_not_auto, applicability = \"machine-applicable\", code = \"let\")]\n+    UseLetNotAuto(#[primary_span] Span),\n+    #[suggestion(parser::use_let_not_var, applicability = \"machine-applicable\", code = \"let\")]\n+    UseLetNotVar(#[primary_span] Span),\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -611,6 +640,15 @@ impl<'a> Parser<'a> {\n                     appl,\n                 );\n             }\n+\n+            if [\"def\", \"fun\", \"func\", \"function\"].contains(&symbol.as_str()) {\n+                err.span_suggestion_short(\n+                    self.prev_token.span,\n+                    &format!(\"write `fn` instead of `{symbol}` to declare a function\"),\n+                    \"fn\",\n+                    appl,\n+                );\n+            }\n         }\n \n         // Add suggestion for a missing closing angle bracket if '>' is included in expected_tokens"}, {"sha": "875636bdc2879871ec9df2cbc299019cee647411", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,5 +1,7 @@\n use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;\n-use super::diagnostics::{AttemptLocalParseRecovery, Error};\n+use super::diagnostics::{\n+    AttemptLocalParseRecovery, Error, InvalidVariableDeclaration, InvalidVariableDeclarationSub,\n+};\n use super::expr::LhsExpr;\n use super::pat::RecoverComma;\n use super::path::PathStyle;\n@@ -58,28 +60,22 @@ impl<'a> Parser<'a> {\n         if self.token.is_keyword(kw::Mut) && self.is_keyword_ahead(1, &[kw::Let]) {\n             self.bump();\n             let mut_let_span = lo.to(self.token.span);\n-            self.struct_span_err(mut_let_span, \"invalid variable declaration\")\n-                .span_suggestion(\n-                    mut_let_span,\n-                    \"switch the order of `mut` and `let`\",\n-                    \"let mut\",\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+            self.sess.emit_err(InvalidVariableDeclaration {\n+                span: mut_let_span,\n+                sub: InvalidVariableDeclarationSub::SwitchMutLetOrder(mut_let_span),\n+            });\n         }\n \n         Ok(Some(if self.token.is_keyword(kw::Let) {\n             self.parse_local_mk(lo, attrs, capture_semi, force_collect)?\n         } else if self.is_kw_followed_by_ident(kw::Mut) {\n-            self.recover_stmt_local(lo, attrs, \"missing keyword\", \"let mut\")?\n+            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::MissingLet)?\n         } else if self.is_kw_followed_by_ident(kw::Auto) {\n             self.bump(); // `auto`\n-            let msg = \"write `let` instead of `auto` to introduce a new variable\";\n-            self.recover_stmt_local(lo, attrs, msg, \"let\")?\n+            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::UseLetNotAuto)?\n         } else if self.is_kw_followed_by_ident(sym::var) {\n             self.bump(); // `var`\n-            let msg = \"write `let` instead of `var` to introduce a new variable\";\n-            self.recover_stmt_local(lo, attrs, msg, \"let\")?\n+            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::UseLetNotVar)?\n         } else if self.check_path() && !self.token.is_qpath_start() && !self.is_path_start_item() {\n             // We have avoided contextual keywords like `union`, items with `crate` visibility,\n             // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n@@ -217,13 +213,10 @@ impl<'a> Parser<'a> {\n         &mut self,\n         lo: Span,\n         attrs: AttrWrapper,\n-        msg: &str,\n-        sugg: &str,\n+        subdiagnostic: fn(Span) -> InvalidVariableDeclarationSub,\n     ) -> PResult<'a, Stmt> {\n         let stmt = self.recover_local_after_let(lo, attrs)?;\n-        self.struct_span_err(lo, \"invalid variable declaration\")\n-            .span_suggestion(lo, msg, sugg, Applicability::MachineApplicable)\n-            .emit();\n+        self.sess.emit_err(InvalidVariableDeclaration { span: lo, sub: subdiagnostic(lo) });\n         Ok(stmt)\n     }\n "}, {"sha": "e4842d2afb705f2325d5f20a76da31066fd0c3eb", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -9,6 +9,8 @@\n     html_playground_url = \"https://play.rust-lang.org/\",\n     test(attr(deny(warnings)))\n )]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n // We want to be able to build this crate with a stable compiler, so no\n // `#![feature]` attributes should be added.\n "}, {"sha": "df187ea0c94d8a6f5d3b8b52fcd0b1707a6707a3", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -7,6 +7,8 @@\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "079d44bac685bf1afd6ad02e8da87ff40d72e5b0", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -18,6 +18,8 @@ Core encoding and decoding interfaces.\n #![feature(new_uninit)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n pub use self::serialize::{Decodable, Decoder, Encodable, Encoder};\n "}, {"sha": "3e93c6bba977fc1510731443c423fa6ffff64983", "filename": "compiler/rustc_smir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -11,6 +11,8 @@\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![cfg_attr(not(feature = \"default\"), feature(rustc_private))]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n pub mod mir;\n "}, {"sha": "d14e28e85be1a5407dc22b6788f5986c445d1a07", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -20,6 +20,8 @@\n #![feature(negative_impls)]\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "9c9e297849ed52d23541511a8cef6a319e78bd09", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -16,6 +16,8 @@\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![feature(step_trait)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n use std::iter::FromIterator;\n use std::path::{Path, PathBuf};"}, {"sha": "318e76c79f18bae510b82c980a9e31b09a059f84", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,6 +1,8 @@\n //! New recursive solver modeled on Chalk's recursive solver. Most of\n //! the guts are broken up into modules; see the comments in those modules.\n \n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "970b39dc845afbf65225a1b1e966068ef052fa5f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -2836,12 +2836,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                     codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n                 }\n                 Some(_) => {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            attr.span,\n-                            \"expected `used`, `used(compiler)` or `used(linker)`\",\n-                        )\n-                        .emit();\n+                    tcx.sess.emit_err(errors::ExpectedUsedSymbol { span: attr.span });\n                 }\n                 None => {\n                     // Unfortunately, unconditionally using `llvm.used` causes"}, {"sha": "8b1cb8d1c939ab144c459d287301b43acbeef267", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -340,3 +340,10 @@ pub struct ExternCrateNotIdiomatic {\n     pub msg_code: String,\n     pub suggestion_code: String,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(typeck::expected_used_symbol)]\n+pub struct ExpectedUsedSymbol {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "34634da44de67f257814a6f2c2a119d90e2fe0a2", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 138, "deletions": 21, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -305,6 +305,34 @@ where\n     }\n }\n \n+// Split a memory region ptr..ptr + len into three parts:\n+//   +--------+\n+//   | small0 | Chunk smaller than 8 bytes\n+//   +--------+\n+//   |   big  | Chunk 8-byte aligned, and size a multiple of 8 bytes\n+//   +--------+\n+//   | small1 | Chunk smaller than 8 bytes\n+//   +--------+\n+fn region_as_aligned_chunks(ptr: *const u8, len: usize) -> (usize, usize, usize) {\n+    let small0_size = if ptr as usize % 8 == 0 { 0 } else { 8 - ptr as usize % 8 };\n+    let small1_size = (len - small0_size as usize) % 8;\n+    let big_size = len - small0_size as usize - small1_size as usize;\n+\n+    (small0_size, big_size, small1_size)\n+}\n+\n+unsafe fn copy_quadwords(src: *const u8, dst: *mut u8, len: usize) {\n+    unsafe {\n+        asm!(\n+            \"rep movsq (%rsi), (%rdi)\",\n+            inout(\"rcx\") len / 8 => _,\n+            inout(\"rdi\") dst => _,\n+            inout(\"rsi\") src => _,\n+            options(att_syntax, nostack, preserves_flags)\n+        );\n+    }\n+}\n+\n /// Copies `len` bytes of data from enclave pointer `src` to userspace `dst`\n ///\n /// This function mitigates stale data vulnerabilities by ensuring all writes to untrusted memory are either:\n@@ -343,17 +371,6 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n         }\n     }\n \n-    unsafe fn copy_aligned_quadwords_to_userspace(src: *const u8, dst: *mut u8, len: usize) {\n-        unsafe {\n-            asm!(\n-                \"rep movsq (%rsi), (%rdi)\",\n-                inout(\"rcx\") len / 8 => _,\n-                inout(\"rdi\") dst => _,\n-                inout(\"rsi\") src => _,\n-                options(att_syntax, nostack, preserves_flags)\n-            );\n-        }\n-    }\n     assert!(!src.is_null());\n     assert!(!dst.is_null());\n     assert!(is_enclave_range(src, len));\n@@ -370,7 +387,7 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n     } else if len % 8 == 0 && dst as usize % 8 == 0 {\n         // Copying 8-byte aligned quadwords: copy quad word per quad word\n         unsafe {\n-            copy_aligned_quadwords_to_userspace(src, dst, len);\n+            copy_quadwords(src, dst, len);\n         }\n     } else {\n         // Split copies into three parts:\n@@ -381,20 +398,16 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n         //   +--------+\n         //   | small1 | Chunk smaller than 8 bytes\n         //   +--------+\n+        let (small0_size, big_size, small1_size) = region_as_aligned_chunks(dst, len);\n \n         unsafe {\n             // Copy small0\n-            let small0_size = (8 - dst as usize % 8) as u8;\n-            let small0_src = src;\n-            let small0_dst = dst;\n-            copy_bytewise_to_userspace(small0_src as _, small0_dst, small0_size as _);\n+            copy_bytewise_to_userspace(src, dst, small0_size as _);\n \n             // Copy big\n-            let small1_size = ((len - small0_size as usize) % 8) as u8;\n-            let big_size = len - small0_size as usize - small1_size as usize;\n             let big_src = src.offset(small0_size as _);\n             let big_dst = dst.offset(small0_size as _);\n-            copy_aligned_quadwords_to_userspace(big_src as _, big_dst, big_size);\n+            copy_quadwords(big_src as _, big_dst, big_size);\n \n             // Copy small1\n             let small1_src = src.offset(big_size as isize + small0_size as isize);\n@@ -404,6 +417,106 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n     }\n }\n \n+/// Copies `len` bytes of data from userspace pointer `src` to enclave pointer `dst`\n+///\n+/// This function mitigates AEPIC leak vulnerabilities by ensuring all reads from untrusted memory are 8-byte aligned\n+///\n+/// # Panics\n+/// This function panics if:\n+///\n+/// * The `src` pointer is null\n+/// * The `dst` pointer is null\n+/// * The `src` memory range is not in user memory\n+/// * The `dst` memory range is not in enclave memory\n+///\n+/// # References\n+///  - https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00657.html\n+///  - https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/advisory-guidance/stale-data-read-from-xapic.html\n+pub(crate) unsafe fn copy_from_userspace(src: *const u8, dst: *mut u8, len: usize) {\n+    // Copies memory region `src..src + len` to the enclave at `dst`. The source memory region\n+    // is:\n+    //  - strictly less than 8 bytes in size and may be\n+    //  - located at a misaligned memory location\n+    fn copy_misaligned_chunk_to_enclave(src: *const u8, dst: *mut u8, len: usize) {\n+        let mut tmp_buff = [0u8; 16];\n+\n+        unsafe {\n+            // Compute an aligned memory region to read from\n+            // +--------+ <-- aligned_src + aligned_len (8B-aligned)\n+            // |  pad1  |\n+            // +--------+ <-- src + len (misaligned)\n+            // |        |\n+            // |        |\n+            // |        |\n+            // +--------+ <-- src (misaligned)\n+            // |  pad0  |\n+            // +--------+ <-- aligned_src (8B-aligned)\n+            let pad0_size = src as usize % 8;\n+            let aligned_src = src.sub(pad0_size);\n+\n+            let pad1_size = 8 - (src.add(len) as usize % 8);\n+            let aligned_len = pad0_size + len + pad1_size;\n+\n+            debug_assert!(len < 8);\n+            debug_assert_eq!(aligned_src as usize % 8, 0);\n+            debug_assert_eq!(aligned_len % 8, 0);\n+            debug_assert!(aligned_len <= 16);\n+\n+            // Copy the aligned buffer to a temporary buffer\n+            // Note: copying from a slightly different memory location is a bit odd. In this case it\n+            // can't lead to page faults or inadvertent copying from the enclave as we only ensured\n+            // that the `src` pointer is aligned at an 8 byte boundary. As pages are 4096 bytes\n+            // aligned, `aligned_src` must be on the same page as `src`. A similar argument can be made\n+            // for `src + len`\n+            copy_quadwords(aligned_src as _, tmp_buff.as_mut_ptr(), aligned_len);\n+\n+            // Copy the correct parts of the temporary buffer to the destination\n+            ptr::copy(tmp_buff.as_ptr().add(pad0_size), dst, len);\n+        }\n+    }\n+\n+    assert!(!src.is_null());\n+    assert!(!dst.is_null());\n+    assert!(is_user_range(src, len));\n+    assert!(is_enclave_range(dst, len));\n+    assert!(!(src as usize).overflowing_add(len + 8).1);\n+    assert!(!(dst as usize).overflowing_add(len + 8).1);\n+\n+    if len < 8 {\n+        copy_misaligned_chunk_to_enclave(src, dst, len);\n+    } else if len % 8 == 0 && src as usize % 8 == 0 {\n+        // Copying 8-byte aligned quadwords: copy quad word per quad word\n+        unsafe {\n+            copy_quadwords(src, dst, len);\n+        }\n+    } else {\n+        // Split copies into three parts:\n+        //   +--------+\n+        //   | small0 | Chunk smaller than 8 bytes\n+        //   +--------+\n+        //   |   big  | Chunk 8-byte aligned, and size a multiple of 8 bytes\n+        //   +--------+\n+        //   | small1 | Chunk smaller than 8 bytes\n+        //   +--------+\n+        let (small0_size, big_size, small1_size) = region_as_aligned_chunks(dst, len);\n+\n+        unsafe {\n+            // Copy small0\n+            copy_misaligned_chunk_to_enclave(src, dst, small0_size);\n+\n+            // Copy big\n+            let big_src = src.add(small0_size);\n+            let big_dst = dst.add(small0_size);\n+            copy_quadwords(big_src, big_dst, big_size);\n+\n+            // Copy small1\n+            let small1_src = src.add(big_size + small0_size);\n+            let small1_dst = dst.add(big_size + small0_size);\n+            copy_misaligned_chunk_to_enclave(small1_src, small1_dst, small1_size);\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: ?Sized> UserRef<T>\n where\n@@ -468,7 +581,7 @@ where\n     pub fn copy_to_enclave(&self, dest: &mut T) {\n         unsafe {\n             assert_eq!(mem::size_of_val(dest), mem::size_of_val(&*self.0.get()));\n-            ptr::copy(\n+            copy_from_userspace(\n                 self.0.get() as *const T as *const u8,\n                 dest as *mut T as *mut u8,\n                 mem::size_of_val(dest),\n@@ -494,7 +607,11 @@ where\n {\n     /// Copies the value from user memory into enclave memory.\n     pub fn to_enclave(&self) -> T {\n-        unsafe { ptr::read(self.0.get()) }\n+        unsafe {\n+            let mut data: T = mem::MaybeUninit::uninit().assume_init();\n+            copy_from_userspace(self.0.get() as _, &mut data as *mut T as _, mem::size_of::<T>());\n+            data\n+        }\n     }\n }\n "}, {"sha": "4320f0bccd199b99b3301393508b04e56a74e0d8", "filename": "library/std/src/sys/sgx/abi/usercalls/tests.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Ftests.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,8 +1,8 @@\n-use super::alloc::copy_to_userspace;\n use super::alloc::User;\n+use super::alloc::{copy_from_userspace, copy_to_userspace};\n \n #[test]\n-fn test_copy_function() {\n+fn test_copy_to_userspace_function() {\n     let mut src = [0u8; 100];\n     let mut dst = User::<[u8]>::uninitialized(100);\n \n@@ -28,3 +28,29 @@ fn test_copy_function() {\n         }\n     }\n }\n+\n+#[test]\n+fn test_copy_from_userspace_function() {\n+    let mut dst = [0u8; 100];\n+    let mut src = User::<[u8]>::uninitialized(100);\n+\n+    src.copy_from_enclave(&[0u8; 100]);\n+\n+    for size in 0..48 {\n+        // For all possible alignment\n+        for offset in 0..8 {\n+            // overwrite complete dst\n+            dst = [0u8; 100];\n+\n+            // Copy src[0..size] to dst + offset\n+            unsafe { copy_from_userspace(src.as_ptr().offset(offset), dst.as_mut_ptr(), size) };\n+\n+            // Verify copy\n+            for byte in 0..size {\n+                unsafe {\n+                    assert_eq!(dst[byte as usize], *src.as_ptr().offset(offset + byte as isize));\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "a9846a484880befb3e0aca62cb9a91d65bc57bca", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -2,6 +2,7 @@\n \n use crate::ffi::{CStr, OsStr, OsString};\n use crate::io::ErrorKind;\n+use crate::mem::MaybeUninit;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::path::PathBuf;\n use crate::time::Duration;\n@@ -204,8 +205,8 @@ where\n     // This initial size also works around `GetFullPathNameW` returning\n     // incorrect size hints for some short paths:\n     // https://github.com/dylni/normpath/issues/5\n-    let mut stack_buf = [0u16; 512];\n-    let mut heap_buf = Vec::new();\n+    let mut stack_buf: [MaybeUninit<u16>; 512] = MaybeUninit::uninit_array();\n+    let mut heap_buf: Vec<MaybeUninit<u16>> = Vec::new();\n     unsafe {\n         let mut n = stack_buf.len();\n         loop {\n@@ -214,6 +215,11 @@ where\n             } else {\n                 let extra = n - heap_buf.len();\n                 heap_buf.reserve(extra);\n+                // We used `reserve` and not `reserve_exact`, so in theory we\n+                // may have gotten more than requested. If so, we'd like to use\n+                // it... so long as we won't cause overflow.\n+                n = heap_buf.capacity().min(c::DWORD::MAX as usize);\n+                // Safety: MaybeUninit<u16> does not need initialization\n                 heap_buf.set_len(n);\n                 &mut heap_buf[..]\n             };\n@@ -228,13 +234,13 @@ where\n             // error\" is still 0 then we interpret it as a 0 length buffer and\n             // not an actual error.\n             c::SetLastError(0);\n-            let k = match f1(buf.as_mut_ptr(), n as c::DWORD) {\n+            let k = match f1(buf.as_mut_ptr().cast::<u16>(), n as c::DWORD) {\n                 0 if c::GetLastError() == 0 => 0,\n                 0 => return Err(crate::io::Error::last_os_error()),\n                 n => n,\n             } as usize;\n             if k == n && c::GetLastError() == c::ERROR_INSUFFICIENT_BUFFER {\n-                n *= 2;\n+                n = n.saturating_mul(2).min(c::DWORD::MAX as usize);\n             } else if k > n {\n                 n = k;\n             } else if k == n {\n@@ -244,7 +250,9 @@ where\n                 // Therefore k never equals n.\n                 unreachable!();\n             } else {\n-                return Ok(f2(&buf[..k]));\n+                // Safety: First `k` values are initialized.\n+                let slice: &[u16] = MaybeUninit::slice_assume_init_ref(&buf[..k]);\n+                return Ok(f2(slice));\n             }\n         }\n     }"}, {"sha": "245c3a40e05062631907c8ea7913337c4a79f0bc", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -14,6 +14,7 @@ LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0507]: cannot move out of static item `settings_dir`"}, {"sha": "b1af090aec2b03346a79cca26359c72d1dbece38", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -5,17 +5,14 @@ LL |     cb.map(|cb| cb());\n    |     ^^^--------------\n    |     |  |\n    |     |  `*cb` moved due to this method call\n+   |     help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |     move occurs because `*cb` has type `Option<&mut dyn FnMut()>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `*cb`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n    |                            ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |     cb.as_ref().map(|cb| cb());\n-   |        +++++++++\n \n error[E0596]: cannot borrow `*cb` as mutable, as it is behind a `&` reference\n   --> $DIR/suggest-as-ref-on-mut-closure.rs:12:26"}, {"sha": "3c193ca34acce85b4c6a27c672a295fcb0934c58", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -22,6 +22,7 @@ LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                      ^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:94:5"}, {"sha": "0fec3581873eb73c5114f702e3e66ea9fa1bec4f", "filename": "src/test/ui/consts/issue-32829-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fconsts%2Fissue-32829-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fconsts%2Fissue-32829-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829-2.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -13,6 +13,7 @@ LL |         invalid();\n    |         ^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error[E0015]: cannot call non-const fn `invalid` in statics\n   --> $DIR/issue-32829-2.rs:54:9\n@@ -21,6 +22,7 @@ LL |         invalid();\n    |         ^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1e0652722ff2d9f3628515bb247869b9545d25a4", "filename": "src/test/ui/consts/mir_check_nonconst.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmir_check_nonconst.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -5,6 +5,7 @@ LL | static foo: Foo = bar();\n    |                   ^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to previous error\n "}, {"sha": "917a45c15bbc81a1ee6d19122d9e0bbf57549add", "filename": "src/test/ui/issues/issue-100605.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-100605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-100605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-100605.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,9 @@\n+fn takes_option(_arg: Option<&String>) {}\n+\n+fn main() {\n+    takes_option(&None); //~ ERROR 4:18: 4:23: mismatched types [E0308]\n+\n+    let x = String::from(\"x\");\n+    let res = Some(x);\n+    takes_option(&res); //~ ERROR 8:18: 8:22: mismatched types [E0308]\n+}"}, {"sha": "886e3cd6bb794b0393e659de16a81dcf86440111", "filename": "src/test/ui/issues/issue-100605.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-100605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-100605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-100605.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,46 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-100605.rs:4:18\n+   |\n+LL |     takes_option(&None);\n+   |     ------------ ^^^^^ expected enum `Option`, found `&Option<_>`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note:   expected enum `Option<&String>`\n+           found reference `&Option<_>`\n+note: function defined here\n+  --> $DIR/issue-100605.rs:1:4\n+   |\n+LL | fn takes_option(_arg: Option<&String>) {}\n+   |    ^^^^^^^^^^^^ ---------------------\n+help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`\n+   |\n+LL |     takes_option(None.as_ref());\n+   |                  ~~~~~~~~~~~~~\n+help: consider removing the borrow\n+   |\n+LL -     takes_option(&None);\n+LL +     takes_option(None);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-100605.rs:8:18\n+   |\n+LL |     takes_option(&res);\n+   |     ------------ ^^^^\n+   |     |            |\n+   |     |            expected enum `Option`, found `&Option<String>`\n+   |     |            help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `res.as_ref()`\n+   |     arguments to this function are incorrect\n+   |\n+   = note:   expected enum `Option<&String>`\n+           found reference `&Option<String>`\n+note: function defined here\n+  --> $DIR/issue-100605.rs:1:4\n+   |\n+LL | fn takes_option(_arg: Option<&String>) {}\n+   |    ^^^^^^^^^^^^ ---------------------\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e320df4b7ad8f95dc2ce29b443abed72b28ea08c", "filename": "src/test/ui/issues/issue-16538.mir.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -5,6 +5,7 @@ LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n   --> $DIR/issue-16538.rs:14:30"}, {"sha": "4a862869274f8943d827673209b7d51140492e77", "filename": "src/test/ui/issues/issue-16538.thir.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -21,6 +21,7 @@ LL | static foo: &Y::X = &*Y::foo(Y::x as *const Y::X);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c6c80e41cf67e29e9a2fd19bc8d431d5db5a0374", "filename": "src/test/ui/issues/issue-25901.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25901.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -16,6 +16,7 @@ note: impl defined here, but it is not `const`\n LL | impl Deref for A {\n    | ^^^^^^^^^^^^^^^^\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to previous error\n "}, {"sha": "21da34c47c9fd698b5d72bbca75dad22172b3ed1", "filename": "src/test/ui/parser/fn-defined-using-def.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-def.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+// Check what happens when `def` is used to define a function, instead of `fn`\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+def foo() {}\n+//~^ ERROR expected one of `!` or `::`, found `foo`\n+//~^^ HELP write `fn` instead of `def` to declare a function\n+\n+fn main() {}"}, {"sha": "f34329012a02fb699c30e190db12f73e4d564973", "filename": "src/test/ui/parser/fn-defined-using-def.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-def.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!` or `::`, found `foo`\n+  --> $DIR/fn-defined-using-def.rs:6:5\n+   |\n+LL | def foo() {}\n+   | --- ^^^ expected one of `!` or `::`\n+   | |\n+   | help: write `fn` instead of `def` to declare a function\n+\n+error: aborting due to previous error\n+"}, {"sha": "4f74605043e198d61889d2334f99b74e0fed6d59", "filename": "src/test/ui/parser/fn-defined-using-fun.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-fun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-fun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-fun.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+// Check what happens when `fun` is used to define a function, instead of `fn`\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+fun foo() {}\n+//~^ ERROR expected one of `!` or `::`, found `foo`\n+//~^^ HELP write `fn` instead of `fun` to declare a function\n+\n+fn main() {}"}, {"sha": "2f6cfff350c909cacdb3f753bd4ad95225a0f439", "filename": "src/test/ui/parser/fn-defined-using-fun.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-fun.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-fun.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-fun.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!` or `::`, found `foo`\n+  --> $DIR/fn-defined-using-fun.rs:6:5\n+   |\n+LL | fun foo() {}\n+   | --- ^^^ expected one of `!` or `::`\n+   | |\n+   | help: write `fn` instead of `fun` to declare a function\n+\n+error: aborting due to previous error\n+"}, {"sha": "2dce96fdce078953448589e81fae18b7d55b21bc", "filename": "src/test/ui/parser/fn-defined-using-func.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-func.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-func.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-func.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+// Check what happens when `func` is used to define a function, instead of `fn`\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+func foo() {}\n+//~^ ERROR expected one of `!` or `::`, found `foo`\n+//~^^ HELP write `fn` instead of `func` to declare a function\n+\n+fn main() {}"}, {"sha": "355741e8949a9e98fd30c2d6bddba46a19eb5249", "filename": "src/test/ui/parser/fn-defined-using-func.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-func.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-func.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-func.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!` or `::`, found `foo`\n+  --> $DIR/fn-defined-using-func.rs:6:6\n+   |\n+LL | func foo() {}\n+   | ---- ^^^ expected one of `!` or `::`\n+   | |\n+   | help: write `fn` instead of `func` to declare a function\n+\n+error: aborting due to previous error\n+"}, {"sha": "fd8782728e2b9dce8828080d25919855e22be06a", "filename": "src/test/ui/parser/fn-defined-using-function.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-function.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+// Check what happens when `function` is used to define a function, instead of `fn`\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+function foo() {}\n+//~^ ERROR expected one of `!` or `::`, found `foo`\n+//~^^ HELP write `fn` instead of `function` to declare a function\n+\n+fn main() {}"}, {"sha": "43c33a2cdd7e88ac21f755aa4a3ba27cd440c89c", "filename": "src/test/ui/parser/fn-defined-using-function.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-defined-using-function.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!` or `::`, found `foo`\n+  --> $DIR/fn-defined-using-function.rs:6:10\n+   |\n+LL | function foo() {}\n+   | -------- ^^^ expected one of `!` or `::`\n+   | |\n+   | help: write `fn` instead of `function` to declare a function\n+\n+error: aborting due to previous error\n+"}, {"sha": "dec0123184d705564f59607e4e0a7649c5ed6f63", "filename": "src/test/ui/static/static-vec-repeat-not-constant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fstatic%2Fstatic-vec-repeat-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fstatic%2Fstatic-vec-repeat-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-vec-repeat-not-constant.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -5,6 +5,7 @@ LL | static a: [isize; 2] = [foo(); 2];\n    |                         ^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to previous error\n "}, {"sha": "13bbb233f39862ac5bd81da29f1f47b4632e8cba", "filename": "src/test/ui/suggestions/as-ref-2.fixed", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,13 +0,0 @@\n-// run-rustfix\n-\n-struct Struct;\n-\n-fn bar(_: &Struct) -> Struct {\n-    Struct\n-}\n-\n-fn main() {\n-    let foo = Some(Struct);\n-    let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n-    let _y = foo; //~ERROR use of moved value: `foo`\n-}"}, {"sha": "b22f409b44a93365b9fcd3db6ccd1eca53984178", "filename": "src/test/ui/suggestions/as-ref-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n struct Struct;\n \n fn bar(_: &Struct) -> Struct {"}, {"sha": "e15e45d86b992c64fe39afe87742e96a62a18b9e", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,10 +1,12 @@\n error[E0382]: use of moved value: `foo`\n-  --> $DIR/as-ref-2.rs:12:14\n+  --> $DIR/as-ref-2.rs:10:14\n    |\n LL |     let foo = Some(Struct);\n    |         --- move occurs because `foo` has type `Option<Struct>`, which does not implement the `Copy` trait\n LL |     let _x: Option<Struct> = foo.map(|s| bar(&s));\n-   |                                  ---------------- `foo` moved due to this method call\n+   |                              --- ---------------- `foo` moved due to this method call\n+   |                              |\n+   |                              help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n LL |     let _y = foo;\n    |              ^^^ value used here after move\n    |\n@@ -13,10 +15,6 @@ note: this function takes ownership of the receiver `self`, which moves `foo`\n    |\n LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n    |                            ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |     let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n-   |                                  +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ba16bcc8a336d845ba9800be3b9c7e862491f0d6", "filename": "src/test/ui/suggestions/option-content-move.fixed", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,39 +0,0 @@\n-//run-rustfix\n-\n-pub struct LipogramCorpora {\n-    selections: Vec<(char, Option<String>)>,\n-}\n-\n-impl LipogramCorpora {\n-    pub fn validate_all(&mut self) -> Result<(), char> {\n-        for selection in &self.selections {\n-            if selection.1.is_some() {\n-                if selection.1.as_ref().unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of `selection.1`\n-                    return Err(selection.0);\n-                }\n-            }\n-        }\n-        Ok(())\n-    }\n-}\n-\n-pub struct LipogramCorpora2 {\n-    selections: Vec<(char, Result<String, String>)>,\n-}\n-\n-impl LipogramCorpora2 {\n-    pub fn validate_all(&mut self) -> Result<(), char> {\n-        for selection in &self.selections {\n-            if selection.1.is_ok() {\n-                if selection.1.as_ref().unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of `selection.1`\n-                    return Err(selection.0);\n-                }\n-            }\n-        }\n-        Ok(())\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "46c895b95f53671de48b7c9ce597ea3146c1858a", "filename": "src/test/ui/suggestions/option-content-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,5 +1,3 @@\n-//run-rustfix\n-\n pub struct LipogramCorpora {\n     selections: Vec<(char, Option<String>)>,\n }"}, {"sha": "a6f1ebc975fd5bc450fcfadc41d43a568cb420c5", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -1,38 +1,32 @@\n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n-  --> $DIR/option-content-move.rs:11:20\n+  --> $DIR/option-content-move.rs:9:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n    |                    |\n+   |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     pub const fn unwrap(self) -> T {\n    |                         ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                                +++++++++\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n-  --> $DIR/option-content-move.rs:29:20\n+  --> $DIR/option-content-move.rs:27:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n    |                    |\n+   |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n    |\n note: this function takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     pub fn unwrap(self) -> T\n    |                   ^^^^\n-help: consider calling `.as_ref()` to borrow the type's contents\n-   |\n-LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                                +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4d3f748195b80e9a6a11e6164684ceb20a76ec9f", "filename": "triagebot.toml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36e530cb08950f1d03ab733e43ecec2802d099cf/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/36e530cb08950f1d03ab733e43ecec2802d099cf/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=36e530cb08950f1d03ab733e43ecec2802d099cf", "patch": "@@ -129,6 +129,7 @@ trigger_files = [\n \n     # Internal tooling\n     \"src/etc/htmldocck.py\",\n+    \"src/etc/check_missing_items.py\",\n     \"src/tools/jsondocck\",\n     \"src/tools/rustdoc-gui\",\n     \"src/tools/rustdoc-js\",\n@@ -138,6 +139,15 @@ exclude_labels = [\n     \"T-*\",\n ]\n \n+[autolabel.\"A-rustdoc-json\"]\n+trigger_files = [\n+    \"src/etc/check_missing_items.py\",\n+    \"src/librustdoc/json/\",\n+    \"src/rustdoc-json-types\",\n+    \"src/test/rustdoc-json\",\n+    \"src/tools/jsondocck\",\n+]\n+\n [autolabel.\"T-compiler\"]\n trigger_files = [\n     # Source code"}]}