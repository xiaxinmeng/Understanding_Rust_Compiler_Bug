{"sha": "9cf05f3614ef00c0da82b0594704aff213ab7c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjA1ZjM2MTRlZjAwYzBkYTgyYjA1OTQ3MDRhZmYyMTNhYjdjMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-19T05:44:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-19T05:44:11Z"}, "message": "Auto merge of #86378 - Smittyvb:thir-walker-pat, r=LeSeulArtichaut\n\nAdd pattern walking support to THIR walker\n\nSuggested in https://github.com/rust-lang/rust/pull/85263#issuecomment-861906730, this splits off the support for pattern walking in THIR from #85263. This has no observable effect on THIR unsafety checking, since it is not currently possible to trigger unsafety from the THIR checker using the additional patterns or constants that are now walked. THIR patterns are walked in source code order.\n\nr? `@LeSeulArtichaut`", "tree": {"sha": "5a8d3bd23ba6606a766468757a8c2e211c157fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8d3bd23ba6606a766468757a8c2e211c157fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf05f3614ef00c0da82b0594704aff213ab7c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf05f3614ef00c0da82b0594704aff213ab7c34", "html_url": "https://github.com/rust-lang/rust/commit/9cf05f3614ef00c0da82b0594704aff213ab7c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf05f3614ef00c0da82b0594704aff213ab7c34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9839f9c7ff0c550e1234e9784612e981ea0123d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9839f9c7ff0c550e1234e9784612e981ea0123d5", "html_url": "https://github.com/rust-lang/rust/commit/9839f9c7ff0c550e1234e9784612e981ea0123d5"}, {"sha": "281dd6d6e00fd4be40917e2279884b780571506d", "url": "https://api.github.com/repos/rust-lang/rust/commits/281dd6d6e00fd4be40917e2279884b780571506d", "html_url": "https://github.com/rust-lang/rust/commit/281dd6d6e00fd4be40917e2279884b780571506d"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "f611bb6eb43e9e52bddad01bbd7a41e6136b4840", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9cf05f3614ef00c0da82b0594704aff213ab7c34/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf05f3614ef00c0da82b0594704aff213ab7c34/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=9cf05f3614ef00c0da82b0594704aff213ab7c34", "patch": "@@ -20,6 +20,10 @@ pub trait Visitor<'a, 'tcx: 'a>: Sized {\n         walk_arm(self, arm);\n     }\n \n+    fn visit_pat(&mut self, pat: &Pat<'tcx>) {\n+        walk_pat(self, pat);\n+    }\n+\n     fn visit_const(&mut self, _cnst: &'tcx Const<'tcx>) {}\n }\n \n@@ -155,12 +159,13 @@ pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stm\n             initializer,\n             remainder_scope: _,\n             init_scope: _,\n-            pattern: _,\n+            ref pattern,\n             lint_level: _,\n         } => {\n             if let Some(init) = initializer {\n                 visitor.visit_expr(&visitor.thir()[init]);\n             }\n+            visitor.visit_pat(pattern);\n         }\n     }\n }\n@@ -177,10 +182,56 @@ pub fn walk_block<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, block: &B\n pub fn walk_arm<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, arm: &Arm<'tcx>) {\n     match arm.guard {\n         Some(Guard::If(expr)) => visitor.visit_expr(&visitor.thir()[expr]),\n-        Some(Guard::IfLet(ref _pat, expr)) => {\n+        Some(Guard::IfLet(ref pat, expr)) => {\n+            visitor.visit_pat(pat);\n             visitor.visit_expr(&visitor.thir()[expr]);\n         }\n         None => {}\n     }\n+    visitor.visit_pat(&arm.pattern);\n     visitor.visit_expr(&visitor.thir()[arm.body]);\n }\n+\n+pub fn walk_pat<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, pat: &Pat<'tcx>) {\n+    use PatKind::*;\n+    match pat.kind.as_ref() {\n+        AscribeUserType { subpattern, ascription: _ }\n+        | Deref { subpattern }\n+        | Binding {\n+            subpattern: Some(subpattern),\n+            mutability: _,\n+            mode: _,\n+            var: _,\n+            ty: _,\n+            is_primary: _,\n+            name: _,\n+        } => visitor.visit_pat(&subpattern),\n+        Binding { .. } | Wild => {}\n+        Variant { subpatterns, adt_def: _, substs: _, variant_index: _ } | Leaf { subpatterns } => {\n+            for subpattern in subpatterns {\n+                visitor.visit_pat(&subpattern.pattern);\n+            }\n+        }\n+        Constant { value } => visitor.visit_const(value),\n+        Range(range) => {\n+            visitor.visit_const(range.lo);\n+            visitor.visit_const(range.hi);\n+        }\n+        Slice { prefix, slice, suffix } | Array { prefix, slice, suffix } => {\n+            for subpattern in prefix {\n+                visitor.visit_pat(&subpattern);\n+            }\n+            if let Some(pat) = slice {\n+                visitor.visit_pat(pat);\n+            }\n+            for subpattern in suffix {\n+                visitor.visit_pat(&subpattern);\n+            }\n+        }\n+        Or { pats } => {\n+            for pat in pats {\n+                visitor.visit_pat(&pat);\n+            }\n+        }\n+    };\n+}"}]}