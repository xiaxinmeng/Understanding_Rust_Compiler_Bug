{"sha": "5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjRlZThhOWVmMWJiM2JmMjUwY2UzOTkwMmNmOGRmY2ExYTRkZWE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-04-10T17:48:38Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-05T01:27:23Z"}, "message": "Implement unwinding for Win64.\nThe original trick used to trigger unwinds would not work with GCC's implementation of SEH, so I had to invent a new one: rust_try now consists of two routines: the outer one, whose handler triggers unwinds, and the inner one, that stops unwinds by having a landing pad that swallows exceptions and passes them on to the outer routine via a normal return.", "tree": {"sha": "1cbca1cbc7baaa9e1887fefbe2977ce446338c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbca1cbc7baaa9e1887fefbe2977ce446338c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "html_url": "https://github.com/rust-lang/rust/commit/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a12b23521fd5cc826a787a45cfa6630857a8939e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a12b23521fd5cc826a787a45cfa6630857a8939e", "html_url": "https://github.com/rust-lang/rust/commit/a12b23521fd5cc826a787a45cfa6630857a8939e"}], "stats": {"total": 181, "additions": 146, "deletions": 35}, "files": [{"sha": "db6308c10dcf2b547cd76472d259047a27531ce6", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "patch": "@@ -60,7 +60,7 @@ pub type _Unwind_Word = libc::uintptr_t;\n pub static unwinder_private_data_size: uint = 5;\n \n #[cfg(target_arch = \"x86_64\")]\n-pub static unwinder_private_data_size: uint = 2;\n+pub static unwinder_private_data_size: uint = 6;\n \n #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))]\n pub static unwinder_private_data_size: uint = 20;"}, {"sha": "9c62936ef9a4922c253a521c70e7f9bea1ce3cc5", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 120, "deletions": 25, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "patch": "@@ -227,7 +227,7 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n //   This is achieved by overriding the return value in search phase to always\n //   say \"catch!\".\n \n-#[cfg(not(target_arch = \"arm\"), not(test))]\n+#[cfg(not(target_arch = \"arm\"), not(windows, target_arch = \"x86_64\"), not(test))]\n #[doc(hidden)]\n #[allow(visible_private_types)]\n pub mod eabi {\n@@ -244,7 +244,8 @@ pub mod eabi {\n     }\n \n     #[lang=\"eh_personality\"]\n-    extern fn eh_personality(\n+    #[no_mangle] // referenced from rust_try.ll\n+    extern fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n         exception_class: uw::_Unwind_Exception_Class,\n@@ -260,21 +261,19 @@ pub mod eabi {\n \n     #[no_mangle] // referenced from rust_try.ll\n     pub extern \"C\" fn rust_eh_personality_catch(\n-        version: c_int,\n+        _version: c_int,\n         actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n+        _exception_class: uw::_Unwind_Exception_Class,\n+        _ue_header: *mut uw::_Unwind_Exception,\n+        _context: *mut uw::_Unwind_Context\n     ) -> uw::_Unwind_Reason_Code\n     {\n+\n         if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n             uw::_URC_HANDLER_FOUND // catch!\n         }\n         else { // cleanup phase\n-            unsafe {\n-                __gcc_personality_v0(version, actions, exception_class, ue_header,\n-                                     context)\n-            }\n+            uw::_URC_INSTALL_CONTEXT\n         }\n     }\n }\n@@ -299,7 +298,7 @@ pub mod eabi {\n     }\n \n     #[lang=\"eh_personality\"]\n-    #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n+    #[no_mangle] // referenced from rust_try.ll\n     pub extern \"C\" fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -316,29 +315,26 @@ pub mod eabi {\n \n     #[no_mangle] // referenced from rust_try.ll\n     pub extern \"C\" fn rust_eh_personality_catch(\n-        version: c_int,\n+        _version: c_int,\n         actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n+        _exception_class: uw::_Unwind_Exception_Class,\n+        _ue_header: *mut uw::_Unwind_Exception,\n+        _context: *mut uw::_Unwind_Context\n     ) -> uw::_Unwind_Reason_Code\n     {\n         if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n             uw::_URC_HANDLER_FOUND // catch!\n         }\n         else { // cleanup phase\n-            unsafe {\n-                __gcc_personality_sj0(version, actions, exception_class, ue_header,\n-                                      context)\n-            }\n+            uw::_URC_INSTALL_CONTEXT\n         }\n     }\n }\n \n \n // ARM EHABI uses a slightly different personality routine signature,\n // but otherwise works the same.\n-#[cfg(target_arch = \"arm\", not(test), not(target_os = \"ios\"))]\n+#[cfg(target_arch = \"arm\", not(target_os = \"ios\", not(test)))]\n #[allow(visible_private_types)]\n pub mod eabi {\n     use uw = libunwind;\n@@ -352,7 +348,8 @@ pub mod eabi {\n     }\n \n     #[lang=\"eh_personality\"]\n-    extern \"C\" fn eh_personality(\n+    #[no_mangle] // referenced from rust_try.ll\n+    extern \"C\" fn rust_eh_personality(\n         state: uw::_Unwind_State,\n         ue_header: *mut uw::_Unwind_Exception,\n         context: *mut uw::_Unwind_Context\n@@ -366,19 +363,117 @@ pub mod eabi {\n     #[no_mangle] // referenced from rust_try.ll\n     pub extern \"C\" fn rust_eh_personality_catch(\n         state: uw::_Unwind_State,\n-        ue_header: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context\n+        _ue_header: *mut uw::_Unwind_Exception,\n+        _context: *mut uw::_Unwind_Context\n     ) -> uw::_Unwind_Reason_Code\n     {\n         if (state as c_int & uw::_US_ACTION_MASK as c_int)\n                            == uw::_US_VIRTUAL_UNWIND_FRAME as c_int { // search phase\n             uw::_URC_HANDLER_FOUND // catch!\n         }\n         else { // cleanup phase\n-            unsafe {\n-                __gcc_personality_v0(state, ue_header, context)\n+            uw::_URC_INSTALL_CONTEXT\n+        }\n+    }\n+}\n+\n+// Win64 SEH (see http://msdn.microsoft.com/en-us/library/1eyas8tf.aspx)\n+//\n+// This looks a bit convoluted because rather than implementing a native SEH handler,\n+// GCC reuses the same personality routine as for the other architectures by wrapping it\n+// with an \"API translator\" layer (_GCC_specific_handler).\n+\n+#[cfg(windows, target_arch = \"x86_64\", not(test))]\n+#[allow(visible_private_types)]\n+#[allow(non_camel_case_types)]\n+#[allow(unused_variable)]\n+#[allow(uppercase_variables)]\n+pub mod eabi {\n+    use uw = libunwind;\n+    use libc::{c_void, c_int};\n+\n+    struct EXCEPTION_RECORD;\n+    struct CONTEXT;\n+    struct DISPATCHER_CONTEXT;\n+\n+    #[repr(C)]\n+    enum EXCEPTION_DISPOSITION {\n+        ExceptionContinueExecution,\n+        ExceptionContinueSearch,\n+        ExceptionNestedException,\n+        ExceptionCollidedUnwind\n+    }\n+\n+    type _Unwind_Personality_Fn =\n+        extern \"C\" fn(\n+            version: c_int,\n+            actions: uw::_Unwind_Action,\n+            exception_class: uw::_Unwind_Exception_Class,\n+            ue_header: *mut uw::_Unwind_Exception,\n+            context: *mut uw::_Unwind_Context\n+        ) -> uw::_Unwind_Reason_Code;\n+\n+    extern \"C\" {\n+        fn __gcc_personality_seh0(\n+            exceptionRecord: *mut EXCEPTION_RECORD,\n+            establisherFrame: *mut c_void,\n+            contextRecord: *mut CONTEXT,\n+            dispatcherContext: *mut DISPATCHER_CONTEXT\n+        ) -> EXCEPTION_DISPOSITION;\n+\n+        fn _GCC_specific_handler(\n+            exceptionRecord: *mut EXCEPTION_RECORD,\n+            establisherFrame: *mut c_void,\n+            contextRecord: *mut CONTEXT,\n+            dispatcherContext: *mut DISPATCHER_CONTEXT,\n+            personality: _Unwind_Personality_Fn\n+        ) -> EXCEPTION_DISPOSITION;\n+    }\n+\n+    #[lang=\"eh_personality\"]\n+    #[no_mangle] // referenced from rust_try.ll\n+    extern \"C\" fn rust_eh_personality(\n+        exceptionRecord: *mut EXCEPTION_RECORD,\n+        establisherFrame: *mut c_void,\n+        contextRecord: *mut CONTEXT,\n+        dispatcherContext: *mut DISPATCHER_CONTEXT\n+    ) -> EXCEPTION_DISPOSITION\n+    {\n+        unsafe {\n+            __gcc_personality_seh0(exceptionRecord, establisherFrame,\n+                                   contextRecord, dispatcherContext)\n+        }\n+    }\n+\n+    #[no_mangle] // referenced from rust_try.ll\n+    pub extern \"C\" fn rust_eh_personality_catch(\n+        exceptionRecord: *mut EXCEPTION_RECORD,\n+        establisherFrame: *mut c_void,\n+        contextRecord: *mut CONTEXT,\n+        dispatcherContext: *mut DISPATCHER_CONTEXT\n+    ) -> EXCEPTION_DISPOSITION\n+    {\n+        extern \"C\" fn inner(\n+                _version: c_int,\n+                actions: uw::_Unwind_Action,\n+                _exception_class: uw::_Unwind_Exception_Class,\n+                _ue_header: *mut uw::_Unwind_Exception,\n+                _context: *mut uw::_Unwind_Context\n+            ) -> uw::_Unwind_Reason_Code\n+        {\n+            if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n+                uw::_URC_HANDLER_FOUND // catch!\n+            }\n+            else { // cleanup phase\n+                uw::_URC_INSTALL_CONTEXT\n             }\n         }\n+\n+        unsafe {\n+            _GCC_specific_handler(exceptionRecord, establisherFrame,\n+                                  contextRecord, dispatcherContext,\n+                                  inner)\n+        }\n     }\n }\n "}, {"sha": "08bf5e3dface47ced6d9f958cfd50ca16ce94d2f", "filename": "src/rt/rust_try.ll", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/src%2Frt%2Frust_try.ll", "raw_url": "https://github.com/rust-lang/rust/raw/5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea/src%2Frt%2Frust_try.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_try.ll?ref=5a24ee8a9ef1bb3bf250ce39902cf8dfca1a4dea", "patch": "@@ -11,24 +11,40 @@\n ; Rust's try-catch\n ; When f(...) returns normally, the return value is null.\n ; When f(...) throws, the return value is a pointer to the caught exception object.\n-; See also: libstd/rt/unwind.rs\n+; See also: librustrt/unwind.rs\n \n define i8* @rust_try(void (i8*,i8*)* %f, i8* %fptr, i8* %env) {\n \n-\tinvoke void %f(i8* %fptr, i8* %env)\n-\t\tto label %normal\n-\t\tunwind label %catch\n+    %1 = invoke i8* @rust_try_inner(void (i8*,i8*)* %f, i8* %fptr, i8* %env)\n+        to label %normal\n+        unwind label %catch\n \n normal:\n-\tret i8* null\n+    ret i8* %1\n \n catch:\n-\t%1 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @rust_eh_personality_catch to i8*)\n-\t\t\tcatch i8* null ; catch everything\n+    landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @rust_eh_personality_catch to i8*)\n+        catch i8* null\n+    ; execution will never reach here because rust_try_inner's landing pad does not resume unwinds\n+    ret i8* null\n+}\n+\n+define internal i8* @rust_try_inner(void (i8*,i8*)* %f, i8* %fptr, i8* %env) {\n+\n+    invoke void %f(i8* %fptr, i8* %env)\n+        to label %normal\n+        unwind label %catch\n \n-\t; extract and return pointer to the exception object\n+normal:\n+    ret i8* null\n+\n+catch:\n+    %1 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @rust_eh_personality to i8*)\n+        catch i8* null\n+    ; extract and return pointer to the exception object\n     %2 = extractvalue { i8*, i32 } %1, 0\n-\tret i8* %2\n+    ret i8* %2\n }\n \n+declare i32 @rust_eh_personality(...)\n declare i32 @rust_eh_personality_catch(...)"}]}