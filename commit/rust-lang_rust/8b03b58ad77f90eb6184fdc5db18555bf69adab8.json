{"sha": "8b03b58ad77f90eb6184fdc5db18555bf69adab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDNiNThhZDc3ZjkwZWI2MTg0ZmRjNWRiMTg1NTViZjY5YWRhYjg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-19T08:58:11Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-19T08:58:11Z"}, "message": "Support runnables in macros", "tree": {"sha": "b29c930819be639e26972476e353bdb4c39db8cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b29c930819be639e26972476e353bdb4c39db8cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b03b58ad77f90eb6184fdc5db18555bf69adab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b03b58ad77f90eb6184fdc5db18555bf69adab8", "html_url": "https://github.com/rust-lang/rust/commit/8b03b58ad77f90eb6184fdc5db18555bf69adab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b03b58ad77f90eb6184fdc5db18555bf69adab8/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea81d4e52c3565bf8c85158edcf789acacf4534", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea81d4e52c3565bf8c85158edcf789acacf4534", "html_url": "https://github.com/rust-lang/rust/commit/fea81d4e52c3565bf8c85158edcf789acacf4534"}], "stats": {"total": 209, "additions": 136, "deletions": 73}, "files": [{"sha": "ac2d7727ee117aa49e16ea49c89e057a8f702273", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b03b58ad77f90eb6184fdc5db18555bf69adab8/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b03b58ad77f90eb6184fdc5db18555bf69adab8/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=8b03b58ad77f90eb6184fdc5db18555bf69adab8", "patch": "@@ -183,12 +183,7 @@ fn runnable_action(\n ) -> Option<HoverAction> {\n     match def {\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Module(it) => match it.definition_source(sema.db).value {\n-                ModuleSource::Module(it) => {\n-                    runnable_mod(&sema, it).map(|it| HoverAction::Runnable(it))\n-                }\n-                _ => None,\n-            },\n+            ModuleDef::Module(it) => runnable_mod(&sema, it).map(|it| HoverAction::Runnable(it)),\n             ModuleDef::Function(func) => {\n                 let src = func.source(sema.db)?;\n                 if src.file_id != file_id.into() {"}, {"sha": "8976f1080f58588d880c47ea20ec101f03d04784", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 135, "deletions": 67, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/8b03b58ad77f90eb6184fdc5db18555bf69adab8/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b03b58ad77f90eb6184fdc5db18555bf69adab8/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=8b03b58ad77f90eb6184fdc5db18555bf69adab8", "patch": "@@ -6,7 +6,7 @@ use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n use ide_db::{defs::Definition, RootDatabase};\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, AstNode, AttrsOwner, ModuleItemOwner},\n+    ast::{self, AstNode, AttrsOwner},\n     match_ast, SyntaxNode,\n };\n \n@@ -95,27 +95,44 @@ impl Runnable {\n // |===\n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n-    let source_file = sema.parse(file_id);\n-    source_file\n-        .syntax()\n-        .descendants()\n-        .filter_map(|item| {\n-            let runnable = match_ast! {\n-                match item {\n-                    ast::Fn(func) => {\n-                        let def = sema.to_def(&func)?;\n-                        runnable_fn(&sema, def)\n-                    },\n-                    ast::Module(it) => runnable_mod(&sema, it),\n-                    _ => None,\n-                }\n-            };\n-            runnable.or_else(|| match doc_owner_to_def(&sema, item)? {\n-                Definition::ModuleDef(def) => module_def_doctest(&sema, def),\n+    let module = match sema.to_module_def(file_id) {\n+        None => return vec![],\n+        Some(it) => it,\n+    };\n+\n+    runnables_mod(&sema, module)\n+}\n+\n+fn runnables_mod(sema: &Semantics<RootDatabase>, module: hir::Module) -> Vec<Runnable> {\n+    let mut res: Vec<Runnable> = module\n+        .declarations(sema.db)\n+        .into_iter()\n+        .filter_map(|def| {\n+            let runnable = match def {\n+                hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n+                hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n                 _ => None,\n-            })\n+            };\n+            runnable.or_else(|| module_def_doctest(&sema, def))\n         })\n-        .collect()\n+        .collect();\n+\n+    res.extend(module.impl_defs(sema.db).into_iter().flat_map(|it| it.items(sema.db)).filter_map(\n+        |def| match def {\n+            hir::AssocItem::Function(it) => {\n+                runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n+            }\n+            hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n+            hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n+        },\n+    ));\n+\n+    res.extend(module.declarations(sema.db).into_iter().flat_map(|def| match def {\n+        hir::ModuleDef::Module(it) => runnables_mod(sema, it),\n+        _ => vec![],\n+    }));\n+\n+    res\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n@@ -150,26 +167,16 @@ pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) ->\n     Some(Runnable { nav, kind, cfg })\n }\n \n-pub(crate) fn runnable_mod(\n-    sema: &Semantics<RootDatabase>,\n-    module: ast::Module,\n-) -> Option<Runnable> {\n-    if !has_test_function_or_multiple_test_submodules(&module) {\n+pub(crate) fn runnable_mod(sema: &Semantics<RootDatabase>, def: hir::Module) -> Option<Runnable> {\n+    if !has_test_function_or_multiple_test_submodules(sema, &def) {\n         return None;\n     }\n-    let module_def = sema.to_def(&module)?;\n-\n-    let path = module_def\n-        .path_to_root(sema.db)\n-        .into_iter()\n-        .rev()\n-        .filter_map(|it| it.name(sema.db))\n-        .join(\"::\");\n+    let path =\n+        def.path_to_root(sema.db).into_iter().rev().filter_map(|it| it.name(sema.db)).join(\"::\");\n \n-    let def = sema.to_def(&module)?;\n     let attrs = def.attrs(sema.db);\n     let cfg = attrs.cfg();\n-    let nav = module_def.to_nav(sema.db);\n+    let nav = def.to_nav(sema.db);\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n@@ -289,30 +296,31 @@ fn has_runnable_doc_test(attrs: &hir::Attrs) -> bool {\n \n // We could create runnables for modules with number_of_test_submodules > 0,\n // but that bloats the runnables for no real benefit, since all tests can be run by the submodule already\n-fn has_test_function_or_multiple_test_submodules(module: &ast::Module) -> bool {\n-    if let Some(item_list) = module.item_list() {\n-        let mut number_of_test_submodules = 0;\n-\n-        for item in item_list.items() {\n-            match item {\n-                ast::Item::Fn(f) => {\n-                    if test_related_attribute(&f).is_some() {\n+fn has_test_function_or_multiple_test_submodules(\n+    sema: &Semantics<RootDatabase>,\n+    module: &hir::Module,\n+) -> bool {\n+    let mut number_of_test_submodules = 0;\n+\n+    for item in module.declarations(sema.db) {\n+        match item {\n+            hir::ModuleDef::Function(f) => {\n+                if let Some(it) = f.source(sema.db) {\n+                    if test_related_attribute(&it.value).is_some() {\n                         return true;\n                     }\n                 }\n-                ast::Item::Module(submodule) => {\n-                    if has_test_function_or_multiple_test_submodules(&submodule) {\n-                        number_of_test_submodules += 1;\n-                    }\n+            }\n+            hir::ModuleDef::Module(submodule) => {\n+                if has_test_function_or_multiple_test_submodules(sema, &submodule) {\n+                    number_of_test_submodules += 1;\n                 }\n-                _ => (),\n             }\n+            _ => (),\n         }\n-\n-        number_of_test_submodules > 1\n-    } else {\n-        false\n     }\n+\n+    number_of_test_submodules > 1\n }\n \n #[cfg(test)]\n@@ -748,6 +756,21 @@ mod root_tests {\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 202..286,\n+                            focus_range: 206..220,\n+                            name: \"nested_tests_2\",\n+                            kind: Module,\n+                        },\n+                        kind: TestMod {\n+                            path: \"root_tests::nested_tests_0::nested_tests_2\",\n+                        },\n+                        cfg: None,\n+                    },\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n@@ -788,21 +811,6 @@ mod root_tests {\n                         },\n                         cfg: None,\n                     },\n-                    Runnable {\n-                        nav: NavigationTarget {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n-                            full_range: 202..286,\n-                            focus_range: 206..220,\n-                            name: \"nested_tests_2\",\n-                            kind: Module,\n-                        },\n-                        kind: TestMod {\n-                            path: \"root_tests::nested_tests_0::nested_tests_2\",\n-                        },\n-                        cfg: None,\n-                    },\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n@@ -982,4 +990,64 @@ impl Foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_runnables_in_macro() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+macro_rules! gen {\n+    () => {\n+        #[test]\n+        fn foo_test() {\n+        }\n+    }\n+}\n+mod tests {\n+    gen!();\n+}\n+\"#,\n+            &[&TEST, &TEST],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 90..115,\n+                            focus_range: 94..99,\n+                            name: \"tests\",\n+                            kind: Module,\n+                        },\n+                        kind: TestMod {\n+                            path: \"tests\",\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 106..113,\n+                            focus_range: 106..113,\n+                            name: \"foo_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n }"}]}