{"sha": "ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTE4Yjc1MGRiOGU0YzQ2YTQyZDlhN2JhNjYyMWE0ODAwZTllYWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T01:01:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T01:01:42Z"}, "message": "Rollup merge of #61207 - taiki-e:arbitrary_self_types-lifetime-elision-2, r=Centril\n\nAllow lifetime elision in `Pin<&(mut) Self>`\n\nThis PR changes `self: &(mut) S` elision rules to instead visit the type of `self` and look for `&(mut) S` (where `is_self_ty(S)`) within it\n\nReplaces #60944\n\nCloses #52675\n\nr? @eddyb\ncc @cramertj @Centril @withoutboats @scottmcm", "tree": {"sha": "72c40537c6c3bbe1df45b9d36dedeb992e2a24bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c40537c6c3bbe1df45b9d36dedeb992e2a24bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPPP2CRBK7hj4Ov3rIwAAdHIIAF6lNR4gv5e0xZrjC0p8NnMv\nvnC9uKbsRkZ6TaWpCBOFzm0Y+lnZRBGvGZlXEHCAzNowjZA0ds8JywEzK2WtGBks\n+4OlVFycFh+MSMmMqNdLkBNqhj/4TFY3l1KAatfSrLNGp+pETGb6ZlosQAEq9fYd\nlbzdQRKS1wKXWmDVlOuwhqtgD/0ju42EY7hoGsuMqLqcCBHGPdBdY0d+z7MCZ/YB\n71hyQ24ffCU6VUaIenki1IB9sNu3RHO1zUA6GiM3flItvyNz88+tuhs+oEo7Jrn4\n+OLF/oPyuJ6LyrnAdcJidKERES99tNVPP725rFgCUATDcdaAVIgU8zvhn0uXOUE=\n=p57r\n-----END PGP SIGNATURE-----\n", "payload": "tree 72c40537c6c3bbe1df45b9d36dedeb992e2a24bc\nparent c798dffac9dc8c82374db48f5b474690cc6e9686\nparent 05f67a297a25dc33f2d739dbccc42f44bc6d7ab9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564275702 +0200\ncommitter GitHub <noreply@github.com> 1564275702 +0200\n\nRollup merge of #61207 - taiki-e:arbitrary_self_types-lifetime-elision-2, r=Centril\n\nAllow lifetime elision in `Pin<&(mut) Self>`\n\nThis PR changes `self: &(mut) S` elision rules to instead visit the type of `self` and look for `&(mut) S` (where `is_self_ty(S)`) within it\n\nReplaces #60944\n\nCloses #52675\n\nr? @eddyb\ncc @cramertj @Centril @withoutboats @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "html_url": "https://github.com/rust-lang/rust/commit/ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c798dffac9dc8c82374db48f5b474690cc6e9686", "url": "https://api.github.com/repos/rust-lang/rust/commits/c798dffac9dc8c82374db48f5b474690cc6e9686", "html_url": "https://github.com/rust-lang/rust/commit/c798dffac9dc8c82374db48f5b474690cc6e9686"}, {"sha": "05f67a297a25dc33f2d739dbccc42f44bc6d7ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f67a297a25dc33f2d739dbccc42f44bc6d7ab9", "html_url": "https://github.com/rust-lang/rust/commit/05f67a297a25dc33f2d739dbccc42f44bc6d7ab9"}], "stats": {"total": 1593, "additions": 1560, "deletions": 33}, "files": [{"sha": "e2b1b54cef39f8ac423b1ba888ea7d1f783df666", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 62, "deletions": 33, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -2146,48 +2146,77 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // First (determined here), if `self` is by-reference, then the\n         // implied output region is the region of the self parameter.\n         if has_self {\n-            // Look for `self: &'a Self` - also desugared from `&'a self`,\n-            // and if that matches, use it for elision and return early.\n-            let is_self_ty = |res: Res| {\n-                if let Res::SelfTy(..) = res {\n-                    return true;\n-                }\n-\n-                // Can't always rely on literal (or implied) `Self` due\n-                // to the way elision rules were originally specified.\n-                let impl_self = impl_self.map(|ty| &ty.node);\n-                if let Some(&hir::TyKind::Path(hir::QPath::Resolved(None, ref path))) = impl_self {\n-                    match path.res {\n-                        // Whitelist the types that unambiguously always\n-                        // result in the same type constructor being used\n-                        // (it can't differ between `Self` and `self`).\n-                        Res::Def(DefKind::Struct, _)\n-                        | Res::Def(DefKind::Union, _)\n-                        | Res::Def(DefKind::Enum, _)\n-                        | Res::PrimTy(_) => {\n-                            return res == path.res\n+            struct SelfVisitor<'a> {\n+                map: &'a NamedRegionMap,\n+                impl_self: Option<&'a hir::TyKind>,\n+                lifetime: Set1<Region>,\n+            }\n+\n+            impl SelfVisitor<'_> {\n+                // Look for `self: &'a Self` - also desugared from `&'a self`,\n+                // and if that matches, use it for elision and return early.\n+                fn is_self_ty(&self, res: Res) -> bool {\n+                    if let Res::SelfTy(..) = res {\n+                        return true;\n+                    }\n+\n+                    // Can't always rely on literal (or implied) `Self` due\n+                    // to the way elision rules were originally specified.\n+                    if let Some(&hir::TyKind::Path(hir::QPath::Resolved(None, ref path))) =\n+                        self.impl_self\n+                    {\n+                        match path.res {\n+                            // Whitelist the types that unambiguously always\n+                            // result in the same type constructor being used\n+                            // (it can't differ between `Self` and `self`).\n+                            Res::Def(DefKind::Struct, _)\n+                            | Res::Def(DefKind::Union, _)\n+                            | Res::Def(DefKind::Enum, _)\n+                            | Res::PrimTy(_) => {\n+                                return res == path.res\n+                            }\n+                            _ => {}\n                         }\n-                        _ => {}\n                     }\n+\n+                    false\n                 }\n+            }\n \n-                false\n-            };\n+            impl<'a> Visitor<'a> for SelfVisitor<'a> {\n+                fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+                    NestedVisitorMap::None\n+                }\n \n-            if let hir::TyKind::Rptr(lifetime_ref, ref mt) = inputs[0].node {\n-                if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.node {\n-                    if is_self_ty(path.res) {\n-                        if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n-                            let scope = Scope::Elision {\n-                                elide: Elide::Exact(lifetime),\n-                                s: self.scope,\n-                            };\n-                            self.with(scope, |_, this| this.visit_ty(output));\n-                            return;\n+                fn visit_ty(&mut self, ty: &'a hir::Ty) {\n+                    if let hir::TyKind::Rptr(lifetime_ref, ref mt) = ty.node {\n+                        if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = mt.ty.node\n+                        {\n+                            if self.is_self_ty(path.res) {\n+                                if let Some(lifetime) = self.map.defs.get(&lifetime_ref.hir_id) {\n+                                    self.lifetime.insert(*lifetime);\n+                                }\n+                            }\n                         }\n                     }\n+                    intravisit::walk_ty(self, ty)\n                 }\n             }\n+\n+            let mut visitor = SelfVisitor {\n+                map: self.map,\n+                impl_self: impl_self.map(|ty| &ty.node),\n+                lifetime: Set1::Empty,\n+            };\n+            visitor.visit_ty(&inputs[0]);\n+            if let Set1::One(lifetime) = visitor.lifetime {\n+                let scope = Scope::Elision {\n+                    elide: Elide::Exact(lifetime),\n+                    s: self.scope,\n+                };\n+                self.with(scope, |_, this| this.visit_ty(output));\n+                return;\n+            }\n         }\n \n         // Second, if there was exactly one lifetime (either a substitution or a"}, {"sha": "3002013881249c8c526681f9c70e636ab8bf8c88", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,60 @@\n+// check-pass\n+\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn pin_ref(self: Pin<&Self>) -> Pin<&Self> { self }\n+\n+    fn pin_mut(self: Pin<&mut Self>) -> Pin<&mut Self> { self }\n+\n+    fn pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> Pin<Pin<Pin<&Self>>> { self }\n+\n+    fn pin_ref_impl_trait(self: Pin<&Self>) -> impl Clone + '_ { self }\n+\n+    fn b(self: Pin<&Foo>, f: &Foo) -> Pin<&Foo> { self }\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> Alias<&Self> { self }\n+}\n+\n+struct Bar<T: Unpin, U: Unpin> {\n+    field1: T,\n+    field2: U,\n+}\n+\n+impl<T: Unpin, U: Unpin> Bar<T, U> {\n+    fn fields(self: Pin<&mut Self>) -> (Pin<&mut T>, Pin<&mut U>) {\n+        let this = self.get_mut();\n+        (Pin::new(&mut this.field1), Pin::new(&mut this.field2))\n+    }\n+}\n+\n+trait AsyncBufRead {\n+    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>)\n+        -> Poll<std::io::Result<&[u8]>>;\n+}\n+\n+struct Baz(Vec<u8>);\n+\n+impl AsyncBufRead for Baz {\n+    fn poll_fill_buf(self: Pin<&mut Self>, cx: &mut Context<'_>)\n+        -> Poll<std::io::Result<&[u8]>>\n+    {\n+        Poll::Ready(Ok(&self.get_mut().0))\n+    }\n+}\n+\n+fn main() {\n+    let mut foo = Foo;\n+    { Pin::new(&foo).pin_ref() };\n+    { Pin::new(&mut foo).pin_mut() };\n+    { Pin::new(Pin::new(Pin::new(&foo))).pin_pin_pin_ref() };\n+    { Pin::new(&foo).pin_ref_impl_trait() };\n+    let mut bar = Bar { field1: 0u8, field2: 1u8 };\n+    { Pin::new(&mut bar).fields() };\n+}"}, {"sha": "dcfc9ba511d740a7ec03c0e2a25080a81e69fb5d", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:31\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                    -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n+   |                    |\n+   |                    let's call the lifetime of this reference `'1`\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                               ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ad8959727cbee5abb0405a4dd7ebc78fb618e0f6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,13 @@\n+// compile-fail\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn f(self: Pin<&Self>) -> impl Clone { self } //~ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn main() {\n+    { Pin::new(&Foo).f() };\n+}"}, {"sha": "5118280e7ec0cbde38da93b7c01d6a0a10a5d111", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,20 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:44\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                               ----------   ^^^^ ...but this borrow...\n+   |                               |\n+   |                               this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8:5\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:8:5\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                               ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8a0f1a804ad826efbadab059e809da3b39ff5499", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,28 @@\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+   |\n+LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                    -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    |         |\n+   |                    |         let's call the lifetime of this reference `'1`\n+   |                    let's call the lifetime of this reference `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:69\n+   |\n+LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                    -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    |          |\n+   |                    |          let's call the lifetime of this reference `'1`\n+   |                    let's call the lifetime of this reference `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+   |\n+LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |            --  ---- has type `std::pin::Pin<&'1 Foo>`    ^^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |            |\n+   |            lifetime `'a` defined here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "fc5f94201b81aecc82b63c2e6e0b18061a490720", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,18 @@\n+// compile-fail\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f } //~ ERROR E0623\n+\n+    fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) } //~ ERROR E0623\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+}\n+\n+fn main() {}"}, {"sha": "3296e14f806e1822d61cc39f4139e224f38a8304", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,26 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:46\n+   |\n+LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                              ----     ----   ^ ...but data from `f` is returned here\n+   |                              |\n+   |                              this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:76\n+   |\n+LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                               ----              -----------------          ^ ...but data from `f` is returned here\n+   |                               |\n+   |                               this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n+   |\n+LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                         ------     ---   ^^^ ...but data from `arg` is returned here\n+   |                                         |\n+   |                                         this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7ace2e0c89039ba65da249ce4246b4285a44293e", "filename": "src/test/ui/self/elision/README.md", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,44 @@\n+Test cases intended to document behavior and try to exhaustively\n+explore the combinations.\n+\n+## Confidence\n+\n+These tests are not yet considered 100% normative, in that some\n+aspects of the current behavior are not desirable. This is expressed\n+in the \"confidence\" field in the following table. Values:\n+\n+| Confidence | Interpretation |\n+| --- | --- |\n+| 100% | this will remain recommended behavior |\n+| 75% | unclear whether we will continue to accept this |\n+| 50% | this will likely be deprecated but remain valid |\n+| 25% | this could change in the future |\n+| 0% | this is definitely bogus and will likely change in the future in *some* way |\n+\n+## Tests\n+\n+| Test file | `Self` type | Pattern | Current elision behavior | Confidence |\n+| --- | --- | --- | --- | --- |\n+| `self.rs` | `Struct` | `Self` | ignore `self` parameter | 100% |\n+| `struct.rs` | `Struct` | `Struct` | ignore `self` parameter | 100% |\n+| `alias.rs` | `Struct` | `Alias` | ignore `self` parameter | 100% |\n+| `ref-self.rs` | `Struct` | `&Self` | take lifetime from `&Self` | 100% |\n+| `ref-mut-self.rs` | `Struct` | `&mut Self` | take lifetime from `&mut Self` | 100% |\n+| `ref-struct.rs` | `Struct` | `&Struct` | take lifetime from `&Self` | 50% |\n+| `ref-mut-struct.rs` | `Struct` | `&mut Struct` | take lifetime from `&mut Self` | 50% |\n+| `ref-alias.rs` | `Struct` | `&Alias` | ignore `Alias` | 0% |\n+| `ref-mut-alias.rs` | `Struct` | `&mut Alias` | ignore `Alias` | 0% |\n+| `lt-self.rs` | `Struct<'a>` | `Self` | ignore `Self` (and hence `'a`) | 25% |\n+| `lt-struct.rs` | `Struct<'a>` | `Self` | ignore `Self` (and hence `'a`) | 0% |\n+| `lt-alias.rs`   | `Alias<'a>` | `Self` | ignore `Self` (and hence `'a`) | 0% |\n+| `lt-ref-self.rs` | `Struct<'a>` | `&Self` | take lifetime from `&Self` | 75% |\n+\n+In each case, we test the following patterns:\n+\n+- `self: XXX`\n+- `self: Box<XXX>`\n+- `self: Pin<XXX>`\n+- `self: Box<Box<XXX>>`\n+- `self: Box<Pin<XXX>>`\n+\n+In the non-reference cases, `Pin` causes errors so we substitute `Rc`."}, {"sha": "b5aacfaeec427355b0d59bc3c153270f42448e1a", "filename": "src/test/ui/self/elision/alias.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    fn alias(self: Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_Alias(self: Box<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn rc_Alias(self: Rc<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_Alias(self: Box<Box<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_rc_Alias(self: Box<Rc<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "163eb49383a877169f9e6ae0fd8bc69cab7f669a", "filename": "src/test/ui/self/elision/assoc.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    fn assoc(self: <Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_AssocType(self: Box<<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn rc_AssocType(self: Rc<<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_AssocType(self: Box<Box<<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_rc_AssocType(self: Box<Rc<<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "df2300deda25fd3b40a989f45b0238a611620e63", "filename": "src/test/ui/self/elision/lt-alias.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+type Alias<'a> = Struct<'a>;\n+\n+impl<'a> Alias<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Alias(self: Alias<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Alias(self: Box<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Alias(self: Box<Box<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Alias(self: Rc<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Alias(self: Box<Rc<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "70573598fcb16b4cbd9d90c404e26740601c0378", "filename": "src/test/ui/self/elision/lt-assoc.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,44 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Trait for Struct<'a> {\n+    type AssocType = Self;\n+}\n+\n+impl<'a> Struct<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_AssocType(self: <Struct<'a> as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_AssocType(self: Box<<Struct<'a> as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_AssocType(self: Box<Box<<Struct<'a> as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_AssocType(self: Rc<<Struct<'a> as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_AssocType(self: Box<Rc<<Struct<'a> as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "e97a01e746d4b8e5a52bb872a6d6e1ed6466c339", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,62 @@\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self.rs:12:9\n+   |\n+LL |     fn ref_self(&self, f: &u32) -> &u32 {\n+   |                 -         - let's call the lifetime of this reference `'1`\n+   |                 |\n+   |                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self.rs:18:9\n+   |\n+LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                       -         - let's call the lifetime of this reference `'1`\n+   |                       |\n+   |                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self.rs:22:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                               -          - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self.rs:26:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                               -          - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self.rs:30:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                       -           - let's call the lifetime of this reference `'1`\n+   |                                       |\n+   |                                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self.rs:34:9\n+   |\n+LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                   -           - let's call the lifetime of this reference `'1`\n+   |                                   |\n+   |                                   let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "8abf2876a5c1b155136dd6fbe39fe872a7661aca", "filename": "src/test/ui/self/elision/lt-ref-self.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,38 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct<'a> { data: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    // Test using `&self` sugar:\n+\n+    fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f73b3eddd38215aa5ad164abfff6d337fec839e6", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,62 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:12:9\n+   |\n+LL |     fn ref_self(&self, f: &u32) -> &u32 {\n+   |                           ----     ----\n+   |                           |\n+   |                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:18:9\n+   |\n+LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                 ----     ----\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:22:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:26:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:30:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:34:9\n+   |\n+LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                               ----     ----\n+   |                                               |\n+   |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "9b0ee5e42a51ade616bb70d5df839257c7943155", "filename": "src/test/ui/self/elision/lt-self.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+use std::rc::Rc;\n+\n+struct Struct<'a> {\n+    x: &'a u32\n+}\n+\n+impl<'a> Struct<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    // N/A\n+    //fn take_Pin_Self(self: Pin<Self>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+\n+    // N/A\n+    //fn take_Box_Pin_Self(self: Box<Pin<Self>>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+}\n+\n+fn main() { }"}, {"sha": "e41dfbbe0bf0d1265b61863cdb05dde49b12b6ec", "filename": "src/test/ui/self/elision/lt-struct.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Struct(self: Struct<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Struct(self: Box<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Struct(self: Box<Box<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Struct(self: Rc<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Struct(self: Box<Rc<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f39613d0c90072edb30f67e9bb485503f4a083fb", "filename": "src/test/ui/self/elision/multiple-ref-self.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using multiple `&Self`:\n+\n+    fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+        f\n+    }\n+\n+    fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "d83ac612235e35766fc89c03863fd0b9ffbfb1b1", "filename": "src/test/ui/self/elision/ref-alias.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+    //\n+    // FIXME. We currently fail to recognize this as the self type, which\n+    // feels like a bug.\n+\n+    fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f9354bc884710e42e21e1adb0d6b2f22d1ec3d25", "filename": "src/test/ui/self/elision/ref-assoc.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "395816f8f5d80f75aeaedd719bfd05663c8704d3", "filename": "src/test/ui/self/elision/ref-mut-alias.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "3a8ae3fdcba8c0ff759472b613d5d56bb719fde6", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,62 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self.rs:12:9\n+   |\n+LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                 -             - let's call the lifetime of this reference `'1`\n+   |                 |\n+   |                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self.rs:18:9\n+   |\n+LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                       -             - let's call the lifetime of this reference `'1`\n+   |                       |\n+   |                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self.rs:22:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                               -              - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self.rs:26:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                               -              - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self.rs:30:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                       -               - let's call the lifetime of this reference `'1`\n+   |                                       |\n+   |                                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self.rs:34:9\n+   |\n+LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                       -               - let's call the lifetime of this reference `'1`\n+   |                                       |\n+   |                                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a7ea47bb7f6de87e037492dff3b737b6254ef465", "filename": "src/test/ui/self/elision/ref-mut-self.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,38 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut self` sugar:\n+\n+    fn ref_self(&mut self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&mut Self` explicitly:\n+\n+    fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "37984cd72fbace0d3d7cdd38d830834ee0fbf551", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,62 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:12:9\n+   |\n+LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                               ----     ----\n+   |                               |\n+   |                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:18:9\n+   |\n+LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                     ----     ----\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:22:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:26:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:30:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                       ----     ----\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:34:9\n+   |\n+LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                       ----     ----\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "66152ba40a5f5bdf51eeeb82a93990c87d28cf3f", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,52 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct.rs:12:9\n+   |\n+LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                         -               - let's call the lifetime of this reference `'1`\n+   |                         |\n+   |                         let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct.rs:16:9\n+   |\n+LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                 -                - let's call the lifetime of this reference `'1`\n+   |                                 |\n+   |                                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct.rs:20:9\n+   |\n+LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                 -                - let's call the lifetime of this reference `'1`\n+   |                                 |\n+   |                                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct.rs:24:9\n+   |\n+LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                         -                 - let's call the lifetime of this reference `'1`\n+   |                                         |\n+   |                                         let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct.rs:28:9\n+   |\n+LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                         -                 - let's call the lifetime of this reference `'1`\n+   |                                         |\n+   |                                         let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "795ddf8ac1354066681f475f85c027ca48c6b536", "filename": "src/test/ui/self/elision/ref-mut-struct.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,32 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut Struct` explicitly:\n+\n+    fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "2a4826905b94a0b8e1d04169a4b3baae6e20a160", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,52 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:12:9\n+   |\n+LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                         ----     ----\n+   |                                         |\n+   |                                         this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:16:9\n+   |\n+LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                  ----     ----\n+   |                                                  |\n+   |                                                  this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:20:9\n+   |\n+LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                  ----     ----\n+   |                                                  |\n+   |                                                  this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:24:9\n+   |\n+LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                           ----     ----\n+   |                                                           |\n+   |                                                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:28:9\n+   |\n+LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                           ----     ----\n+   |                                                           |\n+   |                                                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "20045be0527a4a233b03d0db20e26525a58906cc", "filename": "src/test/ui/self/elision/ref-self.nll.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,72 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:21:9\n+   |\n+LL |     fn ref_self(&self, f: &u32) -> &u32 {\n+   |                 -         - let's call the lifetime of this reference `'1`\n+   |                 |\n+   |                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:27:9\n+   |\n+LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                       -         - let's call the lifetime of this reference `'1`\n+   |                       |\n+   |                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:31:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                               -          - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:35:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                               -          - let's call the lifetime of this reference `'1`\n+   |                               |\n+   |                               let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:39:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                       -           - let's call the lifetime of this reference `'1`\n+   |                                       |\n+   |                                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:43:9\n+   |\n+LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                       -           - let's call the lifetime of this reference `'1`\n+   |                                       |\n+   |                                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self.rs:47:9\n+   |\n+LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                      -                - let's call the lifetime of this reference `'1`\n+   |                                      |\n+   |                                      let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "e389d8518ada4f6a375e4d48c8cba91324aed168", "filename": "src/test/ui/self/elision/ref-self.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,51 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using `&self` sugar:\n+\n+    fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "611498f18da4232030acf5c7713950cd75c96186", "filename": "src/test/ui/self/elision/ref-self.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,72 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:21:9\n+   |\n+LL |     fn ref_self(&self, f: &u32) -> &u32 {\n+   |                           ----     ----\n+   |                           |\n+   |                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:27:9\n+   |\n+LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                 ----     ----\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:31:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:35:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:39:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:43:9\n+   |\n+LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:47:9\n+   |\n+LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                       ---     ---\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "a258bc9f7439038b5f6498418312edab3ae495c5", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,52 @@\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct.rs:12:9\n+   |\n+LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                         -           - let's call the lifetime of this reference `'1`\n+   |                         |\n+   |                         let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct.rs:16:9\n+   |\n+LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                 -            - let's call the lifetime of this reference `'1`\n+   |                                 |\n+   |                                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct.rs:20:9\n+   |\n+LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                 -            - let's call the lifetime of this reference `'1`\n+   |                                 |\n+   |                                 let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct.rs:24:9\n+   |\n+LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                         -             - let's call the lifetime of this reference `'1`\n+   |                                         |\n+   |                                         let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct.rs:28:9\n+   |\n+LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                     -             - let's call the lifetime of this reference `'1`\n+   |                                     |\n+   |                                     let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "342d6d2b36357bffa93dc9d84a556e6f716637df", "filename": "src/test/ui/self/elision/ref-struct.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,32 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&Struct` explicitly:\n+\n+    fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "186e651c143bf547030ba09beea8de646230a070", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,52 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:12:9\n+   |\n+LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                     ----     ----\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:16:9\n+   |\n+LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:20:9\n+   |\n+LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:24:9\n+   |\n+LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                       ----     ----\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:28:9\n+   |\n+LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "dbcef71ba14fc451ad33cc33ecc860066ab287b2", "filename": "src/test/ui/self/elision/self.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "227e993bd3c61bff39d00748017868088d2ed9b4", "filename": "src/test/ui/self/elision/struct.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    fn ref_Struct(self: Struct, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_Struct(self: Box<Struct>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn rc_Struct(self: Rc<Struct>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_Struct(self: Box<Box<Struct>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_rc_Struct(self: Box<Rc<Struct>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f04bd83ab6e4c4360467105181cf12c2c1fc990c", "filename": "src/test/ui/self/self_lifetime.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Fself_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece18b750db8e4c46a42d9a7ba6621a4800e9eae/src%2Ftest%2Fui%2Fself%2Fself_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime.rs?ref=ece18b750db8e4c46a42d9a7ba6621a4800e9eae", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+// https://github.com/rust-lang/rust/pull/60944#issuecomment-495346120\n+\n+struct Foo<'a>(&'a ());\n+impl<'a> Foo<'a> {\n+    fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+}\n+\n+type Alias = Foo<'static>;\n+impl Alias {\n+    fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n+}\n+\n+fn main() {}"}]}