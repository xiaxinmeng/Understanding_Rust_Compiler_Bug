{"sha": "699fc80780b50d302a74475ff9240995d8117516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OWZjODA3ODBiNTBkMzAyYTc0NDc1ZmY5MjQwOTk1ZDgxMTc1MTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-27T17:42:42Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-27T17:42:42Z"}, "message": "Address review comments", "tree": {"sha": "44bffe9592b529ea156ecc8511454a2bc0665bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bffe9592b529ea156ecc8511454a2bc0665bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699fc80780b50d302a74475ff9240995d8117516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699fc80780b50d302a74475ff9240995d8117516", "html_url": "https://github.com/rust-lang/rust/commit/699fc80780b50d302a74475ff9240995d8117516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699fc80780b50d302a74475ff9240995d8117516/comments", "author": null, "committer": null, "parents": [{"sha": "c68e65251c86ffdb21aecec56ec45e303d952d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c68e65251c86ffdb21aecec56ec45e303d952d79", "html_url": "https://github.com/rust-lang/rust/commit/c68e65251c86ffdb21aecec56ec45e303d952d79"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "969f82cc5ae1bbf9ca32e778d1384df6c0defd79", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/699fc80780b50d302a74475ff9240995d8117516/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699fc80780b50d302a74475ff9240995d8117516/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=699fc80780b50d302a74475ff9240995d8117516", "patch": "@@ -859,6 +859,7 @@ fn confirm_impl_candidate<'cx,'tcx>(\n     // there don't seem to be nicer accessors to these:\n     let impl_or_trait_items_map = selcx.tcx().impl_or_trait_items.borrow();\n \n+    // Look for the associated type in the impl\n     for impl_item in &selcx.tcx().impl_items.borrow()[&impl_vtable.impl_def_id] {\n         if let ty::TypeTraitItem(ref assoc_ty) = impl_or_trait_items_map[&impl_item.def_id()] {\n             if assoc_ty.name == obligation.predicate.item_name {\n@@ -868,6 +869,7 @@ fn confirm_impl_candidate<'cx,'tcx>(\n         }\n     }\n \n+    // It is not in the impl - get the default from the trait.\n     let trait_ref = obligation.predicate.trait_ref;\n     for trait_item in ty::trait_items(selcx.tcx(), trait_ref.def_id).iter() {\n         if let &ty::TypeTraitItem(ref assoc_ty) = trait_item {"}]}