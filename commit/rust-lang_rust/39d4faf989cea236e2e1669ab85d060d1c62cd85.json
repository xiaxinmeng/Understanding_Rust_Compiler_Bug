{"sha": "39d4faf989cea236e2e1669ab85d060d1c62cd85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDRmYWY5ODljZWEyMzZlMmUxNjY5YWI4NWQwNjBkMWM2MmNkODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T15:04:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T15:04:15Z"}, "message": "Auto merge of #27025 - dotdash:issue-26484, r=pnkfelix\n\nSee the commits for details\r\n\r\nr? @arielb1", "tree": {"sha": "b09f28f9ef799f0f1378f3775446209519e7200d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09f28f9ef799f0f1378f3775446209519e7200d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d4faf989cea236e2e1669ab85d060d1c62cd85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d4faf989cea236e2e1669ab85d060d1c62cd85", "html_url": "https://github.com/rust-lang/rust/commit/39d4faf989cea236e2e1669ab85d060d1c62cd85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d4faf989cea236e2e1669ab85d060d1c62cd85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e51763e6428580f2b3275cd7076492376801a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e51763e6428580f2b3275cd7076492376801a1e", "html_url": "https://github.com/rust-lang/rust/commit/4e51763e6428580f2b3275cd7076492376801a1e"}, {"sha": "3d65c7ff849bea9cd44fc652396d50486396f867", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d65c7ff849bea9cd44fc652396d50486396f867", "html_url": "https://github.com/rust-lang/rust/commit/3d65c7ff849bea9cd44fc652396d50486396f867"}], "stats": {"total": 112, "additions": 84, "deletions": 28}, "files": [{"sha": "5f17197a4b9a746fed0458a0ee19c180067966c3", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=39d4faf989cea236e2e1669ab85d060d1c62cd85", "patch": "@@ -796,12 +796,31 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             }\n         }\n         ty::TyBareFn(_, ref barefnty) => {\n-            subroutine_type_metadata(cx, unique_type_id, &barefnty.sig, usage_site_span)\n+            let fn_metadata = subroutine_type_metadata(cx,\n+                                                       unique_type_id,\n+                                                       &barefnty.sig,\n+                                                       usage_site_span).metadata;\n+            match debug_context(cx).type_map\n+                                   .borrow()\n+                                   .find_metadata_for_unique_id(unique_type_id) {\n+                Some(metadata) => return metadata,\n+                None => { /* proceed normally */ }\n+            };\n+\n+            // This is actually a function pointer, so wrap it in pointer DI\n+            MetadataCreationResult::new(pointer_type_metadata(cx, t, fn_metadata), false)\n+\n         }\n         ty::TyClosure(def_id, substs) => {\n             let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables);\n-            let sig = infcx.closure_type(def_id, substs).sig;\n-            subroutine_type_metadata(cx, unique_type_id, &sig, usage_site_span)\n+            let upvars = infcx.closure_upvars(def_id, substs).unwrap();\n+            let upvar_types = upvars.iter().map(|u| u.ty).collect::<Vec<_>>();\n+\n+            prepare_tuple_metadata(cx,\n+                                   t,\n+                                   &upvar_types[..],\n+                                   unique_type_id,\n+                                   usage_site_span).finalize(cx)\n         }\n         ty::TyStruct(def_id, substs) => {\n             prepare_struct_metadata(cx,\n@@ -920,7 +939,7 @@ pub fn scope_metadata(fcx: &FunctionContext,\n     }\n }\n \n-fn diverging_type_metadata(cx: &CrateContext) -> DIType {\n+pub fn diverging_type_metadata(cx: &CrateContext) -> DIType {\n     unsafe {\n         llvm::LLVMDIBuilderCreateBasicType(\n             DIB(cx),"}, {"sha": "9ce5c457bff33b4d245bf909ab5d148b2d325e85", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=39d4faf989cea236e2e1669ab85d060d1c62cd85", "patch": "@@ -18,7 +18,8 @@ use self::utils::{DIB, span_start, assert_type_for_node_id, contains_nodebug_att\n                   create_DIArray, is_node_local_to_unit};\n use self::namespace::{namespace_for_item, NamespaceTreeNode};\n use self::type_names::compute_debuginfo_type_name;\n-use self::metadata::{type_metadata, file_metadata, scope_metadata, TypeMap, compile_unit_metadata};\n+use self::metadata::{type_metadata, diverging_type_metadata};\n+use self::metadata::{file_metadata, scope_metadata, TypeMap, compile_unit_metadata};\n use self::source_loc::InternalDebugLocation;\n \n use llvm;\n@@ -29,8 +30,8 @@ use middle::subst::{self, Substs};\n use rustc::ast_map;\n use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n use trans;\n-use trans::monomorphize;\n-use middle::ty::Ty;\n+use trans::{monomorphize, type_of};\n+use middle::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n \n@@ -40,7 +41,7 @@ use std::ffi::CString;\n use std::ptr;\n use std::rc::Rc;\n use syntax::codemap::{Span, Pos};\n-use syntax::{ast, codemap, ast_util};\n+use syntax::{abi, ast, codemap, ast_util};\n use syntax::attr::IntType;\n use syntax::parse::token::{self, special_idents};\n \n@@ -325,7 +326,6 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let function_type_metadata = unsafe {\n         let fn_signature = get_function_signature(cx,\n                                                   fn_ast_id,\n-                                                  &*fn_decl,\n                                                   param_substs,\n                                                   span);\n         llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n@@ -402,35 +402,49 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                         fn_ast_id: ast::NodeId,\n-                                        fn_decl: &ast::FnDecl,\n                                         param_substs: &Substs<'tcx>,\n                                         error_reporting_span: Span) -> DIArray {\n         if cx.sess().opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), &[]);\n         }\n \n-        let mut signature = Vec::with_capacity(fn_decl.inputs.len() + 1);\n-\n         // Return type -- llvm::DIBuilder wants this at index 0\n         assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n-        let return_type = cx.tcx().node_id_to_type(fn_ast_id);\n-        let return_type = monomorphize::apply_param_substs(cx.tcx(),\n-                                                           param_substs,\n-                                                           &return_type);\n-        if return_type.is_nil() {\n-            signature.push(ptr::null_mut())\n+        let fn_type = cx.tcx().node_id_to_type(fn_ast_id);\n+\n+        let (sig, abi) = match fn_type.sty {\n+            ty::TyBareFn(_, ref barefnty) => {\n+                (cx.tcx().erase_late_bound_regions(&barefnty.sig), barefnty.abi)\n+            }\n+            ty::TyClosure(def_id, substs) => {\n+                let closure_type = cx.tcx().closure_type(def_id, substs);\n+                (cx.tcx().erase_late_bound_regions(&closure_type.sig), closure_type.abi)\n+            }\n+\n+            _ => cx.sess().bug(\"get_function_metdata: Expected a function type!\")\n+        };\n+        let sig = monomorphize::apply_param_substs(cx.tcx(), param_substs, &sig);\n+\n+        let mut signature = Vec::with_capacity(sig.inputs.len() + 1);\n+\n+        // Return type -- llvm::DIBuilder wants this at index 0\n+        signature.push(match sig.output {\n+            ty::FnConverging(ret_ty) => match ret_ty.sty {\n+                ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n+                _ => type_metadata(cx, ret_ty, codemap::DUMMY_SP)\n+            },\n+            ty::FnDiverging => diverging_type_metadata(cx)\n+        });\n+\n+        let inputs = &if abi == abi::RustCall {\n+            type_of::untuple_arguments(cx, &sig.inputs)\n         } else {\n-            signature.push(type_metadata(cx, return_type, codemap::DUMMY_SP));\n-        }\n+            sig.inputs\n+        };\n \n         // Arguments types\n-        for arg in &fn_decl.inputs {\n-            assert_type_for_node_id(cx, arg.pat.id, arg.pat.span);\n-            let arg_type = cx.tcx().node_id_to_type(arg.pat.id);\n-            let arg_type = monomorphize::apply_param_substs(cx.tcx(),\n-                                                            param_substs,\n-                                                            &arg_type);\n-            signature.push(type_metadata(cx, arg_type, codemap::DUMMY_SP));\n+        for &argument_type in inputs {\n+            signature.push(type_metadata(cx, argument_type, codemap::DUMMY_SP));\n         }\n \n         return create_DIArray(DIB(cx), &signature[..]);"}, {"sha": "2468150a6a5b16f599cca70e4f497df4efe63d69", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=39d4faf989cea236e2e1669ab85d060d1c62cd85", "patch": "@@ -42,8 +42,10 @@\n // gdb-check:type = f32\n // gdb-command:whatis f64\n // gdb-check:type = f64\n+// gdb-command:whatis fnptr\n+// gdb-check:type = [...] (*)([...])\n // gdb-command:info functions _yyy\n-// gdb-check:[...]![...]_yyy([...])([...]);\n+// gdb-check:[...]![...]_yyy([...]);\n // gdb-command:continue\n \n #![allow(unused_variables)]\n@@ -65,6 +67,7 @@ fn main() {\n     let u64: u64 = 64;\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n+    let fnptr : fn() = _zzz;\n     _zzz(); // #break\n     if 1 == 1 { _yyy(); }\n }"}, {"sha": "d3e6fc85f136fcd1f0c922a45f23f8781b40de0e", "filename": "src/test/run-pass/issue-26484.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Ftest%2Frun-pass%2Fissue-26484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Ftest%2Frun-pass%2Fissue-26484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26484.rs?ref=39d4faf989cea236e2e1669ab85d060d1c62cd85", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-g\n+\n+fn helper<F: FnOnce(usize) -> bool>(_f: F) {\n+    print!(\"\");\n+}\n+\n+fn main() {\n+    let cond = 0;\n+    helper(|v| v == cond)\n+}"}]}