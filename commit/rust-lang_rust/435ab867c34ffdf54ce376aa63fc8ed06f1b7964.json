{"sha": "435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNWFiODY3YzM0ZmZkZjU0Y2UzNzZhYTYzZmM4ZWQwNmYxYjc5NjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-09-04T23:00:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-04T23:00:31Z"}, "message": "Merge pull request #1945 from topecongiro/issue-1095\n\nExclude prefix colon from span when rewriting comment", "tree": {"sha": "2264e1fecffe9ec8289196cc4f19777fdeaa8779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2264e1fecffe9ec8289196cc4f19777fdeaa8779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "html_url": "https://github.com/rust-lang/rust/commit/435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e7ef0ab766bfd2e645e22a7f58f5c972e76453", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e7ef0ab766bfd2e645e22a7f58f5c972e76453", "html_url": "https://github.com/rust-lang/rust/commit/84e7ef0ab766bfd2e645e22a7f58f5c972e76453"}, {"sha": "c720a3a38e1aa8a4973aac020b9169fd608cd591", "url": "https://api.github.com/repos/rust-lang/rust/commits/c720a3a38e1aa8a4973aac020b9169fd608cd591", "html_url": "https://github.com/rust-lang/rust/commit/c720a3a38e1aa8a4973aac020b9169fd608cd591"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "79a178dd363be926596acbb64ce435a969f6c2df", "filename": "src/items.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "patch": "@@ -2313,35 +2313,45 @@ fn rewrite_generics_inner(\n ) -> Option<String> {\n     // FIXME: convert bounds to where clauses where they get too big or if\n     // there is a where clause at all.\n-    let lifetimes: &[_] = &generics.lifetimes;\n-    let tys: &[_] = &generics.ty_params;\n-    if lifetimes.is_empty() && tys.is_empty() {\n-        return Some(String::new());\n-    }\n \n-    // Strings for the generics.\n-    let lt_strs = lifetimes.iter().map(|lt| lt.rewrite(context, shape));\n-    let ty_strs = tys.iter().map(|ty_param| ty_param.rewrite(context, shape));\n+    // Wrapper type\n+    enum GenericsArg<'a> {\n+        Lifetime(&'a ast::LifetimeDef),\n+        TyParam(&'a ast::TyParam),\n+    }\n+    impl<'a> Rewrite for GenericsArg<'a> {\n+        fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+            match *self {\n+                GenericsArg::Lifetime(ref lifetime) => lifetime.rewrite(context, shape),\n+                GenericsArg::TyParam(ref ty) => ty.rewrite(context, shape),\n+            }\n+        }\n+    }\n+    impl<'a> Spanned for GenericsArg<'a> {\n+        fn span(&self) -> Span {\n+            match *self {\n+                GenericsArg::Lifetime(ref lifetime) => lifetime.span(),\n+                GenericsArg::TyParam(ref ty) => ty.span(),\n+            }\n+        }\n+    }\n \n-    // Extract comments between generics.\n-    let lt_spans = lifetimes.iter().map(|l| {\n-        let hi = if l.bounds.is_empty() {\n-            l.lifetime.span.hi()\n-        } else {\n-            l.bounds[l.bounds.len() - 1].span.hi()\n-        };\n-        mk_sp(l.lifetime.span.lo(), hi)\n-    });\n-    let ty_spans = tys.iter().map(|ty| ty.span());\n+    if generics.lifetimes.is_empty() && generics.ty_params.is_empty() {\n+        return Some(String::new());\n+    }\n \n+    let generics_args = generics\n+        .lifetimes\n+        .iter()\n+        .map(|lt| GenericsArg::Lifetime(lt))\n+        .chain(generics.ty_params.iter().map(|ty| GenericsArg::TyParam(ty)));\n     let items = itemize_list(\n         context.codemap,\n-        lt_spans.chain(ty_spans).zip(lt_strs.chain(ty_strs)),\n+        generics_args,\n         \">\",\n-        |&(sp, _)| sp.lo(),\n-        |&(sp, _)| sp.hi(),\n-        // FIXME: don't clone\n-        |&(_, ref str)| str.clone(),\n+        |arg| arg.span().lo(),\n+        |arg| arg.span().hi(),\n+        |arg| arg.rewrite(context, shape),\n         context.codemap.span_after(span, \"<\"),\n         span.hi(),\n         false,"}, {"sha": "ee231e2e63c5b832e620681ac43ebfa0ce56af10", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "patch": "@@ -217,6 +217,17 @@ impl Spanned for ast::TyParamBound {\n     }\n }\n \n+impl Spanned for ast::LifetimeDef {\n+    fn span(&self) -> Span {\n+        let hi = if self.bounds.is_empty() {\n+            self.lifetime.span.hi()\n+        } else {\n+            self.bounds[self.bounds.len() - 1].span.hi()\n+        };\n+        mk_sp(self.lifetime.span.lo(), hi)\n+    }\n+}\n+\n impl Spanned for MacroArg {\n     fn span(&self) -> Span {\n         match *self {"}, {"sha": "8d9357a0cc1ac6820828f2d2e01d67762e82c04f", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "patch": "@@ -641,7 +641,7 @@ where\n             self.prev_span_end = (self.get_hi)(&item) + BytePos(comment_end as u32);\n             let post_snippet = post_snippet[..comment_end].trim();\n \n-            let post_snippet_trimmed = if post_snippet.starts_with(',') {\n+            let post_snippet_trimmed = if post_snippet.starts_with(|c| c == ',' || c == ':') {\n                 post_snippet[1..].trim_matches(white_space)\n             } else if post_snippet.ends_with(',') {\n                 post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)"}, {"sha": "ceca0417aa8ef79c60676680fbc109076bda2de1", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "patch": "@@ -584,11 +584,10 @@ impl Rewrite for ast::TyParam {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let mut result = String::with_capacity(128);\n         // FIXME: If there are more than one attributes, this will force multiline.\n-        let attr_str = match (&*self.attrs).rewrite(context, shape) {\n-            Some(ref rw) if !rw.is_empty() => format!(\"{} \", rw),\n-            _ => String::new(),\n-        };\n-        result.push_str(&attr_str);\n+        match self.attrs.rewrite(context, shape) {\n+            Some(ref rw) if !rw.is_empty() => result.push_str(&format!(\"{} \", rw)),\n+            _ => (),\n+        }\n         result.push_str(&self.ident.to_string());\n         if !self.bounds.is_empty() {\n             result.push_str(type_bound_colon(context));"}, {"sha": "b782c98635a2871d6cc4ad923362abc16ea67b0a", "filename": "tests/source/structs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "patch": "@@ -15,6 +15,11 @@ pub struct Foo {\n     pub i: TypeForPublicField\n }\n \n+// #1095\n+struct S<T: /* comment */> {\n+    t: T,\n+}\n+\n // #1029\n pub struct Foo {\n     #[doc(hidden)]"}, {"sha": "8284618bc393c3e5a20d76977203da6b7050f465", "filename": "tests/target/structs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435ab867c34ffdf54ce376aa63fc8ed06f1b7964/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=435ab867c34ffdf54ce376aa63fc8ed06f1b7964", "patch": "@@ -14,6 +14,11 @@ pub struct Foo {\n     pub i: TypeForPublicField,\n }\n \n+// #1095\n+struct S<T /* comment */> {\n+    t: T,\n+}\n+\n // #1029\n pub struct Foo {\n     #[doc(hidden)]"}]}