{"sha": "3b71646a600b44868ed6cd7e69d66617a24e41e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzE2NDZhNjAwYjQ0ODY4ZWQ2Y2Q3ZTY5ZDY2NjE3YTI0ZTQxZTI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-02T22:59:08Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-03T23:48:24Z"}, "message": "Revert \"macros: Improve `tt` fragments\"\n\nThis reverts commit 41745f30f751364bdce14428b7d3ffa5dd028903.", "tree": {"sha": "70a714836ed3a16ba05e05860277b3e756027f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a714836ed3a16ba05e05860277b3e756027f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b71646a600b44868ed6cd7e69d66617a24e41e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b71646a600b44868ed6cd7e69d66617a24e41e2", "html_url": "https://github.com/rust-lang/rust/commit/3b71646a600b44868ed6cd7e69d66617a24e41e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b71646a600b44868ed6cd7e69d66617a24e41e2/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3ac29a101f9388966175bb51e340a98b849b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3ac29a101f9388966175bb51e340a98b849b59", "html_url": "https://github.com/rust-lang/rust/commit/eb3ac29a101f9388966175bb51e340a98b849b59"}], "stats": {"total": 23, "additions": 3, "deletions": 20}, "files": [{"sha": "9ca3b16b74ecc1ae8ca419ffb96e055926928a3a", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b71646a600b44868ed6cd7e69d66617a24e41e2/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b71646a600b44868ed6cd7e69d66617a24e41e2/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=3b71646a600b44868ed6cd7e69d66617a24e41e2", "patch": "@@ -13,7 +13,7 @@ use ast::Ident;\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use parse::token::{DocComment, MatchNt, SubstNt};\n-use parse::token::{Token, Interpolated, NtIdent, NtTT};\n+use parse::token::{Token, NtIdent};\n use parse::token;\n use parse::lexer::TokenAndSpan;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -269,9 +269,9 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n             }\n             // FIXME #2887: think about span stuff here\n             TokenTree::Token(sp, SubstNt(ident)) => {\n+                r.stack.last_mut().unwrap().idx += 1;\n                 match lookup_cur_matched(r, ident) {\n                     None => {\n-                        r.stack.last_mut().unwrap().idx += 1;\n                         r.cur_span = sp;\n                         r.cur_tok = SubstNt(ident);\n                         return ret_val;\n@@ -283,24 +283,14 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             // (a) idents can be in lots of places, so it'd be a pain\n                             // (b) we actually can, since it's a token.\n                             NtIdent(ref sn) => {\n-                                r.stack.last_mut().unwrap().idx += 1;\n                                 r.cur_span = sn.span;\n                                 r.cur_tok = token::Ident(sn.node);\n                                 return ret_val;\n                             }\n-                            NtTT(_) => {\n-                                r.stack.push(TtFrame {\n-                                    forest: TokenTree::Token(sp, Interpolated(nt.clone())),\n-                                    idx: 0,\n-                                    dotdotdoted: false,\n-                                    sep: None,\n-                                });\n-                            }\n                             _ => {\n-                                r.stack.last_mut().unwrap().idx += 1;\n                                 // FIXME(pcwalton): Bad copy.\n                                 r.cur_span = sp;\n-                                r.cur_tok = Interpolated(nt.clone());\n+                                r.cur_tok = token::Interpolated(nt.clone());\n                                 return ret_val;\n                             }\n                         }"}, {"sha": "204c885e3613030a73588302af20a508409c849d", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b71646a600b44868ed6cd7e69d66617a24e41e2/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b71646a600b44868ed6cd7e69d66617a24e41e2/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=3b71646a600b44868ed6cd7e69d66617a24e41e2", "patch": "@@ -195,13 +195,6 @@ impl TokenTree {\n                          TokenTree::Token(sp, token::Ident(kind))];\n                 v[index].clone()\n             }\n-            (&TokenTree::Token(_, token::Interpolated(ref nt)), _) => {\n-                if let Nonterminal::NtTT(ref tt) = **nt {\n-                    tt.clone()\n-                } else {\n-                    panic!(\"Cannot expand a token tree\");\n-                }\n-            }\n             (&TokenTree::Sequence(_, ref seq), _) => seq.tts[index].clone(),\n             _ => panic!(\"Cannot expand a token tree\"),\n         }"}]}