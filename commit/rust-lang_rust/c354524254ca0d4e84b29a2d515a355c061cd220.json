{"sha": "c354524254ca0d4e84b29a2d515a355c061cd220", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTQ1MjQyNTRjYTBkNGU4NGIyOWEyZDUxNWEzNTVjMDYxY2QyMjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T18:19:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-16T18:19:00Z"}, "message": "Rollup merge of #74392 - lcnr:const-generics-update, r=varkor\n\nconst generics triage\n\nI went through all const generics issues and closed all issues which are already fixed.\n\nSome issues already have a regression test but were not closed. Also doing this as part of this PR.\n\nuff r? @eddyb @varkor\n\ncloses #61936\ncloses #62878\ncloses #63695\ncloses #67144\ncloses #68596\ncloses #69816\ncloses #70217\ncloses #70507\ncloses #70586\ncloses #71348\ncloses #71805\ncloses #73120\ncloses #73508\ncloses #73730\ncloses #74255", "tree": {"sha": "1870172a7931822220350ed4a6dacede3afe1875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1870172a7931822220350ed4a6dacede3afe1875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c354524254ca0d4e84b29a2d515a355c061cd220", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEJoVCRBK7hj4Ov3rIwAAdHIIALK0wLvPmw7w+Q0du0bOYfHQ\nJ6X1Wbv1saLsnUQci7CrJfWO/Ac1T9xEoKBtKJGqYfQ7SfJJdwQG/MGUjApbXzb8\npUTIeHt71XApS8ZroU2XsKbynzhMOVKAxFo1ejcBh31b49Crr75YMHAhxZw68Uc7\nzhvLFaZ3Sa5ktvmiEp6RViZOQJoB8BxMEFC9KwYrcMHoQpAKfKPIFKiZWAKLzpnZ\naLivVGxkukTrTgrhiNKUq8VwrtkU0Tb5ozFS5JjTkGr94fq1qr6eKexLOVepQ3iF\nJK9weMRvpHlbG0DDZ+1kLhIi1bb+99gi2z4HrP0BxB2jLNUW5QQ2CQNvxE/cBbI=\n=H4dc\n-----END PGP SIGNATURE-----\n", "payload": "tree 1870172a7931822220350ed4a6dacede3afe1875\nparent 8f3b0ecf31100c0912d42e9fbe0430f0ca0251bc\nparent 8faeb0e797947df535b1120b5da850fd9c765b3a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594923540 -0700\ncommitter GitHub <noreply@github.com> 1594923540 -0700\n\nRollup merge of #74392 - lcnr:const-generics-update, r=varkor\n\nconst generics triage\n\nI went through all const generics issues and closed all issues which are already fixed.\n\nSome issues already have a regression test but were not closed. Also doing this as part of this PR.\n\nuff r? @eddyb @varkor\n\ncloses #61936\ncloses #62878\ncloses #63695\ncloses #67144\ncloses #68596\ncloses #69816\ncloses #70217\ncloses #70507\ncloses #70586\ncloses #71348\ncloses #71805\ncloses #73120\ncloses #73508\ncloses #73730\ncloses #74255\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c354524254ca0d4e84b29a2d515a355c061cd220", "html_url": "https://github.com/rust-lang/rust/commit/c354524254ca0d4e84b29a2d515a355c061cd220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c354524254ca0d4e84b29a2d515a355c061cd220/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3b0ecf31100c0912d42e9fbe0430f0ca0251bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3b0ecf31100c0912d42e9fbe0430f0ca0251bc", "html_url": "https://github.com/rust-lang/rust/commit/8f3b0ecf31100c0912d42e9fbe0430f0ca0251bc"}, {"sha": "8faeb0e797947df535b1120b5da850fd9c765b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8faeb0e797947df535b1120b5da850fd9c765b3a", "html_url": "https://github.com/rust-lang/rust/commit/8faeb0e797947df535b1120b5da850fd9c765b3a"}], "stats": {"total": 273, "additions": 273, "deletions": 0}, "files": [{"sha": "59a4d345cbccb51a137035442f08a9ac09023771", "filename": "src/test/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics)]\n+\n+// All of these three items must be in `lib2` to reproduce the error\n+\n+pub trait TypeFn {\n+    type Output;\n+}\n+\n+pub struct GenericType<const B: i8>;\n+\n+// Removing the braces around `42` resolves the crash\n+impl TypeFn for GenericType<{ 42 }> {\n+    type Output = ();\n+}"}, {"sha": "1f96e7d3b410aeef91f8209b2259dff220c78fa3", "filename": "src/test/ui/const-generics/issues/issue-68596.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub struct S(u8);\n+\n+impl S {\n+    pub fn get<const A: u8>(&self) -> &u8 {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    const A: u8 = 5;\n+    let s = S(0);\n+\n+    s.get::<A>();\n+}"}, {"sha": "aea4de39f79ce9bd4d6d5370b56da795bb8964da", "filename": "src/test/ui/const-generics/issues/issue-73120.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73120.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+// aux-build:const_generic_issues_lib.rs\n+extern crate const_generic_issues_lib as lib2;\n+fn unused_function(\n+    _: <lib2::GenericType<42> as lib2::TypeFn>::Output\n+) {}\n+\n+fn main() {}"}, {"sha": "ba2e2a38e7470f5b199858d37d21722afe5041ae", "filename": "src/test/ui/const-generics/issues/issue-73508.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,6 @@\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+pub const fn func_name<const X: *const u32>() {}\n+//~^ ERROR using raw pointers\n+\n+fn main() {}"}, {"sha": "23ad1818b6f37305dfb1e10bf9fb0b393b1ff209", "filename": "src/test/ui/const-generics/issues/issue-73508.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-73508.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/issue-73508.rs:3:33\n+   |\n+LL | pub const fn func_name<const X: *const u32>() {}\n+   |                                 ^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "55ccf57dc99c303ac6bac109ec85d4541b8737f4", "filename": "src/test/ui/const-generics/issues/issue-74255.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(dead_code, incomplete_features)]\n+\n+#[derive(PartialEq, Eq)]\n+enum IceEnum {\n+    Variant\n+}\n+\n+struct IceStruct;\n+\n+impl IceStruct {\n+    fn ice_struct_fn<const I: IceEnum>() {}\n+}\n+\n+fn main() {\n+    IceStruct::ice_struct_fn::<{IceEnum::Variant}>();\n+}"}, {"sha": "a3d059591987c4fb2b90722c778197ade5320f26", "filename": "src/test/ui/const-generics/type-dependent/issue-67144-1.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct X;\n+\n+impl X {\n+    pub fn getn<const N: usize>(&self) -> [u8; N] {\n+        getn::<N>()\n+    }\n+}\n+\n+fn getn<const N: usize>() -> [u8; N] {\n+    unsafe {\n+        std::mem::zeroed()\n+    }\n+}\n+\n+fn main() {\n+    // works\n+    let [a,b,c] = getn::<3>();\n+\n+    // cannot pattern-match on an array without a fixed length\n+    let [a,b,c] = X.getn::<3>();\n+\n+    // mismatched types, expected array `[u8; 3]` found array `[u8; _]`\n+    let arr: [u8; 3] = X.getn::<3>();\n+}"}, {"sha": "c53a149fa8d46432b5e47649aeef29341134d67b", "filename": "src/test/ui/const-generics/type-dependent/issue-67144-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A<const N: usize>;\n+\n+struct X;\n+\n+impl X {\n+    fn inner<const N: usize>() -> A<N> {\n+        outer::<N>()\n+    }\n+}\n+\n+fn outer<const N: usize>() -> A<N> {\n+    A\n+}\n+\n+fn main() {\n+    let i: A<3usize> = outer::<3usize>();\n+    let o: A<3usize> = X::inner::<3usize>();\n+}"}, {"sha": "caa611cbd797f1b5be1a938c1e945e39e8ef4ff9", "filename": "src/test/ui/const-generics/type-dependent/issue-70217.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Struct<const N: usize>;\n+\n+impl<const N: usize> Struct<N> {\n+    fn method<const M: usize>(&self) {}\n+}\n+\n+fn test<const N: usize, const M: usize>(x: Struct<N>) {\n+    Struct::<N>::method::<M>(&x);\n+    x.method::<N>();\n+}\n+\n+fn main() {}"}, {"sha": "5a0888506eb1ef9021f41aa35b70d6dbbf2c6398", "filename": "src/test/ui/const-generics/type-dependent/issue-70586.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+use std::marker::PhantomData;\n+\n+// This namespace is necessary for the ICE to trigger\n+struct Namespace;\n+\n+impl Namespace {\n+    pub fn const_chunks_exact<T, const N: usize>() -> ConstChunksExact<'static, T, N> {\n+        ConstChunksExact { inner: PhantomData }\n+    }\n+}\n+\n+\n+#[derive(Debug)]\n+pub struct ConstChunksExact<'a, T, const N: usize> {\n+    inner:  PhantomData<&'a T>\n+}\n+\n+impl <'a, T, const N: usize> Iterator for ConstChunksExact<'a, T, { N }> {\n+    type Item = &'a [T; N];\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unreachable!()\n+    }\n+}\n+\n+fn main() {\n+    let mut chunks = Namespace::const_chunks_exact::<i32, 3usize>();\n+    let _next: &[i32; 3] = chunks.next().unwrap();\n+}"}, {"sha": "ec22dcdf60b466b64f0d4ee9d6588acefa3c490a", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo {\n+    i: i32,\n+}\n+\n+trait Get<'a, const N: &'static str> {\n+    type Target: 'a;\n+\n+    fn get(&'a self) -> &'a Self::Target;\n+}\n+\n+impl Foo {\n+    fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Target\n+    where\n+        Self: Get<'a, N>,\n+    {\n+        self.get()\n+    }\n+}\n+\n+impl<'a> Get<'a, \"int\"> for Foo {\n+    type Target = i32;\n+\n+    fn get(&'a self) -> &'a Self::Target {\n+        &self.i\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo { i: 123 };\n+    assert_eq!(foo.ask::<\"int\">(), &123);\n+}"}, {"sha": "6823d780aefa9caa318feff93489593b78fee527", "filename": "src/test/ui/const-generics/type-dependent/issue-71805.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+use std::mem::MaybeUninit;\n+\n+trait CollectSlice<'a>: Iterator {\n+    fn inner_array<const N: usize>(&mut self) -> [Self::Item; N];\n+\n+    fn collect_array<const N: usize>(&mut self) -> [Self::Item; N] {\n+        let result = self.inner_array();\n+        assert!(self.next().is_none());\n+        result\n+    }\n+}\n+\n+impl<'a, I: ?Sized> CollectSlice<'a> for I\n+where\n+    I: Iterator,\n+{\n+    fn inner_array<const N: usize>(&mut self) -> [Self::Item; N] {\n+        let mut result: [MaybeUninit<Self::Item>; N] =\n+            unsafe { MaybeUninit::uninit().assume_init() };\n+\n+        let mut count = 0;\n+        for (dest, item) in result.iter_mut().zip(self) {\n+            *dest = MaybeUninit::new(item);\n+            count += 1;\n+        }\n+\n+        assert_eq!(N, count);\n+\n+        let temp_ptr: *const [MaybeUninit<Self::Item>; N] = &result;\n+        unsafe { std::ptr::read(temp_ptr as *const [Self::Item; N]) }\n+    }\n+}\n+\n+fn main() {\n+    let mut foos = [0u64; 9].iter().cloned();\n+    let _bar: [u64; 9] = foos.collect_array::<9_usize>();\n+}"}, {"sha": "d90cc50ddc44718c10ba036ddd2264f1e8fefd95", "filename": "src/test/ui/const-generics/type-dependent/issue-73730.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354524254ca0d4e84b29a2d515a355c061cd220/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs?ref=c354524254ca0d4e84b29a2d515a355c061cd220", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<'a, A>: Iterator<Item=A> {\n+    fn bar<const N: usize>(&mut self) -> *const [A; N];\n+}\n+\n+impl<'a, A, I: ?Sized> Foo<'a, A> for I where I: Iterator<Item=A>  {\n+    fn bar<const N: usize>(&mut self) -> *const [A; N] {\n+        std::ptr::null()\n+    }\n+}\n+\n+fn main() {\n+    (0_u8 .. 10).bar::<10_usize>();\n+}"}]}