{"sha": "ffc2bc83b024a547ceecf3117149c1fbe9f560df", "node_id": "C_kwDOAAsO6NoAKGZmYzJiYzgzYjAyNGE1NDdjZWVjZjMxMTcxNDljMWZiZTlmNTYwZGY", "commit": {"author": {"name": "Renato Lochetti", "email": "renato.lochetti@gmail.com", "date": "2023-05-28T11:53:03Z"}, "committer": {"name": "Renato Lochetti", "email": "renato.lochetti@gmail.com", "date": "2023-05-28T11:53:03Z"}, "message": "Fixing `invalid_regex` with invalid UTF8. Also, adding more test cases", "tree": {"sha": "9a5c2c30ae8794b23f2ccc05550dbf0eefb537a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5c2c30ae8794b23f2ccc05550dbf0eefb537a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffc2bc83b024a547ceecf3117149c1fbe9f560df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEOoaYRk7omMQpHzExS3izSz3n68wFAmRzQJ8ACgkQS3izSz3n\n68zSywwAnml8j5sKKD/m0+rQB4rMB/NgERkh91KkQYo9wN1OgMOAhWJTiyYDJJLo\nqJrFXNgsE4bt5xG9K08pDOex8/6zCRqJ/BeSgabcWpeMyzy8t2RDDGIZ00k2Gwj0\nFZvRUWDOz68bCuecA/A38DJVEhBCLlaIsBpC2CfwjxenpGKGHOMiaK0gAndY0AEP\ni1SskKglaZkAoCREtzraMuGUCKIkXc4VhH3k5FmNISq4C/t91mJNg0GcL4kvBkXp\nESbEhKQdGhVIjxA966LdyoU8lCYyyxl8eOA5FrIXQdrtLZMludN7eZ9o0hKwsPtY\nuufMuFc/NhnHvGQoE3BFtu5kZZtHv+OoQfdUoBOQkPcl8ns/prJIw3oFBfz8rxZg\ngjXuVNVL6ZzJ7/8Akm3He0/SeOeIb+4MZQWiBYr5jdAQ0gbaBdcmkYBCGX6QYc9d\nI4iOMYIwL6Fkvu4FBMwLuBgM9J0QhyFuBe4zRhNCIkkDs5dOSPPqyOuYaUIUFQlb\nVbYykd8d\n=BkNY\n-----END PGP SIGNATURE-----", "payload": "tree 9a5c2c30ae8794b23f2ccc05550dbf0eefb537a1\nparent dc17e7317b7bd6d585abafa4d927dcf876dc4d18\nauthor Renato Lochetti <renato.lochetti@gmail.com> 1685274783 +0100\ncommitter Renato Lochetti <renato.lochetti@gmail.com> 1685274783 +0100\n\nFixing `invalid_regex` with invalid UTF8. Also, adding more test cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc2bc83b024a547ceecf3117149c1fbe9f560df", "html_url": "https://github.com/rust-lang/rust/commit/ffc2bc83b024a547ceecf3117149c1fbe9f560df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffc2bc83b024a547ceecf3117149c1fbe9f560df/comments", "author": {"login": "lochetti", "id": 2541422, "node_id": "MDQ6VXNlcjI1NDE0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/2541422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lochetti", "html_url": "https://github.com/lochetti", "followers_url": "https://api.github.com/users/lochetti/followers", "following_url": "https://api.github.com/users/lochetti/following{/other_user}", "gists_url": "https://api.github.com/users/lochetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lochetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lochetti/subscriptions", "organizations_url": "https://api.github.com/users/lochetti/orgs", "repos_url": "https://api.github.com/users/lochetti/repos", "events_url": "https://api.github.com/users/lochetti/events{/privacy}", "received_events_url": "https://api.github.com/users/lochetti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lochetti", "id": 2541422, "node_id": "MDQ6VXNlcjI1NDE0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/2541422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lochetti", "html_url": "https://github.com/lochetti", "followers_url": "https://api.github.com/users/lochetti/followers", "following_url": "https://api.github.com/users/lochetti/following{/other_user}", "gists_url": "https://api.github.com/users/lochetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lochetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lochetti/subscriptions", "organizations_url": "https://api.github.com/users/lochetti/orgs", "repos_url": "https://api.github.com/users/lochetti/repos", "events_url": "https://api.github.com/users/lochetti/events{/privacy}", "received_events_url": "https://api.github.com/users/lochetti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc17e7317b7bd6d585abafa4d927dcf876dc4d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc17e7317b7bd6d585abafa4d927dcf876dc4d18", "html_url": "https://github.com/rust-lang/rust/commit/dc17e7317b7bd6d585abafa4d927dcf876dc4d18"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "674f8bf4c0f303d13b0e1912ed3d27e890c59c67", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2bc83b024a547ceecf3117149c1fbe9f560df/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2bc83b024a547ceecf3117149c1fbe9f560df/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=ffc2bc83b024a547ceecf3117149c1fbe9f560df", "patch": "@@ -177,7 +177,7 @@ fn check_set<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n }\n \n fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n-    let mut parser = regex_syntax::ParserBuilder::new().unicode(true).utf8(!utf8).build();\n+    let mut parser = regex_syntax::ParserBuilder::new().unicode(true).utf8(utf8).build();\n \n     if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {"}, {"sha": "1c8e47ab594949f0f9466c70aaf82f607b570c03", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2bc83b024a547ceecf3117149c1fbe9f560df/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2bc83b024a547ceecf3117149c1fbe9f560df/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=ffc2bc83b024a547ceecf3117149c1fbe9f560df", "patch": "@@ -42,6 +42,11 @@ fn syntax_error() {\n     let escaped_string_span = Regex::new(\"\\\\b\\\\c\");\n \n     let aux_span = Regex::new(\"(?ixi)\");\n+\n+    let should_not_lint = Regex::new(\"(?u).\");\n+    let should_not_lint = BRegex::new(\"(?u).\");\n+    let invalid_utf8_should_not_lint = BRegex::new(\"(?-u).\");\n+    let invalid_utf8_should_lint = Regex::new(\"(?-u).\");\n }\n \n fn trivial_regex() {\n@@ -71,6 +76,8 @@ fn trivial_regex() {\n     // non-trivial regexes\n     let non_trivial_dot = Regex::new(\"a.b\");\n     let non_trivial_dot_builder = RegexBuilder::new(\"a.b\");\n+    let non_trivial_dot = Regex::new(\".\");\n+    let non_trivial_dot = BRegex::new(\".\");\n     let non_trivial_eq = Regex::new(\"^foo|bar$\");\n     let non_trivial_starts_with = Regex::new(\"^foo|bar\");\n     let non_trivial_ends_with = Regex::new(\"^foo|bar\");"}, {"sha": "1e8a21283cd9584f4ab974da8c0d0a68ad49613a", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ffc2bc83b024a547ceecf3117149c1fbe9f560df/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffc2bc83b024a547ceecf3117149c1fbe9f560df/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=ffc2bc83b024a547ceecf3117149c1fbe9f560df", "patch": "@@ -99,93 +99,99 @@ error: regex syntax error: duplicate flag\n LL |     let aux_span = Regex::new(\"(?ixi)\");\n    |                                  ^ ^\n \n+error: regex syntax error: pattern can match invalid UTF-8\n+  --> $DIR/regex.rs:49:53\n+   |\n+LL |     let invalid_utf8_should_lint = Regex::new(\"(?-u).\");\n+   |                                                     ^\n+\n error: trivial regex\n-  --> $DIR/regex.rs:48:33\n+  --> $DIR/regex.rs:53:33\n    |\n LL |     let trivial_eq = Regex::new(\"^foobar$\");\n    |                                 ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:50:48\n+  --> $DIR/regex.rs:55:48\n    |\n LL |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n    |                                                ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:52:42\n+  --> $DIR/regex.rs:57:42\n    |\n LL |     let trivial_starts_with = Regex::new(\"^foobar\");\n    |                                          ^^^^^^^^^\n    |\n    = help: consider using `str::starts_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:54:40\n+  --> $DIR/regex.rs:59:40\n    |\n LL |     let trivial_ends_with = Regex::new(\"foobar$\");\n    |                                        ^^^^^^^^^\n    |\n    = help: consider using `str::ends_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:56:39\n+  --> $DIR/regex.rs:61:39\n    |\n LL |     let trivial_contains = Regex::new(\"foobar\");\n    |                                       ^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:58:39\n+  --> $DIR/regex.rs:63:39\n    |\n LL |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:60:40\n+  --> $DIR/regex.rs:65:40\n    |\n LL |     let trivial_backslash = Regex::new(\"a/.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:63:36\n+  --> $DIR/regex.rs:68:36\n    |\n LL |     let trivial_empty = Regex::new(\"\");\n    |                                    ^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:65:36\n+  --> $DIR/regex.rs:70:36\n    |\n LL |     let trivial_empty = Regex::new(\"^\");\n    |                                    ^^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:67:36\n+  --> $DIR/regex.rs:72:36\n    |\n LL |     let trivial_empty = Regex::new(\"^$\");\n    |                                    ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n error: trivial regex\n-  --> $DIR/regex.rs:69:44\n+  --> $DIR/regex.rs:74:44\n    |\n LL |     let binary_trivial_empty = BRegex::new(\"^$\");\n    |                                            ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 24 previous errors\n "}]}