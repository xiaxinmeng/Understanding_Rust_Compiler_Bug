{"sha": "7d604584954660d255ad0929d3be8ce03f879d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNjA0NTg0OTU0NjYwZDI1NWFkMDkyOWQzYmU4Y2UwM2Y4NzlkMGM=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-16T12:37:00Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-18T09:22:27Z"}, "message": "Item up and down movers", "tree": {"sha": "613fdfdfd7eeb170082800533fb8b669dc35d25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613fdfdfd7eeb170082800533fb8b669dc35d25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d604584954660d255ad0929d3be8ce03f879d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBTG9MACgkQ2MS9WuTZ\nzE04MAgAty9w5bFpyaljUit+JHevfUGgSVy0WkXp9XJpeNcFPDUYhWLBkeZlhsgi\nVe8uXn34R0FFP8yuFC6z06QqE32ziP/T2DoHmhVffW4KaDT6vGVG9q5v09CgrHtX\nKask7EBMmmwPEjAutOFqrCWw/gi4CkFRjCqb8NezalQb8nd1GaliLCuuezV6/a3F\nDHgBlybG4gFxhImd5zhD2Nzi0erQQ9svU1L/HVDKVy2MdZu+gsgaL+togAYbEAYa\nLqeRXYqJF0IdvCI4nz+z26WPbuLKMpc+ZXfBc+TABXmLJy2mEMvZd91Ajhl+f0N5\nZMuoU0mYa0THAxVFoNVlcFVosMiLHQ==\n=PMOj\n-----END PGP SIGNATURE-----", "payload": "tree 613fdfdfd7eeb170082800533fb8b669dc35d25b\nparent d704750ba982153d92ccff90cf236121641b9da3\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615898220 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1616059347 +0200\n\nItem up and down movers\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d604584954660d255ad0929d3be8ce03f879d0c", "html_url": "https://github.com/rust-lang/rust/commit/7d604584954660d255ad0929d3be8ce03f879d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d604584954660d255ad0929d3be8ce03f879d0c/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d704750ba982153d92ccff90cf236121641b9da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d704750ba982153d92ccff90cf236121641b9da3", "html_url": "https://github.com/rust-lang/rust/commit/d704750ba982153d92ccff90cf236121641b9da3"}], "stats": {"total": 537, "additions": 536, "deletions": 1}, "files": [{"sha": "3f73c063222c02300a15e7b37a79a2ba92456ab9", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -37,6 +37,7 @@ mod hover;\n mod inlay_hints;\n mod join_lines;\n mod matching_brace;\n+mod move_item;\n mod parent_module;\n mod references;\n mod fn_references;\n@@ -76,6 +77,7 @@ pub use crate::{\n     hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n+    move_item::Direction,\n     prime_caches::PrimeCachesProgress,\n     references::{rename::RenameError, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n@@ -583,6 +585,14 @@ impl Analysis {\n         self.with_db(|db| annotations::resolve_annotation(db, annotation))\n     }\n \n+    pub fn move_item(\n+        &self,\n+        range: FileRange,\n+        direction: Direction,\n+    ) -> Cancelable<Option<TextEdit>> {\n+        self.with_db(|db| move_item::move_item(db, range, direction))\n+    }\n+\n     /// Performs an operation on that may be Canceled.\n     fn with_db<F, T>(&self, f: F) -> Cancelable<T>\n     where"}, {"sha": "be62d008ddf449b95645a66109f69e2bf166b69e", "filename": "crates/ide/src/move_item.rs", "status": "added", "additions": 392, "deletions": 0, "changes": 392, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -0,0 +1,392 @@\n+use std::iter::once;\n+\n+use hir::Semantics;\n+use ide_db::{base_db::FileRange, RootDatabase};\n+use syntax::{algo, AstNode, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode};\n+use text_edit::{TextEdit, TextEditBuilder};\n+\n+pub enum Direction {\n+    Up,\n+    Down,\n+}\n+\n+// Feature: Move Item\n+//\n+// Move item under cursor or selection up and down.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Move item up**\n+// | VS Code | **Rust Analyzer: Move item down**\n+// |===\n+pub(crate) fn move_item(\n+    db: &RootDatabase,\n+    range: FileRange,\n+    direction: Direction,\n+) -> Option<TextEdit> {\n+    let sema = Semantics::new(db);\n+    let file = sema.parse(range.file_id);\n+\n+    let item = file.syntax().covering_element(range.range);\n+    find_ancestors(item, direction)\n+}\n+\n+fn find_ancestors(item: SyntaxElement, direction: Direction) -> Option<TextEdit> {\n+    let movable = [\n+        SyntaxKind::MATCH_ARM,\n+        // https://github.com/intellij-rust/intellij-rust/blob/master/src/main/kotlin/org/rust/ide/actions/mover/RsStatementUpDownMover.kt\n+        SyntaxKind::LET_STMT,\n+        SyntaxKind::EXPR_STMT,\n+        SyntaxKind::MATCH_EXPR,\n+        // https://github.com/intellij-rust/intellij-rust/blob/master/src/main/kotlin/org/rust/ide/actions/mover/RsItemUpDownMover.kt\n+        SyntaxKind::TRAIT,\n+        SyntaxKind::IMPL,\n+        SyntaxKind::MACRO_CALL,\n+        SyntaxKind::MACRO_DEF,\n+        SyntaxKind::STRUCT,\n+        SyntaxKind::ENUM,\n+        SyntaxKind::MODULE,\n+        SyntaxKind::USE,\n+        SyntaxKind::FN,\n+        SyntaxKind::CONST,\n+        SyntaxKind::TYPE_ALIAS,\n+    ];\n+\n+    let root = match item {\n+        NodeOrToken::Node(node) => node,\n+        NodeOrToken::Token(token) => token.parent(),\n+    };\n+\n+    let ancestor = once(root.clone())\n+        .chain(root.ancestors())\n+        .filter(|ancestor| movable.contains(&ancestor.kind()))\n+        .max_by_key(|ancestor| kind_priority(ancestor.kind()))?;\n+\n+    move_in_direction(&ancestor, direction)\n+}\n+\n+fn kind_priority(kind: SyntaxKind) -> i32 {\n+    match kind {\n+        SyntaxKind::MATCH_ARM => 4,\n+\n+        SyntaxKind::LET_STMT | SyntaxKind::EXPR_STMT | SyntaxKind::MATCH_EXPR => 3,\n+\n+        SyntaxKind::TRAIT\n+        | SyntaxKind::IMPL\n+        | SyntaxKind::MACRO_CALL\n+        | SyntaxKind::MACRO_DEF\n+        | SyntaxKind::STRUCT\n+        | SyntaxKind::ENUM\n+        | SyntaxKind::MODULE\n+        | SyntaxKind::USE\n+        | SyntaxKind::FN\n+        | SyntaxKind::CONST\n+        | SyntaxKind::TYPE_ALIAS => 2,\n+\n+        // Placeholder for items, that are non-movable, and filtered even before kind_priority call\n+        _ => 1,\n+    }\n+}\n+\n+fn move_in_direction(node: &SyntaxNode, direction: Direction) -> Option<TextEdit> {\n+    let sibling = match direction {\n+        Direction::Up => node.prev_sibling(),\n+        Direction::Down => node.next_sibling(),\n+    }?;\n+\n+    Some(replace_nodes(&sibling, node))\n+}\n+\n+fn replace_nodes(first: &SyntaxNode, second: &SyntaxNode) -> TextEdit {\n+    let mut edit = TextEditBuilder::default();\n+\n+    algo::diff(first, second).into_text_edit(&mut edit);\n+    algo::diff(second, first).into_text_edit(&mut edit);\n+\n+    edit.finish()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::fixture;\n+    use expect_test::{expect, Expect};\n+\n+    use crate::Direction;\n+\n+    fn check(ra_fixture: &str, expect: Expect, direction: Direction) {\n+        let (analysis, range) = fixture::range(ra_fixture);\n+        let edit = analysis.move_item(range, direction).unwrap().unwrap_or_default();\n+        let mut file = analysis.file_text(range.file_id).unwrap().to_string();\n+        edit.apply(&mut file);\n+        expect.assert_eq(&file);\n+    }\n+\n+    #[test]\n+    fn test_moves_match_arm_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true => {\n+            println!(\"Hello, world\");\n+        },\n+        false =>$0$0 {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        false => {\n+            println!(\"Test\");\n+        },\n+        true => {\n+            println!(\"Hello, world\");\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_match_arm_down() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true =>$0$0 {\n+            println!(\"Hello, world\");\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        false => {\n+            println!(\"Test\");\n+        },\n+        true => {\n+            println!(\"Hello, world\");\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Down,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_nowhere_to_move() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true =>$0$0 {\n+            println!(\"Hello, world\");\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        true => {\n+            println!(\"Hello, world\");\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_let_stmt_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    let test = 123;\n+    let test2$0$0 = 456;\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    let test2 = 456;\n+    let test = 123;\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_prioritizes_match_arm() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true => {\n+            let test = 123;$0$0\n+            let test2 = 456;\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        false => {\n+            println!(\"Test\");\n+        },\n+        true => {\n+            let test = 123;\n+            let test2 = 456;\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Down,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_expr_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    println!(\"Hello, world\");\n+    println!(\"All I want to say is...\");$0$0\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    println!(\"All I want to say is...\");\n+    println!(\"Hello, world\");\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_nowhere_to_move_stmt() {\n+        check(\n+            r#\"\n+fn main() {\n+    println!(\"All I want to say is...\");$0$0\n+    println!(\"Hello, world\");\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    println!(\"All I want to say is...\");\n+    println!(\"Hello, world\");\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_move_item() {\n+        check(\n+            r#\"\n+fn main() {}\n+\n+fn foo() {}$0$0\n+            \"#,\n+            expect![[r#\"\n+fn foo() {}\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_move_impl_up() {\n+        check(\n+            r#\"\n+struct Yay;\n+\n+trait Wow {}\n+\n+impl Wow for Yay {}$0$0\n+            \"#,\n+            expect![[r#\"\n+struct Yay;\n+\n+impl Wow for Yay {}\n+\n+trait Wow {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_move_use_up() {\n+        check(\n+            r#\"\n+use std::vec::Vec;\n+use std::collections::HashMap$0$0;\n+            \"#,\n+            expect![[r#\"\n+use std::collections::HashMap;\n+use std::vec::Vec;\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn moves_match_expr_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    let test = 123;\n+\n+    $0match test {\n+        456 => {},\n+        _ => {}\n+    }$0;\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match test {\n+        456 => {},\n+        _ => {}\n+    };\n+\n+    let test = 123;\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn handles_empty_file() {\n+        check(r#\"$0$0\"#, expect![[r#\"\"#]], Direction::Up);\n+    }\n+}"}, {"sha": "8daf2786722a68d179d84be531fb73ee4d6a13f0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -1424,6 +1424,25 @@ pub(crate) fn handle_open_cargo_toml(\n     Ok(Some(res))\n }\n \n+pub(crate) fn handle_move_item(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_ext::MoveItemParams,\n+) -> Result<Option<lsp_types::TextDocumentEdit>> {\n+    let _p = profile::span(\"handle_move_item\");\n+    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+    let range = from_proto::file_range(&snap, params.text_document, params.range)?;\n+\n+    let direction = match params.direction {\n+        lsp_ext::MoveItemDirection::Up => ide::Direction::Up,\n+        lsp_ext::MoveItemDirection::Down => ide::Direction::Down,\n+    };\n+\n+    match snap.analysis.move_item(range, direction)? {\n+        Some(text_edit) => Ok(Some(to_proto::text_document_edit(&snap, file_id, text_edit)?)),\n+        None => Ok(None),\n+    }\n+}\n+\n fn to_command_link(command: lsp_types::Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }"}, {"sha": "0e1fec2095c42a16efc239131a20e4b64f200b93", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -402,3 +402,25 @@ pub(crate) enum CodeLensResolveData {\n pub fn supports_utf8(caps: &lsp_types::ClientCapabilities) -> bool {\n     caps.offset_encoding.as_deref().unwrap_or_default().iter().any(|it| it == \"utf-8\")\n }\n+\n+pub enum MoveItem {}\n+\n+impl Request for MoveItem {\n+    type Params = MoveItemParams;\n+    type Result = Option<lsp_types::TextDocumentEdit>;\n+    const METHOD: &'static str = \"experimental/moveItem\";\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct MoveItemParams {\n+    pub direction: MoveItemDirection,\n+    pub text_document: TextDocumentIdentifier,\n+    pub range: Range,\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+pub enum MoveItemDirection {\n+    Up,\n+    Down,\n+}"}, {"sha": "022a208518477d5bf5a700d595a57c4500bcde28", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -507,6 +507,7 @@ impl GlobalState {\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)\n             .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)\n             .on::<lsp_ext::OpenCargoToml>(handlers::handle_open_cargo_toml)\n+            .on::<lsp_ext::MoveItem>(handlers::handle_move_item)\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)\n             .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)"}, {"sha": "3171708d5a5c9b958e86256fb2c17a053ebdd7c3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -658,6 +658,18 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n+pub(crate) fn text_document_edit(\n+    snap: &GlobalStateSnapshot,\n+    file_id: FileId,\n+    edit: TextEdit,\n+) -> Result<lsp_types::TextDocumentEdit> {\n+    let text_document = optional_versioned_text_document_identifier(snap, file_id);\n+    let line_index = snap.file_line_index(file_id)?;\n+    let edits =\n+        edit.into_iter().map(|it| lsp_types::OneOf::Left(text_edit(&line_index, it))).collect();\n+    Ok(lsp_types::TextDocumentEdit { text_document, edits })\n+}\n+\n pub(crate) fn snippet_text_document_edit(\n     snap: &GlobalStateSnapshot,\n     is_snippet: bool,"}, {"sha": "8a6f9f06e7dddaa460095e0099024c8c231d8cef", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 4dfa8d7035f4aee7\n+lsp_ext.rs hash: e8a7502bd2b2c2f5\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this  issue:\n@@ -595,3 +595,29 @@ interface TestInfo {\n     runnable: Runnable;\n }\n ```\n+\n+## Hover Actions\n+\n+**Issue:** https://github.com/rust-analyzer/rust-analyzer/issues/6823\n+\n+This request is sent from client to server to move item under cursor or selection in some direction.\n+\n+**Method:** `experimental/moveItemUp`\n+**Method:** `experimental/moveItemDown`\n+\n+**Request:** `MoveItemParams`\n+\n+**Response:** `TextDocumentEdit | null`\n+\n+```typescript\n+export interface MoveItemParams {\n+    textDocument: lc.TextDocumentIdentifier,\n+    range: lc.Range,\n+    direction: Direction\n+}\n+\n+export const enum Direction {\n+    Up = \"Up\",\n+    Down = \"Down\"\n+}\n+```"}, {"sha": "faec45276caea2521600c20777e456b596687205", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -208,6 +208,16 @@\n                 \"command\": \"rust-analyzer.peekTests\",\n                 \"title\": \"Peek related tests\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.moveItemUp\",\n+                \"title\": \"Move item up\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.moveItemDown\",\n+                \"title\": \"Move item down\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "cc90fe889849bf411fada368a64efda84364393b", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -134,6 +134,34 @@ export function joinLines(ctx: Ctx): Cmd {\n     };\n }\n \n+export function moveItemUp(ctx: Ctx): Cmd {\n+    return moveItem(ctx, ra.Direction.Up);\n+}\n+\n+export function moveItemDown(ctx: Ctx): Cmd {\n+    return moveItem(ctx, ra.Direction.Down);\n+}\n+\n+export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const edit: lc.TextDocumentEdit = await client.sendRequest(ra.moveItem, {\n+            range: client.code2ProtocolConverter.asRange(editor.selection),\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n+            direction\n+        });\n+\n+        await editor.edit((builder) => {\n+            client.protocol2CodeConverter.asTextEdits(edit.edits).forEach((edit: any) => {\n+                builder.replace(edit.range, edit.newText);\n+            });\n+        });\n+    };\n+}\n+\n export function onEnter(ctx: Ctx): Cmd {\n     async function handleKeypress() {\n         const editor = ctx.activeRustEditor;"}, {"sha": "9af30cfdb29d51643ec4c9e0ee23a029e1980f18", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -127,3 +127,16 @@ export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location\n export interface OpenCargoTomlParams {\n     textDocument: lc.TextDocumentIdentifier;\n }\n+\n+export const moveItem = new lc.RequestType<MoveItemParams, lc.TextDocumentEdit, void>(\"experimental/moveItem\");\n+\n+export interface MoveItemParams {\n+    textDocument: lc.TextDocumentIdentifier,\n+    range: lc.Range,\n+    direction: Direction\n+}\n+\n+export const enum Direction {\n+    Up = \"Up\",\n+    Down = \"Down\"\n+}"}, {"sha": "643fb643f3a6405a562c13ff74d7261a6613e562", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d604584954660d255ad0929d3be8ce03f879d0c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=7d604584954660d255ad0929d3be8ce03f879d0c", "patch": "@@ -114,6 +114,8 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('openDocs', commands.openDocs);\n     ctx.registerCommand('openCargoToml', commands.openCargoToml);\n     ctx.registerCommand('peekTests', commands.peekTests);\n+    ctx.registerCommand('moveItemUp', commands.moveItemUp);\n+    ctx.registerCommand('moveItemDown', commands.moveItemDown);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}