{"sha": "085874d1ffd224dfe39a1aaa82e4f286b8614c91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTg3NGQxZmZkMjI0ZGZlMzlhMWFhYTgyZTRmMjg2Yjg2MTRjOTE=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T17:19:06Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-18T04:24:33Z"}, "message": "Add F_DUPFD/F_DUPFD_CLOEXEC to fcntl shim", "tree": {"sha": "364f47164e174aa3fa2056a3b408b61e57d7eb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/364f47164e174aa3fa2056a3b408b61e57d7eb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/085874d1ffd224dfe39a1aaa82e4f286b8614c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/085874d1ffd224dfe39a1aaa82e4f286b8614c91", "html_url": "https://github.com/rust-lang/rust/commit/085874d1ffd224dfe39a1aaa82e4f286b8614c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/085874d1ffd224dfe39a1aaa82e4f286b8614c91/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329383acbdb3ff538d952f70187e497e07010f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/329383acbdb3ff538d952f70187e497e07010f3e", "html_url": "https://github.com/rust-lang/rust/commit/329383acbdb3ff538d952f70187e497e07010f3e"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "07390be2c8bb62909cc43c10205fe5229888717f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/085874d1ffd224dfe39a1aaa82e4f286b8614c91/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085874d1ffd224dfe39a1aaa82e4f286b8614c91/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=085874d1ffd224dfe39a1aaa82e4f286b8614c91", "patch": "@@ -28,7 +28,7 @@ impl Default for FileHandler {\n         FileHandler {\n             handles: Default::default(),\n             // 0, 1 and 2 are reserved for stdin, stdout and stderr.\n-            low: 3,\n+            low: 2,\n         }\n     }\n }\n@@ -120,7 +120,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         fd_op: OpTy<'tcx, Tag>,\n         cmd_op: OpTy<'tcx, Tag>,\n-        _arg1_op: Option<OpTy<'tcx, Tag>>,\n+        arg_op: Option<OpTy<'tcx, Tag>>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n@@ -139,6 +139,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             } else {\n                 this.handle_not_found()\n             }\n+        } else if cmd == this.eval_libc_i32(\"F_DUPFD\")? || cmd == this.eval_libc_i32(\"F_DUPFD_CLOEXEC\")? {\n+            let arg = match arg_op {\n+                Some(arg_op) => this.read_scalar(arg_op)?.to_i32()?,\n+                None => throw_unsup_format!(\"fcntl with command F_DUPFD or F_DUPFD_CLOEXEC requires a third argument\"),\n+            };\n+            let fh = &mut this.machine.file_handler;\n+            let (file_result, writable) = match fh.handles.get(&fd) {\n+                Some(original) => (original.file.try_clone(), original.writable),\n+                None => return this.handle_not_found(),\n+            };\n+            let fd_result = file_result.map(|duplicated| {\n+                let new_fd = std::cmp::max(fh.low + 1, arg);\n+                fh.low = new_fd;\n+                fh.handles.insert(fh.low, FileHandle { file: duplicated, writable }).unwrap_none();\n+                new_fd\n+            });\n+            this.try_unwrap_io_result(fd_result)\n         } else {\n             throw_unsup_format!(\"The {:#x} command is not supported for `fcntl`)\", cmd);\n         }"}, {"sha": "632ed13f2eace05c58cce7c3758c5a3141fd6d4a", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085874d1ffd224dfe39a1aaa82e4f286b8614c91/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085874d1ffd224dfe39a1aaa82e4f286b8614c91/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=085874d1ffd224dfe39a1aaa82e4f286b8614c91", "patch": "@@ -41,6 +41,8 @@ fn main() {\n     // Reading until EOF should get the whole text.\n     file.read_to_end(&mut contents).unwrap();\n     assert_eq!(bytes, contents.as_slice());\n+    // Cloning a file should be successful\n+    file.try_clone().unwrap();\n \n     // Test that seeking to the beginning and reading until EOF gets the text again.\n     file.seek(SeekFrom::Start(0)).unwrap();"}]}