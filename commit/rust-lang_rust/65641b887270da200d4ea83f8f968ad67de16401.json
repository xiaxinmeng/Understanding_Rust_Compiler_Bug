{"sha": "65641b887270da200d4ea83f8f968ad67de16401", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NjQxYjg4NzI3MGRhMjAwZDRlYTgzZjhmOTY4YWQ2N2RlMTY0MDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-22T10:31:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-22T10:31:45Z"}, "message": "Rustfmt", "tree": {"sha": "378a76183624c4a56444a25e537d55736f4d297c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/378a76183624c4a56444a25e537d55736f4d297c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65641b887270da200d4ea83f8f968ad67de16401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65641b887270da200d4ea83f8f968ad67de16401", "html_url": "https://github.com/rust-lang/rust/commit/65641b887270da200d4ea83f8f968ad67de16401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65641b887270da200d4ea83f8f968ad67de16401/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd9bf3162da67600fbd6046893cc4f23b90a1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd9bf3162da67600fbd6046893cc4f23b90a1b3", "html_url": "https://github.com/rust-lang/rust/commit/8cd9bf3162da67600fbd6046893cc4f23b90a1b3"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "7c5ff6a809c5965cb4266df199eefb8c4645ab9d", "filename": "src/abi.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65641b887270da200d4ea83f8f968ad67de16401/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65641b887270da200d4ea83f8f968ad67de16401/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=65641b887270da200d4ea83f8f968ad67de16401", "patch": "@@ -224,7 +224,10 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n         if let Some(val) = self.lib_call(name, input_tys, return_ty, &args) {\n             CValue::ByVal(val, return_layout)\n         } else {\n-            CValue::ByRef(self.bcx.ins().iconst(self.module.pointer_type(), 0), return_layout)\n+            CValue::ByRef(\n+                self.bcx.ins().iconst(self.module.pointer_type(), 0),\n+                return_layout,\n+            )\n         }\n     }\n \n@@ -570,7 +573,10 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 \"copy\" | \"copy_nonoverlapping\" => {\n                     let elem_ty = substs.type_at(0);\n                     let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-                    let elem_size = fx.bcx.ins().iconst(fx.module.pointer_type(), elem_size as i64);\n+                    let elem_size = fx\n+                        .bcx\n+                        .ins()\n+                        .iconst(fx.module.pointer_type(), elem_size as i64);\n                     assert_eq!(args.len(), 3);\n                     let src = args[0];\n                     let dst = args[1];"}, {"sha": "c015765195d439baa8bb18a2776b1bab97a98d8f", "filename": "src/common.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65641b887270da200d4ea83f8f968ad67de16401/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65641b887270da200d4ea83f8f968ad67de16401/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=65641b887270da200d4ea83f8f968ad67de16401", "patch": "@@ -39,7 +39,7 @@ pub fn cton_type_from_ty<'a, 'tcx: 'a>(\n             IntTy::I32 => types::I32,\n             IntTy::I64 => types::I64,\n             IntTy::I128 => unimpl!(\"i128\"),\n-            IntTy::Isize => pointer_ty(tcx)\n+            IntTy::Isize => pointer_ty(tcx),\n         },\n         TypeVariants::TyChar => types::I32,\n         TypeVariants::TyFloat(size) => match size {\n@@ -68,7 +68,10 @@ fn codegen_field<'a, 'tcx: 'a>(\n     let field_offset = layout.fields.offset(field.index());\n     let field_ty = layout.field(&*fx, field.index());\n     if field_offset.bytes() > 0 {\n-        (fx.bcx.ins().iadd_imm(base, field_offset.bytes() as i64), field_ty)\n+        (\n+            fx.bcx.ins().iadd_imm(base, field_offset.bytes() as i64),\n+            field_ty,\n+        )\n     } else {\n         (base, field_ty)\n     }\n@@ -101,7 +104,9 @@ impl<'tcx> CValue<'tcx> {\n                     offset: None,\n                 });\n                 fx.bcx.ins().stack_store(value, stack_slot, 0);\n-                fx.bcx.ins().stack_addr(fx.module.pointer_type(), stack_slot, 0)\n+                fx.bcx\n+                    .ins()\n+                    .stack_addr(fx.module.pointer_type(), stack_slot, 0)\n             }\n         }\n     }\n@@ -187,7 +192,12 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             size: layout.size.bytes() as u32,\n             offset: None,\n         });\n-        CPlace::Addr(fx.bcx.ins().stack_addr(fx.module.pointer_type(), stack_slot, 0), layout)\n+        CPlace::Addr(\n+            fx.bcx\n+                .ins()\n+                .stack_addr(fx.module.pointer_type(), stack_slot, 0),\n+            layout,\n+        )\n     }\n \n     pub fn from_stack_slot(\n@@ -196,7 +206,12 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n-        CPlace::Addr(fx.bcx.ins().stack_addr(fx.module.pointer_type(), stack_slot, 0), layout)\n+        CPlace::Addr(\n+            fx.bcx\n+                .ins()\n+                .stack_addr(fx.module.pointer_type(), stack_slot, 0),\n+            layout,\n+        )\n     }\n \n     pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CValue<'tcx> {\n@@ -254,10 +269,12 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                     let from = from.expect_byref();\n                     let mut offset = 0;\n                     while size - offset >= 8 {\n-                        let byte = fx\n-                            .bcx\n-                            .ins()\n-                            .load(fx.module.pointer_type(), MemFlags::new(), from.0, offset);\n+                        let byte = fx.bcx.ins().load(\n+                            fx.module.pointer_type(),\n+                            MemFlags::new(),\n+                            from.0,\n+                            offset,\n+                        );\n                         fx.bcx.ins().store(MemFlags::new(), byte, addr, offset);\n                         offset += 8;\n                     }\n@@ -304,7 +321,10 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         match layout.ty.sty {\n             TypeVariants::TyArray(elem_ty, _) => {\n                 let elem_layout = fx.layout_of(elem_ty);\n-                let offset = fx.bcx.ins().imul_imm(index, elem_layout.size.bytes() as i64);\n+                let offset = fx\n+                    .bcx\n+                    .ins()\n+                    .imul_imm(index, elem_layout.size.bytes() as i64);\n                 CPlace::Addr(fx.bcx.ins().iadd(addr, offset), elem_layout)\n             }\n             TypeVariants::TySlice(_elem_ty) => unimplemented!(\"place_index(TySlice)\"),"}, {"sha": "10a59560ff55cbd505bebffc80131e20f9ca4a56", "filename": "src/constant.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65641b887270da200d4ea83f8f968ad67de16401/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65641b887270da200d4ea83f8f968ad67de16401/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=65641b887270da200d4ea83f8f968ad67de16401", "patch": "@@ -134,12 +134,17 @@ fn data_id_for_alloc_id<B: Backend>(module: &mut Module<B>, alloc_id: AllocId) -\n         .unwrap()\n }\n \n-fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(tcx: TyCtxt<'a, 'tcx, 'tcx>, module: &mut Module<B>, def_id: DefId) -> DataId {\n+fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<B>,\n+    def_id: DefId,\n+) -> DataId {\n     let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n     let is_mutable = if let ::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n         true\n     } else {\n-        !tcx.type_of(def_id).is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n+        !tcx.type_of(def_id)\n+            .is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n     };\n     module\n         .declare_data(&*symbol_name, Linkage::Export, is_mutable)\n@@ -152,7 +157,10 @@ fn cplace_for_dataid<'a, 'tcx: 'a>(\n     data_id: DataId,\n ) -> CPlace<'tcx> {\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    let global_ptr = fx.bcx.ins().global_value(fx.module.pointer_type(), local_data_id);\n+    let global_ptr = fx\n+        .bcx\n+        .ins()\n+        .global_value(fx.module.pointer_type(), local_data_id);\n     let layout = fx.layout_of(fx.monomorphize(&ty));\n     CPlace::Addr(global_ptr, layout)\n }"}, {"sha": "7ea6abe03a4b9950cd0c330ec1131cdf9b932fa1", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65641b887270da200d4ea83f8f968ad67de16401/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65641b887270da200d4ea83f8f968ad67de16401/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=65641b887270da200d4ea83f8f968ad67de16401", "patch": "@@ -215,9 +215,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut flags_builder = settings::builder();\n         flags_builder.enable(\"is_pic\").unwrap();\n         let flags = settings::Flags::new(flags_builder);\n-        let isa = cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n-            .unwrap()\n-            .finish(flags);\n+        let isa =\n+            cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n+                .unwrap()\n+                .finish(flags);\n \n         let mono_items =\n             collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0;"}]}