{"sha": "065caf34f5ff29e04605f95d9c5d511af219439a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NWNhZjM0ZjVmZjI5ZTA0NjA1Zjk1ZDljNWQ1MTFhZjIxOTQzOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-31T06:01:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-31T06:01:41Z"}, "message": "auto merge of #18431 : japaric/rust/show, r=alexcrichton\n\nr? @aturon \r\ncc #16918", "tree": {"sha": "6a97aad0062961e3d134c9a616c06eb85721d9e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a97aad0062961e3d134c9a616c06eb85721d9e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065caf34f5ff29e04605f95d9c5d511af219439a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065caf34f5ff29e04605f95d9c5d511af219439a", "html_url": "https://github.com/rust-lang/rust/commit/065caf34f5ff29e04605f95d9c5d511af219439a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065caf34f5ff29e04605f95d9c5d511af219439a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "221fc1e3cdcc208e1bb7debcc2de27d47c847747", "url": "https://api.github.com/repos/rust-lang/rust/commits/221fc1e3cdcc208e1bb7debcc2de27d47c847747", "html_url": "https://github.com/rust-lang/rust/commit/221fc1e3cdcc208e1bb7debcc2de27d47c847747"}, {"sha": "eef7e970172df38358cf25c386a4ec79a7b61b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef7e970172df38358cf25c386a4ec79a7b61b0b", "html_url": "https://github.com/rust-lang/rust/commit/eef7e970172df38358cf25c386a4ec79a7b61b0b"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "de98bc63183a24d6b80273035486fc675a597a2e", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/065caf34f5ff29e04605f95d9c5d511af219439a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065caf34f5ff29e04605f95d9c5d511af219439a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=065caf34f5ff29e04605f95d9c5d511af219439a", "patch": "@@ -16,6 +16,7 @@ use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::intrinsics;\n+use core::kinds::Sized;\n use core::mem;\n use core::option::Option;\n use core::raw::TraitObject;\n@@ -120,7 +121,7 @@ impl BoxAny for Box<Any+'static> {\n     }\n }\n \n-impl<T: fmt::Show> fmt::Show for Box<T> {\n+impl<Sized? T: fmt::Show> fmt::Show for Box<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }"}, {"sha": "5000b020985e58864bd744815cc34d76adb80400", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/065caf34f5ff29e04605f95d9c5d511af219439a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065caf34f5ff29e04605f95d9c5d511af219439a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=065caf34f5ff29e04605f95d9c5d511af219439a", "patch": "@@ -16,7 +16,7 @@ use any;\n use cell::{Cell, Ref, RefMut};\n use collections::Collection;\n use iter::{Iterator, range};\n-use kinds::Copy;\n+use kinds::{Copy, Sized};\n use mem;\n use option::{Option, Some, None};\n use ops::Deref;\n@@ -168,85 +168,85 @@ impl<'a> Show for Arguments<'a> {\n /// When a format is not otherwise specified, types are formatted by ascribing\n /// to this trait. There is not an explicit way of selecting this trait to be\n /// used for formatting, it is only if no other format is specified.\n-pub trait Show {\n+pub trait Show for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `b` character\n-pub trait Bool {\n+pub trait Bool for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `c` character\n-pub trait Char {\n+pub trait Char for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `i` and `d` characters\n-pub trait Signed {\n+pub trait Signed for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `u` character\n-pub trait Unsigned {\n+pub trait Unsigned for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `o` character\n-pub trait Octal {\n+pub trait Octal for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `t` character\n-pub trait Binary {\n+pub trait Binary for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `x` character\n-pub trait LowerHex {\n+pub trait LowerHex for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `X` character\n-pub trait UpperHex {\n+pub trait UpperHex for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `s` character\n-pub trait String {\n+pub trait String for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `p` character\n-pub trait Pointer {\n+pub trait Pointer for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `f` character\n-pub trait Float {\n+pub trait Float for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `e` character\n-pub trait LowerExp {\n+pub trait LowerExp for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `E` character\n-pub trait UpperExp {\n+pub trait UpperExp for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n@@ -257,7 +257,7 @@ macro_rules! uniform_fn_call_workaround {\n     ($( $name: ident, $trait_: ident; )*) => {\n         $(\n             #[doc(hidden)]\n-            pub fn $name<T: $trait_>(x: &T, fmt: &mut Formatter) -> Result {\n+            pub fn $name<Sized? T: $trait_>(x: &T, fmt: &mut Formatter) -> Result {\n                 x.fmt(fmt)\n             }\n             )*\n@@ -583,10 +583,10 @@ pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n \n // Implementations of the core formatting traits\n \n-impl<'a, T: Show> Show for &'a T {\n+impl<'a, Sized? T: Show> Show for &'a T {\n     fn fmt(&self, f: &mut Formatter) -> Result { secret_show(*self, f) }\n }\n-impl<'a, T: Show> Show for &'a mut T {\n+impl<'a, Sized? T: Show> Show for &'a mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { secret_show(&**self, f) }\n }\n impl<'a> Show for &'a Show+'a {\n@@ -599,12 +599,18 @@ impl Bool for bool {\n     }\n }\n \n-impl<'a, T: str::Str> String for T {\n+impl<T: str::Str> String for T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(self.as_slice())\n     }\n }\n \n+impl String for str {\n+    fn fmt(&self, f: &mut Formatter) -> Result {\n+        f.pad(self)\n+    }\n+}\n+\n impl Char for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         use char::Char;\n@@ -708,13 +714,13 @@ floating!(f64)\n // Implementation of Show for various core types\n \n macro_rules! delegate(($ty:ty to $other:ident) => {\n-    impl<'a> Show for $ty {\n+    impl Show for $ty {\n         fn fmt(&self, f: &mut Formatter) -> Result {\n             (concat_idents!(secret_, $other)(self, f))\n         }\n     }\n })\n-delegate!(&'a str to string)\n+delegate!(str to string)\n delegate!(bool to bool)\n delegate!(char to char)\n delegate!(f32 to float)\n@@ -761,7 +767,7 @@ impl<'a> Show for &'a any::Any+'a {\n     fn fmt(&self, f: &mut Formatter) -> Result { f.pad(\"&Any\") }\n }\n \n-impl<'a, T: Show> Show for &'a [T] {\n+impl<T: Show> Show for [T] {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {\n             try!(write!(f, \"[\"));\n@@ -782,12 +788,6 @@ impl<'a, T: Show> Show for &'a [T] {\n     }\n }\n \n-impl<'a, T: Show> Show for &'a mut [T] {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        secret_show(&self.as_slice(), f)\n-    }\n-}\n-\n impl Show for () {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(\"()\")"}, {"sha": "3d2672653323f25104805a0ad56a7b66b8911fc9", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/065caf34f5ff29e04605f95d9c5d511af219439a/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065caf34f5ff29e04605f95d9c5d511af219439a/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=065caf34f5ff29e04605f95d9c5d511af219439a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Show)]\n+struct Foo(Box<[u8]>);\n+\n+pub fn main() {\n+    println!(\"{}\", Foo(box [0, 1, 2]));\n+}"}]}