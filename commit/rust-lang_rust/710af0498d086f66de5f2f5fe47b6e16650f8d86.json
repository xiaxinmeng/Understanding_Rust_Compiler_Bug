{"sha": "710af0498d086f66de5f2f5fe47b6e16650f8d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMGFmMDQ5OGQwODZmNjZkZTVmMmY1ZmU0N2I2ZTE2NjUwZjhkODY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-26T19:51:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-26T21:52:39Z"}, "message": "Refactor object-safety test to use def-ids only", "tree": {"sha": "709e71c7fcbd6a29f9a6d5fecb165c128c627a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709e71c7fcbd6a29f9a6d5fecb165c128c627a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710af0498d086f66de5f2f5fe47b6e16650f8d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710af0498d086f66de5f2f5fe47b6e16650f8d86", "html_url": "https://github.com/rust-lang/rust/commit/710af0498d086f66de5f2f5fe47b6e16650f8d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710af0498d086f66de5f2f5fe47b6e16650f8d86/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703308db4a130191db4000dfbbfc92936c604b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/703308db4a130191db4000dfbbfc92936c604b52", "html_url": "https://github.com/rust-lang/rust/commit/703308db4a130191db4000dfbbfc92936c604b52"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "ffc11efe7c711e7c6c435225ca7d6af69a5d54d4", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=710af0498d086f66de5f2f5fe47b6e16650f8d86", "patch": "@@ -48,6 +48,8 @@ pub use self::util::get_vtable_index_of_object_method;\n pub use self::util::trait_ref_for_builtin_bound;\n pub use self::util::supertraits;\n pub use self::util::Supertraits;\n+pub use self::util::supertrait_def_ids;\n+pub use self::util::SupertraitDefIds;\n pub use self::util::transitive_bounds;\n pub use self::util::upcast;\n \n@@ -640,7 +642,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n }\n \n impl<'tcx> TraitObligation<'tcx> {\n-    fn self_ty(&self) -> Ty<'tcx> {\n-        self.predicate.0.self_ty()\n+    fn self_ty(&self) -> ty::Binder<Ty<'tcx>> {\n+        ty::Binder(self.predicate.skip_binder().self_ty())\n     }\n }"}, {"sha": "9dccadc932bb49e2fcbf3ab33aa298fbb413cdea", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=710af0498d086f66de5f2f5fe47b6e16650f8d86", "patch": "@@ -53,36 +53,36 @@ pub enum MethodViolationCode {\n }\n \n pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                            trait_ref: ty::PolyTraitRef<'tcx>)\n+                            trait_def_id: ast::DefId)\n                             -> bool\n {\n     // Because we query yes/no results frequently, we keep a cache:\n     let cached_result =\n-        tcx.object_safety_cache.borrow().get(&trait_ref.def_id()).cloned();\n+        tcx.object_safety_cache.borrow().get(&trait_def_id).cloned();\n \n     let result =\n         cached_result.unwrap_or_else(|| {\n-            let result = object_safety_violations(tcx, trait_ref.clone()).is_empty();\n+            let result = object_safety_violations(tcx, trait_def_id).is_empty();\n \n             // Record just a yes/no result in the cache; this is what is\n             // queried most frequently. Note that this may overwrite a\n             // previous result, but always with the same thing.\n-            tcx.object_safety_cache.borrow_mut().insert(trait_ref.def_id(), result);\n+            tcx.object_safety_cache.borrow_mut().insert(trait_def_id, result);\n \n             result\n         });\n \n-    debug!(\"is_object_safe({}) = {}\", trait_ref.repr(tcx), result);\n+    debug!(\"is_object_safe({}) = {}\", trait_def_id.repr(tcx), result);\n \n     result\n }\n \n pub fn object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                      sub_trait_ref: ty::PolyTraitRef<'tcx>)\n+                                      trait_def_id: ast::DefId)\n                                       -> Vec<ObjectSafetyViolation<'tcx>>\n {\n-    supertraits(tcx, sub_trait_ref)\n-        .flat_map(|tr| object_safety_violations_for_trait(tcx, tr.def_id()).into_iter())\n+    traits::supertrait_def_ids(tcx, trait_def_id)\n+        .flat_map(|def_id| object_safety_violations_for_trait(tcx, def_id).into_iter())\n         .collect()\n }\n "}, {"sha": "7e89534026ff37a5e1bf1b312f1dba997700db66", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=710af0498d086f66de5f2f5fe47b6e16650f8d86", "patch": "@@ -1237,7 +1237,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // self-type from one of the other inputs. Without this check,\n         // these cases wind up being considered ambiguous due to a\n         // (spurious) ambiguity introduced here.\n-        if !object_safety::is_object_safe(self.tcx(), obligation.predicate.to_poly_trait_ref()) {\n+        let predicate_trait_ref = obligation.predicate.to_poly_trait_ref();\n+        if !object_safety::is_object_safe(self.tcx(), predicate_trait_ref.def_id()) {\n             return;\n         }\n "}, {"sha": "06b687bd92b9e2a6eea49ffdc78e033b1a0109af", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=710af0498d086f66de5f2f5fe47b6e16650f8d86", "patch": "@@ -209,6 +209,47 @@ pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()\n }\n \n+///////////////////////////////////////////////////////////////////////////\n+// Iterator over def-ids of supertraits\n+\n+pub struct SupertraitDefIds<'cx, 'tcx:'cx> {\n+    tcx: &'cx ty::ctxt<'tcx>,\n+    stack: Vec<ast::DefId>,\n+    visited: FnvHashSet<ast::DefId>,\n+}\n+\n+pub fn supertrait_def_ids<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n+                                     trait_def_id: ast::DefId)\n+                                     -> SupertraitDefIds<'cx, 'tcx>\n+{\n+    SupertraitDefIds {\n+        tcx: tcx,\n+        stack: vec![trait_def_id],\n+        visited: Some(trait_def_id).into_iter().collect(),\n+    }\n+}\n+\n+impl<'cx, 'tcx> Iterator for SupertraitDefIds<'cx, 'tcx> {\n+    type Item = ast::DefId;\n+\n+    fn next(&mut self) -> Option<ast::DefId> {\n+        let def_id = match self.stack.pop() {\n+            Some(def_id) => def_id,\n+            None => { return None; }\n+        };\n+\n+        let predicates = ty::lookup_super_predicates(self.tcx, def_id);\n+        let visited = &mut self.visited;\n+        self.stack.extend(\n+            predicates.predicates\n+                      .iter()\n+                      .filter_map(|p| p.to_opt_poly_trait_ref())\n+                      .map(|t| t.def_id())\n+                      .filter(|&super_def_id| visited.insert(super_def_id)));\n+        Some(def_id)\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Other\n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "67461ff561bb8beb529a74f4ba1a6a876c091113", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710af0498d086f66de5f2f5fe47b6e16650f8d86/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=710af0498d086f66de5f2f5fe47b6e16650f8d86", "patch": "@@ -28,18 +28,17 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                  object_trait: &ty::TyTrait<'tcx>,\n                                  span: Span)\n {\n-    let object_trait_ref =\n-        object_trait.principal_trait_ref_with_self_ty(tcx, tcx.types.err);\n+    let trait_def_id = object_trait.principal_def_id();\n \n-    if traits::is_object_safe(tcx, object_trait_ref.clone()) {\n+    if traits::is_object_safe(tcx, trait_def_id) {\n         return;\n     }\n \n     span_err!(tcx.sess, span, E0038,\n               \"cannot convert to a trait object because trait `{}` is not object-safe\",\n-              ty::item_path_str(tcx, object_trait_ref.def_id()));\n+              ty::item_path_str(tcx, trait_def_id));\n \n-    let violations = traits::object_safety_violations(tcx, object_trait_ref.clone());\n+    let violations = traits::object_safety_violations(tcx, trait_def_id);\n     for violation in violations {\n         match violation {\n             ObjectSafetyViolation::SizedSelf => {"}]}