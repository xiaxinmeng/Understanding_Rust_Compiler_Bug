{"sha": "86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "node_id": "C_kwDOAAsO6NoAKDg2MTc5YzQ1NDllNzRhY2YyMmZjNGRhMDJiNjRmMGJiMmNlMWY0YWE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-13T00:45:15Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-13T00:45:15Z"}, "message": "rustdoc: rename `Type::is_same` to `is_doc_subtype_of`", "tree": {"sha": "f640a5237142b16dd1471417cc358163a0b1e185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f640a5237142b16dd1471417cc358163a0b1e185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "html_url": "https://github.com/rust-lang/rust/commit/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "html_url": "https://github.com/rust-lang/rust/commit/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1b8478ee21c684a39e1fe91821a1df1387e79867", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "patch": "@@ -1495,7 +1495,7 @@ impl Type {\n     ///\n     /// An owned type is also the same as its borrowed variants (this is commutative),\n     /// but `&T` is not the same as `&mut T`.\n-    pub(crate) fn is_same(&self, other: &Self, cache: &Cache) -> bool {\n+    pub(crate) fn is_doc_subtype_of(&self, other: &Self, cache: &Cache) -> bool {\n         let (self_cleared, other_cleared) = if !self.is_borrowed_ref() || !other.is_borrowed_ref() {\n             (self.without_borrowed_ref(), other.without_borrowed_ref())\n         } else {\n@@ -1504,17 +1504,17 @@ impl Type {\n         match (self_cleared, other_cleared) {\n             // Recursive cases.\n             (Type::Tuple(a), Type::Tuple(b)) => {\n-                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_same(b, cache))\n+                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_doc_subtype_of(b, cache))\n             }\n-            (Type::Slice(a), Type::Slice(b)) => a.is_same(b, cache),\n-            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_same(b, cache),\n+            (Type::Slice(a), Type::Slice(b)) => a.is_doc_subtype_of(b, cache),\n+            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_doc_subtype_of(b, cache),\n             (Type::RawPointer(mutability, type_), Type::RawPointer(b_mutability, b_type_)) => {\n-                mutability == b_mutability && type_.is_same(b_type_, cache)\n+                mutability == b_mutability && type_.is_doc_subtype_of(b_type_, cache)\n             }\n             (\n                 Type::BorrowedRef { mutability, type_, .. },\n                 Type::BorrowedRef { mutability: b_mutability, type_: b_type_, .. },\n-            ) => mutability == b_mutability && type_.is_same(b_type_, cache),\n+            ) => mutability == b_mutability && type_.is_doc_subtype_of(b_type_, cache),\n             // Placeholders are equal to all other types.\n             (Type::Infer, _) | (_, Type::Infer) => true,\n             // Generics match everything on the right, but not on the left.\n@@ -1526,7 +1526,7 @@ impl Type {\n                     && a.generics()\n                         .zip(b.generics())\n                         .map(|(ag, bg)| {\n-                            ag.iter().zip(bg.iter()).all(|(at, bt)| at.is_same(bt, cache))\n+                            ag.iter().zip(bg.iter()).all(|(at, bt)| at.is_doc_subtype_of(bt, cache))\n                         })\n                         .unwrap_or(true)\n             }"}, {"sha": "afbee3e5f78caa5ef587ff8d88b2505885af4c3c", "filename": "src/librustdoc/clean/types/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs?ref=86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "patch": "@@ -77,6 +77,6 @@ fn is_same_generic() {\n     let cache = Cache::new(false);\n     let generic = Type::Generic(rustc_span::symbol::sym::Any);\n     let unit = Type::Primitive(PrimitiveType::Unit);\n-    assert!(!generic.is_same(&unit, &cache));\n-    assert!(unit.is_same(&generic, &cache));\n+    assert!(!generic.is_doc_subtype_of(&unit, &cache));\n+    assert!(unit.is_doc_subtype_of(&generic, &cache));\n }"}, {"sha": "832c4e7cfe77b17c4385051c5512a83a0dfccf72", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86179c4549e74acf22fc4da02b64f0bb2ce1f4aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=86179c4549e74acf22fc4da02b64f0bb2ce1f4aa", "patch": "@@ -1291,7 +1291,7 @@ pub(crate) fn notable_traits_button(ty: &clean::Type, cx: &mut Context<'_>) -> O\n     if let Some(impls) = cx.cache().impls.get(&did) {\n         for i in impls {\n             let impl_ = i.inner_impl();\n-            if !ty.is_same(&impl_.for_, cx.cache()) {\n+            if !ty.is_doc_subtype_of(&impl_.for_, cx.cache()) {\n                 // Two different types might have the same did,\n                 // without actually being the same.\n                 continue;\n@@ -1327,7 +1327,7 @@ fn notable_traits_decl(ty: &clean::Type, cx: &Context<'_>) -> (String, String) {\n \n     for i in impls {\n         let impl_ = i.inner_impl();\n-        if !ty.is_same(&impl_.for_, cx.cache()) {\n+        if !ty.is_doc_subtype_of(&impl_.for_, cx.cache()) {\n             // Two different types might have the same did,\n             // without actually being the same.\n             continue;"}]}