{"sha": "8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "node_id": "C_kwDOAAsO6NoAKDhmMzYzMzRjYTkzOWE2N2NjZTNmMzdmMjQ5NTNmZjZmMmQzZjNkMzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T21:15:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T21:15:16Z"}, "message": "Auto merge of #95742 - Dylan-DPC:rollup-8n7o87y, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95342 (Ignore \"format the world\" commit in git blame)\n - #95353 ([bootstrap] Give a hard error when filtering tests for a file that does not exist)\n - #95649 (New mir-opt deref_separator)\n - #95721 (Fix typo in bootstrap/setup.rs)\n - #95730 (Rename RWLock to RwLock in std::sys.)\n - #95731 (Check that all hidden types are the same and then deduplicate them.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a3c11a30dc96000927385cae40f36a194b09ed41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c11a30dc96000927385cae40f36a194b09ed41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "html_url": "https://github.com/rust-lang/rust/commit/8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2afaba465e0bf44b9b37beba8d908b78dcdadc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2afaba465e0bf44b9b37beba8d908b78dcdadc7", "html_url": "https://github.com/rust-lang/rust/commit/c2afaba465e0bf44b9b37beba8d908b78dcdadc7"}, {"sha": "ebba894f197ac06bfca84d61e11234484ce74773", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebba894f197ac06bfca84d61e11234484ce74773", "html_url": "https://github.com/rust-lang/rust/commit/ebba894f197ac06bfca84d61e11234484ce74773"}], "stats": {"total": 561, "additions": 402, "deletions": 159}, "files": [{"sha": "307e22b0df1fd0968174cb1fe43721d5935119b6", "filename": ".git-blame-ignore-revs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/.git-blame-ignore-revs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/.git-blame-ignore-revs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.git-blame-ignore-revs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -0,0 +1,6 @@\n+# format the world\n+a06baa56b95674fc626b3c3fd680d6a65357fe60\n+# format libcore\n+95e00bfed801e264e9c4ac817004153ca0f19eb6\n+# reformat with new rustfmt\n+971c549ca334b7b7406e61e958efcca9c4152822"}, {"sha": "0bb6559e6545288bc7492124c4318ba9a500b371", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 80, "deletions": 62, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -55,75 +55,93 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n     ) -> VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> {\n-        opaque_ty_decls\n-            .into_iter()\n-            .map(|(opaque_type_key, (concrete_type, origin))| {\n-                let substs = opaque_type_key.substs;\n-                debug!(?concrete_type, ?substs);\n+        let mut result: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> = VecMap::new();\n+        for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n+            let substs = opaque_type_key.substs;\n+            debug!(?concrete_type, ?substs);\n \n-                let mut subst_regions = vec![self.universal_regions.fr_static];\n-                let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n-                    if let ty::RePlaceholder(..) = region.kind() {\n-                        // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n-                        return region;\n+            let mut subst_regions = vec![self.universal_regions.fr_static];\n+            let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+                if let ty::RePlaceholder(..) = region.kind() {\n+                    // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n+                    return region;\n+                }\n+                let vid = self.to_region_vid(region);\n+                trace!(?vid);\n+                let scc = self.constraint_sccs.scc(vid);\n+                trace!(?scc);\n+                match self.scc_values.universal_regions_outlived_by(scc).find_map(|lb| {\n+                    self.eval_equal(vid, lb).then_some(self.definitions[lb].external_name?)\n+                }) {\n+                    Some(region) => {\n+                        let vid = self.universal_regions.to_region_vid(region);\n+                        subst_regions.push(vid);\n+                        region\n                     }\n-                    let vid = self.to_region_vid(region);\n-                    trace!(?vid);\n-                    let scc = self.constraint_sccs.scc(vid);\n-                    trace!(?scc);\n-                    match self.scc_values.universal_regions_outlived_by(scc).find_map(|lb| {\n-                        self.eval_equal(vid, lb).then_some(self.definitions[lb].external_name?)\n-                    }) {\n-                        Some(region) => {\n-                            let vid = self.universal_regions.to_region_vid(region);\n-                            subst_regions.push(vid);\n-                            region\n-                        }\n-                        None => {\n-                            subst_regions.push(vid);\n-                            infcx.tcx.sess.delay_span_bug(\n-                                concrete_type.span,\n-                                \"opaque type with non-universal region substs\",\n-                            );\n-                            infcx.tcx.lifetimes.re_static\n-                        }\n+                    None => {\n+                        subst_regions.push(vid);\n+                        infcx.tcx.sess.delay_span_bug(\n+                            concrete_type.span,\n+                            \"opaque type with non-universal region substs\",\n+                        );\n+                        infcx.tcx.lifetimes.re_static\n                     }\n-                });\n+                }\n+            });\n \n-                subst_regions.sort();\n-                subst_regions.dedup();\n+            subst_regions.sort();\n+            subst_regions.dedup();\n \n-                let universal_concrete_type =\n-                    infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n-                        ty::ReVar(vid) => subst_regions\n-                            .iter()\n-                            .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n-                            .and_then(|ur_vid| self.definitions[*ur_vid].external_name)\n-                            .unwrap_or(infcx.tcx.lifetimes.re_root_empty),\n-                        _ => region,\n-                    });\n+            let universal_concrete_type =\n+                infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n+                    ty::ReVar(vid) => subst_regions\n+                        .iter()\n+                        .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n+                        .and_then(|ur_vid| self.definitions[*ur_vid].external_name)\n+                        .unwrap_or(infcx.tcx.lifetimes.re_root_empty),\n+                    _ => region,\n+                });\n \n-                debug!(?universal_concrete_type, ?universal_substs);\n+            debug!(?universal_concrete_type, ?universal_substs);\n \n-                let opaque_type_key =\n-                    OpaqueTypeKey { def_id: opaque_type_key.def_id, substs: universal_substs };\n-                let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n-                    opaque_type_key,\n-                    universal_concrete_type,\n-                );\n-                let ty = if check_opaque_type_parameter_valid(\n-                    infcx.tcx,\n-                    opaque_type_key,\n-                    origin,\n-                    concrete_type.span,\n-                ) {\n-                    remapped_type\n-                } else {\n-                    infcx.tcx.ty_error()\n-                };\n-                (opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span })\n-            })\n-            .collect()\n+            let opaque_type_key =\n+                OpaqueTypeKey { def_id: opaque_type_key.def_id, substs: universal_substs };\n+            let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n+                opaque_type_key,\n+                universal_concrete_type,\n+            );\n+            let ty = if check_opaque_type_parameter_valid(\n+                infcx.tcx,\n+                opaque_type_key,\n+                origin,\n+                concrete_type.span,\n+            ) {\n+                remapped_type\n+            } else {\n+                infcx.tcx.ty_error()\n+            };\n+            // Sometimes two opaque types are the same only after we remap the generic parameters\n+            // back to the opaque type definition. E.g. we may have `OpaqueType<X, Y>` mapped to `(X, Y)`\n+            // and `OpaqueType<Y, X>` mapped to `(Y, X)`, and those are the same, but we only know that\n+            // once we convert the generic parameters to those of the opaque type.\n+            if let Some(prev) = result.get_mut(&opaque_type_key) {\n+                if prev.ty != ty {\n+                    let mut err = infcx.tcx.sess.struct_span_err(\n+                        concrete_type.span,\n+                        &format!(\"hidden type `{}` differed from previous `{}`\", ty, prev.ty),\n+                    );\n+                    err.span_note(prev.span, \"previous hidden type bound here\");\n+                    err.emit();\n+                    prev.ty = infcx.tcx.ty_error();\n+                }\n+                // Pick a better span if there is one.\n+                // FIXME(oli-obk): collect multiple spans for better diagnostics down the road.\n+                prev.span = prev.span.substitute_dummy(concrete_type.span);\n+            } else {\n+                result.insert(opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span });\n+            }\n+        }\n+        result\n     }\n \n     /// Map the regions in the type to named regions. This is similar to what"}, {"sha": "79aac163550612d0fc7f65d516ae9beaac8df474", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -0,0 +1,72 @@\n+use crate::MirPass;\n+use rustc_middle::mir::patch::MirPatch;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+pub struct Derefer;\n+\n+pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let mut patch = MirPatch::new(body);\n+    let (basic_blocks, local_decl) = body.basic_blocks_and_local_decls_mut();\n+    for (block, data) in basic_blocks.iter_enumerated_mut() {\n+        for (i, stmt) in data.statements.iter_mut().enumerate() {\n+            match stmt.kind {\n+                StatementKind::Assign(box (og_place, Rvalue::Ref(region, borrow_knd, place))) => {\n+                    for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n+                        if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n+                            // The type that we are derefing.\n+                            let ty = p_ref.ty(local_decl, tcx).ty;\n+                            let temp = patch.new_temp(ty, stmt.source_info.span);\n+\n+                            // Because we are assigning this right before original statement\n+                            // we are using index i of statement.\n+                            let loc = Location { block: block, statement_index: i };\n+                            patch.add_statement(loc, StatementKind::StorageLive(temp));\n+\n+                            // We are adding current p_ref's projections to our\n+                            // temp value.\n+                            let deref_place =\n+                                Place::from(p_ref.local).project_deeper(p_ref.projection, tcx);\n+                            patch.add_assign(\n+                                loc,\n+                                Place::from(temp),\n+                                Rvalue::Use(Operand::Move(deref_place)),\n+                            );\n+\n+                            // We are creating a place by using our temp value's location\n+                            // and copying derefed values which we need to create new statement.\n+                            let temp_place =\n+                                Place::from(temp).project_deeper(&place.projection[idx..], tcx);\n+                            let new_stmt = Statement {\n+                                source_info: stmt.source_info,\n+                                kind: StatementKind::Assign(Box::new((\n+                                    og_place,\n+                                    Rvalue::Ref(region, borrow_knd, temp_place),\n+                                ))),\n+                            };\n+\n+                            // Replace current statement with newly created one.\n+                            *stmt = new_stmt;\n+\n+                            // Since our job with the temp is done it should be gone\n+                            let loc = Location { block: block, statement_index: i + 1 };\n+                            patch.add_statement(loc, StatementKind::StorageDead(temp));\n+\n+                            // As all projections are off the base projection, if there are\n+                            // multiple derefs in the middle of projection, it might cause\n+                            // unsoundness, to not let that happen we break the loop.\n+                            break;\n+                        }\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+    patch.apply(body);\n+}\n+\n+impl<'tcx> MirPass<'tcx> for Derefer {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        deref_finder(tcx, body);\n+    }\n+}"}, {"sha": "059ee09dfd794519b346a709eba017217864704d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -53,6 +53,7 @@ mod const_prop_lint;\n mod coverage;\n mod deaggregator;\n mod deduplicate_blocks;\n+mod deref_separator;\n mod dest_prop;\n pub mod dump_mir;\n mod early_otherwise_branch;\n@@ -431,6 +432,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n         // and it can help optimizations.\n         &deaggregator::Deaggregator,\n+        &deref_separator::Derefer,\n         &Lint(const_prop_lint::ConstProp),\n     ];\n "}, {"sha": "f1baf077580e672d03f4b924d7940d1dc0908740", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -20,7 +20,7 @@ use crate::process;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::backtrace;\n-use crate::sys_common::rwlock::StaticRWLock;\n+use crate::sys_common::rwlock::StaticRwLock;\n use crate::sys_common::thread_info;\n use crate::thread;\n \n@@ -83,7 +83,7 @@ impl Hook {\n     }\n }\n \n-static HOOK_LOCK: StaticRWLock = StaticRWLock::new();\n+static HOOK_LOCK: StaticRwLock = StaticRwLock::new();\n static mut HOOK: Hook = Hook::Default;\n \n /// Registers a custom panic hook, replacing any that was previously registered."}, {"sha": "ed62fa977becab7b56065382c333d2b945b8b5b4", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -76,7 +76,7 @@ use crate::sys_common::rwlock as sys;\n /// [`Mutex`]: super::Mutex\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLock<T: ?Sized> {\n-    inner: sys::MovableRWLock,\n+    inner: sys::MovableRwLock,\n     poison: poison::Flag,\n     data: UnsafeCell<T>,\n }\n@@ -146,7 +146,7 @@ impl<T> RwLock<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> RwLock<T> {\n         RwLock {\n-            inner: sys::MovableRWLock::new(),\n+            inner: sys::MovableRwLock::new(),\n             poison: poison::Flag::new(),\n             data: UnsafeCell::new(t),\n         }"}, {"sha": "690bb155e1a27fea59e59253d524975d007817e1", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -1,22 +1,22 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{Condvar, Mutex};\n \n-pub struct RWLock {\n+pub struct RwLock {\n     lock: Mutex,\n     cond: Condvar,\n     state: UnsafeCell<State>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n enum State {\n     Unlocked,\n     Reading(usize),\n     Writing,\n }\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n // This rwlock implementation is a relatively simple implementation which has a\n // condition variable for readers/writers as well as a mutex protecting the\n@@ -26,9 +26,9 @@ unsafe impl Sync for RWLock {}\n // hopefully correct this implementation is very likely to want to be changed in\n // the future.\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n     }\n \n     #[inline]"}, {"sha": "47be4c006ec7ec4e1e294d77a6d6b53fabcb7f2b", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -8,25 +8,25 @@ use super::waitqueue::{\n };\n use crate::mem;\n \n-pub struct RWLock {\n+pub struct RwLock {\n     readers: SpinMutex<WaitVariable<Option<NonZeroUsize>>>,\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-pub type MovableRWLock = Box<RWLock>;\n+pub type MovableRwLock = Box<RwLock>;\n \n-// Check at compile time that RWLock size matches C definition (see test_c_rwlock_initializer below)\n+// Check at compile time that RwLock size matches C definition (see test_c_rwlock_initializer below)\n //\n // # Safety\n // Never called, as it is a compile time check.\n #[allow(dead_code)]\n-unsafe fn rw_lock_size_assert(r: RWLock) {\n-    unsafe { mem::transmute::<RWLock, [u8; 144]>(r) };\n+unsafe fn rw_lock_size_assert(r: RwLock) {\n+    unsafe { mem::transmute::<RwLock, [u8; 144]>(r) };\n }\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock {\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock {\n             readers: SpinMutex::new(WaitVariable::new(None)),\n             writer: SpinMutex::new(WaitVariable::new(false)),\n         }\n@@ -180,7 +180,7 @@ const EINVAL: i32 = 22;\n \n #[cfg(not(test))]\n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n+pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RwLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n     }\n@@ -190,7 +190,7 @@ pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n \n #[cfg(not(test))]\n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n+pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RwLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n     }\n@@ -199,7 +199,7 @@ pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n }\n #[cfg(not(test))]\n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RWLock) -> i32 {\n+pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RwLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n     }"}, {"sha": "4799961154a475730938d1c42b62ef54c3feb6ef", "filename": "library/std/src/sys/sgx/rwlock/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock%2Ftests.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n-// Verify that the byte pattern libunwind uses to initialize an RWLock is\n-// equivalent to the value of RWLock::new(). If the value changes,\n+// Verify that the byte pattern libunwind uses to initialize an RwLock is\n+// equivalent to the value of RwLock::new(). If the value changes,\n // `src/UnwindRustSgx.h` in libunwind needs to be changed too.\n #[test]\n fn test_c_rwlock_initializer() {\n@@ -18,9 +18,9 @@ fn test_c_rwlock_initializer() {\n         /* 0x80 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n     ];\n \n-    // For the test to work, we need the padding/unused bytes in RWLock to be\n+    // For the test to work, we need the padding/unused bytes in RwLock to be\n     // initialized as 0. In practice, this is the case with statics.\n-    static RUST_RWLOCK_INIT: RWLock = RWLock::new();\n+    static RUST_RWLOCK_INIT: RwLock = RwLock::new();\n \n     unsafe {\n         // If the assertion fails, that not necessarily an issue with the value"}, {"sha": "719d95bbe50a81f49ce1b1ad12ed8da032044399", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -8,7 +8,7 @@ use crate::os::{\n     solid::ffi::{OsStrExt, OsStringExt},\n };\n use crate::path::{self, PathBuf};\n-use crate::sys_common::rwlock::StaticRWLock;\n+use crate::sys_common::rwlock::StaticRwLock;\n use crate::vec;\n \n use super::{abi, error, itron, memchr};\n@@ -78,7 +78,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n \n-static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+static ENV_LOCK: StaticRwLock = StaticRwLock::new();\n \n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,"}, {"sha": "df16cc680ad848d8e9d57fc9c2eacf3af41b8f40", "filename": "library/std/src/sys/solid/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -7,24 +7,24 @@ use super::{\n     },\n };\n \n-pub struct RWLock {\n+pub struct RwLock {\n     /// The ID of the underlying mutex object\n     rwl: SpinIdOnceCell<()>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n // Safety: `num_readers` is protected by `mtx_num_readers`\n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n fn new_rwl() -> Result<abi::ID, ItronError> {\n     ItronError::err_if_negative(unsafe { abi::rwl_acre_rwl() })\n }\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { rwl: SpinIdOnceCell::new() }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { rwl: SpinIdOnceCell::new() }\n     }\n \n     /// Get the inner mutex's ID, which is lazily created."}, {"sha": "2b8dd168068b5455946f0b5444ef2babcf0d39b4", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -10,15 +10,15 @@ cfg_if::cfg_if! {\n         mod pthread_rwlock; // FIXME: Implement this using a futex\n         pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n         pub use pthread_remutex::ReentrantMutex;\n-        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_rwlock::{RwLock, MovableRwLock};\n     } else {\n         mod pthread_mutex;\n         mod pthread_remutex;\n         mod pthread_rwlock;\n         mod pthread_condvar;\n         pub use pthread_mutex::{Mutex, MovableMutex};\n         pub use pthread_remutex::ReentrantMutex;\n-        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_rwlock::{RwLock, MovableRwLock};\n         pub use pthread_condvar::{Condvar, MovableCondvar};\n     }\n }"}, {"sha": "11a0c0457cd1aef5bee3e5682516011e965a6060", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -1,20 +1,20 @@\n use crate::cell::UnsafeCell;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n \n-pub struct RWLock {\n+pub struct RwLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n     write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n-pub type MovableRWLock = Box<RWLock>;\n+pub type MovableRwLock = Box<RwLock>;\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock {\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock {\n             inner: UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER),\n             write_locked: UnsafeCell::new(false),\n             num_readers: AtomicUsize::new(0),"}, {"sha": "1be733ba106e866828c87a9f8cc1769a1530ba14", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -20,7 +20,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys::memchr;\n-use crate::sys_common::rwlock::{StaticRWLock, StaticRWLockReadGuard};\n+use crate::sys_common::rwlock::{StaticRwLock, StaticRwLockReadGuard};\n use crate::vec;\n \n #[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n@@ -481,9 +481,9 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     ptr::addr_of_mut!(environ)\n }\n \n-static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+static ENV_LOCK: StaticRwLock = StaticRwLock::new();\n \n-pub fn env_read_lock() -> StaticRWLockReadGuard {\n+pub fn env_read_lock() -> StaticRwLockReadGuard {\n     ENV_LOCK.read()\n }\n "}, {"sha": "35bd59130346f2bb7672ea13397cb7c4fbed012b", "filename": "library/std/src/sys/unsupported/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -3,4 +3,4 @@ mod mutex;\n mod rwlock;\n pub use condvar::{Condvar, MovableCondvar};\n pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n-pub use rwlock::{MovableRWLock, RWLock};\n+pub use rwlock::{MovableRwLock, RwLock};"}, {"sha": "14fd351314c17a9d87601c79f7f2221ca479e3fa", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -1,18 +1,18 @@\n use crate::cell::Cell;\n \n-pub struct RWLock {\n+pub struct RwLock {\n     // This platform has no threads, so we can use a Cell here.\n     mode: Cell<isize>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {} // no threads on this platform\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {} // no threads on this platform\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { mode: Cell::new(0) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { mode: Cell::new(0) }\n     }\n \n     #[inline]"}, {"sha": "690bb155e1a27fea59e59253d524975d007817e1", "filename": "library/std/src/sys/wasm/atomics/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -1,22 +1,22 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{Condvar, Mutex};\n \n-pub struct RWLock {\n+pub struct RwLock {\n     lock: Mutex,\n     cond: Condvar,\n     state: UnsafeCell<State>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n enum State {\n     Unlocked,\n     Reading(usize),\n     Writing,\n }\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n // This rwlock implementation is a relatively simple implementation which has a\n // condition variable for readers/writers as well as a mutex protecting the\n@@ -26,9 +26,9 @@ unsafe impl Sync for RWLock {}\n // hopefully correct this implementation is very likely to want to be changed in\n // the future.\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n     }\n \n     #[inline]"}, {"sha": "35bd59130346f2bb7672ea13397cb7c4fbed012b", "filename": "library/std/src/sys/windows/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -3,4 +3,4 @@ mod mutex;\n mod rwlock;\n pub use condvar::{Condvar, MovableCondvar};\n pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n-pub use rwlock::{MovableRWLock, RWLock};\n+pub use rwlock::{MovableRwLock, RwLock};"}, {"sha": "12906652e0b7170d617800ae402478ade0448f44", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -1,18 +1,18 @@\n use crate::cell::UnsafeCell;\n use crate::sys::c;\n \n-pub struct RWLock {\n+pub struct RwLock {\n     inner: UnsafeCell<c::SRWLOCK>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { inner: UnsafeCell::new(c::SRWLOCK_INIT) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { inner: UnsafeCell::new(c::SRWLOCK_INIT) }\n     }\n     #[inline]\n     pub unsafe fn read(&self) {"}, {"sha": "12e7a72a344dcc46facb8b226d2cbf0ad6694ecb", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -4,41 +4,41 @@ use crate::sys::locks as imp;\n ///\n /// This rwlock does not implement poisoning.\n ///\n-/// This rwlock has a const constructor ([`StaticRWLock::new`]), does not\n+/// This rwlock has a const constructor ([`StaticRwLock::new`]), does not\n /// implement `Drop` to cleanup resources.\n-pub struct StaticRWLock(imp::RWLock);\n+pub struct StaticRwLock(imp::RwLock);\n \n-impl StaticRWLock {\n+impl StaticRwLock {\n     /// Creates a new rwlock for use.\n     pub const fn new() -> Self {\n-        Self(imp::RWLock::new())\n+        Self(imp::RwLock::new())\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n     /// thread to do so.\n     ///\n     /// The lock is automatically unlocked when the returned guard is dropped.\n     #[inline]\n-    pub fn read(&'static self) -> StaticRWLockReadGuard {\n+    pub fn read(&'static self) -> StaticRwLockReadGuard {\n         unsafe { self.0.read() };\n-        StaticRWLockReadGuard(&self.0)\n+        StaticRwLockReadGuard(&self.0)\n     }\n \n     /// Acquires write access to the underlying lock, blocking the current thread\n     /// to do so.\n     ///\n     /// The lock is automatically unlocked when the returned guard is dropped.\n     #[inline]\n-    pub fn write(&'static self) -> StaticRWLockWriteGuard {\n+    pub fn write(&'static self) -> StaticRwLockWriteGuard {\n         unsafe { self.0.write() };\n-        StaticRWLockWriteGuard(&self.0)\n+        StaticRwLockWriteGuard(&self.0)\n     }\n }\n \n #[must_use]\n-pub struct StaticRWLockReadGuard(&'static imp::RWLock);\n+pub struct StaticRwLockReadGuard(&'static imp::RwLock);\n \n-impl Drop for StaticRWLockReadGuard {\n+impl Drop for StaticRwLockReadGuard {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -48,9 +48,9 @@ impl Drop for StaticRWLockReadGuard {\n }\n \n #[must_use]\n-pub struct StaticRWLockWriteGuard(&'static imp::RWLock);\n+pub struct StaticRwLockWriteGuard(&'static imp::RwLock);\n \n-impl Drop for StaticRWLockWriteGuard {\n+impl Drop for StaticRwLockWriteGuard {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -66,15 +66,15 @@ impl Drop for StaticRWLockWriteGuard {\n ///\n /// This rwlock does not implement poisoning.\n ///\n-/// This is either a wrapper around `Box<imp::RWLock>` or `imp::RWLock`,\n-/// depending on the platform. It is boxed on platforms where `imp::RWLock` may\n+/// This is either a wrapper around `Box<imp::RwLock>` or `imp::RwLock`,\n+/// depending on the platform. It is boxed on platforms where `imp::RwLock` may\n /// not be moved.\n-pub struct MovableRWLock(imp::MovableRWLock);\n+pub struct MovableRwLock(imp::MovableRwLock);\n \n-impl MovableRWLock {\n+impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n     pub fn new() -> Self {\n-        Self(imp::MovableRWLock::from(imp::RWLock::new()))\n+        Self(imp::MovableRwLock::from(imp::RwLock::new()))\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n@@ -127,7 +127,7 @@ impl MovableRWLock {\n     }\n }\n \n-impl Drop for MovableRWLock {\n+impl Drop for MovableRwLock {\n     fn drop(&mut self) {\n         unsafe { self.0.destroy() };\n     }"}, {"sha": "b730730854f1402b2d5a55743f452c9799d5fcc1", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -342,7 +342,7 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n                 dst.display(),\n                 e\n             ),\n-            Ok(_) => println!(\"Linked `src/etc/pre-commit.sh` to `.git/hooks/pre-push`\"),\n+            Ok(_) => println!(\"Linked `src/etc/pre-push.sh` to `.git/hooks/pre-push`\"),\n         };\n     } else {\n         println!(\"Ok, skipping installation!\");"}, {"sha": "defb1e4d83baee78ad5f3c184206aaa64c5e21f2", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -308,10 +308,10 @@ pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n     let abs_path = builder.src.join(path);\n     let exists = abs_path.is_dir() || abs_path.is_file();\n     if !exists {\n-        if let Some(p) = abs_path.to_str() {\n-            builder.info(&format!(\"Warning: Skipping \\\"{}\\\": not a regular file or directory\", p));\n-        }\n-        return None;\n+        panic!(\n+            \"Invalid test suite filter \\\"{}\\\": file or directory does not exist\",\n+            abs_path.display()\n+        );\n     }\n     // Since test suite paths are themselves directories, if we don't\n     // specify a directory or file, we'll get an empty string here"}, {"sha": "e9a45656ebf8def5f8a39f68eb0391f1b640a8f0", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `main` before Derefer\n++ // MIR for `main` after Derefer\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test.rs:2:11: 2:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n+      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:4:22: 4:28\n++     let mut _6: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:5:13: 5:26\n++     let mut _7: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:6:13: 6:26\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/derefer_test.rs:3:9: 3:14\n+          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n+          scope 2 {\n+              debug b => _2;               // in scope 2 at $DIR/derefer_test.rs:4:9: 4:14\n+              let _4: &mut i32;            // in scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n+              scope 3 {\n+                  debug x => _4;           // in scope 3 at $DIR/derefer_test.rs:5:9: 5:10\n+                  let _5: &mut i32;        // in scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+                  scope 4 {\n+                      debug y => _5;       // in scope 4 at $DIR/derefer_test.rs:6:9: 6:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n+          StorageLive(_3);                 // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n+          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n+          (_2.0: i32) = const 99_i32;      // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n+          (_2.1: &mut (i32, i32)) = move _3; // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n+          StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:4:28: 4:29\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n+-         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         _6 = move (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         StorageDead(_6);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+          StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+-         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         _7 = move (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n+          _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n+          StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:7:1: 7:2\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:7:1: 7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:7:1: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n++     }\n++ \n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_test.rs:2:1: 7:2\n+      }\n+  }\n+  "}, {"sha": "2ebc0d343bd74123c3db5362f3ebeccd723c13e5", "filename": "src/test/mir-opt/derefer_test.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -0,0 +1,7 @@\n+// EMIT_MIR derefer_test.main.Derefer.diff\n+fn main() {\n+    let mut a = (42,43);\n+    let mut b = (99, &mut a);\n+    let x = &mut (*b.1).0;\n+    let y = &mut (*b.1).1;\n+}"}, {"sha": "a18ff0e35fe9a0c2f834596b9817539bf5cab550", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -10,6 +10,7 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _7: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n@@ -19,7 +20,10 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _6 = &mut (*(*_4));              // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _7 = move (*_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "d079ba59ffc3d5ecd9ed677bb018aeb9f0ad12cd", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -7,13 +7,17 @@ fn d(_1: &Box<T>) -> &T {\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _4: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        _2 = &(*(*_3));                  // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _4 = move (*_3);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &(*_4);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2"}, {"sha": "2e03467018693b54934618980b7162ee836d23f4", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -64,5 +64,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n           return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:6:1: 12:2\n+      }\n   }\n   "}, {"sha": "6aa77a9ed6013481c93f9ca643db528c1652599f", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -77,5 +77,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n           return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n       }\n+  \n+      bb7 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:17:1: 25:2\n+      }\n   }\n   "}, {"sha": "b41582477c692a2d67176fba8e45e51ef93ead19", "filename": "src/test/mir-opt/lower_array_len.array_len.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -26,5 +26,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n           return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:30:1: 32:2\n+      }\n   }\n   "}, {"sha": "92ec7a3633e9462b7b85afd35e0d43d3abc20e05", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -26,5 +26,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n           return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:37:1: 39:2\n+      }\n   }\n   "}, {"sha": "2210ad54e8d3d02975cb6108fb94baea1d87e594", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -59,5 +59,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_slice_len.rs:9:5: 9:6\n           return;                          // scope 0 at $DIR/lower_slice_len.rs:10:2: 10:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_slice_len.rs:4:1: 10:2\n+      }\n   }\n   "}, {"sha": "868eeb6367e33badc2a89a89bcdfa9321b49c054", "filename": "src/test/mir-opt/uninhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:11: 22:12\n -         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:5: 22:12\n-+         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb5]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:5: 22:12\n++         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:5: 22:12\n       }\n   \n       bb1: {\n@@ -29,9 +29,13 @@\n   \n       bb4: {\n           return;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:27:2: 27:2\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:21:1: 27:2\n +     }\n + \n-+     bb5: {\n++     bb6: {\n +         unreachable;                     // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:25:14: 25:15\n       }\n   }"}, {"sha": "33c1458dc0c17bdb3cca1226e860e5287956eb7b", "filename": "src/test/mir-opt/uninhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -30,5 +30,9 @@\n       bb4: {\n           return;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:18:2: 18:2\n       }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:12:1: 18:2\n+      }\n   }\n   "}, {"sha": "380844f8861f6286ef28f4185f82dee94c14e6d0", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -64,6 +64,10 @@\n           _0 = const ();                   // scope 0 at $DIR/unreachable.rs:19:6: 19:6\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable.rs:20:1: 20:2\n           return;                          // scope 0 at $DIR/unreachable.rs:20:2: 20:2\n+-     }\n+- \n+-     bb7 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/unreachable.rs:8:1: 20:2\n       }\n   }\n   "}, {"sha": "e26990b1def8946a3c7305f2fd9d7c61c01a7336", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -69,6 +69,10 @@\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           return;                          // scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n+-     }\n+- \n+-     bb7 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/unreachable_diverging.rs:12:1: 20:2\n       }\n   }\n   "}, {"sha": "4e8936905c440a3fbd0b3f6f6163121c19543698", "filename": "src/test/run-make/const_fn_mir/dump.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -23,6 +23,10 @@ fn foo() -> i32 {\n         _0 = move (_1.0: i32);           // scope 0 at main.rs:5:5: 5:10\n         return;                          // scope 0 at main.rs:6:2: 6:2\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at main.rs:4:1: 6:2\n+    }\n }\n \n fn main() -> () {"}, {"sha": "9e6268e63cde0a544e70ec75180455c2e076cd59", "filename": "src/test/ui/type-alias-impl-trait/multiple_definitions.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f36334ca939a67cce3f37f24953ff6f2d3f3d33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple_definitions.rs?ref=8f36334ca939a67cce3f37f24953ff6f2d3f3d33", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+use std::marker::PhantomData;\n+\n+pub struct ConcreteError {}\n+pub trait IoBase {}\n+struct X {}\n+impl IoBase for X {}\n+\n+pub struct ClusterIterator<B, E, S = B> {\n+    pub fat: B,\n+    phantom_s: PhantomData<S>,\n+    phantom_e: PhantomData<E>,\n+}\n+\n+pub struct FileSystem<IO: IoBase> {\n+    pub disk: IO,\n+}\n+\n+impl<IO: IoBase> FileSystem<IO> {\n+    pub fn cluster_iter(&self) -> ClusterIterator<impl IoBase + '_, ConcreteError> {\n+        ClusterIterator {\n+            fat: X {},\n+            phantom_s: PhantomData::default(),\n+            phantom_e: PhantomData::default(),\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}