{"sha": "e31a0941e20851933eb80b14da8d2a11b6f614b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMWEwOTQxZTIwODUxOTMzZWI4MGIxNGRhOGQyYTExYjZmNjE0YjE=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2017-10-12T08:53:20Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2017-10-12T08:53:20Z"}, "message": "Fix output for write macros", "tree": {"sha": "56bebc2b27d3d9e16cefaedad4b6eebafb0ed481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56bebc2b27d3d9e16cefaedad4b6eebafb0ed481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31a0941e20851933eb80b14da8d2a11b6f614b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31a0941e20851933eb80b14da8d2a11b6f614b1", "html_url": "https://github.com/rust-lang/rust/commit/e31a0941e20851933eb80b14da8d2a11b6f614b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31a0941e20851933eb80b14da8d2a11b6f614b1/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4105593eeeeb2ce0a7d6fb338fe71ea10c68f965", "url": "https://api.github.com/repos/rust-lang/rust/commits/4105593eeeeb2ce0a7d6fb338fe71ea10c68f965", "html_url": "https://github.com/rust-lang/rust/commit/4105593eeeeb2ce0a7d6fb338fe71ea10c68f965"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "bf202b20057f86c826c001904f01481d87f9e511", "filename": "clippy_lints/src/suggest_print.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e31a0941e20851933eb80b14da8d2a11b6f614b1/clippy_lints%2Fsrc%2Fsuggest_print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31a0941e20851933eb80b14da8d2a11b6f614b1/clippy_lints%2Fsrc%2Fsuggest_print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuggest_print.rs?ref=e31a0941e20851933eb80b14da8d2a11b6f614b1", "patch": "@@ -56,14 +56,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 None\n             },\n         ], {\n-            let dest_expr = &write_args[0];\n-            let (span, calling_macro) =\n-                if let Some(span) = is_expn_of(dest_expr.span, \"write\") {\n-                    (span, Some(\"write\"))\n-                } else if let Some(span) = is_expn_of(dest_expr.span, \"writeln\") {\n-                    (span, Some(\"writeln\"))\n+            let write_span = unwrap_args[0].span;\n+            let calling_macro =\n+                // ordering is important here, since `writeln!` uses `write!` internally\n+                if is_expn_of(write_span, \"writeln\").is_some() {\n+                    Some(\"writeln\")\n+                } else if is_expn_of(write_span, \"write\").is_some() {\n+                    Some(\"write\")\n                 } else {\n-                    (dest_expr.span, None)\n+                    None\n                 };\n             let prefix = if dest_name == \"stderr\" {\n                 \"e\"\n@@ -74,9 +75,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 span_lint(\n                     cx,\n                     SUGGEST_PRINT,\n-                    span,\n+                    expr.span,\n                     &format!(\n-                        \"use of `{}!({}, ...).unwrap()`. Consider using `{}{}!` instead\",\n+                        \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n                         macro_name,\n                         dest_name,\n                         prefix,\n@@ -87,9 +88,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 span_lint(\n                     cx,\n                     SUGGEST_PRINT,\n-                    span,\n+                    expr.span,\n                     &format!(\n-                        \"use of `{}.write_fmt(...).unwrap()`. Consider using `{}print!` instead\",\n+                        \"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\",\n                         dest_name,\n                         prefix,\n                     )"}, {"sha": "bae9f6f267951817af7c69b1b9d4ed5ae4ec2695", "filename": "tests/ui/suggest_print.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e31a0941e20851933eb80b14da8d2a11b6f614b1/tests%2Fui%2Fsuggest_print.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31a0941e20851933eb80b14da8d2a11b6f614b1/tests%2Fui%2Fsuggest_print.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest_print.stderr?ref=e31a0941e20851933eb80b14da8d2a11b6f614b1", "patch": "@@ -1,38 +1,38 @@\n-error: use of `stdout.write_fmt(...).unwrap()`. Consider using `print!` instead\n-  --> $DIR/suggest_print.rs:16:16\n+error: use of `write!(stdout(), ...).unwrap()`. Consider using `print!` instead\n+  --> $DIR/suggest_print.rs:16:9\n    |\n 16 |         write!(std::io::stdout(), \"test\").unwrap();\n-   |                ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D suggest-print` implied by `-D warnings`\n \n-error: use of `stderr.write_fmt(...).unwrap()`. Consider using `eprint!` instead\n-  --> $DIR/suggest_print.rs:17:16\n+error: use of `write!(stderr(), ...).unwrap()`. Consider using `eprint!` instead\n+  --> $DIR/suggest_print.rs:17:9\n    |\n 17 |         write!(std::io::stderr(), \"test\").unwrap();\n-   |                ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of `stdout.write_fmt(...).unwrap()`. Consider using `print!` instead\n-  --> $DIR/suggest_print.rs:18:18\n+error: use of `writeln!(stdout(), ...).unwrap()`. Consider using `println!` instead\n+  --> $DIR/suggest_print.rs:18:9\n    |\n 18 |         writeln!(std::io::stdout(), \"test\").unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of `stderr.write_fmt(...).unwrap()`. Consider using `eprint!` instead\n-  --> $DIR/suggest_print.rs:19:18\n+error: use of `writeln!(stderr(), ...).unwrap()`. Consider using `eprintln!` instead\n+  --> $DIR/suggest_print.rs:19:9\n    |\n 19 |         writeln!(std::io::stderr(), \"test\").unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of `stdout.write_fmt(...).unwrap()`. Consider using `print!` instead\n+error: use of `stdout().write_fmt(...).unwrap()`. Consider using `print!` instead\n   --> $DIR/suggest_print.rs:20:9\n    |\n 20 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of `stderr.write_fmt(...).unwrap()`. Consider using `eprint!` instead\n+error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` instead\n   --> $DIR/suggest_print.rs:21:9\n    |\n 21 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}]}