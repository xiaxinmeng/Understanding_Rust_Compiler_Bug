{"sha": "29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "node_id": "C_kwDOAAsO6NoAKDI5YWVlNmExMjVhYzY1YTAxOTMyY2IwZWNlNTQ4NWU3Y2Y4Y2ZlODc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-02T23:49:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-12T23:20:11Z"}, "message": "Restore suggestion based off of backwards inference from bad usage to method call", "tree": {"sha": "5f834161b1dc5b47ad05b2b179ea6893f65b7992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f834161b1dc5b47ad05b2b179ea6893f65b7992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "html_url": "https://github.com/rust-lang/rust/commit/29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e72c45ad987b296baee79865b7e2ca00c518fb8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72c45ad987b296baee79865b7e2ca00c518fb8b", "html_url": "https://github.com/rust-lang/rust/commit/e72c45ad987b296baee79865b7e2ca00c518fb8b"}], "stats": {"total": 147, "additions": 88, "deletions": 59}, "files": [{"sha": "f219068b4e87bb5c7a551ae2cd959c0f1a21c89f", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 83, "deletions": 58, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "patch": "@@ -259,49 +259,43 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir.body(hir.maybe_body_owned_by(self.body_id).expect(\"expected item to have body\"));\n         expr_finder.visit_expr(body.value);\n \n-        let fudge_ty = |ty: Ty<'tcx>| {\n-            use rustc_infer::infer::type_variable::*;\n-            use rustc_middle::infer::unify_key::*;\n-            ty.fold_with(&mut BottomUpFolder {\n-                tcx: self.tcx,\n-                ty_op: |ty| {\n-                    if let ty::Infer(infer) = ty.kind() {\n-                        match infer {\n-                            ty::InferTy::TyVar(_) => self.next_ty_var(TypeVariableOrigin {\n-                                kind: TypeVariableOriginKind::MiscVariable,\n-                                span: DUMMY_SP,\n-                            }),\n-                            ty::InferTy::IntVar(_) => self.next_int_var(),\n-                            ty::InferTy::FloatVar(_) => self.next_float_var(),\n-                            _ => bug!(),\n-                        }\n-                    } else {\n-                        ty\n-                    }\n-                },\n-                lt_op: |_| self.tcx.lifetimes.re_erased,\n-                ct_op: |ct| {\n-                    if let ty::ConstKind::Infer(_) = ct.kind() {\n-                        self.next_const_var(\n-                            ct.ty(),\n-                            ConstVariableOrigin {\n-                                kind: ConstVariableOriginKind::MiscVariable,\n-                                span: DUMMY_SP,\n-                            },\n-                        )\n-                    } else {\n-                        ct\n+        use rustc_infer::infer::type_variable::*;\n+        use rustc_middle::infer::unify_key::*;\n+\n+        let mut fudger = BottomUpFolder {\n+            tcx: self.tcx,\n+            ty_op: |ty| {\n+                if let ty::Infer(infer) = ty.kind() {\n+                    match infer {\n+                        ty::InferTy::TyVar(_) => self.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span: DUMMY_SP,\n+                        }),\n+                        ty::InferTy::IntVar(_) => self.next_int_var(),\n+                        ty::InferTy::FloatVar(_) => self.next_float_var(),\n+                        _ => bug!(),\n                     }\n-                },\n-            })\n-        };\n-\n-        let fudge_equals_found_ty = |use_ty: Ty<'tcx>| {\n-            let use_ty = fudge_ty(use_ty);\n-            self.can_eq(self.param_env, expected_ty, use_ty)\n+                } else {\n+                    ty\n+                }\n+            },\n+            lt_op: |_| self.tcx.lifetimes.re_erased,\n+            ct_op: |ct| {\n+                if let ty::ConstKind::Infer(_) = ct.kind() {\n+                    self.next_const_var(\n+                        ct.ty(),\n+                        ConstVariableOrigin {\n+                            kind: ConstVariableOriginKind::MiscVariable,\n+                            span: DUMMY_SP,\n+                        },\n+                    )\n+                } else {\n+                    ct\n+                }\n+            },\n         };\n \n-        if !fudge_equals_found_ty(init_ty) {\n+        if !self.can_eq(self.param_env, expected_ty, init_ty.fold_with(&mut fudger)) {\n             return false;\n         }\n \n@@ -317,7 +311,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // If the type is not constrained in a way making it not possible to\n             // equate with `expected_ty` by this point, skip.\n-            if fudge_equals_found_ty(next_use_ty) {\n+            if self.can_eq(self.param_env, expected_ty, next_use_ty.fold_with(&mut fudger)) {\n                 continue;\n             }\n \n@@ -326,26 +320,57 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 && rcvr.hir_id == binding.hir_id\n             {\n                 let Some(rcvr_ty) = self.node_ty_opt(rcvr.hir_id) else { continue; };\n-                let rcvr_ty = fudge_ty(rcvr_ty);\n-                if let Ok(method) =\n+                let rcvr_ty = rcvr_ty.fold_with(&mut fudger);\n+                let Ok(method) =\n                     self.lookup_method(rcvr_ty, segment, DUMMY_SP, parent_expr, rcvr, args)\n+                else {\n+                    continue;\n+                };\n+\n+                // NOTE: For future removers of `fudge_inference_if_ok`, you\n+                // can replace  this with another call to `lookup_method` but\n+                // using `expected_ty` as the rcvr.\n+                let ideal_method_sig: Result<_, TypeError<'tcx>> = self.fudge_inference_if_ok(|| {\n+                    let _ = self.at(&ObligationCause::dummy(), self.param_env).eq(rcvr_ty, expected_ty)?;\n+                    Ok(method.sig)\n+                });\n+\n+                for (idx, (expected_arg_ty, arg_expr)) in\n+                    std::iter::zip(&method.sig.inputs()[1..], args).enumerate()\n                 {\n-                    for (expected_arg_ty, arg_expr) in std::iter::zip(&method.sig.inputs()[1..], args) {\n-                        let Some(arg_ty) = self.node_ty_opt(arg_expr.hir_id) else { continue; };\n-                        let arg_ty = fudge_ty(arg_ty);\n-                        let _ = self.try_coerce(arg_expr, arg_ty, *expected_arg_ty, AllowTwoPhase::No, None);\n-                        if !self.can_eq(self.param_env, rcvr_ty, expected_ty) {\n-                            err.span_label(\n-                                arg_expr.span,\n-                                format!(\"this argument has type `{arg_ty}`...\")\n-                            );\n-                            err.span_label(\n-                                binding.span,\n-                                format!(\"... which constrains `{ident}` to have type `{next_use_ty}`\")\n-                            );\n-                            return true;\n-                        }\n+                    let Some(arg_ty) = self.node_ty_opt(arg_expr.hir_id) else { continue; };\n+                    let arg_ty = arg_ty.fold_with(&mut fudger);\n+                    let _ = self.try_coerce(\n+                        arg_expr,\n+                        arg_ty,\n+                        *expected_arg_ty,\n+                        AllowTwoPhase::No,\n+                        None,\n+                    );\n+                    if self.can_eq(self.param_env, rcvr_ty, expected_ty) {\n+                        continue;\n+                    }\n+                    err.span_label(\n+                        arg_expr.span,\n+                        format!(\"this argument has type `{arg_ty}`...\"),\n+                    );\n+                    err.span_label(\n+                        binding.span,\n+                        format!(\n+                            \"... which constrains `{ident}` to have type `{next_use_ty}`\"\n+                        ),\n+                    );\n+                    if let Ok(ideal_method_sig) = ideal_method_sig {\n+                        self.emit_type_mismatch_suggestions(\n+                            err,\n+                            arg_expr,\n+                            arg_ty,\n+                            ideal_method_sig.inputs()[idx + 1],\n+                            None,\n+                            None,\n+                        );\n                     }\n+                    return true;\n                 }\n             }\n "}, {"sha": "f41fbe59fba6c26b67786c9791f1bebc0d930273", "filename": "tests/ui/type/type-check/point-at-inference.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference.fixed?ref=29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let mut foo = vec![];\n     baz(&foo);\n     for i in &v {\n-        foo.push(i);\n+        foo.push(*i);\n     }\n     baz(&foo);\n     bar(foo); //~ ERROR E0308"}, {"sha": "5fc94d4d1b6baacfc0d8958815041bde4fbf7f89", "filename": "tests/ui/type/type-check/point-at-inference.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29aee6a125ac65a01932cb0ece5485e7cf8cfe87/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference.stderr?ref=29aee6a125ac65a01932cb0ece5485e7cf8cfe87", "patch": "@@ -18,6 +18,10 @@ note: function defined here\n    |\n LL | fn bar(_: Vec<i32>) {}\n    |    ^^^ -----------\n+help: consider dereferencing the borrow\n+   |\n+LL |         foo.push(*i);\n+   |                  +\n \n error: aborting due to previous error\n "}]}