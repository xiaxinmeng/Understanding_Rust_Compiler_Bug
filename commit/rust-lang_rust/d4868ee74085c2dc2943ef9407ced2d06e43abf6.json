{"sha": "d4868ee74085c2dc2943ef9407ced2d06e43abf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ODY4ZWU3NDA4NWMyZGMyOTQzZWY5NDA3Y2VkMmQwNmU0M2FiZjY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-24T12:26:14Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-24T22:20:00Z"}, "message": "Use #[cfg(not(stage0))] to exclude items from stage0\n\nAs requested on the mailing list: https://mail.mozilla.org/pipermail/rust-dev/2013-April/003713.html", "tree": {"sha": "dfebe34e96baecb1a8c2e1e2fa2f95fcfbe70db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfebe34e96baecb1a8c2e1e2fa2f95fcfbe70db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4868ee74085c2dc2943ef9407ced2d06e43abf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4868ee74085c2dc2943ef9407ced2d06e43abf6", "html_url": "https://github.com/rust-lang/rust/commit/d4868ee74085c2dc2943ef9407ced2d06e43abf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4868ee74085c2dc2943ef9407ced2d06e43abf6/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "html_url": "https://github.com/rust-lang/rust/commit/03932f0b84e94f0ef96e4a6de6cb16ab436311e4"}], "stats": {"total": 82, "additions": 19, "deletions": 63}, "files": [{"sha": "7890d611e853dabcb7aa059e5cde589d188a500f", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -77,9 +77,7 @@ pub use kinds::{Const, Copy, Owned, Durable};\n pub use ops::{Drop};\n #[cfg(stage0)]\n pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, Not};\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n pub use ops::{Add, Sub, Mul, Quot, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Shl, Shr, Index};"}, {"sha": "9e4140adcd131fffa26ccd23600f3ba37819ee43", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -278,10 +278,7 @@ impl Div<f32,f32> for f32 {\n     #[inline(always)]\n     fn div(&self, other: &f32) -> f32 { *self / *other }\n }\n-\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Quot<f32,f32> for f32 {\n     #[inline(always)]\n     fn quot(&self, other: &f32) -> f32 { *self / *other }\n@@ -292,10 +289,7 @@ impl Modulo<f32,f32> for f32 {\n     #[inline(always)]\n     fn modulo(&self, other: &f32) -> f32 { *self % *other }\n }\n-\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Rem<f32,f32> for f32 {\n     #[inline(always)]\n     fn rem(&self, other: &f32) -> f32 { *self % *other }"}, {"sha": "12f86337e8500520e684d886b2fc83e3b04c792f", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -292,9 +292,7 @@ impl Mul<f64,f64> for f64 {\n impl Div<f64,f64> for f64 {\n     fn div(&self, other: &f64) -> f64 { *self / *other }\n }\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Quot<f64,f64> for f64 {\n     #[inline(always)]\n     fn quot(&self, other: &f64) -> f64 { *self / *other }\n@@ -303,9 +301,7 @@ impl Quot<f64,f64> for f64 {\n impl Modulo<f64,f64> for f64 {\n     fn modulo(&self, other: &f64) -> f64 { *self % *other }\n }\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Rem<f64,f64> for f64 {\n     #[inline(always)]\n     fn rem(&self, other: &f64) -> f64 { *self % *other }"}, {"sha": "88321e6b8bf0f20b432424852f560a727fb5d4b8", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -459,9 +459,7 @@ impl Div<float,float> for float {\n     #[inline(always)]\n     fn div(&self, other: &float) -> float { *self / *other }\n }\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Quot<float,float> for float {\n     #[inline(always)]\n     fn quot(&self, other: &float) -> float { *self / *other }\n@@ -471,9 +469,7 @@ impl Modulo<float,float> for float {\n     #[inline(always)]\n     fn modulo(&self, other: &float) -> float { *self % *other }\n }\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Rem<float,float> for float {\n     #[inline(always)]\n     fn rem(&self, other: &float) -> float { *self % *other }"}, {"sha": "cb29b9e44863394199b61177eaa4377260504ceb", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -185,10 +185,7 @@ impl Div<T,T> for T {\n     #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n-\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Quot<T,T> for T {\n     /**\n      * Returns the integer quotient, truncated towards 0. As this behaviour reflects\n@@ -217,10 +214,7 @@ impl Modulo<T,T> for T {\n     #[inline(always)]\n     fn modulo(&self, other: &T) -> T { *self % *other }\n }\n-\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Rem<T,T> for T {\n     /**\n      * Returns the integer remainder after division, satisfying:"}, {"sha": "8304179c346ae229254773e8b26cd7536da5403e", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -16,9 +16,7 @@ use ops::{Add, Sub, Mul, Neg};\n use Quot = ops::Div;\n #[cfg(stage0)]\n use Rem = ops::Modulo;\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n use option::Option;\n use kinds::Copy;"}, {"sha": "2ee64d4e4eaa625c820f3b3797f4685cd5e5fde9", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -151,10 +151,7 @@ impl Div<T,T> for T {\n     #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n-\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Quot<T,T> for T {\n     #[inline(always)]\n     fn quot(&self, other: &T) -> T { *self / *other }\n@@ -165,10 +162,7 @@ impl Modulo<T,T> for T {\n     #[inline(always)]\n     fn modulo(&self, other: &T) -> T { *self % *other }\n }\n-\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n+#[cfg(not(stage0),notest)]\n impl Rem<T,T> for T {\n     #[inline(always)]\n     fn rem(&self, other: &T) -> T { *self % *other }"}, {"sha": "1aa7aada05c886b481e694b5044a5a06bc036966", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -36,9 +36,7 @@ pub trait Div<RHS,Result> {\n     fn div(&self, rhs: &RHS) -> Result;\n }\n #[lang=\"quot\"]\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n pub trait Quot<RHS,Result> {\n     fn quot(&self, rhs: &RHS) -> Result;\n }\n@@ -49,9 +47,7 @@ pub trait Modulo<RHS,Result> {\n     fn modulo(&self, rhs: &RHS) -> Result;\n }\n #[lang=\"rem\"]\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n pub trait Rem<RHS,Result> {\n     fn rem(&self, rhs: &RHS) -> Result;\n }"}, {"sha": "0af0cdf08c91b807685c1b013ee244713b6154ad", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -16,9 +16,7 @@ pub use either::{Either, Left, Right};\n pub use kinds::{Const, Copy, Owned, Durable};\n #[cfg(stage0)]\n pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, Not};\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n pub use ops::{Add, Sub, Mul, Quot, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}, {"sha": "07c679409cf68570c2402024f51174e2657863fd", "filename": "src/libstd/std.rc", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d4868ee74085c2dc2943ef9407ced2d06e43abf6/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=d4868ee74085c2dc2943ef9407ced2d06e43abf6", "patch": "@@ -76,9 +76,7 @@ pub mod rope;\n pub mod smallintmap;\n pub mod sort;\n pub mod dlist;\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n pub mod treemap;\n \n // And ... other stuff\n@@ -98,19 +96,13 @@ pub mod cmp;\n pub mod base64;\n pub mod rl;\n pub mod workcache;\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n #[path=\"num/bigint.rs\"]\n pub mod bigint;\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n #[path=\"num/rational.rs\"]\n pub mod rational;\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n+#[cfg(not(stage0))]\n #[path=\"num/complex.rs\"]\n pub mod complex;\n pub mod stats;"}]}