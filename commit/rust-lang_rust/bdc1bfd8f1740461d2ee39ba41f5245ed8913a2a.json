{"sha": "bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYzFiZmQ4ZjE3NDA0NjFkMmVlMzliYTQxZjUyNDVlZDg5MTNhMmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T14:36:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T19:07:58Z"}, "message": "Rename common::normalize to common::erase_regions", "tree": {"sha": "6f526ab32a41d2a5326abf558fdf539cef077b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f526ab32a41d2a5326abf558fdf539cef077b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "html_url": "https://github.com/rust-lang/rust/commit/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8cb678e61e91c160d80794b5fdd723d0d4211c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8cb678e61e91c160d80794b5fdd723d0d4211c", "html_url": "https://github.com/rust-lang/rust/commit/2a8cb678e61e91c160d80794b5fdd723d0d4211c"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "e18e62948fb6657c9419a5d2e6e23d9dd3d4f89a", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "patch": "@@ -853,7 +853,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>\n ///////////////////////////////////////////////////////////////////////////\n // Region eraser\n //\n-// Replaces all free regions with 'static. Useful in trans.\n+// Replaces all free regions with 'static. Useful in contexts, such as\n+// method probing, where precise region relationships are not\n+// important. Note that in trans you should use\n+// `common::erase_regions` instead.\n \n pub struct RegionEraser<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,"}, {"sha": "4cfd831a3251bb49e5c5769541e8cd2d7aa85efc", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "patch": "@@ -265,7 +265,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let _icx = push_ctxt(\"trans_fn_pointer_shim\");\n     let tcx = ccx.tcx();\n \n-    let bare_fn_ty = normalize_ty(tcx, bare_fn_ty);\n+    let bare_fn_ty = erase_regions(tcx, &bare_fn_ty);\n     match ccx.fn_pointer_shims().borrow().get(&bare_fn_ty) {\n         Some(&llval) => { return llval; }\n         None => { }"}, {"sha": "06a1182b1f432209cace1bc3199ce0e32534e64b", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "patch": "@@ -466,7 +466,7 @@ pub fn get_or_create_declaration_if_unboxed_closure<'a, 'tcx>(ccx: &CrateContext\n \n     // Normalize type so differences in regions and typedefs don't cause\n     // duplicate declarations\n-    let function_type = normalize_ty(ccx.tcx(), function_type);\n+    let function_type = erase_regions(ccx.tcx(), &function_type);\n     let params = match function_type.sty {\n         ty::ty_unboxed_closure(_, _, ref substs) => substs.types.clone(),\n         _ => unreachable!()"}, {"sha": "bdec9ad378b2b170cca0c5c66d9e0bb69bd556e9", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "patch": "@@ -58,16 +58,21 @@ use util::nodemap::FnvHashSet;\n \n pub use trans::context::CrateContext;\n \n-/// Returns an equivalent type with all the typedefs and self regions removed.\n-pub fn normalize_ty<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n-    let u = TypeNormalizer(cx).fold_ty(ty);\n-    debug!(\"normalize_ty({}) = {}\",\n-           ty.repr(cx), u.repr(cx));\n-    return u;\n+/// Returns an equivalent value with all free regions removed (note\n+/// that late-bound regions remain, because they are important for\n+/// subtyping, but they are anonymized and normalized as well). This\n+/// is a stronger, caching version of `ty_fold::erase_regions`.\n+pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n+    where T : TypeFoldable<'tcx> + Repr<'tcx>\n+{\n+    let value1 = value.fold_with(&mut RegionEraser(cx));\n+    debug!(\"erase_regions({}) = {}\",\n+           value.repr(cx), value1.repr(cx));\n+    return value1;\n \n-    struct TypeNormalizer<'a, 'tcx: 'a>(&'a ty::ctxt<'tcx>);\n+    struct RegionEraser<'a, 'tcx: 'a>(&'a ty::ctxt<'tcx>);\n \n-    impl<'a, 'tcx> TypeFolder<'tcx> for TypeNormalizer<'a, 'tcx> {\n+    impl<'a, 'tcx> TypeFolder<'tcx> for RegionEraser<'a, 'tcx> {\n         fn tcx(&self) -> &ty::ctxt<'tcx> { self.0 }\n \n         fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -84,7 +89,6 @@ pub fn normalize_ty<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n             where T : TypeFoldable<'tcx> + Repr<'tcx>\n         {\n-            // FIXME(#20526) this should replace `enter_region_binder`/`exit_region_binder`.\n             let u = ty::anonymize_late_bound_regions(self.tcx(), t);\n             ty_fold::super_fold_binder(self, &u)\n         }"}, {"sha": "ef5394f06b3b82d11e98b3643a65e7a17d251386", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=bdc1bfd8f1740461d2ee39ba41f5245ed8913a2a", "patch": "@@ -285,7 +285,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n     // Rust types are defined as the same LLVM types.  If we don't do\n     // this then, e.g. `Option<{myfield: bool}>` would be a different\n     // type than `Option<myrec>`.\n-    let t_norm = normalize_ty(cx.tcx(), t);\n+    let t_norm = erase_regions(cx.tcx(), &t);\n \n     if t != t_norm {\n         let llty = type_of(cx, t_norm);"}]}