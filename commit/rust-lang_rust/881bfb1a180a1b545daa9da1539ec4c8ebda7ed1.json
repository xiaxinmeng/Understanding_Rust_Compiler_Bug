{"sha": "881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MWJmYjFhMTgwYTFiNTQ1ZGFhOWRhMTUzOWVjNGM4ZWJkYTdlZDE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-06T03:53:42Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-06T04:00:31Z"}, "message": "Renamed `record_stack_bounds` for clarity.\nFor a good measure, implemented target_record_stack_bounds for 32-bit Windows as well.", "tree": {"sha": "82e8aacef11730b484fb8c3b3172b8f27074aebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e8aacef11730b484fb8c3b3172b8f27074aebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "html_url": "https://github.com/rust-lang/rust/commit/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2003ffd8dd976342f9e8fc1429ae93d6780e81", "html_url": "https://github.com/rust-lang/rust/commit/cd2003ffd8dd976342f9e8fc1429ae93d6780e81"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "b63758cdcc5e7c8b2c86959a23e62f9d5db2354c", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "patch": "@@ -105,11 +105,11 @@ impl Context {\n             // invalid for the current task. Lucky for us `rust_swap_registers`\n             // is a C function so we don't have to worry about that!\n             match in_context.stack_bounds {\n-                Some((lo, hi)) => stack::record_stack_bounds_green(lo, hi),\n+                Some((lo, hi)) => stack::record_rust_managed_stack_bounds(lo, hi),\n                 // If we're going back to one of the original contexts or\n                 // something that's possibly not a \"normal task\", then reset\n                 // the stack limit to 0 to make morestack never fail\n-                None => stack::record_stack_bounds_green(0, uint::MAX),\n+                None => stack::record_rust_managed_stack_bounds(0, uint::MAX),\n             }\n             rust_swap_registers(out_regs, in_regs)\n         }"}, {"sha": "c7b89b6cb915375d9825842560e773e7e7c2bd59", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "patch": "@@ -137,7 +137,7 @@ pub fn start(argc: int, argv: *const *const u8, main: proc()) -> int {\n     task.name = Some(str::Slice(\"<main>\"));\n     drop(task.run(|| {\n         unsafe {\n-            rt::stack::record_stack_bounds(my_stack_bottom, my_stack_top);\n+            rt::stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n         }\n         exit_code = Some(run(main.take_unwrap()));\n     }).destroy());"}, {"sha": "55806caaf1352781ef43c2e989f0d99a77b9ee61", "filename": "src/libnative/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "patch": "@@ -84,7 +84,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc():Send) {\n         let addr = &something_around_the_top_of_the_stack as *const int;\n         let my_stack = addr as uint;\n         unsafe {\n-            stack::record_stack_bounds(my_stack - stack + 1024, my_stack);\n+            stack::record_os_managed_stack_bounds(my_stack - stack + 1024, my_stack);\n         }\n         let mut ops = ops;\n         ops.stack_bounds = (my_stack - stack + 1024, my_stack);"}, {"sha": "c941107d7e81ae66cf23689078d9b5f37ba6bc81", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "patch": "@@ -124,8 +124,23 @@ extern fn stack_exhausted() {\n     }\n }\n \n+// Windows maintains a record of upper and lower stack bounds in the Thread Information\n+// Block (TIB), and some syscalls do check that addresses which are supposed to be in\n+// the stack, indeed lie between these two values.\n+// (See https://github.com/rust-lang/rust/issues/3445#issuecomment-26114839)\n+//\n+// When using Rust-managed stacks (libgreen), we must maintain these values accordingly.\n+// For OS-managed stacks (libnative), we let the OS manage them for us.\n+//\n+// On all other platforms both variants behave identically.\n+\n+#[inline(always)]\n+pub unsafe fn record_os_managed_stack_bounds(stack_lo: uint, _stack_hi: uint) {\n+    record_sp_limit(stack_lo + RED_ZONE);\n+}\n+\n #[inline(always)]\n-pub unsafe fn record_stack_bounds_green(stack_lo: uint, stack_hi: uint) {\n+pub unsafe fn record_rust_managed_stack_bounds(stack_lo: uint, stack_hi: uint) {\n     // When the old runtime had segmented stacks, it used a calculation that was\n     // \"limit + RED_ZONE + FUDGE\". The red zone was for things like dynamic\n     // symbol resolution, llvm function calls, etc. In theory this red zone\n@@ -138,27 +153,23 @@ pub unsafe fn record_stack_bounds_green(stack_lo: uint, stack_hi: uint) {\n \n     return target_record_stack_bounds(stack_lo, stack_hi);\n \n-    #[cfg(not(windows))] #[cfg(not(target_arch = \"x86_64\"))] #[inline(always)]\n+    #[cfg(not(windows))] #[inline(always)]\n     unsafe fn target_record_stack_bounds(_stack_lo: uint, _stack_hi: uint) {}\n+\n+    #[cfg(windows, target_arch = \"x86\")] #[inline(always)]\n+    unsafe fn target_record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n+        // stack range is at TIB: %fs:0x04 (top) and %fs:0x08 (bottom)\n+        asm!(\"mov $0, %fs:0x04\" :: \"r\"(stack_hi) :: \"volatile\");\n+        asm!(\"mov $0, %fs:0x08\" :: \"r\"(stack_lo) :: \"volatile\");\n+    }\n     #[cfg(windows, target_arch = \"x86_64\")] #[inline(always)]\n     unsafe fn target_record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n-        // Windows compiles C functions which may check the stack bounds. This\n-        // means that if we want to perform valid FFI on windows, then we need\n-        // to ensure that the stack bounds are what they truly are for this\n-        // task. More info can be found at:\n-        //   https://github.com/rust-lang/rust/issues/3445#issuecomment-26114839\n-        //\n         // stack range is at TIB: %gs:0x08 (top) and %gs:0x10 (bottom)\n         asm!(\"mov $0, %gs:0x08\" :: \"r\"(stack_hi) :: \"volatile\");\n         asm!(\"mov $0, %gs:0x10\" :: \"r\"(stack_lo) :: \"volatile\");\n     }\n }\n \n-#[inline(always)]\n-pub unsafe fn record_stack_bounds(stack_lo: uint, _stack_hi: uint) {\n-    record_sp_limit(stack_lo + RED_ZONE);\n-}\n-\n /// Records the current limit of the stack as specified by `end`.\n ///\n /// This is stored in an OS-dependent location, likely inside of the thread"}, {"sha": "43364466dbe3937913a839b6f5c38ee6c5040f97", "filename": "src/librustrt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibrustrt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bfb1a180a1b545daa9da1539ec4c8ebda7ed1/src%2Flibrustrt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread.rs?ref=881bfb1a180a1b545daa9da1539ec4c8ebda7ed1", "patch": "@@ -44,7 +44,7 @@ static DEFAULT_STACK_SIZE: uint = 1024 * 1024;\n #[no_split_stack]\n extern fn thread_start(main: *mut libc::c_void) -> imp::rust_thread_return {\n     unsafe {\n-        stack::record_stack_bounds(0, uint::MAX);\n+        stack::record_os_managed_stack_bounds(0, uint::MAX);\n         let f: Box<proc()> = mem::transmute(main);\n         (*f)();\n         mem::transmute(0 as imp::rust_thread_return)"}]}