{"sha": "da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhN2Y4YzU0MGI0N2M1YmIwNjMzNTZiZjVhZDA1YTZhNDllZDBmZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-17T07:31:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-17T07:31:25Z"}, "message": "Auto merge of #37153 - michaelwoerister:spread-arg-debuginfo, r=eddyb\n\ndebuginfo: Handle spread_arg case in MIR-trans in a more stable way.\n\nUse `VariableAccess::DirectVariable` instead of `VariableAccess::IndirectVariable` in order not to make LLVM's SROA angry. This is a step towards fixing #36774 and #35547. At least, I can build Cargo with optimizations + debuginfo again.\n\nr? @eddyb", "tree": {"sha": "9dffa3954e05472bff51f3f4c4fb357fcb1f9dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dffa3954e05472bff51f3f4c4fb357fcb1f9dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1", "html_url": "https://github.com/rust-lang/rust/commit/da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c133d3ba84b2399b0bfa2ceac89cf2dd003830", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c133d3ba84b2399b0bfa2ceac89cf2dd003830", "html_url": "https://github.com/rust-lang/rust/commit/54c133d3ba84b2399b0bfa2ceac89cf2dd003830"}, {"sha": "8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "html_url": "https://github.com/rust-lang/rust/commit/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "b0c7d26c47e03e1ab6cc9a539d698a91282733a2", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1", "patch": "@@ -371,7 +371,6 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                 _ => bug!(\"spread argument isn't a tuple?!\")\n             };\n \n-            let lltuplety = type_of::type_of(bcx.ccx(), arg_ty);\n             let lltemp = bcx.with_block(|bcx| {\n                 base::alloc_ty(bcx, arg_ty, &format!(\"arg{}\", arg_index))\n             });\n@@ -391,27 +390,20 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                 } else {\n                     arg.store_fn_arg(bcx, &mut llarg_idx, dst);\n                 }\n-\n-                bcx.with_block(|bcx| arg_scope.map(|scope| {\n-                    let byte_offset_of_var_in_tuple =\n-                        machine::llelement_offset(bcx.ccx(), lltuplety, i);\n-\n-                    let ops = unsafe {\n-                        [llvm::LLVMRustDIBuilderCreateOpDeref(),\n-                         llvm::LLVMRustDIBuilderCreateOpPlus(),\n-                         byte_offset_of_var_in_tuple as i64]\n-                    };\n-\n-                    let variable_access = VariableAccess::IndirectVariable {\n-                        alloca: lltemp,\n-                        address_operations: &ops\n-                    };\n-                    declare_local(bcx, keywords::Invalid.name(),\n-                                  tupled_arg_ty, scope, variable_access,\n-                                  VariableKind::ArgumentVariable(arg_index + i + 1),\n-                                  bcx.fcx().span.unwrap_or(DUMMY_SP));\n-                }));\n             }\n+\n+            // Now that we have one alloca that contains the aggregate value,\n+            // we can create one debuginfo entry for the argument.\n+            bcx.with_block(|bcx| arg_scope.map(|scope| {\n+                let variable_access = VariableAccess::DirectVariable {\n+                    alloca: lltemp\n+                };\n+                declare_local(bcx, arg_decl.name.unwrap_or(keywords::Invalid.name()),\n+                              arg_ty, scope, variable_access,\n+                              VariableKind::ArgumentVariable(arg_index + 1),\n+                              bcx.fcx().span.unwrap_or(DUMMY_SP));\n+            }));\n+\n             return LocalRef::Lvalue(LvalueRef::new_sized(lltemp, LvalueTy::from_ty(arg_ty)));\n         }\n "}]}