{"sha": "f810e600cd7b128ec167937bbd87cfabc52b403e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTBlNjAwY2Q3YjEyOGVjMTY3OTM3YmJkODdjZmFiYzUyYjQwM2U=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-17T11:30:48Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T11:54:01Z"}, "message": "Reduce the number of drop-flag assignments in unwind paths", "tree": {"sha": "3db2a8e3c5932ec58ed8038d4c96eeb23ec6313b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3db2a8e3c5932ec58ed8038d4c96eeb23ec6313b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f810e600cd7b128ec167937bbd87cfabc52b403e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl95t9kACgkQtAh+UQ6Y\nsWQwow//a6JwVi976D4SzFIBTe8gVInuDhug5ij6fuHX3k0o6ZYVWyK/7zbzFBMd\n/7D5m7wXJ6jzB5UV/kmls+IRWJ+HBB77+T1ToeFNmGgxso7tuMA2lV14CAOQSFQr\n2dSvwwQ5amiPk3weVnsTBfBCrXPSXC5lXa69+E+6zy/UmEXGD+DI0vOoQ3atpUTV\ncT9Bx7fiv5siL3FKWLkIi+1tz8jZxpzk8jh+ukH1CqqGD4puVFOAK/XN+i+lDGSM\nwKe2I9kvo032NswOjXd8nMlLU15TS8uxDQDGI8Cg1DWfiog7EbBsYgU/rtw5Si5L\nbF1ICAv1IFBMptmab4ZkF51zfXs5QgldGFPwbKiigPAZBIOQjTZGu6dQseUAau0+\ngyPoWle+013cCYu3FAuEY6ZfokQJCGppNklrjYC5hkKNAQXvJ0fo2jMuSso/U6/3\nkU0o8MjJBArDATLtoC4DtX/FONkVGeNIMaknRGwVmCys3ymKc1aFfdhbCdnNwK5p\n96Gm5gKstYx/veENrZRBPX9JjvEo8HE5HMlrwI6JiS4LzcucznqnqL2NMXLjOKU4\nDEySGwmUDfF3VMweuoPP7VP7JxDdQvqn+AVr294DDbKwlInSAUqsFvnf87rjRitW\nGicJBMqZ3Y25K5FGMT7hiF28kWryWTv4jzogUuD0t5VhyCwAk6Q=\n=hcQN\n-----END PGP SIGNATURE-----", "payload": "tree 3db2a8e3c5932ec58ed8038d4c96eeb23ec6313b\nparent fa3e2fcbe4bb6c878d137eb427fc34daf49b8c69\nauthor Matthew Jasper <mjjasper1@gmail.com> 1573990248 +0000\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601812441 -0400\n\nReduce the number of drop-flag assignments in unwind paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f810e600cd7b128ec167937bbd87cfabc52b403e", "html_url": "https://github.com/rust-lang/rust/commit/f810e600cd7b128ec167937bbd87cfabc52b403e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f810e600cd7b128ec167937bbd87cfabc52b403e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3e2fcbe4bb6c878d137eb427fc34daf49b8c69", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3e2fcbe4bb6c878d137eb427fc34daf49b8c69", "html_url": "https://github.com/rust-lang/rust/commit/fa3e2fcbe4bb6c878d137eb427fc34daf49b8c69"}], "stats": {"total": 51, "additions": 12, "deletions": 39}, "files": [{"sha": "1f232554bf121484cae7d7e0167e71c84f78d2e4", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f810e600cd7b128ec167937bbd87cfabc52b403e/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f810e600cd7b128ec167937bbd87cfabc52b403e/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=f810e600cd7b128ec167937bbd87cfabc52b403e", "patch": "@@ -362,17 +362,14 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n             TerminatorKind::Goto { target: _ }\n+            | TerminatorKind::Return\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Unreachable => {}\n \n-            TerminatorKind::Return => {\n-                self.gather_move(Place::return_place());\n-            }\n-\n             TerminatorKind::Assert { ref cond, .. } => {\n                 self.gather_operand(cond);\n             }"}, {"sha": "43fa15d7e49123cfcd25984d5eb17462317dd0ce", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f810e600cd7b128ec167937bbd87cfabc52b403e/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f810e600cd7b128ec167937bbd87cfabc52b403e/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=f810e600cd7b128ec167937bbd87cfabc52b403e", "patch": "@@ -231,8 +231,6 @@ where\n                     .patch_terminator(bb, TerminatorKind::Goto { target: self.succ });\n             }\n             DropStyle::Static => {\n-                let loc = self.terminator_loc(bb);\n-                self.elaborator.clear_drop_flag(loc, self.path, DropFlagMode::Deep);\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n@@ -243,9 +241,7 @@ where\n                 );\n             }\n             DropStyle::Conditional => {\n-                let unwind = self.unwind; // FIXME(#43234)\n-                let succ = self.succ;\n-                let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n+                let drop_bb = self.complete_drop(self.succ, self.unwind);\n                 self.elaborator\n                     .patch()\n                     .patch_terminator(bb, TerminatorKind::Goto { target: drop_bb });\n@@ -317,7 +313,7 @@ where\n                 // our own drop flag.\n                 path: self.path,\n             }\n-            .complete_drop(None, succ, unwind)\n+            .complete_drop(succ, unwind)\n         }\n     }\n \n@@ -346,13 +342,7 @@ where\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n-        (\n-            self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n-            unwind.map(|unwind| {\n-                self.drop_flag_reset_block(DropFlagMode::Shallow, unwind, Unwind::InCleanup)\n-            }),\n-        )\n+        (self.drop_flag_reset_block(DropFlagMode::Shallow, self.succ, self.unwind), self.unwind)\n     }\n \n     /// Creates a full drop ladder, consisting of 2 connected half-drop-ladders\n@@ -884,11 +874,7 @@ where\n                     self.open_drop_for_adt(def, substs)\n                 }\n             }\n-            ty::Dynamic(..) => {\n-                let unwind = self.unwind; // FIXME(#43234)\n-                let succ = self.succ;\n-                self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n-            }\n+            ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n             ty::Array(ety, size) => {\n                 let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(ety, size)\n@@ -899,20 +885,10 @@ where\n         }\n     }\n \n-    fn complete_drop(\n-        &mut self,\n-        drop_mode: Option<DropFlagMode>,\n-        succ: BasicBlock,\n-        unwind: Unwind,\n-    ) -> BasicBlock {\n-        debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n+    fn complete_drop(&mut self, succ: BasicBlock, unwind: Unwind) -> BasicBlock {\n+        debug!(\"complete_drop(succ={:?}, unwind={:?})\", succ, unwind);\n \n         let drop_block = self.drop_block(succ, unwind);\n-        let drop_block = if let Some(mode) = drop_mode {\n-            self.drop_flag_reset_block(mode, drop_block, unwind)\n-        } else {\n-            drop_block\n-        };\n \n         self.drop_flag_test_block(drop_block, succ, unwind)\n     }\n@@ -927,6 +903,11 @@ where\n     ) -> BasicBlock {\n         debug!(\"drop_flag_reset_block({:?},{:?})\", self, mode);\n \n+        if unwind.is_cleanup() {\n+            // The drop flag isn't read again on the unwind path, so don't\n+            // bother setting it.\n+            return succ;\n+        }\n         let block = self.new_block(unwind, TerminatorKind::Goto { target: succ });\n         let block_start = Location { block, statement_index: 0 };\n         self.elaborator.clear_drop_flag(block_start, self.path, mode);\n@@ -1044,11 +1025,6 @@ where\n         self.elaborator.patch().new_temp(ty, self.source_info.span)\n     }\n \n-    fn terminator_loc(&mut self, bb: BasicBlock) -> Location {\n-        let body = self.elaborator.body();\n-        self.elaborator.patch().terminator_loc(body, bb)\n-    }\n-\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,"}]}