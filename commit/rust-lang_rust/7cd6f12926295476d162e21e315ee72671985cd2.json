{"sha": "7cd6f12926295476d162e21e315ee72671985cd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZDZmMTI5MjYyOTU0NzZkMTYyZTIxZTMxNWVlNzI2NzE5ODVjZDI=", "commit": {"author": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-03T12:59:46Z"}, "committer": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-03T12:59:46Z"}, "message": "Split `crate_def_map` into two methods\n\nThis change:\n\n  - introduces `compute_crate_def_map` query and renames\n    `CrateDefMap::crate_def_map_query` for consistency,\n\n  - annotates `crate_def_map` as `salsa::transparent` and adds a\n    top-level `crate_def_map` wrapper function around that starts the\n    profiler and immediately calls into `compute_crate_def_map` query.\n\nThis allows us to better understand where we spent the time, in\nparticular, how much is spent in the recomputaiton and how much in\nsalsa.\n\nExample output (where we don't actually re-compute anything, but the\nquery still takes a non-trivial amount of time):\n\n```\n  211ms - handle_inlay_hints\n      150ms - get_inlay_hints\n          150ms - SourceAnalyzer::new\n               65ms - def_with_body_from_child_node\n                   65ms - analyze_container\n                       65ms - analyze_container\n                           65ms - Module::from_definition\n                               65ms - Module::from_file\n                                   65ms - crate_def_map\n                                        1ms - parse_macro_query (6 calls)\n                                        0ms - raw_items_query (1 calls)\n                                       64ms - ???\n```\n\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>", "tree": {"sha": "56f4a050e3c9b57d829a7ff9998a939bee4cd480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f4a050e3c9b57d829a7ff9998a939bee4cd480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd6f12926295476d162e21e315ee72671985cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6f12926295476d162e21e315ee72671985cd2", "html_url": "https://github.com/rust-lang/rust/commit/7cd6f12926295476d162e21e315ee72671985cd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6f12926295476d162e21e315ee72671985cd2/comments", "author": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e423cfe383a4a1f9f0b5459810587d50bf2a2b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e423cfe383a4a1f9f0b5459810587d50bf2a2b2d", "html_url": "https://github.com/rust-lang/rust/commit/e423cfe383a4a1f9f0b5459810587d50bf2a2b2d"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "0af4a28683631ff5236d87c3d10b11f7132e43ca", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=7cd6f12926295476d162e21e315ee72671985cd2", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n pub use hir_def::db::{\n-    BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n-    DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n-    FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n-    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, StaticDataQuery, StructDataQuery,\n-    TraitDataQuery, TypeAliasDataQuery,\n+    BodyQuery, BodyWithSourceMapQuery, ComputeCrateDefMapQuery, ConstDataQuery,\n+    CrateLangItemsQuery, DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery,\n+    ExprScopesQuery, FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase,\n+    InternDatabaseStorage, LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, StaticDataQuery,\n+    StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,"}, {"sha": "a348f37bc21cf4a5630cb3ce557f32b73f17d364", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=7cd6f12926295476d162e21e315ee72671985cd2", "patch": "@@ -3,6 +3,7 @@ use std::sync::Arc;\n \n use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase};\n+use ra_prof::profile;\n use ra_syntax::SmolStr;\n \n use crate::{\n@@ -46,9 +47,12 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n \n-    #[salsa::invoke(CrateDefMap::crate_def_map_query)]\n+    #[salsa::transparent]\n     fn crate_def_map(&self, krate: CrateId) -> Arc<CrateDefMap>;\n \n+    #[salsa::invoke(CrateDefMap::compute_crate_def_map)]\n+    fn compute_crate_def_map(&self, krate: CrateId) -> Arc<CrateDefMap>;\n+\n     #[salsa::invoke(StructData::struct_data_query)]\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;\n     #[salsa::invoke(StructData::union_data_query)]\n@@ -104,3 +108,8 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     #[salsa::invoke(Documentation::documentation_query)]\n     fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n }\n+\n+fn crate_def_map(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n+    let _p = profile(\"crate_def_map\");\n+    db.compute_crate_def_map(krate)\n+}"}, {"sha": "43255f4a12330b4414444ad833f1748d524f89d5", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=7cd6f12926295476d162e21e315ee72671985cd2", "patch": "@@ -172,13 +172,13 @@ pub struct ModuleData {\n }\n \n impl CrateDefMap {\n-    pub(crate) fn crate_def_map_query(\n+    pub(crate) fn compute_crate_def_map(\n         // Note that this doesn't have `+ AstDatabase`!\n         // This gurantess that `CrateDefMap` is stable across reparses.\n         db: &impl DefDatabase,\n         krate: CrateId,\n     ) -> Arc<CrateDefMap> {\n-        let _p = profile(\"crate_def_map_query\");\n+        let _p = profile(\"compute_crate_def_map\");\n         let def_map = {\n             let crate_graph = db.crate_graph();\n             let edition = crate_graph.edition(krate);"}, {"sha": "4585bf522d09b04de4575de126b1b7ba21bfd157", "filename": "crates/ra_ide/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_ide%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f12926295476d162e21e315ee72671985cd2/crates%2Fra_ide%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fchange.rs?ref=7cd6f12926295476d162e21e315ee72671985cd2", "patch": "@@ -309,7 +309,7 @@ impl RootDatabase {\n             hir::db::EnumDataQuery\n             hir::db::TraitDataQuery\n             hir::db::RawItemsQuery\n-            hir::db::CrateDefMapQuery\n+            hir::db::ComputeCrateDefMapQuery\n             hir::db::GenericParamsQuery\n             hir::db::FunctionDataQuery\n             hir::db::TypeAliasDataQuery"}]}