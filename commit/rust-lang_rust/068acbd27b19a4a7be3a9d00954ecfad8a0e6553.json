{"sha": "068acbd27b19a4a7be3a9d00954ecfad8a0e6553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OGFjYmQyN2IxOWE0YTdiZTNhOWQwMDk1NGVjZmFkOGEwZTY1NTM=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-07-27T04:04:46Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-07-27T04:04:46Z"}, "message": "initial implementation based on code for `derive_hash_xor_partial_eq` which is showing one error when there should be four", "tree": {"sha": "5ec21f44ef1cdc59f21237b6f23ed35d16ae3188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec21f44ef1cdc59f21237b6f23ed35d16ae3188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068acbd27b19a4a7be3a9d00954ecfad8a0e6553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068acbd27b19a4a7be3a9d00954ecfad8a0e6553", "html_url": "https://github.com/rust-lang/rust/commit/068acbd27b19a4a7be3a9d00954ecfad8a0e6553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068acbd27b19a4a7be3a9d00954ecfad8a0e6553/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0722991b62fd6e4d7d7a51425274f3288bcc96bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0722991b62fd6e4d7d7a51425274f3288bcc96bc", "html_url": "https://github.com/rust-lang/rust/commit/0722991b62fd6e4d7d7a51425274f3288bcc96bc"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "4f69c2d7af7754212e8160e3ca0eb682dfb9cd02", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/068acbd27b19a4a7be3a9d00954ecfad8a0e6553/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068acbd27b19a4a7be3a9d00954ecfad8a0e6553/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=068acbd27b19a4a7be3a9d00954ecfad8a0e6553", "patch": "@@ -137,6 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n+            check_ord_pord(cx, item.span, trait_ref, ty, is_automatically_derived);\n \n             if is_automatically_derived {\n                 check_unsafe_derive_deserialize(cx, item, trait_ref, ty);\n@@ -201,6 +202,60 @@ fn check_hash_peq<'tcx>(\n     }\n }\n \n+/// Implementation of the `DERIVE_ORD_XOR_PARTIAL_ORD` lint.\n+fn check_ord_pord<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    span: Span,\n+    trait_ref: &TraitRef<'_>,\n+    ty: Ty<'tcx>,\n+    ord_is_automatically_derived: bool,\n+) {\n+    if_chain! {\n+        if match_path(&trait_ref.path, &paths::ORD);\n+        if let Some(pord_trait_def_id) = cx.tcx.lang_items().partial_ord_trait();\n+        if let Some(def_id) = &trait_ref.trait_def_id();\n+        if !def_id.is_local();\n+        then {\n+            // Look for the PartialOrd implementations for `ty`\n+            cx.tcx.for_each_relevant_impl(pord_trait_def_id, ty, |impl_id| {\n+                let pord_is_automatically_derived = is_automatically_derived(&cx.tcx.get_attrs(impl_id));\n+\n+                if pord_is_automatically_derived == ord_is_automatically_derived {\n+                    return;\n+                }\n+\n+                let trait_ref = cx.tcx.impl_trait_ref(impl_id).expect(\"must be a trait implementation\");\n+\n+                // Only care about `impl PartialOrd<Foo> for Foo`\n+                // For `impl PartialOrd<B> for A, input_types is [A, B]\n+                if trait_ref.substs.type_at(1) == ty {\n+                    let mess = if pord_is_automatically_derived {\n+                        \"you are implementing `Ord` explicitly but have derived `PartialOrd`\"\n+                    } else {\n+                        \"you are deriving `Ord` but have implemented `PartialOrd` explicitly\"\n+                    };\n+\n+                    span_lint_and_then(\n+                        cx,\n+                        DERIVE_ORD_XOR_PARTIAL_ORD,\n+                        span,\n+                        mess,\n+                        |diag| {\n+                            if let Some(local_def_id) = impl_id.as_local() {\n+                                let hir_id = cx.tcx.hir().as_local_hir_id(local_def_id);\n+                                diag.span_note(\n+                                    cx.tcx.hir().span(hir_id),\n+                                    \"`PartialOrd` implemented here\"\n+                                );\n+                            }\n+                        }\n+                    );\n+                }\n+            });\n+        }\n+    }\n+}\n+\n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n     if match_path(&trait_ref.path, &paths::CLONE_TRAIT) {"}]}