{"sha": "4d7de5a16e230d8cf533c1cafee574862f06b968", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkN2RlNWExNmUyMzBkOGNmNTMzYzFjYWZlZTU3NDg2MmYwNmI5Njg=", "commit": {"author": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-18T04:53:06Z"}, "committer": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-19T20:23:56Z"}, "message": "Support single-line functions\n\nBy default, places functions with empty bodies on one line.\nIf the function has only one expression or statement that fits on one line, the 'fn_single_line' option can be used.", "tree": {"sha": "3fb92641b791c5455428580c89ce02078d188dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb92641b791c5455428580c89ce02078d188dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7de5a16e230d8cf533c1cafee574862f06b968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7de5a16e230d8cf533c1cafee574862f06b968", "html_url": "https://github.com/rust-lang/rust/commit/4d7de5a16e230d8cf533c1cafee574862f06b968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7de5a16e230d8cf533c1cafee574862f06b968/comments", "author": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09aa85798232d294fdb266a6f1f27995dad2be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09aa85798232d294fdb266a6f1f27995dad2be3", "html_url": "https://github.com/rust-lang/rust/commit/f09aa85798232d294fdb266a6f1f27995dad2be3"}], "stats": {"total": 394, "additions": 298, "deletions": 96}, "files": [{"sha": "7d56e3e8a80029c15c10711e8b17273206a0a962", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -269,6 +269,7 @@ create_config! {\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n+    fn_single_line: bool, false, \"Put single-expression functions on a single line\";\n     fn_return_indent: ReturnIndent, ReturnIndent::WithArgs,\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, true, \"If function argument parenthesis goes on a newline\";"}, {"sha": "58ddea0c483493d7f6eb79db3aa7372bdc9bb02e", "filename": "src/items.rs", "status": "modified", "additions": 98, "deletions": 3, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -12,17 +12,17 @@\n \n use Indent;\n use utils::{format_mutability, format_visibility, contains_skip, span_after, end_typaram,\n-            wrap_str, last_line_width};\n+            wrap_str, last_line_width, semicolon_for_expr, semicolon_for_stmt};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n use expr::rewrite_assign_rhs;\n-use comment::FindUncommented;\n+use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n \n use syntax::{ast, abi};\n-use syntax::codemap::{Span, BytePos, mk_sp};\n+use syntax::codemap::{Span, BytePos, CodeMap, mk_sp};\n use syntax::print::pprust;\n use syntax::parse::token;\n \n@@ -447,6 +447,81 @@ impl<'a> FmtVisitor<'a> {\n         Some((result, force_new_line_for_brace))\n     }\n \n+    pub fn rewrite_single_line_fn(&self,\n+                                  fn_rewrite: &Option<String>,\n+                                  block: &ast::Block)\n+                                  -> Option<String> {\n+\n+        let fn_str = match *fn_rewrite {\n+            Some(ref s) if !s.contains('\\n') => s,\n+            _ => return None,\n+        };\n+\n+        let codemap = self.get_context().codemap;\n+\n+        if is_empty_block(block, codemap) &&\n+           self.block_indent.width() + fn_str.len() + 3 <= self.config.max_width {\n+            return Some(format!(\"{}{{ }}\", fn_str));\n+        }\n+\n+        if self.config.fn_single_line && is_simple_block_stmt(block, codemap) {\n+            let rewrite = {\n+                if let Some(ref e) = block.expr {\n+                    let suffix = if semicolon_for_expr(e) {\n+                        \";\"\n+                    } else {\n+                        \"\"\n+                    };\n+\n+                    e.rewrite(&self.get_context(),\n+                              self.config.max_width - self.block_indent.width(),\n+                              self.block_indent)\n+                     .map(|s| s + suffix)\n+                     .or_else(|| Some(self.snippet(e.span)))\n+                } else if let Some(ref stmt) = block.stmts.first() {\n+                    self.rewrite_stmt(stmt)\n+                } else {\n+                    None\n+                }\n+            };\n+\n+            if let Some(res) = rewrite {\n+                let width = self.block_indent.width() + fn_str.len() + res.len() + 3;\n+                if !res.contains('\\n') && width <= self.config.max_width {\n+                    return Some(format!(\"{}{{ {} }}\", fn_str, res));\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+\n+    pub fn rewrite_stmt(&self, stmt: &ast::Stmt) -> Option<String> {\n+        match stmt.node {\n+            ast::Stmt_::StmtDecl(ref decl, _) => {\n+                if let ast::Decl_::DeclLocal(ref local) = decl.node {\n+                    let context = self.get_context();\n+                    local.rewrite(&context, self.config.max_width, self.block_indent)\n+                } else {\n+                    None\n+                }\n+            }\n+            ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n+                let suffix = if semicolon_for_stmt(stmt) {\n+                    \";\"\n+                } else {\n+                    \"\"\n+                };\n+\n+                ex.rewrite(&self.get_context(),\n+                           self.config.max_width - self.block_indent.width() - suffix.len(),\n+                           self.block_indent)\n+                  .map(|s| s + suffix)\n+            }\n+            ast::Stmt_::StmtMac(..) => None,\n+        }\n+    }\n+\n     fn rewrite_args(&self,\n                     args: &[ast::Arg],\n                     explicit_self: Option<&ast::ExplicitSelf>,\n@@ -1317,3 +1392,23 @@ fn span_for_where_pred(pred: &ast::WherePredicate) -> Span {\n         ast::WherePredicate::EqPredicate(ref p) => p.span,\n     }\n }\n+\n+// Checks whether a block contains at most one statement or expression, and no comments.\n+fn is_simple_block_stmt(block: &ast::Block, codemap: &CodeMap) -> bool {\n+    if (!block.stmts.is_empty() && block.expr.is_some()) ||\n+       (block.stmts.len() != 1 && block.expr.is_none()) {\n+        return false;\n+    }\n+\n+    let snippet = codemap.span_to_snippet(block.span).unwrap();\n+    !contains_comment(&snippet)\n+}\n+\n+fn is_empty_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n+    if !block.stmts.is_empty() || block.expr.is_some() {\n+        return false;\n+    }\n+\n+    let snippet = codemap.span_to_snippet(block.span).unwrap();\n+    !contains_comment(&snippet)\n+}"}, {"sha": "3965fc93c57bbad2f2f8eefacb83fb9d2432ec5a", "filename": "src/utils.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -102,6 +102,33 @@ pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n            .hi\n }\n \n+#[inline]\n+pub fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::Expr_::ExprRet(..) |\n+        ast::Expr_::ExprAgain(..) |\n+        ast::Expr_::ExprBreak(..) => true,\n+        _ => false,\n+    }\n+}\n+\n+#[inline]\n+pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n+    match stmt.node {\n+        ast::Stmt_::StmtSemi(ref expr, _) => {\n+            match expr.node {\n+                ast::Expr_::ExprWhile(..) |\n+                ast::Expr_::ExprWhileLet(..) |\n+                ast::Expr_::ExprLoop(..) |\n+                ast::Expr_::ExprForLoop(..) => false,\n+                _ => true,\n+            }\n+        }\n+        ast::Stmt_::StmtExpr(..) => false,\n+        _ => true,\n+    }\n+}\n+\n #[inline]\n #[cfg(target_pointer_width=\"64\")]\n // Based on the trick layed out at"}, {"sha": "534e8b112e4e340a336477dd0f71a00fe79f675b", "filename": "src/visitor.rs", "status": "modified", "additions": 15, "deletions": 46, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -38,28 +38,15 @@ impl<'a> FmtVisitor<'a> {\n     fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n         match stmt.node {\n             ast::Stmt_::StmtDecl(ref decl, _) => {\n-                match decl.node {\n-                    ast::Decl_::DeclLocal(ref local) => {\n-                        let rewrite = {\n-                            let context = self.get_context();\n-                            local.rewrite(&context, self.config.max_width, self.block_indent)\n-                        };\n-                        self.push_rewrite(stmt.span, rewrite);\n-                    }\n-                    ast::Decl_::DeclItem(ref item) => self.visit_item(item),\n+                if let ast::Decl_::DeclItem(ref item) = decl.node {\n+                    self.visit_item(item);\n+                } else {\n+                    let rewrite = self.rewrite_stmt(stmt);\n+                    self.push_rewrite(stmt.span, rewrite);\n                 }\n             }\n-            ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n-                let suffix = if semicolon_for_stmt(stmt) {\n-                    \";\"\n-                } else {\n-                    \"\"\n-                };\n-                let rewrite = ex.rewrite(&self.get_context(),\n-                                         self.config.max_width - self.block_indent.width() -\n-                                         suffix.len(),\n-                                         self.block_indent)\n-                                .map(|s| s + suffix);\n+            ast::Stmt_::StmtExpr(..) | ast::Stmt_::StmtSemi(..) => {\n+                let rewrite = self.rewrite_stmt(stmt);\n                 self.push_rewrite(stmt.span, rewrite);\n             }\n             ast::Stmt_::StmtMac(ref mac, _macro_style) => {\n@@ -101,7 +88,7 @@ impl<'a> FmtVisitor<'a> {\n             self.buffer.push_str(&rewrite);\n             self.last_pos = e.span.hi;\n \n-            if semicolon_for_expr(e) {\n+            if utils::semicolon_for_expr(e) {\n                 self.buffer.push_str(\";\");\n             }\n         }\n@@ -161,6 +148,13 @@ impl<'a> FmtVisitor<'a> {\n             visit::FnKind::Closure => None,\n         };\n \n+        if let Some(ref single_line_fn) = self.rewrite_single_line_fn(&rewrite, &b) {\n+            self.format_missing_with_indent(s.lo);\n+            self.buffer.push_str(single_line_fn);\n+            self.last_pos = b.span.hi;\n+            return;\n+        }\n+\n         if let Some(fn_str) = rewrite {\n             self.format_missing_with_indent(s.lo);\n             self.buffer.push_str(&fn_str);\n@@ -501,31 +495,6 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n-fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n-    match stmt.node {\n-        ast::Stmt_::StmtSemi(ref expr, _) => {\n-            match expr.node {\n-                ast::Expr_::ExprWhile(..) |\n-                ast::Expr_::ExprWhileLet(..) |\n-                ast::Expr_::ExprLoop(..) |\n-                ast::Expr_::ExprForLoop(..) => false,\n-                _ => true,\n-            }\n-        }\n-        ast::Stmt_::StmtExpr(..) => false,\n-        _ => true,\n-    }\n-}\n-\n-fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n-    match expr.node {\n-        ast::Expr_::ExprRet(..) |\n-        ast::Expr_::ExprAgain(..) |\n-        ast::Expr_::ExprBreak(..) => true,\n-        _ => false,\n-    }\n-}\n-\n impl<'a> Rewrite for [ast::Attribute] {\n     fn rewrite(&self, context: &RewriteContext, _: usize, offset: Indent) -> Option<String> {\n         let mut result = String::new();"}, {"sha": "b928de40de45e15f293828533c7dc8931760c6cc", "filename": "tests/source/fn-single-line.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Fsource%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Fsource%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-single-line.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -0,0 +1,74 @@\n+// rustfmt-fn_single_line: true\n+// Test single-line functions.\n+\n+fn foo_expr() {\n+    1\n+}\n+\n+fn foo_stmt() {\n+    foo();\n+}\n+\n+fn foo_decl_local()  {\n+    let z = 5;\n+   }\n+\n+fn    foo_decl_item(x: &mut i32) {\n+    x = 3;\n+}\n+\n+   fn empty()     {\n+\n+}\n+\n+fn foo_return() -> String {\n+    \"yay\"\n+}\n+\n+fn foo_where() -> T where T: Sync {\n+    let x = 2;\n+}\n+\n+fn fooblock() {\n+    {\n+        \"inner-block\"\n+    }\n+}\n+\n+fn fooblock2(x: i32) {\n+    let z = match x {\n+        _ => 2,\n+    };\n+}\n+\n+fn comment() {\n+    // this is a test comment\n+    1\n+}\n+\n+fn comment2() {\n+    // multi-line comment\n+    let z = 2;\n+    1\n+}\n+\n+fn only_comment() {\n+    // Keep this here\n+}\n+\n+fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n+    let z = \"aaaaaaawwwwwwwwwwwwwwwwwwwwwwwwwwww\";\n+}\n+\n+fn lots_of_space                      ()                                                           {\n+                           1                 \n+}\n+\n+trait CoolTypes {\n+    fn dummy(&self) {\n+    }\n+}\n+\n+trait CoolerTypes { fn dummy(&self) { \n+}\n+}"}, {"sha": "8b793c9a9255db3d99939d7450525803354d04be", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -13,8 +13,7 @@ impl Bar {\n     /// Blah blah blooo.\n     /// Blah blah blooo.\n     #[an_attribute]\n-    fn foo(&mut self) -> isize {\n-    }\n+    fn foo(&mut self) -> isize { }\n \n     /// Blah blah bing.\n     /// Blah blah bing.\n@@ -28,8 +27,7 @@ impl Bar {\n     }\n \n     #[another_attribute]\n-    fn f3(self) -> Dog {\n-    }\n+    fn f3(self) -> Dog { }\n \n     /// Blah blah bing.\n     #[attrib1]\n@@ -38,6 +36,5 @@ impl Bar {\n     // Another comment that needs rewrite because it's tooooooooooooooooooooooooooooooo\n     // loooooooooooong.\n     /// Blah blah bing.\n-    fn f4(self) -> Cat {\n-    }\n+    fn f4(self) -> Cat { }\n }"}, {"sha": "04053bd804a68df5e0c27bb37d5e5abdb80dcca5", "filename": "tests/target/comment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -32,8 +32,7 @@ fn test() {\n }\n \n /// test123\n-fn doc_comment() {\n-}\n+fn doc_comment() { }\n \n fn chains() {\n     foo.bar(|| {"}, {"sha": "c96489b08173f523970b49edcb21914a71b08c19", "filename": "tests/target/comments-fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-fn.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -16,8 +16,6 @@ fn foo<F, G>(a: aaaaaaaaaaaaa, // A comment\n \n }\n \n-fn bar<F /* comment on F */, G /* comment on G */>() {\n-}\n+fn bar<F /* comment on F */, G /* comment on G */>() { }\n \n-fn baz() -> Baz /* Comment after return type */ {\n-}\n+fn baz() -> Baz /* Comment after return type */ { }"}, {"sha": "0f46b6d1318955fc9702b5e6a525040986cb2570", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -28,15 +28,13 @@ fn generic<T>(arg: T) -> &SomeType\n     arg(a, b, c, d, e)\n }\n \n-fn foo() -> ! {\n-}\n+fn foo() -> ! { }\n \n pub fn http_fetch_async(listener: Box<AsyncCORSResponseListener + Send>,\n                         script_chan: Box<ScriptChan + Send>) {\n }\n \n-fn some_func<T: Box<Trait + Bound>>(val: T) {\n-}\n+fn some_func<T: Box<Trait + Bound>>(val: T) { }\n \n fn zzzzzzzzzzzzzzzzzzzz<Type, NodeType>(selff: Type,\n                                         mut handle: node::Handle<IdRef<'id, Node<K, V>>,"}, {"sha": "205ab897207ec8a6a073ea59bc4e82c80edb5063", "filename": "tests/target/fn-single-line.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-single-line.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -0,0 +1,61 @@\n+// rustfmt-fn_single_line: true\n+// Test single-line functions.\n+\n+fn foo_expr() { 1 }\n+\n+fn foo_stmt() { foo(); }\n+\n+fn foo_decl_local() { let z = 5; }\n+\n+fn foo_decl_item(x: &mut i32) { x = 3; }\n+\n+fn empty() { }\n+\n+fn foo_return() -> String { \"yay\" }\n+\n+fn foo_where() -> T\n+    where T: Sync\n+{\n+    let x = 2;\n+}\n+\n+fn fooblock() {\n+    {\n+        \"inner-block\"\n+    }\n+}\n+\n+fn fooblock2(x: i32) {\n+    let z = match x {\n+        _ => 2,\n+    };\n+}\n+\n+fn comment() {\n+    // this is a test comment\n+    1\n+}\n+\n+fn comment2() {\n+    // multi-line comment\n+    let z = 2;\n+    1\n+}\n+\n+fn only_comment() {\n+    // Keep this here\n+}\n+\n+fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n+    let z = \"aaaaaaawwwwwwwwwwwwwwwwwwwwwwwwwwww\";\n+}\n+\n+fn lots_of_space() { 1 }\n+\n+trait CoolTypes {\n+    fn dummy(&self) { }\n+}\n+\n+trait CoolerTypes {\n+    fn dummy(&self) { }\n+}"}, {"sha": "97e1172470f8a97c81f130073018e1194995d3bf", "filename": "tests/target/fn.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -1,8 +1,6 @@\n // Tests different fns\n \n-fn foo(a: AAAA, b: BBB, c: CCC) -> RetType {\n-\n-}\n+fn foo(a: AAAA, b: BBB, c: CCC) -> RetType { }\n \n fn foo(a: AAAA, b: BBB /* some, weird, inline comment */, c: CCC) -> RetType\n     where T: Blah\n@@ -34,20 +32,17 @@ fn foo<U, T>(a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n \n }\n \n-fn foo<U: Fn(A) -> B /* paren inside generics */>() {\n-}\n+fn foo<U: Fn(A) -> B /* paren inside generics */>() { }\n \n impl Foo {\n     fn with_no_errors<T, F>(&mut self, f: F) -> T\n         where F: FnOnce(&mut Resolver) -> T\n     {\n     }\n \n-    fn foo(mut self, mut bar: u32) {\n-    }\n+    fn foo(mut self, mut bar: u32) { }\n \n-    fn bar(self, mut bazz: u32) {\n-    }\n+    fn bar(self, mut bazz: u32) { }\n }\n \n pub fn render<'a,\n@@ -75,12 +70,9 @@ impl Foo {\n     }\n }\n \n-fn homura<T: Deref<Target = i32>>(_: T) {\n-\n-}\n+fn homura<T: Deref<Target = i32>>(_: T) { }\n \n-fn issue377() -> (Box<CompositorProxy + Send>, Box<CompositorReceiver>) {\n-}\n+fn issue377() -> (Box<CompositorProxy + Send>, Box<CompositorReceiver>) { }\n \n fn main() {\n     let _ = function(move || 5);"}, {"sha": "f39a7bcd53da1515e556d657791f4bcb2541958e", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -26,9 +26,7 @@ mod other;\n // sfdgfffffffffffffffffffffffffffffffffffffffffffffffffffffff\n // ffffffffffffffffffffffffffffffffffffffffff\n \n-fn foo(a: isize, b: u32 /* blah blah */, c: f64) {\n-\n-}\n+fn foo(a: isize, b: u32 /* blah blah */, c: f64) { }\n \n fn foo() -> Box<Write + 'static>\n     where 'a: 'b,\n@@ -77,8 +75,7 @@ impl Bar {\n     }\n \n     #[an_attribute]\n-    fn f3(self) -> Dog {\n-    }\n+    fn f3(self) -> Dog { }\n }\n \n /// The `nodes` and `edges` method each return instantiations of\n@@ -118,8 +115,7 @@ pub struct Foo<'a, Y: Baz>\n     f: SomeType, // Comment beside a field\n }\n \n-fn foo(ann: &'a (PpAnn + 'a)) {\n-}\n+fn foo(ann: &'a (PpAnn + 'a)) { }\n \n fn main() {\n     for i in 0i32..4 {"}, {"sha": "0a03d2b39946cd29498534a2ef5ddb697ce5dc9d", "filename": "tests/target/nestedmod/mod2c.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fnestedmod%2Fmod2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fnestedmod%2Fmod2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmod2c.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -1,4 +1,3 @@\n // A standard mod\n \n-fn a() {\n-}\n+fn a() { }"}, {"sha": "febe1ff7b2527eacf21f3e4960658ddd85ce313e", "filename": "tests/target/nestedmod/mymod1/mod3a.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -1,3 +1,2 @@\n // Another mod\n-fn a() {\n-}\n+fn a() { }"}, {"sha": "53540b8b6590e168e4e72ec4803f16600dc343e2", "filename": "tests/target/nestedmod/submod2/a.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fnestedmod%2Fsubmod2%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fnestedmod%2Fsubmod2%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fsubmod2%2Fa.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -3,5 +3,4 @@\n \n use c::a;\n \n-fn foo() {\n-}\n+fn foo() { }"}, {"sha": "45590d86ba6c51f0babffb0b43e3e2f44d2f9e07", "filename": "tests/target/no_new_line_beginning.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fno_new_line_beginning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fno_new_line_beginning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fno_new_line_beginning.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -1,2 +1 @@\n-fn main() {\n-}\n+fn main() { }"}, {"sha": "303a4df4a9d676f7748c1410b51c14101f1c3492", "filename": "tests/target/paths.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de5a16e230d8cf533c1cafee574862f06b968/tests%2Ftarget%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpaths.rs?ref=4d7de5a16e230d8cf533c1cafee574862f06b968", "patch": "@@ -19,5 +19,4 @@ fn main() {\n     let x: Foo<A>;\n }\n \n-fn op(foo: Bar, key: &[u8], upd: Fn(Option<&memcache::Item>, Baz) -> Result) -> MapResult {\n-}\n+fn op(foo: Bar, key: &[u8], upd: Fn(Option<&memcache::Item>, Baz) -> Result) -> MapResult { }"}]}