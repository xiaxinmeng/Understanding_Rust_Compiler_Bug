{"sha": "96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "node_id": "C_kwDOAAsO6NoAKDk2YjJmOGFjMzI2OGYwYWVlNGQxMDg2OGY5ZTMxYTVmN2I2NjY0MWI", "commit": {"author": {"name": "Waffle Maybe", "email": "waffle.lapkin@gmail.com", "date": "2022-01-04T10:21:56Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-09T09:21:33Z"}, "message": "Apply suggestions from code review\n\nUse \"(associated) function\" terminology instead of \"method\".\n\nCo-authored-by: Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>", "tree": {"sha": "f5281af05c26e73fc83d79c33f1b52a5e7ffed18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5281af05c26e73fc83d79c33f1b52a5e7ffed18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "html_url": "https://github.com/rust-lang/rust/commit/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "268ae9a232372dcdff59830310d353d8539acb35", "url": "https://api.github.com/repos/rust-lang/rust/commits/268ae9a232372dcdff59830310d353d8539acb35", "html_url": "https://github.com/rust-lang/rust/commit/268ae9a232372dcdff59830310d353d8539acb35"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "3e1605aabfdc22bc5de9ed8e9e17d5c704b093f7", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "patch": "@@ -678,7 +678,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n     ),\n     rustc_attr!(\n-        rustc_must_implement_one_of, Normal, template!(List: \"method1, method2, ...\"), ErrorFollowing,\n+        rustc_must_implement_one_of, Normal, template!(List: \"function1, function2, ...\"), ErrorFollowing,\n         \"the `#[rustc_must_implement_one_of]` attribute is used to change minimal complete \\\n         definition of a trait, it's currently in experimental form and should be changed before \\\n         being exposed outside of the std\""}, {"sha": "9f8053d4a4eac7893c57dc9743f402638732c0c1", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "patch": "@@ -45,7 +45,7 @@ pub struct TraitDef {\n     /// recomputed all the time.\n     pub def_path_hash: DefPathHash,\n \n-    /// List of methods from `#[rustc_must_implement_one_of]` attribute one of which\n+    /// List of functions from `#[rustc_must_implement_one_of]` attribute one of which\n     /// must be implemented.\n     pub must_implement_one_of: Option<Box<[Ident]>>,\n }"}, {"sha": "b95a2b6fa498c67f6ddf8dbd8007af304528958a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "patch": "@@ -1253,15 +1253,17 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n                 .map(|item| item.ident().ok_or(item.span()))\n                 .collect::<Result<Box<[_]>, _>>()\n                 .map_err(|span| {\n-                    tcx.sess.struct_span_err(span, \"must be an identifier of a method\").emit();\n+                    tcx.sess\n+                        .struct_span_err(span, \"must be a name of an associated function\")\n+                        .emit();\n                 })\n                 .ok()\n                 .zip(Some(attr.span)),\n             // Error is reported by `rustc_attr!`\n             None => None,\n         })\n         // Check that all arguments of `#[rustc_must_implement_one_of]` reference\n-        // methods in the trait with default implementations\n+        // functions in the trait with default implementations\n         .and_then(|(list, attr_span)| {\n             let errors = list.iter().filter_map(|ident| {\n                 let item = items.iter().find(|item| item.ident == *ident);\n@@ -1272,7 +1274,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n                             tcx.sess\n                                 .struct_span_err(\n                                     item.span,\n-                                    \"This method doesn't have a default implementation\",\n+                                    \"This function doesn't have a default implementation\",\n                                 )\n                                 .span_note(attr_span, \"required by this annotation\")\n                                 .emit();\n@@ -1284,16 +1286,16 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n                     }\n                     Some(item) => tcx\n                         .sess\n-                        .struct_span_err(item.span, \"Not a method\")\n+                        .struct_span_err(item.span, \"Not a function\")\n                         .span_note(attr_span, \"required by this annotation\")\n                         .note(\n                             \"All `#[rustc_must_implement_one_of]` arguments \\\n-                            must be method identifiers\",\n+                            must be associated function names\",\n                         )\n                         .emit(),\n                     None => tcx\n                         .sess\n-                        .struct_span_err(ident.span, \"Method not found in this trait\")\n+                        .struct_span_err(ident.span, \"Function not found in this trait\")\n                         .emit(),\n                 }\n "}, {"sha": "1089e5f9c4ab97d8b3cef3c5878d1635289a28a9", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_misuse.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs?ref=96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "patch": "@@ -1,12 +1,12 @@\n #![feature(rustc_attrs)]\n \n #[rustc_must_implement_one_of(a, b)]\n-//~^ Method not found in this trait\n-//~| Method not found in this trait\n+//~^ Function not found in this trait\n+//~| Function not found in this trait\n trait Tr0 {}\n \n #[rustc_must_implement_one_of(a, b)]\n-//~^ Method not found in this trait\n+//~^ Function not found in this trait\n trait Tr1 {\n     fn a() {}\n }\n@@ -23,16 +23,16 @@ trait Tr3 {}\n \n #[rustc_must_implement_one_of(A, B)]\n trait Tr4 {\n-    const A: u8 = 1; //~ Not a method\n+    const A: u8 = 1; //~ Not a function\n \n-    type B; //~ Not a method\n+    type B; //~ Not a function\n }\n \n #[rustc_must_implement_one_of(a, b)]\n trait Tr5 {\n-    fn a(); //~ This method doesn't have a default implementation\n+    fn a(); //~ This function doesn't have a default implementation\n \n-    fn b(); //~ This method doesn't have a default implementation\n+    fn b(); //~ This function doesn't have a default implementation\n }\n \n fn main() {}"}, {"sha": "74a6dc8fec97ceb2cc3f9bc19152cba6ba7d0e25", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_misuse.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96b2f8ac3268f0aee4d10868f9e31a5f7b66641b/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr?ref=96b2f8ac3268f0aee4d10868f9e31a5f7b66641b", "patch": "@@ -2,21 +2,21 @@ error: malformed `rustc_must_implement_one_of` attribute input\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:20:1\n    |\n LL | #[rustc_must_implement_one_of]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_must_implement_one_of(method1, method2, ...)]`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_must_implement_one_of(function1, function2, ...)]`\n \n-error: Method not found in this trait\n+error: Function not found in this trait\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:3:31\n    |\n LL | #[rustc_must_implement_one_of(a, b)]\n    |                               ^\n \n-error: Method not found in this trait\n+error: Function not found in this trait\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:3:34\n    |\n LL | #[rustc_must_implement_one_of(a, b)]\n    |                                  ^\n \n-error: Method not found in this trait\n+error: Function not found in this trait\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:8:34\n    |\n LL | #[rustc_must_implement_one_of(a, b)]\n@@ -28,7 +28,7 @@ error: the `#[rustc_must_implement_one_of]` attribute must be used with at least\n LL | #[rustc_must_implement_one_of(a)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Not a method\n+error: Not a function\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:26:5\n    |\n LL |     const A: u8 = 1;\n@@ -39,9 +39,9 @@ note: required by this annotation\n    |\n LL | #[rustc_must_implement_one_of(A, B)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be method identifiers\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be associated function names\n \n-error: Not a method\n+error: Not a function\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:28:5\n    |\n LL |     type B;\n@@ -52,9 +52,9 @@ note: required by this annotation\n    |\n LL | #[rustc_must_implement_one_of(A, B)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be method identifiers\n+   = note: All `#[rustc_must_implement_one_of]` arguments must be associated function names\n \n-error: This method doesn't have a default implementation\n+error: This function doesn't have a default implementation\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:33:5\n    |\n LL |     fn a();\n@@ -66,7 +66,7 @@ note: required by this annotation\n LL | #[rustc_must_implement_one_of(a, b)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This method doesn't have a default implementation\n+error: This function doesn't have a default implementation\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:35:5\n    |\n LL |     fn b();"}]}