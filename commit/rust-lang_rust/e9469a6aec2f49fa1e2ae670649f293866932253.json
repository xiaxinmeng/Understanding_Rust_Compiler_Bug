{"sha": "e9469a6aec2f49fa1e2ae670649f293866932253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDY5YTZhZWMyZjQ5ZmExZTJhZTY3MDY0OWYyOTM4NjY5MzIyNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-12T15:04:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-12T15:04:36Z"}, "message": "Auto merge of #66886 - mark-i-m:simplify-borrow_check-2, r=matthewjasper\n\nRemove the borrow check::nll submodule\n\nNLL is the only borrow checker now, so no need to have a separate submodule.\n\n@rustbot modify labels: +S-blocked\n\nWaiting on #66815", "tree": {"sha": "b6d1dc69466fb97f4d6a3a5cba55004064ae20a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d1dc69466fb97f4d6a3a5cba55004064ae20a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9469a6aec2f49fa1e2ae670649f293866932253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9469a6aec2f49fa1e2ae670649f293866932253", "html_url": "https://github.com/rust-lang/rust/commit/e9469a6aec2f49fa1e2ae670649f293866932253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9469a6aec2f49fa1e2ae670649f293866932253/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eebe058e52b749d1a38926390c12900e91b0b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eebe058e52b749d1a38926390c12900e91b0b2c", "html_url": "https://github.com/rust-lang/rust/commit/3eebe058e52b749d1a38926390c12900e91b0b2c"}, {"sha": "bc9582a9534f8d352581617780abe247aaddc2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9582a9534f8d352581617780abe247aaddc2ae", "html_url": "https://github.com/rust-lang/rust/commit/bc9582a9534f8d352581617780abe247aaddc2ae"}], "stats": {"total": 330, "additions": 182, "deletions": 148}, "files": [{"sha": "28a631a711a871fd9ab0c6695543247705cf4158", "filename": "src/librustc_mir/borrow_check/constraint_generation.rs", "status": "renamed", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,9 +1,3 @@\n-use crate::borrow_check::borrow_set::BorrowSet;\n-use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::borrow_check::nll::facts::AllFacts;\n-use crate::borrow_check::nll::region_infer::values::LivenessValues;\n-use crate::borrow_check::places_conflict;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n@@ -15,6 +9,15 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n+use crate::borrow_check::{\n+    borrow_set::BorrowSet,\n+    location::LocationTable,\n+    nll::ToRegionVid,\n+    facts::AllFacts,\n+    region_infer::values::LivenessValues,\n+    places_conflict,\n+};\n+\n pub(super) fn generate_constraints<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,", "previous_filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs"}, {"sha": "3e7aa67ef6c7de3c85814e4ec1957fa5626d19df", "filename": "src/librustc_mir/borrow_check/constraints/graph.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fgraph.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,12 +1,15 @@\n-use crate::borrow_check::nll::type_check::Locations;\n-use crate::borrow_check::nll::constraints::OutlivesConstraintIndex;\n-use crate::borrow_check::nll::constraints::{OutlivesConstraintSet, OutlivesConstraint};\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;\n use rustc_index::vec::IndexVec;\n use syntax_pos::DUMMY_SP;\n \n+use crate::borrow_check::{\n+    type_check::Locations,\n+    constraints::OutlivesConstraintIndex,\n+    constraints::{OutlivesConstraintSet, OutlivesConstraint},\n+};\n+\n /// The construct graph organizes the constraints by their end-points.\n /// It can be used to view a `R1: R2` constraint as either an edge `R1\n /// -> R2` or `R2 -> R1` depending on the direction type `D`.", "previous_filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs"}, {"sha": "96982b604c0beb874eef1d9102fd1743236a9304", "filename": "src/librustc_mir/borrow_check/constraints/mod.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,11 +1,12 @@\n-use crate::borrow_check::nll::type_check::Locations;\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_index::vec::{Idx, IndexVec};\n use std::fmt;\n use std::ops::Index;\n \n+use crate::borrow_check::type_check::Locations;\n+\n crate mod graph;\n \n /// A set of NLL region constraints. These include \"outlives\"", "previous_filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs"}, {"sha": "a463d2cb2990b572ff231af8794bc528ae5764b3", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,9 +1,7 @@\n+//! Print diagnostics to explain why values are borrowed.\n+\n use std::collections::VecDeque;\n \n-use crate::borrow_check::borrow_set::BorrowData;\n-use crate::borrow_check::nll::region_infer::Cause;\n-use crate::borrow_check::nll::ConstraintDescription;\n-use crate::borrow_check::{MirBorrowckCtxt, WriteKind};\n use rustc::mir::{\n     CastKind, ConstraintCategory, FakeReadCause, Local, Location, Body, Operand, Place, Rvalue,\n     Statement, StatementKind, TerminatorKind,\n@@ -16,6 +14,13 @@ use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n+use crate::borrow_check::{\n+    borrow_set::BorrowData,\n+    region_infer::Cause,\n+    nll::ConstraintDescription,\n+    MirBorrowckCtxt, WriteKind,\n+};\n+\n use super::{UseSpans, find_use, RegionName};\n \n #[derive(Debug)]"}, {"sha": "c557e528768c563617783815c333194b74615b66", "filename": "src/librustc_mir/borrow_check/diagnostics/find_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Ffind_use.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,8 +1,7 @@\n use std::collections::VecDeque;\n use std::rc::Rc;\n \n-use crate::borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n-use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::{nll::ToRegionVid, region_infer::{Cause, RegionInferenceContext}};\n use crate::util::liveness::{self, DefUse};\n use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Body};"}, {"sha": "b61c37b061396139d974c99c5f668087dc67aba9", "filename": "src/librustc_mir/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -13,7 +13,7 @@ use syntax_pos::symbol::Symbol;\n \n use smallvec::SmallVec;\n \n-use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n+use crate::borrow_check::region_infer::RegionInferenceContext;\n \n use super::{\n     RegionName, RegionNameSource, ErrorConstraintInfo, ErrorReportingCtx, RegionErrorNamingCtx,"}, {"sha": "8a37e2d02ec71905bc0f4d7d207cb24934ed81ef", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,10 +1,5 @@\n-use crate::borrow_check::nll::constraints::OutlivesConstraint;\n-use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n-use crate::borrow_check::nll::type_check::Locations;\n-use crate::borrow_check::nll::universal_regions::DefiningTy;\n-use crate::borrow_check::nll::ConstraintDescription;\n-use crate::borrow_check::Upvar;\n-use crate::util::borrowck_errors;\n+//! Error reporting machinery for lifetime errors.\n+\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n@@ -19,6 +14,17 @@ use syntax::symbol::kw;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n+use crate::util::borrowck_errors;\n+\n+use crate::borrow_check::{\n+    constraints::OutlivesConstraint,\n+    region_infer::RegionInferenceContext,\n+    type_check::Locations,\n+    universal_regions::DefiningTy,\n+    nll::ConstraintDescription,\n+    Upvar,\n+};\n+\n use super::{OutlivesSuggestionBuilder, RegionName, RegionNameSource, RegionErrorNamingCtx};\n \n impl ConstraintDescription for ConstraintCategory {"}, {"sha": "720c77beaf8b5409d72a8cceec6d88a1ad464b81", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -15,14 +15,13 @@ use rustc_data_structures::fx::FxHashMap;\n use syntax_pos::{Span, symbol::Symbol, DUMMY_SP};\n \n use crate::borrow_check::{\n-    nll::region_infer::RegionInferenceContext,\n-    nll::universal_regions::DefiningTy,\n+    diagnostics::region_errors::ErrorReportingCtx,\n+    region_infer::RegionInferenceContext,\n+    universal_regions::DefiningTy,\n     nll::ToRegionVid,\n     Upvar,\n };\n \n-use super::region_errors::ErrorReportingCtx;\n-\n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n #[derive(Debug, Clone)]"}, {"sha": "839e09be7af82cf6d7308585d9fe11dd1988291d", "filename": "src/librustc_mir/borrow_check/diagnostics/var_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,5 +1,4 @@\n-use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n-use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n use crate::borrow_check::Upvar;\n use rustc::mir::{Local, Body};\n use rustc::ty::{RegionVid, TyCtxt};"}, {"sha": "a16c36d749f0d704d0d86a6987585d394417d734", "filename": "src/librustc_mir/borrow_check/facts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "previous_filename": "src/librustc_mir/borrow_check/nll/facts.rs"}, {"sha": "58fac5512d9b6f71337c5dd1a1093b4038b24488", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,14 +1,3 @@\n-use crate::borrow_check::borrow_set::BorrowSet;\n-use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::{JustWrite, WriteAndRead};\n-use crate::borrow_check::{AccessDepth, Deep, Shallow};\n-use crate::borrow_check::{ReadOrWrite, Activation, Read, Reservation, Write};\n-use crate::borrow_check::{LocalMutationIsAllowed, MutateMode};\n-use crate::borrow_check::ArtificialField;\n-use crate::borrow_check::{ReadKind, WriteKind};\n-use crate::borrow_check::nll::facts::AllFacts;\n-use crate::borrow_check::path_utils::*;\n-use crate::dataflow::indexes::BorrowIndex;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, Location, Body, Place, ReadOnlyBodyAndCache, Rvalue};\n@@ -17,6 +6,17 @@ use rustc::mir::TerminatorKind;\n use rustc::mir::{Operand, BorrowKind};\n use rustc_data_structures::graph::dominators::Dominators;\n \n+use crate::dataflow::indexes::BorrowIndex;\n+\n+use crate::borrow_check::{\n+    borrow_set::BorrowSet,\n+    location::LocationTable,\n+    facts::AllFacts,\n+    path_utils::*,\n+    JustWrite, WriteAndRead, AccessDepth, Deep, Shallow, ReadOrWrite, Activation, Read,\n+    Reservation, Write, LocalMutationIsAllowed, MutateMode, ArtificialField, ReadKind, WriteKind,\n+};\n+\n pub(super) fn generate_invalidates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,", "previous_filename": "src/librustc_mir/borrow_check/nll/invalidation.rs"}, {"sha": "75213d30982f9a833e936d28cec1537e32a1d611", "filename": "src/librustc_mir/borrow_check/member_constraints.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "previous_filename": "src/librustc_mir/borrow_check/nll/member_constraints.rs"}, {"sha": "11012ef2fc7ee78065b3253ad4e5d74b23ce113e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,6 +1,5 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use rustc::hir::{self, HirId};\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n@@ -41,7 +40,6 @@ use crate::dataflow::{do_dataflow, DebugFormatted};\n use crate::dataflow::EverInitializedPlaces;\n use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n \n-use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n@@ -50,17 +48,31 @@ use self::diagnostics::AccessKind;\n \n use self::path_utils::*;\n \n-crate mod borrow_set;\n mod diagnostics;\n mod flows;\n mod location;\n mod path_utils;\n-crate mod place_ext;\n-crate mod places_conflict;\n mod prefixes;\n mod used_muts;\n-\n-pub(crate) mod nll;\n+mod constraint_generation;\n+mod facts;\n+mod invalidation;\n+mod renumber;\n+mod member_constraints;\n+mod constraints;\n+mod universal_regions;\n+mod type_check;\n+mod region_infer;\n+mod borrow_set;\n+mod place_ext;\n+mod places_conflict;\n+mod nll;\n+\n+crate use region_infer::RegionInferenceContext;\n+crate use borrow_set::{BorrowSet, BorrowData};\n+crate use places_conflict::{places_conflict, PlaceConflictBias};\n+crate use place_ext::PlaceExt;\n+crate use nll::ToRegionVid;\n \n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]"}, {"sha": "6d28a8caa92bda51138449e82e916398ff5a7db9", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "renamed", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,13 +1,5 @@\n-use crate::borrow_check::borrow_set::BorrowSet;\n-use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::facts::AllFactsExt;\n-use crate::borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n-use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n-use crate::dataflow::move_paths::{InitLocation, MoveData, InitKind};\n-use crate::dataflow::FlowAtLocation;\n-use crate::dataflow::MaybeInitializedPlaces;\n-use crate::transform::MirSource;\n-use crate::borrow_check::Upvar;\n+//! The entry point of the NLL borrow checker.\n+\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements,\n@@ -27,24 +19,23 @@ use syntax::symbol::sym;\n \n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n+\n use crate::util as mir_util;\n use crate::util::pretty;\n+use crate::dataflow::move_paths::{InitLocation, MoveData, InitKind};\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::transform::MirSource;\n \n-mod constraint_generation;\n-mod facts;\n-mod invalidation;\n-mod renumber;\n-\n-mod member_constraints;\n-\n-crate mod constraints;\n-crate mod universal_regions;\n-crate mod type_check;\n-crate mod region_infer;\n-\n-use self::facts::{AllFacts, RustcFacts};\n-use self::region_infer::RegionInferenceContext;\n-use self::universal_regions::UniversalRegions;\n+use crate::borrow_check::{\n+    borrow_set::BorrowSet,\n+    location::LocationTable,\n+    facts::{AllFacts, AllFactsExt, RustcFacts},\n+    region_infer::{RegionInferenceContext, values::RegionValueElements},\n+    universal_regions::UniversalRegions,\n+    type_check::{self, MirTypeckResults, MirTypeckRegionConstraints},\n+    Upvar, renumber, constraint_generation, invalidation,\n+};\n \n crate type PoloniusOutput = Output<RustcFacts>;\n ", "previous_filename": "src/librustc_mir/borrow_check/nll/mod.rs"}, {"sha": "d4f6ce8801e63689639e3949c20cadca1a1d619b", "filename": "src/librustc_mir/borrow_check/region_infer/dump_mir.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs"}, {"sha": "29c6f325263902361134a9dde0b24fbe96517220", "filename": "src/librustc_mir/borrow_check/region_infer/graphviz.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fgraphviz.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -2,11 +2,12 @@\n //! libgraphviz traits, specialized to attaching borrowck analysis\n //! data to rendered labels.\n \n-use super::*;\n-use crate::borrow_check::nll::constraints::OutlivesConstraint;\n use std::borrow::Cow;\n use std::io::{self, Write};\n \n+use super::*;\n+use crate::borrow_check::constraints::OutlivesConstraint;\n+\n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out the region constraint graph.\n     crate fn dump_graphviz_raw_constraints(&self, mut w: &mut dyn Write) -> io::Result<()> {", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs"}, {"sha": "b6946e2f73fc6f95d1a048db370c9ce5e95f5bb6", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "renamed", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -23,29 +23,26 @@ use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n use crate::borrow_check::{\n-    nll::{\n-        constraints::{\n-            graph::NormalConstraintGraph,\n-            ConstraintSccIndex,\n-            OutlivesConstraint,\n-            OutlivesConstraintSet,\n-        },\n-        member_constraints::{MemberConstraintSet, NllMemberConstraintIndex},\n-        region_infer::values::{\n-            PlaceholderIndices, RegionElement, ToElementIndex\n-        },\n-        type_check::{free_region_relations::UniversalRegionRelations, Locations},\n+    constraints::{\n+        graph::NormalConstraintGraph,\n+        ConstraintSccIndex,\n+        OutlivesConstraint,\n+        OutlivesConstraintSet,\n     },\n+    member_constraints::{MemberConstraintSet, NllMemberConstraintIndex},\n+    region_infer::values::{\n+        PlaceholderIndices, RegionElement, ToElementIndex, LivenessValues, RegionValueElements,\n+        RegionValues,\n+    },\n+    type_check::{free_region_relations::UniversalRegionRelations, Locations},\n     diagnostics::{\n         OutlivesSuggestionBuilder, RegionErrorNamingCtx,\n     },\n+    nll::{ToRegionVid, PoloniusOutput},\n+    universal_regions::UniversalRegions,\n     Upvar,\n };\n \n-use self::values::{LivenessValues, RegionValueElements, RegionValues};\n-use super::universal_regions::UniversalRegions;\n-use super::{PoloniusOutput, ToRegionVid};\n-\n mod dump_mir;\n mod graphviz;\n ", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs"}, {"sha": "0bf0cd37cd8439fc774c7c6b3a55c50c4f1ea788", "filename": "src/librustc_mir/borrow_check/region_infer/values.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "previous_filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs"}, {"sha": "ba323b113e9ebf23b6428970f1fb87327715a097", "filename": "src/librustc_mir/borrow_check/renumber.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "previous_filename": "src/librustc_mir/borrow_check/nll/renumber.rs"}, {"sha": "334477dff23623c52677836006933e7fb5835f6c", "filename": "src/librustc_mir/borrow_check/type_check/constraint_conversion.rs", "status": "renamed", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,8 +1,3 @@\n-use crate::borrow_check::nll::constraints::OutlivesConstraint;\n-use crate::borrow_check::nll::region_infer::TypeTest;\n-use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n-use crate::borrow_check::nll::universal_regions::UniversalRegions;\n-use crate::borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n@@ -14,6 +9,14 @@ use rustc::ty::subst::GenericArgKind;\n use rustc::ty::{self, TyCtxt};\n use syntax_pos::DUMMY_SP;\n \n+use crate::borrow_check::{\n+    constraints::OutlivesConstraint,\n+    region_infer::TypeTest,\n+    type_check::{Locations, MirTypeckRegionConstraints},\n+    universal_regions::UniversalRegions,\n+    nll::ToRegionVid,\n+};\n+\n crate struct ConstraintConversion<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     tcx: TyCtxt<'tcx>,", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs"}, {"sha": "03a7f97ac51f1d5af61b4e3022bb36fb24a93a30", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,7 +1,3 @@\n-use crate::borrow_check::nll::type_check::constraint_conversion;\n-use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n-use crate::borrow_check::nll::universal_regions::UniversalRegions;\n-use crate::borrow_check::nll::ToRegionVid;\n use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n@@ -14,6 +10,13 @@ use rustc_data_structures::transitive_relation::TransitiveRelation;\n use std::rc::Rc;\n use syntax_pos::DUMMY_SP;\n \n+use crate::borrow_check::{\n+    type_check::constraint_conversion,\n+    type_check::{Locations, MirTypeckRegionConstraints},\n+    universal_regions::UniversalRegions,\n+    nll::ToRegionVid,\n+};\n+\n #[derive(Debug)]\n crate struct UniversalRegionRelations<'tcx> {\n     universal_regions: Rc<UniversalRegions<'tcx>>,", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs"}, {"sha": "3df04909d0d2fc43cdc804b69cf6644e929c96dd", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -7,14 +7,15 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n-use crate::borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::infer::LateBoundRegionConversionTime;\n use rustc::mir::*;\n use rustc::ty::Ty;\n \n use rustc_index::vec::Idx;\n use syntax_pos::Span;\n \n+use crate::borrow_check::universal_regions::UniversalRegions;\n+\n use super::{Locations, TypeChecker};\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs"}, {"sha": "75e4f61245f5fd27092e86f4727f7bce91e03c53", "filename": "src/librustc_mir/borrow_check/type_check/liveness/local_use_map.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,10 +1,12 @@\n-use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n-use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, ReadOnlyBodyAndCache};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n \n+use crate::util::liveness::{categorize, DefUse};\n+\n+use crate::borrow_check::region_infer::values::{PointIndex, RegionValueElements};\n+\n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness\n /// computation.", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs"}, {"sha": "ee3d89e741a5431cbc5b8624ac3183797a9c57b4", "filename": "src/librustc_mir/borrow_check/type_check/liveness/mod.rs", "status": "renamed", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fmod.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,17 +1,21 @@\n-use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::constraints::OutlivesConstraintSet;\n-use crate::borrow_check::nll::facts::{AllFacts, AllFactsExt};\n-use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n-use crate::borrow_check::nll::universal_regions::UniversalRegions;\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::FlowAtLocation;\n-use crate::dataflow::MaybeInitializedPlaces;\n use rustc::mir::{Body, Local, ReadOnlyBodyAndCache};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::rc::Rc;\n \n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+\n+use crate::borrow_check::{\n+    location::LocationTable,\n+    constraints::OutlivesConstraintSet,\n+    facts::{AllFacts, AllFactsExt},\n+    region_infer::values::RegionValueElements,\n+    universal_regions::UniversalRegions,\n+    nll::ToRegionVid,\n+};\n+\n use super::TypeChecker;\n \n mod local_use_map;", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs"}, {"sha": "0354b0d6b92c525b52d153a55ab41dd06275fdfd", "filename": "src/librustc_mir/borrow_check/type_check/liveness/polonius.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs"}, {"sha": "9afd25a0f7f7e99fe1d16dbb026c94801bc23537", "filename": "src/librustc_mir/borrow_check/type_check/liveness/trace.rs", "status": "renamed", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,11 +1,3 @@\n-use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n-use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n-use crate::borrow_check::nll::type_check::liveness::polonius;\n-use crate::borrow_check::nll::type_check::NormalizeLocation;\n-use crate::borrow_check::nll::type_check::TypeChecker;\n-use crate::dataflow::indexes::MovePathIndex;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, ReadOnlyBodyAndCache};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n@@ -16,6 +8,18 @@ use rustc_index::bit_set::HybridBitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::rc::Rc;\n \n+use crate::dataflow::indexes::MovePathIndex;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n+\n+use crate::borrow_check::{\n+    region_infer::values::{self, PointIndex, RegionValueElements},\n+    type_check::liveness::local_use_map::LocalUseMap,\n+    type_check::liveness::polonius,\n+    type_check::NormalizeLocation,\n+    type_check::TypeChecker,\n+};\n+\n /// This is the heart of the liveness computation. For each variable X\n /// that requires a liveness computation, it walks over all the uses\n /// of X and does a reverse depth-first search (\"trace\") through the", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs"}, {"sha": "663536bc2b4b6bdfc622131352479bc955fa07dd", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "renamed", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -34,30 +34,32 @@ use rustc_error_codes::*;\n use rustc_index::vec::{Idx, IndexVec};\n use syntax_pos::{DUMMY_SP, Span};\n \n-use crate::borrow_check::borrow_set::BorrowSet;\n-use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::constraints::{OutlivesConstraint, OutlivesConstraintSet};\n-use crate::borrow_check::nll::facts::AllFacts;\n-use crate::borrow_check::nll::member_constraints::MemberConstraintSet;\n-use crate::borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n-use crate::borrow_check::nll::region_infer::values::LivenessValues;\n-use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n-use crate::borrow_check::nll::region_infer::values::PlaceholderIndices;\n-use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n-use crate::borrow_check::nll::renumber;\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::borrow_check::nll::type_check::free_region_relations::{\n-    CreateResult, UniversalRegionRelations,\n-};\n-use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n use crate::transform::promote_consts::should_suggest_const_in_array_repeat_expressions_attribute;\n \n+use crate::borrow_check::{\n+    borrow_set::BorrowSet,\n+    location::LocationTable,\n+    constraints::{OutlivesConstraintSet, OutlivesConstraint},\n+    member_constraints::MemberConstraintSet,\n+    facts::AllFacts,\n+    region_infer::values::{\n+        LivenessValues, PlaceholderIndex, PlaceholderIndices, RegionValueElements,\n+    },\n+    region_infer::{ClosureRegionRequirementsExt, TypeTest},\n+    type_check::free_region_relations::{\n+        CreateResult, UniversalRegionRelations,\n+    },\n+    universal_regions::{DefiningTy, UniversalRegions},\n+    nll::ToRegionVid,\n+    renumber,\n+};\n+\n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n-        $crate::borrow_check::nll::type_check::mirbug(\n+        $crate::borrow_check::type_check::mirbug(\n             $context.tcx(),\n             $context.last_span,\n             &format!(", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs"}, {"sha": "80da8a82c51edabef71385a63b488665f6650379", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,5 +1,3 @@\n-use crate::borrow_check::nll::constraints::OutlivesConstraint;\n-use crate::borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n use rustc::infer::nll_relate::{TypeRelating, TypeRelatingDelegate, NormalizationStrategy};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::mir::ConstraintCategory;\n@@ -8,6 +6,9 @@ use rustc::traits::DomainGoal;\n use rustc::ty::relate::TypeRelation;\n use rustc::ty::{self, Ty};\n \n+use crate::borrow_check::constraints::OutlivesConstraint;\n+use crate::borrow_check::type_check::{BorrowCheckContext, Locations};\n+\n /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n ///\n /// - \"Covariant\" `a <: b`", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs"}, {"sha": "c0353039b680cd54b1c9dfa6c6a131a82a0b4cdf", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -25,7 +25,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n use std::iter;\n \n-use super::ToRegionVid;\n+use crate::borrow_check::nll::ToRegionVid;\n \n #[derive(Debug)]\n pub struct UniversalRegions<'tcx> {", "previous_filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs"}, {"sha": "5433b7f5f74f7bff208b948e4c5e48fecbd0a3ee", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9469a6aec2f49fa1e2ae670649f293866932253/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=e9469a6aec2f49fa1e2ae670649f293866932253", "patch": "@@ -1,6 +1,3 @@\n-use crate::borrow_check::borrow_set::{BorrowSet, BorrowData};\n-use crate::borrow_check::place_ext::PlaceExt;\n-\n use rustc::mir::{self, Location, Place, PlaceBase, Body};\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::RegionVid;\n@@ -9,10 +6,11 @@ use rustc_index::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n \n+use crate::borrow_check::{\n+    ToRegionVid, BorrowSet, BorrowData, RegionInferenceContext, PlaceExt, PlaceConflictBias,\n+    places_conflict,\n+};\n use crate::dataflow::{BitDenotation, BottomValue, GenKillSet};\n-use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::borrow_check::places_conflict;\n \n use std::rc::Rc;\n \n@@ -221,13 +219,13 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n             // locations.\n             let definitely_conflicting_borrows = other_borrows_of_local\n                 .filter(|&&i| {\n-                    places_conflict::places_conflict(\n+                    places_conflict(\n                         self.tcx,\n                         self.param_env,\n                         self.body,\n                         &self.borrow_set.borrows[i].borrowed_place,\n                         place,\n-                        places_conflict::PlaceConflictBias::NoOverlap)\n+                        PlaceConflictBias::NoOverlap)\n                 });\n \n             trans.kill_all(definitely_conflicting_borrows);"}]}