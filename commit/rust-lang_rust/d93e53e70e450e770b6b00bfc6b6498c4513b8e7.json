{"sha": "d93e53e70e450e770b6b00bfc6b6498c4513b8e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5M2U1M2U3MGU0NTBlNzcwYjZiMDBiZmM2YjY0OThjNDUxM2I4ZTc=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-24T13:22:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:26:32Z"}, "message": "Format documentation for SmallIntMap.", "tree": {"sha": "6957ca85ca445db4f8bae3d48b2662a835f9b6b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6957ca85ca445db4f8bae3d48b2662a835f9b6b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d93e53e70e450e770b6b00bfc6b6498c4513b8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d93e53e70e450e770b6b00bfc6b6498c4513b8e7", "html_url": "https://github.com/rust-lang/rust/commit/d93e53e70e450e770b6b00bfc6b6498c4513b8e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d93e53e70e450e770b6b00bfc6b6498c4513b8e7/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3685945ec13ef463178787f1ea87a1a08152cd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/3685945ec13ef463178787f1ea87a1a08152cd54", "html_url": "https://github.com/rust-lang/rust/commit/3685945ec13ef463178787f1ea87a1a08152cd54"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "7c102e35b25012ae8e40c15e2494f80381a75395", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d93e53e70e450e770b6b00bfc6b6498c4513b8e7/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93e53e70e450e770b6b00bfc6b6498c4513b8e7/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=d93e53e70e450e770b6b00bfc6b6498c4513b8e7", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n- * A simple map based on a vector for small integer keys. Space requirements\n- * are O(highest integer key).\n- */\n+//! A simple map based on a vector for small integer keys. Space requirements\n+//! are O(highest integer key).\n \n #![allow(missing_doc)]\n \n@@ -32,12 +30,12 @@ pub struct SmallIntMap<T> {\n }\n \n impl<V> Collection for SmallIntMap<V> {\n-    /// Return the number of elements in the map\n+    /// Return the number of elements in the map.\n     fn len(&self) -> uint {\n         self.v.iter().filter(|elt| elt.is_some()).count()\n     }\n \n-    /// Return true if there are no elements in the map\n+    /// Return `true` if there are no elements in the map.\n     fn is_empty(&self) -> bool {\n         self.v.iter().all(|elt| elt.is_none())\n     }\n@@ -49,7 +47,7 @@ impl<V> Mutable for SmallIntMap<V> {\n }\n \n impl<V> Map<uint, V> for SmallIntMap<V> {\n-    /// Return a reference to the value corresponding to the key\n+    /// Return a reference to the value corresponding to the key.\n     fn find<'a>(&'a self, key: &uint) -> Option<&'a V> {\n         if *key < self.v.len() {\n             match *self.v.get(*key) {\n@@ -63,7 +61,7 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n }\n \n impl<V> MutableMap<uint, V> for SmallIntMap<V> {\n-    /// Return a mutable reference to the value corresponding to the key\n+    /// Return a mutable reference to the value corresponding to the key.\n     fn find_mut<'a>(&'a mut self, key: &uint) -> Option<&'a mut V> {\n         if *key < self.v.len() {\n             match *self.v.get_mut(*key) {\n@@ -76,7 +74,7 @@ impl<V> MutableMap<uint, V> for SmallIntMap<V> {\n     }\n \n     /// Insert a key-value pair into the map. An existing value for a\n-    /// key is replaced by the new value. Return true if the key did\n+    /// key is replaced by the new value. Return `true` if the key did\n     /// not already exist in the map.\n     fn insert(&mut self, key: uint, value: V) -> bool {\n         let exists = self.contains_key(&key);\n@@ -88,14 +86,14 @@ impl<V> MutableMap<uint, V> for SmallIntMap<V> {\n         !exists\n     }\n \n-    /// Remove a key-value pair from the map. Return true if the key\n-    /// was present in the map, otherwise false.\n+    /// Remove a key-value pair from the map. Return `true` if the key\n+    /// was present in the map, otherwise `false`.\n     fn remove(&mut self, key: &uint) -> bool {\n         self.pop(key).is_some()\n     }\n \n     /// Insert a key-value pair from the map. If the key already had a value\n-    /// present in the map, that value is returned. Otherwise None is returned.\n+    /// present in the map, that value is returned. Otherwise `None` is returned.\n     fn swap(&mut self, key: uint, value: V) -> Option<V> {\n         match self.find_mut(&key) {\n             Some(loc) => { return Some(replace(loc, value)); }\n@@ -121,10 +119,10 @@ impl<V> Default for SmallIntMap<V> {\n }\n \n impl<V> SmallIntMap<V> {\n-    /// Create an empty SmallIntMap\n+    /// Create an empty SmallIntMap.\n     pub fn new() -> SmallIntMap<V> { SmallIntMap{v: vec!()} }\n \n-    /// Create an empty SmallIntMap with capacity `capacity`\n+    /// Create an empty SmallIntMap with capacity `capacity`.\n     pub fn with_capacity(capacity: uint) -> SmallIntMap<V> {\n         SmallIntMap { v: Vec::with_capacity(capacity) }\n     }\n@@ -134,7 +132,7 @@ impl<V> SmallIntMap<V> {\n     }\n \n     /// An iterator visiting all key-value pairs in ascending order by the keys.\n-    /// Iterator element type is (uint, &'r V)\n+    /// Iterator element type is `(uint, &'r V)`.\n     pub fn iter<'r>(&'r self) -> Entries<'r, V> {\n         Entries {\n             front: 0,\n@@ -145,7 +143,7 @@ impl<V> SmallIntMap<V> {\n \n     /// An iterator visiting all key-value pairs in ascending order by the keys,\n     /// with mutable references to the values\n-    /// Iterator element type is (uint, &'r mut V)\n+    /// Iterator element type is `(uint, &'r mut V)`.\n     pub fn mut_iter<'r>(&'r mut self) -> MutEntries<'r, V> {\n         MutEntries {\n             front: 0,\n@@ -154,7 +152,7 @@ impl<V> SmallIntMap<V> {\n         }\n     }\n \n-    /// Empties the hash map, moving all values into the specified closure\n+    /// Empties the hash map, moving all values into the specified closure.\n     pub fn move_iter(&mut self)\n         -> FilterMap<(uint, Option<V>), (uint, V),\n                 Enumerate<vec::MoveItems<Option<V>>>>"}]}