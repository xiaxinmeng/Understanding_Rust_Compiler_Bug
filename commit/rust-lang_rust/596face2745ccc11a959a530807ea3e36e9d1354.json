{"sha": "596face2745ccc11a959a530807ea3e36e9d1354", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NmZhY2UyNzQ1Y2NjMTFhOTU5YTUzMDgwN2VhM2UzNmU5ZDEzNTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-04T22:15:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-04T22:19:48Z"}, "message": "Parse (and generally ignore) constraints and constrained types.", "tree": {"sha": "3f448581a2d193a759e7c07b1245dab6fbf655f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f448581a2d193a759e7c07b1245dab6fbf655f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/596face2745ccc11a959a530807ea3e36e9d1354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/596face2745ccc11a959a530807ea3e36e9d1354", "html_url": "https://github.com/rust-lang/rust/commit/596face2745ccc11a959a530807ea3e36e9d1354", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/596face2745ccc11a959a530807ea3e36e9d1354/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c0cefd32bc1af5e91857511187760010aaffc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c0cefd32bc1af5e91857511187760010aaffc7", "html_url": "https://github.com/rust-lang/rust/commit/95c0cefd32bc1af5e91857511187760010aaffc7"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "a8bf4b00a0a049d3a0d6cffc8df194da1480cd12", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/596face2745ccc11a959a530807ea3e36e9d1354/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596face2745ccc11a959a530807ea3e36e9d1354/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=596face2745ccc11a959a530807ea3e36e9d1354", "patch": "@@ -231,8 +231,17 @@ tag ty_ {\n     ty_path(path, option.t[def]);\n     ty_mutable(@ty);\n     ty_type;\n+    ty_constr(@ty, vec[@constr]);\n }\n \n+tag constr_arg_ {\n+    carg_base;\n+    carg_ident(ident);\n+}\n+type constr_arg = spanned[constr_arg_];\n+type constr_ = rec(path path, vec[@constr_arg] args);\n+type constr = spanned[constr_];\n+\n type arg = rec(mode mode, @ty ty, ident ident, def_id id);\n type fn_decl = rec(effect effect,\n                    vec[arg] inputs,"}, {"sha": "934764e6d57095b2ad7b84a6a519548e3a31600d", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/596face2745ccc11a959a530807ea3e36e9d1354/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596face2745ccc11a959a530807ea3e36e9d1354/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=596face2745ccc11a959a530807ea3e36e9d1354", "patch": "@@ -199,6 +199,10 @@ impure fn parse_ty_fn(ast.proto proto, parser p,\n     auto inputs = parse_seq[rec(ast.mode mode, @ast.ty ty)](token.LPAREN,\n         token.RPAREN, some(token.COMMA), f, p);\n \n+    // FIXME: dropping constrs on the floor at the moment.\n+    // pick them up when they're used by typestate pass.\n+    parse_constrs(p);\n+\n     let @ast.ty output;\n     if (p.peek() == token.RARROW) {\n         p.bump();\n@@ -254,6 +258,62 @@ impure fn parse_ty_field(parser p) -> ast.ty_field {\n     ret rec(ident=id, ty=ty);\n }\n \n+impure fn parse_constr_arg(parser p) -> @ast.constr_arg {\n+    auto lo = p.get_span();\n+    auto carg = ast.carg_base;\n+    if (p.peek() == token.BINOP(token.STAR)) {\n+        p.bump();\n+    } else {\n+        carg = ast.carg_ident(parse_ident(p));\n+    }\n+    ret @spanned(lo, lo, carg);\n+}\n+\n+impure fn parse_ty_constr(parser p) -> @ast.constr {\n+    auto lo = p.get_span();\n+    auto path = parse_path(p, GREEDY);\n+    auto pf = parse_constr_arg;\n+    auto args = parse_seq[@ast.constr_arg](token.LPAREN,\n+                                         token.RPAREN,\n+                                         some(token.COMMA), pf, p);\n+    auto hi = args.span;\n+    ret @spanned(lo, hi, rec(path=path, args=args.node));\n+}\n+\n+impure fn parse_constrs(parser p) -> common.spanned[vec[@ast.constr]] {\n+    auto lo = p.get_span();\n+    auto hi = lo;\n+    let vec[@ast.constr] constrs = vec();\n+    if (p.peek() == token.COLON) {\n+        p.bump();\n+        let bool more = true;\n+        while (more) {\n+            alt (p.peek()) {\n+                case (token.IDENT(_)) {\n+                    auto constr = parse_ty_constr(p);\n+                    hi = constr.span;\n+                    append[@ast.constr](constrs, constr);\n+                    if (p.peek() == token.COMMA) {\n+                        p.bump();\n+                        more = false;\n+                    }\n+                }\n+                case (_) { more = false; }\n+            }\n+        }\n+    }\n+   ret spanned(lo, hi, constrs);\n+}\n+\n+impure fn parse_ty_constrs(@ast.ty t, parser p) -> @ast.ty {\n+   if (p.peek() == token.COLON) {\n+       auto constrs = parse_constrs(p);\n+       ret @spanned(t.span, constrs.span,\n+                    ast.ty_constr(t, constrs.node));\n+   }\n+   ret t;\n+}\n+\n impure fn parse_ty(parser p) -> @ast.ty {\n     auto lo = p.get_span();\n     auto hi = lo;\n@@ -368,7 +428,8 @@ impure fn parse_ty(parser p) -> @ast.ty {\n             fail;\n         }\n     }\n-    ret @spanned(lo, hi, t);\n+\n+    ret parse_ty_constrs(@spanned(lo, hi, t), p);\n }\n \n impure fn parse_arg(parser p) -> ast.arg {\n@@ -1676,6 +1737,11 @@ impure fn parse_fn_decl(parser p, ast.effect eff) -> ast.fn_decl {\n          pf, p);\n \n     let @ast.ty output;\n+\n+    // FIXME: dropping constrs on the floor at the moment.\n+    // pick them up when they're used by typestate pass.\n+    parse_constrs(p);\n+\n     if (p.peek() == token.RARROW) {\n         p.bump();\n         output = parse_ty(p);"}]}