{"sha": "730856442387c9804581eae5927a5667171022ca", "node_id": "C_kwDOAAsO6NoAKDczMDg1NjQ0MjM4N2M5ODA0NTgxZWFlNTkyN2E1NjY3MTcxMDIyY2E", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-24T20:37:11Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:05:53Z"}, "message": "Add a test for the `for_loop_over_fallibles` lint", "tree": {"sha": "7fcf474604c9f2dc48c06a33fda8d9b2825aaf48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcf474604c9f2dc48c06a33fda8d9b2825aaf48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730856442387c9804581eae5927a5667171022ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730856442387c9804581eae5927a5667171022ca", "html_url": "https://github.com/rust-lang/rust/commit/730856442387c9804581eae5927a5667171022ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730856442387c9804581eae5927a5667171022ca/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd842ffc3df5485fe51d2ec8295e96861c524602", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd842ffc3df5485fe51d2ec8295e96861c524602", "html_url": "https://github.com/rust-lang/rust/commit/dd842ffc3df5485fe51d2ec8295e96861c524602"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "43d71c2e808a91d5c261aba452ad9808671f735f", "filename": "src/test/ui/lint/for_loop_over_fallibles.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/730856442387c9804581eae5927a5667171022ca/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730856442387c9804581eae5927a5667171022ca/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.rs?ref=730856442387c9804581eae5927a5667171022ca", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+fn main() {\n+    // Common\n+    for _ in Some(1) {}\n+    //~^ WARN for loop over an `Option`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider using `if let` to clear intent\n+    for _ in Ok::<_, ()>(1) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider using `if let` to clear intent\n+\n+    // `Iterator::next` specific\n+    for _ in [0; 0].iter().next() {}\n+    //~^ WARN for loop over an `Option`. This is more readably written as an `if let` statement\n+    //~| HELP to iterate over `[0; 0].iter()` remove the call to `next`\n+    //~| HELP consider using `if let` to clear intent\n+\n+    // `Result<impl Iterator, _>`, but function doesn't return `Result`\n+    for _ in Ok::<_, ()>([0; 0].iter()) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider using `if let` to clear intent\n+}\n+\n+fn _returns_result() -> Result<(), ()> {\n+    // `Result<impl Iterator, _>`\n+    for _ in Ok::<_, ()>([0; 0].iter()) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider unwrapping the `Result` with `?` to iterate over its contents\n+    //~| HELP consider using `if let` to clear intent\n+\n+    // `Result<impl IntoIterator>`\n+    for _ in Ok::<_, ()>([0; 0]) {}\n+    //~^ WARN for loop over a `Result`. This is more readably written as an `if let` statement\n+    //~| HELP to check pattern in a loop use `while let`\n+    //~| HELP consider unwrapping the `Result` with `?` to iterate over its contents\n+    //~| HELP consider using `if let` to clear intent\n+\n+    Ok(())\n+}"}, {"sha": "52eac945d857108484d818c7615bc46ed1786c7c", "filename": "src/test/ui/lint/for_loop_over_fallibles.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/730856442387c9804581eae5927a5667171022ca/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/730856442387c9804581eae5927a5667171022ca/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffor_loop_over_fallibles.stderr?ref=730856442387c9804581eae5927a5667171022ca", "patch": "@@ -0,0 +1,102 @@\n+warning: for loop over an `Option`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:5:14\n+   |\n+LL |     for _ in Some(1) {}\n+   |              ^^^^^^^\n+   |\n+   = note: `#[warn(for_loop_over_fallibles)]` on by default\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Some(_) = Some(1) {}\n+   |     ~~~~~~~~~~~~~~~ ~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Some(_) = Some(1) {}\n+   |     ~~~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:9:14\n+   |\n+LL |     for _ in Ok::<_, ()>(1) {}\n+   |              ^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>(1) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>(1) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: for loop over an `Option`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:15:14\n+   |\n+LL |     for _ in [0; 0].iter().next() {}\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to iterate over `[0; 0].iter()` remove the call to `next`\n+   |\n+LL -     for _ in [0; 0].iter().next() {}\n+LL +     for _ in [0; 0].iter() {}\n+   |\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Some(_) = [0; 0].iter().next() {}\n+   |     ~~~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:21:14\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0].iter()) {}\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:29:14\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0].iter()) {}\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider unwrapping the `Result` with `?` to iterate over its contents\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0].iter())? {}\n+   |                                        +\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>([0; 0].iter()) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: for loop over a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loop_over_fallibles.rs:36:14\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0]) {}\n+   |              ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to check pattern in a loop use `while let`\n+   |\n+LL |     while let Ok(_) = Ok::<_, ()>([0; 0]) {}\n+   |     ~~~~~~~~~~~~~ ~~~\n+help: consider unwrapping the `Result` with `?` to iterate over its contents\n+   |\n+LL |     for _ in Ok::<_, ()>([0; 0])? {}\n+   |                                 +\n+help: consider using `if let` to clear intent\n+   |\n+LL |     if let Ok(_) = Ok::<_, ()>([0; 0]) {}\n+   |     ~~~~~~~~~~ ~~~\n+\n+warning: 6 warnings emitted\n+"}]}