{"sha": "6afaffb9c2a9e84858e552286858584bd328413e", "node_id": "C_kwDOAAsO6NoAKDZhZmFmZmI5YzJhOWU4NDg1OGU1NTIyODY4NTg1ODRiZDMyODQxM2U", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-05-30T20:35:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-30T20:35:51Z"}, "message": "Check for `can_have_side_effects()` and `in_external_macro()` inside `suggest_missing_semicolon()`", "tree": {"sha": "21bb3390a24bdc93a287d439c49a5e39eddc8e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21bb3390a24bdc93a287d439c49a5e39eddc8e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afaffb9c2a9e84858e552286858584bd328413e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afaffb9c2a9e84858e552286858584bd328413e", "html_url": "https://github.com/rust-lang/rust/commit/6afaffb9c2a9e84858e552286858584bd328413e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afaffb9c2a9e84858e552286858584bd328413e/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c", "html_url": "https://github.com/rust-lang/rust/commit/bf0193d5801c7155f4fb6d3bd546a2cdd762cc3c"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "d6a8659d54b58dd0a52f2531a5853682c84f6eb2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6afaffb9c2a9e84858e552286858584bd328413e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afaffb9c2a9e84858e552286858584bd328413e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=6afaffb9c2a9e84858e552286858584bd328413e", "patch": "@@ -1579,8 +1579,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let Some(expr) = expression\n             && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, _, body_id, ..), .. }) = parent\n             && !matches!(fcx.tcx.hir().get(body_id.hir_id), hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Block(..), .. }))\n-            && expr.can_have_side_effects()\n-            && !in_external_macro(fcx.tcx.sess, expr.span)\n         {\n             fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n         }"}, {"sha": "76add2fb9c2859588531f53b16ef61706007fa43", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6afaffb9c2a9e84858e552286858584bd328413e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afaffb9c2a9e84858e552286858584bd328413e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=6afaffb9c2a9e84858e552286858584bd328413e", "patch": "@@ -46,12 +46,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        // If the expression is from an external macro, then do not suggest\n-        // adding a semicolon, because there's nowhere to put it.\n-        // See issue #81943.\n-        if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, expr.span) {\n-            self.suggest_missing_semicolon(err, expr, expected, false);\n-        }\n+        self.suggest_missing_semicolon(err, expr, expected, false);\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n@@ -493,7 +488,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..)\n-                    if expression.can_have_side_effects() =>\n+                    if expression.can_have_side_effects()\n+                        // If the expression is from an external macro, then do not suggest\n+                        // adding a semicolon, because there's nowhere to put it.\n+                        // See issue #81943.\n+                        && !in_external_macro(self.tcx.sess, expression.span) =>\n                 {\n                     if needs_block {\n                         err.multipart_suggestion("}]}