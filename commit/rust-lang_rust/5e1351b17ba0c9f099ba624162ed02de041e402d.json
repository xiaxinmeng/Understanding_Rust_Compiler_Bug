{"sha": "5e1351b17ba0c9f099ba624162ed02de041e402d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTM1MWIxN2JhMGM5ZjA5OWJhNjI0MTYyZWQwMmRlMDQxZTQwMmQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-22T13:02:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-22T13:02:56Z"}, "message": "Rollup merge of #41077 - petrochenkov:boundparen, r=nikomatsakis\n\nsyntax: Support parentheses around trait bounds\n\nAn implementation for https://github.com/rust-lang/rust/issues/39318#issuecomment-290956826\n\nr? @nikomatsakis", "tree": {"sha": "48cd92c6eb743482b11022521dc7968e2ac20c98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48cd92c6eb743482b11022521dc7968e2ac20c98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1351b17ba0c9f099ba624162ed02de041e402d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1351b17ba0c9f099ba624162ed02de041e402d", "html_url": "https://github.com/rust-lang/rust/commit/5e1351b17ba0c9f099ba624162ed02de041e402d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1351b17ba0c9f099ba624162ed02de041e402d/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff13b7c91813eb178c98a7abc661acaf5c41dc31", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff13b7c91813eb178c98a7abc661acaf5c41dc31", "html_url": "https://github.com/rust-lang/rust/commit/ff13b7c91813eb178c98a7abc661acaf5c41dc31"}, {"sha": "8838cd10f2374ed51c4b219c1f070d0c29af3b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/8838cd10f2374ed51c4b219c1f070d0c29af3b86", "html_url": "https://github.com/rust-lang/rust/commit/8838cd10f2374ed51c4b219c1f070d0c29af3b86"}], "stats": {"total": 178, "additions": 139, "deletions": 39}, "files": [{"sha": "12daa24e857fcbfa62a4f292c1aab804936a57d9", "filename": "src/doc/grammar.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=5e1351b17ba0c9f099ba624162ed02de041e402d", "patch": "@@ -781,10 +781,11 @@ never_type : \"!\" ;\n ### Type parameter bounds\n \n ```antlr\n+bound-list := bound | bound '+' bound-list '+' ?\n bound := ty_bound | lt_bound\n lt_bound := lifetime\n-ty_bound := [?] [ for<lt_param_defs> ] simple_path\n-bound-list := bound | bound '+' bound-list '+' ?\n+ty_bound := ty_bound_noparen | (ty_bound_noparen)\n+ty_bound_noparen := [?] [ for<lt_param_defs> ] simple_path\n ```\n \n ### Self types"}, {"sha": "1baf0d1b54ce1f7530dd6ab9736134be4661c80d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5e1351b17ba0c9f099ba624162ed02de041e402d", "patch": "@@ -152,6 +152,7 @@ fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n enum PrevTokenKind {\n     DocComment,\n     Comma,\n+    Plus,\n     Interpolated,\n     Eof,\n     Other,\n@@ -1061,6 +1062,7 @@ impl<'a> Parser<'a> {\n         self.prev_token_kind = match self.token {\n             token::DocComment(..) => PrevTokenKind::DocComment,\n             token::Comma => PrevTokenKind::Comma,\n+            token::BinOp(token::Plus) => PrevTokenKind::Plus,\n             token::Interpolated(..) => PrevTokenKind::Interpolated,\n             token::Eof => PrevTokenKind::Eof,\n             _ => PrevTokenKind::Other,\n@@ -1354,20 +1356,26 @@ impl<'a> Parser<'a> {\n                     break;\n                 }\n             }\n+            let trailing_plus = self.prev_token_kind == PrevTokenKind::Plus;\n             self.expect(&token::CloseDelim(token::Paren))?;\n \n             if ts.len() == 1 && !last_comma {\n                 let ty = ts.into_iter().nth(0).unwrap().unwrap();\n+                let maybe_bounds = allow_plus && self.token == token::BinOp(token::Plus);\n                 match ty.node {\n-                    // Accept `(Trait1) + Trait2 + 'a` for backward compatibility (#39318).\n-                    TyKind::Path(None, ref path)\n-                            if allow_plus && self.token == token::BinOp(token::Plus) => {\n-                        self.bump(); // `+`\n-                        let pt = PolyTraitRef::new(Vec::new(), path.clone(), lo.to(self.prev_span));\n-                        let mut bounds = vec![TraitTyParamBound(pt, TraitBoundModifier::None)];\n-                        bounds.append(&mut self.parse_ty_param_bounds()?);\n-                        TyKind::TraitObject(bounds)\n+                    // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n+                    TyKind::Path(None, ref path) if maybe_bounds => {\n+                        self.parse_remaining_bounds(Vec::new(), path.clone(), lo, true)?\n                     }\n+                    TyKind::TraitObject(ref bounds)\n+                            if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n+                        let path = match bounds[0] {\n+                            TraitTyParamBound(ref pt, ..) => pt.trait_ref.path.clone(),\n+                            _ => self.bug(\"unexpected lifetime bound\"),\n+                        };\n+                        self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n+                    }\n+                    // `(TYPE)`\n                     _ => TyKind::Paren(P(ty))\n                 }\n             } else {\n@@ -1418,11 +1426,8 @@ impl<'a> Parser<'a> {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n                 //   `Type`\n                 //   `Trait1 + Trait2 + 'a`\n-                if allow_plus && self.eat(&token::BinOp(token::Plus)) {\n-                    let poly_trait = PolyTraitRef::new(Vec::new(), path, lo.to(self.prev_span));\n-                    let mut bounds = vec![TraitTyParamBound(poly_trait, TraitBoundModifier::None)];\n-                    bounds.append(&mut self.parse_ty_param_bounds()?);\n-                    TyKind::TraitObject(bounds)\n+                if allow_plus && self.check(&token::BinOp(token::Plus)) {\n+                    self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n                 } else {\n                     TyKind::Path(None, path)\n                 }\n@@ -1440,12 +1445,8 @@ impl<'a> Parser<'a> {\n                 self.parse_ty_bare_fn(lifetime_defs)?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n-                let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n-                let mut bounds = vec![TraitTyParamBound(poly_trait, TraitBoundModifier::None)];\n-                if allow_plus && self.eat(&token::BinOp(token::Plus)) {\n-                    bounds.append(&mut self.parse_ty_param_bounds()?)\n-                }\n-                TyKind::TraitObject(bounds)\n+                let parse_plus = allow_plus && self.check(&token::BinOp(token::Plus));\n+                self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n             // FIXME: figure out priority of `+` in `impl Trait1 + Trait2` (#34511).\n@@ -1468,6 +1469,17 @@ impl<'a> Parser<'a> {\n         Ok(P(ty))\n     }\n \n+    fn parse_remaining_bounds(&mut self, lifetime_defs: Vec<LifetimeDef>, path: ast::Path,\n+                              lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n+        let poly_trait_ref = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n+        let mut bounds = vec![TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)];\n+        if parse_plus {\n+            self.bump(); // `+`\n+            bounds.append(&mut self.parse_ty_param_bounds()?);\n+        }\n+        Ok(TyKind::TraitObject(bounds))\n+    }\n+\n     fn maybe_recover_from_bad_type_plus(&mut self, allow_plus: bool, ty: &Ty) -> PResult<'a, ()> {\n         // Do not add `+` to expected tokens.\n         if !allow_plus || self.token != token::BinOp(token::Plus) {\n@@ -4070,28 +4082,43 @@ impl<'a> Parser<'a> {\n     // Parse bounds of a type parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     // BOUND = TY_BOUND | LT_BOUND\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n-    // TY_BOUND = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n+    // TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n+    // TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n     fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, TyParamBounds> {\n         let mut bounds = Vec::new();\n         loop {\n-            let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n-            if self.check_lifetime() {\n-                if let Some(question_span) = question {\n-                    self.span_err(question_span,\n-                                  \"`?` may only modify trait bounds, not lifetime bounds\");\n-                }\n-                bounds.push(RegionTyParamBound(self.expect_lifetime()));\n-            } else if self.check_keyword(keywords::For) || self.check_path() {\n-                let lo = self.span;\n-                let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-                let path = self.parse_path(PathStyle::Type)?;\n-                let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n-                let modifier = if question.is_some() {\n-                    TraitBoundModifier::Maybe\n+            let is_bound_start = self.check_path() || self.check_lifetime() ||\n+                                 self.check(&token::Question) ||\n+                                 self.check_keyword(keywords::For) ||\n+                                 self.check(&token::OpenDelim(token::Paren));\n+            if is_bound_start {\n+                let has_parens = self.eat(&token::OpenDelim(token::Paren));\n+                let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n+                if self.token.is_lifetime() {\n+                    if let Some(question_span) = question {\n+                        self.span_err(question_span,\n+                                      \"`?` may only modify trait bounds, not lifetime bounds\");\n+                    }\n+                    bounds.push(RegionTyParamBound(self.expect_lifetime()));\n                 } else {\n-                    TraitBoundModifier::None\n-                };\n-                bounds.push(TraitTyParamBound(poly_trait, modifier));\n+                    let lo = self.span;\n+                    let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+                    let path = self.parse_path(PathStyle::Type)?;\n+                    let poly_trait = PolyTraitRef::new(lifetime_defs, path, lo.to(self.prev_span));\n+                    let modifier = if question.is_some() {\n+                        TraitBoundModifier::Maybe\n+                    } else {\n+                        TraitBoundModifier::None\n+                    };\n+                    bounds.push(TraitTyParamBound(poly_trait, modifier));\n+                }\n+                if has_parens {\n+                    self.expect(&token::CloseDelim(token::Paren))?;\n+                    if let Some(&RegionTyParamBound(..)) = bounds.last() {\n+                        self.span_err(self.prev_span,\n+                                      \"parenthesized lifetime bounds are not supported\");\n+                    }\n+                }\n             } else {\n                 break\n             }"}, {"sha": "9dde5268c0878b0f0caa475b9bdc2635cc38b097", "filename": "src/test/parse-fail/bound-single-question-mark.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Fbound-single-question-mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Fbound-single-question-mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbound-single-question-mark.rs?ref=5e1351b17ba0c9f099ba624162ed02de041e402d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn f<T: ?>() {} //~ ERROR expected identifier, found `>`"}, {"sha": "a44c0c3f32fef0b46b8d3f4e8b6f697cb9abd6ca", "filename": "src/test/parse-fail/trait-object-bad-parens.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs?ref=5e1351b17ba0c9f099ba624162ed02de041e402d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n+fn main() {\n+    let _: Box<((Copy)) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `((Copy))`\n+    let _: Box<(Copy + Copy) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy + Copy)`\n+    let _: Box<(Copy +) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy)`\n+}"}, {"sha": "6be62d966eb9490232aaeacb5c71713db222cdba", "filename": "src/test/parse-fail/trait-object-lifetime-parens.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-lifetime-parens.rs?ref=5e1351b17ba0c9f099ba624162ed02de041e402d", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n+fn f<T: Copy + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not supported\n+\n+fn main() {\n+    let _: Box<Copy + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n+    let _: Box<('a) + Copy>; //~ ERROR expected type, found `'a`\n+}"}, {"sha": "dc44f4f3fb1353db6bd3acad024a71655ffc528c", "filename": "src/test/parse-fail/trait-object-trait-parens.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1351b17ba0c9f099ba624162ed02de041e402d/src%2Ftest%2Fparse-fail%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-trait-parens.rs?ref=5e1351b17ba0c9f099ba624162ed02de041e402d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn f<T: (Copy) + (?Sized) + (for<'a> Trait<'a>)>() {}\n+\n+fn main() {\n+    let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n+    let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Copy)>;\n+    let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n+}\n+\n+FAIL //~ ERROR"}]}