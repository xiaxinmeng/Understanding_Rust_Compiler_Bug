{"sha": "1a86d80c1085c7415f97c8fb446f39f2ed80c6b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODZkODBjMTA4NWM3NDE1Zjk3YzhmYjQ0NmYzOWYyZWQ4MGM2YjQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-02-16T18:34:51Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-02-19T20:34:14Z"}, "message": "Implement Sugg::hir_with_macro_callsite", "tree": {"sha": "d790d0766063766a07d0661a85852f9693458e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d790d0766063766a07d0661a85852f9693458e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a86d80c1085c7415f97c8fb446f39f2ed80c6b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlxsaEYACgkQaTCGhp1Q\nZjcCiQ/7BWOSKg1OBIGNQTtYhl/LMuZcOOjApNEWdchB9aMgZrGqoP/AqKMC6QSq\nxML2A8j727MADOCW67T5uxJNvYIEotJtFVhqCAKslkcIkKERkv5RPx7/afs6R4by\n9nL516E/N6UThwASqukoZ6XaLhlyIAJPQwWEzIY9Rh7msT7KoMnLuBdBX+2pnXJ/\nP8C+7ksSezl/al6z8mTgBMzxLHXSbKKkCDIyuHR5v66olO2GB7QPuHxZIjKLmEtB\nYs8zCjSuH9RrLosj7OS+7AngyHp5HoZ0x7WreYTvPe6Vi4ev9BsGYxGm62omauTS\n5TxVwg7yDL03XS6CRyMD7QBAhid7lGJ6CeLDR8MCC66QWOHqeUTu3lZ845jNtzbk\nSMpe2dsw3gNSX3kshcrFZFrS67pXOVyROKULjuOVgvMOTgMXF1OAgE451awGat+h\nfW5sgARw/ERiRviq54ApKFB+M3AwgKvNKrvWbMZzc2EF8RkOK8ETgztPN0fwS3uP\n5z20tnwelaRT2030AFf/bAYhh2eubwS6RyhDuVhD/jKcFW9p0jjQuFwClizt9/jC\nxfq7C5tuvEyUr7V6/G4VAnK4cq3eqTX04kn3t+HG3Ej2wKpvkO5/KgLu+/VWru7L\n8kP6PghKFuP71n4UsNCOlT1iw+8//Ee8iA/0cGIbkj/blN8FYkY=\n=0k/f\n-----END PGP SIGNATURE-----", "payload": "tree d790d0766063766a07d0661a85852f9693458e29\nparent 075c212849ad2207c0b0ccbd0ec6cc5b1f392275\nauthor flip1995 <hello@philkrones.com> 1550342091 +0100\ncommitter flip1995 <hello@philkrones.com> 1550608454 +0100\n\nImplement Sugg::hir_with_macro_callsite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a86d80c1085c7415f97c8fb446f39f2ed80c6b4", "html_url": "https://github.com/rust-lang/rust/commit/1a86d80c1085c7415f97c8fb446f39f2ed80c6b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a86d80c1085c7415f97c8fb446f39f2ed80c6b4/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "url": "https://api.github.com/repos/rust-lang/rust/commits/075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "html_url": "https://github.com/rust-lang/rust/commit/075c212849ad2207c0b0ccbd0ec6cc5b1f392275"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "f9e7bf0c97121ca974ca956c0b28ce53f8304d34", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1a86d80c1085c7415f97c8fb446f39f2ed80c6b4/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a86d80c1085c7415f97c8fb446f39f2ed80c6b4/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=1a86d80c1085c7415f97c8fb446f39f2ed80c6b4", "patch": "@@ -1,7 +1,7 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::utils::{higher, in_macro, snippet, snippet_opt};\n+use crate::utils::{higher, in_macro, snippet, snippet_opt, snippet_with_macro_callsite};\n use matches::matches;\n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n@@ -46,38 +46,7 @@ impl<'a> Sugg<'a> {\n     pub fn hir_opt(cx: &LateContext<'_, '_>, expr: &hir::Expr) -> Option<Self> {\n         snippet_opt(cx, expr.span).map(|snippet| {\n             let snippet = Cow::Owned(snippet);\n-            match expr.node {\n-                hir::ExprKind::AddrOf(..)\n-                | hir::ExprKind::Box(..)\n-                | hir::ExprKind::Closure(.., _)\n-                | hir::ExprKind::If(..)\n-                | hir::ExprKind::Unary(..)\n-                | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n-                hir::ExprKind::Continue(..)\n-                | hir::ExprKind::Yield(..)\n-                | hir::ExprKind::Array(..)\n-                | hir::ExprKind::Block(..)\n-                | hir::ExprKind::Break(..)\n-                | hir::ExprKind::Call(..)\n-                | hir::ExprKind::Field(..)\n-                | hir::ExprKind::Index(..)\n-                | hir::ExprKind::InlineAsm(..)\n-                | hir::ExprKind::Lit(..)\n-                | hir::ExprKind::Loop(..)\n-                | hir::ExprKind::MethodCall(..)\n-                | hir::ExprKind::Path(..)\n-                | hir::ExprKind::Repeat(..)\n-                | hir::ExprKind::Ret(..)\n-                | hir::ExprKind::Struct(..)\n-                | hir::ExprKind::Tup(..)\n-                | hir::ExprKind::While(..)\n-                | hir::ExprKind::Err => Sugg::NonParen(snippet),\n-                hir::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n-                hir::ExprKind::AssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),\n-                hir::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(higher::binop(op.node)), snippet),\n-                hir::ExprKind::Cast(..) => Sugg::BinOp(AssocOp::As, snippet),\n-                hir::ExprKind::Type(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n-            }\n+            Self::hir_from_snippet(expr, snippet)\n         })\n     }\n \n@@ -111,6 +80,47 @@ impl<'a> Sugg<'a> {\n         })\n     }\n \n+    pub fn hir_with_macro_callsite(cx: &LateContext<'_, '_>, expr: &hir::Expr, default: &'a str) -> Self {\n+        let snippet = snippet_with_macro_callsite(cx, expr.span, default);\n+\n+        Self::hir_from_snippet(expr, snippet)\n+    }\n+\n+    fn hir_from_snippet(expr: &hir::Expr, snippet: Cow<'a, str>) -> Self {\n+        match expr.node {\n+            hir::ExprKind::AddrOf(..)\n+            | hir::ExprKind::Box(..)\n+            | hir::ExprKind::Closure(.., _)\n+            | hir::ExprKind::If(..)\n+            | hir::ExprKind::Unary(..)\n+            | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n+            hir::ExprKind::Continue(..)\n+            | hir::ExprKind::Yield(..)\n+            | hir::ExprKind::Array(..)\n+            | hir::ExprKind::Block(..)\n+            | hir::ExprKind::Break(..)\n+            | hir::ExprKind::Call(..)\n+            | hir::ExprKind::Field(..)\n+            | hir::ExprKind::Index(..)\n+            | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::Lit(..)\n+            | hir::ExprKind::Loop(..)\n+            | hir::ExprKind::MethodCall(..)\n+            | hir::ExprKind::Path(..)\n+            | hir::ExprKind::Repeat(..)\n+            | hir::ExprKind::Ret(..)\n+            | hir::ExprKind::Struct(..)\n+            | hir::ExprKind::Tup(..)\n+            | hir::ExprKind::While(..)\n+            | hir::ExprKind::Err => Sugg::NonParen(snippet),\n+            hir::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n+            hir::ExprKind::AssignOp(op, ..) => Sugg::BinOp(hirbinop2assignop(op), snippet),\n+            hir::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(higher::binop(op.node)), snippet),\n+            hir::ExprKind::Cast(..) => Sugg::BinOp(AssocOp::As, snippet),\n+            hir::ExprKind::Type(..) => Sugg::BinOp(AssocOp::Colon, snippet),\n+        }\n+    }\n+\n     /// Prepare a suggestion from an expression.\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n         use syntax::ast::RangeLimits;"}]}