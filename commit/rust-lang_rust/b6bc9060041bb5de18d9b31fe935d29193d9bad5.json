{"sha": "b6bc9060041bb5de18d9b31fe935d29193d9bad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YmM5MDYwMDQxYmI1ZGUxOGQ5YjMxZmU5MzVkMjkxOTNkOWJhZDU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-27T22:01:14Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-27T23:02:23Z"}, "message": "Remove separate encoding for a single nonzero-mapping byte\n\nIn practice, for the two data sets that still use the bitset encoding (uppercase\nand lowercase) this is not a significant win, so just drop it entirely. It costs\nus about 5 bytes, and the complexity is nontrivial.", "tree": {"sha": "eb7c0ffd0d7d08846276afc5c4c65d1c4c671df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb7c0ffd0d7d08846276afc5c4c65d1c4c671df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6bc9060041bb5de18d9b31fe935d29193d9bad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bc9060041bb5de18d9b31fe935d29193d9bad5", "html_url": "https://github.com/rust-lang/rust/commit/b6bc9060041bb5de18d9b31fe935d29193d9bad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6bc9060041bb5de18d9b31fe935d29193d9bad5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1ceece20e14e2a746c382b639f9288746e493c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1ceece20e14e2a746c382b639f9288746e493c", "html_url": "https://github.com/rust-lang/rust/commit/9c1ceece20e14e2a746c382b639f9288746e493c"}], "stats": {"total": 55, "additions": 9, "deletions": 46}, "files": [{"sha": "48caa21fb0aa143f51118a0dae139091411d9852", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6bc9060041bb5de18d9b31fe935d29193d9bad5/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6bc9060041bb5de18d9b31fe935d29193d9bad5/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=b6bc9060041bb5de18d9b31fe935d29193d9bad5", "patch": "@@ -10,20 +10,15 @@ fn bitset_search<\n >(\n     needle: u32,\n     chunk_idx_map: &[u8; N],\n-    last_chunk_idx: u16,\n     bitset_chunk_idx: &[[u8; CHUNK_SIZE]; N1],\n     bitset_canonical: &[u64; CANONICAL],\n     bitset_canonicalized: &[(u8, u8); CANONICALIZED],\n ) -> bool {\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    // The last entry of `chunk_idx_map` actually should be at `last_chunk_idx`,\n-    // so we need to remap it\n-    let chunk_idx = if chunk_map_idx < (chunk_idx_map.len() - 1) {\n-        chunk_idx_map[chunk_map_idx]\n-    } else if chunk_map_idx == last_chunk_idx as usize {\n-        chunk_idx_map[chunk_idx_map.len() - 1]\n+    let chunk_idx = if let Some(&v) = chunk_idx_map.get(chunk_map_idx) {\n+        v\n     } else {\n         return false;\n     };\n@@ -317,12 +312,12 @@ pub mod grapheme_extend {\n \n #[rustfmt::skip]\n pub mod lowercase {\n-    const BITSET_LAST_CHUNK_MAP: u16 = 122;\n-    static BITSET_CHUNKS_MAP: [u8; 119] = [\n+    static BITSET_CHUNKS_MAP: [u8; 123] = [\n         13, 16, 0, 0, 8, 0, 0, 11, 12, 9, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 3, 1, 0, 14, 0, 7, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 6,\n+        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0,\n+        0, 0, 6,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 18] = [\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n@@ -408,7 +403,6 @@ pub mod lowercase {\n         super::bitset_search(\n             c as u32,\n             &BITSET_CHUNKS_MAP,\n-            BITSET_LAST_CHUNK_MAP,\n             &BITSET_INDEX_CHUNKS,\n             &BITSET_CANONICAL,\n             &BITSET_MAPPING,\n@@ -449,13 +443,12 @@ pub mod n {\n \n #[rustfmt::skip]\n pub mod uppercase {\n-    const BITSET_LAST_CHUNK_MAP: u16 = 124;\n-    static BITSET_CHUNKS_MAP: [u8; 124] = [\n+    static BITSET_CHUNKS_MAP: [u8; 125] = [\n         12, 15, 5, 5, 0, 5, 5, 2, 4, 11, 5, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n         5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n         5, 5, 5, 6, 5, 13, 5, 10, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n         5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 5, 5,\n-        5, 5, 9, 3,\n+        5, 5, 9, 5, 3,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n         [41, 41, 5, 33, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 5, 0],\n@@ -529,7 +522,6 @@ pub mod uppercase {\n         super::bitset_search(\n             c as u32,\n             &BITSET_CHUNKS_MAP,\n-            BITSET_LAST_CHUNK_MAP,\n             &BITSET_INDEX_CHUNKS,\n             &BITSET_CANONICAL,\n             &BITSET_MAPPING,"}, {"sha": "39b47ce703f37b07f807eecd8f60dd3e8c4ac637", "filename": "src/tools/unicode-table-generator/src/range_search.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6bc9060041bb5de18d9b31fe935d29193d9bad5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6bc9060041bb5de18d9b31fe935d29193d9bad5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs?ref=b6bc9060041bb5de18d9b31fe935d29193d9bad5", "patch": "@@ -8,20 +8,15 @@ fn bitset_search<\n >(\n     needle: u32,\n     chunk_idx_map: &[u8; N],\n-    last_chunk_idx: u16,\n     bitset_chunk_idx: &[[u8; CHUNK_SIZE]; N1],\n     bitset_canonical: &[u64; CANONICAL],\n     bitset_canonicalized: &[(u8, u8); CANONICALIZED],\n ) -> bool {\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    // The last entry of `chunk_idx_map` actually should be at `last_chunk_idx`,\n-    // so we need to remap it\n-    let chunk_idx = if chunk_map_idx < (chunk_idx_map.len() - 1) {\n-        chunk_idx_map[chunk_map_idx]\n-    } else if chunk_map_idx == last_chunk_idx as usize {\n-        chunk_idx_map[chunk_idx_map.len() - 1]\n+    let chunk_idx = if let Some(&v) = chunk_idx_map.get(chunk_map_idx) {\n+        v\n     } else {\n         return false;\n     };"}, {"sha": "dd0746cf695a6f0de419fc07dedc5455adb94e2c", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b6bc9060041bb5de18d9b31fe935d29193d9bad5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6bc9060041bb5de18d9b31fe935d29193d9bad5/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=b6bc9060041bb5de18d9b31fe935d29193d9bad5", "patch": "@@ -139,7 +139,6 @@ impl RawEmitter {\n         writeln!(&mut self.file, \"    super::bitset_search(\",).unwrap();\n         writeln!(&mut self.file, \"        c as u32,\").unwrap();\n         writeln!(&mut self.file, \"        &BITSET_CHUNKS_MAP,\").unwrap();\n-        writeln!(&mut self.file, \"        BITSET_LAST_CHUNK_MAP,\").unwrap();\n         writeln!(&mut self.file, \"        &BITSET_INDEX_CHUNKS,\").unwrap();\n         writeln!(&mut self.file, \"        &BITSET_CANONICAL,\").unwrap();\n         writeln!(&mut self.file, \"        &BITSET_MAPPING,\").unwrap();\n@@ -170,29 +169,6 @@ impl RawEmitter {\n             chunk_indices.push(chunk_map[chunk]);\n         }\n \n-        // If one of the chunks has all of the entries point to the bitset\n-        // word filled with zeros, then pop those off the end -- we know they\n-        // are useless.\n-        let zero_chunk_idx = chunks.iter().position(|chunk| chunk.iter().all(|e| *e == zero_at));\n-        while zero_chunk_idx.is_some() && chunk_indices.last().cloned() == zero_chunk_idx {\n-            chunk_indices.pop();\n-        }\n-        // We do not count the LAST_CHUNK_MAP as adding bytes because it's a\n-        // small constant whose values are inlined directly into the instruction\n-        // stream.\n-        writeln!(\n-            &mut self.file,\n-            \"const BITSET_LAST_CHUNK_MAP: u16 = {};\",\n-            chunk_indices.len() - 1,\n-        )\n-        .unwrap();\n-        let nonzero = chunk_indices.pop().unwrap();\n-        // Try to pop again, now that we've recorded a non-zero pointing index\n-        // into the LAST_CHUNK_MAP.\n-        while zero_chunk_idx.is_some() && chunk_indices.last().cloned() == zero_chunk_idx {\n-            chunk_indices.pop();\n-        }\n-        chunk_indices.push(nonzero);\n         writeln!(\n             &mut self.file,\n             \"static BITSET_CHUNKS_MAP: [u8; {}] = [{}];\","}]}