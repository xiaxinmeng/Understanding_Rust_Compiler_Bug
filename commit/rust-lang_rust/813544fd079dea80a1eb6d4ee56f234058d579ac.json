{"sha": "813544fd079dea80a1eb6d4ee56f234058d579ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzU0NGZkMDc5ZGVhODBhMWViNmQ0ZWU1NmYyMzQwNThkNTc5YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-02T23:06:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-02T23:06:34Z"}, "message": "auto merge of #12658 : sfackler/rust/asm-expand, r=alexcrichton\n\nA couple of syntax extensions manually expanded expressions, but it\r\nwasn't done universally, most noticably inside of asm!().\r\n\r\nThere's also a bit of random cleanup.", "tree": {"sha": "eb2adc67ab5b701d85c411b35290f3c51abdac4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2adc67ab5b701d85c411b35290f3c51abdac4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/813544fd079dea80a1eb6d4ee56f234058d579ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/813544fd079dea80a1eb6d4ee56f234058d579ac", "html_url": "https://github.com/rust-lang/rust/commit/813544fd079dea80a1eb6d4ee56f234058d579ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/813544fd079dea80a1eb6d4ee56f234058d579ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51233c52199241f95679f961eda77da03943681b", "url": "https://api.github.com/repos/rust-lang/rust/commits/51233c52199241f95679f961eda77da03943681b", "html_url": "https://github.com/rust-lang/rust/commit/51233c52199241f95679f961eda77da03943681b"}, {"sha": "a0e54c77612faa9008f95a136ed1674dfcf494ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e54c77612faa9008f95a136ed1674dfcf494ef", "html_url": "https://github.com/rust-lang/rust/commit/a0e54c77612faa9008f95a136ed1674dfcf494ef"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "5cb09ec823221ab86026069e65a9897eb585229b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "patch": "@@ -405,11 +405,13 @@ impl<'a> ExtCtxt<'a> {\n     }\n }\n \n-/// Extract a string literal from `expr`, emitting `err_msg` if `expr`\n-/// is not a string literal. This does not stop compilation on error,\n-/// merely emits a non-fatal error and returns None.\n-pub fn expr_to_str(cx: &ExtCtxt, expr: @ast::Expr, err_msg: &str)\n+/// Extract a string literal from the macro expanded version of `expr`,\n+/// emitting `err_msg` if `expr` is not a string literal. This does not stop\n+/// compilation on error, merely emits a non-fatal error and returns None.\n+pub fn expr_to_str(cx: &mut ExtCtxt, expr: @ast::Expr, err_msg: &str)\n                    -> Option<(InternedString, ast::StrStyle)> {\n+    // we want to be able to handle e.g. concat(\"foo\", \"bar\")\n+    let expr = cx.expand_expr(expr);\n     match expr.node {\n         ast::ExprLit(l) => match l.node {\n             ast::LitStr(ref s, style) => return Some(((*s).clone(), style)),\n@@ -457,7 +459,7 @@ pub fn get_single_str_from_tts(cx: &ExtCtxt,\n \n /// Extract comma-separated expressions from `tts`. If there is a\n /// parsing error, emit a non-fatal error and return None.\n-pub fn get_exprs_from_tts(cx: &ExtCtxt,\n+pub fn get_exprs_from_tts(cx: &mut ExtCtxt,\n                           sp: Span,\n                           tts: &[ast::TokenTree]) -> Option<Vec<@ast::Expr> > {\n     let mut p = parse::new_parser_from_tts(cx.parse_sess(),\n@@ -471,7 +473,7 @@ pub fn get_exprs_from_tts(cx: &ExtCtxt,\n             cx.span_err(sp, \"expected token: `,`\");\n             return None;\n         }\n-        es.push(p.parse_expr());\n+        es.push(cx.expand_expr(p.parse_expr()));\n     }\n     Some(es)\n }\n@@ -482,9 +484,6 @@ pub fn get_exprs_from_tts(cx: &ExtCtxt,\n \n // This environment maps Names to SyntaxExtensions.\n \n-// Actually, the following implementation is parameterized\n-// by both key and value types.\n-\n //impl question: how to implement it? Initially, the\n // env will contain only macros, so it might be painful\n // to add an empty frame for every context. Let's just\n@@ -500,14 +499,6 @@ struct MapChainFrame {\n     map: HashMap<Name, SyntaxExtension>,\n }\n \n-#[unsafe_destructor]\n-impl Drop for MapChainFrame {\n-    fn drop(&mut self) {\n-        // make sure that syntax extension dtors run before we drop the libs\n-        self.map.clear();\n-    }\n-}\n-\n // Only generic to make it easy to test\n pub struct SyntaxEnv {\n     priv chain: Vec<MapChainFrame> ,"}, {"sha": "e638291ecfa3f792aa28b36363f2af9d39481e4a", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "patch": "@@ -25,7 +25,6 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n     };\n     let mut accumulator = ~\"\";\n     for e in es.move_iter() {\n-        let e = cx.expand_expr(e);\n         match e.node {\n             ast::ExprLit(lit) => {\n                 match lit.node {"}, {"sha": "b27ea3df21ec0f429622c15445da0ba10139f226", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "patch": "@@ -843,11 +843,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         fmtsp: sp,\n     };\n     cx.fmtsp = efmt.span;\n-    // Be sure to recursively expand macros just in case the format string uses\n-    // a macro to build the format expression.\n-    let expr = cx.ecx.expand_expr(efmt);\n     let fmt = match expr_to_str(cx.ecx,\n-                                expr,\n+                                efmt,\n                                 \"format argument must be a string literal.\") {\n         Some((fmt, _)) => fmt,\n         None => return MacResult::raw_dummy_expr(sp)"}, {"sha": "a7b8297487d0011db7d0fe3c7bd13438b7d5dd48", "filename": "src/test/run-pass-fulldeps/phase-syntax-link-does-resolve.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "previous_filename": "src/test/run-pass/phase-syntax-link-does-resolve.rs"}, {"sha": "96c98a0372051747e063b5f9b78349f7cd0579a7", "filename": "src/test/run-pass/asm-concat-src.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast #[feature] doesn't work with check-fast\n+#[feature(asm)];\n+\n+pub fn main() {\n+    unsafe { asm!(concat!(\"\", \"\")) };\n+}"}, {"sha": "2f6b87f26a729a70c0151096753d7afee0feb1c1", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "1c96cbd93142c280da318405d33b4a57f3036895", "filename": "src/test/run-pass/ext-expand-inner-exprs.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813544fd079dea80a1eb6d4ee56f234058d579ac/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs?ref=813544fd079dea80a1eb6d4ee56f234058d579ac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static FOO : &'static [u8] = bytes!(concat!(concat!(\"hel\", \"lo\"), \"world\"));\n+\n+pub fn main() {\n+    assert_eq!(FOO, \"helloworld\".as_bytes());\n+}"}]}