{"sha": "704934d080024a130b4e5b79cd220c842883ac61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDkzNGQwODAwMjRhMTMwYjRlNWI3OWNkMjIwYzg0Mjg4M2FjNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T22:18:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T22:18:16Z"}, "message": "Auto merge of #86006 - JohnTitor:rollup-97iuoi3, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #83653 (Remove unused code from `rustc_data_structures::sync`)\n - #84466 (rustdoc: Remove `PrimitiveType::{to_url_str, as_str}`)\n - #84880 (Make match in `register_res` easier to read)\n - #84942 (rustdoc: link to stable/beta docs consistently in documentation)\n - #85853 (Warn against boxed DST in `improper_ctypes_definitions` lint)\n - #85939 (Fix suggestion for removing &mut from &mut macro!().)\n - #85966 (wasm: Make simd types passed via indirection again)\n - #85979 (don't suggest unsized indirection in where-clauses)\n - #85983 (Update to semver 1.0.3)\n - #85988 (Note that `ninja = false` goes under `[llvm]`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "66beb2aae439227b03f79d195c7246d6d583f8be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66beb2aae439227b03f79d195c7246d6d583f8be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704934d080024a130b4e5b79cd220c842883ac61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704934d080024a130b4e5b79cd220c842883ac61", "html_url": "https://github.com/rust-lang/rust/commit/704934d080024a130b4e5b79cd220c842883ac61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704934d080024a130b4e5b79cd220c842883ac61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79419af0721c614d050f09b95f076da09d37b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79419af0721c614d050f09b95f076da09d37b0d", "html_url": "https://github.com/rust-lang/rust/commit/c79419af0721c614d050f09b95f076da09d37b0d"}, {"sha": "062e789a73e729ae6a05f724b0b06c357aaa2ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/062e789a73e729ae6a05f724b0b06c357aaa2ebd", "html_url": "https://github.com/rust-lang/rust/commit/062e789a73e729ae6a05f724b0b06c357aaa2ebd"}], "stats": {"total": 643, "additions": 360, "deletions": 283}, "files": [{"sha": "270297f73b63e94f6bd08411d56d1e9a916249df", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -294,7 +294,7 @@ dependencies = [\n  \"rand 0.8.3\",\n  \"rustc-workspace-hack\",\n  \"rustfix\",\n- \"semver 1.0.1\",\n+ \"semver 1.0.3\",\n  \"serde\",\n  \"serde_ignored\",\n  \"serde_json\",\n@@ -4692,9 +4692,9 @@ dependencies = [\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.1\"\n+version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d023dabf011d5dcb5ac64e3685d97d3b0ef412911077a2851455c6098524a723\"\n+checksum = \"5f3aac57ee7f3272d8395c6e4f502f434f0e289fcd62876f70daa008c20dcabe\"\n dependencies = [\n  \"serde\",\n ]"}, {"sha": "722ce6b6367266730667d510ffe4130bf44b8898", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -43,49 +43,9 @@ cfg_if! {\n         use std::ops::Add;\n         use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n-        /// This is a single threaded variant of AtomicCell provided by crossbeam.\n-        /// Unlike `Atomic` this is intended for all `Copy` types,\n-        /// but it lacks the explicit ordering arguments.\n-        #[derive(Debug)]\n-        pub struct AtomicCell<T: Copy>(Cell<T>);\n-\n-        impl<T: Copy> AtomicCell<T> {\n-            #[inline]\n-            pub fn new(v: T) -> Self {\n-                AtomicCell(Cell::new(v))\n-            }\n-\n-            #[inline]\n-            pub fn get_mut(&mut self) -> &mut T {\n-                self.0.get_mut()\n-            }\n-        }\n-\n-        impl<T: Copy> AtomicCell<T> {\n-            #[inline]\n-            pub fn into_inner(self) -> T {\n-                self.0.into_inner()\n-            }\n-\n-            #[inline]\n-            pub fn load(&self) -> T {\n-                self.0.get()\n-            }\n-\n-            #[inline]\n-            pub fn store(&self, val: T) {\n-                self.0.set(val)\n-            }\n-\n-            #[inline]\n-            pub fn swap(&self, val: T) -> T {\n-                self.0.replace(val)\n-            }\n-        }\n-\n         /// This is a single threaded variant of `AtomicU64`, `AtomicUsize`, etc.\n-        /// It differs from `AtomicCell` in that it has explicit ordering arguments\n-        /// and is only intended for use with the native atomic types.\n+        /// It has explicit ordering arguments and is only intended for use with\n+        /// the native atomic types.\n         /// You should use this type through the `AtomicU64`, `AtomicUsize`, etc, type aliases\n         /// as it's not intended to be used separately.\n         #[derive(Debug)]\n@@ -159,22 +119,6 @@ cfg_if! {\n             (oper_a(), oper_b())\n         }\n \n-        pub struct SerialScope;\n-\n-        impl SerialScope {\n-            pub fn spawn<F>(&self, f: F)\n-                where F: FnOnce(&SerialScope)\n-            {\n-                f(self)\n-            }\n-        }\n-\n-        pub fn scope<F, R>(f: F) -> R\n-            where F: FnOnce(&SerialScope) -> R\n-        {\n-            f(&SerialScope)\n-        }\n-\n         #[macro_export]\n         macro_rules! parallel {\n             ($($blocks:tt),*) => {\n@@ -318,8 +262,6 @@ cfg_if! {\n \n         pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32, AtomicU64};\n \n-        pub use crossbeam_utils::atomic::AtomicCell;\n-\n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;\n "}, {"sha": "5d2256100ff67c9f9afdd386b78bae78338d8835", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -909,11 +909,18 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n \n         match *ty.kind() {\n-            ty::Adt(def, _) if def.is_box() && matches!(self.mode, CItemKind::Definition) => {\n-                FfiSafe\n-            }\n-\n             ty::Adt(def, substs) => {\n+                if def.is_box() && matches!(self.mode, CItemKind::Definition) {\n+                    if ty.boxed_ty().is_sized(tcx.at(DUMMY_SP), self.cx.param_env) {\n+                        return FfiSafe;\n+                    } else {\n+                        return FfiUnsafe {\n+                            ty,\n+                            reason: format!(\"box cannot be represented as a single pointer\"),\n+                            help: None,\n+                        };\n+                    }\n+                }\n                 if def.is_phantom_data() {\n                     return FfiPhantom(ty);\n                 }"}, {"sha": "6c8977351949de691b2cdc16e7c51ce3355c41a0", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -103,12 +103,6 @@ pub fn options() -> TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Wasm,\n \n-        // No need for indirection here, simd types can always be passed by\n-        // value as the whole module either has simd or not, which is different\n-        // from x86 (for example) where programs can have functions that don't\n-        // enable simd features.\n-        simd_types_indirect: false,\n-\n         pre_link_args,\n \n         crt_objects_fallback: Some(CrtObjectsFallback::Wasm),"}, {"sha": "19c3385dd4cbcbc119df5a9144fc0cf8a7eea2b0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1878,6 +1878,10 @@ impl<'v> Visitor<'v> for FindTypeParam {\n         hir::intravisit::NestedVisitorMap::None\n     }\n \n+    fn visit_where_predicate(&mut self, _: &'v hir::WherePredicate<'v>) {\n+        // Skip where-clauses, to avoid suggesting indirection for type parameters found there.\n+    }\n+\n     fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n         // We collect the spans of all uses of the \"bare\" type param, like in `field: T` or\n         // `field: (T, T)` where we could make `T: ?Sized` while skipping cases that are known to be"}, {"sha": "33bc25accb319dceffcf2862d321aaf476cbee1f", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -17,6 +17,7 @@ use rustc_span::Span;\n use super::method::probe;\n \n use std::fmt;\n+use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn emit_coerce_suggestions(\n@@ -573,12 +574,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n-                    if let Ok(src) = sm.span_to_snippet(sp) {\n-                        if let Some(src) = src.strip_prefix('&') {\n+                    // Go through the spans from which this span was expanded,\n+                    // and find the one that's pointing inside `sp`.\n+                    //\n+                    // E.g. for `&format!(\"\")`, where we want the span to the\n+                    // `format!()` invocation instead of its expansion.\n+                    if let Some(call_span) =\n+                        iter::successors(Some(expr.span), |s| s.parent()).find(|&s| sp.contains(s))\n+                    {\n+                        if let Ok(code) = sm.span_to_snippet(call_span) {\n                             return Some((\n                                 sp,\n                                 \"consider removing the borrow\",\n-                                src.to_string(),\n+                                code,\n                                 Applicability::MachineApplicable,\n                             ));\n                         }"}, {"sha": "a04e7c8a498daf7d6cda9dff39feee5a810d331d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -59,7 +59,6 @@\n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]\n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(allow(unused_variables), deny(warnings)))"}, {"sha": "6c0b9c0331e304b2d28d019ff5a99f4bbeae9839", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -51,7 +51,6 @@\n #![cfg(not(test))]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(deny(warnings))),"}, {"sha": "d95ea6530c20491e355787972093b814164acc85", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -5,10 +5,7 @@\n \n #![no_std]\n #![unstable(feature = \"panic_abort\", issue = \"32837\")]\n-#![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-    issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\"\n-)]\n+#![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![panic_runtime]\n #![allow(unused_features)]\n #![feature(core_intrinsics)]"}, {"sha": "d32a3f1f8322c79aa190f62b30e7f4dd0b5c64ff", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -13,10 +13,7 @@\n \n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n-#![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-    issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\"\n-)]\n+#![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![feature(core_intrinsics)]\n #![feature(lang_items)]\n #![feature(nll)]"}, {"sha": "3990826ce42e0fe7fc411013a00dfbc4c1568f7a", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -12,7 +12,6 @@\n #![stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n #![deny(missing_docs)]\n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(deny(warnings))),"}, {"sha": "c4f21587457c1555591e125fe0184bf8aa7092ab", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -190,7 +190,6 @@\n #![cfg_attr(not(feature = \"restricted-std\"), stable(feature = \"rust1\", since = \"1.0.0\"))]\n #![cfg_attr(feature = \"restricted-std\", unstable(feature = \"restricted_std\", issue = \"none\"))]\n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(deny(warnings))),"}, {"sha": "943b276a220c88fc7e330804f0c2edcc6601bfc9", "filename": "library/term/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Fterm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Fterm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fterm%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -30,11 +30,7 @@\n //! [win]: https://docs.microsoft.com/en-us/windows/console/character-mode-applications\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n-#![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-    html_playground_url = \"https://play.rust-lang.org/\",\n-    test(attr(deny(warnings)))\n-)]\n+#![doc(html_playground_url = \"https://play.rust-lang.org/\", test(attr(deny(warnings))))]\n #![deny(missing_docs)]\n #![cfg_attr(windows, feature(libc))]\n "}, {"sha": "3da4d434f48f23843e3ac3b2f588a51f94cae487", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -19,7 +19,7 @@\n \n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"50297\")]\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n+#![doc(test(attr(deny(warnings))))]\n #![cfg_attr(unix, feature(libc))]\n #![feature(rustc_private)]\n #![feature(nll)]"}, {"sha": "06f8bf89daecde081435011dcc3ce1e980e400fd", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -574,6 +574,18 @@ impl<'a> Builder<'a> {\n         self.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), paths);\n     }\n \n+    /// NOTE: keep this in sync with `rustdoc::clean::utils::doc_rust_lang_org_channel`, or tests will fail on beta/stable.\n+    pub fn doc_rust_lang_org_channel(&self) -> String {\n+        let channel = match &*self.config.channel {\n+            \"stable\" => &self.version,\n+            \"beta\" => \"beta\",\n+            \"nightly\" | \"dev\" => \"nightly\",\n+            // custom build of rustdoc maybe? link to the latest stable docs just in case\n+            _ => \"stable\",\n+        };\n+        \"https://doc.rust-lang.org/\".to_owned() + channel\n+    }\n+\n     fn run_step_descriptions(&self, v: &[StepDescription], paths: &[PathBuf]) {\n         StepDescription::run(v, self, paths);\n     }"}, {"sha": "c057910e4f95f04cfb54e0ae6b043cae3b5c147b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -326,6 +326,11 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n     if target.contains(\"riscv\") {\n         cargo.rustflag(\"-Cforce-unwind-tables=yes\");\n     }\n+\n+    let html_root =\n+        format!(\"-Zcrate-attr=doc(html_root_url=\\\"{}/\\\")\", builder.doc_rust_lang_org_channel(),);\n+    cargo.rustflag(&html_root);\n+    cargo.rustdocflag(&html_root);\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "1ea29a829c270a05316fc73b40307e9127be0005", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1366,7 +1366,7 @@ impl Build {\n                 eprintln!(\n                     \"\n Couldn't find required command: ninja\n-You should install ninja, or set ninja=false in config.toml\n+You should install ninja, or set `ninja=false` in config.toml in the `[llvm]` section.\n \"\n                 );\n                 std::process::exit(1);"}, {"sha": "cc7c143d4746101f3960c72e42b4cdf68360b6f0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1486,6 +1486,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             }\n         }\n         cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        cmd.env(\"DOC_RUST_LANG_ORG_CHANNEL\", builder.doc_rust_lang_org_channel());\n         builder.add_rust_test_threads(&mut cmd);\n \n         if builder.config.sanitizers_enabled(target) {"}, {"sha": "9d75ad0918a79186b5092b60b728c90c1018c628", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -263,6 +263,7 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel);\n     cargo.env(\"CFG_VERSION\", builder.rust_version());\n     cargo.env(\"CFG_RELEASE_NUM\", &builder.version);\n+    cargo.env(\"DOC_RUST_LANG_ORG_CHANNEL\", builder.doc_rust_lang_org_channel());\n \n     let info = GitInfo::new(builder.config.ignore_git, &dir);\n     if let Some(sha) = info.sha() {"}, {"sha": "8647db5a45dc8277fbf12465c72a865b4f734a50", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -135,6 +135,8 @@\n     unichr = chr\n \n \n+channel = os.environ[\"DOC_RUST_LANG_ORG_CHANNEL\"]\n+\n class CustomHTMLParser(HTMLParser):\n     \"\"\"simplified HTML parser.\n \n@@ -270,6 +272,7 @@ def flatten(node):\n \n \n def normalize_xpath(path):\n+    path = path.replace(\"{{channel}}\", channel)\n     if path.startswith('//'):\n         return '.' + path  # avoid warnings\n     elif path.startswith('.//'):\n@@ -334,6 +337,7 @@ def get_dir(self, path):\n \n \n def check_string(data, pat, regexp):\n+    pat = pat.replace(\"{{channel}}\", channel)\n     if not pat:\n         return True  # special case a presence testing\n     elif regexp:"}, {"sha": "9f2123f22bd388a775e7cb548ad0e70ba750fe7b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -499,7 +499,7 @@ impl Item {\n                                     format!(\"{}/std/\", s.trim_end_matches('/'))\n                                 }\n                                 Some(ExternalLocation::Unknown) | None => {\n-                                    \"https://doc.rust-lang.org/nightly/std/\".to_string()\n+                                    format!(\"{}/std/\", crate::DOC_RUST_LANG_ORG_CHANNEL)\n                                 }\n                             };\n                             // This is a primitive so the url is done \"by hand\".\n@@ -1767,37 +1767,6 @@ impl PrimitiveType {\n         }\n     }\n \n-    crate fn as_str(&self) -> &'static str {\n-        use self::PrimitiveType::*;\n-        match *self {\n-            Isize => \"isize\",\n-            I8 => \"i8\",\n-            I16 => \"i16\",\n-            I32 => \"i32\",\n-            I64 => \"i64\",\n-            I128 => \"i128\",\n-            Usize => \"usize\",\n-            U8 => \"u8\",\n-            U16 => \"u16\",\n-            U32 => \"u32\",\n-            U64 => \"u64\",\n-            U128 => \"u128\",\n-            F32 => \"f32\",\n-            F64 => \"f64\",\n-            Str => \"str\",\n-            Bool => \"bool\",\n-            Char => \"char\",\n-            Array => \"array\",\n-            Slice => \"slice\",\n-            Tuple => \"tuple\",\n-            Unit => \"unit\",\n-            RawPointer => \"pointer\",\n-            Reference => \"reference\",\n-            Fn => \"fn\",\n-            Never => \"never\",\n-        }\n-    }\n-\n     crate fn impls(&self, tcx: TyCtxt<'_>) -> &'static ArrayVec<DefId, 4> {\n         Self::all_impls(tcx).get(self).expect(\"missing impl for primitive type\")\n     }\n@@ -1860,10 +1829,6 @@ impl PrimitiveType {\n         })\n     }\n \n-    crate fn to_url_str(&self) -> &'static str {\n-        self.as_str()\n-    }\n-\n     crate fn as_sym(&self) -> Symbol {\n         use PrimitiveType::*;\n         match self {"}, {"sha": "350a387877142109c075845db6553551110e48c8", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -2,7 +2,7 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -451,35 +451,48 @@ crate fn get_auto_trait_and_blanket_impls(\n     auto_impls.into_iter().chain(blanket_impls)\n }\n \n+/// If `res` has a documentation page associated, store it in the cache.\n+///\n+/// This is later used by [`href()`] to determine the HTML link for the item.\n+///\n+/// [`href()`]: crate::html::format::href\n crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n+    use DefKind::*;\n     debug!(\"register_res({:?})\", res);\n \n     let (did, kind) = match res {\n-        Res::Def(DefKind::Fn, i) => (i, ItemType::Function),\n-        Res::Def(DefKind::TyAlias, i) => (i, ItemType::Typedef),\n-        Res::Def(DefKind::Enum, i) => (i, ItemType::Enum),\n-        Res::Def(DefKind::Trait, i) => (i, ItemType::Trait),\n         Res::Def(DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst, i) => {\n+            // associated items are documented, but on the page of their parent\n             (cx.tcx.parent(i).unwrap(), ItemType::Trait)\n         }\n-        Res::Def(DefKind::Struct, i) => (i, ItemType::Struct),\n-        Res::Def(DefKind::Union, i) => (i, ItemType::Union),\n-        Res::Def(DefKind::Mod, i) => (i, ItemType::Module),\n-        Res::Def(DefKind::ForeignTy, i) => (i, ItemType::ForeignType),\n-        Res::Def(DefKind::Const, i) => (i, ItemType::Constant),\n-        Res::Def(DefKind::Static, i) => (i, ItemType::Static),\n         Res::Def(DefKind::Variant, i) => {\n+            // variant items are documented, but on the page of their parent\n             (cx.tcx.parent(i).expect(\"cannot get parent def id\"), ItemType::Enum)\n         }\n-        Res::Def(DefKind::Macro(mac_kind), i) => match mac_kind {\n-            MacroKind::Bang => (i, ItemType::Macro),\n-            MacroKind::Attr => (i, ItemType::ProcAttribute),\n-            MacroKind::Derive => (i, ItemType::ProcDerive),\n-        },\n-        Res::Def(DefKind::TraitAlias, i) => (i, ItemType::TraitAlias),\n-        Res::SelfTy(Some(def_id), _) => (def_id, ItemType::Trait),\n-        Res::SelfTy(_, Some((impl_def_id, _))) => return impl_def_id,\n-        _ => return res.def_id(),\n+        // Each of these have their own page.\n+        Res::Def(\n+            kind\n+            @\n+            (Fn | TyAlias | Enum | Trait | Struct | Union | Mod | ForeignTy | Const | Static\n+            | Macro(..) | TraitAlias),\n+            i,\n+        ) => (i, kind.into()),\n+        // This is part of a trait definition; document the trait.\n+        Res::SelfTy(Some(trait_def_id), _) => (trait_def_id, ItemType::Trait),\n+        // This is an inherent impl; it doesn't have its own page.\n+        Res::SelfTy(None, Some((impl_def_id, _))) => return impl_def_id,\n+        Res::SelfTy(None, None)\n+        | Res::PrimTy(_)\n+        | Res::ToolMod\n+        | Res::SelfCtor(_)\n+        | Res::Local(_)\n+        | Res::NonMacroAttr(_)\n+        | Res::Err => return res.def_id(),\n+        Res::Def(\n+            TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst | OpaqueTy\n+            | Field | LifetimeParam | GlobalAsm | Impl | Closure | Generator,\n+            id,\n+        ) => return id,\n     };\n     if did.is_local() {\n         return did;\n@@ -543,3 +556,8 @@ crate fn has_doc_flag(attrs: ty::Attributes<'_>, flag: Symbol) -> bool {\n             && attr.meta_item_list().map_or(false, |l| rustc_attr::list_contains_name(&l, flag))\n     })\n }\n+\n+/// A link to `doc.rust-lang.org` that includes the channel name.\n+///\n+/// Set by `bootstrap::Builder::doc_rust_lang_org_channel` in order to keep tests passing on beta/stable.\n+crate const DOC_RUST_LANG_ORG_CHANNEL: &'static str = env!(\"DOC_RUST_LANG_ORG_CHANNEL\");"}, {"sha": "d5213fd77117a00655ab27ee796fa826f9320340", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -574,7 +574,7 @@ fn primitive_link(\n                     f,\n                     \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n                     \"../\".repeat(len),\n-                    prim.to_url_str()\n+                    prim.as_sym()\n                 )?;\n                 needs_termination = true;\n             }\n@@ -603,7 +603,7 @@ fn primitive_link(\n                         f,\n                         \"<a class=\\\"primitive\\\" href=\\\"{}/primitive.{}.html\\\">\",\n                         loc.join(\"/\"),\n-                        prim.to_url_str()\n+                        prim.as_sym()\n                     )?;\n                     needs_termination = true;\n                 }\n@@ -677,7 +677,7 @@ fn fmt_type<'cx>(\n             fmt::Display::fmt(&tybounds(param_names, cx), f)\n         }\n         clean::Infer => write!(f, \"_\"),\n-        clean::Primitive(prim) => primitive_link(f, prim, prim.as_str(), cx),\n+        clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!("}, {"sha": "bee62915ea9b1f841cb2d9122f4db46d42706df6", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -379,7 +379,7 @@ impl FromWithTcx<clean::Type> for Type {\n                     .unwrap_or_default(),\n             },\n             Generic(s) => Type::Generic(s.to_string()),\n-            Primitive(p) => Type::Primitive(p.as_str().to_string()),\n+            Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),"}, {"sha": "2d371b538319140bcaa3f1fa2d51f7b3c6bcc7cf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -81,6 +81,8 @@ use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGro\n use rustc_session::getopts;\n use rustc_session::{early_error, early_warn};\n \n+use crate::clean::utils::DOC_RUST_LANG_ORG_CHANNEL;\n+\n /// A macro to create a FxHashMap.\n ///\n /// Example:"}, {"sha": "e6e6497902c26da1774abf8dc15f2b466f0e15fb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -91,10 +91,10 @@ impl Res {\n         }\n     }\n \n-    fn name(self, tcx: TyCtxt<'_>) -> String {\n+    fn name(self, tcx: TyCtxt<'_>) -> Symbol {\n         match self {\n-            Res::Def(_, id) => tcx.item_name(id).to_string(),\n-            Res::Primitive(prim) => prim.as_str().to_string(),\n+            Res::Def(_, id) => tcx.item_name(id),\n+            Res::Primitive(prim) => prim.as_sym(),\n         }\n     }\n \n@@ -388,7 +388,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ty::AssocKind::Const => \"associatedconstant\",\n                         ty::AssocKind::Type => \"associatedtype\",\n                     };\n-                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_str(), out, item_name);\n+                    let fragment = format!(\"{}#{}.{}\", prim_ty.as_sym(), out, item_name);\n                     (Res::Primitive(prim_ty), fragment, Some((kind.as_def_kind(), item.def_id)))\n                 })\n         })\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             AnchorFailure::RustdocAnchorConflict(res),\n                         ));\n                     }\n-                    return Ok((res, Some(ty.as_str().to_owned())));\n+                    return Ok((res, Some(ty.as_sym().to_string())));\n                 }\n                 _ => return Ok((res, extra_fragment.clone())),\n             }\n@@ -1148,7 +1148,7 @@ impl LinkCollector<'_, '_> {\n                         return None;\n                     }\n                     res = prim;\n-                    fragment = Some(prim.name(self.cx.tcx));\n+                    fragment = Some(prim.name(self.cx.tcx).to_string());\n                 } else {\n                     // `[char]` when a `char` module is in scope\n                     let candidates = vec![res, prim];"}, {"sha": "2b44ba24b4426d1847c88a7dac371af58b8c2427", "filename": "src/test/rustdoc-ui/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n // compile-flags: -Z unstable-options --check\n+// normalize-stderr-test: \"nightly|beta|1\\.[0-9][0-9]\\.[0-9]\" -> \"$$CHANNEL\"\n \n #![warn(missing_docs)]\n //~^ WARN"}, {"sha": "8c9e70e57fe7b09a68aee20468b181b779d60aed", "filename": "src/test/rustdoc-ui/check.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,5 +1,5 @@\n warning: missing documentation for the crate\n-  --> $DIR/check.rs:4:1\n+  --> $DIR/check.rs:5:1\n    |\n LL | / #![warn(missing_docs)]\n LL | |\n@@ -10,30 +10,30 @@ LL | | pub fn foo() {}\n    | |_______________^\n    |\n note: the lint level is defined here\n-  --> $DIR/check.rs:4:9\n+  --> $DIR/check.rs:5:9\n    |\n LL | #![warn(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n warning: missing documentation for a function\n-  --> $DIR/check.rs:9:1\n+  --> $DIR/check.rs:10:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^\n \n warning: no documentation found for this crate's top-level module\n    |\n note: the lint level is defined here\n-  --> $DIR/check.rs:7:9\n+  --> $DIR/check.rs:8:9\n    |\n LL | #![warn(rustdoc::all)]\n    |         ^^^^^^^^^^^^\n    = note: `#[warn(rustdoc::missing_crate_level_docs)]` implied by `#[warn(rustdoc::all)]`\n    = help: The following guide may be of use:\n-           https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n+           https://doc.rust-lang.org/$CHANNEL/rustdoc/how-to-write-documentation.html\n \n warning: missing code example in this documentation\n-  --> $DIR/check.rs:4:1\n+  --> $DIR/check.rs:5:1\n    |\n LL | / #![warn(missing_docs)]\n LL | |\n@@ -44,14 +44,14 @@ LL | | pub fn foo() {}\n    | |_______________^\n    |\n note: the lint level is defined here\n-  --> $DIR/check.rs:7:9\n+  --> $DIR/check.rs:8:9\n    |\n LL | #![warn(rustdoc::all)]\n    |         ^^^^^^^^^^^^\n    = note: `#[warn(rustdoc::missing_doc_code_examples)]` implied by `#[warn(rustdoc::all)]`\n \n warning: missing code example in this documentation\n-  --> $DIR/check.rs:9:1\n+  --> $DIR/check.rs:10:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^^^^"}, {"sha": "9465e8e7ab99649bfff1c0a9fe6f64c3f267ca03", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"nightly|beta|1\\.[0-9][0-9]\\.[0-9]\" -> \"$$CHANNEL\"\n #![deny(warnings)]\n \n //! Email me at <hello@localhost>."}, {"sha": "1b07828fc6e55e4217022e220646b0d61ef530a9", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,16 +1,16 @@\n error: unknown disambiguator `hello`\n-  --> $DIR/email-address-localhost.rs:3:18\n+  --> $DIR/email-address-localhost.rs:4:18\n    |\n LL | //! Email me at <hello@localhost>.\n    |                  ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/email-address-localhost.rs:1:9\n+  --> $DIR/email-address-localhost.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to previous error\n "}, {"sha": "0aa1e5a415aa747877c425b2ece259a2ecb024da", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"nightly|beta|1\\.[0-9][0-9]\\.[0-9]\" -> \"$$CHANNEL\"\n #![deny(warnings)]\n \n //! Linking to [foo@banana] and [`bar@banana!()`]."}, {"sha": "d280e6497e096c163af4d6161262a8ff9d4a328b", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,56 +1,56 @@\n error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:3:17\n+  --> $DIR/unknown-disambiguator.rs:4:17\n    |\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                 ^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/unknown-disambiguator.rs:1:9\n+  --> $DIR/unknown-disambiguator.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `bar`\n-  --> $DIR/unknown-disambiguator.rs:3:35\n+  --> $DIR/unknown-disambiguator.rs:4:35\n    |\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                                   ^^^\n    |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:9:34\n+  --> $DIR/unknown-disambiguator.rs:10:34\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                  ^^^\n    |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:9:48\n+  --> $DIR/unknown-disambiguator.rs:10:48\n    |\n LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n    |                                                ^^^\n    |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n-  --> $DIR/unknown-disambiguator.rs:6:31\n+  --> $DIR/unknown-disambiguator.rs:7:31\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                               ^\n    |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator ``\n-  --> $DIR/unknown-disambiguator.rs:6:57\n+  --> $DIR/unknown-disambiguator.rs:7:57\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |                                                         ^\n    |\n-   = note: see https://doc.rust-lang.org/nightly/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a186410acf483c819cee69576f3e9baeedca1801", "filename": "src/test/rustdoc-ui/no-crate-level-doc-lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: no documentation found\n+// normalize-stderr-test: \"nightly|beta|1\\.[0-9][0-9]\\.[0-9]\" -> \"$$CHANNEL\"\n #![deny(rustdoc::missing_crate_level_docs)]\n //^~ NOTE defined here\n "}, {"sha": "1a1f8085a1b467b082b6f0963c48b8c6bc010f9b", "filename": "src/test/rustdoc-ui/no-crate-level-doc-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,12 +1,12 @@\n error: no documentation found for this crate's top-level module\n    |\n note: the lint level is defined here\n-  --> $DIR/no-crate-level-doc-lint.rs:2:9\n+  --> $DIR/no-crate-level-doc-lint.rs:3:9\n    |\n LL | #![deny(rustdoc::missing_crate_level_docs)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: The following guide may be of use:\n-           https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n+           https://doc.rust-lang.org/$CHANNEL/rustdoc/how-to-write-documentation.html\n \n error: aborting due to previous error\n "}, {"sha": "d9fed2d69518a11abb41bde4f1fc728cebd3fa61", "filename": "src/test/rustdoc/intra-doc/associated-items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -3,9 +3,9 @@\n /// [`std::collections::BTreeMap::into_iter`]\n /// [`String::from`] is ambiguous as to which `From` impl\n /// [Vec::into_iter()] uses a disambiguator\n-// @has 'associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html#method.into_iter\"]' 'std::collections::BTreeMap::into_iter'\n-// @has 'associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html#method.from\"]' 'String::from'\n-// @has 'associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_iter\"]' 'Vec::into_iter'\n+// @has 'associated_items/fn.foo.html' '//a[@href=\"{{channel}}/alloc/collections/btree/map/struct.BTreeMap.html#method.into_iter\"]' 'std::collections::BTreeMap::into_iter'\n+// @has 'associated_items/fn.foo.html' '//a[@href=\"{{channel}}/alloc/string/struct.String.html#method.from\"]' 'String::from'\n+// @has 'associated_items/fn.foo.html' '//a[@href=\"{{channel}}/alloc/vec/struct.Vec.html#method.into_iter\"]' 'Vec::into_iter'\n pub fn foo() {}\n \n /// Link to [MyStruct], [link from struct][MyStruct::method], [MyStruct::clone], [MyStruct::Input]"}, {"sha": "bbdbe246bbce22f9f4b42ed6c873314e16a0e15a", "filename": "src/test/rustdoc/intra-doc/builtin-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbuiltin-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbuiltin-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbuiltin-macros.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,3 +1,3 @@\n // @has builtin_macros/index.html\n-// @has - '//a/@href' 'https://doc.rust-lang.org/nightly/core/macro.cfg.html'\n+// @has - '//a/@href' '{{channel}}/core/macro.cfg.html'\n //! [cfg]"}, {"sha": "c67c40a77edbed7a8bfab878e2da69b17c659b42", "filename": "src/test/rustdoc/intra-doc/field.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ffield.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -0,0 +1,4 @@\n+// @has field/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html#structfield.start\"]' 'start'\n+// @has field/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.NotFound\"]' 'not_found'\n+//! [start][std::ops::Range::start]\n+//! [not_found][std::io::ErrorKind::NotFound]"}, {"sha": "fbc9fc6a9bc213d3163d04b7a05217f80259d92d", "filename": "src/test/rustdoc/intra-doc/generic-params.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-params.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -5,40 +5,40 @@\n //! Here's a link to [`Vec<T>`] and one to [`Box<Vec<Option<T>>>`].\n //! Here's a link to [`Iterator<Box<T>>::Item`].\n //!\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\"]' 'Vec<T>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\"]' 'Box<Vec<Option<T>>>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\"]' 'Iterator<Box<T>>::Item'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/vec/struct.Vec.html\"]' 'Vec<T>'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/boxed/struct.Box.html\"]' 'Box<Vec<Option<T>>>'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\"]' 'Iterator<Box<T>>::Item'\n \n //! And what about a link to [just `Option`](Option) and, [with the generic, `Option<T>`](Option<T>)?\n //!\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\"]' 'just Option'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\"]' 'with the generic, Option<T>'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/option/enum.Option.html\"]' 'just Option'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/option/enum.Option.html\"]' 'with the generic, Option<T>'\n \n //! We should also try linking to [`Result<T, E>`]; it has *two* generics!\n //! And [`Result<T, !>`] and [`Result<!, E>`].\n //!\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\"]' 'Result<T, E>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\"]' 'Result<T, !>'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\"]' 'Result<!, E>'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/result/enum.Result.html\"]' 'Result<T, E>'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/result/enum.Result.html\"]' 'Result<T, !>'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/result/enum.Result.html\"]' 'Result<!, E>'\n \n //! Now let's test a trickier case: [`Vec::<T>::new`], or you could write it\n //! [with parentheses as `Vec::<T>::new()`][Vec::<T>::new()].\n //! And what about something even harder? That would be [`Vec::<Box<T>>::new()`].\n //!\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<T>::new'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'with parentheses as Vec::<T>::new()'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<Box<T>>::new()'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<T>::new'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/vec/struct.Vec.html#method.new\"]' 'with parentheses as Vec::<T>::new()'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/vec/struct.Vec.html#method.new\"]' 'Vec::<Box<T>>::new()'\n \n //! This is also pretty tricky: [`TypeId::of::<String>()`].\n //! And this too: [`Vec::<std::error::Error>::len`].\n //!\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html#method.of\"]' 'TypeId::of::<String>()'\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\"]' 'Vec::<std::error::Error>::len'\n+// @has foo/index.html '//a[@href=\"{{channel}}/core/any/struct.TypeId.html#method.of\"]' 'TypeId::of::<String>()'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/vec/struct.Vec.html#method.len\"]' 'Vec::<std::error::Error>::len'\n \n //! We unofficially and implicitly support things that aren't valid in the actual Rust syntax, like\n //! [`Box::<T>new()`]. We may not support them in the future!\n //!\n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html#method.new\"]' 'Box::<T>new()'\n+// @has foo/index.html '//a[@href=\"{{channel}}/alloc/boxed/struct.Box.html#method.new\"]' 'Box::<T>new()'\n \n //! These will be resolved as regular links:\n //! - [`this is <invalid syntax> first`](https://www.rust-lang.org)"}, {"sha": "be4b44b314252686b206a16e43b08970ae69275d", "filename": "src/test/rustdoc/intra-doc/non-path-primitives.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -2,45 +2,45 @@\n #![feature(intra_doc_pointers)]\n #![deny(rustdoc::broken_intra_doc_links)]\n \n-// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.rotate_left\"]' 'slice::rotate_left'\n+// @has foo/index.html '//a[@href=\"{{channel}}/std/primitive.slice.html#method.rotate_left\"]' 'slice::rotate_left'\n //! [slice::rotate_left]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html#method.map\"]' 'array::map'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.array.html#method.map\"]' 'array::map'\n //! [array::map]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'owned str'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'str ref'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.is_empty\"]' 'str::is_empty'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.len\"]' '&str::len'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.str.html\"]' 'owned str'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.str.html\"]' 'str ref'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.str.html#method.is_empty\"]' 'str::is_empty'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.str.html#method.len\"]' '&str::len'\n //! [owned str][str]\n //! [str ref][&str]\n //! [str::is_empty]\n //! [&str::len]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' 'pointer::is_null'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*const::is_null'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*mut::is_null'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.pointer.html#method.is_null\"]' 'pointer::is_null'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.pointer.html#method.is_null\"]' '*const::is_null'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.pointer.html#method.is_null\"]' '*mut::is_null'\n //! [pointer::is_null]\n //! [*const::is_null]\n //! [*mut::is_null]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\"]' 'unit'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.unit.html\"]' 'unit'\n //! [unit]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\"]' 'tuple'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.tuple.html\"]' 'tuple'\n //! [tuple]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\"]' 'reference'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\"]' '&'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\"]' '&mut'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.reference.html\"]' 'reference'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.reference.html\"]' '&'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.reference.html\"]' '&mut'\n //! [reference]\n //! [&]\n //! [&mut]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\"]' 'fn'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.fn.html\"]' 'fn'\n //! [fn]\n \n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.never.html\"]' 'never'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.never.html\"]' '!'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.never.html\"]' 'never'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.never.html\"]' '!'\n //! [never]\n //! [!]"}, {"sha": "c73140420ff1f858a0d5c0e7c2f4915d371ab02f", "filename": "src/test/rustdoc/intra-doc/prim-assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,4 +1,4 @@\n #![deny(broken_intra_doc_links)]\n \n //! [i32::MAX]\n-// @has prim_assoc/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\"]' \"i32::MAX\"\n+// @has prim_assoc/index.html '//a[@href=\"{{channel}}/std/primitive.i32.html#associatedconstant.MAX\"]' \"i32::MAX\""}, {"sha": "9347d7bb42819fed336d62de936f83f16a62276d", "filename": "src/test/rustdoc/intra-doc/prim-methods-external-core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -9,8 +9,8 @@\n #![crate_type = \"rlib\"]\n \n // @has prim_methods_external_core/index.html\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n \n //! A [`char`] and its [`char::len_utf8`].\n "}, {"sha": "124faa9a636ffb9d3b3e979c3a21689b2a5f7b16", "filename": "src/test/rustdoc/intra-doc/prim-methods-local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -5,8 +5,8 @@\n \n \n // @has prim_methods_local/index.html\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n \n //! A [`char`] and its [`char::len_utf8`].\n "}, {"sha": "076117359d26416bc52e08e858e8d32d236a79d4", "filename": "src/test/rustdoc/intra-doc/prim-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -2,7 +2,7 @@\n \n \n // @has prim_methods/index.html\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n \n //! A [`char`] and its [`char::len_utf8`]."}, {"sha": "fcd86a99f1d6bf402125cab94bb84fc76b1360a5", "filename": "src/test/rustdoc/intra-doc/prim-precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -2,12 +2,12 @@\n \n pub mod char {\n     /// [char]\n-    // @has prim_precedence/char/struct.Inner.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n+    // @has prim_precedence/char/struct.Inner.html '//a/@href' '{{channel}}/std/primitive.char.html'\n     pub struct Inner;\n }\n \n /// See [prim@char]\n-// @has prim_precedence/struct.MyString.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n+// @has prim_precedence/struct.MyString.html '//a/@href' '{{channel}}/std/primitive.char.html'\n pub struct MyString;\n \n /// See also [crate::char] and [mod@char]"}, {"sha": "9b3b698324096e03ec38ae7f982ba3a449f76d95", "filename": "src/test/rustdoc/intra-doc/primitive-disambiguators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,4 +1,4 @@\n #![deny(broken_intra_doc_links)]\n // @has primitive_disambiguators/index.html\n-// @has - '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim'\n+// @has - '//a/@href' '{{channel}}/std/primitive.str.html#method.trim'\n //! [str::trim()]"}, {"sha": "f8a824bd08f421c81dde5878eee247b25b1907dc", "filename": "src/test/rustdoc/intra-doc/primitive-non-default-impl.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -3,29 +3,29 @@\n \n // @has primitive_non_default_impl/fn.str_methods.html\n /// [`str::trim`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim\"]' 'str::trim'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.str.html#method.trim\"]' 'str::trim'\n /// [`str::to_lowercase`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.to_lowercase\"]' 'str::to_lowercase'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.str.html#method.to_lowercase\"]' 'str::to_lowercase'\n /// [`str::into_boxed_bytes`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.into_boxed_bytes\"]' 'str::into_boxed_bytes'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.str.html#method.into_boxed_bytes\"]' 'str::into_boxed_bytes'\n /// [`str::replace`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.replace\"]' 'str::replace'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.str.html#method.replace\"]' 'str::replace'\n pub fn str_methods() {}\n \n // @has primitive_non_default_impl/fn.f32_methods.html\n /// [f32::powi]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.powi\"]' 'f32::powi'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.f32.html#method.powi\"]' 'f32::powi'\n /// [f32::sqrt]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.sqrt\"]' 'f32::sqrt'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.f32.html#method.sqrt\"]' 'f32::sqrt'\n /// [f32::mul_add]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.mul_add\"]' 'f32::mul_add'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.f32.html#method.mul_add\"]' 'f32::mul_add'\n pub fn f32_methods() {}\n \n // @has primitive_non_default_impl/fn.f64_methods.html\n /// [`f64::powi`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.powi\"]' 'f64::powi'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.f64.html#method.powi\"]' 'f64::powi'\n /// [`f64::sqrt`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.sqrt\"]' 'f64::sqrt'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.f64.html#method.sqrt\"]' 'f64::sqrt'\n /// [`f64::mul_add`]\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.mul_add\"]' 'f64::mul_add'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.f64.html#method.mul_add\"]' 'f64::mul_add'\n pub fn f64_methods() {}"}, {"sha": "b4f2d6b0617fa914e885eaa8b73582c5e4081b54", "filename": "src/test/rustdoc/intra-doc/pub-use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fpub-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Fpub-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fpub-use.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -12,7 +12,7 @@ extern crate inner;\n // documenting the re-export.\n \n // @has outer/index.html\n-// @ has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/env/fn.var.html\"]' \"std::env\"\n+// @ has - '//a[@href=\"{{channel}}/std/env/fn.var.html\"]' \"std::env\"\n // @ has - '//a[@href=\"fn.f.html\"]' \"g\"\n pub use f as g;\n \n@@ -23,5 +23,5 @@ extern crate self as _;\n // Make sure the documentation is actually correct by documenting an inlined re-export\n /// [mod@std::env]\n // @has outer/fn.f.html\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/env/index.html\"]' \"std::env\"\n+// @has - '//a[@href=\"{{channel}}/std/env/index.html\"]' \"std::env\"\n pub use inner::f;"}, {"sha": "0be368d051ee6e509c00bf78aad5a4c2cb3b75e5", "filename": "src/test/rustdoc/intra-doc/trait-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -3,7 +3,7 @@\n /// Link to [S::assoc_fn()]\n /// Link to [Default::default()]\n // @has trait_item/struct.S.html '//*[@href=\"struct.S.html#method.assoc_fn\"]' 'S::assoc_fn()'\n-// @has - '//*[@href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\"]' 'Default::default()'\n+// @has - '//*[@href=\"{{channel}}/core/default/trait.Default.html#tymethod.default\"]' 'Default::default()'\n pub struct S;\n \n impl S {"}, {"sha": "44aac68841373842844058351f77ca209fc2a788", "filename": "src/test/rustdoc/intra-doc/true-false.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -3,7 +3,7 @@\n \n \n // @has foo/index.html\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'true'\n-// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'false'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.bool.html\"]' 'true'\n+// @has - '//*[@id=\"main\"]//a[@href=\"{{channel}}/std/primitive.bool.html\"]' 'false'\n \n //! A `bool` is either [`true`] or [`false`]."}, {"sha": "4744c84b6226db03b33a6b890fdb3e128878d34e", "filename": "src/test/rustdoc/intra-link-prim-self.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-link-prim-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fintra-link-prim-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-self.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![deny(broken_intra_doc_links)]\n #![feature(lang_items)]\n #![feature(no_core)]\n@@ -8,8 +7,8 @@\n /// [Self::f]\n /// [Self::MAX]\n // @has intra_link_prim_self/primitive.usize.html\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html#method.f\"]' 'Self::f'\n-// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html#associatedconstant.MAX\"]' 'Self::MAX'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.usize.html#method.f\"]' 'Self::f'\n+// @has - '//a[@href=\"{{channel}}/std/primitive.usize.html#associatedconstant.MAX\"]' 'Self::MAX'\n impl usize {\n     /// Some docs\n     pub fn f() {}\n@@ -18,7 +17,7 @@ impl usize {\n     pub const MAX: usize = 10;\n \n     // FIXME(#8995) uncomment this when associated types in inherent impls are supported\n-    // @ has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html#associatedtype.ME\"]' 'Self::ME'\n+    // @ has - '//a[@href=\"{{channel}}/std/primitive.usize.html#associatedtype.ME\"]' 'Self::ME'\n     // / [Self::ME]\n     //pub type ME = usize;\n }"}, {"sha": "125e0c849731a6ed8b3948b8b9f3702502a6990d", "filename": "src/test/rustdoc/primitive-link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fprimitive-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fprimitive-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-link.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,12 +1,12 @@\n #![crate_name = \"foo\"]\n \n \n-// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\"]' 'u32'\n-// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\"]' 'i64'\n-// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\"]' 'std::primitive::i32'\n-// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'std::primitive::str'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"{{channel}}/std/primitive.u32.html\"]' 'u32'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"{{channel}}/std/primitive.i64.html\"]' 'i64'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"{{channel}}/std/primitive.i32.html\"]' 'std::primitive::i32'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"{{channel}}/std/primitive.str.html\"]' 'std::primitive::str'\n \n-// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\"]' 'std::primitive::i32::MAX'\n+// @has foo/struct.Foo.html '//*[@class=\"docblock\"]/p/a[@href=\"{{channel}}/std/primitive.i32.html#associatedconstant.MAX\"]' 'std::primitive::i32::MAX'\n \n /// It contains [`u32`] and [i64].\n /// It also links to [std::primitive::i32], [std::primitive::str],"}, {"sha": "10a8a47db52489637ac934e9f42e15537852faea", "filename": "src/test/rustdoc/primitive-reexport.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -5,24 +5,24 @@\n \n // @has bar/p/index.html\n // @has - '//code' 'pub use bool;'\n-// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'bool'\n+// @has - '//code/a[@href=\"{{channel}}/std/primitive.bool.html\"]' 'bool'\n // @has - '//code' 'pub use char as my_char;'\n-// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+// @has - '//code/a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n pub mod p {\n     pub use foo::bar::*;\n }\n \n // @has bar/baz/index.html\n // @has - '//code' 'pub use bool;'\n-// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'bool'\n+// @has - '//code/a[@href=\"{{channel}}/std/primitive.bool.html\"]' 'bool'\n // @has - '//code' 'pub use char as my_char;'\n-// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+// @has - '//code/a[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n pub use foo::bar as baz;\n \n // @has bar/index.html\n // @has - '//code' 'pub use str;'\n-// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'str'\n+// @has - '//code/a[@href=\"{{channel}}/std/primitive.str.html\"]' 'str'\n // @has - '//code' 'pub use i32 as my_i32;'\n-// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\"]' 'i32'\n+// @has - '//code/a[@href=\"{{channel}}/std/primitive.i32.html\"]' 'i32'\n pub use str;\n pub use i32 as my_i32;"}, {"sha": "c18cb881032a6d6dfa09ac7f50566d3ba7d022ff", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -8,6 +8,8 @@ extern crate libc;\n use std::default::Default;\n use std::marker::PhantomData;\n \n+trait Trait {}\n+\n trait Mirror { type It: ?Sized; }\n \n impl<T: ?Sized> Mirror for T { type It = Self; }\n@@ -74,6 +76,15 @@ pub extern \"C\" fn box_type(p: Box<u32>) { }\n \n pub extern \"C\" fn opt_box_type(p: Option<Box<u32>>) { }\n \n+pub extern \"C\" fn boxed_slice(p: Box<[u8]>) { }\n+//~^ ERROR: uses type `Box<[u8]>`\n+\n+pub extern \"C\" fn boxed_string(p: Box<str>) { }\n+//~^ ERROR: uses type `Box<str>`\n+\n+pub extern \"C\" fn boxed_trait(p: Box<dyn Trait>) { }\n+//~^ ERROR: uses type `Box<dyn Trait>`\n+\n pub extern \"C\" fn char_type(p: char) { }\n //~^ ERROR uses type `char`\n "}, {"sha": "d591d4ad292dd51fc972812052f9411ada5f7e77", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -1,5 +1,5 @@\n error: `extern` fn uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:67:33\n+  --> $DIR/lint-ctypes-fn.rs:69:33\n    |\n LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n    |                                 ^^^^^^ not FFI-safe\n@@ -13,16 +13,40 @@ LL | #![deny(improper_ctypes_definitions)]\n    = note: slices have no C equivalent\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:70:31\n+  --> $DIR/lint-ctypes-fn.rs:72:31\n    |\n LL | pub extern \"C\" fn str_type(p: &str) { }\n    |                               ^^^^ not FFI-safe\n    |\n    = help: consider using `*const u8` and a length instead\n    = note: string slices have no C equivalent\n \n+error: `extern` fn uses type `Box<[u8]>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:79:34\n+   |\n+LL | pub extern \"C\" fn boxed_slice(p: Box<[u8]>) { }\n+   |                                  ^^^^^^^^^ not FFI-safe\n+   |\n+   = note: box cannot be represented as a single pointer\n+\n+error: `extern` fn uses type `Box<str>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:82:35\n+   |\n+LL | pub extern \"C\" fn boxed_string(p: Box<str>) { }\n+   |                                   ^^^^^^^^ not FFI-safe\n+   |\n+   = note: box cannot be represented as a single pointer\n+\n+error: `extern` fn uses type `Box<dyn Trait>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:85:34\n+   |\n+LL | pub extern \"C\" fn boxed_trait(p: Box<dyn Trait>) { }\n+   |                                  ^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: box cannot be represented as a single pointer\n+\n error: `extern` fn uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:77:32\n+  --> $DIR/lint-ctypes-fn.rs:88:32\n    |\n LL | pub extern \"C\" fn char_type(p: char) { }\n    |                                ^^^^ not FFI-safe\n@@ -31,23 +55,23 @@ LL | pub extern \"C\" fn char_type(p: char) { }\n    = note: the `char` type has no C equivalent\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:80:32\n+  --> $DIR/lint-ctypes-fn.rs:91:32\n    |\n LL | pub extern \"C\" fn i128_type(p: i128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:83:32\n+  --> $DIR/lint-ctypes-fn.rs:94:32\n    |\n LL | pub extern \"C\" fn u128_type(p: u128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:86:33\n+  --> $DIR/lint-ctypes-fn.rs:97:33\n    |\n LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    |                                 ^^^^^^^^^^ not FFI-safe\n@@ -56,7 +80,7 @@ LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:89:34\n+  --> $DIR/lint-ctypes-fn.rs:100:34\n    |\n LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    |                                  ^^^^^^^ not FFI-safe\n@@ -65,42 +89,42 @@ LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:92:32\n+  --> $DIR/lint-ctypes-fn.rs:103:32\n    |\n LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n    |                                ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a member to this struct\n    = note: this struct has no fields\n note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:26:1\n+  --> $DIR/lint-ctypes-fn.rs:28:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:95:40\n+  --> $DIR/lint-ctypes-fn.rs:106:40\n    |\n LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:61:1\n+  --> $DIR/lint-ctypes-fn.rs:63:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:98:51\n+  --> $DIR/lint-ctypes-fn.rs:109:51\n    |\n LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n    |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:103:30\n+  --> $DIR/lint-ctypes-fn.rs:114:30\n    |\n LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    |                              ^^^^^^ not FFI-safe\n@@ -109,7 +133,7 @@ LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:106:31\n+  --> $DIR/lint-ctypes-fn.rs:117:31\n    |\n LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    |                               ^^^^ not FFI-safe\n@@ -118,15 +142,15 @@ LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:111:39\n+  --> $DIR/lint-ctypes-fn.rs:122:39\n    |\n LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n    |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:114:38\n+  --> $DIR/lint-ctypes-fn.rs:125:38\n    |\n LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    |                                      ^^^^^^^^^^^^^^ not FFI-safe\n@@ -135,15 +159,15 @@ LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    = note: string slices have no C equivalent\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:160:43\n+  --> $DIR/lint-ctypes-fn.rs:171:43\n    |\n LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n    |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:173:39\n+  --> $DIR/lint-ctypes-fn.rs:184:39\n    |\n LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    |                                       ^^^^^^ not FFI-safe\n@@ -152,13 +176,13 @@ LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:176:41\n+  --> $DIR/lint-ctypes-fn.rs:187:41\n    |\n LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n    |                                         ^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "deac593df43f1e1d3ff84056e1ac644feb82a5e8", "filename": "src/test/ui/simd/wasm-simd-indirect.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsimd%2Fwasm-simd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsimd%2Fwasm-simd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fwasm-simd-indirect.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -0,0 +1,33 @@\n+// build-pass\n+\n+#![cfg_attr(target_arch = \"wasm32\", feature(wasm_simd, wasm_target_feature))]\n+\n+#[cfg(target_arch = \"wasm32\")]\n+fn main() {\n+    unsafe {\n+        a::api_with_simd_feature();\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+mod a {\n+    use std::arch::wasm32::*;\n+\n+    #[target_feature(enable = \"simd128\")]\n+    pub unsafe fn api_with_simd_feature() {\n+        crate::b::api_takes_v128(u64x2(0, 1));\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+mod b {\n+    use std::arch::wasm32::*;\n+\n+    #[inline(never)]\n+    pub fn api_takes_v128(a: v128) -> v128 {\n+        a\n+    }\n+}\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+fn main() {}"}, {"sha": "599a79fc08af46d9922128d10f5e24a08c3d1b90", "filename": "src/test/ui/suggestions/format-borrow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -3,4 +3,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     let b: String = &format!(\"b\");\n     //~^ ERROR mismatched types\n+    let c: String = &mut format!(\"c\");\n+    //~^ ERROR mismatched types\n+    let d: String = &mut (format!(\"d\"));\n+    //~^ ERROR mismatched types\n }"}, {"sha": "0881b024712c5daa1c75b39100f5e4a420d6cbba", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -18,6 +18,26 @@ LL |     let b: String = &format!(\"b\");\n    |            |        help: consider removing the borrow: `format!(\"b\")`\n    |            expected due to this\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/format-borrow.rs:6:21\n+   |\n+LL |     let c: String = &mut format!(\"c\");\n+   |            ------   ^^^^^^^^^^^^^^^^^\n+   |            |        |\n+   |            |        expected struct `String`, found `&mut String`\n+   |            |        help: consider removing the borrow: `format!(\"c\")`\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/format-borrow.rs:8:21\n+   |\n+LL |     let d: String = &mut (format!(\"d\"));\n+   |            ------   ^^^^^^^^^^^^^^^^^^^\n+   |            |        |\n+   |            |        expected struct `String`, found `&mut String`\n+   |            |        help: consider removing the borrow: `format!(\"d\")`\n+   |            expected due to this\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "390d8bbdd5326e5124632da5ee4ce19dd40a9aaf", "filename": "src/test/ui/suggestions/issue-85943-no-suggest-unsized-indirection-in-where-clause.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.rs?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -0,0 +1,9 @@\n+// Regression test for #85943: should not emit suggestions for adding\n+// indirection to type parameters in where-clauses when suggesting\n+// adding `?Sized`.\n+struct A<T>(T) where T: Send;\n+struct B(A<[u8]>);\n+//~^ ERROR the size for values of type\n+\n+pub fn main() {\n+}"}, {"sha": "735aeb0e0e79995b8b106077ac09ea5db6e4d59c", "filename": "src/test/ui/suggestions/issue-85943-no-suggest-unsized-indirection-in-where-clause.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704934d080024a130b4e5b79cd220c842883ac61/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.stderr?ref=704934d080024a130b4e5b79cd220c842883ac61", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-85943-no-suggest-unsized-indirection-in-where-clause.rs:5:10\n+   |\n+LL | struct A<T>(T) where T: Send;\n+   |          - required by this bound in `A`\n+LL | struct B(A<[u8]>);\n+   |          ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/issue-85943-no-suggest-unsized-indirection-in-where-clause.rs:4:10\n+   |\n+LL | struct A<T>(T) where T: Send;\n+   |          ^  - ...if indirection were used here: `Box<T>`\n+   |          |\n+   |          this could be changed to `T: ?Sized`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}