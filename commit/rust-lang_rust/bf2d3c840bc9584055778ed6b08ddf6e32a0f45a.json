{"sha": "bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMmQzYzg0MGJjOTU4NDA1NTc3OGVkNmIwOGRkZjZlMzJhMGY0NWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-13T19:46:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-13T19:52:05Z"}, "message": "Reborrow even when passing &Object to &Object, so as to permit freezing", "tree": {"sha": "419195dc1a875e6b04fd12f446f0a80f9a6166a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419195dc1a875e6b04fd12f446f0a80f9a6166a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "html_url": "https://github.com/rust-lang/rust/commit/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb20775d1836c79975dfb9889fdeffe0c8baf58", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb20775d1836c79975dfb9889fdeffe0c8baf58", "html_url": "https://github.com/rust-lang/rust/commit/afb20775d1836c79975dfb9889fdeffe0c8baf58"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "21cabb5a74539224bcaf63f0074892d06da32bb5", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "patch": "@@ -391,7 +391,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n             let target_ty = rcx.resolve_node_type(expr.id);\n             match ty::get(target_ty).sty {\n                 ty::ty_trait(_, _, ty::RegionTraitStore(trait_region), _, _) => {\n-                    let source_ty = rcx.fcx.expr_ty(source);\n+                    let source_ty = rcx.resolve_expr_type_adjusted(source);\n                     constrain_regions_in_type(\n                         rcx,\n                         trait_region,\n@@ -1153,17 +1153,20 @@ pub mod guarantor {\n         match ty::get(ty).sty {\n             ty::ty_rptr(r, _) |\n             ty::ty_evec(_, ty::vstore_slice(r)) |\n+            ty::ty_trait(_, _, ty::RegionTraitStore(r), _, _) |\n             ty::ty_estr(ty::vstore_slice(r)) => {\n                 BorrowedPointer(r)\n             }\n             ty::ty_uniq(*) |\n             ty::ty_estr(ty::vstore_uniq) |\n+            ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n             ty::ty_evec(_, ty::vstore_uniq) => {\n                 OwnedPointer\n             }\n             ty::ty_box(*) |\n             ty::ty_ptr(*) |\n             ty::ty_evec(_, ty::vstore_box) |\n+            ty::ty_trait(_, _, ty::BoxTraitStore, _, _) |\n             ty::ty_estr(ty::vstore_box) => {\n                 OtherPointer\n             }"}, {"sha": "7736dbbb99d98058251e2bd921e904f4b8188e05", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "patch": "@@ -285,9 +285,6 @@ impl Coerce {\n         let r_a = self.infcx.next_region_var(Coercion(self.trace));\n \n         let a_borrowed = match *sty_a {\n-            ty::ty_trait(_, _, ty::RegionTraitStore(_), _, _) => {\n-                return self.subtype(a, b);\n-            }\n             ty::ty_trait(did, ref substs, _, _, b) => {\n                 ty::mk_trait(tcx, did, substs.clone(),\n                              ty::RegionTraitStore(r_a), b_mutbl, b)\n@@ -297,7 +294,7 @@ impl Coerce {\n             }\n         };\n \n-        if_ok!(self.tys(a_borrowed, b));\n+        if_ok!(self.subtype(a_borrowed, b));\n         Ok(Some(@AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n             autoref: Some(AutoBorrowObj(r_a, b_mutbl))"}, {"sha": "4dda5ca556eda9970d90d1a55456282b0f4e0d2a", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf2d3c840bc9584055778ed6b08ddf6e32a0f45a/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=bf2d3c840bc9584055778ed6b08ddf6e32a0f45a", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can coerce an `@Object` to an `&Object`\n+\n+trait Foo {\n+    fn foo(&self) -> uint;\n+    fn bar(&mut self) -> uint;\n+}\n+\n+impl Foo for uint {\n+    fn foo(&self) -> uint {\n+        *self\n+    }\n+\n+    fn bar(&mut self) -> uint {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+fn do_it_mut(obj: &mut Foo) {\n+    let x = obj.bar();\n+    let y = obj.foo();\n+    assert_eq!(x, y);\n+\n+    do_it_imm(obj, y);\n+}\n+\n+fn do_it_imm(obj: &Foo, v: uint) {\n+    let y = obj.foo();\n+    assert_eq!(v, y);\n+}\n+\n+fn main() {\n+    let mut x = 22_u;\n+    let obj = &mut x as &mut Foo;\n+    do_it_mut(obj);\n+    do_it_imm(obj, 23u);\n+    do_it_mut(obj);\n+}"}]}