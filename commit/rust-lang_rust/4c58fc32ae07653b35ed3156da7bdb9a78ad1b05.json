{"sha": "4c58fc32ae07653b35ed3156da7bdb9a78ad1b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNThmYzMyYWUwNzY1M2IzNWVkMzE1NmRhN2JkYjlhNzhhZDFiMDU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-06T02:27:36Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:12:28Z"}, "message": "Fully privatize (vs. crate visibility) functions", "tree": {"sha": "f9ff9224eeadf1aec738df2f83fab9e00d0adc4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ff9224eeadf1aec738df2f83fab9e00d0adc4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c58fc32ae07653b35ed3156da7bdb9a78ad1b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c58fc32ae07653b35ed3156da7bdb9a78ad1b05", "html_url": "https://github.com/rust-lang/rust/commit/4c58fc32ae07653b35ed3156da7bdb9a78ad1b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c58fc32ae07653b35ed3156da7bdb9a78ad1b05/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ca508608381f9594dc4a60d3c5b436660a2e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ca508608381f9594dc4a60d3c5b436660a2e19", "html_url": "https://github.com/rust-lang/rust/commit/00ca508608381f9594dc4a60d3c5b436660a2e19"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "6af524406e23d51c1f57316638d64c472ee9d4fa", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4c58fc32ae07653b35ed3156da7bdb9a78ad1b05/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c58fc32ae07653b35ed3156da7bdb9a78ad1b05/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=4c58fc32ae07653b35ed3156da7bdb9a78ad1b05", "patch": "@@ -222,13 +222,13 @@ fn buf_str(buf: &[BufEntry], left: usize, right: usize, lim: usize) -> String {\n }\n \n #[derive(Copy, Clone)]\n-crate enum PrintStackBreak {\n+enum PrintStackBreak {\n     Fits,\n     Broken(Breaks),\n }\n \n #[derive(Copy, Clone)]\n-crate struct PrintStackElem {\n+struct PrintStackElem {\n     offset: isize,\n     pbreak: PrintStackBreak\n }\n@@ -380,7 +380,7 @@ impl Printer {\n         }\n     }\n \n-    crate fn check_stream(&mut self) {\n+    fn check_stream(&mut self) {\n         debug!(\"check_stream Vec<{}, {}> with left_total={}, right_total={}\",\n                self.left, self.right, self.left_total, self.right_total);\n         if self.right_total - self.left_total > self.space {\n@@ -398,24 +398,24 @@ impl Printer {\n         }\n     }\n \n-    crate fn scan_push(&mut self, x: usize) {\n+    fn scan_push(&mut self, x: usize) {\n         debug!(\"scan_push {}\", x);\n         self.scan_stack.push_front(x);\n     }\n \n-    crate fn scan_pop(&mut self) -> usize {\n+    fn scan_pop(&mut self) -> usize {\n         self.scan_stack.pop_front().unwrap()\n     }\n \n-    crate fn scan_top(&mut self) -> usize {\n+    fn scan_top(&mut self) -> usize {\n         *self.scan_stack.front().unwrap()\n     }\n \n-    crate fn scan_pop_bottom(&mut self) -> usize {\n+    fn scan_pop_bottom(&mut self) -> usize {\n         self.scan_stack.pop_back().unwrap()\n     }\n \n-    crate fn advance_right(&mut self) {\n+    fn advance_right(&mut self) {\n         self.right += 1;\n         self.right %= self.buf_max_len;\n         // Extend the buf if necessary.\n@@ -425,7 +425,7 @@ impl Printer {\n         assert_ne!(self.right, self.left);\n     }\n \n-    crate fn advance_left(&mut self) {\n+    fn advance_left(&mut self) {\n         debug!(\"advance_left Vec<{},{}>, sizeof({})={}\", self.left, self.right,\n                self.left, self.buf[self.left].size);\n \n@@ -458,7 +458,7 @@ impl Printer {\n         }\n     }\n \n-    crate fn check_stack(&mut self, k: isize) {\n+    fn check_stack(&mut self, k: isize) {\n         if !self.scan_stack.is_empty() {\n             let x = self.scan_top();\n             match self.buf[x].token {\n@@ -486,19 +486,19 @@ impl Printer {\n         }\n     }\n \n-    crate fn print_newline(&mut self, amount: isize) {\n+    fn print_newline(&mut self, amount: isize) {\n         debug!(\"NEWLINE {}\", amount);\n         self.out.push('\\n');\n         self.pending_indentation = 0;\n         self.indent(amount);\n     }\n \n-    crate fn indent(&mut self, amount: isize) {\n+    fn indent(&mut self, amount: isize) {\n         debug!(\"INDENT {}\", amount);\n         self.pending_indentation += amount;\n     }\n \n-    crate fn get_top(&mut self) -> PrintStackElem {\n+    fn get_top(&mut self) -> PrintStackElem {\n         match self.print_stack.last() {\n             Some(el) => *el,\n             None => PrintStackElem {\n@@ -508,7 +508,7 @@ impl Printer {\n         }\n     }\n \n-    crate fn print_begin(&mut self, b: BeginToken, l: isize) {\n+    fn print_begin(&mut self, b: BeginToken, l: isize) {\n         if l > self.space {\n             let col = self.margin - self.space + b.offset;\n             debug!(\"print Begin -> push broken block at col {}\", col);\n@@ -525,14 +525,14 @@ impl Printer {\n         }\n     }\n \n-    crate fn print_end(&mut self) {\n+    fn print_end(&mut self) {\n         debug!(\"print End -> pop End\");\n         let print_stack = &mut self.print_stack;\n         assert!(!print_stack.is_empty());\n         print_stack.pop().unwrap();\n     }\n \n-    crate fn print_break(&mut self, b: BreakToken, l: isize) {\n+    fn print_break(&mut self, b: BreakToken, l: isize) {\n         let top = self.get_top();\n         match top.pbreak {\n             PrintStackBreak::Fits => {\n@@ -562,7 +562,7 @@ impl Printer {\n         }\n     }\n \n-    crate fn print_string(&mut self, s: Cow<'static, str>, len: isize) {\n+    fn print_string(&mut self, s: Cow<'static, str>, len: isize) {\n         debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n@@ -579,7 +579,7 @@ impl Printer {\n         self.out.push_str(&s);\n     }\n \n-    crate fn print(&mut self, token: Token, l: isize) {\n+    fn print(&mut self, token: Token, l: isize) {\n         debug!(\"print {} {} (remaining line space={})\", token, l,\n                self.space);\n         debug!(\"{}\", buf_str(&self.buf,"}]}