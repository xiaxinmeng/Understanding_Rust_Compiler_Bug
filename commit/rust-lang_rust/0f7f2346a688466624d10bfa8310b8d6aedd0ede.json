{"sha": "0f7f2346a688466624d10bfa8310b8d6aedd0ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmN2YyMzQ2YTY4ODQ2NjYyNGQxMGJmYTgzMTBiOGQ2YWVkZDBlZGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-16T03:35:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-16T21:23:19Z"}, "message": "Remove unnecessary note", "tree": {"sha": "7f56409172ef1530643dbf629e489fcc022973b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f56409172ef1530643dbf629e489fcc022973b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7f2346a688466624d10bfa8310b8d6aedd0ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7f2346a688466624d10bfa8310b8d6aedd0ede", "html_url": "https://github.com/rust-lang/rust/commit/0f7f2346a688466624d10bfa8310b8d6aedd0ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7f2346a688466624d10bfa8310b8d6aedd0ede/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5", "html_url": "https://github.com/rust-lang/rust/commit/970503b2e10be7c1b6aad7d3ccdcb6a2cc1ec8c5"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "ffd4560d32d8e348ca41543952b3d7a33b12948c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0f7f2346a688466624d10bfa8310b8d6aedd0ede", "patch": "@@ -771,6 +771,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 )\n                             };\n \n+                        if self.suggest_add_reference_to_arg(\n+                            &obligation,\n+                            &mut err,\n+                            &trait_ref,\n+                            points_at_arg,\n+                        ) {\n+                            self.note_obligation_cause(&mut err, obligation);\n+                            err.emit();\n+                            return;\n+                        }\n                         if let Some(ref s) = label {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n@@ -787,16 +797,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n-                        if self.suggest_add_reference_to_arg(\n-                            &obligation,\n-                            &mut err,\n-                            &trait_ref,\n-                            points_at_arg,\n-                        ) {\n-                            self.note_obligation_cause(&mut err, obligation);\n-                            err.emit();\n-                            return;\n-                        }\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n                         // Try to report a help message\n@@ -1359,7 +1359,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // somewhere else in the obligation chain. Do not suggest non-sense.\n                         return false;\n                     }\n-                    err.span.clear_span_labels();\n                     err.span_label(span, &format!(\n                         \"expected an implementor of trait `{}`\",\n                         obligation.parent_trait_ref.skip_binder(),"}, {"sha": "b88d6dbc3f3790434d0168bee1c99c2ae2a928f2", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0f7f2346a688466624d10bfa8310b8d6aedd0ede", "patch": "@@ -736,11 +736,6 @@ impl MultiSpan {\n         replacements_occurred\n     }\n \n-    /// This should be *rarely* used. Remove all the labels in this `MultiSpan`.\n-    pub fn clear_span_labels(&mut self) {\n-        self.span_labels.clear();\n-    }\n-\n     /// Returns the strings to highlight. We always ensure that there\n     /// is an entry for each of the primary spans -- for each primary\n     /// span `P`, if there is at least one label with span `P`, we return"}, {"sha": "1e0ae9bd06228a97e34c030ca4d5517b81f07391", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=0f7f2346a688466624d10bfa8310b8d6aedd0ede", "patch": "@@ -7,7 +7,6 @@ LL |     println!(\"{:?}\", line.find(pattern));\n    |                                expected an implementor of trait `std::str::pattern::Pattern<'_>`\n    |                                help: consider borrowing here: `&pattern`\n    |\n-   = help: the trait `std::ops::FnMut<(char,)>` is not implemented for `std::string::String`\n    = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `std::string::String`\n \n error: aborting due to previous error"}, {"sha": "f68cc6a37049695ff7c9379ee9a356d73af359af", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f7f2346a688466624d10bfa8310b8d6aedd0ede/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=0f7f2346a688466624d10bfa8310b8d6aedd0ede", "patch": "@@ -55,7 +55,6 @@ LL |     is_send(Box::new(TestType));\n    |             expected an implementor of trait `std::marker::Send`\n    |             help: consider borrowing here: `&Box::new(TestType)`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dummy2::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dummy2::TestType>`\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n \n@@ -85,7 +84,6 @@ LL |     is_sync(Outer2(TestType));\n    |             expected an implementor of trait `std::marker::Sync`\n    |             help: consider borrowing here: `&Outer2(TestType)`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `main::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `Outer2<main::TestType>`\n \n error: aborting due to 7 previous errors"}]}