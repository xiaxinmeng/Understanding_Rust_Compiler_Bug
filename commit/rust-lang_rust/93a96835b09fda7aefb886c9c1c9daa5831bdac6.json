{"sha": "93a96835b09fda7aefb886c9c1c9daa5831bdac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTk2ODM1YjA5ZmRhN2FlZmI4ODZjOWMxYzlkYWE1ODMxYmRhYzY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-07-21T17:12:30Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T19:47:38Z"}, "message": "use diagnostic-mutating style for `note_type_err` too\n\nthat is much cleaner than the `type_err!` style I used earlier.", "tree": {"sha": "c19dde1d24c288246b8c749cf67a8727d074b449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c19dde1d24c288246b8c749cf67a8727d074b449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a96835b09fda7aefb886c9c1c9daa5831bdac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a96835b09fda7aefb886c9c1c9daa5831bdac6", "html_url": "https://github.com/rust-lang/rust/commit/93a96835b09fda7aefb886c9c1c9daa5831bdac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a96835b09fda7aefb886c9c1c9daa5831bdac6/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4f6d56836e9f9867bb8b05efc2fffceab6b423", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4f6d56836e9f9867bb8b05efc2fffceab6b423", "html_url": "https://github.com/rust-lang/rust/commit/1e4f6d56836e9f9867bb8b05efc2fffceab6b423"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "511cc32d2e1e6cfeb47d00fa65076fba5445de64", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=93a96835b09fda7aefb886c9c1c9daa5831bdac6", "patch": "@@ -521,25 +521,25 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn report_and_explain_type_error_with_code(&self,\n-                                                   origin: TypeOrigin,\n-                                                   values: Option<ValuePairs<'tcx>>,\n-                                                   terr: &TypeError<'tcx>,\n-                                                   message: &str,\n-                                                   code: &str)\n-                                                   -> DiagnosticBuilder<'tcx>\n+    pub fn note_type_err(&self,\n+                         diag: &mut DiagnosticBuilder<'tcx>,\n+                         origin: TypeOrigin,\n+                         values: Option<ValuePairs<'tcx>>,\n+                         terr: &TypeError<'tcx>)\n     {\n         let expected_found = match values {\n             None => None,\n             Some(values) => match self.values_str(&values) {\n                 Some((expected, found)) => Some((expected, found)),\n-                None => return self.tcx.sess.diagnostic().struct_dummy() /* derived error */\n+                None => {\n+                    // Derived error. Cancel the emitter.\n+                    self.tcx.sess.diagnostic().cancel(diag);\n+                    return\n+                }\n             }\n         };\n \n         let span = origin.span();\n-        let mut err = self.tcx.sess.struct_span_err_with_code(\n-            span, message, code);\n \n         let mut is_simple_error = false;\n \n@@ -551,21 +551,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if !is_simple_error || check_old_school() {\n-                err.note_expected_found(&\"type\", &expected, &found);\n+                diag.note_expected_found(&\"type\", &expected, &found);\n             }\n         }\n \n         if !is_simple_error && check_old_school() {\n-            err.span_note(span, &format!(\"{}\", terr));\n+            diag.span_note(span, &format!(\"{}\", terr));\n         } else {\n-            err.span_label(span, &terr);\n+            diag.span_label(span, &terr);\n         }\n \n-        self.note_error_origin(&mut err, &origin);\n-        self.check_and_note_conflicting_crates(&mut err, terr, span);\n-        self.tcx.note_and_explain_type_err(&mut err, terr, span);\n-\n-        err\n+        self.note_error_origin(diag, &origin);\n+        self.check_and_note_conflicting_crates(diag, terr, span);\n+        self.tcx.note_and_explain_type_err(diag, terr, span);\n     }\n \n     pub fn report_and_explain_type_error(&self,\n@@ -574,8 +572,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          -> DiagnosticBuilder<'tcx>\n     {\n         // FIXME: do we want to use a different error code for each origin?\n-        let failure_str = trace.origin.as_failure_str();\n-        type_err!(self, trace.origin, Some(trace.values), terr, E0308, \"{}\", failure_str)\n+        let mut diag = struct_span_err!(\n+            self.tcx.sess, trace.origin.span(), E0308,\n+            \"{}\", trace.origin.as_failure_str()\n+        );\n+        self.note_type_err(&mut diag, trace.origin, Some(trace.values), terr);\n+        diag\n     }\n \n     /// Returns a string of the form \"expected `{}`, found `{}`\"."}, {"sha": "76dca1bb5b64941b61d989de99b18515c84c47dd", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=93a96835b09fda7aefb886c9c1c9daa5831bdac6", "patch": "@@ -59,16 +59,3 @@ macro_rules! span_bug {\n         $crate::session::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n     })\n }\n-\n-#[macro_export]\n-macro_rules! type_err {\n-    ($infcx:expr, $origin: expr, $values: expr, $terr: expr, $code:ident, $($message:tt)*) => ({\n-        __diagnostic_used!($code);\n-        $infcx.report_and_explain_type_error_with_code(\n-            $origin,\n-            $values,\n-            &$terr,\n-            &format!($($message)*),\n-            stringify!($code))\n-    })\n-}"}, {"sha": "67ad887530eb318ccabe450784dc9480e11e5297", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=93a96835b09fda7aefb886c9c1c9daa5831bdac6", "patch": "@@ -157,14 +157,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            let mut diag = type_err!(\n-                self,\n-                origin,\n-                values,\n-                err,\n-                E0271,\n-                \"type mismatch resolving `{}`\",\n-                predicate);\n+            let mut diag = struct_span_err!(\n+                self.tcx.sess, origin.span(), E0271,\n+                \"type mismatch resolving `{}`\", predicate\n+            );\n+            self.note_type_err(&mut diag, origin, values, err);\n             self.note_obligation_cause(&mut diag, obligation);\n             diag.emit();\n         });"}, {"sha": "9844377d0bd32f5241c1e0cb948f48597c1d5673", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a96835b09fda7aefb886c9c1c9daa5831bdac6/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=93a96835b09fda7aefb886c9c1c9daa5831bdac6", "patch": "@@ -325,13 +325,19 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\",\n                    impl_fty,\n                    trait_fty);\n-            let values = Some(infer::ValuePairs::Types(ExpectedFound {\n-                expected: trait_fty,\n-                found: impl_fty\n-            }));\n-            type_err!(infcx, origin, values, terr, E0053,\n-                      \"method `{}` has an incompatible type for trait\",\n-                      trait_m.name).emit();\n+\n+            let mut diag = struct_span_err!(\n+                tcx.sess, origin.span(), E0053,\n+                \"method `{}` has an incompatible type for trait\", trait_m.name\n+            );\n+            infcx.note_type_err(\n+                &mut diag, origin,\n+                Some(infer::ValuePairs::Types(ExpectedFound {\n+                    expected: trait_fty,\n+                    found: impl_fty\n+                })), &terr\n+            );\n+            diag.emit();\n             return\n         }\n \n@@ -476,13 +482,19 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             debug!(\"checking associated const for compatibility: impl ty {:?}, trait ty {:?}\",\n                    impl_ty,\n                    trait_ty);\n-            let values = Some(infer::ValuePairs::Types(ExpectedFound {\n-                expected: trait_ty,\n-                found: impl_ty\n-            }));\n-            type_err!(infcx, origin, values, terr, E0326,\n-                      \"implemented const `{}` has an incompatible type for \\\n-                      trait\", trait_c.name).emit();\n+            let mut diag = struct_span_err!(\n+                tcx.sess, origin.span(), E0326,\n+                \"implemented const `{}` has an incompatible type for trait\",\n+                trait_c.name\n+            );\n+            infcx.note_type_err(\n+                &mut diag, origin,\n+                Some(infer::ValuePairs::Types(ExpectedFound {\n+                    expected: trait_ty,\n+                    found: impl_ty\n+                })), &terr\n+            );\n+            diag.emit();\n         }\n     });\n }"}]}