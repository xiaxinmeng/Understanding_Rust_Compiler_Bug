{"sha": "bda32a4023b1d3f96e56e1b2fc7510324f430316", "node_id": "C_kwDOAAsO6NoAKGJkYTMyYTQwMjNiMWQzZjk2ZTU2ZTFiMmZjNzUxMDMyNGY0MzAzMTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T09:51:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T09:51:03Z"}, "message": "Auto merge of #108301 - Dylan-DPC:rollup-70zpkt0, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108000 (lint: don't suggest MaybeUninit::assume_init for uninhabited types)\n - #108105 (Explain the default panic hook better)\n - #108141 (Add rpitit queries)\n - #108272 (docs: wrong naming convention in struct keyword doc)\n - #108285 (remove unstable `pick_stable_methods_before_any_unstable` flag)\n - #108289 (Name placeholder in some region errors)\n - #108290 (Add a test for default trait method with RPITITs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fa2ad1f872ff33b9da95f2a1ab374832393d1915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2ad1f872ff33b9da95f2a1ab374832393d1915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bda32a4023b1d3f96e56e1b2fc7510324f430316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bda32a4023b1d3f96e56e1b2fc7510324f430316", "html_url": "https://github.com/rust-lang/rust/commit/bda32a4023b1d3f96e56e1b2fc7510324f430316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bda32a4023b1d3f96e56e1b2fc7510324f430316/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fee48c161a48b0c142d3998fff56faee96bd56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fee48c161a48b0c142d3998fff56faee96bd56c", "html_url": "https://github.com/rust-lang/rust/commit/3fee48c161a48b0c142d3998fff56faee96bd56c"}, {"sha": "60c0972af79e0eecaa757be53ce7cd58048eb97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c0972af79e0eecaa757be53ce7cd58048eb97f", "html_url": "https://github.com/rust-lang/rust/commit/60c0972af79e0eecaa757be53ce7cd58048eb97f"}], "stats": {"total": 752, "additions": 429, "deletions": 323}, "files": [{"sha": "8ceb176491b6f95d37934f00f2cba89dd721f99f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -280,6 +280,8 @@ pub enum DefPathData {\n     AnonConst,\n     /// An `impl Trait` type node.\n     ImplTrait,\n+    /// `impl Trait` generated associated type node.\n+    ImplTraitAssocTy,\n }\n \n impl Definitions {\n@@ -403,7 +405,7 @@ impl DefPathData {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n             Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n-            | ImplTrait => None,\n+            | ImplTrait | ImplTraitAssocTy => None,\n         }\n     }\n \n@@ -422,7 +424,7 @@ impl DefPathData {\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n             AnonConst => DefPathDataName::Anon { namespace: sym::constant },\n-            ImplTrait => DefPathDataName::Anon { namespace: sym::opaque },\n+            ImplTrait | ImplTraitAssocTy => DefPathDataName::Anon { namespace: sym::opaque },\n         }\n     }\n }"}, {"sha": "05411b52089b64cb9dc8f49d9882d0a22ae2ffea", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1095,17 +1095,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     fn pick_core(&self) -> Option<PickResult<'tcx>> {\n-        let pick = self.pick_all_method(Some(&mut vec![]));\n-\n-        // In this case unstable picking is done by `pick_method`.\n-        if !self.tcx.sess.opts.unstable_opts.pick_stable_methods_before_any_unstable {\n-            return pick;\n-        }\n-\n-        if pick.is_none() {\n-            return self.pick_all_method(None);\n-        }\n-        pick\n+        // Pick stable methods only first, and consider unstable candidates if not found.\n+        self.pick_all_method(Some(&mut vec![])).or_else(|| self.pick_all_method(None))\n     }\n \n     fn pick_all_method(\n@@ -1244,54 +1235,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         })\n     }\n \n-    fn pick_method_with_unstable(&self, self_ty: Ty<'tcx>) -> Option<PickResult<'tcx>> {\n-        debug!(\"pick_method_with_unstable(self_ty={})\", self.ty_to_string(self_ty));\n-\n-        let mut possibly_unsatisfied_predicates = Vec::new();\n-\n-        for (kind, candidates) in\n-            &[(\"inherent\", &self.inherent_candidates), (\"extension\", &self.extension_candidates)]\n-        {\n-            debug!(\"searching {} candidates\", kind);\n-            let res = self.consider_candidates(\n-                self_ty,\n-                candidates,\n-                &mut possibly_unsatisfied_predicates,\n-                Some(&mut vec![]),\n-            );\n-            if res.is_some() {\n-                return res;\n-            }\n-        }\n-\n-        for (kind, candidates) in\n-            &[(\"inherent\", &self.inherent_candidates), (\"extension\", &self.extension_candidates)]\n-        {\n-            debug!(\"searching unstable {kind} candidates\");\n-            let res = self.consider_candidates(\n-                self_ty,\n-                candidates,\n-                &mut possibly_unsatisfied_predicates,\n-                None,\n-            );\n-            if res.is_some() {\n-                return res;\n-            }\n-        }\n-\n-        self.unsatisfied_predicates.borrow_mut().extend(possibly_unsatisfied_predicates);\n-        None\n-    }\n-\n     fn pick_method(\n         &self,\n         self_ty: Ty<'tcx>,\n         mut unstable_candidates: Option<&mut Vec<(Candidate<'tcx>, Symbol)>>,\n     ) -> Option<PickResult<'tcx>> {\n-        if !self.tcx.sess.opts.unstable_opts.pick_stable_methods_before_any_unstable {\n-            return self.pick_method_with_unstable(self_ty);\n-        }\n-\n         debug!(\"pick_method(self_ty={})\", self.ty_to_string(self_ty));\n \n         let mut possibly_unsatisfied_predicates = Vec::new();"}, {"sha": "dd6a76f754ddf796f1a17f151f853f1364655502", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -129,21 +129,16 @@ pub(super) fn note_and_explain_region<'tcx>(\n     alt_span: Option<Span>,\n ) {\n     let (description, span) = match *region {\n-        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic => {\n-            msg_span_from_free_region(tcx, region, alt_span)\n+        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::RePlaceholder(_) | ty::ReStatic => {\n+            msg_span_from_named_region(tcx, region, alt_span)\n         }\n \n-        ty::RePlaceholder(_) => return,\n-\n         ty::ReError(_) => return,\n \n-        // FIXME(#13998) RePlaceholder should probably print like\n-        // ReFree rather than dumping Debug output on the user.\n-        //\n         // We shouldn't really be having unification failures with ReVar\n         // and ReLateBound though.\n         ty::ReVar(_) | ty::ReLateBound(..) | ty::ReErased => {\n-            (format!(\"lifetime {:?}\", region), alt_span)\n+            (format!(\"lifetime `{region}`\"), alt_span)\n         }\n     };\n \n@@ -157,12 +152,12 @@ fn explain_free_region<'tcx>(\n     region: ty::Region<'tcx>,\n     suffix: &str,\n ) {\n-    let (description, span) = msg_span_from_free_region(tcx, region, None);\n+    let (description, span) = msg_span_from_named_region(tcx, region, None);\n \n     label_msg_span(err, prefix, description, span, suffix);\n }\n \n-fn msg_span_from_free_region<'tcx>(\n+fn msg_span_from_named_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n     alt_span: Option<Span>,\n@@ -173,6 +168,18 @@ fn msg_span_from_free_region<'tcx>(\n             (msg, Some(span))\n         }\n         ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            name: ty::BoundRegionKind::BrNamed(def_id, name),\n+            ..\n+        }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            name: ty::BoundRegionKind::BrAnon(_, Some(span)),\n+            ..\n+        }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            name: ty::BoundRegionKind::BrAnon(_, None),\n+            ..\n+        }) => (format!(\"an anonymous lifetime\"), None),\n         _ => bug!(\"{:?}\", region),\n     }\n }"}, {"sha": "bfb1e822a26976984f64f71df33ddb36860853c7", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -776,7 +776,6 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(packed_bundled_libs, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(panic_in_drop, PanicStrategy::Abort);\n-    tracked!(pick_stable_methods_before_any_unstable, false);\n     tracked!(plt, Some(true));\n     tracked!(polonius, true);\n     tracked!(precise_enum_drop_elaboration, false);"}, {"sha": "726042479e9b04647ac9ef7d61a460c1cfb323c8", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -2635,7 +2635,13 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 cx.emit_spanned_lint(\n                     INVALID_VALUE,\n                     expr.span,\n-                    BuiltinUnpermittedTypeInit { msg, ty: conjured_ty, label: expr.span, sub },\n+                    BuiltinUnpermittedTypeInit {\n+                        msg,\n+                        ty: conjured_ty,\n+                        label: expr.span,\n+                        sub,\n+                        tcx: cx.tcx,\n+                    },\n                 );\n             }\n         }"}, {"sha": "aa6e230dc6d6d7293c06ffaa48e0c7acc6c8d17f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -8,7 +8,9 @@ use rustc_errors::{\n };\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n-use rustc_middle::ty::{PolyExistentialTraitRef, Predicate, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    inhabitedness::InhabitedPredicate, PolyExistentialTraitRef, Predicate, Ty, TyCtxt,\n+};\n use rustc_session::parse::ParseSess;\n use rustc_span::{edition::Edition, sym, symbol::Ident, Span, Symbol};\n \n@@ -419,6 +421,7 @@ pub struct BuiltinUnpermittedTypeInit<'a> {\n     pub ty: Ty<'a>,\n     pub label: Span,\n     pub sub: BuiltinUnpermittedTypeInitSub,\n+    pub tcx: TyCtxt<'a>,\n }\n \n impl<'a> DecorateLint<'a, ()> for BuiltinUnpermittedTypeInit<'_> {\n@@ -428,7 +431,13 @@ impl<'a> DecorateLint<'a, ()> for BuiltinUnpermittedTypeInit<'_> {\n     ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"ty\", self.ty);\n         diag.span_label(self.label, fluent::lint_builtin_unpermitted_type_init_label);\n-        diag.span_label(self.label, fluent::lint_builtin_unpermitted_type_init_label_suggestion);\n+        if let InhabitedPredicate::True = self.ty.inhabited_predicate(self.tcx) {\n+            // Only suggest late `MaybeUninit::assume_init` initialization if the type is inhabited.\n+            diag.span_label(\n+                self.label,\n+                fluent::lint_builtin_unpermitted_type_init_label_suggestion,\n+            );\n+        }\n         self.sub.add_to_diagnostic(diag);\n         diag\n     }"}, {"sha": "83a0e833edc1d74b78f9bb778844ef0c87fbb47f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -254,6 +254,8 @@ provide! { tcx, def_id, other, cdata,\n             .process_decoded(tcx, || panic!(\"{def_id:?} does not have trait_impl_trait_tys\")))\n      }\n \n+    associated_items_for_impl_trait_in_trait => { table_defaulted_array }\n+\n     visibility => { cdata.get_visibility(def_id.index) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {"}, {"sha": "f0dafe73c004e9c99a41c98d0591fd985c3fdf93", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1129,6 +1129,11 @@ fn should_encode_trait_impl_trait_tys(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     })\n }\n \n+// Return `false` to avoid encoding impl trait in trait, while we don't use the query.\n+fn should_encode_fn_impl_trait_in_trait<'tcx>(_tcx: TyCtxt<'tcx>, _def_id: DefId) -> bool {\n+    false\n+}\n+\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_attrs(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n@@ -1137,8 +1142,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             is_doc_hidden: false,\n         };\n         let attr_iter = tcx\n-            .hir()\n-            .attrs(tcx.hir().local_def_id_to_hir_id(def_id))\n+            .opt_local_def_id_to_hir_id(def_id)\n+            .map_or(Default::default(), |hir_id| tcx.hir().attrs(hir_id))\n             .iter()\n             .filter(|attr| analyze_attr(attr, &mut state));\n \n@@ -1211,6 +1216,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n+            if should_encode_fn_impl_trait_in_trait(tcx, def_id) {\n+                let table = tcx.associated_items_for_impl_trait_in_trait(def_id);\n+                record_defaulted_array!(self.tables.associated_items_for_impl_trait_in_trait[def_id] <- table);\n+            }\n         }\n \n         let inherent_impls = tcx.with_stable_hashing_context(|hcx| {"}, {"sha": "a7ec2d790b73a9efc962a67d2c5bedfd10d61243", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -354,6 +354,7 @@ define_tables! {\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n     inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n+    associated_items_for_impl_trait_in_trait: Table<DefIndex, LazyArray<DefId>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,"}, {"sha": "2df851a7857715d5c02764fe09feb0b3989e764a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -849,6 +849,13 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn get_fn_output(self, def_id: LocalDefId) -> Option<&'hir FnRetTy<'hir>> {\n+        match self.tcx.hir_owner(OwnerId { def_id }) {\n+            Some(Owner { node, .. }) => node.fn_decl().map(|fn_decl| &fn_decl.output),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn expect_variant(self, id: HirId) -> &'hir Variant<'hir> {\n         match self.find(id) {\n             Some(Node::Variant(variant)) => variant,"}, {"sha": "2e2ca6a27888ead9c7d4f6b931237e609acd9dda", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -121,13 +121,13 @@ pub fn provide(providers: &mut Providers) {\n         let node = owner.node();\n         Some(Owner { node, hash_without_bodies: owner.nodes.hash_without_bodies })\n     };\n-    providers.local_def_id_to_hir_id = |tcx, id| {\n+    providers.opt_local_def_id_to_hir_id = |tcx, id| {\n         let owner = tcx.hir_crate(()).owners[id].map(|_| ());\n-        match owner {\n+        Some(match owner {\n             MaybeOwner::Owner(_) => HirId::make_owner(id),\n             MaybeOwner::Phantom => bug!(\"No HirId for {:?}\", id),\n             MaybeOwner::NonOwner(hir_id) => hir_id,\n-        }\n+        })\n     };\n     providers.hir_owner_nodes = |tcx, id| tcx.hir_crate(()).owners[id.def_id].map(|i| &i.nodes);\n     providers.hir_owner_parent = |tcx, id| {"}, {"sha": "6a34e5ede193878122fa427f5243cbd1be5ba08d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -85,11 +85,10 @@ rustc_queries! {\n         desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n-    /// Gives access to the HIR ID for the given `LocalDefId` owner `key`.\n+    /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n-    /// This can be conveniently accessed by methods on `tcx.hir()`.\n-    /// Avoid calling this query directly.\n-    query local_def_id_to_hir_id(key: LocalDefId) -> hir::HirId {\n+    /// Definitions that were generated with no HIR, would be feeded to return `None`.\n+    query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n@@ -767,6 +766,26 @@ rustc_queries! {\n         desc { |tcx| \"comparing impl items against trait for `{}`\", tcx.def_path_str(impl_id) }\n     }\n \n+    /// Given `fn_def_id` of a trait or of an impl that implements a given trait:\n+    /// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n+    /// the associated items that correspond to each impl trait in return position for that trait.\n+    /// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n+    /// creates and returns the associated items that correspond to each impl trait in return position\n+    /// of the implemented trait.\n+    query associated_items_for_impl_trait_in_trait(fn_def_id: DefId) -> &'tcx [DefId] {\n+        desc { |tcx| \"creating associated items for impl trait in trait returned by `{}`\", tcx.def_path_str(fn_def_id) }\n+        cache_on_disk_if { fn_def_id.is_local() }\n+        separate_provide_extern\n+    }\n+\n+    /// Given an impl trait in trait `opaque_ty_def_id`, create and return the corresponding\n+    /// associated item.\n+    query associated_item_for_impl_trait_in_trait(opaque_ty_def_id: LocalDefId) -> LocalDefId {\n+        desc { |tcx| \"creates the associated item corresponding to the opaque type `{}`\", tcx.def_path_str(opaque_ty_def_id.to_def_id()) }\n+        cache_on_disk_if { true }\n+        separate_provide_extern\n+    }\n+\n     /// Given an `impl_id`, return the trait it implements.\n     /// Return `None` if this is an inherent impl.\n     query impl_trait_ref(impl_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'tcx>>> {"}, {"sha": "27f069275cfba8f7f5725bba1c02deeca92eca6a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -2451,6 +2451,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n+    pub fn local_def_id_to_hir_id(self, local_def_id: LocalDefId) -> HirId {\n+        self.opt_local_def_id_to_hir_id(local_def_id).unwrap()\n+    }\n+\n     pub fn trait_solver_next(self) -> bool {\n         self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n     }"}, {"sha": "1f3eb8d4832fe7481d03f9a692ed54d2bfa958a2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1567,8 +1567,6 @@ options! {\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some performance-related statistics (default: no)\"),\n-    pick_stable_methods_before_any_unstable: bool = (true, parse_bool, [TRACKED],\n-        \"try to pick stable methods first before picking any unstable methods (default: yes)\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether to use the PLT when calling into shared libraries;\n         only has effect for PIC code on systems with ELF binaries"}, {"sha": "1d299e2925631cf753bf178a6e490b64dc8337ed", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -396,6 +396,7 @@ fn encode_ty_name(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n             hir::definitions::DefPathData::CrateRoot\n             | hir::definitions::DefPathData::Use\n             | hir::definitions::DefPathData::GlobalAsm\n+            | hir::definitions::DefPathData::ImplTraitAssocTy\n             | hir::definitions::DefPathData::MacroNs(..)\n             | hir::definitions::DefPathData::LifetimeNs(..) => {\n                 bug!(\"encode_ty_name: unexpected `{:?}`\", disambiguated_data.data);"}, {"sha": "d53f0cea6b54e4ae0ff8ede57583c8cb4e05bf56", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -791,6 +791,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             | DefPathData::Use\n             | DefPathData::GlobalAsm\n             | DefPathData::Impl\n+            | DefPathData::ImplTraitAssocTy\n             | DefPathData::MacroNs(_)\n             | DefPathData::LifetimeNs(_) => {\n                 bug!(\"symbol_names: unexpected DefPathData: {:?}\", disambiguated_data.data)"}, {"sha": "d4866b5dbdd4956f8c76d0d1cda7c9bd35ff236a", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1,13 +1,18 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::definitions::DefPathData;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         associated_item,\n         associated_item_def_ids,\n         associated_items,\n+        associated_items_for_impl_trait_in_trait,\n+        associated_item_for_impl_trait_in_trait,\n         impl_item_implementor_ids,\n         ..*providers\n     };\n@@ -112,3 +117,97 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n         fn_has_self_parameter: has_self,\n     }\n }\n+\n+/// Given an `fn_def_id` of a trait or of an impl that implements a given trait:\n+/// if `fn_def_id` is the def id of a function defined inside a trait, then it creates and returns\n+/// the associated items that correspond to each impl trait in return position for that trait.\n+/// if `fn_def_id` is the def id of a function defined inside an impl that implements a trait, then it\n+/// creates and returns the associated items that correspond to each impl trait in return position\n+/// of the implemented trait.\n+fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -> &'_ [DefId] {\n+    let parent_def_id = tcx.parent(fn_def_id);\n+\n+    match tcx.def_kind(parent_def_id) {\n+        DefKind::Trait => {\n+            struct RPITVisitor {\n+                rpits: Vec<LocalDefId>,\n+            }\n+\n+            impl<'v> Visitor<'v> for RPITVisitor {\n+                fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n+                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n+                        self.rpits.push(item_id.owner_id.def_id)\n+                    }\n+                    intravisit::walk_ty(self, ty)\n+                }\n+            }\n+\n+            let mut visitor = RPITVisitor { rpits: Vec::new() };\n+\n+            if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n+                visitor.visit_fn_ret_ty(output);\n+\n+                tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n+                    tcx.associated_item_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n+                }))\n+            } else {\n+                &[]\n+            }\n+        }\n+\n+        DefKind::Impl { .. } => {\n+            let Some(trait_fn_def_id) = tcx.associated_item(fn_def_id).trait_item_def_id else { return &[] };\n+\n+            tcx.arena.alloc_from_iter(\n+                tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id).iter().map(\n+                    move |trait_assoc_def_id| {\n+                        impl_associated_item_for_impl_trait_in_trait(\n+                            tcx,\n+                            trait_assoc_def_id.expect_local(),\n+                            fn_def_id.expect_local(),\n+                        )\n+                        .to_def_id()\n+                    },\n+                ),\n+            )\n+        }\n+\n+        def_kind => bug!(\n+            \"associated_items_for_impl_trait_in_trait: {:?} should be Trait or Impl but is {:?}\",\n+            parent_def_id,\n+            def_kind\n+        ),\n+    }\n+}\n+\n+/// Given an `opaque_ty_def_id` corresponding to an impl trait in trait, create and return the\n+/// corresponding associated item.\n+fn associated_item_for_impl_trait_in_trait(\n+    tcx: TyCtxt<'_>,\n+    opaque_ty_def_id: LocalDefId,\n+) -> LocalDefId {\n+    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let trait_def_id = tcx.parent(fn_def_id);\n+    assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n+\n+    let span = tcx.def_span(opaque_ty_def_id);\n+    let trait_assoc_ty =\n+        tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n+    trait_assoc_ty.def_id()\n+}\n+\n+/// Given an `trait_assoc_def_id` that corresponds to a previously synthethized impl trait in trait\n+/// into an associated type and an `impl_def_id` corresponding to an impl block, create and return\n+/// the corresponding associated item inside the impl block.\n+fn impl_associated_item_for_impl_trait_in_trait(\n+    tcx: TyCtxt<'_>,\n+    trait_assoc_def_id: LocalDefId,\n+    impl_fn_def_id: LocalDefId,\n+) -> LocalDefId {\n+    let impl_def_id = tcx.local_parent(impl_fn_def_id);\n+\n+    let span = tcx.def_span(trait_assoc_def_id);\n+    let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n+\n+    impl_assoc_ty.def_id()\n+}"}, {"sha": "203c490fa29a6a4561b88742b9ee13fa8665b94b", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1568,7 +1568,7 @@ mod static_keyword {}\n ///\n /// # Style conventions\n ///\n-/// Structs are always written in CamelCase, with few exceptions. While the trailing comma on a\n+/// Structs are always written in UpperCamelCase, with few exceptions. While the trailing comma on a\n /// struct's list of fields can be omitted, it's usually kept for convenience in adding and\n /// removing fields down the line.\n ///"}, {"sha": "e59f32af77df8bdf2428e2d348707154f0220431", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -95,13 +95,16 @@ impl Default for Hook {\n \n static HOOK: RwLock<Hook> = RwLock::new(Hook::Default);\n \n-/// Registers a custom panic hook, replacing any that was previously registered.\n+/// Registers a custom panic hook, replacing the previously registered hook.\n ///\n /// The panic hook is invoked when a thread panics, but before the panic runtime\n /// is invoked. As such, the hook will run with both the aborting and unwinding\n-/// runtimes. The default hook prints a message to standard error and generates\n-/// a backtrace if requested, but this behavior can be customized with the\n-/// `set_hook` and [`take_hook`] functions.\n+/// runtimes.\n+///\n+/// The default hook, which is registered at startup, prints a message to standard error and\n+/// generates a backtrace if requested. This behavior can be customized using the `set_hook` function.\n+/// The current hook can be retrieved while reinstating the default hook with the [`take_hook`]\n+/// function.\n ///\n /// [`take_hook`]: ./fn.take_hook.html\n ///\n@@ -143,13 +146,14 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n     drop(old);\n }\n \n-/// Unregisters the current panic hook, returning it.\n+/// Unregisters the current panic hook and returns it, registering the default hook\n+/// in its place.\n ///\n /// *See also the function [`set_hook`].*\n ///\n /// [`set_hook`]: ./fn.set_hook.html\n ///\n-/// If no custom hook is registered, the default hook will be returned.\n+/// If the default hook is registered it will be returned, but remain registered.\n ///\n /// # Panics\n ///"}, {"sha": "58b2f92d1504066cc28cb79c8f5bb19a96e11179", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 176, "deletions": 177, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1,76 +1,76 @@\n-    -Z                          allow-features=val -- only allow the listed language features to be enabled in code (comma separated)\n-    -Z                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n-    -Z                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n-    -Z                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n-    -Z               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n-    -Z                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n-    -Z                             box-noalias=val -- emit noalias metadata for box (default: yes)\n-    -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n-    -Z                           cf-protection=val -- instrument control-flow architecture protection\n-    -Z               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n-    -Z                         codegen-backend=val -- the backend to use\n-    -Z                             combine-cgu=val -- combine CGUs into a single one\n-    -Z                              crate-attr=val -- inject the given attribute in the crate\n-    -Z                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n-    -Z                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n-    -Z                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n-    -Z                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n-    -Z                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n-    -Z                        diagnostic-width=val -- set the current output width for diagnostic truncation\n-    -Z                                 dlltool=val -- import library generation tool (windows-gnu only)\n-    -Z                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n-    -Z                           drop-tracking=val -- enables drop tracking in generators (default: no)\n-    -Z                       drop-tracking-mir=val -- enables drop tracking on MIR in generators (default: no)\n-    -Z                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n-    -Z                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n-    -Z                  dump-drop-tracking-cfg=val -- dump drop-tracking control-flow graph as a `.dot` file (default: no)\n-    -Z                                dump-mir=val -- dump MIR state to file.\n+    -Z                        allow-features=val -- only allow the listed language features to be enabled in code (comma separated)\n+    -Z                     always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -Z                          asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -Z                     assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -Z             assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -Z                    binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -Z                           box-noalias=val -- emit noalias metadata for box (default: yes)\n+    -Z                     branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -Z                         cf-protection=val -- instrument control-flow architecture protection\n+    -Z             cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -Z                       codegen-backend=val -- the backend to use\n+    -Z                           combine-cgu=val -- combine CGUs into a single one\n+    -Z                            crate-attr=val -- inject the given attribute in the crate\n+    -Z              debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -Z                          debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -Z               deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -Z                dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -Z                             dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -Z                      diagnostic-width=val -- set the current output width for diagnostic truncation\n+    -Z                               dlltool=val -- import library generation tool (windows-gnu only)\n+    -Z               dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -Z                         drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -Z                     drop-tracking-mir=val -- enables drop tracking on MIR in generators (default: no)\n+    -Z                      dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -Z                        dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -Z                dump-drop-tracking-cfg=val -- dump drop-tracking control-flow graph as a `.dot` file (default: no)\n+    -Z                              dump-mir=val -- dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:\n         `all` matches all passes and functions,\n         `foo` matches all passes for functions whose name contains 'foo',\n         `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n         `foo | bar` all passes for function names containing 'foo' or 'bar'.\n-    -Z                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n-    -Z                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n-    -Z            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n-    -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n-    -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n-    -Z                         dump-mono-stats=val -- output statistics about monomorphization collection\n-    -Z                  dump-mono-stats-format=val -- the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\n-    -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n-    -Z                               dylib-lto=val -- enables LTO for dylib crate type\n-    -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n-    -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n-    -Z               export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries\n-    -Z                   extra-const-ub-checks=val -- turns on more checks to detect const UB, which can be slow (default: no)\n-    -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n-    -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n-    -Z                                    fuel=val -- set the optimization fuel quota for a crate\n-    -Z                       function-sections=val -- whether each function should go in its own section\n-    -Z                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n-    -Z                                  gcc-ld=val -- implementation of ld used by cc\n-    -Z                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n-    -Z                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n-    -Z                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n-    -Z                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n-    -Z                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n-    -Z                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n-    -Z                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n-    -Z              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n-    -Z                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n-    -Z                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n-    -Z                             inline-llvm=val -- enable LLVM inlining (default: yes)\n-    -Z                              inline-mir=val -- enable MIR inlining (default: no)\n-    -Z               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n-    -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n-    -Z                             input-stats=val -- gather statistics about the input (default: no)\n-    -Z                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+    -Z                     dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -Z                          dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -Z          dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -Z                     dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -Z                     dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -Z                       dump-mono-stats=val -- output statistics about monomorphization collection\n+    -Z                dump-mono-stats-format=val -- the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\n+    -Z                         dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n+    -Z                             dylib-lto=val -- enables LTO for dylib crate type\n+    -Z                      emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -Z                         emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n+    -Z             export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries\n+    -Z                 extra-const-ub-checks=val -- turns on more checks to detect const UB, which can be slow (default: no)\n+    -Z                           fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -Z            force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -Z                                  fuel=val -- set the optimization fuel quota for a crate\n+    -Z                     function-sections=val -- whether each function should go in its own section\n+    -Z                  future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -Z                                gcc-ld=val -- implementation of ld used by cc\n+    -Z                    graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -Z                         graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -Z                             hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -Z              human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -Z                      identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -Z              incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -Z                      incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -Z            incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -Z                incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -Z                    inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -Z                           inline-llvm=val -- enable LLVM inlining (default: yes)\n+    -Z                            inline-mir=val -- enable MIR inlining (default: no)\n+    -Z             inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -Z                  inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -Z                           input-stats=val -- gather statistics about the input (default: no)\n+    -Z                   instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n         `=all` (implicit value)\n         `=except-unused-generics`\n         `=except-unused-functions`\n         `=off` (default)\n-    -Z                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n-    -Z                         instrument-xray=val -- insert function instrument code for XRay-based tracing (default: no)\n+    -Z                     instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -Z                       instrument-xray=val -- insert function instrument code for XRay-based tracing (default: no)\n          Optional extra settings:\n          `=always`\n          `=never`\n@@ -79,125 +79,124 @@\n          `=skip-entry`\n          `=skip-exit`\n          Multiple options can be combined with commas.\n-    -Z                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n-    -Z                             layout-seed=val -- seed layout randomization\n-    -Z                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n-    -Z                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n-    -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n-    -Z                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n-    -Z                         location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n-    -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n-    -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n-    -Z             maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)\n-    -Z                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n-    -Z                              meta-stats=val -- gather metadata statistics (default: no)\n-    -Z                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n-    -Z                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n-    -Z                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n-    -Z        mir-pretty-relative-line-numbers=val -- use line numbers relative to the function in mir pretty printing\n-    -Z                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n-    -Z                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n-    -Z                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n-    -Z                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n-    -Z                             no-analysis=val -- parse and expand the source, but run no analysis\n-    -Z                              no-codegen=val -- run all passes except codegen; no output\n-    -Z              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n-    -Z                          no-jump-tables=val -- disable the jump tables and lookup tables that can be generated from a switch case lowering\n-    -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n-    -Z                                 no-link=val -- compile without linking\n-    -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n-    -Z                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n-    -Z                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n-    -Z                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n-    -Z                                     oom=val -- panic strategy for out-of-memory handling\n-    -Z                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n-    -Z                     packed-bundled-libs=val -- change rlib format to store native libraries as archives\n-    -Z                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n-    -Z                           panic-in-drop=val -- panic strategy for panics in drops\n-    -Z                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n-    -Z                              perf-stats=val -- print some performance-related statistics (default: no)\n-    -Z pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n-    -Z                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+    -Z                     keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -Z                           layout-seed=val -- seed layout randomization\n+    -Z                 link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -Z                             link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -Z                          llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -Z                       llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -Z                       location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n+    -Z                                    ls=val -- list the symbols defined by a library crate (default: no)\n+    -Z                       macro-backtrace=val -- show macro backtraces (default: no)\n+    -Z           maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)\n+    -Z                       merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -Z                            meta-stats=val -- gather metadata statistics (default: no)\n+    -Z                        mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -Z                     mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -Z                         mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -Z      mir-pretty-relative-line-numbers=val -- use line numbers relative to the function in mir pretty printing\n+    -Z                       move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -Z                       mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -Z                             nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -Z                         nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -Z                           no-analysis=val -- parse and expand the source, but run no analysis\n+    -Z                            no-codegen=val -- run all passes except codegen; no output\n+    -Z            no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -Z                        no-jump-tables=val -- disable the jump tables and lookup tables that can be generated from a switch case lowering\n+    -Z                         no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -Z                               no-link=val -- compile without linking\n+    -Z                      no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -Z                   no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -Z               no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -Z                        normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -Z                                   oom=val -- panic strategy for out-of-memory handling\n+    -Z                osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -Z                   packed-bundled-libs=val -- change rlib format to store native libraries as archives\n+    -Z                     panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -Z                         panic-in-drop=val -- panic strategy for panics in drops\n+    -Z                            parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -Z                            perf-stats=val -- print some performance-related statistics (default: no)\n+    -Z                                   plt=val -- whether to use the PLT when calling into shared libraries;\n         only has effect for PIC code on systems with ELF binaries\n         (default: PLT is disabled if full relro is enabled)\n-    -Z                                polonius=val -- enable polonius-based borrow-checker (default: no)\n-    -Z                            polymorphize=val -- perform polymorphization analysis\n-    -Z                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n-    -Z                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n-    -Z           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n-    -Z                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n-    -Z                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n-    -Z                        print-mono-items=val -- print the result of the monomorphization collection pass\n-    -Z                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n-    -Z                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n-    -Z           proc-macro-execution-strategy=val -- how to run proc-macro code (default: same-thread)\n-    -Z                                 profile=val -- insert profiling code (default: no)\n-    -Z                        profile-closures=val -- profile size of closures\n-    -Z                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n-    -Z                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n-    -Z                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n-    -Z                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n-    -Z                        randomize-layout=val -- randomize the layout of types (default: no)\n-    -Z                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n-    -Z                             relro-level=val -- choose which RELRO level to use\n-    -Z                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n-    -Z                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n-    -Z                               sanitizer=val -- use a sanitizer\n-    -Z          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n-    -Z                       sanitizer-recover=val -- enable recovery for selected sanitizers\n-    -Z                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n-    -Z                            self-profile=val -- run the self profiler and output the raw event data\n-    -Z                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+    -Z                              polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -Z                          polymorphize=val -- perform polymorphization analysis\n+    -Z                          pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -Z                         pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -Z         precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -Z                            print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -Z                     print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -Z                      print-mono-items=val -- print the result of the monomorphization collection pass\n+    -Z                      print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -Z                  proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -Z         proc-macro-execution-strategy=val -- how to run proc-macro code (default: same-thread)\n+    -Z                               profile=val -- insert profiling code (default: no)\n+    -Z                      profile-closures=val -- profile size of closures\n+    -Z                          profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -Z                    profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -Z                      profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -Z                       query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -Z                      randomize-layout=val -- randomize the layout of types (default: no)\n+    -Z                 relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -Z                           relro-level=val -- choose which RELRO level to use\n+    -Z                      remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -Z                   report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -Z                             sanitizer=val -- use a sanitizer\n+    -Z        sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -Z                     sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -Z                saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -Z                          self-profile=val -- run the self profiler and output the raw event data\n+    -Z                  self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n         `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n         `instructions:u` (retired instructions, userspace-only)\n         `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n-    -Z                     self-profile-events=val -- specify the events recorded by the self profiler;\n+    -Z                   self-profile-events=val -- specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n                      query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n-    -Z                          share-generics=val -- make the current crate share its generic instantiations\n-    -Z                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n-    -Z         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n-    -Z                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n-    -Z                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n-    -Z                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n-    -Z                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+    -Z                        share-generics=val -- make the current crate share its generic instantiations\n+    -Z                             show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -Z       simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -Z                            span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -Z                     span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -Z                  split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -Z                      split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n         (default: `split`)\n \n         `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n                  file which is ignored by the linker\n         `single`: sections which do not require relocation are written into object file but ignored\n                   by the linker\n-    -Z                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n-    -Z                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n-    -Z                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n-    -Z                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n-    -Z                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n-    -Z                                   teach=val -- show extended diagnostic help (default: no)\n-    -Z                               temps-dir=val -- the directory the intermediate files are written to\n-    -Z                           terminal-urls=val -- use the OSC 8 hyperlink terminal specification to print hyperlinks in the compiler output\n-    -Z                                 thinlto=val -- enable ThinLTO when possible\n-    -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n-    -Z                                 threads=val -- use a thread pool with N threads\n-    -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n-    -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n-    -Z                   tiny-const-eval-limit=val -- sets a tiny, non-configurable limit for const eval; useful for compiler tests\n-    -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n-    -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n-    -Z                       track-diagnostics=val -- tracks where in rustc a diagnostic was emitted\n-    -Z                            trait-solver=val -- specify the trait solver mode used by rustc (default: classic)\n-    -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n-    -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n-    -Z                          translate-lang=val -- language identifier for diagnostic output\n-    -Z   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n-    -Z                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n-    -Z                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n-    -Z                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n-    -Z                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n-    -Z                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n-    -Z            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n-    -Z          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n-    -Z                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+    -Z                    src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -Z                       stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -Z                    strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -Z                                 strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -Z               symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -Z                                 teach=val -- show extended diagnostic help (default: no)\n+    -Z                             temps-dir=val -- the directory the intermediate files are written to\n+    -Z                         terminal-urls=val -- use the OSC 8 hyperlink terminal specification to print hyperlinks in the compiler output\n+    -Z                               thinlto=val -- enable ThinLTO when possible\n+    -Z                         thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -Z                               threads=val -- use a thread pool with N threads\n+    -Z                      time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -Z                           time-passes=val -- measure time of each rustc pass (default: no)\n+    -Z                 tiny-const-eval-limit=val -- sets a tiny, non-configurable limit for const eval; useful for compiler tests\n+    -Z                             tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -Z                          trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -Z                     track-diagnostics=val -- tracks where in rustc a diagnostic was emitted\n+    -Z                          trait-solver=val -- specify the trait solver mode used by rustc (default: classic)\n+    -Z              translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -Z      translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -Z                        translate-lang=val -- language identifier for diagnostic output\n+    -Z translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -Z                      trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -Z                      treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -Z                 trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -Z                              tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -Z                            ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -Z          uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -Z        unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -Z                              unpretty=val -- present the input source, unstable (and less-pretty) variants;\n         `normal`, `identified`,\n         `expanded`, `expanded,identified`,\n         `expanded,hygiene` (with internal representations),\n@@ -207,11 +206,11 @@\n         `hir,typed` (HIR with types for each node),\n         `hir-tree` (dump the raw HIR),\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n-    -Z                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n-    -Z                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n-    -Z                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n-    -Z                            validate-mir=val -- validate MIR after each transformation\n-    -Z                                 verbose=val -- in general, enable more debug printouts (default: no)\n-    -Z                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n-    -Z            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n-    -Z                         wasi-exec-model=val -- whether to build a wasi command or reactor\n+    -Z                      unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -Z                      unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -Z                     use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -Z                          validate-mir=val -- validate MIR after each transformation\n+    -Z                               verbose=val -- in general, enable more debug printouts (default: no)\n+    -Z                        verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -Z          virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -Z                       wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "69fb1a59d4f39d284221fda381d9f992bd418ded", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -2,10 +2,7 @@ warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n    = note: `#[warn(invalid_value)]` on by default\n@@ -40,10 +37,7 @@ warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                          |\n-   |                                          this code causes undefined behavior when executed\n-   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: in this struct field\n   --> $DIR/validate_uninhabited_zsts.rs:16:22"}, {"sha": "69fb1a59d4f39d284221fda381d9f992bd418ded", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -2,10 +2,7 @@ warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n    = note: `#[warn(invalid_value)]` on by default\n@@ -40,10 +37,7 @@ warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                          |\n-   |                                          this code causes undefined behavior when executed\n-   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: in this struct field\n   --> $DIR/validate_uninhabited_zsts.rs:16:22"}, {"sha": "8c50cc29586455cad5f7ff2d4890e76b3f32aaab", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+// This didn't work in the previous default RPITIT method hack attempt\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+trait Foo {\n+    fn bar(x: bool) -> impl Sized {\n+        if x {\n+            let _: u32 = Self::bar(!x);\n+        }\n+        Default::default()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5e18605aa4cb20110836dfe2d466880ba66938a9", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-constraint.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "57531b0968f1ebe4ba82576847c2976f26dff093", "filename": "tests/ui/lint/invalid_value.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_value.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -61,54 +61,39 @@ error: the type `!` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:65:23\n    |\n LL |         let _val: ! = mem::zeroed();\n-   |                       ^^^^^^^^^^^^^\n-   |                       |\n-   |                       this code causes undefined behavior when executed\n-   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                       ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n \n error: the type `!` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:66:23\n    |\n LL |         let _val: ! = mem::uninitialized();\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n-   |                       |\n-   |                       this code causes undefined behavior when executed\n-   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                       ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:68:30\n    |\n LL |         let _val: (i32, !) = mem::zeroed();\n-   |                              ^^^^^^^^^^^^^\n-   |                              |\n-   |                              this code causes undefined behavior when executed\n-   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                              ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:69:30\n    |\n LL |         let _val: (i32, !) = mem::uninitialized();\n-   |                              ^^^^^^^^^^^^^^^^^^^^\n-   |                              |\n-   |                              this code causes undefined behavior when executed\n-   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                              ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n    = note: integers must be initialized\n \n error: the type `Void` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:71:26\n    |\n LL |         let _val: Void = mem::zeroed();\n-   |                          ^^^^^^^^^^^^^\n-   |                          |\n-   |                          this code causes undefined behavior when executed\n-   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                          ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:12:1\n@@ -120,10 +105,7 @@ error: the type `Void` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:72:26\n    |\n LL |         let _val: Void = mem::uninitialized();\n-   |                          ^^^^^^^^^^^^^^^^^^^^\n-   |                          |\n-   |                          this code causes undefined behavior when executed\n-   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                          ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:12:1\n@@ -405,10 +387,7 @@ error: the type `TwoUninhabited` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:104:36\n    |\n LL |         let _val: TwoUninhabited = mem::zeroed();\n-   |                                    ^^^^^^^^^^^^^\n-   |                                    |\n-   |                                    this code causes undefined behavior when executed\n-   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                    ^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:42:1\n@@ -420,10 +399,7 @@ error: the type `TwoUninhabited` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:105:36\n    |\n LL |         let _val: TwoUninhabited = mem::uninitialized();\n-   |                                    ^^^^^^^^^^^^^^^^^^^^\n-   |                                    |\n-   |                                    this code causes undefined behavior when executed\n-   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                    ^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/invalid_value.rs:42:1"}, {"sha": "40429fe756f460f7031000be8dab39797430524a", "filename": "tests/ui/object-safety/object-safety-supertrait-mentions-GAT.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1,5 +1,10 @@\n error[E0311]: the parameter type `Self` may not live long enough\n    |\n+note: the parameter type `Self` must be valid for the lifetime `'a` as defined here...\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:9:26\n+   |\n+LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n+   |                          ^^\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound"}, {"sha": "437053a4476e18b8425f0af591508e2357a2a61f", "filename": "tests/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -53,10 +53,7 @@ warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:12:31\n    |\n LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                               |\n-   |                               this code causes undefined behavior when executed\n-   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/uninhabited-static.rs:4:1\n@@ -75,10 +72,7 @@ warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:16:32\n    |\n LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                |\n-   |                                this code causes undefined behavior when executed\n-   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ this code causes undefined behavior when executed\n    |\n note: enums with no inhabited variants have no valid value\n   --> $DIR/uninhabited-static.rs:4:1"}]}