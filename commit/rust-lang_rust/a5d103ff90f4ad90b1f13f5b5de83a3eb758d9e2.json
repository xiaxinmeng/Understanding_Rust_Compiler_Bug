{"sha": "a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZDEwM2ZmOTBmNGFkOTBiMWYxM2Y1YjVkZTgzYTNlYjc1OGQ5ZTI=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-05T15:26:33Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-05T15:35:45Z"}, "message": "record upvar into GeneratorInteriorTypeCause", "tree": {"sha": "e3f78d7e2369485cc3d7215711b17589601a31aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f78d7e2369485cc3d7215711b17589601a31aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "html_url": "https://github.com/rust-lang/rust/commit/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb81c429ebd45f9ba2b1810f548cf59a45feb222", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb81c429ebd45f9ba2b1810f548cf59a45feb222", "html_url": "https://github.com/rust-lang/rust/commit/fb81c429ebd45f9ba2b1810f548cf59a45feb222"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "9525910e39c6fcba3967cebcea6b13157bd3521f", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "patch": "@@ -1454,26 +1454,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n                 );\n \n-            span.push_span_label(\n-                target_span,\n-                format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-            );\n-\n-            // If available, use the scope span to annotate the drop location.\n-            if let Some(scope_span) = scope_span {\n                 span.push_span_label(\n-                    source_map.end_point(*scope_span),\n-                    format!(\"`{}` is later dropped here\", snippet),\n+                    target_span,\n+                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n                 );\n-            }\n \n-            err.span_note(\n-                span,\n-                &format!(\n-                    \"{} {} as this value is used across {}\",\n-                    future_or_generator, trait_explanation, an_await_or_yield\n-                ),\n-            );\n+                // If available, use the scope span to annotate the drop location.\n+                if let Some(scope_span) = scope_span {\n+                    span.push_span_label(\n+                        source_map.end_point(*scope_span),\n+                        format!(\"`{}` is later dropped here\", snippet),\n+                    );\n+                }\n+\n+                err.span_note(\n+                    span,\n+                    &format!(\n+                        \"{} {} as this value is used across {}\",\n+                        future_or_generator, trait_explanation, an_await_or_yield\n+                    ),\n+                );\n+            }\n         }\n \n         if let Some(expr_id) = expr {"}, {"sha": "aa4abcd7224268fcca52d7432d75e6d46d97fd5c", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "patch": "@@ -16,6 +16,7 @@ use rustc_span::Span;\n \n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n+    closure_def_id: DefId,\n     types: FxHashMap<ty::GeneratorInteriorTypeCause<'tcx>, usize>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n@@ -30,6 +31,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         scope: Option<region::Scope>,\n         expr: Option<&'tcx Expr<'tcx>>,\n         source_span: Span,\n+        is_upvar: bool,\n     ) {\n         use rustc_span::DUMMY_SP;\n \n@@ -96,7 +98,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n-                        yield_span: yield_data.span,\n+                        yield_span: Some(yield_data.span),\n                         expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);\n@@ -117,6 +119,20 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                     unresolved_type, unresolved_type_span\n                 );\n                 self.prev_unresolved_span = unresolved_type_span;\n+            } else {\n+                if is_upvar {\n+                    let entries = self.types.len();\n+                    let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));\n+                    self.types\n+                        .entry(ty::GeneratorInteriorTypeCause {\n+                            span: source_span,\n+                            ty: &ty,\n+                            scope_span,\n+                            yield_span: None,\n+                            expr: expr.map(|e| e.hir_id),\n+                        })\n+                        .or_insert(entries);\n+                }\n             }\n         }\n     }\n@@ -130,8 +146,12 @@ pub fn resolve_interior<'a, 'tcx>(\n     kind: hir::GeneratorKind,\n ) {\n     let body = fcx.tcx.hir().body(body_id);\n+\n+    let closure_def_id = fcx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+\n     let mut visitor = InteriorVisitor {\n         fcx,\n+        closure_def_id,\n         types: FxHashMap::default(),\n         region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         expr_count: 0,\n@@ -223,7 +243,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         if let PatKind::Binding(..) = pat.kind {\n             let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n             let ty = self.fcx.tables.borrow().pat_ty(pat);\n-            self.record(ty, Some(scope), None, pat.span);\n+            self.record(ty, Some(scope), None, pat.span, false);\n         }\n     }\n \n@@ -264,7 +284,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n         if let Some(adjusted_ty) = self.fcx.tables.borrow().expr_ty_adjusted_opt(expr) {\n-            self.record(adjusted_ty, scope, Some(expr), expr.span);\n+            self.record(adjusted_ty, scope, Some(expr), expr.span, false);\n         }\n \n         // Also record the unadjusted type (which is the only type if\n@@ -292,9 +312,17 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // The type table might not have information for this expression\n         // if it is in a malformed scope. (#66387)\n         if let Some(ty) = self.fcx.tables.borrow().expr_ty_opt(expr) {\n-            self.record(ty, scope, Some(expr), expr.span);\n+            self.record(ty, scope, Some(expr), expr.span, false);\n         } else {\n             self.fcx.tcx.sess.delay_span_bug(expr.span, \"no type for node\");\n         }\n+\n+        if let Some(upvars) = self.fcx.tcx.upvars(self.closure_def_id) {\n+            for (upvar_id, upvar) in upvars.iter() {\n+                let upvar_ty = self.fcx.tables.borrow().node_type(*upvar_id);\n+                debug!(\"type of upvar: {:?}\", upvar_ty);\n+                self.record(upvar_ty, scope, Some(expr), upvar.span, true);\n+            }\n+        }\n     }\n }"}, {"sha": "9bbaacd2f11b92252cb6c1339661068ee28f1eda", "filename": "src/test/ui/async-await/issue-70818.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs?ref=a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "patch": "@@ -1,5 +1,7 @@\n // edition 2018\n \n-fn d<T: Sized>(t: T) -> impl std::future::Future<Output = T> + Send { //~ Error `T` cannot be sent between threads safely\n-    async { t }\n+fn foo<T: Sized>(ty: T) -> impl std::future::Future<Output = T> + Send { //~ Error `T` cannot be sent between threads safely\n+    async { ty }\n }\n+\n+fn main() {}"}]}