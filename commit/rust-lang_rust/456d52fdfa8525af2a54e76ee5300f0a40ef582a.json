{"sha": "456d52fdfa8525af2a54e76ee5300f0a40ef582a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NmQ1MmZkZmE4NTI1YWYyYTU0ZTc2ZWU1MzAwZjBhNDBlZjU4MmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-01T21:14:28Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-02T18:33:13Z"}, "message": "Check receiver type properly", "tree": {"sha": "e8cd093624ac3ccc9926856dc8db0d4daa0d0b8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8cd093624ac3ccc9926856dc8db0d4daa0d0b8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/456d52fdfa8525af2a54e76ee5300f0a40ef582a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/456d52fdfa8525af2a54e76ee5300f0a40ef582a", "html_url": "https://github.com/rust-lang/rust/commit/456d52fdfa8525af2a54e76ee5300f0a40ef582a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/456d52fdfa8525af2a54e76ee5300f0a40ef582a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "599dab59824b164b1c24e2e51adeae1ac1307964", "url": "https://api.github.com/repos/rust-lang/rust/commits/599dab59824b164b1c24e2e51adeae1ac1307964", "html_url": "https://github.com/rust-lang/rust/commit/599dab59824b164b1c24e2e51adeae1ac1307964"}], "stats": {"total": 99, "additions": 80, "deletions": 19}, "files": [{"sha": "0889a6bf9e777a3726aa771f914e2e87d2118206", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=456d52fdfa8525af2a54e76ee5300f0a40ef582a", "patch": "@@ -36,11 +36,13 @@ use ra_prof::profile;\n use super::{\n     primitive::{FloatTy, IntTy},\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty, TypeCtor,\n-    TypeWalk, Uncertain,\n+    ApplicationTy, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n+    Uncertain,\n };\n use crate::{db::HirDatabase, infer::diagnostics::InferenceDiagnostic};\n \n+pub use unify::unify;\n+\n macro_rules! ty_app {\n     ($ctor:pat, $param:pat) => {\n         crate::Ty::Apply(crate::ApplicationTy { ctor: $ctor, parameters: $param })"}, {"sha": "9daa77cfa92d9756a551f8d77676e1bebe5d34cc", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=456d52fdfa8525af2a54e76ee5300f0a40ef582a", "patch": "@@ -10,7 +10,7 @@ use test_utils::tested_by;\n \n use crate::{autoderef, db::HirDatabase, Substs, Ty, TypeCtor, TypeWalk};\n \n-use super::{InEnvironment, InferTy, InferenceContext, unify::TypeVarValue};\n+use super::{unify::TypeVarValue, InEnvironment, InferTy, InferenceContext};\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// Unify two types, but may coerce the first one to the second one"}, {"sha": "8ed2a6090a8df1728a3382dce58f6c9ad5d1ce8f", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=456d52fdfa8525af2a54e76ee5300f0a40ef582a", "patch": "@@ -167,13 +167,19 @@ impl<T> Canonicalized<T> {\n     }\n }\n \n-pub fn unify(ty1: Canonical<&Ty>, ty2: &Ty) -> Substs {\n+pub fn unify(ty1: Canonical<&Ty>, ty2: &Ty) -> Option<Substs> {\n     let mut table = InferenceTable::new();\n-    let vars = Substs::builder(ty1.num_vars)\n-        .fill(std::iter::repeat_with(|| table.new_type_var())).build();\n+    let vars =\n+        Substs::builder(ty1.num_vars).fill(std::iter::repeat_with(|| table.new_type_var())).build();\n     let ty_with_vars = ty1.value.clone().subst_bound_vars(&vars);\n-    table.unify(&ty_with_vars, ty2);\n-    Substs::builder(ty1.num_vars).fill(vars.iter().map(|v| table.resolve_ty_completely(v.clone()))).build()\n+    if !table.unify(&ty_with_vars, ty2) {\n+        return None;\n+    }\n+    Some(\n+        Substs::builder(ty1.num_vars)\n+            .fill(vars.iter().map(|v| table.resolve_ty_completely(v.clone())))\n+            .build(),\n+    )\n }\n \n #[derive(Clone, Debug)]\n@@ -183,9 +189,7 @@ pub(crate) struct InferenceTable {\n \n impl InferenceTable {\n     pub fn new() -> Self {\n-        InferenceTable {\n-            var_unification_table: InPlaceUnificationTable::new(),\n-        }\n+        InferenceTable { var_unification_table: InPlaceUnificationTable::new() }\n     }\n \n     pub fn new_type_var(&mut self) -> Ty {"}, {"sha": "97281cf15c643c48e88699ed8e7f5b98cc56c5a5", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456d52fdfa8525af2a54e76ee5300f0a40ef582a/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=456d52fdfa8525af2a54e76ee5300f0a40ef582a", "patch": "@@ -7,19 +7,20 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use hir_def::{\n     lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, AstItemDef,\n-    FunctionId, HasModule, ImplId, TraitId,\n+    FunctionId, HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n use ra_prof::profile;\n use rustc_hash::FxHashMap;\n \n+use super::Substs;\n use crate::{\n     autoderef,\n     db::HirDatabase,\n     primitive::{FloatBitness, Uncertain},\n     utils::all_super_traits,\n-    Canonical, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor,\n+    Canonical, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -231,21 +232,42 @@ fn iterate_method_candidates_autoref<T>(\n     name: Option<&Name>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n-    if let Some(result) = iterate_method_candidates_by_receiver(&deref_chain[0], &deref_chain[1..], db, resolver, name, &mut callback) {\n+    if let Some(result) = iterate_method_candidates_by_receiver(\n+        &deref_chain[0],\n+        &deref_chain[1..],\n+        db,\n+        resolver,\n+        name,\n+        &mut callback,\n+    ) {\n         return Some(result);\n     }\n     let refed = Canonical {\n         num_vars: deref_chain[0].num_vars,\n         value: Ty::apply_one(TypeCtor::Ref(Mutability::Shared), deref_chain[0].value.clone()),\n     };\n-    if let Some(result) = iterate_method_candidates_by_receiver(&refed, deref_chain, db, resolver, name, &mut callback) {\n+    if let Some(result) = iterate_method_candidates_by_receiver(\n+        &refed,\n+        deref_chain,\n+        db,\n+        resolver,\n+        name,\n+        &mut callback,\n+    ) {\n         return Some(result);\n     }\n     let ref_muted = Canonical {\n         num_vars: deref_chain[0].num_vars,\n         value: Ty::apply_one(TypeCtor::Ref(Mutability::Mut), deref_chain[0].value.clone()),\n     };\n-    if let Some(result) = iterate_method_candidates_by_receiver(&ref_muted, deref_chain, db, resolver, name, &mut callback) {\n+    if let Some(result) = iterate_method_candidates_by_receiver(\n+        &ref_muted,\n+        deref_chain,\n+        db,\n+        resolver,\n+        name,\n+        &mut callback,\n+    ) {\n         return Some(result);\n     }\n     None\n@@ -264,7 +286,14 @@ fn iterate_method_candidates_by_receiver<T>(\n     // be found in any of the derefs of receiver_ty, so we have to go through\n     // that.\n     for self_ty in std::iter::once(receiver_ty).chain(deref_chain) {\n-        if let Some(result) = iterate_method_candidates_inner(self_ty, db, resolver, name, Some(receiver_ty), &mut callback) {\n+        if let Some(result) = iterate_method_candidates_inner(\n+            self_ty,\n+            db,\n+            resolver,\n+            name,\n+            Some(receiver_ty),\n+            &mut callback,\n+        ) {\n             return Some(result);\n         }\n     }\n@@ -280,7 +309,9 @@ fn iterate_method_candidates_inner<T>(\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     let krate = resolver.krate()?;\n-    if let Some(result) = iterate_inherent_methods(self_ty, db, name, receiver_ty, krate, &mut callback) {\n+    if let Some(result) =\n+        iterate_inherent_methods(self_ty, db, name, receiver_ty, krate, &mut callback)\n+    {\n         return Some(result);\n     }\n     if let Some(result) =\n@@ -381,7 +412,31 @@ fn is_valid_candidate(\n                 if !data.has_self_param {\n                     return false;\n                 }\n-                // TODO compare receiver ty\n+                let substs = match m.lookup(db).container {\n+                    hir_def::ContainerId::TraitId(_) => Substs::build_for_def(db, item)\n+                        .push(self_ty.value.clone())\n+                        .fill_with_unknown()\n+                        .build(),\n+                    hir_def::ContainerId::ImplId(impl_id) => {\n+                        let vars =\n+                            Substs::build_for_def(db, impl_id).fill_with_bound_vars(0).build();\n+                        let self_ty_with_vars = db.impl_self_ty(impl_id).subst(&vars);\n+                        let self_ty_with_vars =\n+                            Canonical { num_vars: vars.len(), value: &self_ty_with_vars };\n+                        if let Some(substs) = super::infer::unify(self_ty_with_vars, &self_ty.value)\n+                        {\n+                            substs\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                    hir_def::ContainerId::ModuleId(_) => unreachable!(),\n+                };\n+                let sig = db.callable_item_signature(m.into());\n+                let receiver = sig.params()[0].clone().subst(&substs);\n+                if receiver != receiver_ty.value {\n+                    return false;\n+                }\n             }\n             true\n         }"}]}