{"sha": "6f3edb034ca681f3d81482253f0435fff1026a6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmM2VkYjAzNGNhNjgxZjNkODE0ODIyNTNmMDQzNWZmZjEwMjZhNmY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-21T21:52:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-21T21:53:49Z"}, "message": "type_id: Make result of std::intrinsics::type_id() endian-independent.", "tree": {"sha": "44740cf4fd3d13090d3ccf614bad82df9bae2286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44740cf4fd3d13090d3ccf614bad82df9bae2286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3edb034ca681f3d81482253f0435fff1026a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3edb034ca681f3d81482253f0435fff1026a6f", "html_url": "https://github.com/rust-lang/rust/commit/6f3edb034ca681f3d81482253f0435fff1026a6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3edb034ca681f3d81482253f0435fff1026a6f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5509ae399e4ed6f041b95bf948751f35b7d65517", "url": "https://api.github.com/repos/rust-lang/rust/commits/5509ae399e4ed6f041b95bf948751f35b7d65517", "html_url": "https://github.com/rust-lang/rust/commit/5509ae399e4ed6f041b95bf948751f35b7d65517"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "8f9642b6b6eaf7f60202097a69c7e5f352881207", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6f3edb034ca681f3d81482253f0435fff1026a6f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3edb034ca681f3d81482253f0435fff1026a6f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6f3edb034ca681f3d81482253f0435fff1026a6f", "patch": "@@ -402,17 +402,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n // `isize` completely when hashing. To ensure that these don't leak in we use a\n // custom hasher implementation here which inflates the size of these to a `u64`\n // and `i64`.\n-struct WidenUsizeHasher<H> {\n+//\n+// The same goes for endianess: We always convert multi-byte integers to little\n+// endian before hashing.\n+struct ArchIndependentHasher<H> {\n     inner: H,\n }\n \n-impl<H> WidenUsizeHasher<H> {\n-    fn new(inner: H) -> WidenUsizeHasher<H> {\n-        WidenUsizeHasher { inner: inner }\n+impl<H> ArchIndependentHasher<H> {\n+    fn new(inner: H) -> ArchIndependentHasher<H> {\n+        ArchIndependentHasher { inner: inner }\n     }\n }\n \n-impl<H: Hasher> Hasher for WidenUsizeHasher<H> {\n+impl<H: Hasher> Hasher for ArchIndependentHasher<H> {\n     fn write(&mut self, bytes: &[u8]) {\n         self.inner.write(bytes)\n     }\n@@ -425,44 +428,44 @@ impl<H: Hasher> Hasher for WidenUsizeHasher<H> {\n         self.inner.write_u8(i)\n     }\n     fn write_u16(&mut self, i: u16) {\n-        self.inner.write_u16(i)\n+        self.inner.write_u16(i.to_le())\n     }\n     fn write_u32(&mut self, i: u32) {\n-        self.inner.write_u32(i)\n+        self.inner.write_u32(i.to_le())\n     }\n     fn write_u64(&mut self, i: u64) {\n-        self.inner.write_u64(i)\n+        self.inner.write_u64(i.to_le())\n     }\n     fn write_usize(&mut self, i: usize) {\n-        self.inner.write_u64(i as u64)\n+        self.inner.write_u64((i as u64).to_le())\n     }\n     fn write_i8(&mut self, i: i8) {\n         self.inner.write_i8(i)\n     }\n     fn write_i16(&mut self, i: i16) {\n-        self.inner.write_i16(i)\n+        self.inner.write_i16(i.to_le())\n     }\n     fn write_i32(&mut self, i: i32) {\n-        self.inner.write_i32(i)\n+        self.inner.write_i32(i.to_le())\n     }\n     fn write_i64(&mut self, i: i64) {\n-        self.inner.write_i64(i)\n+        self.inner.write_i64(i.to_le())\n     }\n     fn write_isize(&mut self, i: isize) {\n-        self.inner.write_i64(i as i64)\n+        self.inner.write_i64((i as i64).to_le())\n     }\n }\n \n pub struct TypeIdHasher<'a, 'gcx: 'a+'tcx, 'tcx: 'a, H> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    state: WidenUsizeHasher<H>,\n+    state: ArchIndependentHasher<H>,\n }\n \n impl<'a, 'gcx, 'tcx, H: Hasher> TypeIdHasher<'a, 'gcx, 'tcx, H> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, state: H) -> Self {\n         TypeIdHasher {\n             tcx: tcx,\n-            state: WidenUsizeHasher::new(state),\n+            state: ArchIndependentHasher::new(state),\n         }\n     }\n \n@@ -493,6 +496,10 @@ impl<'a, 'gcx, 'tcx, H: Hasher> TypeIdHasher<'a, 'gcx, 'tcx, H> {\n     pub fn def_path(&mut self, def_path: &ast_map::DefPath) {\n         def_path.deterministic_hash_to(self.tcx, &mut self.state);\n     }\n+\n+    pub fn into_inner(self) -> H {\n+        self.state.inner\n+    }\n }\n \n impl<'a, 'gcx, 'tcx, H: Hasher> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, H> {"}]}