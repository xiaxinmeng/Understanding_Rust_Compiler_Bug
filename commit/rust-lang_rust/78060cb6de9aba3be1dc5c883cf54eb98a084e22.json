{"sha": "78060cb6de9aba3be1dc5c883cf54eb98a084e22", "node_id": "C_kwDOAAsO6NoAKDc4MDYwY2I2ZGU5YWJhM2JlMWRjNWM4ODNjZjU0ZWI5OGEwODRlMjI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-06T12:02:56Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-06T12:02:56Z"}, "message": "Box `rustc_parse_format::Piece::NextArgument`\n\nThis makes both variants closer together in size (previously they were\ndifferent by 208 bytes -- 16 vs 224). This may make things worse, but\nit's worth a try.", "tree": {"sha": "d469f96906befc6dcdedbe2e71806dd71ff5f092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d469f96906befc6dcdedbe2e71806dd71ff5f092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78060cb6de9aba3be1dc5c883cf54eb98a084e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78060cb6de9aba3be1dc5c883cf54eb98a084e22", "html_url": "https://github.com/rust-lang/rust/commit/78060cb6de9aba3be1dc5c883cf54eb98a084e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78060cb6de9aba3be1dc5c883cf54eb98a084e22/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "html_url": "https://github.com/rust-lang/rust/commit/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "63bc0d552c11e7e24e17bbb45ff095590fd1f18b", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78060cb6de9aba3be1dc5c883cf54eb98a084e22/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78060cb6de9aba3be1dc5c883cf54eb98a084e22/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=78060cb6de9aba3be1dc5c883cf54eb98a084e22", "patch": "@@ -333,7 +333,7 @@ pub fn make_format_args(\n             parse::Piece::String(s) => {\n                 unfinished_literal.push_str(s);\n             }\n-            parse::Piece::NextArgument(parse::Argument { position, position_span, format }) => {\n+            parse::Piece::NextArgument(box parse::Argument { position, position_span, format }) => {\n                 if !unfinished_literal.is_empty() {\n                     template.push(FormatArgsPiece::Literal(Symbol::intern(&unfinished_literal)));\n                     unfinished_literal.clear();"}, {"sha": "4d01f706272b119cc5ce22e5eb6b697d31ab2af0", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78060cb6de9aba3be1dc5c883cf54eb98a084e22/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78060cb6de9aba3be1dc5c883cf54eb98a084e22/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=78060cb6de9aba3be1dc5c883cf54eb98a084e22", "patch": "@@ -58,13 +58,13 @@ impl InnerOffset {\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n     /// This describes that formatting should process the next argument (as\n     /// specified inside) for emission.\n-    NextArgument(Argument<'a>),\n+    NextArgument(Box<Argument<'a>>),\n }\n \n /// Representation of an argument specification.\n@@ -244,7 +244,7 @@ impl<'a> Iterator for Parser<'a> {\n                         } else {\n                             self.suggest_positional_arg_instead_of_captured_arg(arg);\n                         }\n-                        Some(NextArgument(arg))\n+                        Some(NextArgument(Box::new(arg)))\n                     }\n                 }\n                 '}' => {"}, {"sha": "2992ba845ab16aab0b3da5da04096c2978ce9900", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/78060cb6de9aba3be1dc5c883cf54eb98a084e22/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78060cb6de9aba3be1dc5c883cf54eb98a084e22/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=78060cb6de9aba3be1dc5c883cf54eb98a084e22", "patch": "@@ -76,51 +76,51 @@ fn invalid_precision() {\n fn format_nothing() {\n     same(\n         \"{}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: fmtdflt(),\n-        })],\n+        }))],\n     );\n }\n #[test]\n fn format_position() {\n     same(\n         \"{3}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(3),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: fmtdflt(),\n-        })],\n+        }))],\n     );\n }\n #[test]\n fn format_position_nothing_else() {\n     same(\n         \"{3:}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(3),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: fmtdflt(),\n-        })],\n+        }))],\n     );\n }\n #[test]\n fn format_named() {\n     same(\n         \"{name}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentNamed(\"name\"),\n             position_span: InnerSpan { start: 2, end: 6 },\n             format: fmtdflt(),\n-        })],\n+        }))],\n     )\n }\n #[test]\n fn format_type() {\n     same(\n         \"{3:x}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(3),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n@@ -134,14 +134,14 @@ fn format_type() {\n                 ty: \"x\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n }\n #[test]\n fn format_align_fill() {\n     same(\n         \"{3:>}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(3),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n@@ -155,11 +155,11 @@ fn format_align_fill() {\n                 ty: \"\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{3:0<}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(3),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n@@ -173,11 +173,11 @@ fn format_align_fill() {\n                 ty: \"\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{3:*<abcd}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(3),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n@@ -191,14 +191,14 @@ fn format_align_fill() {\n                 ty: \"abcd\",\n                 ty_span: Some(InnerSpan::new(6, 10)),\n             },\n-        })],\n+        }))],\n     );\n }\n #[test]\n fn format_counts() {\n     same(\n         \"{:10x}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -212,11 +212,11 @@ fn format_counts() {\n                 ty: \"x\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{:10$.10x}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -230,11 +230,11 @@ fn format_counts() {\n                 ty: \"x\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{1:0$.10x}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentIs(1),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: FormatSpec {\n@@ -248,11 +248,11 @@ fn format_counts() {\n                 ty: \"x\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{:.*x}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(1),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -266,11 +266,11 @@ fn format_counts() {\n                 ty: \"x\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{:.10$x}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -284,11 +284,11 @@ fn format_counts() {\n                 ty: \"x\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{:a$.b$?}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -302,11 +302,11 @@ fn format_counts() {\n                 ty: \"?\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{:.4}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -320,14 +320,14 @@ fn format_counts() {\n                 ty: \"\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     )\n }\n #[test]\n fn format_flags() {\n     same(\n         \"{:-}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -341,11 +341,11 @@ fn format_flags() {\n                 ty: \"\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n     same(\n         \"{:+#}\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 2 },\n             format: FormatSpec {\n@@ -359,7 +359,7 @@ fn format_flags() {\n                 ty: \"\",\n                 ty_span: None,\n             },\n-        })],\n+        }))],\n     );\n }\n #[test]\n@@ -368,7 +368,7 @@ fn format_mixture() {\n         \"abcd {3:x} efg\",\n         &[\n             String(\"abcd \"),\n-            NextArgument(Argument {\n+            NextArgument(Box::new(Argument {\n                 position: ArgumentIs(3),\n                 position_span: InnerSpan { start: 7, end: 8 },\n                 format: FormatSpec {\n@@ -382,7 +382,7 @@ fn format_mixture() {\n                     ty: \"x\",\n                     ty_span: None,\n                 },\n-            }),\n+            })),\n             String(\" efg\"),\n         ],\n     );\n@@ -391,18 +391,18 @@ fn format_mixture() {\n fn format_whitespace() {\n     same(\n         \"{ }\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 3 },\n             format: fmtdflt(),\n-        })],\n+        }))],\n     );\n     same(\n         \"{  }\",\n-        &[NextArgument(Argument {\n+        &[NextArgument(Box::new(Argument {\n             position: ArgumentImplicitlyIs(0),\n             position_span: InnerSpan { start: 2, end: 4 },\n             format: fmtdflt(),\n-        })],\n+        }))],\n     );\n }"}]}