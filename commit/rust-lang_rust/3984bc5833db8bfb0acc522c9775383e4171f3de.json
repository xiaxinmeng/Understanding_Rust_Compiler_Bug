{"sha": "3984bc5833db8bfb0acc522c9775383e4171f3de", "node_id": "C_kwDOAAsO6NoAKDM5ODRiYzU4MzNkYjhiZmIwYWNjNTIyYzk3NzUzODNlNDE3MWYzZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T17:39:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T17:39:48Z"}, "message": "Auto merge of #106294 - Nilstrieb:noundef-everything, r=nikic\n\nPut `noundef` on all scalars that don't allow uninit\n\nPreviously, it was only put on scalars with range validity invariants like bool, was uninit was obviously invalid for those.\n\nSince then, we have normatively declared all uninit primitives to be undefined behavior and can therefore put `noundef` on them.\n\nThe remaining concern was the `mem::uninitialized` function, which cause quite a lot of UB in the older parts of the ecosystem. After #99182, this function now doesn't return uninit values anymore, making users of it safe from this change.\n\nThe only real sources of UB where people could encounter uninit primitives are `MaybeUninit::uninit().assume_init()`, which has always be clear in the docs about being UB and from heap allocations (like reading from the spare capacity of a vec). This is hopefully rare enough to not break anything.\n\ncc `@nagisa` `@scottmcm` `@nikic`", "tree": {"sha": "b7b857372290acb972e12be100108d730af854a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b857372290acb972e12be100108d730af854a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3984bc5833db8bfb0acc522c9775383e4171f3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3984bc5833db8bfb0acc522c9775383e4171f3de", "html_url": "https://github.com/rust-lang/rust/commit/3984bc5833db8bfb0acc522c9775383e4171f3de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3984bc5833db8bfb0acc522c9775383e4171f3de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "html_url": "https://github.com/rust-lang/rust/commit/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d"}, {"sha": "f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6", "html_url": "https://github.com/rust-lang/rust/commit/f1255380ac1cb7be1b6b0ac0eda5b1274b29eff6"}], "stats": {"total": 239, "additions": 130, "deletions": 109}, "files": [{"sha": "5e98deae48aa2dae049de2e28fad05c4df7a256e", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             layout: TyAndLayout<'tcx>,\n             offset: Size,\n         ) {\n-            if !scalar.is_always_valid(bx) {\n+            if !scalar.is_uninit_valid() {\n                 bx.noundef_metadata(load);\n             }\n "}, {"sha": "669f84ae1b4720a09f5ec6a46d28b8db93618624", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -219,8 +219,7 @@ fn adjust_for_rust_scalar<'tcx>(\n         return;\n     }\n \n-    // Scalars which have invalid values cannot be undef.\n-    if !scalar.is_always_valid(&cx) {\n+    if !scalar.is_uninit_valid() {\n         attrs.set(ArgAttribute::NoUndef);\n     }\n \n@@ -246,11 +245,6 @@ fn adjust_for_rust_scalar<'tcx>(\n                 PointerKind::SharedMutable | PointerKind::UniqueOwned => Size::ZERO,\n             };\n \n-            // `Box`, `&T`, and `&mut T` cannot be undef.\n-            // Note that this only applies to the value of the pointer itself;\n-            // this attribute doesn't make it UB for the pointed-to data to be undef.\n-            attrs.set(ArgAttribute::NoUndef);\n-\n             // The aliasing rules for `Box<T>` are still not decided, but currently we emit\n             // `noalias` for it. This can be turned off using an unstable flag.\n             // See https://github.com/rust-lang/unsafe-code-guidelines/issues/326"}, {"sha": "3c2d4e719d423f9a309064cb688d0419f9b25a59", "filename": "tests/codegen/abi-sysv64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-sysv64.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -3,7 +3,7 @@\n // of the sysv64 abi.\n //\n // needs-llvm-components: x86\n-// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu\n+// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![no_core]"}, {"sha": "928ad5a9bbd6376d493b902cbc6dabdb1c0ff909", "filename": "tests/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-x86-interrupt.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -3,7 +3,7 @@\n // of the x86-interrupt abi.\n \n // needs-llvm-components: x86\n-// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu\n+// compile-flags: -C no-prepopulate-passes --target=x86_64-unknown-linux-gnu -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![no_core]"}, {"sha": "6d22475175270570f022bd0816bf3d18dd594007", "filename": "tests/codegen/adjustments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fadjustments.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "b0c88f76c436dc9067dad98b7ebad22902b4983a", "filename": "tests/codegen/box-maybe-uninit-llvm14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -31,4 +31,4 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n // Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above. We don't check the attributes here because we can't rely\n // on all of them being set until LLVM 15.\n-// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}}, i{{[0-9]+.*}})\n+// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)"}, {"sha": "2f88966996ab2e25efb1adfcb8d03420d3cf5e5d", "filename": "tests/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -28,6 +28,6 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n \n // Hide the `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above, and also verify the attributes got set reasonably.\n-// CHECK: declare noalias ptr @__rust_alloc(i{{[0-9]+}}, i{{[0-9]+}} allocalign) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n+// CHECK: declare noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n \n // CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "cab32652210d0a08188e870c3c893267fa29191f", "filename": "tests/codegen/c-variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fc-variadic.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,5 +1,5 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n //\n \n #![crate_type = \"lib\"]"}, {"sha": "cb8abae198ee65b9315f9d1a1d827605f8512400", "filename": "tests/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // ignore-riscv64\n "}, {"sha": "683a2bd4fbb5a8abb5f68bd1cb944dc60f45c43d", "filename": "tests/codegen/comparison-operators-newtype.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fcomparison-operators-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fcomparison-operators-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcomparison-operators-newtype.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -13,7 +13,7 @@ use std::cmp::Ordering;\n pub struct Foo(u16);\n \n // CHECK-LABEL: @check_lt\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_lt(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp ult i16 %[[A]], %[[B]]\n@@ -22,7 +22,7 @@ pub fn check_lt(a: Foo, b: Foo) -> bool {\n }\n \n // CHECK-LABEL: @check_le\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_le(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp ule i16 %[[A]], %[[B]]\n@@ -31,7 +31,7 @@ pub fn check_le(a: Foo, b: Foo) -> bool {\n }\n \n // CHECK-LABEL: @check_gt\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_gt(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp ugt i16 %[[A]], %[[B]]\n@@ -40,7 +40,7 @@ pub fn check_gt(a: Foo, b: Foo) -> bool {\n }\n \n // CHECK-LABEL: @check_ge\n-// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+// CHECK-SAME: (i16 noundef %[[A:.+]], i16 noundef %[[B:.+]])\n #[no_mangle]\n pub fn check_ge(a: Foo, b: Foo) -> bool {\n     // CHECK: %[[R:.+]] = icmp uge i16 %[[A]], %[[B]]"}, {"sha": "383940e95906d1c6dad3db944243ae674e98cb35", "filename": "tests/codegen/dllimports/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fdllimports%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fdllimports%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdllimports%2Fmain.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// This test is for *-windows-msvc only.\n+ // This test is for *-windows-msvc only.\n // only-windows\n // ignore-gnu\n \n@@ -15,10 +15,10 @@ extern crate wrapper;\n // CHECK: @static_global1 = external local_unnamed_addr global i32\n // CHECK: @static_global2 = external local_unnamed_addr global i32\n \n-// CHECK: declare dllimport i32 @dylib_func1(i32)\n-// CHECK: declare dllimport i32 @dylib_func2(i32)\n-// CHECK: declare i32 @static_func1(i32)\n-// CHECK: declare i32 @static_func2(i32)\n+// CHECK: declare dllimport noundef i32 @dylib_func1(i32 noundef)\n+// CHECK: declare dllimport noundef i32 @dylib_func2(i32 noundef)\n+// CHECK: declare noundef i32 @static_func1(i32 noundef)\n+// CHECK: declare noundef i32 @static_func2(i32 noundef)\n \n #[link(name = \"dummy\", kind=\"dylib\")]\n extern \"C\" {"}, {"sha": "5f8063a27f7ac7355927906e2756a2ea2ae96fd8", "filename": "tests/codegen/enum-match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fenum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fenum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenum-match.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -11,7 +11,7 @@ pub enum Enum0 {\n     B,\n }\n \n-// CHECK: define i8 @match0{{.*}}\n+// CHECK: define noundef i8 @match0{{.*}}\n // CHECK-NEXT: start:\n // CHECK-NEXT: %1 = icmp eq i8 %0, 2\n // CHECK-NEXT: %2 = and i8 %0, 1\n@@ -32,7 +32,7 @@ pub enum Enum1 {\n     C,\n }\n \n-// CHECK: define i8 @match1{{.*}}\n+// CHECK: define noundef i8 @match1{{.*}}\n // CHECK-NEXT: start:\n // CHECK-NEXT: [[DISCR:%.*]] = {{.*}}call i8 @llvm.usub.sat.i8(i8 %0, i8 1)\n // CHECK-NEXT: switch i8 [[DISCR]], label {{.*}} [\n@@ -88,7 +88,7 @@ pub enum Enum2 {\n     E,\n }\n \n-// CHECK: define i8 @match2{{.*}}\n+// CHECK: define noundef i8 @match2{{.*}}\n // CHECK-NEXT: start:\n // CHECK-NEXT: %1 = add i8 %0, 2\n // CHECK-NEXT: %2 = zext i8 %1 to i64"}, {"sha": "02f5d545910e1f7f2e12dc2e150a71ff62bb3771", "filename": "tests/codegen/fastcall-inreg.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffastcall-inreg.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -15,27 +15,27 @@ trait Sized {}\n trait Copy {}\n \n pub mod tests {\n-    // CHECK: @f1(i32 inreg %_1, i32 inreg %_2, i32 %_3)\n+    // CHECK: @f1(i32 inreg noundef %_1, i32 inreg noundef %_2, i32 noundef %_3)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f1(_: i32, _: i32, _: i32) {}\n \n-    // CHECK: @f2({{i32\\*|ptr}} inreg %_1, {{i32\\*|ptr}} inreg %_2, {{i32\\*|ptr}} %_3)\n+    // CHECK: @f2({{i32\\*|ptr}} inreg noundef %_1, {{i32\\*|ptr}} inreg noundef %_2, {{i32\\*|ptr}} noundef %_3)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f2(_: *const i32, _: *const i32, _: *const i32) {}\n \n-    // CHECK: @f3(float %_1, i32 inreg %_2, i32 inreg %_3, i32 %_4)\n+    // CHECK: @f3(float noundef %_1, i32 inreg noundef %_2, i32 inreg noundef %_3, i32 noundef %_4)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f3(_: f32, _: i32, _: i32, _: i32) {}\n \n-    // CHECK: @f4(i32 inreg %_1, float %_2, i32 inreg %_3, i32 %_4)\n+    // CHECK: @f4(i32 inreg noundef %_1, float noundef %_2, i32 inreg noundef %_3, i32 noundef %_4)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f4(_: i32, _: f32, _: i32, _: i32) {}\n \n-    // CHECK: @f5(i64 %_1, i32 %_2)\n+    // CHECK: @f5(i64 noundef %_1, i32 noundef %_2)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f5(_: i64, _: i32) {}\n \n-    // CHECK: @f6(i1 inreg noundef zeroext %_1, i32 inreg %_2, i32 %_3)\n+    // CHECK: @f6(i1 inreg noundef zeroext %_1, i32 inreg noundef %_2, i32 noundef %_3)\n     #[no_mangle]\n     pub extern \"fastcall\" fn f6(_: bool, _: i32, _: i32) {}\n }"}, {"sha": "ac8cba06b48f7616f3450e5b6e2630c2ed84bfd2", "filename": "tests/codegen/fewer-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ffewer-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ffewer-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffewer-names.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -7,11 +7,11 @@\n \n #[no_mangle]\n pub fn sum(x: u32, y: u32) -> u32 {\n-// YES-LABEL: define{{.*}}i32 @sum(i32 %0, i32 %1)\n+// YES-LABEL: define{{.*}}i32 @sum(i32 noundef %0, i32 noundef %1)\n // YES-NEXT:    %3 = add i32 %1, %0\n // YES-NEXT:    ret i32 %3\n \n-// NO-LABEL: define{{.*}}i32 @sum(i32 %x, i32 %y)\n+// NO-LABEL: define{{.*}}i32 @sum(i32 noundef %x, i32 noundef %y)\n // NO-NEXT:  start:\n // NO-NEXT:    %z = add i32 %y, %x\n // NO-NEXT:    ret i32 %z"}, {"sha": "d8933262e528e98cc4522726d43b1fff87176257", "filename": "tests/codegen/frame-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fframe-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fframe-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fframe-pointer.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --crate-type=rlib\n+// compile-flags: --crate-type=rlib -Copt-level=0\n // revisions: aarch64-apple aarch64-linux force x64-apple x64-linux\n // [aarch64-apple] needs-llvm-components: aarch64\n // [aarch64-apple] compile-flags: --target=aarch64-apple-darwin"}, {"sha": "1f979d7b90a70b08b7a5edd95028777218481772", "filename": "tests/codegen/function-arguments.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ffunction-arguments.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,11 +1,11 @@\n // compile-flags: -O -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n use std::mem::MaybeUninit;\n use std::num::NonZeroU64;\n use std::marker::PhantomPinned;\n+use std::ptr::NonNull;\n \n pub struct S {\n   _field: [i32; 8],\n@@ -61,7 +61,7 @@ pub fn maybeuninit_char(x: MaybeUninit<char>) -> MaybeUninit<char> {\n   x\n }\n \n-// CHECK: i64 @int(i64 %x)\n+// CHECK: noundef i64 @int(i64 noundef %x)\n #[no_mangle]\n pub fn int(x: u64) -> u64 {\n   x\n@@ -73,7 +73,7 @@ pub fn nonzero_int(x: NonZeroU64) -> NonZeroU64 {\n   x\n }\n \n-// CHECK: i64 @option_nonzero_int(i64 %x)\n+// CHECK: noundef i64 @option_nonzero_int(i64 noundef %x)\n #[no_mangle]\n pub fn option_nonzero_int(x: Option<NonZeroU64>) -> Option<NonZeroU64> {\n   x\n@@ -138,11 +138,27 @@ pub fn indirect_struct(_: S) {\n pub fn borrowed_struct(_: &S) {\n }\n \n-// CHECK: @raw_struct({{%S\\*|ptr}} %_1)\n+// CHECK: @option_borrow({{i32\\*|ptr}} noalias noundef readonly align 4 dereferenceable_or_null(4) %x)\n+#[no_mangle]\n+pub fn option_borrow(x: Option<&i32>) {\n+}\n+\n+// CHECK: @option_borrow_mut({{i32\\*|ptr}} noalias noundef align 4 dereferenceable_or_null(4) %x)\n+#[no_mangle]\n+pub fn option_borrow_mut(x: Option<&mut i32>) {\n+}\n+\n+// CHECK: @raw_struct({{%S\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub fn raw_struct(_: *const S) {\n }\n \n+// CHECK: @raw_option_nonnull_struct({{i32\\*|ptr}} noundef %_1)\n+#[no_mangle]\n+pub fn raw_option_nonnull_struct(_: Option<NonNull<S>>) {\n+}\n+\n+\n // `Box` can get deallocated during execution of the function, so it should\n // not get `dereferenceable`.\n // CHECK: noundef nonnull align 4 {{i32\\*|ptr}} @_box({{i32\\*|ptr}} noalias noundef nonnull align 4 %x)\n@@ -160,35 +176,35 @@ pub fn struct_return() -> S {\n }\n \n // Hack to get the correct size for the length part in slices\n-// CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n+// CHECK: @helper([[USIZE:i[0-9]+]] noundef %_1)\n #[no_mangle]\n pub fn helper(_: usize) {\n }\n \n-// CHECK: @slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] noundef %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @mutable_slice({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull align 1 %_1.0, [[USIZE]] noundef %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {\n }\n \n-// CHECK: @unsafe_slice({{\\[0 x i16\\]\\*|ptr}} noundef nonnull align 2 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @unsafe_slice({{\\[0 x i16\\]\\*|ptr}} noundef nonnull align 2 %_1.0, [[USIZE]] noundef %_1.1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_slice(_: &[UnsafeInner]) {\n }\n \n-// CHECK: @raw_slice({{\\[0 x i8\\]\\*|ptr}} %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @raw_slice({{\\[0 x i8\\]\\*|ptr}} noundef %_1.0, [[USIZE]] noundef %_1.1)\n #[no_mangle]\n pub fn raw_slice(_: *const [u8]) {\n }\n \n-// CHECK: @str({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @str({{\\[0 x i8\\]\\*|ptr}} noalias noundef nonnull readonly align 1 %_1.0, [[USIZE]] noundef %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn str(_: &[u8]) {\n@@ -197,26 +213,36 @@ pub fn str(_: &[u8]) {\n // CHECK: @trait_borrow({{\\{\\}\\*|ptr}} noundef nonnull align 1 %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n-pub fn trait_borrow(_: &Drop) {\n+pub fn trait_borrow(_: &dyn Drop) {\n+}\n+\n+// CHECK: @option_trait_borrow({{i8\\*|ptr}} noundef align 1 %x.0, {{i8\\*|ptr}} %x.1)\n+#[no_mangle]\n+pub fn option_trait_borrow(x: Option<&dyn Drop>) {\n+}\n+\n+// CHECK: @option_trait_borrow_mut({{i8\\*|ptr}} noundef align 1 %x.0, {{i8\\*|ptr}} %x.1)\n+#[no_mangle]\n+pub fn option_trait_borrow_mut(x: Option<&mut dyn Drop>) {\n }\n \n-// CHECK: @trait_raw({{\\{\\}\\*|ptr}} %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n+// CHECK: @trait_raw({{\\{\\}\\*|ptr}} noundef %_1.0, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n #[no_mangle]\n-pub fn trait_raw(_: *const Drop) {\n+pub fn trait_raw(_: *const dyn Drop) {\n }\n \n // CHECK: @trait_box({{\\{\\}\\*|ptr}} noalias noundef nonnull align 1{{( %0)?}}, {{.+}} noalias noundef readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n #[no_mangle]\n-pub fn trait_box(_: Box<Drop>) {\n+pub fn trait_box(_: Box<dyn Drop>) {\n }\n \n // CHECK: { {{i8\\*|ptr}}, {{i8\\*|ptr}} } @trait_option({{i8\\*|ptr}} noalias noundef align 1 %x.0, {{i8\\*|ptr}} %x.1)\n #[no_mangle]\n-pub fn trait_option(x: Option<Box<Drop>>) -> Option<Box<Drop>> {\n+pub fn trait_option(x: Option<Box<dyn Drop>>) -> Option<Box<dyn Drop>> {\n   x\n }\n \n-// CHECK: { {{\\[0 x i16\\]\\*|ptr}}, [[USIZE]] } @return_slice({{\\[0 x i16\\]\\*|ptr}} noalias noundef nonnull readonly align 2 %x.0, [[USIZE]] %x.1)\n+// CHECK: { {{\\[0 x i16\\]\\*|ptr}}, [[USIZE]] } @return_slice({{\\[0 x i16\\]\\*|ptr}} noalias noundef nonnull readonly align 2 %x.0, [[USIZE]] noundef %x.1)\n #[no_mangle]\n pub fn return_slice(x: &[u16]) -> &[u16] {\n   x"}, {"sha": "f3877dc6b96a68e2efe69158dcaad271eab83690", "filename": "tests/codegen/intrinsics/const_eval_select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![feature(const_eval_select)]"}, {"sha": "8f93da2e5da437f616250d863f23d71b8c24c8de", "filename": "tests/codegen/intrinsics/mask.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fintrinsics%2Fmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fintrinsics%2Fmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Fmask.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Copt-level=0\n #![crate_type = \"lib\"]\n #![feature(core_intrinsics)]\n \n@@ -6,6 +7,6 @@\n #[no_mangle]\n pub fn mask_ptr(ptr: *const u16, mask: usize) -> *const u16 {\n     // CHECK: call\n-    // CHECK-SAME: @llvm.ptrmask.{{p0|p0i8}}.[[WORD]]({{ptr|i8\\*}} {{%ptr|%0}}, [[WORD]] %mask)\n+    // CHECK-SAME: @llvm.ptrmask.{{p0|p0i8}}.[[WORD]]({{ptr|i8\\*}} {{%ptr|%1}}, [[WORD]] %mask)\n     core::intrinsics::ptr_mask(ptr, mask)\n }"}, {"sha": "abef92c19b610b612da29d6c5fbad049c2ddd695", "filename": "tests/codegen/issue-32031.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fissue-32031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fissue-32031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-32031.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "00f8953d94952f1c1ec7a521f49510c09b1d8acb", "filename": "tests/codegen/issue-58881.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fissue-58881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fissue-58881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-58881.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n //\n // only-x86_64\n // ignore-windows"}, {"sha": "24059f190acf608944117454013e8a33d7ee1429", "filename": "tests/codegen/iter-repeat-n-trivial-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -46,7 +46,7 @@ pub fn iter_repeat_n_next(it: &mut std::iter::RepeatN<NotCopy>) -> Option<NotCop\n #[no_mangle]\n // CHECK-LABEL: @vec_extend_via_iter_repeat_n\n pub fn vec_extend_via_iter_repeat_n() -> Vec<u8> {\n-    // CHECK: %[[ADDR:.+]] = tail call dereferenceable_or_null(1234) ptr @__rust_alloc(i64 1234, i64 1)\n+    // CHECK: %[[ADDR:.+]] = tail call noundef dereferenceable_or_null(1234) ptr @__rust_alloc(i64 noundef 1234, i64 noundef 1)\n     // CHECK: tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1234) %[[ADDR]], i8 42, i64 1234,\n \n     let n = 1234_usize;"}, {"sha": "f29a26596bfd5a8af36962e3e3ad6fa9e4244fc5", "filename": "tests/codegen/loads.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floads.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -50,8 +50,8 @@ pub fn load_scalar_pair<'a>(x: &(&'a i32, &'a Align16)) -> (&'a i32, &'a Align16\n // CHECK-LABEL: @load_raw_pointer\n #[no_mangle]\n pub fn load_raw_pointer<'a>(x: &*const i32) -> *const i32 {\n-    // loaded raw pointer should not have !nonnull, !align, or !noundef metadata\n-    // CHECK: load {{i32\\*|ptr}}, {{i32\\*\\*|ptr}} %x, align [[PTR_ALIGNMENT]]{{$}}\n+    // loaded raw pointer should not have !nonnull or !align metadata\n+    // CHECK: load {{i32\\*|ptr}}, {{i32\\*\\*|ptr}} %x, align [[PTR_ALIGNMENT]], !noundef ![[NOUNDEF:[0-9]+]]{{$}}\n     *x\n }\n \n@@ -93,7 +93,7 @@ pub fn load_maybeuninit_enum_bool(x: &MaybeUninit<MyBool>) -> MaybeUninit<MyBool\n // CHECK-LABEL: @load_int\n #[no_mangle]\n pub fn load_int(x: &u16) -> u16 {\n-    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2{{$}}\n+    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef ![[NOUNDEF]]{{$}}\n     *x\n }\n \n@@ -107,7 +107,7 @@ pub fn load_nonzero_int(x: &NonZeroU16) -> NonZeroU16 {\n // CHECK-LABEL: @load_option_nonzero_int\n #[no_mangle]\n pub fn load_option_nonzero_int(x: &Option<NonZeroU16>) -> Option<NonZeroU16> {\n-    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2{{$}}\n+    // CHECK: load i16, {{i16\\*|ptr}} %x, align 2, !noundef ![[NOUNDEF]]{{$}}\n     *x\n }\n "}, {"sha": "e05bbc26e830c33d43db8295fb5a0709eab735ed", "filename": "tests/codegen/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnaked-functions.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n // needs-asm-support\n // only-x86_64\n "}, {"sha": "518e949ffe34386cb1446ee1082eb6f1ea9de6d5", "filename": "tests/codegen/pic-relocation-model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpic-relocation-model.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C relocation-model=pic\n+// compile-flags: -C relocation-model=pic -Copt-level=0\n \n #![crate_type = \"rlib\"]\n "}, {"sha": "941cca922bd328de6f23e25aceea3d69128e7e6c", "filename": "tests/codegen/pie-relocation-model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpie-relocation-model.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C relocation-model=pie\n+// compile-flags: -C relocation-model=pie -Copt-level=0\n // only-x86_64-unknown-linux-gnu\n \n #![crate_type = \"rlib\"]"}, {"sha": "a528976671110963852af8779e27dcaa8c2fda44", "filename": "tests/codegen/refs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frefs.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0 -Copt-level=0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "311cbfbaa09372915dba17b5b1125ec36d9ae2c0", "filename": "tests/codegen/repr-transparent.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -18,36 +18,36 @@ pub struct Zst2(());\n #[repr(transparent)]\n pub struct F32(f32);\n \n-// CHECK: define{{.*}}float @test_F32(float %_1)\n+// CHECK: define{{.*}}float @test_F32(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_F32(_: F32) -> F32 { loop {} }\n \n #[repr(transparent)]\n pub struct Ptr(*mut u8);\n \n-// CHECK: define{{.*}}{{i8\\*|ptr}} @test_Ptr({{i8\\*|ptr}} %_1)\n+// CHECK: define{{.*}}{{i8\\*|ptr}} @test_Ptr({{i8\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Ptr(_: Ptr) -> Ptr { loop {} }\n \n #[repr(transparent)]\n pub struct WithZst(u64, Zst1);\n \n-// CHECK: define{{.*}}i64 @test_WithZst(i64 %_1)\n+// CHECK: define{{.*}}i64 @test_WithZst(i64 noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_WithZst(_: WithZst) -> WithZst { loop {} }\n \n #[repr(transparent)]\n pub struct WithZeroSizedArray(*const f32, [i8; 0]);\n \n // Apparently we use i32* when newtype-unwrapping f32 pointers. Whatever.\n-// CHECK: define{{.*}}{{i32\\*|ptr}} @test_WithZeroSizedArray({{i32\\*|ptr}} %_1)\n+// CHECK: define{{.*}}{{i32\\*|ptr}} @test_WithZeroSizedArray({{i32\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_WithZeroSizedArray(_: WithZeroSizedArray) -> WithZeroSizedArray { loop {} }\n \n #[repr(transparent)]\n pub struct Generic<T>(T);\n \n-// CHECK: define{{.*}}double @test_Generic(double %_1)\n+// CHECK: define{{.*}}double @test_Generic(double noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Generic(_: Generic<f64>) -> Generic<f64> { loop {} }\n \n@@ -64,7 +64,7 @@ pub extern \"C\" fn test_Gpz(_: GenericPlusZst<Bool>) -> GenericPlusZst<Bool> { lo\n #[repr(transparent)]\n pub struct LifetimePhantom<'a, T: 'a>(*const T, PhantomData<&'a T>);\n \n-// CHECK: define{{.*}}{{i16\\*|ptr}} @test_LifetimePhantom({{i16\\*|ptr}} %_1)\n+// CHECK: define{{.*}}{{i16\\*|ptr}} @test_LifetimePhantom({{i16\\*|ptr}} noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_LifetimePhantom(_: LifetimePhantom<i16>) -> LifetimePhantom<i16> { loop {} }\n \n@@ -74,28 +74,28 @@ pub struct UnitPhantom<T, U> { val: T, unit: PhantomData<U> }\n \n pub struct Px;\n \n-// CHECK: define{{.*}}float @test_UnitPhantom(float %_1)\n+// CHECK: define{{.*}}float @test_UnitPhantom(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnitPhantom(_: UnitPhantom<f32, Px>) -> UnitPhantom<f32, Px> { loop {} }\n \n #[repr(transparent)]\n pub struct TwoZsts(Zst1, i8, Zst2);\n \n-// CHECK: define{{( dso_local)?}}{{( signext)?}} i8 @test_TwoZsts(i8{{( signext)?}} %_1)\n+// CHECK: define{{( dso_local)?}} noundef{{( signext)?}} i8 @test_TwoZsts(i8 noundef{{( signext)?}} %_1)\n #[no_mangle]\n pub extern \"C\" fn test_TwoZsts(_: TwoZsts) -> TwoZsts { loop {} }\n \n #[repr(transparent)]\n pub struct Nested1(Zst2, Generic<f64>);\n \n-// CHECK: define{{.*}}double @test_Nested1(double %_1)\n+// CHECK: define{{.*}}double @test_Nested1(double noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Nested1(_: Nested1) -> Nested1 { loop {} }\n \n #[repr(transparent)]\n pub struct Nested2(Nested1, Zst1);\n \n-// CHECK: define{{.*}}double @test_Nested2(double %_1)\n+// CHECK: define{{.*}}double @test_Nested2(double noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Nested2(_: Nested2) -> Nested2 { loop {} }\n \n@@ -115,7 +115,7 @@ impl<T: ?Sized> Mirror for T { type It = Self; }\n #[repr(transparent)]\n pub struct StructWithProjection(<f32 as Mirror>::It);\n \n-// CHECK: define{{.*}}float @test_Projection(float %_1)\n+// CHECK: define{{.*}}float @test_Projection(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n \n@@ -124,7 +124,7 @@ pub enum EnumF32 {\n     Variant(F32)\n }\n \n-// CHECK: define{{.*}}float @test_EnumF32(float %_1)\n+// CHECK: define{{.*}}float @test_EnumF32(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_EnumF32(_: EnumF32) -> EnumF32 { loop {} }\n \n@@ -133,7 +133,7 @@ pub enum EnumF32WithZsts {\n     Variant(Zst1, F32, Zst2)\n }\n \n-// CHECK: define{{.*}}float @test_EnumF32WithZsts(float %_1)\n+// CHECK: define{{.*}}float @test_EnumF32WithZsts(float noundef %_1)\n #[no_mangle]\n pub extern \"C\" fn test_EnumF32WithZsts(_: EnumF32WithZsts) -> EnumF32WithZsts { loop {} }\n \n@@ -142,7 +142,7 @@ pub union UnionF32 {\n     field: F32,\n }\n \n-// CHECK: define{{.*}}float @test_UnionF32(float %_1)\n+// CHECK: define{{.*}} float @test_UnionF32(float %_1)\n #[no_mangle]\n pub extern \"C\" fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n "}, {"sha": "045f01985a57f1e14a75a4085c382f2f3ff56c0f", "filename": "tests/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -29,25 +29,25 @@ pub extern \"C\" fn f_scalar_0(a: bool) -> bool {\n     a\n }\n \n-// CHECK: define signext i8 @f_scalar_1(i8 signext %x)\n+// CHECK: define noundef signext i8 @f_scalar_1(i8 noundef signext %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_1(x: i8) -> i8 {\n     x\n }\n \n-// CHECK: define zeroext i8 @f_scalar_2(i8 zeroext %x)\n+// CHECK: define noundef zeroext i8 @f_scalar_2(i8 noundef zeroext %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_2(x: u8) -> u8 {\n     x\n }\n \n-// CHECK: define signext i32 @f_scalar_3(i32 signext %x)\n+// CHECK: define noundef signext i32 @f_scalar_3(i32 noundef signext %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_3(x: i32) -> u32 {\n     x as u32\n }\n \n-// CHECK: define i64 @f_scalar_4(i64 %x)\n+// CHECK: define noundef i64 @f_scalar_4(i64 noundef %x)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_4(x: i64) -> i64 {\n     x\n@@ -132,13 +132,13 @@ pub struct Large {\n pub extern \"C\" fn f_agg_large(mut x: Large) {\n }\n \n-// CHECK: define void @f_agg_large_ret({{%Large\\*|ptr}} {{.*}}sret{{.*}}, i32 signext %i, i8 signext %j)\n+// CHECK: define void @f_agg_large_ret({{%Large\\*|ptr}} {{.*}}sret{{.*}}, i32 noundef signext %i, i8 noundef signext %j)\n #[no_mangle]\n pub extern \"C\" fn f_agg_large_ret(i: i32, j: i8) -> Large {\n     Large { a: 1, b: 2, c: 3, d: 4 }\n }\n \n-// CHECK: define void @f_scalar_stack_1(i64 %0, [2 x i64] %1, i128 %2, {{%Large\\*|ptr}} {{.*}}%d, i8 zeroext %e, i8 signext %f, i8 %g, i8 %h)\n+// CHECK: define void @f_scalar_stack_1(i64 %0, [2 x i64] %1, i128 %2, {{%Large\\*|ptr}} {{.*}}%d, i8 noundef zeroext %e, i8 noundef signext %f, i8 noundef %g, i8 noundef %h)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_stack_1(\n     a: Tiny,\n@@ -152,7 +152,7 @@ pub extern \"C\" fn f_scalar_stack_1(\n ) {\n }\n \n-// CHECK: define void @f_scalar_stack_2({{%Large\\*|ptr}} {{.*}}sret{{.*}} %0, i64 %a, i128 %1, i128 %2, i64 %d, i8 zeroext %e, i8 %f, i8 %g)\n+// CHECK: define void @f_scalar_stack_2({{%Large\\*|ptr}} {{.*}}sret{{.*}} %0, i64 noundef %a, i128 %1, i128 %2, i64 noundef %d, i8 noundef zeroext %e, i8 noundef %f, i8 noundef %g)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_stack_2(\n     a: u64,\n@@ -172,7 +172,7 @@ extern \"C\" {\n \n #[no_mangle]\n pub unsafe extern \"C\" fn f_va_caller() {\n-    // CHECK: call signext i32 (i32, ...) @f_va_callee(i32 signext 1, i32 signext 2, i64 3, double {{.*}}, double {{.*}}, i64 {{.*}}, [2 x i64] {{.*}}, i128 {{.*}}, {{%Large\\*|ptr}} {{.*}})\n+    // CHECK: call noundef signext i32 (i32, ...) @f_va_callee(i32 noundef signext 1, i32 noundef signext 2, i64 noundef 3, double {{.*}}, double {{.*}}, i64 {{.*}}, [2 x i64] {{.*}}, i128 {{.*}}, {{%Large\\*|ptr}} {{.*}})\n     f_va_callee(\n         1,\n         2i32,\n@@ -184,6 +184,6 @@ pub unsafe extern \"C\" fn f_va_caller() {\n         SmallAligned { a: 11 },\n         Large { a: 12, b: 13, c: 14, d: 15 },\n     );\n-    // CHECK: call signext i32 (i32, ...) @f_va_callee(i32 signext 1, i32 signext 2, i32 signext 3, i32 signext 4, i128 {{.*}}, i32 signext 6, i32 signext 7, i32 8, i32 9)\n+    // CHECK: call noundef signext i32 (i32, ...) @f_va_callee(i32 noundef signext 1, i32 noundef signext 2, i32 noundef signext 3, i32 noundef signext 4, i128 {{.*}}, i32 noundef signext 6, i32 noundef signext 7, i32 noundef 8, i32 noundef 9)\n     f_va_callee(1, 2i32, 3i32, 4i32, SmallAligned { a: 5 }, 6i32, 7i32, 8i32, 9i32);\n }"}, {"sha": "597b867ebad143ade9660a48d6ed64ca08e0a8d9", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,7 +1,7 @@\n // Verifies that pointer type membership tests for indirect calls are emitted.\n //\n // needs-sanitizer-cfi\n-// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Copt-level=0\n \n #![crate_type=\"lib\"]\n "}, {"sha": "2537df80a90b44b62f84d9e9aa037e0f9bc01e65", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -5,7 +5,7 @@\n // [aarch64] needs-llvm-components: aarch64\n // [x86_64] compile-flags: --target x86_64-unknown-none\n // [x86_64] needs-llvm-components:\n-// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n \n #![crate_type=\"lib\"]\n #![feature(no_core, lang_items)]"}, {"sha": "7b00fcf8e1bd743d6b7268b361626f0308574f60", "filename": "tests/codegen/sanitizer-recover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-recover.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -6,8 +6,8 @@\n // revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER MSAN-RECOVER-LTO\n // no-prefer-dynamic\n //\n-//[ASAN]             compile-flags: -Zsanitizer=address\n-//[ASAN-RECOVER]     compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n+//[ASAN]             compile-flags: -Zsanitizer=address -Copt-level=0\n+//[ASAN-RECOVER]     compile-flags: -Zsanitizer=address -Zsanitizer-recover=address -Copt-level=0\n //[MSAN]             compile-flags: -Zsanitizer=memory\n //[MSAN-RECOVER]     compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n //[MSAN-RECOVER-LTO] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory -C lto=fat\n@@ -26,17 +26,17 @@\n // ASAN-RECOVER-NOT:     unreachable\n // ASAN:               }\n //\n-// MSAN-LABEL: define dso_local i32 @penguin(\n+// MSAN-LABEL: define dso_local noundef i32 @penguin(\n // MSAN:         call void @__msan_warning{{(_with_origin_noreturn\\(i32 0\\)|_noreturn\\(\\))}}\n // MSAN:         unreachable\n // MSAN:       }\n //\n-// MSAN-RECOVER-LABEL: define dso_local i32 @penguin(\n+// MSAN-RECOVER-LABEL: define dso_local noundef i32 @penguin(\n // MSAN-RECOVER:         call void @__msan_warning{{(_with_origin\\(i32 0\\)|\\(\\))}}\n // MSAN-RECOVER-NOT:     unreachable\n // MSAN-RECOVER:       }\n //\n-// MSAN-RECOVER-LTO-LABEL: define dso_local i32 @penguin(\n+// MSAN-RECOVER-LTO-LABEL: define dso_local noundef i32 @penguin(\n // MSAN-RECOVER-LTO:          call void @__msan_warning{{(_with_origin\\(i32 0\\)|\\(\\))}}\n // MSAN-RECOVER-LTO-NOT:      unreachable\n // MSAN-RECOVER-LTO:       }"}, {"sha": "8e8365b6a673b6baa8dea7a34d293bc8e420f167", "filename": "tests/codegen/scalar-pair-bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fscalar-pair-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fscalar-pair-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fscalar-pair-bool.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -8,13 +8,13 @@ pub fn pair_bool_bool(pair: (bool, bool)) -> (bool, bool) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 noundef zeroext %pair.0, i32 %pair.1)\n+// CHECK: define{{.*}}{ i8, i32 } @pair_bool_i32(i1 noundef zeroext %pair.0, i32 noundef %pair.1)\n #[no_mangle]\n pub fn pair_bool_i32(pair: (bool, i32)) -> (bool, i32) {\n     pair\n }\n \n-// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 %pair.0, i1 noundef zeroext %pair.1)\n+// CHECK: define{{.*}}{ i32, i8 } @pair_i32_bool(i32 noundef %pair.0, i1 noundef zeroext %pair.1)\n #[no_mangle]\n pub fn pair_i32_bool(pair: (i32, bool)) -> (i32, bool) {\n     pair"}, {"sha": "9f2d9d06524f0d65a30dd56432a01216570aa34a", "filename": "tests/codegen/some-abis-do-extend-params-to-32-bits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsome-abis-do-extend-params-to-32-bits.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Cno-prepopulate-passes\n+// compile-flags: -Cno-prepopulate-passes -Copt-level=0\n \n // revisions:x86_64 i686 aarch64-apple aarch64-windows aarch64-linux arm riscv\n "}, {"sha": "735ef7081c9566c057e9a9638b0c84d8e7731a81", "filename": "tests/codegen/static-relocation-model-msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fstatic-relocation-model-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fstatic-relocation-model-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fstatic-relocation-model-msvc.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -15,8 +15,8 @@ extern crate extern_decl;\n // it to be marked `dso_local` as well, given the static relocation model.\n //\n // CHECK: @extern_static = external dso_local local_unnamed_addr global i8\n-// CHECK: define dso_local i8 @access_extern() {{.*}}\n-// CHECK: declare dso_local i8 @extern_fn() {{.*}}\n+// CHECK: define dso_local noundef i8 @access_extern() {{.*}}\n+// CHECK: declare dso_local noundef i8 @extern_fn() {{.*}}\n \n #[no_mangle]\n pub fn access_extern() -> u8 {"}, {"sha": "260dcbac0fc4f33919ca7d43889f3b13d901ef07", "filename": "tests/codegen/transmute-scalar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ftransmute-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ftransmute-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftransmute-scalar.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -5,7 +5,7 @@\n // FIXME(eddyb) all of these tests show memory stores and loads, even after a\n // scalar `bitcast`, more special-casing is required to remove `alloca` usage.\n \n-// CHECK-LABEL: define{{.*}}i32 @f32_to_bits(float %x)\n+// CHECK-LABEL: define{{.*}}i32 @f32_to_bits(float noundef %x)\n // CHECK: store i32 %{{.*}}, {{.*}} %0\n // CHECK-NEXT: %[[RES:.*]] = load i32, {{.*}} %0\n // CHECK: ret i32 %[[RES]]\n@@ -24,7 +24,7 @@ pub fn bool_to_byte(b: bool) -> u8 {\n     unsafe { std::mem::transmute(b) }\n }\n \n-// CHECK-LABEL: define{{.*}}noundef zeroext i1 @byte_to_bool(i8 %byte)\n+// CHECK-LABEL: define{{.*}}noundef zeroext i1 @byte_to_bool(i8 noundef %byte)\n // CHECK: %1 = trunc i8 %byte to i1\n // CHECK-NEXT: %2 = zext i1 %1 to i8\n // CHECK-NEXT: store i8 %2, {{.*}} %0\n@@ -36,7 +36,7 @@ pub unsafe fn byte_to_bool(byte: u8) -> bool {\n     std::mem::transmute(byte)\n }\n \n-// CHECK-LABEL: define{{.*}}{{i8\\*|ptr}} @ptr_to_ptr({{i16\\*|ptr}} %p)\n+// CHECK-LABEL: define{{.*}}{{i8\\*|ptr}} @ptr_to_ptr({{i16\\*|ptr}} noundef %p)\n // CHECK: store {{i8\\*|ptr}} %{{.*}}, {{.*}} %0\n // CHECK-NEXT: %[[RES:.*]] = load {{i8\\*|ptr}}, {{.*}} %0\n // CHECK: ret {{i8\\*|ptr}} %[[RES]]\n@@ -52,7 +52,7 @@ pub fn ptr_to_ptr(p: *mut u16) -> *mut u8 {\n // Tests below show the non-special-cased behavior (with the possible\n // future special-cased instructions in the \"NOTE(eddyb)\" comments).\n \n-// CHECK: define{{.*}}[[USIZE:i[0-9]+]] @ptr_to_int({{i16\\*|ptr}} %p)\n+// CHECK: define{{.*}}[[USIZE:i[0-9]+]] @ptr_to_int({{i16\\*|ptr}} noundef %p)\n \n // NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n //        %2 = ptrtoint i16* %p to [[USIZE]]\n@@ -66,7 +66,7 @@ pub fn ptr_to_int(p: *mut u16) -> usize {\n     unsafe { std::mem::transmute(p) }\n }\n \n-// CHECK: define{{.*}}{{i16\\*|ptr}} @int_to_ptr([[USIZE]] %i)\n+// CHECK: define{{.*}}{{i16\\*|ptr}} @int_to_ptr([[USIZE]] noundef %i)\n \n // NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n //        %2 = inttoptr [[USIZE]] %i to i16*"}, {"sha": "35f760851451e108b124552924d048c32c7f23de", "filename": "tests/codegen/tuple-layout-opt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftuple-layout-opt.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,5 +1,5 @@\n // ignore-emscripten\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // Test that tuples get optimized layout, in particular with a ZST in the last field (#63244)\n "}, {"sha": "d4715efad73c0fe0855a3a22314dd662d735861d", "filename": "tests/codegen/var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fvar-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fvar-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvar-names.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -2,7 +2,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK-LABEL: define{{.*}}i32 @test(i32 %a, i32 %b)\n+// CHECK-LABEL: define{{.*}}i32 @test(i32 noundef %a, i32 noundef %b)\n #[no_mangle]\n pub fn test(a: u32, b: u32) -> u32 {\n     let c = a + b;"}, {"sha": "442cdd41dc66f866258aa800148300a571f300ed", "filename": "tests/codegen/vec-calloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-calloc.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -162,6 +162,6 @@ pub fn vec_option_bool(n: usize) -> Vec<Option<bool>> {\n }\n \n // Ensure that __rust_alloc_zeroed gets the right attributes for LLVM to optimize it away.\n-// CHECK: declare noalias ptr @__rust_alloc_zeroed(i64, i64 allocalign) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n+// CHECK: declare noalias noundef ptr @__rust_alloc_zeroed(i64 noundef, i64 allocalign noundef) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n \n // CHECK-DAG: attributes [[RUST_ALLOC_ZEROED_ATTRS]] = { {{.*}} allockind(\"alloc,zeroed,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "cef4b9bdaaf0a2dc018ccd61cff0c3c0ab0d4f6c", "filename": "tests/codegen/zst-offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fzst-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3984bc5833db8bfb0acc522c9775383e4171f3de/tests%2Fcodegen%2Fzst-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fzst-offset.rs?ref=3984bc5833db8bfb0acc522c9775383e4171f3de", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n #![crate_type = \"lib\"]\n #![feature(repr_simd)]"}]}