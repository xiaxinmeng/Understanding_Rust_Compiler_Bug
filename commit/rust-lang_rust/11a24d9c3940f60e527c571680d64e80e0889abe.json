{"sha": "11a24d9c3940f60e527c571680d64e80e0889abe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTI0ZDljMzk0MGY2MGU1MjdjNTcxNjgwZDY0ZTgwZTA4ODlhYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T07:34:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T07:34:13Z"}, "message": "Auto merge of #46888 - cramertj:nested-impl-trait-error, r=nikomatsakis\n\nAdd a feature gate for nested uses of `impl Trait`\n\nThis allows us to delay stabilization of nested `impl Trait` until we have a plan to solve the problem posed [here](https://github.com/rust-lang/rust/issues/34511#issuecomment-350715858).\n\nr? @nikomatsakis", "tree": {"sha": "ac2db20e2e6e33adb63330a3cf50370530cf4960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2db20e2e6e33adb63330a3cf50370530cf4960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a24d9c3940f60e527c571680d64e80e0889abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a24d9c3940f60e527c571680d64e80e0889abe", "html_url": "https://github.com/rust-lang/rust/commit/11a24d9c3940f60e527c571680d64e80e0889abe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a24d9c3940f60e527c571680d64e80e0889abe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "html_url": "https://github.com/rust-lang/rust/commit/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6"}, {"sha": "c026d19baf4b2ea96b218fd5d83275ae6e8220a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c026d19baf4b2ea96b218fd5d83275ae6e8220a1", "html_url": "https://github.com/rust-lang/rust/commit/c026d19baf4b2ea96b218fd5d83275ae6e8220a1"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "f8d6b419f7ada18fb4c6ca629ae5270c9179bf75", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=11a24d9c3940f60e527c571680d64e80e0889abe", "patch": "@@ -441,6 +441,9 @@ declare_features! (\n \n     // `foo.rs` as an alternative to `foo/mod.rs`\n     (active, non_modrs_mods, \"1.24.0\", Some(44660)),\n+\n+    // Nested `impl Trait`\n+    (active, nested_impl_trait, \"1.24.0\", Some(34511)),\n );\n \n declare_features! (\n@@ -1314,8 +1317,73 @@ fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n     }\n }\n \n+// Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`.\n+// Nested `impl Trait` _is_ allowed in associated type position,\n+// e.g `impl Iterator<Item=impl Debug>`\n+struct NestedImplTraitVisitor<'a> {\n+    context: &'a Context<'a>,\n+    is_in_impl_trait: bool,\n+}\n+\n+impl<'a> NestedImplTraitVisitor<'a> {\n+    fn with_impl_trait<F>(&mut self, is_in_impl_trait: bool, f: F)\n+        where F: FnOnce(&mut NestedImplTraitVisitor<'a>)\n+    {\n+        let old_is_in_impl_trait = self.is_in_impl_trait;\n+        self.is_in_impl_trait = is_in_impl_trait;\n+        f(self);\n+        self.is_in_impl_trait = old_is_in_impl_trait;\n+    }\n+}\n+\n+\n+impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n+    fn visit_ty(&mut self, t: &'a ast::Ty) {\n+        if let ast::TyKind::ImplTrait(_) = t.node {\n+            if self.is_in_impl_trait {\n+                gate_feature_post!(&self, nested_impl_trait, t.span,\n+                    \"nested `impl Trait` is experimental\"\n+                );\n+            }\n+            self.with_impl_trait(true, |this| visit::walk_ty(this, t));\n+        } else {\n+            visit::walk_ty(self, t);\n+        }\n+    }\n+    fn visit_path_parameters(&mut self, _: Span, path_parameters: &'a ast::PathParameters) {\n+        match *path_parameters {\n+            ast::PathParameters::AngleBracketed(ref params) => {\n+                for type_ in &params.types {\n+                    self.visit_ty(type_);\n+                }\n+                for type_binding in &params.bindings {\n+                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n+                    // are allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(false, |this| visit::walk_ty(this, &type_binding.ty));\n+                }\n+            }\n+            ast::PathParameters::Parenthesized(ref params) => {\n+                for type_ in &params.inputs {\n+                    self.visit_ty(type_);\n+                }\n+                if let Some(ref type_) = params.output {\n+                    // `-> Foo` syntax is essentially an associated type binding,\n+                    // so it is also allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(false, |this| visit::walk_ty(this, type_));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'a> PostExpansionVisitor<'a> {\n-    fn whole_crate_feature_gates(&mut self) {\n+    fn whole_crate_feature_gates(&mut self, krate: &ast::Crate) {\n+        visit::walk_crate(\n+            &mut NestedImplTraitVisitor {\n+                context: self.context,\n+                is_in_impl_trait: false,\n+            }, krate);\n+\n         for &(ident, span) in &*self.context.parse_sess.non_modrs_mods.borrow() {\n             if !span.allows_unstable() {\n                 let cx = &self.context;\n@@ -1889,7 +1957,7 @@ pub fn check_crate(krate: &ast::Crate,\n         plugin_attributes,\n     };\n     let visitor = &mut PostExpansionVisitor { context: &ctx };\n-    visitor.whole_crate_feature_gates();\n+    visitor.whole_crate_feature_gates(krate);\n     visit::walk_crate(visitor, krate);\n }\n "}, {"sha": "4595e413081a525ef6b4b84b7858ac884507456b", "filename": "src/test/compile-fail/E0657.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Fcompile-fail%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Fcompile-fail%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0657.rs?ref=11a24d9c3940f60e527c571680d64e80e0889abe", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(warnings)]\n-#![feature(conservative_impl_trait)]\n+#![feature(conservative_impl_trait, nested_impl_trait)]\n \n trait Id<T> {}\n trait Lt<'a> {}"}, {"sha": "7c35263d05dd7eb464d99e943ce349a304bae3c2", "filename": "src/test/compile-fail/feature-gate-nested_impl_trait.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Fcompile-fail%2Ffeature-gate-nested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Fcompile-fail%2Ffeature-gate-nested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-nested_impl_trait.rs?ref=11a24d9c3940f60e527c571680d64e80e0889abe", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(conservative_impl_trait, universal_impl_trait)]\n+\n+use std::fmt::Debug;\n+\n+fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n+\n+fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+//~^ ERROR nested `impl Trait` is experimental\n+\n+fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+//~^ ERROR nested `impl Trait` is experimental\n+\n+fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n+//~^ ERROR nested `impl Trait` is experimental\n+\n+struct X;\n+impl X {\n+    fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+    //~^ ERROR nested `impl Trait` is experimental\n+}\n+\n+fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n+    vec![|| println!(\"woot\")].into_iter()\n+}\n+\n+fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n+    || 5\n+}\n+\n+fn main() {}"}, {"sha": "a9fe1e04664e9d4980293bb8f77c3a5e2ff8a7da", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=11a24d9c3940f60e527c571680d64e80e0889abe", "patch": "@@ -10,7 +10,7 @@\n \n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n-#![feature(conservative_impl_trait, universal_impl_trait, dyn_trait)]\n+#![feature(conservative_impl_trait, nested_impl_trait, universal_impl_trait, dyn_trait)]\n use std::fmt::Debug;\n \n // Allowed"}, {"sha": "1f2d76f28947243c10fd7fa8e25d8639a6193f2d", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a24d9c3940f60e527c571680d64e80e0889abe/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=11a24d9c3940f60e527c571680d64e80e0889abe", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, underscore_lifetimes, universal_impl_trait)]\n+#![feature(conservative_impl_trait, underscore_lifetimes, universal_impl_trait, nested_impl_trait)]\n #![allow(warnings)]\n \n use std::fmt::Debug;"}]}