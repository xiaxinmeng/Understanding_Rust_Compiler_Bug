{"sha": "4f2ef415ba1e64d843ee58e95009871053d3f7a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMmVmNDE1YmExZTY0ZDg0M2VlNThlOTUwMDk4NzEwNTNkM2Y3YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-16T16:16:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-16T16:16:16Z"}, "message": "Auto merge of #46743 - oli-obk:miri, r=eddyb\n\nSome miri cleanups\n\nr? @eddyb", "tree": {"sha": "4ebe5809f97686dd5e5eb7836d300410c08cfd74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebe5809f97686dd5e5eb7836d300410c08cfd74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2ef415ba1e64d843ee58e95009871053d3f7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2ef415ba1e64d843ee58e95009871053d3f7a6", "html_url": "https://github.com/rust-lang/rust/commit/4f2ef415ba1e64d843ee58e95009871053d3f7a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2ef415ba1e64d843ee58e95009871053d3f7a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdae618418abc58a1da5e565f2b124cdfebb5682", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdae618418abc58a1da5e565f2b124cdfebb5682", "html_url": "https://github.com/rust-lang/rust/commit/bdae618418abc58a1da5e565f2b124cdfebb5682"}, {"sha": "2d161f10e5c2f98b01cb54c661f787a08561469d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d161f10e5c2f98b01cb54c661f787a08561469d", "html_url": "https://github.com/rust-lang/rust/commit/2d161f10e5c2f98b01cb54c661f787a08561469d"}], "stats": {"total": 125, "additions": 67, "deletions": 58}, "files": [{"sha": "fc4d1d9894163606dc2eda0670e5261622d045cc", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 66, "deletions": 57, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/4f2ef415ba1e64d843ee58e95009871053d3f7a6/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2ef415ba1e64d843ee58e95009871053d3f7a6/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=4f2ef415ba1e64d843ee58e95009871053d3f7a6", "patch": "@@ -20,11 +20,32 @@ use rustc_const_math::ConstInt;\n use std::fmt;\n use std::error::Error;\n \n+\n+pub fn mk_eval_cx<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    instance: Instance<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> EvalResult<'tcx, EvalContext<'a, 'tcx, CompileTimeEvaluator>> {\n+    debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n+    let limits = super::ResourceLimits::default();\n+    let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n+    let mir = ecx.load_mir(instance.def)?;\n+    // insert a stack frame so any queries have the correct substs\n+    ecx.push_stack_frame(\n+        instance,\n+        mir.span,\n+        mir,\n+        Place::undef(),\n+        StackPopCleanup::None,\n+    )?;\n+    Ok(ecx)\n+}\n+\n pub fn eval_body<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> (EvalResult<'tcx, (PtrAndAlign, Ty<'tcx>)>, EvalContext<'a, 'tcx, CompileTimeEvaluator>) {\n+) -> EvalResult<'tcx, (PtrAndAlign, Ty<'tcx>)> {\n     debug!(\"eval_body: {:?}, {:?}\", instance, param_env);\n     let limits = super::ResourceLimits::default();\n     let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n@@ -33,64 +54,53 @@ pub fn eval_body<'a, 'tcx>(\n         promoted: None,\n     };\n \n-    let try = (|| {\n-        if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n-            return Err(ConstEvalError::NotConst(\"extern global\".to_string()).into());\n-        }\n-        // FIXME(eddyb) use `Instance::ty` when it becomes available.\n-        let instance_ty =\n-            ecx.monomorphize(instance.def.def_ty(tcx), instance.substs);\n-        if tcx.interpret_interner.borrow().get_cached(cid).is_none() {\n-            let mir = ecx.load_mir(instance.def)?;\n-            let layout = ecx.layout_of(instance_ty)?;\n-            assert!(!layout.is_unsized());\n-            let ptr = ecx.memory.allocate(\n-                layout.size.bytes(),\n-                layout.align.abi(),\n-                None,\n-            )?;\n-            tcx.interpret_interner.borrow_mut().cache(\n-                cid,\n-                PtrAndAlign {\n-                    ptr: ptr.into(),\n-                    aligned: !layout.is_packed(),\n-                },\n-            );\n-            let cleanup = StackPopCleanup::MarkStatic(Mutability::Immutable);\n-            let name = ty::tls::with(|tcx| tcx.item_path_str(instance.def_id()));\n-            trace!(\"const_eval: pushing stack frame for global: {}\", name);\n-            ecx.push_stack_frame(\n-                instance,\n-                mir.span,\n-                mir,\n-                Place::from_ptr(ptr),\n-                cleanup.clone(),\n-            )?;\n-\n-            while ecx.step()? {}\n-\n-            // reinsert the stack frame so any future queries have the correct substs\n-            ecx.push_stack_frame(\n-                instance,\n-                mir.span,\n-                mir,\n-                Place::from_ptr(ptr),\n-                cleanup,\n-            )?;\n-        }\n-        let value = tcx.interpret_interner.borrow().get_cached(cid).expect(\"global not cached\");\n-        Ok((value, instance_ty))\n-    })();\n-    (try, ecx)\n+    if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n+        return Err(ConstEvalError::NotConst(\"extern global\".to_string()).into());\n+    }\n+    // FIXME(eddyb) use `Instance::ty` when it becomes available.\n+    let instance_ty =\n+        ecx.monomorphize(instance.def.def_ty(tcx), instance.substs);\n+    if tcx.interpret_interner.borrow().get_cached(cid).is_none() {\n+        let mir = ecx.load_mir(instance.def)?;\n+        let layout = ecx.layout_of(instance_ty)?;\n+        assert!(!layout.is_unsized());\n+        let ptr = ecx.memory.allocate(\n+            layout.size.bytes(),\n+            layout.align.abi(),\n+            None,\n+        )?;\n+        tcx.interpret_interner.borrow_mut().cache(\n+            cid,\n+            PtrAndAlign {\n+                ptr: ptr.into(),\n+                aligned: !layout.is_packed(),\n+            },\n+        );\n+        let cleanup = StackPopCleanup::MarkStatic(Mutability::Immutable);\n+        let name = ty::tls::with(|tcx| tcx.item_path_str(instance.def_id()));\n+        trace!(\"const_eval: pushing stack frame for global: {}\", name);\n+        ecx.push_stack_frame(\n+            instance,\n+            mir.span,\n+            mir,\n+            Place::from_ptr(ptr),\n+            cleanup.clone(),\n+        )?;\n+\n+        while ecx.step()? {}\n+    }\n+    let value = tcx.interpret_interner.borrow().get_cached(cid).expect(\"global not cached\");\n+    Ok((value, instance_ty))\n }\n \n pub fn eval_body_as_integer<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: Instance<'tcx>,\n ) -> EvalResult<'tcx, ConstInt> {\n-    let (ptr_ty, ecx) = eval_body(tcx, instance, param_env);\n+    let ptr_ty = eval_body(tcx, instance, param_env);\n     let (ptr, ty) = ptr_ty?;\n+    let ecx = mk_eval_cx(tcx, instance, param_env)?;\n     let prim = match ecx.read_maybe_aligned(ptr.aligned, |ectx| ectx.try_read_value(ptr.ptr, ty))? {\n         Some(Value::ByVal(prim)) => prim.to_bytes()?,\n         _ => return err!(TypeNotPrimitive(ty)),\n@@ -340,20 +350,19 @@ pub fn const_eval_provider<'a, 'tcx>(\n         trace!(\"const eval instance: {:?}, {:?}\", instance, key.param_env);\n         let miri_result = ::interpret::eval_body(tcx, instance, key.param_env);\n         match (miri_result, old_result) {\n-            ((Err(err), ecx), Ok(ok)) => {\n+            (Err(err), Ok(ok)) => {\n                 trace!(\"miri failed, ctfe returned {:?}\", ok);\n                 tcx.sess.span_warn(\n                     tcx.def_span(key.value.0),\n                     \"miri failed to eval, while ctfe succeeded\",\n                 );\n+                let ecx = mk_eval_cx(tcx, instance, key.param_env).unwrap();\n                 let () = unwrap_miri(&ecx, Err(err));\n                 Ok(ok)\n             },\n-            ((Ok(_), _), Err(err)) => {\n-                Err(err)\n-            },\n-            ((Err(_), _), Err(err)) => Err(err),\n-            ((Ok((miri_val, miri_ty)), mut ecx), Ok(ctfe)) => {\n+            (_, Err(err)) => Err(err),\n+            (Ok((miri_val, miri_ty)), Ok(ctfe)) => {\n+                let mut ecx = mk_eval_cx(tcx, instance, key.param_env).unwrap();\n                 check_ctfe_against_miri(&mut ecx, miri_val, miri_ty, ctfe.val);\n                 Ok(ctfe)\n             }"}, {"sha": "2671cf34a58b11f995add8402e75c1cd94ed051e", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=4f2ef415ba1e64d843ee58e95009871053d3f7a6", "patch": "@@ -1 +1 @@\n-Subproject commit bde093fa140cbf95023482a94b92b0b16af4b521\n+Subproject commit 2671cf34a58b11f995add8402e75c1cd94ed051e"}]}