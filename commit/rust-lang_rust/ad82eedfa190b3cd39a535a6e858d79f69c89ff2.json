{"sha": "ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "node_id": "C_kwDOAAsO6NoAKGFkODJlZWRmYTE5MGIzY2QzOWE1MzVhNmU4NThkNzlmNjljODlmZjI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-04T04:49:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T16:51:16Z"}, "message": "Use `BottomUpFolder`", "tree": {"sha": "36675788a3e26ff5ff55a4d66464d9a72ab1b3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36675788a3e26ff5ff55a4d66464d9a72ab1b3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "html_url": "https://github.com/rust-lang/rust/commit/ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad82eedfa190b3cd39a535a6e858d79f69c89ff2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac7d1c3ab519c72bf10521f0675060b12b0bb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac7d1c3ab519c72bf10521f0675060b12b0bb0a", "html_url": "https://github.com/rust-lang/rust/commit/4ac7d1c3ab519c72bf10521f0675060b12b0bb0a"}], "stats": {"total": 59, "additions": 19, "deletions": 40}, "files": [{"sha": "abff2637519160ca8194804e5d48f822b3cdc181", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ad82eedfa190b3cd39a535a6e858d79f69c89ff2/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad82eedfa190b3cd39a535a6e858d79f69c89ff2/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "patch": "@@ -13,12 +13,10 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::fold::TypeFolder;\n+use rustc_middle::ty::fold::{BottomUpFolder, TypeFolder};\n use rustc_middle::ty::print::{with_forced_trimmed_paths, with_no_trimmed_paths};\n use rustc_middle::ty::relate::TypeRelation;\n-use rustc_middle::ty::{\n-    self, Article, AssocItem, Ty, TyCtxt, TypeAndMut, TypeSuperFoldable, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, Article, AssocItem, Ty, TypeAndMut, TypeVisitable};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n@@ -222,42 +220,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         found: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> bool {\n-        let tcx = self.tcx;\n         let map = self.tcx.hir();\n \n-        // Hack to make equality checks on types with inference variables and regions useful.\n-        struct TypeEraser<'tcx> {\n-            tcx: TyCtxt<'tcx>,\n-        }\n-        impl<'tcx> TypeFolder<'tcx> for TypeEraser<'tcx> {\n-            fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-                self.tcx\n-            }\n-            fn fold_region(&mut self, _r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-                self.tcx().lifetimes.re_erased\n-            }\n-            fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-                if !t.needs_infer() && !t.has_erasable_regions() {\n-                    return t;\n-                }\n-                match *t.kind() {\n-                    ty::Infer(ty::TyVar(_) | ty::FreshTy(_)) => {\n-                        self.tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0)))\n-                    }\n-                    ty::Infer(ty::IntVar(_) | ty::FreshIntTy(_)) => {\n-                        self.tcx.mk_ty_infer(ty::IntVar(ty::IntVid { index: 0 }))\n-                    }\n-                    ty::Infer(ty::FloatVar(_) | ty::FreshFloatTy(_)) => {\n-                        self.tcx.mk_ty_infer(ty::FloatVar(ty::FloatVid { index: 0 }))\n-                    }\n-                    _ => t.super_fold_with(self),\n-                }\n-            }\n-            fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-                ct.super_fold_with(self)\n-            }\n-        }\n-\n         let hir::ExprKind::Path(hir::QPath::Resolved(None, p)) = expr.kind else { return false; };\n         let [hir::PathSegment { ident, args: None, .. }] = p.segments else { return false; };\n         let hir::def::Res::Local(hir_id) = p.res else { return false; };\n@@ -298,7 +262,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let Some(body_id) = node.body_id() else { return false; };\n         let body = map.body(body_id);\n         expr_finder.visit_expr(body.value);\n-        let mut eraser = TypeEraser { tcx };\n+        // Hack to make equality checks on types with inference variables and regions useful.\n+        let mut eraser = BottomUpFolder {\n+            tcx: self.tcx,\n+            lt_op: |_| self.tcx.lifetimes.re_erased,\n+            ct_op: |c| c,\n+            ty_op: |t| match *t.kind() {\n+                ty::Infer(ty::TyVar(vid)) => self.tcx.mk_ty_infer(ty::TyVar(self.root_var(vid))),\n+                ty::Infer(ty::IntVar(_)) => {\n+                    self.tcx.mk_ty_infer(ty::IntVar(ty::IntVid { index: 0 }))\n+                }\n+                ty::Infer(ty::FloatVar(_)) => {\n+                    self.tcx.mk_ty_infer(ty::FloatVar(ty::FloatVid { index: 0 }))\n+                }\n+                _ => t,\n+            },\n+        };\n         let mut prev = eraser.fold_ty(ty);\n         let mut prev_span = None;\n "}, {"sha": "749e960bfd03090876186167b6b6247b5eb44efc", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad82eedfa190b3cd39a535a6e858d79f69c89ff2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad82eedfa190b3cd39a535a6e858d79f69c89ff2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 .as_local()\n                 .map_or(false, |def_id| self.opaque_type_origin(def_id, span).is_some())\n         };\n-        let value = value.fold_with(&mut ty::fold::BottomUpFolder {\n+        let value = value.fold_with(&mut BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,"}]}