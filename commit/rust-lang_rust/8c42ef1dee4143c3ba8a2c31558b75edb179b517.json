{"sha": "8c42ef1dee4143c3ba8a2c31558b75edb179b517", "node_id": "C_kwDOAAsO6NoAKDhjNDJlZjFkZWU0MTQzYzNiYThhMmMzMTU1OGI3NWVkYjE3OWI1MTc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-23T13:44:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-25T14:17:41Z"}, "message": "enable number validity checking and ptr::invalid checking by default", "tree": {"sha": "75774105a121c95e4855c7f01ed23f91af41e932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75774105a121c95e4855c7f01ed23f91af41e932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c42ef1dee4143c3ba8a2c31558b75edb179b517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c42ef1dee4143c3ba8a2c31558b75edb179b517", "html_url": "https://github.com/rust-lang/rust/commit/8c42ef1dee4143c3ba8a2c31558b75edb179b517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c42ef1dee4143c3ba8a2c31558b75edb179b517/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4279fed9cc91e4e8921fff3b27d1c152f13b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4279fed9cc91e4e8921fff3b27d1c152f13b07", "html_url": "https://github.com/rust-lang/rust/commit/0a4279fed9cc91e4e8921fff3b27d1c152f13b07"}], "stats": {"total": 158, "additions": 67, "deletions": 91}, "files": [{"sha": "9248576b3c2afd5fbeaa64df87986e6a25f315d0", "filename": "README.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -44,8 +44,7 @@ in your program, and cannot run all programs:\n   positives here, so if your program runs fine in Miri right now that is by no\n   means a guarantee that it is UB-free when these questions get answered.\n \n-    In particular, Miri does currently not check that integers/floats are\n-  initialized or that references point to valid data.\n+    In particular, Miri does currently not check that references point to valid data.\n * If the program relies on unspecified details of how data is laid out, it will\n   still run fine in Miri -- but might break (including causing UB) on different\n   compiler versions or different platforms.\n@@ -302,10 +301,15 @@ The remaining flags are for advanced use only, and more likely to change or be r\n Some of these are **unsound**, which means they can lead\n to Miri failing to detect cases of undefined behavior in a program.\n \n-* `-Zmiri-check-number-validity` enables checking of integer and float validity\n-  (e.g., they must be initialized and not carry pointer provenance) as part of\n-  enforcing validity invariants. This has no effect when\n+* `-Zmiri-allow-uninit-numbers` disables the check to ensure that number types (integer and float\n+  types) always hold initialized data. (They must still be initialized when any actual operation,\n+  such as arithmetic, is performed.) Using this flag is **unsound**. This has no effect when\n   `-Zmiri-disable-validation` is present.\n+* `-Zmiri-allow-ptr-int-transmute` makes Miri more accepting of transmutation between pointers and\n+  integers via `mem::transmute` or union/pointer type punning. This has two effects: it disables the\n+  check against integers storing a pointer (i.e., data with provenance), thus allowing\n+  pointer-to-integer transmutation, and it treats integer-to-pointer transmutation as equivalent to\n+  a cast. Using this flag is **unsound**.\n * `-Zmiri-disable-abi-check` disables checking [function ABI]. Using this flag\n   is **unsound**.\n * `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you"}, {"sha": "9c4cd0684c610855520908705ecde43e6ef560fb", "filename": "src/bin/miri.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -335,7 +335,16 @@ fn main() {\n                     miri_config.check_alignment = miri::AlignmentCheck::Symbolic;\n                 }\n                 \"-Zmiri-check-number-validity\" => {\n-                    miri_config.check_number_validity = true;\n+                    eprintln!(\n+                        \"WARNING: the flag `-Zmiri-check-number-validity` no longer has any effect \\\n+                        since it is now enabled by default\"\n+                    );\n+                }\n+                \"-Zmiri-allow-uninit-numbers\" => {\n+                    miri_config.allow_uninit_numbers = true;\n+                }\n+                \"-Zmiri-allow-ptr-int-transmute\" => {\n+                    miri_config.allow_ptr_int_transmute = true;\n                 }\n                 \"-Zmiri-disable-abi-check\" => {\n                     miri_config.check_abi = false;\n@@ -386,7 +395,6 @@ fn main() {\n                 \"-Zmiri-strict-provenance\" => {\n                     miri_config.provenance_mode = ProvenanceMode::Strict;\n                     miri_config.tag_raw = true;\n-                    miri_config.check_number_validity = true;\n                 }\n                 \"-Zmiri-permissive-provenance\" => {\n                     miri_config.provenance_mode = ProvenanceMode::Permissive;"}, {"sha": "39fccb092433481aeb0727b4046b4d7c8680c86d", "filename": "src/eval.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -77,8 +77,10 @@ pub struct MiriConfig {\n     pub stacked_borrows: bool,\n     /// Controls alignment checking.\n     pub check_alignment: AlignmentCheck,\n-    /// Controls integer and float validity (e.g., initialization) checking.\n-    pub check_number_validity: bool,\n+    /// Controls integer and float validity initialization checking.\n+    pub allow_uninit_numbers: bool,\n+    /// Controls how we treat ptr2int and int2ptr transmutes.\n+    pub allow_ptr_int_transmute: bool,\n     /// Controls function [ABI](Abi) checking.\n     pub check_abi: bool,\n     /// Action for an op requiring communication with the host.\n@@ -126,7 +128,8 @@ impl Default for MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n             check_alignment: AlignmentCheck::Int,\n-            check_number_validity: false,\n+            allow_uninit_numbers: false,\n+            allow_ptr_int_transmute: false,\n             check_abi: true,\n             isolated_op: IsolatedOp::Reject(RejectOpWith::Abort),\n             ignore_leaks: false,"}, {"sha": "4a86490ed09a9ea4396b278862b0a1f5e0b327ae", "filename": "src/intptrcast.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -118,19 +118,12 @@ impl<'mir, 'tcx> GlobalStateInner {\n     ) -> Pointer<Option<Tag>> {\n         trace!(\"Transmuting 0x{:x} to a pointer\", addr);\n \n-        let global_state = ecx.machine.intptrcast.borrow();\n-\n-        match global_state.provenance_mode {\n-            ProvenanceMode::Legacy => {\n-                // In legacy mode, we have to support int2ptr transmutes,\n-                // so just pretend they do the same thing as a cast.\n-                Self::ptr_from_addr_cast(ecx, addr)\n-            }\n-            ProvenanceMode::Permissive | ProvenanceMode::Strict => {\n-                // Both of these modes consider transmuted pointers to be \"invalid\" (`None`\n-                // provenance).\n-                Pointer::new(None, Size::from_bytes(addr))\n-            }\n+        if ecx.machine.allow_ptr_int_transmute {\n+            // When we allow transmutes, treat them like casts.\n+            Self::ptr_from_addr_cast(ecx, addr)\n+        } else {\n+            // We consider transmuted pointers to be \"invalid\" (`None` provenance).\n+            Pointer::new(None, Size::from_bytes(addr))\n         }\n     }\n "}, {"sha": "1cb815706195b85a89274f7bccc5f0d367708563", "filename": "src/machine.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -255,13 +255,19 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// Whether to enforce the validity invariant.\n     pub(crate) validate: bool,\n \n-    /// Whether to enforce validity (e.g., initialization) of integers and floats.\n-    pub(crate) enforce_number_validity: bool,\n+    /// Whether to allow uninitialized numbers (integers and floats).\n+    pub(crate) allow_uninit_numbers: bool,\n+\n+    /// Whether to allow ptr2int transmutes, and whether to allow *dereferencing* the result of an\n+    /// int2ptr transmute.\n+    pub(crate) allow_ptr_int_transmute: bool,\n \n     /// Whether to enforce [ABI](Abi) of function calls.\n     pub(crate) enforce_abi: bool,\n \n+    /// The table of file descriptors.\n     pub(crate) file_handler: shims::posix::FileHandler,\n+    /// The table of directory descriptors.\n     pub(crate) dir_handler: shims::posix::DirHandler,\n \n     /// The \"time anchor\" for this machine's monotone clock (for `Instant` simulation).\n@@ -351,7 +357,8 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             tls: TlsData::default(),\n             isolated_op: config.isolated_op,\n             validate: config.validate,\n-            enforce_number_validity: config.check_number_validity,\n+            allow_uninit_numbers: config.allow_uninit_numbers,\n+            allow_ptr_int_transmute: config.allow_ptr_int_transmute,\n             enforce_abi: config.check_abi,\n             file_handler: FileHandler::new(config.mute_stdout_stderr),\n             dir_handler: Default::default(),\n@@ -493,12 +500,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn enforce_number_init(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n-        ecx.machine.enforce_number_validity\n+        !ecx.machine.allow_uninit_numbers\n     }\n \n     #[inline(always)]\n     fn enforce_number_no_provenance(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n-        ecx.machine.enforce_number_validity\n+        !ecx.machine.allow_ptr_int_transmute\n     }\n \n     #[inline(always)]"}, {"sha": "f56a309bf07898eb93b1b1714c00716d3488bfd6", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -405,8 +405,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // To catch double-destroys, we de-initialize the mutexattr.\n         // This is technically not right and might lead to false positives. For example, the below\n-        // code is *likely* sound, even assuming uninit numbers are UB, but miri with\n-        // -Zmiri-check-number-validity complains\n+        // code is *likely* sound, even assuming uninit numbers are UB, but Miri complains.\n         //\n         // let mut x: MaybeUninit<libc::pthread_mutexattr_t> = MaybeUninit::zeroed();\n         // libc::pthread_mutexattr_init(x.as_mut_ptr());"}, {"sha": "8a336e43ba18fa1c9299cb88e0b34e9003ae1595", "filename": "tests/compile-fail/provenance/ptr_int_unexposed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fprovenance%2Fptr_int_unexposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fprovenance%2Fptr_int_unexposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_int_unexposed.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance -Zmiri-disable-stacked-borrows\n+// compile-flags: -Zmiri-permissive-provenance -Zmiri-disable-stacked-borrows -Zmiri-allow-ptr-int-transmute\n \n fn main() {\n     let x: i32 = 3;"}, {"sha": "f4f3ed5afa5c4c789fd793649856948c73f32744", "filename": "tests/compile-fail/provenance/ptr_invalid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Zmiri-permissive-provenance\n #![feature(strict_provenance)]\n \n // Ensure that a `ptr::invalid` ptr is truly invalid."}, {"sha": "672c200861c684dbc997b89bb1a78eb4312b0737", "filename": "tests/compile-fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-allow-ptr-int-transmute\n // A callee may not read the destination of our `&mut` without us noticing.\n // Thise code got carefully checked to not introduce any reborrows\n // that are not explicit in the source. Let's hope the compiler does not break this later!"}, {"sha": "18c80ac42ac8ebc7f37d8eb1058014366cdae283", "filename": "tests/compile-fail/transmute-pair-uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Ftransmute-pair-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Ftransmute-pair-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-uninit.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-allow-uninit-numbers\n #![feature(core_intrinsics)]\n \n use std::mem;"}, {"sha": "9a1f8df94d60ff380e458c386e04d13cc0855888", "filename": "tests/compile-fail/uninit_byte_read.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Funinit_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Funinit_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funinit_byte_read.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-allow-uninit-numbers\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };"}, {"sha": "c36685ab2f467cf6611f4f0d699c6238cd6f12e7", "filename": "tests/compile-fail/validity/invalid_enum_tag_256variants_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(unused, deprecated, invalid_value)]\n \n #[derive(Copy, Clone)]"}, {"sha": "92c635ff22181505fa9d41cc4c861b0eeed033fc", "filename": "tests/compile-fail/validity/ptr_integer_array_transmute.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Fptr_integer_array_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Fptr_integer_array_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fptr_integer_array_transmute.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmiri-check-number-validity\n-\n fn main() {\n     let r = &mut 42;\n     let _i: [usize; 1] = unsafe { std::mem::transmute(r) }; //~ ERROR encountered a pointer, but expected plain (non-pointer) bytes"}, {"sha": "b23ccbbb1b033938d157b50a97672f34ff493910", "filename": "tests/compile-fail/validity/ptr_integer_transmute.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Fptr_integer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Fptr_integer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fptr_integer_transmute.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmiri-check-number-validity\n-\n fn main() {\n     let r = &mut 42;\n     let _i: usize = unsafe { std::mem::transmute(r) }; //~ ERROR expected plain (non-pointer) bytes"}, {"sha": "e79cbb45f984877ad36842077d6674058c2f59a9", "filename": "tests/compile-fail/validity/uninit_float.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Funinit_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Funinit_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Funinit_float.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmiri-check-number-validity\n-\n // This test is adapted from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n \n fn main() {"}, {"sha": "bfa25d6ef356d51239e48711405d99c4c6f73b8e", "filename": "tests/compile-fail/validity/uninit_integer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Funinit_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Funinit_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Funinit_integer.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmiri-check-number-validity\n-\n // This test is from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n \n fn main() {"}, {"sha": "1764120805c42f019eab4e1bd722caed2634bab5", "filename": "tests/compile-fail/validity/uninit_integer_signed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Funinit_integer_signed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Fcompile-fail%2Fvalidity%2Funinit_integer_signed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Funinit_integer_signed.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmiri-check-number-validity\n-\n // This test is adapted from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n \n fn main() {"}, {"sha": "e540a2a4b723f8604bbf19fec4b092f70b55376d", "filename": "tests/run-pass/bitop-beyond-alignment.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a4279fed9cc91e4e8921fff3b27d1c152f13b07/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4279fed9cc91e4e8921fff3b27d1c152f13b07/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbitop-beyond-alignment.rs?ref=0a4279fed9cc91e4e8921fff3b27d1c152f13b07", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::mem;\n-\n-enum Tag<A> {\n-    Tag2(A)\n-}\n-\n-#[allow(dead_code)]\n-struct Rec {\n-    c8: u8,\n-    t: Tag<u64>\n-}\n-\n-fn mk_rec() -> Rec {\n-    return Rec { c8:0, t:Tag::Tag2(0) };\n-}\n-\n-fn is_u64_aligned(u: &Tag<u64>) -> bool {\n-    let p: usize = unsafe { mem::transmute(u) };\n-    let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0;\n-}\n-\n-pub fn main() {\n-    let x = mk_rec();\n-    is_u64_aligned(&x.t); // the result of this is non-deterministic (even with a fixed seed, results vary between targets)\n-}"}, {"sha": "1f6f46cbeb51796d0fc462ff281d88204ee2bea4", "filename": "tests/run-pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,6 +1,6 @@\n // ignore-windows: No libc on Windows\n // ignore-apple: pthread_condattr_setclock is not supported on MacOS.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n "}, {"sha": "573bdbae704a4ebc138561822cb84fca2ecf4e4e", "filename": "tests/run-pass/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-allow-ptr-int-transmute\n+\n // This returns a miri pointer at type usize, if the argument is a proper pointer\n fn transmute_ptr_to_int<T>(x: *const T) -> usize {\n     unsafe { std::mem::transmute(x) }"}, {"sha": "fd3625639bfdee9241f384dc0896b52bcd2a1da8", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -197,17 +197,17 @@ fn test_prctl_thread_name() {\n     use libc::c_long;\n     unsafe {\n         let mut buf = [255; 10];\n-        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long), 0);\n         assert_eq!(b\"<unnamed>\\0\", &buf);\n         let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n-        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(libc::prctl(libc::PR_SET_NAME, thread_name.as_ptr(), 0 as c_long, 0 as c_long, 0 as c_long), 0);\n         let mut buf = [255; 6];\n-        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long), 0);\n         assert_eq!(b\"hello\\0\", &buf);\n         let long_thread_name = CString::new(\"01234567890123456789\").expect(\"CString::new failed\");\n-        assert_eq!(libc::prctl(libc::PR_SET_NAME, long_thread_name.as_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(libc::prctl(libc::PR_SET_NAME, long_thread_name.as_ptr(), 0 as c_long, 0 as c_long, 0 as c_long), 0);\n         let mut buf = [255; 16];\n-        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr() as c_long, 0 as c_long, 0 as c_long, 0 as c_long), 0);\n+        assert_eq!(libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long), 0);\n         assert_eq!(b\"012345678901234\\0\", &buf);\n     }\n }"}, {"sha": "0edc3c9e6cd840cff7e0b14ca555231a7fd9f353", "filename": "tests/run-pass/move-uninit-primval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fmove-uninit-primval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fmove-uninit-primval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-uninit-primval.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(deprecated)]\n \n struct Foo {"}, {"sha": "5ee9abbcb95bbdfccfe31d60c04c64c3371dfd1c", "filename": "tests/run-pass/partially-uninit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fpartially-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fpartially-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpartially-uninit.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmiri-check-number-validity\n-\n use std::mem::{self, MaybeUninit};\n \n #[repr(C)]"}, {"sha": "4c6341813f5b755c78ed1fde1dbd5bd49301c774", "filename": "tests/run-pass/ptr_offset.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -61,7 +61,9 @@ fn ptr_offset() {\n     unsafe {\n         let p = f as fn() -> i32 as usize;\n         let x = (p as *mut u32).offset(0) as usize;\n-        let f: fn() -> i32 = mem::transmute(x);\n+        // *cast* to ptr, then transmute to fn ptr.\n+        // (transmuting int to [fn]ptr causes trouble.)\n+        let f: fn() -> i32 = mem::transmute(x as *const ());\n         assert_eq!(f(), 42);\n     }\n }"}, {"sha": "460c2b25594afed06ccf15fe5e6c25d021b18e80", "filename": "tests/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -25,7 +25,8 @@ fn mk_rec() -> Rec {\n }\n \n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n-    let p: usize = unsafe { mem::transmute(u) };\n+    let p: *const () = unsafe { mem::transmute(u) };\n+    let p = p as usize;\n     let u64_align = std::mem::align_of::<u64>();\n     return (p & (u64_align - 1)) == 0;\n }"}, {"sha": "8a6e15031cb4db68c26c270409ebd3118ec97008", "filename": "tests/run-pass/transmute_fat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftransmute_fat.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,13 +1,14 @@\n // Stacked Borrows disallows this becuase the reference is never cast to a raw pointer.\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+// compile-flags: -Zmiri-disable-stacked-borrows -Zmiri-allow-ptr-int-transmute\n \n fn main() {\n     // If we are careful, we can exploit data layout...\n     let raw = unsafe {\n         std::mem::transmute::<&[u8], [usize; 2]>(&[42])\n     };\n     let ptr = raw[0] + raw[1];\n-    let ptr = ptr as *const u8;\n+    // We transmute both ways, to really test allow-ptr-int-transmute.\n+    let ptr: *const u8 = unsafe { std::mem::transmute(ptr) };\n     // The pointer is one-past-the end, but we decrement it into bounds before using it\n     assert_eq!(unsafe { *ptr.offset(-1) }, 42);\n }"}, {"sha": "13aac61ba84cca64ce950c4fb719a727f098912b", "filename": "tests/run-pass/uninit_number_ignored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Funinit_number_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c42ef1dee4143c3ba8a2c31558b75edb179b517/tests%2Frun-pass%2Funinit_number_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funinit_number_ignored.rs?ref=8c42ef1dee4143c3ba8a2c31558b75edb179b517", "patch": "@@ -1,5 +1,5 @@\n+// compile-flags: -Zmiri-allow-uninit-numbers\n // This test is adapted from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n-// This test passes because -Zmiri-check-number-validity is not passed.\n \n fn main() {\n     let _val1 = unsafe { std::mem::MaybeUninit::<usize>::uninit().assume_init() };"}]}