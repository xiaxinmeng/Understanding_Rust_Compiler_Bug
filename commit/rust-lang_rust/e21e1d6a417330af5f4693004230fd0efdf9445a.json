{"sha": "e21e1d6a417330af5f4693004230fd0efdf9445a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMWUxZDZhNDE3MzMwYWY1ZjQ2OTMwMDQyMzBmZDBlZmRmOTQ0NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-05T10:35:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-05T10:35:21Z"}, "message": "Auto merge of #87740 - npmccallum:naked_args, r=Amanieu\n\nDisable unused variable lint for naked functions\n\nIn most calling conventions, accessing function parameters may require\nstack access. However, naked functions have no assembly prelude to set\nup stack access.  This is why naked functions may only contain a single\n`asm!()` block. All parameter access is done inside the `asm!()` block,\nso we cannot validate the liveness of the input parameters. Therefore,\nwe should disable the lint for naked functions.\n\nrust-lang/rfcs#2774\nrust-lang/rfcs#2972\n\n`@joshtriplett` `@Amanieu` `@haraldh`", "tree": {"sha": "c6ca112ce1ce60460461615958ac3eee04dc6d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6ca112ce1ce60460461615958ac3eee04dc6d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e21e1d6a417330af5f4693004230fd0efdf9445a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e21e1d6a417330af5f4693004230fd0efdf9445a", "html_url": "https://github.com/rust-lang/rust/commit/e21e1d6a417330af5f4693004230fd0efdf9445a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e21e1d6a417330af5f4693004230fd0efdf9445a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddb65c32253872c0e7a02e43ec520877900370e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddb65c32253872c0e7a02e43ec520877900370e", "html_url": "https://github.com/rust-lang/rust/commit/2ddb65c32253872c0e7a02e43ec520877900370e"}, {"sha": "9c0147c02d7a58d41d25d7604d65bbb02b6d21b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0147c02d7a58d41d25d7604d65bbb02b6d21b0", "html_url": "https://github.com/rust-lang/rust/commit/9c0147c02d7a58d41d25d7604d65bbb02b6d21b0"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "f2c2521ab43e4690e4366ed42f7834bb697b4968", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21e1d6a417330af5f4693004230fd0efdf9445a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=e21e1d6a417330af5f4693004230fd0efdf9445a", "patch": "@@ -332,6 +332,11 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             }\n         }\n \n+        // Don't run unused pass for #[naked]\n+        if self.tcx.has_attr(def_id, sym::naked) {\n+            return;\n+        }\n+\n         if let Some(captures) = maps.tcx.typeck(local_def_id).closure_min_captures.get(&def_id) {\n             for &var_hir_id in captures.keys() {\n                 let var_name = maps.tcx.hir().name(var_hir_id);"}, {"sha": "e1f2362bb6fd075f2d3f8a0fa6c6d496485227be", "filename": "src/test/ui/asm/naked-functions-unused.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21e1d6a417330af5f4693004230fd0efdf9445a/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs?ref=e21e1d6a417330af5f4693004230fd0efdf9445a", "patch": "@@ -0,0 +1,81 @@\n+// only-x86_64\n+#![deny(unused)]\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![crate_type = \"lib\"]\n+\n+pub trait Trait {\n+    extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize;\n+    extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize;\n+}\n+\n+pub mod normal {\n+    pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+        //~^ ERROR unused variable: `a`\n+        //~| ERROR unused variable: `b`\n+        unsafe { asm!(\"\", options(noreturn)); }\n+    }\n+\n+    pub struct Normal;\n+\n+    impl Normal {\n+        pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+\n+    impl super::Trait for Normal {\n+        extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+}\n+\n+pub mod naked {\n+    #[naked]\n+    pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+        unsafe { asm!(\"\", options(noreturn)); }\n+    }\n+\n+    pub struct Naked;\n+\n+    impl Naked {\n+        #[naked]\n+        pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        #[naked]\n+        pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+\n+    impl super::Trait for Naked {\n+        #[naked]\n+        extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        #[naked]\n+        extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+}"}, {"sha": "840353366b6703edf3ae938781c7f0f38007b58c", "filename": "src/test/ui/asm/naked-functions-unused.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e21e1d6a417330af5f4693004230fd0efdf9445a/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e21e1d6a417330af5f4693004230fd0efdf9445a/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr?ref=e21e1d6a417330af5f4693004230fd0efdf9445a", "patch": "@@ -0,0 +1,69 @@\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:13:37\n+   |\n+LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+   |                                     ^ help: if this is intentional, prefix it with an underscore: `_a`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/naked-functions-unused.rs:2:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:13:47\n+   |\n+LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+   |                                               ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:22:43\n+   |\n+LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+   |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:22:53\n+   |\n+LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:28:46\n+   |\n+LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                              ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:28:56\n+   |\n+LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                                        ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:36:45\n+   |\n+LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                             ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:36:55\n+   |\n+LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                                       ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:42:48\n+   |\n+LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:42:58\n+   |\n+LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: aborting due to 10 previous errors\n+"}]}