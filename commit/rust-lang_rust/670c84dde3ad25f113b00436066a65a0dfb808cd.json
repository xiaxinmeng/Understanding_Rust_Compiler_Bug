{"sha": "670c84dde3ad25f113b00436066a65a0dfb808cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MGM4NGRkZTNhZDI1ZjExM2IwMDQzNjA2NmE2NWEwZGZiODA4Y2Q=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-17T23:25:42Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-28T14:06:52Z"}, "message": "Fix tests broken by more consistent miri unleashed warnings", "tree": {"sha": "78a8cd01322607c22eddf3350a8fa0be4039fa6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78a8cd01322607c22eddf3350a8fa0be4039fa6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670c84dde3ad25f113b00436066a65a0dfb808cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670c84dde3ad25f113b00436066a65a0dfb808cd", "html_url": "https://github.com/rust-lang/rust/commit/670c84dde3ad25f113b00436066a65a0dfb808cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670c84dde3ad25f113b00436066a65a0dfb808cd/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c990243922ac37789d6b49a8ea8eea7da0a28993", "url": "https://api.github.com/repos/rust-lang/rust/commits/c990243922ac37789d6b49a8ea8eea7da0a28993", "html_url": "https://github.com/rust-lang/rust/commit/c990243922ac37789d6b49a8ea8eea7da0a28993"}], "stats": {"total": 324, "additions": 82, "deletions": 242}, "files": [{"sha": "2fbb19322442b3dcab4fef3ab2280ff572dce32e", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 9, "deletions": 135, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -1,146 +1,20 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:25:5\n+  --> $DIR/const_fn_ptr.rs:12:5\n    |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:25:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:25:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:27:5\n-   |\n-LL |     assert_eq!(y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:27:5\n-   |\n-LL |     assert_eq!(y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:27:5\n-   |\n-LL |     assert_eq!(y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:29:5\n-   |\n-LL |     assert_eq!(y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:29:5\n-   |\n-LL |     assert_eq!(y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |     X(x)\n+   |     ^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:29:5\n-   |\n-LL |     assert_eq!(y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n+  --> $DIR/const_fn_ptr.rs:16:5\n    |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |     X_const(x)\n+   |     ^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:32:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:32:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:32:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:34:5\n-   |\n-LL |     assert_eq!(z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:34:5\n-   |\n-LL |     assert_eq!(z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:34:5\n-   |\n-LL |     assert_eq!(z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:36:5\n-   |\n-LL |     assert_eq!(z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:36:5\n-   |\n-LL |     assert_eq!(z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:36:5\n-   |\n-LL |     assert_eq!(z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n+  --> $DIR/const_fn_ptr.rs:20:5\n    |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |     x(y)\n+   |     ^^^^\n \n warning: constant `X_const` should have an upper case name\n   --> $DIR/const_fn_ptr.rs:9:7"}, {"sha": "90d3cba07a5987ea53e7a6e1f589c011bdbc0630", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -8,6 +8,7 @@ const X: fn(usize) -> usize = double;\n \n const fn bar(x: usize) -> usize {\n     X(x) // FIXME: this should error someday\n+    //~^ WARN: skipping const checks\n }\n \n fn main() {}"}, {"sha": "e80f363ff8be49cc603dd543bde85fb75f88b09a", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -0,0 +1,6 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail.rs:10:5\n+   |\n+LL |     X(x) // FIXME: this should error someday\n+   |     ^^^^\n+"}, {"sha": "b300119509ce444910c52fb93627674b344e0629", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -6,7 +6,7 @@ fn double(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n \n const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n-    x(y)\n+    x(y) //~ WARN skipping const checks\n }\n \n const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n@@ -15,12 +15,6 @@ const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n fn main() {\n     assert_eq!(Y, 4);\n     //~^ ERROR evaluation of constant expression failed\n-    //~^^ WARN skipping const checks\n-    //~^^^ WARN skipping const checks\n-    //~^^^^ WARN skipping const checks\n     assert_eq!(Z, 4);\n     //~^ ERROR evaluation of constant expression failed\n-    //~^^ WARN skipping const checks\n-    //~^^^ WARN skipping const checks\n-    //~^^^^ WARN skipping const checks\n }"}, {"sha": "9d74d3b0bf22930b25573af32807baca4b46ae6b", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -1,50 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:16:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:16:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:16:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |     x(y)\n+   |     ^^^^\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:16:5\n@@ -57,7 +15,7 @@ LL |     assert_eq!(Y, 4);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+  --> $DIR/const_fn_ptr_fail2.rs:18:5\n    |\n LL |     assert_eq!(Z, 4);\n    |     ^^^^^^^^^^^-^^^^^"}, {"sha": "6a6cb343f17d58aa89117b5163e80d4ff568ec58", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -1,8 +1,8 @@\n warning: skipping const checks\n-  --> $DIR/assoc_const.rs:12:31\n+  --> $DIR/assoc_const.rs:12:20\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |                               ^\n+   |                    ^^^^^^^^^^\n \n error[E0080]: erroneous constant used\n   --> $DIR/assoc_const.rs:29:13"}, {"sha": "df366ba22e4d122189df8257c1f826ab7b83022a", "filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.stderr", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -22,51 +22,3 @@ warning: skipping const checks\n LL |     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n    |            ^^^^^^^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:108:5\n-   |\n-LL |     assert_eq!(OVERFLOW, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:108:5\n-   |\n-LL |     assert_eq!(OVERFLOW, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:108:5\n-   |\n-LL |     assert_eq!(OVERFLOW, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:109:5\n-   |\n-LL |     assert_eq!(MORE_OVERFLOW, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:109:5\n-   |\n-LL |     assert_eq!(MORE_OVERFLOW, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:109:5\n-   |\n-LL |     assert_eq!(MORE_OVERFLOW, 0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-"}, {"sha": "44b408494679c1eca307ffe20076bcf4dcc93aac", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -7,6 +7,7 @@ use std::cell::UnsafeCell;\n \n // make sure we do not just intern this as mutable\n const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+//~^ WARN: skipping const checks\n \n const MUTATING_BEHIND_RAW: () = {\n     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time."}, {"sha": "757f0ffb59ff7540114aad37a6d90a762bac8ea1", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -1,11 +1,17 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const.rs:14:9\n+  --> $DIR/mutable_const.rs:9:38\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_const.rs:15:9\n    |\n LL |         *MUTABLE_BEHIND_RAW = 99\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/mutable_const.rs:14:9\n+  --> $DIR/mutable_const.rs:15:9\n    |\n LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time."}, {"sha": "b2f3e0cdb287f1ac3cf6f390ab6577891097388c", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -6,12 +6,16 @@ use std::cell::UnsafeCell;\n // a test demonstrating what things we could allow with a smarter const qualification\n \n static FOO: &&mut u32 = &&mut 42;\n+//~^ WARN: skipping const checks\n+//~| WARN: skipping const checks\n \n static BAR: &mut () = &mut ();\n+//~^ WARN: skipping const checks\n \n struct Foo<T>(T);\n \n static BOO: &mut Foo<()> = &mut Foo(());\n+//~^ WARN: skipping const checks\n \n struct Meh {\n     x: &'static UnsafeCell<i32>,\n@@ -21,9 +25,11 @@ unsafe impl Sync for Meh {}\n \n static MEH: Meh = Meh {\n     x: &UnsafeCell::new(42),\n+    //~^ WARN: skipping const checks\n };\n \n static OH_YES: &mut i32 = &mut 42;\n+//~^ WARN: skipping const checks\n \n fn main() {\n     unsafe {"}, {"sha": "ba01d155725013ff8ba46bfdca4b1533dea22eb7", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -1,5 +1,41 @@\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:8:26\n+   |\n+LL | static FOO: &&mut u32 = &&mut 42;\n+   |                          ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:8:25\n+   |\n+LL | static FOO: &&mut u32 = &&mut 42;\n+   |                         ^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:12:23\n+   |\n+LL | static BAR: &mut () = &mut ();\n+   |                       ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:17:28\n+   |\n+LL | static BOO: &mut Foo<()> = &mut Foo(());\n+   |                            ^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:27:8\n+   |\n+LL |     x: &UnsafeCell::new(42),\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:31:27\n+   |\n+LL | static OH_YES: &mut i32 = &mut 42;\n+   |                           ^^^^^^^\n+\n error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:32:5\n+  --> $DIR/mutable_references.rs:38:5\n    |\n LL |     *OH_YES = 99;\n    |     ^^^^^^^^^^^^ cannot assign"}, {"sha": "635cad81c97987168f624392809c4f32647c32cb", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -19,7 +19,7 @@ unsafe impl Sync for Meh {}\n \n // the following will never be ok!\n const MUH: Meh = Meh {\n-    x: &UnsafeCell::new(42),\n+    x: &UnsafeCell::new(42), //~ WARN: skipping const checks\n };\n \n fn main() {"}, {"sha": "c148842bcbc66a778276f71d00947a05dab06524", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670c84dde3ad25f113b00436066a65a0dfb808cd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=670c84dde3ad25f113b00436066a65a0dfb808cd", "patch": "@@ -1,3 +1,9 @@\n+warning: skipping const checks\n+  --> $DIR/mutable_references_ice.rs:22:8\n+   |\n+LL |     x: &UnsafeCell::new(42),\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n  right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites could observe that mutation.', src/librustc_mir/interpret/intern.rs:LL:CC"}]}