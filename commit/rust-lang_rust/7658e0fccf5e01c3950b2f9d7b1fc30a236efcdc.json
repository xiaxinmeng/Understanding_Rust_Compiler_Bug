{"sha": "7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "node_id": "C_kwDOAAsO6NoAKDc2NThlMGZjY2Y1ZTAxYzM5NTBiMmY5ZDdiMWZjMzBhMjM2ZWZjZGM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T12:24:53Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:39:46Z"}, "message": "Stop passing the self-type as a separate argument.", "tree": {"sha": "bba8990f75cd79c3fc24829b1afbfb7c95545a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba8990f75cd79c3fc24829b1afbfb7c95545a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "html_url": "https://github.com/rust-lang/rust/commit/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4da3f8863852b49195a83758693942e338cb05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4da3f8863852b49195a83758693942e338cb05e", "html_url": "https://github.com/rust-lang/rust/commit/a4da3f8863852b49195a83758693942e338cb05e"}], "stats": {"total": 277, "additions": 113, "deletions": 164}, "files": [{"sha": "8f1ae594a9247ee3765e4b7ca690842429bf727f", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -489,12 +489,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             // but the type has region variables, so erase those.\n             tcx.infer_ctxt()\n                 .build()\n-                .type_implements_trait(\n-                    default_trait,\n-                    tcx.erase_regions(ty),\n-                    ty::List::empty(),\n-                    param_env,\n-                )\n+                .type_implements_trait(default_trait, [tcx.erase_regions(ty)], param_env)\n                 .must_apply_modulo_regions()\n         };\n \n@@ -1707,7 +1702,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             err.span_label(borrow_span, note);\n \n             let tcx = self.infcx.tcx;\n-            let ty_params = ty::List::empty();\n \n             let return_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n             let return_ty = tcx.erase_regions(return_ty);\n@@ -1716,7 +1710,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator)\n                 && self\n                     .infcx\n-                    .type_implements_trait(iter_trait, return_ty, ty_params, self.param_env)\n+                    .type_implements_trait(iter_trait, [return_ty], self.param_env)\n                     .must_apply_modulo_regions()\n             {\n                 err.span_suggestion_hidden("}, {"sha": "7467212bed883aa2827db09a19c1093b9c7a97cf", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, place_ty.ty, []);\n+            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, [place_ty.ty]);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1271,7 +1271,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n                     let trait_ref =\n-                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, place_ty, []);\n+                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, [place_ty]);\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1860,7 +1860,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, ty, []);\n+                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, [ty]);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1873,7 +1873,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, ty, []);\n+                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1885,7 +1885,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, *ty, []);\n+                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [*ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1982,11 +1982,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = tcx.at(span).mk_trait_ref(\n-                            LangItem::CoerceUnsized,\n-                            op.ty(body, tcx),\n-                            [ty.into()],\n-                        );\n+                        let trait_ref = tcx\n+                            .at(span)\n+                            .mk_trait_ref(LangItem::CoerceUnsized, [op.ty(body, tcx), ty]);\n \n                         self.prove_trait_ref(\n                             trait_ref,"}, {"sha": "e7b3df9b7288bc7610e62977fbed7f7c8356c41a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -158,7 +158,7 @@ impl Qualif for NeedsNonConstDrop {\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n-                trait_ref: cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, ty, []),\n+                trait_ref: cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]),\n                 constness: ty::BoundConstness::ConstIfConst,\n                 polarity: ty::ImplPolarity::Positive,\n             }),"}, {"sha": "3e3544ce666e39e6b296e4b8d9ad2ecc255288e2", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> Bounds<'tcx> {\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n             // FIXME: use tcx.at(span).mk_trait_ref(LangItem::Sized) here? This may make no-core code harder to write.\n             let sized = tcx.lang_items().sized_trait()?;\n-            let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, param_ty, []));\n+            let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, [param_ty]));\n             Some((trait_ref.without_const().to_predicate(tcx), span))\n         });\n "}, {"sha": "7119f3a238697b1b9a544501ffc69edfee00d375", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -1782,7 +1782,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, receiver_ty, []));\n+    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, [receiver_ty]));\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n "}, {"sha": "b2c9e7389b0470a6cc81be75f3323fad49b58c63", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -315,8 +315,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n                             cause.clone(),\n                             dispatch_from_dyn_trait,\n                             0,\n-                            field.ty(tcx, substs_a),\n-                            [field.ty(tcx, substs_b).into()],\n+                            [field.ty(tcx, substs_a), field.ty(tcx, substs_b)],\n                         )\n                     }),\n                 );\n@@ -558,7 +557,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n     // Register an obligation for `A: Trait<B>`.\n     let cause = traits::ObligationCause::misc(span, impl_hir_id);\n     let predicate =\n-        predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, source, [target.into()]);\n+        predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, [source, target]);\n     let errors = traits::fully_solve_obligation(&infcx, predicate);\n     if !errors.is_empty() {\n         infcx.err_ctxt().report_fulfillment_errors(&errors, None);"}, {"sha": "5e1e44dcb6d158d9d5321736ed46a1bd6ce50f24", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -498,10 +498,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         let ty = fcx.tcx.erase_regions(ty);\n                         let expr_ty = fcx.resolve_vars_if_possible(self.expr_ty);\n                         let expr_ty = fcx.tcx.erase_regions(expr_ty);\n-                        let ty_params = fcx.tcx.mk_substs(std::iter::once(ty::GenericArg::from(expr_ty)));\n                         if fcx\n                             .infcx\n-                            .type_implements_trait(from_trait, ty, ty_params, fcx.param_env)\n+                            .type_implements_trait(from_trait, [ty, expr_ty], fcx.param_env)\n                             .must_apply_modulo_regions()\n                         {\n                             label = false;"}, {"sha": "5062926106942b42870cb7be4590f3ab834e6639", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -630,8 +630,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             cause,\n             coerce_unsized_did,\n             0,\n-            coerce_source,\n-            [coerce_target.into()]\n+            [coerce_source, coerce_target]\n         )];\n \n         let mut has_unsized_tuple_coercion = false;\n@@ -1086,8 +1085,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.infcx\n                 .type_implements_trait(\n                     self.tcx.lang_items().deref_mut_trait()?,\n-                    expr_ty,\n-                    ty::List::empty(),\n+                    [expr_ty],\n                     self.param_env,\n                 )\n                 .may_apply()"}, {"sha": "de30bfe6923a7cc84cf77d72c33f2dff50ec2225", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -1119,8 +1119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .infcx\n                     .type_implements_trait(\n                         self.tcx.lang_items().sized_trait().unwrap(),\n-                        lhs_deref_ty,\n-                        ty::List::empty(),\n+                        [lhs_deref_ty],\n                         self.param_env,\n                     )\n                     .may_apply();"}, {"sha": "b5aa8cd6e7c5b2b8743cd2beb0ed5291a9fcfed9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -1095,7 +1095,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.param_env,\n                 ty::Binder::dummy(self.tcx.mk_trait_ref(\n                     into_def_id,\n-                    expr_ty, [expected_ty.into()]\n+                    [expr_ty, expected_ty]\n                 ))\n                 .to_poly_trait_predicate(),\n             ))"}, {"sha": "89746ce54a643da089dca7ab161900533324127c", "filename": "compiler/rustc_hir_typeck/src/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -9,7 +9,6 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_middle::ty;\n use rustc_middle::ty::{Adt, Array, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::{Empty, Underscore};\n@@ -232,10 +231,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     kind: TypeVariableOriginKind::MiscVariable,\n                     span,\n                 });\n-                let params = self.tcx.mk_substs(std::iter::once(ty::GenericArg::from(any_type)));\n                 if !self\n                     .infcx\n-                    .type_implements_trait(trait_def_id, self_ty, params, self.param_env)\n+                    .type_implements_trait(trait_def_id, [self_ty, any_type], self.param_env)\n                     .may_apply()\n                 {\n                     return;"}, {"sha": "d0ea2b0e66475df861048ba32899c0e81cbaa0c3", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -70,13 +70,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.probe(|_| {\n                         let trait_ref = tcx.mk_trait_ref(\n                             fn_once,\n-                            ty,\n-                            [self\n-                                .next_ty_var(TypeVariableOrigin {\n+                            [\n+                                ty,\n+                                self.next_ty_var(TypeVariableOrigin {\n                                     kind: TypeVariableOriginKind::MiscVariable,\n                                     span,\n-                                })\n-                                .into()],\n+                                }),\n+                            ],\n                         );\n                         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc("}, {"sha": "68f119adc7a7cb6392a1164fcb7c087ed2dda8aa", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -970,12 +970,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 check_trait\n                     .map(|check_trait| {\n                         self.infcx\n-                            .type_implements_trait(\n-                                check_trait,\n-                                ty,\n-                                ty::List::empty(),\n-                                self.param_env,\n-                            )\n+                            .type_implements_trait(check_trait, [ty], self.param_env)\n                             .must_apply_modulo_regions()\n                     })\n                     .unwrap_or(false),\n@@ -999,12 +994,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     check_trait\n                         .map(|check_trait| {\n                             self.infcx\n-                                .type_implements_trait(\n-                                    check_trait,\n-                                    ty,\n-                                    ty::List::empty(),\n-                                    self.param_env,\n-                                )\n+                                .type_implements_trait(check_trait, [ty], self.param_env)\n                                 .must_apply_modulo_regions()\n                         })\n                         .unwrap_or(false),\n@@ -1348,12 +1338,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let is_drop_defined_for_ty = |ty: Ty<'tcx>| {\n             let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, Some(closure_span));\n             self.infcx\n-                .type_implements_trait(\n-                    drop_trait,\n-                    ty,\n-                    ty::List::empty(),\n-                    self.tcx.param_env(closure_def_id),\n-                )\n+                .type_implements_trait(drop_trait, [ty], self.tcx.param_env(closure_def_id))\n                 .must_apply_modulo_regions()\n         };\n "}, {"sha": "54224c9b5de228d00e0b325c5d24efd575c3d89d", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -27,7 +27,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = infcx.tcx.mk_trait_ref(def_id, ty, []);\n+        let trait_ref = infcx.tcx.mk_trait_ref(def_id, [ty]);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "c1820ac4d1eab61ff9ac3eb759a556cd32f4a192", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -152,13 +152,17 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n             let infcx = cx.tcx.infer_ctxt().build();\n             let suggest_display = is_str\n-                || cx.tcx.get_diagnostic_item(sym::Display).map(|t| {\n-                    infcx.type_implements_trait(t, ty, ty::List::empty(), cx.param_env).may_apply()\n-                }) == Some(true);\n+                || cx\n+                    .tcx\n+                    .get_diagnostic_item(sym::Display)\n+                    .map(|t| infcx.type_implements_trait(t, [ty], cx.param_env).may_apply())\n+                    == Some(true);\n             let suggest_debug = !suggest_display\n-                && cx.tcx.get_diagnostic_item(sym::Debug).map(|t| {\n-                    infcx.type_implements_trait(t, ty, ty::List::empty(), cx.param_env).may_apply()\n-                }) == Some(true);\n+                && cx\n+                    .tcx\n+                    .get_diagnostic_item(sym::Debug)\n+                    .map(|t| infcx.type_implements_trait(t, [ty], cx.param_env).may_apply())\n+                    == Some(true);\n \n             let suggest_panic_any = !is_str && panic == sym::std_panic_macro;\n "}, {"sha": "8d6ae142314575676b5b10dcf69e6b209ee14ea2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -2820,17 +2820,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_trait_ref(\n         self,\n         trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n-        rest: impl IntoIterator<Item = GenericArg<'tcx>, IntoIter: ExactSizeIterator>,\n+        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n-        let rest = rest.into_iter();\n+        let substs = substs.into_iter().map(Into::into);\n+        let n = self.generics_of(trait_def_id).count();\n         debug_assert_eq!(\n-            self.generics_of(trait_def_id).count() - 1,\n-            rest.len(),\n-            \"wrong number of generic parameters for {trait_def_id:?} on self type {self_ty:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n-            rest.collect::<Vec<_>>(),\n+            (n, Some(n)),\n+            substs.size_hint(),\n+            \"wrong number of generic parameters for {trait_def_id:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n+            substs.collect::<Vec<_>>(),\n         );\n-        let substs = self.mk_substs_trait(self_ty, rest);\n+        let substs = self.mk_substs(substs);\n         ty::TraitRef::new(trait_def_id, substs)\n     }\n \n@@ -2994,11 +2994,10 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn mk_trait_ref(\n         self,\n         trait_lang_item: LangItem,\n-        self_ty: Ty<'tcx>,\n-        rest: impl IntoIterator<Item = ty::GenericArg<'tcx>, IntoIter: ExactSizeIterator>,\n+        substs: impl IntoIterator<Item = impl Into<ty::GenericArg<'tcx>>>,\n     ) -> ty::TraitRef<'tcx> {\n         let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n-        self.tcx.mk_trait_ref(trait_def_id, self_ty, rest)\n+        self.tcx.mk_trait_ref(trait_def_id, substs)\n     }\n }\n "}, {"sha": "db18558e947a3f7e1b61d32d34d522a1ddc72b60", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -719,7 +719,7 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n                 self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n-                let trait_ref = self.rebind(tcx.mk_trait_ref(did, self_ty, []));\n+                let trait_ref = self.rebind(tcx.mk_trait_ref(did, [self_ty]));\n                 trait_ref.without_const().to_predicate(tcx)\n             }\n         }\n@@ -812,7 +812,10 @@ impl<'tcx> TraitRef<'tcx> {\n     }\n \n     pub fn with_self_type(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n-        tcx.mk_trait_ref(self.def_id, self_ty, self.substs.iter().skip(1))\n+        tcx.mk_trait_ref(\n+            self.def_id,\n+            [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n+        )\n     }\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n@@ -910,7 +913,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        tcx.mk_trait_ref(self.def_id, self_ty, self.substs.iter())\n+        tcx.mk_trait_ref(self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n     }\n }\n "}, {"sha": "a21f6cd39f01442aa6b45b1d86c528571dd1d113", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -232,8 +232,7 @@ impl<'tcx> ConstToPat<'tcx> {\n             ObligationCause::misc(self.span, self.id),\n             partial_eq_trait_id,\n             0,\n-            ty,\n-            [ty.into()],\n+            [ty, ty],\n         );\n         // FIXME: should this call a `predicate_must_hold` variant instead?\n "}, {"sha": "b616ed35d99d7f11c983d0ecebb02f2223e4b08d", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -28,7 +28,7 @@ fn custom_coerce_unsize_info<'tcx>(\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n     let trait_ref =\n-        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, source_ty, [target_ty.into()]));\n+        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, [source_ty, target_ty]));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "9b39a9401149a72f8464d962ba06f794a8cbe1c4", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, []);\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "25a9c29caa7ab8585f3c95abd874ea3d1d12b443", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -7,9 +7,8 @@ use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{GenericArg, ToPredicate};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt::Debug;\n@@ -44,8 +43,7 @@ pub trait InferCtxtExt<'tcx> {\n     /// The inputs are:\n     ///\n     /// - the def-id of the trait\n-    /// - the self type\n-    /// - the *other* type parameters of the trait, excluding the self-type\n+    /// - the type parameters of the trait, including the self-type\n     /// - the parameter environment\n     ///\n     /// Invokes `evaluate_obligation`, so in the event that evaluating\n@@ -54,8 +52,7 @@ pub trait InferCtxtExt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        ty: Ty<'tcx>,\n-        params: SubstsRef<'tcx>,\n+        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult;\n }\n@@ -109,15 +106,14 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         InferOk { value, obligations }\n     }\n \n-    #[instrument(level = \"debug\", skip(self), ret)]\n+    #[instrument(level = \"debug\", skip(self, params), ret)]\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n-        params: SubstsRef<'tcx>,\n+        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, self_ty, params);\n+        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);\n \n         let obligation = traits::Obligation {\n             cause: traits::ObligationCause::dummy(),"}, {"sha": "a057e45ad6af45c2bf716ced48a8fb1189c02e2f", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = tcx.mk_trait_ref(trait_did, ty, []);\n+        let trait_ref = tcx.mk_trait_ref(trait_did, [ty]);\n \n         let trait_pred = ty::Binder::dummy(trait_ref);\n \n@@ -260,7 +260,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: infcx.tcx.mk_trait_ref(trait_did, ty, []),\n+            trait_ref: infcx.tcx.mk_trait_ref(trait_did, [ty]),\n \n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive"}, {"sha": "3a05708aebc6c53c33416ea4a2e882fb503521c2", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(def_id, ty, []);\n+        let trait_ref = tcx.mk_trait_ref(def_id, [ty]);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "946e6e77a3da0061cec3815a799a95f5cd5395bd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -347,7 +347,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, ty.skip_binder(), [var.into()]);\n+                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, [ty.skip_binder(), var]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),"}, {"sha": "8086cac0d551a42419b4f5a176d34b8804938551", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -2971,8 +2971,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n                 let impls_future = self.type_implements_trait(\n                     future_trait,\n-                    self.tcx.erase_late_bound_regions(self_ty),\n-                    ty::List::empty(),\n+                    [self.tcx.erase_late_bound_regions(self_ty)],\n                     obligation.param_env,\n                 );\n                 if !impls_future.must_apply_modulo_regions() {\n@@ -3070,15 +3069,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     let field_ty = field.ty(self.tcx, substs);\n                     let trait_substs = match diagnostic_name {\n                         sym::PartialEq | sym::PartialOrd => {\n-                            Some(field_ty.into())\n+                            Some(field_ty)\n                         }\n                         _ => None,\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n                         trait_ref: self.tcx.mk_trait_ref(\n                             trait_pred.def_id(),\n-                            field_ty,\n-                            trait_substs,\n+                            [field_ty].into_iter().chain(trait_substs),\n                         ),\n                         ..*tr\n                     });"}, {"sha": "ff18aa1f9e909d1fafac9199aea8c4a227aa8127", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -143,7 +143,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     def_id: DefId,\n     span: Span,\n ) -> bool {\n-    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, ty, []));\n+    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, [ty]));\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const(), span)\n }\n \n@@ -903,7 +903,7 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, source, [target.into()]);\n+    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, [source, target]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "90f48658113af45fd96ecb4a875e206d926caa46", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -685,11 +685,9 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n-            unsize_did,\n-            tcx.types.self_param,\n-            [unsized_self_ty.into()],\n-        ))\n+        let unsize_predicate = ty::Binder::dummy(\n+            tcx.mk_trait_ref(unsize_did, [tcx.types.self_param, unsized_self_ty]),\n+        )\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -721,11 +719,9 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n-            dispatch_from_dyn_did,\n-            receiver_ty,\n-            [unsized_receiver_ty.into()],\n-        ))\n+        let predicate = ty::Binder::dummy(\n+            tcx.mk_trait_ref(dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]),\n+        )\n         .without_const();\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)"}, {"sha": "9f19b0092c00f53b796e08736abbad314e902f8d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -1712,7 +1712,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                                 selcx.tcx(),\n                                 ty::Binder::dummy(selcx.tcx().at(obligation.cause.span).mk_trait_ref(\n                                     LangItem::Sized,\n-                                    self_ty, [],\n+                                    [self_ty],\n                                 ))\n                                 .without_const(),\n                             ),\n@@ -1966,11 +1966,9 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         )\n     });\n     if check_is_sized {\n-        let sized_predicate = ty::Binder::dummy(tcx.at(obligation.cause.span).mk_trait_ref(\n-            LangItem::Sized,\n-            self_ty,\n-            [],\n-        ))\n+        let sized_predicate = ty::Binder::dummy(\n+            tcx.at(obligation.cause.span).mk_trait_ref(LangItem::Sized, [self_ty]),\n+        )\n         .without_const();\n         obligations.push(obligation.with(tcx, sized_predicate));\n     }"}, {"sha": "99d4e47ffc16f93339eb373c049c05db536e3a77", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -714,7 +714,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, []);\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n \n         let obligation = traits::Obligation::new(\n             tcx,"}, {"sha": "2ec5d925b6900af0959b518f8379ffdd30659224", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -632,11 +632,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr = ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(\n-            LangItem::Sized,\n-            output_ty,\n-            [],\n-        ));\n+        let tr =\n+            ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(LangItem::Sized, [output_ty]));\n         nested.push(Obligation::new(\n             self.infcx.tcx,\n             cause,\n@@ -998,7 +995,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // We can only make objects from sized types.\n                 let tr =\n-                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, source, []));\n+                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [source]));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n@@ -1104,8 +1101,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     obligation.cause.clone(),\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n-                    source_tail,\n-                    [target_tail.into()],\n+                    [source_tail, target_tail],\n                 ));\n             }\n \n@@ -1135,8 +1131,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.cause.clone(),\n                         obligation.predicate.def_id(),\n                         obligation.recursion_depth + 1,\n-                        a_last,\n-                        [b_last.into()],\n+                        [a_last, b_last],\n                     )\n                 }));\n             }\n@@ -1252,11 +1247,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: self.tcx().at(cause.span).mk_trait_ref(\n-                                LangItem::Destruct,\n-                                nested_ty,\n-                                [],\n-                            ),\n+                            trait_ref: self\n+                                .tcx()\n+                                .at(cause.span)\n+                                .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n@@ -1277,11 +1271,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: self.tcx().at(cause.span).mk_trait_ref(\n-                            LangItem::Destruct,\n-                            nested_ty,\n-                            [],\n-                        ),\n+                        trait_ref: self\n+                            .tcx()\n+                            .at(cause.span)\n+                            .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,\n                     });"}, {"sha": "e54e290fb4b11dafe57a73515e02ff4f36599e2a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -2100,8 +2100,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     cause.clone(),\n                     trait_def_id,\n                     recursion_depth,\n-                    normalized_ty,\n-                    [],\n+                    [normalized_ty],\n                 );\n                 obligations.push(placeholder_obligation);\n                 obligations"}, {"sha": "895b84fd7e9dfe3095d28f9356531ec0c5f0339d", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -238,10 +238,9 @@ pub fn predicate_for_trait_def<'tcx>(\n     cause: ObligationCause<'tcx>,\n     trait_def_id: DefId,\n     recursion_depth: usize,\n-    self_ty: Ty<'tcx>,\n-    params: impl IntoIterator<Item = GenericArg<'tcx>, IntoIter: ExactSizeIterator>,\n+    params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n ) -> PredicateObligation<'tcx> {\n-    let trait_ref = tcx.mk_trait_ref(trait_def_id, self_ty, params);\n+    let trait_ref = tcx.mk_trait_ref(trait_def_id, params);\n     predicate_for_trait_ref(tcx, cause, param_env, trait_ref, recursion_depth)\n }\n \n@@ -304,7 +303,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, self_ty, [arguments_tuple.into()]);\n+    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -315,8 +314,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref =\n-        tcx.mk_trait_ref(fn_trait_def_id, self_ty, [sig.skip_binder().resume_ty.into()]);\n+    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n "}, {"sha": "53783e1bc4b2cf2adfcadaaf77f208026d8afe8b", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -421,7 +421,7 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, subty, []);\n+            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [subty]);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "5fc9bcac1b19e35bcb55098d7eb06c273dd44dc4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -49,7 +49,7 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, ty, []))\n+            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, [ty]))\n                 .without_const()\n                 .to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;"}, {"sha": "05607d05ecf234582aa4b7db47b312ea880d455e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(trait_def_id, ty, []);\n+        let trait_ref = tcx.mk_trait_ref(trait_def_id, [ty]);\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}, {"sha": "c4e7f8bfe1e20409ec0ca227bf50870563aba0f7", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -842,14 +842,10 @@ fn walk_parents<'tcx>(\n                         } else if let Some(trait_id) = cx.tcx.trait_of_item(id)\n                             && let arg_ty = cx.tcx.erase_regions(cx.typeck_results().expr_ty_adjusted(e))\n                             && let ty::Ref(_, sub_ty, _) = *arg_ty.kind()\n-                            && let subs = match cx\n+                            && let subs = cx\n                                 .typeck_results()\n-                                .node_substs_opt(parent.hir_id)\n-                                .and_then(|subs| subs.get(1..))\n-                            {\n-                                Some(subs) => cx.tcx.mk_substs(subs.iter().copied()),\n-                                None => cx.tcx.mk_substs(std::iter::empty::<ty::subst::GenericArg<'_>>()),\n-                            } && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n+                                .node_substs_opt(parent.hir_id).map(|subs| &subs[1..]).unwrap_or_default()\n+                            && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n                                 // Trait methods taking `&self`\n                                 sub_ty\n                             } else {\n@@ -858,7 +854,7 @@ fn walk_parents<'tcx>(\n                             } && impl_ty.is_ref()\n                             && let infcx = cx.tcx.infer_ctxt().build()\n                             && infcx\n-                                .type_implements_trait(trait_id, impl_ty, subs, cx.param_env)\n+                                .type_implements_trait(trait_id, [impl_ty.into()].into_iter().chain(subs.iter().copied()), cx.param_env)\n                                 .must_apply_modulo_regions()\n                         {\n                             return Some(Position::MethodReceiverRefImpl)"}, {"sha": "5420a0e782ea87877cd39b5c4d4f2681df8a6816", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -692,7 +692,7 @@ fn matches_preds<'tcx>(\n     let infcx = cx.tcx.infer_ctxt().build();\n     preds.iter().all(|&p| match cx.tcx.erase_late_bound_regions(p) {\n         ExistentialPredicate::Trait(p) => infcx\n-            .type_implements_trait(p.def_id, ty, p.substs, cx.param_env)\n+            .type_implements_trait(p.def_id, [ty.into()].into_iter().chain(p.substs.iter()), cx.param_env)\n             .must_apply_modulo_regions(),\n         ExistentialPredicate::Projection(p) => infcx.predicate_must_hold_modulo_regions(&Obligation::new(\n             cx.tcx,\n@@ -704,7 +704,7 @@ fn matches_preds<'tcx>(\n             )),\n         )),\n         ExistentialPredicate::AutoTrait(p) => infcx\n-            .type_implements_trait(p, ty, List::empty(), cx.param_env)\n+            .type_implements_trait(p, [ty], cx.param_env)\n             .must_apply_modulo_regions(),\n     })\n }"}, {"sha": "5ec6f29fe9163514df4ee91642384e7da446668d", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=7658e0fccf5e01c3950b2f9d7b1fc30a236efcdc", "patch": "@@ -178,7 +178,7 @@ pub fn implements_trait_with_env<'tcx>(\n     };\n     let ty_params = tcx.mk_substs(ty_params.into_iter().map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())));\n     infcx\n-        .type_implements_trait(trait_id, ty, ty_params, param_env)\n+        .type_implements_trait(trait_id, [ty.into()].into_iter().chain(ty_params), param_env)\n         .must_apply_modulo_regions()\n }\n "}]}