{"sha": "a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmVlZjRkODYzYWE3YmE0M2YxNDVjNDFmMWExNmNmNzAzMmNlNmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-19T11:18:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T10:59:57Z"}, "message": "Use IndexSet and keep full source info in set_debug_loc", "tree": {"sha": "b52499ada482deaf49dd6f3253f0dc5e98d3590e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b52499ada482deaf49dd6f3253f0dc5e98d3590e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "html_url": "https://github.com/rust-lang/rust/commit/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5cbc540d294f437785eeb678867ee753c6243b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5cbc540d294f437785eeb678867ee753c6243b", "html_url": "https://github.com/rust-lang/rust/commit/6b5cbc540d294f437785eeb678867ee753c6243b"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "c7d619dd36a831b90deab3d3698eb09d7c0b9e4f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "patch": "@@ -597,6 +597,7 @@ dependencies = [\n  \"env_logger 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"faerie 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gimli 0.16.1 (git+https://github.com/gimli-rs/gimli.git)\",\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "75f12add1190034cb4e82abc8c81564da0b9f41f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "patch": "@@ -29,6 +29,7 @@ tempfile = \"3.0.4\"\n env_logger = \"0.6\"\n gimli = { git = \"https://github.com/gimli-rs/gimli.git\" }\n faerie = \"0.7.1\"\n+indexmap = \"1.0.2\"\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/CraneStation/cranelift.git\"]"}, {"sha": "0d130bb8a1b8d8c5157ae2fd92c3fe764156f839", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "patch": "@@ -108,15 +108,15 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n         clif_comments,\n         constants: &mut cx.ccx,\n         caches: &mut cx.caches,\n-        spans: Vec::new(),\n+        source_info_set: indexmap::IndexSet::new(),\n     };\n \n     // Step 6. Codegen function\n     with_unimpl_span(fx.mir.span, || {\n         crate::abi::codegen_fn_prelude(&mut fx, start_ebb);\n         codegen_fn_content(&mut fx);\n     });\n-    let spans = fx.spans.clone();\n+    let source_info_set = fx.source_info_set.clone();\n \n     // Step 7. Write function to file for debugging\n     #[cfg(debug_assertions)]\n@@ -129,7 +129,7 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     cx.caches.context.func = func;\n     cx.module\n         .define_function_peek_compiled(func_id, &mut cx.caches.context, |size, context, isa| {\n-            debug_context.as_mut().map(|x| x.define(tcx, size, context, isa, &spans[..]));\n+            debug_context.as_mut().map(|x| x.define(tcx, size, context, isa, &source_info_set));\n         })\n         .unwrap();\n     //let module = &mut cx.module;"}, {"sha": "b88d439932a4a7092af44c1530fcb472329ae45b", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "patch": "@@ -539,7 +539,7 @@ pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants: &'a mut crate::constant::ConstantCx,\n     pub caches: &'a mut Caches<'tcx>,\n-    pub spans: Vec<Span>,\n+    pub source_info_set: indexmap::IndexSet<SourceInfo>,\n }\n \n impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n@@ -620,9 +620,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     }\n \n     pub fn set_debug_loc(&mut self, source_info: mir::SourceInfo) {\n-        // FIXME: record scope too\n-        let index = self.spans.len() as u32;\n-        self.spans.push(source_info.span);\n-        self.bcx.set_srcloc(SourceLoc::new(index));\n+        let (index, _) = self.source_info_set.insert_full(source_info);\n+        self.bcx.set_srcloc(SourceLoc::new(index as u32));\n     }\n }"}, {"sha": "e86abcac0d68a950fa5a9b5852bf2136a1c11bce", "filename": "src/debuginfo.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "patch": "@@ -36,14 +36,16 @@ pub struct DebugContext<'tcx> {\n     version: u16,\n     address_size: u8,\n \n+    symbols: indexmap::IndexSet<String>,\n+\n     strings: StringTable,\n     units: UnitTable,\n-    unit_id: UnitId,\n     line_programs: LineProgramTable,\n-    global_line_program: LineProgramId,\n     range_lists: RangeListTable,\n+\n+    unit_id: UnitId,\n+    global_line_program: LineProgramId,\n     unit_range_list: RangeList,\n-    symbol_names: Vec<String>,\n \n     _dummy: PhantomData<&'tcx ()>,\n }\n@@ -115,14 +117,17 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n             version,\n             address_size,\n \n+            symbols: indexmap::IndexSet::new(),\n+\n             strings,\n             units,\n-            unit_id,\n             line_programs,\n-            global_line_program,\n             range_lists,\n+\n+            unit_id,\n+            global_line_program,\n             unit_range_list: RangeList(Vec::new()),\n-            symbol_names: Vec::new(),\n+\n             _dummy: PhantomData,\n         }\n     }\n@@ -345,8 +350,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         name: &str,\n         _sig: &Signature,\n     ) -> Self {\n-        let symbol = debug_context.symbol_names.len();\n-        debug_context.symbol_names.push(name.to_string());\n+        let (symbol, _) = debug_context.symbols.insert_full(name.to_string());\n \n         let unit = debug_context.units.get_mut(debug_context.unit_id);\n         // FIXME: add to appropriate scope intead of root\n@@ -382,7 +386,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         size: u32,\n         context: &Context,\n         isa: &cranelift::codegen::isa::TargetIsa,\n-        spans: &[Span],\n+        source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) {\n         let unit = self.debug_context.units.get_mut(self.debug_context.unit_id);\n         // FIXME: add to appropriate scope intead of root\n@@ -439,8 +443,8 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n \n                 let srcloc = func.srclocs[inst];\n                 if !srcloc.is_default() {\n-                    let span = spans[srcloc.bits() as usize];\n-                    create_row_for_span(tcx, line_program, offset as u64, span);\n+                    let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n+                    create_row_for_span(tcx, line_program, offset as u64, source_info.span);\n                 } else {\n                     create_row_for_span(tcx, line_program, offset as u64, self.mir_span);\n                 }\n@@ -495,7 +499,7 @@ impl<'a, 'tcx> Writer for WriterRelocate<'a, 'tcx> {\n                 self.relocs.push(DebugReloc {\n                     offset: offset as u32,\n                     size,\n-                    name: self.ctx.symbol_names[symbol].clone(),\n+                    name: self.ctx.symbols.get_index(symbol).unwrap().clone(),\n                     addend: addend as i64,\n                 });\n                 self.write_word(0, size)"}]}