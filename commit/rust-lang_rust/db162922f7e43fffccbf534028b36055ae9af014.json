{"sha": "db162922f7e43fffccbf534028b36055ae9af014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTYyOTIyZjdlNDNmZmZjY2JmNTM0MDI4YjM2MDU1YWU5YWYwMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-25T00:17:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-25T00:17:03Z"}, "message": "Auto merge of #46008 - alexcrichton:update-llvm, r=Mark-Simulacrum\n\nrustbuild: Update LLVM and enable ThinLTO\n\nThis commit updates LLVM to fix #45511 (https://reviews.llvm.org/D39981) and\nalso reenables ThinLTO for libtest now that we shouldn't hit #45768. This also\nopportunistically enables ThinLTO for libstd which was previously blocked\n(#45661) on test failures related to debuginfo with a presumed cause of #45511.\n\nCloses #45511", "tree": {"sha": "33f0058718020f6573529274e84f107240e416b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f0058718020f6573529274e84f107240e416b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db162922f7e43fffccbf534028b36055ae9af014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db162922f7e43fffccbf534028b36055ae9af014", "html_url": "https://github.com/rust-lang/rust/commit/db162922f7e43fffccbf534028b36055ae9af014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db162922f7e43fffccbf534028b36055ae9af014/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a550f2d3b3d4eb57e7fcad284d60c4bea4aed687", "url": "https://api.github.com/repos/rust-lang/rust/commits/a550f2d3b3d4eb57e7fcad284d60c4bea4aed687", "html_url": "https://github.com/rust-lang/rust/commit/a550f2d3b3d4eb57e7fcad284d60c4bea4aed687"}, {"sha": "95e9609b9dade04590b7f3b9f6c3f7b02d116b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e9609b9dade04590b7f3b9f6c3f7b02d116b3f", "html_url": "https://github.com/rust-lang/rust/commit/95e9609b9dade04590b7f3b9f6c3f7b02d116b3f"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "888aa4449f8eee82efd74487961651f7cef86e03", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db162922f7e43fffccbf534028b36055ae9af014/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db162922f7e43fffccbf534028b36055ae9af014/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -624,9 +624,7 @@ impl<'a> Builder<'a> {\n                 cargo.arg(\"--release\");\n             }\n \n-            if mode != Mode::Libstd && // FIXME(#45320)\n-               mode != Mode::Libtest && // FIXME(#45511)\n-               self.config.rust_codegen_units.is_none() &&\n+            if self.config.rust_codegen_units.is_none() &&\n                self.build.is_rust_llvm(compiler.host)\n             {\n                 cargo.env(\"RUSTC_THINLTO\", \"1\");"}, {"sha": "02b3734a5ba6de984eb5a02c50860cc014e58d56", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -1 +1 @@\n-Subproject commit f5532b22b5d741f3ea207b5b07e3e1ca63476f9b\n+Subproject commit 02b3734a5ba6de984eb5a02c50860cc014e58d56"}, {"sha": "9587bb424bd4edd5c775844ea1f2aceac243fae2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db162922f7e43fffccbf534028b36055ae9af014/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db162922f7e43fffccbf534028b36055ae9af014/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -332,6 +332,7 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(const_atomic_ptr_new))]\n+#![cfg_attr(windows, feature(used))]\n \n #![default_lib_allocator]\n "}, {"sha": "cdad320e122415c0e1712b8e506583661aaa0adb", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db162922f7e43fffccbf534028b36055ae9af014/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db162922f7e43fffccbf534028b36055ae9af014/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -200,8 +200,9 @@ unsafe fn register_dtor(key: Key, dtor: Dtor) {\n // the address of the symbol to ensure it sticks around.\n \n #[link_section = \".CRT$XLB\"]\n-#[linkage = \"external\"]\n #[allow(dead_code, unused_variables)]\n+#[used] // we don't want LLVM eliminating this symbol for any reason, and\n+        // when the symbol makes it to the linker the linker will take over\n pub static p_thread_callback: unsafe extern \"system\" fn(c::LPVOID, c::DWORD,\n                                                         c::LPVOID) =\n         on_tls_callback;"}, {"sha": "e45c75de1148456a9eb1a67c14a66df4dfb50c94", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -1 +1 @@\n-Subproject commit 51f104bf1cc6c3a588a11c90a3b4a4a18ee080ac\n+Subproject commit e45c75de1148456a9eb1a67c14a66df4dfb50c94"}, {"sha": "fa6f7626fccf7d6cf2ba145de1b56f7a2d82053e", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db162922f7e43fffccbf534028b36055ae9af014/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/db162922f7e43fffccbf534028b36055ae9af014/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -1,10 +1,19 @@\n -include ../tools.mk\n \n+LOG := $(TMPDIR)/log.txt\n+\n+# FIXME(#46126) ThinLTO for libstd broke this test\n+ifeq (1,0)\n all:\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n-\t$(TMPDIR)/leak 2>&1 | grep -q 'detected memory leaks'\n+\t$(TMPDIR)/leak 2>&1 | tee $(LOG)\n+\tgrep -q 'detected memory leaks' $(LOG)\n+endif\n endif\n+\n+else\n+all:\n endif\n "}, {"sha": "91fb7aa51d4b0aa4f68bc40e18b1e968bcb08f03", "filename": "src/test/run-pass/lto-still-runs-thread-dtors.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/db162922f7e43fffccbf534028b36055ae9af014/src%2Ftest%2Frun-pass%2Flto-still-runs-thread-dtors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db162922f7e43fffccbf534028b36055ae9af014/src%2Ftest%2Frun-pass%2Flto-still-runs-thread-dtors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flto-still-runs-thread-dtors.rs?ref=db162922f7e43fffccbf534028b36055ae9af014", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C lto\n+// no-prefer-dynamic\n+// ignore-emscripten no threads support\n+\n+use std::thread;\n+\n+static mut HIT: usize = 0;\n+\n+thread_local!(static A: Foo = Foo);\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        unsafe {\n+            HIT += 1;\n+        }\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        assert_eq!(HIT, 0);\n+        thread::spawn(|| {\n+            assert_eq!(HIT, 0);\n+            A.with(|_| ());\n+            assert_eq!(HIT, 0);\n+        }).join().unwrap();\n+        assert_eq!(HIT, 1);\n+    }\n+}"}]}