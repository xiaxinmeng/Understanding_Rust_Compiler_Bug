{"sha": "79630d4fdfc775b241cae0a209edec2687a29f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NjMwZDRmZGZjNzc1YjI0MWNhZTBhMjA5ZWRlYzI2ODdhMjlmMGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-20T14:50:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-21T02:56:16Z"}, "message": "rustc: Tweak custom attribute capabilities\n\nThis commit starts to lay some groundwork for the stabilization of custom\nattribute invocations and general procedural macros. It applies a number of\nchanges discussed on [internals] as well as a [recent issue][issue], namely:\n\n* The path used to specify a custom attribute must be of length one and cannot\n  be a global path. This'll help future-proof us against any ambiguities and\n  give us more time to settle the precise syntax. In the meantime though a bare\n  identifier can be used and imported to invoke a custom attribute macro. A new\n  feature gate, `proc_macro_path_invoc`, was added to gate multi-segment paths\n  and absolute paths.\n\n* The set of items which can be annotated by a custom procedural attribute has\n  been restricted. Statements, expressions, and modules are disallowed behind\n  two new feature gates: `proc_macro_expr` and `proc_macro_mod`.\n\n* The input to procedural macro attributes has been restricted and adjusted.\n  Today an invocation like `#[foo(bar)]` will receive `(bar)` as the input token\n  stream, but after this PR it will only receive `bar` (the delimiters were\n  removed). Invocations like `#[foo]` are still allowed and will be invoked in\n  the same way as `#[foo()]`. This is a **breaking change** for all nightly\n  users as the syntax coming in to procedural macros will be tweaked slightly.\n\n* Procedural macros (`foo!()` style) can only be expanded to item-like items by\n  default. A separate feature gate, `proc_macro_non_items`, is required to\n  expand to items like expressions, statements, etc.\n\nCloses #50038\n\n[internals]: https://internals.rust-lang.org/t/help-stabilize-a-subset-of-macros-2-0/7252\n[issue]: https://github.com/rust-lang/rust/issues/50038", "tree": {"sha": "a6aefd265a9250a523cc9d29362a567c54af5fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6aefd265a9250a523cc9d29362a567c54af5fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79630d4fdfc775b241cae0a209edec2687a29f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79630d4fdfc775b241cae0a209edec2687a29f0f", "html_url": "https://github.com/rust-lang/rust/commit/79630d4fdfc775b241cae0a209edec2687a29f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79630d4fdfc775b241cae0a209edec2687a29f0f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8830a0304327ba8c983555ac5d42cec0569c31bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8830a0304327ba8c983555ac5d42cec0569c31bb", "html_url": "https://github.com/rust-lang/rust/commit/8830a0304327ba8c983555ac5d42cec0569c31bb"}], "stats": {"total": 310, "additions": 265, "deletions": 45}, "files": [{"sha": "3a859c02c16c433629c8c6acfac5eeff40effa1e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -397,6 +397,18 @@ impl<'a> Resolver<'a> {\n \n     fn resolve_macro_to_def(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                             -> Result<Def, Determinacy> {\n+        if path.segments.len() > 1 {\n+            if !self.session.features_untracked().proc_macro_path_invoc {\n+                emit_feature_err(\n+                    &self.session.parse_sess,\n+                    \"proc_macro_path_invoc\",\n+                    path.span,\n+                    GateIssue::Language,\n+                    \"paths of length greater than one in macro invocations are \\\n+                     currently unstable\",\n+                );\n+            }\n+        }\n         let def = self.resolve_macro_to_def_inner(scope, path, kind, force);\n         if def != Err(Determinacy::Undetermined) {\n             // Do not report duplicated errors on every undetermined resolution."}, {"sha": "1434e5fddeab0eb1a4ce422541fb1287d46a3198", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -514,6 +514,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(kind.expect_from_annotatables(items))\n             }\n             AttrProcMacro(ref mac) => {\n+                self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n                     Annotatable::TraitItem(item) => token::NtTraitItem(item.into_inner()),\n@@ -522,7 +523,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n                     Annotatable::Expr(expr) => token::NtExpr(expr),\n                 })).into();\n-                let tok_result = mac.expand(self.cx, attr.span, attr.tokens, item_tok);\n+                let input = self.extract_proc_macro_attr_input(attr.tokens, attr.span);\n+                let tok_result = mac.expand(self.cx, attr.span, input, item_tok);\n                 self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n             }\n             ProcMacroDerive(..) | BuiltinDerive(..) => {\n@@ -539,6 +541,49 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         }\n     }\n \n+    fn extract_proc_macro_attr_input(&self, tokens: TokenStream, span: Span) -> TokenStream {\n+        let mut trees = tokens.trees();\n+        match trees.next() {\n+            Some(TokenTree::Delimited(_, delim)) => {\n+                if trees.next().is_none() {\n+                    return delim.tts.into()\n+                }\n+            }\n+            Some(TokenTree::Token(..)) => {}\n+            None => return TokenStream::empty(),\n+        }\n+        self.cx.span_err(span, \"custom attribute invocations must be \\\n+            of the form #[foo] or #[foo(..)], the macro name must only be \\\n+            followed by a delimiter token\");\n+        TokenStream::empty()\n+    }\n+\n+    fn gate_proc_macro_attr_item(&self, span: Span, item: &Annotatable) {\n+        let (kind, gate) = match *item {\n+            Annotatable::Item(ref item) => {\n+                match item.node {\n+                    ItemKind::Mod(_) if self.cx.ecfg.proc_macro_mod() => return,\n+                    ItemKind::Mod(_) => (\"modules\", \"proc_macro_mod\"),\n+                    _ => return,\n+                }\n+            }\n+            Annotatable::TraitItem(_) => return,\n+            Annotatable::ImplItem(_) => return,\n+            Annotatable::ForeignItem(_) => return,\n+            Annotatable::Stmt(_) |\n+            Annotatable::Expr(_) if self.cx.ecfg.proc_macro_expr() => return,\n+            Annotatable::Stmt(_) => (\"statements\", \"proc_macro_expr\"),\n+            Annotatable::Expr(_) => (\"expressions\", \"proc_macro_expr\"),\n+        };\n+        emit_feature_err(\n+            self.cx.parse_sess,\n+            gate,\n+            span,\n+            GateIssue::Language,\n+            &format!(\"custom attributes cannot be applied to {}\", kind),\n+        );\n+    }\n+\n     /// Expand a macro invocation. Returns the result of expansion.\n     fn expand_bang_invoc(&mut self,\n                          invoc: Invocation,\n@@ -665,6 +710,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     self.cx.trace_macros_diag();\n                     kind.dummy(span)\n                 } else {\n+                    self.gate_proc_macro_expansion_kind(span, kind);\n                     invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                         call_site: span,\n                         callee: NameAndSpan {\n@@ -695,6 +741,30 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         }\n     }\n \n+    fn gate_proc_macro_expansion_kind(&self, span: Span, kind: ExpansionKind) {\n+        let kind = match kind {\n+            ExpansionKind::Expr => \"expressions\",\n+            ExpansionKind::OptExpr => \"expressions\",\n+            ExpansionKind::Pat => \"patterns\",\n+            ExpansionKind::Ty => \"types\",\n+            ExpansionKind::Stmts => \"statements\",\n+            ExpansionKind::Items => return,\n+            ExpansionKind::TraitItems => return,\n+            ExpansionKind::ImplItems => return,\n+            ExpansionKind::ForeignItems => return,\n+        };\n+        if self.cx.ecfg.proc_macro_non_items() {\n+            return\n+        }\n+        emit_feature_err(\n+            self.cx.parse_sess,\n+            \"proc_macro_non_items\",\n+            span,\n+            GateIssue::Language,\n+            &format!(\"procedural macros cannot be expanded to {}\", kind),\n+        );\n+    }\n+\n     /// Expand a derive invocation. Returns the result of expansion.\n     fn expand_derive_invoc(&mut self,\n                            invoc: Invocation,\n@@ -1370,6 +1440,9 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_custom_derive = custom_derive,\n         fn proc_macro_enabled = proc_macro,\n         fn macros_in_extern_enabled = macros_in_extern,\n+        fn proc_macro_mod = proc_macro_mod,\n+        fn proc_macro_expr = proc_macro_expr,\n+        fn proc_macro_non_items = proc_macro_non_items,\n     }\n }\n "}, {"sha": "6426c9a92f231e1bf3a5bc4936eab4d2c714076b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -451,6 +451,15 @@ declare_features! (\n     (active, mmx_target_feature, \"1.27.0\", None, None),\n     (active, sse4a_target_feature, \"1.27.0\", None, None),\n     (active, tbm_target_feature, \"1.27.0\", None, None),\n+\n+    // Allows macro invocations of the form `#[foo::bar]`\n+    (active, proc_macro_path_invoc, \"1.27.0\", None, None),\n+\n+    // Allows macro invocations on modules expressions and statements and\n+    // procedural macros to expand to non-items.\n+    (active, proc_macro_mod, \"1.27.0\", None, None),\n+    (active, proc_macro_expr, \"1.27.0\", None, None),\n+    (active, proc_macro_non_items, \"1.27.0\", None, None),\n );\n \n declare_features! ("}, {"sha": "749d87e37b5599d4d38356e152de48641e5427d8", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-invalid-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -13,7 +13,7 @@\n \n //! Attributes producing expressions in invalid locations\n \n-#![feature(proc_macro, stmt_expr_attributes)]\n+#![feature(proc_macro, stmt_expr_attributes, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{duplicate, no_output};"}, {"sha": "ce04fdfb976d4aa32306a7be25147e056c825a38", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};"}, {"sha": "9947e8f66cedac251a2c01506b335b9f585cd07b", "filename": "src/test/compile-fail-fulldeps/proc-macro/attributes-included.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attributes-included.rs\n // ignore-stage1\n \n-#![feature(proc_macro, rustc_attrs)]\n+#![feature(proc_macro, rustc_attrs, proc_macro_path_invoc)]\n #![warn(unused)]\n \n extern crate attributes_included;"}, {"sha": "25579f1fc83d558df5b76026cbeac8196e955206", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/proc-macro-gates.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+// force-host\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn m(a: TokenStream) -> TokenStream {\n+    a\n+}\n+\n+#[proc_macro_attribute]\n+pub fn a(_a: TokenStream, b: TokenStream) -> TokenStream {\n+    b\n+}"}, {"sha": "c7be316794746c9f04fe63345dcfe03b6213e0a3", "filename": "src/test/compile-fail-fulldeps/proc-macro/lints_in_proc_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:bang_proc_macro2.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n #![allow(unused_macros)]\n \n extern crate bang_proc_macro2;"}, {"sha": "f16ca79ca9313a9c6dcb4db6c8e589feffc9982e", "filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:bang_proc_macro.rs\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n #[macro_use]\n extern crate bang_proc_macro;"}, {"sha": "0dc1c2ab2daf9bbe66d3ca7ca35c11d1e11be8d7", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:proc-macro-gates.rs\n+// gate-test-proc_macro_non_items\n+// gate-test-proc_macro_path_invoc\n+// gate-test-proc_macro_mod line\n+// gate-test-proc_macro_expr\n+// gate-test-proc_macro_mod\n+\n+#![feature(proc_macro, stmt_expr_attributes)]\n+\n+extern crate proc_macro_gates as foo;\n+\n+use foo::*;\n+\n+#[foo::a] //~ ERROR: paths of length greater than one\n+fn _test() {}\n+\n+#[a] //~ ERROR: custom attributes cannot be applied to modules\n+mod _test2 {}\n+\n+#[a = y] //~ ERROR: must only be followed by a delimiter token\n+fn _test3() {}\n+\n+#[a = ] //~ ERROR: must only be followed by a delimiter token\n+fn _test4() {}\n+\n+#[a () = ] //~ ERROR: must only be followed by a delimiter token\n+fn _test5() {}\n+\n+fn main() {\n+    #[a] //~ ERROR: custom attributes cannot be applied to statements\n+    let _x = 2;\n+    let _x = #[a] 2;\n+    //~^ ERROR: custom attributes cannot be applied to expressions\n+\n+    let _x: m!(u32) = 3;\n+    //~^ ERROR: procedural macros cannot be expanded to types\n+    if let m!(Some(_x)) = Some(3) {\n+    //~^ ERROR: procedural macros cannot be expanded to patterns\n+    }\n+    let _x = m!(3);\n+    //~^ ERROR: procedural macros cannot be expanded to expressions\n+    m!(let _x = 3;);\n+    //~^ ERROR: procedural macros cannot be expanded to statements\n+}"}, {"sha": "a1a15afecd50695d97bd40154997f93e3bd1b18c", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates2.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates2.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:proc-macro-gates.rs\n+\n+#![feature(proc_macro, stmt_expr_attributes)]\n+\n+extern crate proc_macro_gates as foo;\n+\n+use foo::*;\n+\n+// NB. these errors aren't the best errors right now, but they're definitely\n+// intended to be errors. Somehow using a custom attribute in these positions\n+// should either require a feature gate or not be allowed on stable.\n+\n+fn _test6<#[a] T>() {}\n+//~^ ERROR: unknown to the compiler\n+\n+fn _test7() {\n+    match 1 {\n+        #[a] //~ ERROR: unknown to the compiler\n+        0 => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "08269ce5c7ecf0d2083fb483d46868a69915ab7a", "filename": "src/test/compile-fail/extern-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fextern-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fextern-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-macro.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // #41719\n \n-#![feature(use_extern_macros)]\n+#![feature(use_extern_macros, proc_macro_path_invoc)]\n \n fn main() {\n     enum Foo {}"}, {"sha": "6567a100d8c0664caedda024cc8b097dd9489514", "filename": "src/test/compile-fail/macro-with-seps-err-msg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,6 +10,8 @@\n \n // gate-test-use_extern_macros\n \n+#![feature(proc_macro_path_invoc)]\n+\n fn main() {\n     globnar::brotz!(); //~ ERROR non-ident macro paths are experimental\n     #[derive(foo::Bar)] struct T; //~ ERROR non-ident macro paths are experimental"}, {"sha": "40412087cef97b0e76e8a8f03774a8bc4295269e", "filename": "src/test/compile-fail/macros-nonfatal-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -13,6 +13,7 @@\n \n #![feature(asm)]\n #![feature(trace_macros, concat_idents)]\n+#![feature(proc_macro_path_invoc)]\n \n #[derive(Default)] //~ ERROR\n enum OrDeriveThis {}"}, {"sha": "b64829edaa218772d5f9f0404890a60387cbf368", "filename": "src/test/compile-fail/privacy/associated-item-privacy-inherent.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-inherent.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(decl_macro, associated_type_defaults)]\n #![allow(unused, private_in_public)]\n+#![feature(proc_macro_path_invoc)]\n \n mod priv_nominal {\n     pub struct Pub;"}, {"sha": "062dc53361703741fcc8287430f2c097ec8ec6a6", "filename": "src/test/compile-fail/privacy/associated-item-privacy-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-trait.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n \n+#![feature(proc_macro_path_invoc)]\n #![feature(decl_macro, associated_type_defaults)]\n #![allow(unused, private_in_public)]\n "}, {"sha": "0dfa61a18ab8299a601cd0ef9d7bb6bbdef321c3", "filename": "src/test/compile-fail/privacy/associated-item-privacy-type-binding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(proc_macro_path_invoc)]\n #![feature(decl_macro, associated_type_defaults)]\n #![allow(unused, private_in_public)]\n "}, {"sha": "97d6b470d33bb88be183cfb8b785eb3c6eec94a9", "filename": "src/test/compile-fail/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -18,6 +18,7 @@\n // error-pattern:type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct::{{constructor}}}` is priv\n // error-pattern:type `for<'r> fn(&'r ext::Pub<u8>) {<ext::Pub<u8>>::priv_method}` is private\n \n+#![feature(proc_macro_path_invoc)]\n #![feature(decl_macro)]\n \n extern crate private_inferred_type as ext;"}, {"sha": "dfc0107e07565635686f9562838d427d9bad3e90", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,6 +11,7 @@\n #![feature(associated_consts)]\n #![feature(decl_macro)]\n #![allow(private_in_public)]\n+#![feature(proc_macro_path_invoc)]\n \n mod m {\n     fn priv_fn() {}"}, {"sha": "9e1ae59c01bc0f5006d21ca85e609a59ce0f11cf", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate proc_macro;\n "}, {"sha": "a680698df9a2a11cd23b3d637665793ea3f06eac", "filename": "src/test/run-pass-fulldeps/auxiliary/hello_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro, proc_macro_lib)]\n+#![feature(proc_macro, proc_macro_lib, proc_macro_non_items)]\n \n extern crate proc_macro;\n "}, {"sha": "a280b3d87c68508262ba481fec353dfed4fc03d3", "filename": "src/test/run-pass-fulldeps/auxiliary/proc_macro_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro, proc_macro_lib)]\n+#![feature(proc_macro, proc_macro_lib, proc_macro_non_items)]\n \n extern crate proc_macro;\n "}, {"sha": "52e8e75f2628e2297c238ab48468fc6a7aa98eee", "filename": "src/test/run-pass-fulldeps/macro-quote-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-cond.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:cond_plugin.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate cond_plugin;\n "}, {"sha": "9bb8f691915c74fef5bda9d96d22f71e0cf38455", "filename": "src/test/run-pass-fulldeps/macro-quote-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -13,7 +13,7 @@\n // aux-build:hello_macro.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_path_invoc, proc_macro_non_items)]\n \n extern crate hello_macro;\n "}, {"sha": "bf7ac507ea5705553ae396f63134a101eacd02b1", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -12,14 +12,14 @@\n // ignore-stage1\n \n #![allow(warnings)]\n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_path_invoc)]\n \n extern crate attr_args;\n use attr_args::attr_with_args;\n \n #[attr_with_args(text = \"Hello, world!\")]\n fn foo() {}\n \n-#[::attr_args::identity\n-  fn main() { assert_eq!(foo(), \"Hello, world!\"); }]\n+#[::attr_args::identity(\n+  fn main() { assert_eq!(foo(), \"Hello, world!\"); })]\n struct Dummy;"}, {"sha": "95e4f2211c63769f015b97f88ae45f7fdabb238a", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-on-trait.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_path_invoc)]\n \n extern crate attr_on_trait;\n "}, {"sha": "d928f8e557303747cc6f4322a9020acef65b54c4", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(proc_macro, stmt_expr_attributes)]\n+#![feature(proc_macro, stmt_expr_attributes, proc_macro_stmt, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr,"}, {"sha": "5f12cc96e9fb38ada53013ec5879df46516f7932", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -20,7 +20,7 @@ use proc_macro::TokenStream;\n pub fn attr_with_args(args: TokenStream, input: TokenStream) -> TokenStream {\n     let args = args.to_string();\n \n-    assert_eq!(args, r#\"( text = \"Hello, world!\" )\"#);\n+    assert_eq!(args, r#\"text = \"Hello, world!\"\"#);\n \n     let input = input.to_string();\n "}, {"sha": "5376d2740452fb1ae053f21a5162340312c5dcfb", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/count_compound_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "b8562ffc344de8f62af03653f0d67f78ad9ef43e", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/hygiene_example_codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro as proc_macro_renamed; // This does not break `quote!`"}, {"sha": "82337022ac3bf4ddf910e92f293b0a21e656b175", "filename": "src/test/run-pass-fulldeps/proc-macro/bang-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:bang-macro.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate bang_macro;\n use bang_macro::rewrite;"}, {"sha": "3fbe5366b6a1b839b88656176ed19b9a85c3099f", "filename": "src/test/run-pass-fulldeps/proc-macro/count_compound_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:count_compound_ops.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate count_compound_ops;\n use count_compound_ops::count_compound_ops;"}, {"sha": "d4176c0efbf104bad6b9424356db2b30152fb658", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-b.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_path_invoc)]\n \n extern crate derive_b;\n "}, {"sha": "48de15b934d23d679a2573bf0ca148c9760a87fe", "filename": "src/test/run-pass-fulldeps/proc-macro/hygiene_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -12,7 +12,7 @@\n // aux-build:hygiene_example.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate hygiene_example;\n use hygiene_example::hello;"}, {"sha": "a6b7d93c279d93db2037e3d7d18cca424a823dd2", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-42708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:issue-42708.rs\n // ignore-stage1\n \n-#![feature(decl_macro, proc_macro)]\n+#![feature(decl_macro, proc_macro, proc_macro_path_invoc)]\n #![allow(unused)]\n \n extern crate issue_42708;"}, {"sha": "1cdf1daf560835af0b9775feaeee6a981421619c", "filename": "src/test/run-pass-fulldeps/proc-macro/negative-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnegative-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnegative-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnegative-token.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:negative-token.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate negative_token;\n "}, {"sha": "aad94c89f2ae3615c711bc632dd96272c497cb74", "filename": "src/test/run-pass-fulldeps/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // ignore-cross-compile\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate proc_macro_def;\n "}, {"sha": "c4391ad05778a2a539445accf73a28cb53f07c57", "filename": "src/test/run-pass/hygiene/issue-47311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47311.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty pretty-printing is unhygienic\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n #![allow(unused)]\n \n macro m($S:ident, $x:ident) {"}, {"sha": "0cda0e7c7cce74cacac44747987a2a81a1c7e7fb", "filename": "src/test/run-pass/hygiene/issue-47312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-47312.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty pretty-printing is unhygienic\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n #![allow(unused)]\n \n mod foo {"}, {"sha": "5395ef35882827b22c2c8a60c592f9e009f182f5", "filename": "src/test/run-pass/hygiene/legacy_interaction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Flegacy_interaction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Flegacy_interaction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Flegacy_interaction.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -12,7 +12,7 @@\n \n // aux-build:legacy_interaction.rs\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n #[allow(unused)]\n \n extern crate legacy_interaction;"}, {"sha": "73deda0777e50414984e7c89a5310409bba13d3d", "filename": "src/test/run-pass/hygiene/lexical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Flexical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Flexical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Flexical.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty pretty-printing is unhygienic\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod bar {\n     mod baz {"}, {"sha": "66e83eb7cacd57958205adde7a97365de0f98f39", "filename": "src/test/run-pass/hygiene/wrap_unhygienic_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fwrap_unhygienic_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fwrap_unhygienic_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fwrap_unhygienic_example.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -13,7 +13,7 @@\n // aux-build:my_crate.rs\n // aux-build:unhygienic_example.rs\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n extern crate unhygienic_example;\n extern crate my_crate; // (b)"}, {"sha": "95d7ae6db60ff165f7b91d9d4b95923a8f1281a9", "filename": "src/test/run-pass/hygiene/xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fhygiene%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fxcrate.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -12,7 +12,7 @@\n \n // aux-build:xcrate.rs\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n extern crate xcrate;\n "}, {"sha": "2e87809a84ec5a9c82d806fb7baaa19383aeba6a", "filename": "src/test/run-pass/paths-in-macro-invocations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fpaths-in-macro-invocations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Frun-pass%2Fpaths-in-macro-invocations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpaths-in-macro-invocations.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n+#![feature(use_extern_macros, proc_macro_path_invoc)]\n \n extern crate two_macros;\n "}, {"sha": "f938700e5157a282bf8950612845b07895a24981", "filename": "src/test/ui-fulldeps/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fparent-source-spans.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:parent-source-spans.rs\n // ignore-stage1\n \n-#![feature(proc_macro, decl_macro)]\n+#![feature(proc_macro, decl_macro, proc_macro_non_items)]\n \n extern crate parent_source_spans;\n "}, {"sha": "66e34afcb13f92220644a8885f310021369ac1df", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -11,7 +11,7 @@\n // aux-build:three-equals.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(proc_macro, proc_macro_non_items)]\n \n extern crate three_equals;\n "}, {"sha": "ed155b28037a03e5a1558bc5d024e03f6e91b3ee", "filename": "src/test/ui/hygiene/fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Ffields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Ffields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty pretty-printing is unhygienic\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod foo {\n     struct S { x: u32 }"}, {"sha": "f3f400aafeb2bfae7fd950555a83fd21e8866a12", "filename": "src/test/ui/hygiene/globs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod foo {\n     pub fn f() {}"}, {"sha": "4f997a790e688b058701cc918b90fb8f9895d77b", "filename": "src/test/ui/hygiene/impl_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-pretty pretty-printing is unhygienic\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod foo {\n     struct S;"}, {"sha": "20ca918f026f362e19ea70ff24eb3f96293624f0", "filename": "src/test/ui/hygiene/intercrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -14,7 +14,7 @@\n \n // error-pattern:type `fn() -> u32 {intercrate::foo::bar::f}` is private\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n extern crate intercrate;\n "}, {"sha": "ea6a45fba6ac7edb59a15c418b0a99aa24eba513", "filename": "src/test/ui/hygiene/no_implicit_prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod foo {\n     pub macro m() { Vec::new(); ().clone() }"}, {"sha": "8a392db92f96062f802c74c1edb063f39035803b", "filename": "src/test/ui/hygiene/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod foo {\n     fn f() {}"}, {"sha": "d0da6254b9bd01e26162241e4b12c35267c3b65e", "filename": "src/test/ui/hygiene/trait_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(decl_macro)]\n+#![feature(decl_macro, proc_macro_path_invoc)]\n \n mod foo {\n     pub trait T {"}, {"sha": "51e5257be1bc22e65a6cf2b81100e85332cd1ffd", "filename": "src/test/ui/imports/macro-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n+#![feature(use_extern_macros, proc_macro_path_invoc)]\n \n extern crate two_macros;\n "}, {"sha": "aad0a43be2696cac6fdae453ba5ccc71c433f761", "filename": "src/test/ui/imports/shadow_builtin_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79630d4fdfc775b241cae0a209edec2687a29f0f/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs?ref=79630d4fdfc775b241cae0a209edec2687a29f0f", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(use_extern_macros)]\n+#![feature(use_extern_macros, proc_macro_path_invoc)]\n \n mod foo {\n     extern crate two_macros;"}]}