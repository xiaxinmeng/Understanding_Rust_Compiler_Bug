{"sha": "f7745a9be3eb2d9438f08b383156f0a33cbb0cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NzQ1YTliZTNlYjJkOTQzOGYwOGIzODMxNTZmMGEzM2NiYjBjZGY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-01-12T05:39:03Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-01-12T05:39:03Z"}, "message": "rustc_trans: Fix type projection debuginfo\n\nCloses #20797", "tree": {"sha": "82a418211de8ccb821e32cdb75cf483e608d890a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a418211de8ccb821e32cdb75cf483e608d890a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf", "html_url": "https://github.com/rust-lang/rust/commit/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2127e0d56d85ff48aafce90ab762650e46370b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/2127e0d56d85ff48aafce90ab762650e46370b63", "html_url": "https://github.com/rust-lang/rust/commit/2127e0d56d85ff48aafce90ab762650e46370b63"}], "stats": {"total": 108, "additions": 86, "deletions": 22}, "files": [{"sha": "5b974d234c08cc0483f62d52b27277165d197e5a", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 58, "deletions": 22, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=f7745a9be3eb2d9438f08b383156f0a33cbb0cdf", "patch": "@@ -323,26 +323,28 @@ impl<'tcx> TypeMap<'tcx> {\n     fn get_unique_type_id_of_type<'a>(&mut self, cx: &CrateContext<'a, 'tcx>,\n                                       type_: Ty<'tcx>) -> UniqueTypeId {\n \n-        // basic type           -> {:name of the type:}\n-        // tuple                -> {tuple_(:param-uid:)*}\n-        // struct               -> {struct_:svh: / :node-id:_<(:param-uid:),*> }\n-        // enum                 -> {enum_:svh: / :node-id:_<(:param-uid:),*> }\n-        // enum variant         -> {variant_:variant-name:_:enum-uid:}\n-        // reference (&)        -> {& :pointee-uid:}\n-        // mut reference (&mut) -> {&mut :pointee-uid:}\n-        // ptr (*)              -> {* :pointee-uid:}\n-        // mut ptr (*mut)       -> {*mut :pointee-uid:}\n-        // unique ptr (~)       -> {~ :pointee-uid:}\n-        // @-ptr (@)            -> {@ :pointee-uid:}\n-        // sized vec ([T; x])   -> {[:size:] :element-uid:}\n-        // unsized vec ([T])    -> {[] :element-uid:}\n-        // trait (T)            -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n-        // closure              -> {<unsafe_> <once_> :store-sigil: |(:param-uid:),* <,_...>| -> \\\n-        //                             :return-type-uid: : (:bounds:)*}\n-        // function             -> {<unsafe_> <abi_> fn( (:param-uid:)* <,_...> ) -> \\\n-        //                             :return-type-uid:}\n-        // unique vec box (~[]) -> {HEAP_VEC_BOX<:pointee-uid:>}\n-        // gc box               -> {GC_BOX<:pointee-uid:>}\n+        // basic type               -> {:name of the type:}\n+        // tuple                    -> {tuple_(:param-uid:)*}\n+        // struct                   -> {struct_:svh: / :node-id:_<(:param-uid:),*> }\n+        // enum                     -> {enum_:svh: / :node-id:_<(:param-uid:),*> }\n+        // enum variant             -> {variant_:variant-name:_:enum-uid:}\n+        // reference (&)            -> {& :pointee-uid:}\n+        // mut reference (&mut)     -> {&mut :pointee-uid:}\n+        // ptr (*)                  -> {* :pointee-uid:}\n+        // mut ptr (*mut)           -> {*mut :pointee-uid:}\n+        // unique ptr (~)           -> {~ :pointee-uid:}\n+        // @-ptr (@)                -> {@ :pointee-uid:}\n+        // sized vec ([T; x])       -> {[:size:] :element-uid:}\n+        // unsized vec ([T])        -> {[] :element-uid:}\n+        // trait (T)                -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n+        // closure                  -> {<unsafe_> <once_> :store-sigil:\n+        //                                  |(:param-uid:),* <,_...>| -> \\\n+        //                                  :return-type-uid: : (:bounds:)*}\n+        // function                 -> {<unsafe_> <abi_> fn( (:param-uid:)* <,_...> ) -> \\\n+        //                                  :return-type-uid:}\n+        // unique vec box (~[])     -> {HEAP_VEC_BOX<:pointee-uid:>}\n+        // gc box                   -> {GC_BOX<:pointee-uid:>}\n+        // projection (<T as U>::V) -> {<:ty-uid: as :trait-uid:> :: :name-uid: }\n \n         match self.type_to_unique_id.get(&type_).cloned() {\n             Some(unique_type_id) => return unique_type_id,\n@@ -435,6 +437,25 @@ impl<'tcx> TypeMap<'tcx> {\n                                        principal.substs,\n                                        &mut unique_type_id);\n             },\n+            ty::ty_projection(ref projection) => {\n+                unique_type_id.push_str(\"<\");\n+\n+                let self_ty = projection.trait_ref.self_ty();\n+                let self_type_id = self.get_unique_type_id_of_type(cx, self_ty);\n+                let self_type_id = self.get_unique_type_id_as_string(self_type_id);\n+                unique_type_id.push_str(&self_type_id[]);\n+\n+                unique_type_id.push_str(\" as \");\n+\n+                from_def_id_and_substs(self,\n+                                       cx,\n+                                       projection.trait_ref.def_id,\n+                                       projection.trait_ref.substs,\n+                                       &mut unique_type_id);\n+\n+                unique_type_id.push_str(\">::\");\n+                unique_type_id.push_str(token::get_name(projection.item_name).get());\n+            },\n             ty::ty_bare_fn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == ast::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n@@ -478,7 +499,10 @@ impl<'tcx> TypeMap<'tcx> {\n                                                         closure_ty,\n                                                         &mut unique_type_id);\n             },\n-            _ => {\n+            ty::ty_err |\n+            ty::ty_infer(_) |\n+            ty::ty_open(_) |\n+            ty::ty_param(_) => {\n                 cx.sess().bug(&format!(\"get_unique_type_id_of_type() - unexpected type: {}, {:?}\",\n                                       &ppaux::ty_to_string(cx.tcx(), type_)[],\n                                       type_.sty)[])\n@@ -3855,10 +3879,22 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_unboxed_closure(..) => {\n             output.push_str(\"closure\");\n         }\n+        ty::ty_projection(ref projection) => {\n+            output.push_str(\"<\");\n+            let self_ty = projection.trait_ref.self_ty();\n+            push_debuginfo_type_name(cx, self_ty, true, output);\n+\n+            output.push_str(\" as \");\n+\n+            push_item_name(cx, projection.trait_ref.def_id, false, output);\n+            push_type_params(cx, projection.trait_ref.substs, output);\n+\n+            output.push_str(\">::\");\n+            output.push_str(token::get_name(projection.item_name).get());\n+        }\n         ty::ty_err |\n         ty::ty_infer(_) |\n         ty::ty_open(_) |\n-        ty::ty_projection(..) |\n         ty::ty_param(_) => {\n             cx.sess().bug(&format!(\"debuginfo: Trying to create type name for \\\n                 unexpected type: {}\", ppaux::ty_to_string(cx.tcx(), t))[]);"}, {"sha": "92336e9b34b79496f79a4573f917c44d9e88f8e8", "filename": "src/test/debuginfo/associated_types.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf/src%2Ftest%2Fdebuginfo%2Fassociated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7745a9be3eb2d9438f08b383156f0a33cbb0cdf/src%2Ftest%2Fdebuginfo%2Fassociated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated_types.rs?ref=f7745a9be3eb2d9438f08b383156f0a33cbb0cdf", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+struct Peekable<I> where I: Iterator {\n+    _iter: I,\n+    _next: Option<<I as Iterator>::Item>,\n+}\n+\n+fn main() {\n+    let mut iter = Vec::<i32>::new().into_iter();\n+    let next = iter.next();\n+    let _v = Peekable {\n+        _iter: iter,\n+        _next : next,\n+    };\n+}"}]}