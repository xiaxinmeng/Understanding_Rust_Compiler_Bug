{"sha": "f9c577e5141dda6413efcfd036389d7d2480e528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzU3N2U1MTQxZGRhNjQxM2VmY2ZkMDM2Mzg5ZDdkMjQ4MGU1Mjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-02-09T03:49:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-02-10T03:54:23Z"}, "message": "Tests", "tree": {"sha": "3dfa9344f8fee97ad3ad267a7312502d0cb8c8be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dfa9344f8fee97ad3ad267a7312502d0cb8c8be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c577e5141dda6413efcfd036389d7d2480e528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c577e5141dda6413efcfd036389d7d2480e528", "html_url": "https://github.com/rust-lang/rust/commit/f9c577e5141dda6413efcfd036389d7d2480e528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c577e5141dda6413efcfd036389d7d2480e528/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8122ce81d0909bed39c6df3e47bc751851bded84", "url": "https://api.github.com/repos/rust-lang/rust/commits/8122ce81d0909bed39c6df3e47bc751851bded84", "html_url": "https://github.com/rust-lang/rust/commit/8122ce81d0909bed39c6df3e47bc751851bded84"}], "stats": {"total": 135, "additions": 131, "deletions": 4}, "files": [{"sha": "583095e15742738d5fdf2eeb1a42bae3462336a4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f9c577e5141dda6413efcfd036389d7d2480e528", "patch": "@@ -1025,11 +1025,11 @@ impl<'a> State<'a> {\n         self.print_path(&t.path, false)\n     }\n \n-    fn print_poly_trait_ref(&mut self, t: &ast::PolyTraitRef) -> IoResult<()> {\n-        if !t.bound_lifetimes.is_empty() {\n+    fn print_formal_lifetime_list(&mut self, lifetimes: &[ast::LifetimeDef]) -> IoResult<()> {\n+        if !lifetimes.is_empty() {\n             try!(word(&mut self.s, \"for<\"));\n             let mut comma = false;\n-            for lifetime_def in &t.bound_lifetimes {\n+            for lifetime_def in lifetimes {\n                 if comma {\n                     try!(self.word_space(\",\"))\n                 }\n@@ -1038,7 +1038,11 @@ impl<'a> State<'a> {\n             }\n             try!(word(&mut self.s, \">\"));\n         }\n+        Ok(())\n+    }\n \n+    fn print_poly_trait_ref(&mut self, t: &ast::PolyTraitRef) -> IoResult<()> {\n+        try!(self.print_formal_lifetime_list(&t.bound_lifetimes));\n         self.print_trait_ref(&t.trait_ref)\n     }\n \n@@ -2517,9 +2521,11 @@ impl<'a> State<'a> {\n             }\n \n             match predicate {\n-                &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bounded_ty,\n+                &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bound_lifetimes,\n+                                                                              ref bounded_ty,\n                                                                               ref bounds,\n                                                                               ..}) => {\n+                    try!(self.print_formal_lifetime_list(bound_lifetimes));\n                     try!(self.print_type(&**bounded_ty));\n                     try!(self.print_bounds(\":\", bounds));\n                 }"}, {"sha": "cd5240198b385b6ec7af3e9fb98c0c3be5b6b801", "filename": "src/test/compile-fail/where-for-self-2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs?ref=f9c577e5141dda6413efcfd036389d7d2480e528", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can quantify lifetimes outside a constraint (i.e., including\n+// the self type) in a where clause. Specifically, test that implementing for a\n+// specific lifetime is not enough to satisify the `for<'a> ...` constraint, which\n+// should require *all* lifetimes.\n+\n+static X: &'static u32 = &42;\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+impl Bar for &'static u32 {\n+    fn bar(&self) {}\n+}\n+\n+fn foo<T>(x: &T)\n+    where for<'a> &'a T: Bar\n+{}\n+\n+fn main() {\n+    foo(&X);\n+    //~^ error: `for<'a> Bar` is not implemented\n+}"}, {"sha": "8f447face4e51f25703e13b5d1d009d2c695e57f", "filename": "src/test/compile-fail/where-for-self.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Ftest%2Fcompile-fail%2Fwhere-for-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Ftest%2Fcompile-fail%2Fwhere-for-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-for-self.rs?ref=f9c577e5141dda6413efcfd036389d7d2480e528", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can quantify lifetimes outside a constraint (i.e., including\n+// the self type) in a where clause. Specifically, test that we cannot nest\n+// quantification in constraints (to be clear, there is no reason this should not\n+// we're testing we don't crash or do something stupid).\n+\n+trait Bar<'a> {\n+    fn bar(&self);\n+}\n+\n+impl<'a, 'b> Bar<'b> for &'a u32 {\n+    fn bar(&self) {}\n+}\n+\n+fn foo<T>(x: &T)\n+    where for<'a> &'a T: for<'b> Bar<'b>\n+    //~^ error: nested quantification of lifetimes\n+{}\n+\n+fn main() {}"}, {"sha": "5d426793c2e36f9ad94c0821c9c2fad126068eee", "filename": "src/test/run-pass/where-for-self.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c577e5141dda6413efcfd036389d7d2480e528/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs?ref=f9c577e5141dda6413efcfd036389d7d2480e528", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can quantify lifetimes outside a constraint (i.e., including\n+// the self type) in a where clause.\n+\n+static mut COUNT: u32 = 1;\n+\n+trait Bar<'a> {\n+    fn bar(&self);\n+}\n+\n+trait Baz<'a> {\n+    fn baz(&self);\n+}\n+\n+impl<'a, 'b> Bar<'b> for &'a u32 {\n+    fn bar(&self) {\n+        unsafe { COUNT *= 2; }\n+    }\n+}\n+\n+impl<'a, 'b> Baz<'b> for &'a u32 {\n+    fn baz(&self) {\n+        unsafe { COUNT *= 3; }\n+    }\n+}\n+\n+// Test we can use the syntax for HRL including the self type.\n+fn foo1<T>(x: &T)\n+    where for<'a, 'b> &'a T: Bar<'b>\n+{\n+    x.bar()\n+}\n+\n+// Test we can quantify multiple bounds (i.e., the precedence is sensible).\n+fn foo2<T>(x: &T)\n+    where for<'a, 'b> &'a T: Bar<'b> + Baz<'b>\n+{\n+    x.baz();\n+    x.bar()\n+}\n+\n+fn main() {\n+    let x = 42u32;\n+    foo1(&x);\n+    foo2(&x);\n+    unsafe {\n+        assert!(COUNT == 12);\n+    }\n+}\n+"}]}