{"sha": "7bc0c986217629e6c831edcb133532023a5aec63", "node_id": "C_kwDOAAsO6NoAKDdiYzBjOTg2MjE3NjI5ZTZjODMxZWRjYjEzMzUzMjAyM2E1YWVjNjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T02:07:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T02:07:23Z"}, "message": "Auto merge of #2025 - workingjubilee:fix-nightly-simd, r=RalfJung\n\nFixup renamed fn for Simd\n\nThis fixes rust-lang/rust#94910", "tree": {"sha": "01b43c9d5edb6545190d0f283f37cb74d7faec03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b43c9d5edb6545190d0f283f37cb74d7faec03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc0c986217629e6c831edcb133532023a5aec63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc0c986217629e6c831edcb133532023a5aec63", "html_url": "https://github.com/rust-lang/rust/commit/7bc0c986217629e6c831edcb133532023a5aec63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc0c986217629e6c831edcb133532023a5aec63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a12a48bf723e0e13f043979a7f79861d975e7187", "url": "https://api.github.com/repos/rust-lang/rust/commits/a12a48bf723e0e13f043979a7f79861d975e7187", "html_url": "https://github.com/rust-lang/rust/commit/a12a48bf723e0e13f043979a7f79861d975e7187"}, {"sha": "61bfa8afe828a94aaaa7ebb0dac110fd91644bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bfa8afe828a94aaaa7ebb0dac110fd91644bb4", "html_url": "https://github.com/rust-lang/rust/commit/61bfa8afe828a94aaaa7ebb0dac110fd91644bb4"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "5306a4d18628423e821c8fb096496af1cb49811a", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bc0c986217629e6c831edcb133532023a5aec63/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/7bc0c986217629e6c831edcb133532023a5aec63/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=7bc0c986217629e6c831edcb133532023a5aec63", "patch": "@@ -1 +1 @@\n-258256697b8550860be0f6194dec532ac616c2c1\n+e95b10ba4ac4564ed25f7eef143e3182c33b3902"}, {"sha": "eca8e8f377d6d6ac16fb6383cb8f9b201896c0a4", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7bc0c986217629e6c831edcb133532023a5aec63/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc0c986217629e6c831edcb133532023a5aec63/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=7bc0c986217629e6c831edcb133532023a5aec63", "patch": "@@ -22,27 +22,27 @@ fn simd_ops_f32() {\n     assert_eq!(a.lanes_ge(f32x4::splat(5.0) * b), Mask::from_array([true, true, false, true]));\n     assert_eq!(a.lanes_gt(f32x4::splat(5.0) * b), Mask::from_array([true, false, false, true]));\n \n-    assert_eq!(a.horizontal_sum(), 40.0);\n-    assert_eq!(b.horizontal_sum(), 2.0);\n-    assert_eq!(a.horizontal_product(), 100.0 * 100.0);\n-    assert_eq!(b.horizontal_product(), -24.0);\n-    assert_eq!(a.horizontal_max(), 10.0);\n-    assert_eq!(b.horizontal_max(), 3.0);\n-    assert_eq!(a.horizontal_min(), 10.0);\n-    assert_eq!(b.horizontal_min(), -4.0);\n+    assert_eq!(a.reduce_sum(), 40.0);\n+    assert_eq!(b.reduce_sum(), 2.0);\n+    assert_eq!(a.reduce_product(), 100.0 * 100.0);\n+    assert_eq!(b.reduce_product(), -24.0);\n+    assert_eq!(a.reduce_max(), 10.0);\n+    assert_eq!(b.reduce_max(), 3.0);\n+    assert_eq!(a.reduce_min(), 10.0);\n+    assert_eq!(b.reduce_min(), -4.0);\n \n     assert_eq!(\n         f32x2::from_array([0.0, f32::NAN]).max(f32x2::from_array([f32::NAN, 0.0])),\n         f32x2::from_array([0.0, 0.0])\n     );\n-    assert_eq!(f32x2::from_array([0.0, f32::NAN]).horizontal_max(), 0.0);\n-    assert_eq!(f32x2::from_array([f32::NAN, 0.0]).horizontal_max(), 0.0);\n+    assert_eq!(f32x2::from_array([0.0, f32::NAN]).reduce_max(), 0.0);\n+    assert_eq!(f32x2::from_array([f32::NAN, 0.0]).reduce_max(), 0.0);\n     assert_eq!(\n         f32x2::from_array([0.0, f32::NAN]).min(f32x2::from_array([f32::NAN, 0.0])),\n         f32x2::from_array([0.0, 0.0])\n     );\n-    assert_eq!(f32x2::from_array([0.0, f32::NAN]).horizontal_min(), 0.0);\n-    assert_eq!(f32x2::from_array([f32::NAN, 0.0]).horizontal_min(), 0.0);\n+    assert_eq!(f32x2::from_array([0.0, f32::NAN]).reduce_min(), 0.0);\n+    assert_eq!(f32x2::from_array([f32::NAN, 0.0]).reduce_min(), 0.0);\n }\n \n fn simd_ops_f64() {\n@@ -66,27 +66,27 @@ fn simd_ops_f64() {\n     assert_eq!(a.lanes_ge(f64x4::splat(5.0) * b), Mask::from_array([true, true, false, true]));\n     assert_eq!(a.lanes_gt(f64x4::splat(5.0) * b), Mask::from_array([true, false, false, true]));\n \n-    assert_eq!(a.horizontal_sum(), 40.0);\n-    assert_eq!(b.horizontal_sum(), 2.0);\n-    assert_eq!(a.horizontal_product(), 100.0 * 100.0);\n-    assert_eq!(b.horizontal_product(), -24.0);\n-    assert_eq!(a.horizontal_max(), 10.0);\n-    assert_eq!(b.horizontal_max(), 3.0);\n-    assert_eq!(a.horizontal_min(), 10.0);\n-    assert_eq!(b.horizontal_min(), -4.0);\n+    assert_eq!(a.reduce_sum(), 40.0);\n+    assert_eq!(b.reduce_sum(), 2.0);\n+    assert_eq!(a.reduce_product(), 100.0 * 100.0);\n+    assert_eq!(b.reduce_product(), -24.0);\n+    assert_eq!(a.reduce_max(), 10.0);\n+    assert_eq!(b.reduce_max(), 3.0);\n+    assert_eq!(a.reduce_min(), 10.0);\n+    assert_eq!(b.reduce_min(), -4.0);\n \n     assert_eq!(\n         f64x2::from_array([0.0, f64::NAN]).max(f64x2::from_array([f64::NAN, 0.0])),\n         f64x2::from_array([0.0, 0.0])\n     );\n-    assert_eq!(f64x2::from_array([0.0, f64::NAN]).horizontal_max(), 0.0);\n-    assert_eq!(f64x2::from_array([f64::NAN, 0.0]).horizontal_max(), 0.0);\n+    assert_eq!(f64x2::from_array([0.0, f64::NAN]).reduce_max(), 0.0);\n+    assert_eq!(f64x2::from_array([f64::NAN, 0.0]).reduce_max(), 0.0);\n     assert_eq!(\n         f64x2::from_array([0.0, f64::NAN]).min(f64x2::from_array([f64::NAN, 0.0])),\n         f64x2::from_array([0.0, 0.0])\n     );\n-    assert_eq!(f64x2::from_array([0.0, f64::NAN]).horizontal_min(), 0.0);\n-    assert_eq!(f64x2::from_array([f64::NAN, 0.0]).horizontal_min(), 0.0);\n+    assert_eq!(f64x2::from_array([0.0, f64::NAN]).reduce_min(), 0.0);\n+    assert_eq!(f64x2::from_array([f64::NAN, 0.0]).reduce_min(), 0.0);\n }\n \n fn simd_ops_i32() {\n@@ -137,21 +137,21 @@ fn simd_ops_i32() {\n     assert_eq!(a.lanes_ge(i32x4::splat(5) * b), Mask::from_array([true, true, false, true]));\n     assert_eq!(a.lanes_gt(i32x4::splat(5) * b), Mask::from_array([true, false, false, true]));\n \n-    assert_eq!(a.horizontal_sum(), 40);\n-    assert_eq!(b.horizontal_sum(), 2);\n-    assert_eq!(a.horizontal_product(), 100 * 100);\n-    assert_eq!(b.horizontal_product(), -24);\n-    assert_eq!(a.horizontal_max(), 10);\n-    assert_eq!(b.horizontal_max(), 3);\n-    assert_eq!(a.horizontal_min(), 10);\n-    assert_eq!(b.horizontal_min(), -4);\n+    assert_eq!(a.reduce_sum(), 40);\n+    assert_eq!(b.reduce_sum(), 2);\n+    assert_eq!(a.reduce_product(), 100 * 100);\n+    assert_eq!(b.reduce_product(), -24);\n+    assert_eq!(a.reduce_max(), 10);\n+    assert_eq!(b.reduce_max(), 3);\n+    assert_eq!(a.reduce_min(), 10);\n+    assert_eq!(b.reduce_min(), -4);\n \n-    assert_eq!(a.horizontal_and(), 10);\n-    assert_eq!(b.horizontal_and(), 0);\n-    assert_eq!(a.horizontal_or(), 10);\n-    assert_eq!(b.horizontal_or(), -1);\n-    assert_eq!(a.horizontal_xor(), 0);\n-    assert_eq!(b.horizontal_xor(), -4);\n+    assert_eq!(a.reduce_and(), 10);\n+    assert_eq!(b.reduce_and(), 0);\n+    assert_eq!(a.reduce_or(), 10);\n+    assert_eq!(b.reduce_or(), -1);\n+    assert_eq!(a.reduce_xor(), 0);\n+    assert_eq!(b.reduce_xor(), -4);\n }\n \n fn simd_mask() {"}]}