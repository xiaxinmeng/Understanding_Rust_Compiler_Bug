{"sha": "21b025f55fa7f68982f9faf58522da11b3d91815", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjAyNWY1NWZhN2Y2ODk4MmY5ZmFmNTg1MjJkYTExYjNkOTE4MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-06T15:00:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-06T15:00:17Z"}, "message": "Auto merge of #30733 - ubsan:wrapping_op_assign, r=eddyb\n\nFix a breaking change in #30523\n\nWhile this does fix a breaking change, it is also, technically, a\n[breaking-change] to go back to our original way", "tree": {"sha": "df325c272225cfef99c4462acb353ab0339e418c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df325c272225cfef99c4462acb353ab0339e418c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b025f55fa7f68982f9faf58522da11b3d91815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b025f55fa7f68982f9faf58522da11b3d91815", "html_url": "https://github.com/rust-lang/rust/commit/21b025f55fa7f68982f9faf58522da11b3d91815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b025f55fa7f68982f9faf58522da11b3d91815/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ac1a1da327f22bb865f23963f1070d4fd40c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ac1a1da327f22bb865f23963f1070d4fd40c0c", "html_url": "https://github.com/rust-lang/rust/commit/d5ac1a1da327f22bb865f23963f1070d4fd40c0c"}, {"sha": "14e1e2aee812978c81d4edf23359e7dca444d678", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e1e2aee812978c81d4edf23359e7dca444d678", "html_url": "https://github.com/rust-lang/rust/commit/14e1e2aee812978c81d4edf23359e7dca444d678"}], "stats": {"total": 100, "additions": 51, "deletions": 49}, "files": [{"sha": "8f9e38bbdf9cf0fd8445af4f44eb0c67be18341b", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21b025f55fa7f68982f9faf58522da11b3d91815/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b025f55fa7f68982f9faf58522da11b3d91815/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=21b025f55fa7f68982f9faf58522da11b3d91815", "patch": "@@ -42,9 +42,9 @@ macro_rules! sh_impl_signed {\n             #[inline(always)]\n             fn shl(self, other: $f) -> Wrapping<$t> {\n                 if other < 0 {\n-                    Wrapping(self.0 >> (-other & self::shift_max::$t as $f))\n+                    Wrapping(self.0.wrapping_shr((-other & self::shift_max::$t as $f) as u32))\n                 } else {\n-                    Wrapping(self.0 << (other & self::shift_max::$t as $f))\n+                    Wrapping(self.0.wrapping_shl((other & self::shift_max::$t as $f) as u32))\n                 }\n             }\n         }\n@@ -64,9 +64,9 @@ macro_rules! sh_impl_signed {\n             #[inline(always)]\n             fn shr(self, other: $f) -> Wrapping<$t> {\n                 if other < 0 {\n-                    Wrapping(self.0 << (-other & self::shift_max::$t as $f))\n+                    Wrapping(self.0.wrapping_shl((-other & self::shift_max::$t as $f) as u32))\n                 } else {\n-                    Wrapping(self.0 >> (other & self::shift_max::$t as $f))\n+                    Wrapping(self.0.wrapping_shr((other & self::shift_max::$t as $f) as u32))\n                 }\n             }\n         }\n@@ -89,7 +89,7 @@ macro_rules! sh_impl_unsigned {\n \n             #[inline(always)]\n             fn shl(self, other: $f) -> Wrapping<$t> {\n-                Wrapping(self.0 << (other & self::shift_max::$t as $f))\n+                Wrapping(self.0.wrapping_shl((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n \n@@ -107,7 +107,7 @@ macro_rules! sh_impl_unsigned {\n \n             #[inline(always)]\n             fn shr(self, other: $f) -> Wrapping<$t> {\n-                Wrapping(self.0 >> (other & self::shift_max::$t as $f))\n+                Wrapping(self.0.wrapping_shr((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n \n@@ -124,17 +124,17 @@ macro_rules! sh_impl_unsigned {\n // FIXME (#23545): uncomment the remaining impls\n macro_rules! sh_impl_all {\n     ($($t:ident)*) => ($(\n-        sh_impl_unsigned! { $t, u8 }\n-        sh_impl_unsigned! { $t, u16 }\n-        sh_impl_unsigned! { $t, u32 }\n-        sh_impl_unsigned! { $t, u64 }\n+        //sh_impl_unsigned! { $t, u8 }\n+        //sh_impl_unsigned! { $t, u16 }\n+        //sh_impl_unsigned! { $t, u32 }\n+        //sh_impl_unsigned! { $t, u64 }\n         sh_impl_unsigned! { $t, usize }\n \n-        sh_impl_signed! { $t, i8 }\n-        sh_impl_signed! { $t, i16 }\n-        sh_impl_signed! { $t, i32 }\n-        sh_impl_signed! { $t, i64 }\n-        sh_impl_signed! { $t, isize }\n+        //sh_impl_signed! { $t, i8 }\n+        //sh_impl_signed! { $t, i16 }\n+        //sh_impl_signed! { $t, i32 }\n+        //sh_impl_signed! { $t, i64 }\n+        //sh_impl_signed! { $t, isize }\n     )*)\n }\n "}, {"sha": "28eff87bde3b762246e11abec3c6039d93c51b21", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21b025f55fa7f68982f9faf58522da11b3d91815/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b025f55fa7f68982f9faf58522da11b3d91815/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=21b025f55fa7f68982f9faf58522da11b3d91815", "patch": "@@ -170,7 +170,7 @@ impl IsaacRng {\n         const MIDPOINT: usize = RAND_SIZE_USIZE / 2;\n \n         macro_rules! ind {\n-            ($x:expr) => (self.mem[($x >> 2u32).0 as usize & (RAND_SIZE_USIZE - 1)] )\n+            ($x:expr) => (self.mem[($x >> 2).0 as usize & (RAND_SIZE_USIZE - 1)] )\n         }\n \n         let r = [(0, MIDPOINT), (MIDPOINT, 0)];\n@@ -452,7 +452,7 @@ impl Isaac64Rng {\n         const MP_VEC: [(usize, usize); 2] = [(0, MIDPOINT), (MIDPOINT, 0)];\n         macro_rules! ind {\n             ($x:expr) => {\n-                *self.mem.get_unchecked((($x >> 3u32).0 as usize) & (RAND_SIZE_64 - 1))\n+                *self.mem.get_unchecked((($x >> 3).0 as usize) & (RAND_SIZE_64 - 1))\n             }\n         }\n \n@@ -495,10 +495,10 @@ impl Isaac64Rng {\n                     }}\n                 }\n \n-                rngstepp!(0, 21u32);\n-                rngstepn!(1, 5u32);\n-                rngstepp!(2, 12u32);\n-                rngstepn!(3, 33u32);\n+                rngstepp!(0, 21);\n+                rngstepn!(1, 5);\n+                rngstepp!(2, 12);\n+                rngstepn!(3, 33);\n             }\n         }\n "}, {"sha": "33f7b97ef9679d0a5e22e11729226401be5fb334", "filename": "src/test/run-pass/num-wrapping.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/21b025f55fa7f68982f9faf58522da11b3d91815/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b025f55fa7f68982f9faf58522da11b3d91815/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs?ref=21b025f55fa7f68982f9faf58522da11b3d91815", "patch": "@@ -309,22 +309,23 @@ fn test_sh_ops() {\n             sh_test!(shl(usize::MAX, -((usize::BITS + 1) as $t)) == usize::MAX / 2);\n         }\n     }\n-    sh_test_all!(i8);\n-    sh_test_all!(u8);\n-    sh_test_all!(i16);\n-    sh_test_all!(u16);\n-    sh_test_all!(i32);\n-    sh_test_all!(u32);\n-    sh_test_all!(i64);\n-    sh_test_all!(u64);\n-    sh_test_all!(isize);\n+    // FIXME(#23545): Uncomment the remaining tests\n+    //sh_test_all!(i8);\n+    //sh_test_all!(u8);\n+    //sh_test_all!(i16);\n+    //sh_test_all!(u16);\n+    //sh_test_all!(i32);\n+    //sh_test_all!(u32);\n+    //sh_test_all!(i64);\n+    //sh_test_all!(u64);\n+    //sh_test_all!(isize);\n     sh_test_all!(usize);\n \n-    sh_test_negative_all!(i8);\n-    sh_test_negative_all!(i16);\n-    sh_test_negative_all!(i32);\n-    sh_test_negative_all!(i64);\n-    sh_test_negative_all!(isize);\n+    //sh_test_negative_all!(i8);\n+    //sh_test_negative_all!(i16);\n+    //sh_test_negative_all!(i32);\n+    //sh_test_negative_all!(i64);\n+    //sh_test_negative_all!(isize);\n }\n \n fn test_sh_op_assigns() {\n@@ -393,20 +394,21 @@ fn test_sh_op_assigns() {\n         }\n     }\n \n-    sh_assign_test_all!(i8);\n-    sh_assign_test_all!(u8);\n-    sh_assign_test_all!(i16);\n-    sh_assign_test_all!(u16);\n-    sh_assign_test_all!(i32);\n-    sh_assign_test_all!(u32);\n-    sh_assign_test_all!(i64);\n-    sh_assign_test_all!(u64);\n-    sh_assign_test_all!(isize);\n+    // FIXME(#23545): Uncomment the remaining tests\n+    //sh_assign_test_all!(i8);\n+    //sh_assign_test_all!(u8);\n+    //sh_assign_test_all!(i16);\n+    //sh_assign_test_all!(u16);\n+    //sh_assign_test_all!(i32);\n+    //sh_assign_test_all!(u32);\n+    //sh_assign_test_all!(i64);\n+    //sh_assign_test_all!(u64);\n+    //sh_assign_test_all!(isize);\n     sh_assign_test_all!(usize);\n \n-    sh_assign_test_negative_all!(i8);\n-    sh_assign_test_negative_all!(i16);\n-    sh_assign_test_negative_all!(i32);\n-    sh_assign_test_negative_all!(i64);\n-    sh_assign_test_negative_all!(isize);\n+    //sh_assign_test_negative_all!(i8);\n+    //sh_assign_test_negative_all!(i16);\n+    //sh_assign_test_negative_all!(i32);\n+    //sh_assign_test_negative_all!(i64);\n+    //sh_assign_test_negative_all!(isize);\n }"}]}