{"sha": "dbfc95f969802788f6082772c50f7f3d20d5bf88", "node_id": "C_kwDOAAsO6NoAKGRiZmM5NWY5Njk4MDI3ODhmNjA4Mjc3MmM1MGY3ZjNkMjBkNWJmODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-27T04:20:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-27T04:20:44Z"}, "message": "Auto merge of #111348 - ozkanonur:remove-hardcoded-rustdoc-flags, r=albertlarsan68,oli-obk\n\nnew tool `rustdoc-gui-test`\n\nImplements new tool `rustdoc-gui-test` that allows using compiletest headers for `rustdoc-gui` tests.", "tree": {"sha": "aa71f9e7222f288df8edc6f99cf8b2bec1a08533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa71f9e7222f288df8edc6f99cf8b2bec1a08533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbfc95f969802788f6082772c50f7f3d20d5bf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfc95f969802788f6082772c50f7f3d20d5bf88", "html_url": "https://github.com/rust-lang/rust/commit/dbfc95f969802788f6082772c50f7f3d20d5bf88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbfc95f969802788f6082772c50f7f3d20d5bf88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23040c4a5fa74f569f9f46f82f070554899db97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/23040c4a5fa74f569f9f46f82f070554899db97f", "html_url": "https://github.com/rust-lang/rust/commit/23040c4a5fa74f569f9f46f82f070554899db97f"}, {"sha": "c7cec292154873bad0c7a27ce7c8d7ebfc1f320e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cec292154873bad0c7a27ce7c8d7ebfc1f320e", "html_url": "https://github.com/rust-lang/rust/commit/c7cec292154873bad0c7a27ce7c8d7ebfc1f320e"}], "stats": {"total": 2666, "additions": 1435, "deletions": 1231}, "files": [{"sha": "efd3d85f43ebd4b8f07d6a6f28ca6d8d5180da8c", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -4379,6 +4379,15 @@ dependencies = [\n  \"tracing-tree\",\n ]\n \n+[[package]]\n+name = \"rustdoc-gui-test\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"compiletest\",\n+ \"getopts\",\n+ \"walkdir\",\n+]\n+\n [[package]]\n name = \"rustdoc-json-types\"\n version = \"0.1.0\""}, {"sha": "8eb378afe428a380b45bcfa09171ae3d692f0cb1", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -40,6 +40,7 @@ members = [\n   \"src/tools/generate-copyright\",\n   \"src/tools/suggest-tests\",\n   \"src/tools/generate-windows-sys\",\n+  \"src/tools/rustdoc-gui-test\",\n ]\n \n exclude = ["}, {"sha": "3eaad59474a12a9e27f547d895fc15cb39fa6842", "filename": "library/test/src/options.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/library%2Ftest%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/library%2Ftest%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Foptions.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -16,19 +16,21 @@ pub enum ShouldPanic {\n }\n \n /// Whether should console output be colored or not\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Default, Debug)]\n pub enum ColorConfig {\n+    #[default]\n     AutoColor,\n     AlwaysColor,\n     NeverColor,\n }\n \n /// Format of the test results output\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub enum OutputFormat {\n     /// Verbose output\n     Pretty,\n     /// Quiet output\n+    #[default]\n     Terse,\n     /// JSON output\n     Json,"}, {"sha": "2fa445506bc4a913a88ee57ce340b8a5b3c1e5b6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -689,7 +689,8 @@ impl<'a> Builder<'a> {\n                 tool::Miri,\n                 tool::CargoMiri,\n                 llvm::Lld,\n-                llvm::CrtBeginEnd\n+                llvm::CrtBeginEnd,\n+                tool::RustdocGUITest,\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,"}, {"sha": "b829e19784a3d1b065cd426d5932c3f247c479d1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 28, "deletions": 88, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -944,28 +944,6 @@ fn get_browser_ui_test_version(npm: &Path) -> Option<String> {\n         .or_else(|| get_browser_ui_test_version_inner(npm, true))\n }\n \n-fn compare_browser_ui_test_version(installed_version: &str, src: &Path) {\n-    match fs::read_to_string(\n-        src.join(\"src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version\"),\n-    ) {\n-        Ok(v) => {\n-            if v.trim() != installed_version {\n-                eprintln!(\n-                    \"\u26a0\ufe0f Installed version of browser-ui-test (`{}`) is different than the \\\n-                     one used in the CI (`{}`)\",\n-                    installed_version, v\n-                );\n-                eprintln!(\n-                    \"You can install this version using `npm update browser-ui-test` or by using \\\n-                     `npm install browser-ui-test@{}`\",\n-                    v,\n-                );\n-            }\n-        }\n-        Err(e) => eprintln!(\"Couldn't find the CI browser-ui-test version: {:?}\", e),\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocGUI {\n     pub target: TargetSelection,\n@@ -997,94 +975,56 @@ impl Step for RustdocGUI {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let nodejs = builder.config.nodejs.as_ref().expect(\"nodejs isn't available\");\n-        let npm = builder.config.npm.as_ref().expect(\"npm isn't available\");\n-\n         builder.ensure(compile::Std::new(self.compiler, self.target));\n \n-        // The goal here is to check if the necessary packages are installed, and if not, we\n-        // panic.\n-        match get_browser_ui_test_version(&npm) {\n-            Some(version) => {\n-                // We also check the version currently used in CI and emit a warning if it's not the\n-                // same one.\n-                compare_browser_ui_test_version(&version, &builder.build.src);\n-            }\n-            None => {\n-                eprintln!(\n-                    \"error: rustdoc-gui test suite cannot be run because npm `browser-ui-test` \\\n-                     dependency is missing\",\n-                );\n-                eprintln!(\n-                    \"If you want to install the `{0}` dependency, run `npm install {0}`\",\n-                    \"browser-ui-test\",\n-                );\n-                panic!(\"Cannot run rustdoc-gui tests\");\n-            }\n-        }\n+        let mut cmd = builder.tool_cmd(Tool::RustdocGUITest);\n \n         let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");\n-\n-        // We remove existing folder to be sure there won't be artifacts remaining.\n         builder.clear_if_dirty(&out_dir, &builder.rustdoc(self.compiler));\n \n-        let src_path = builder.build.src.join(\"tests/rustdoc-gui/src\");\n-        // We generate docs for the libraries present in the rustdoc-gui's src folder.\n-        for entry in src_path.read_dir().expect(\"read_dir call failed\") {\n-            if let Ok(entry) = entry {\n-                let path = entry.path();\n+        if let Some(src) = builder.config.src.to_str() {\n+            cmd.arg(\"--rust-src\").arg(src);\n+        }\n \n-                if !path.is_dir() {\n-                    continue;\n-                }\n+        if let Some(out_dir) = out_dir.to_str() {\n+            cmd.arg(\"--out-dir\").arg(out_dir);\n+        }\n \n-                let mut cargo = Command::new(&builder.initial_cargo);\n-                cargo\n-                    .arg(\"doc\")\n-                    .arg(\"--target-dir\")\n-                    .arg(&out_dir)\n-                    .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-                    .env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n-                    .env(\"RUSTC\", builder.rustc(self.compiler))\n-                    .current_dir(path);\n-                // FIXME: implement a `// compile-flags` command or similar\n-                //        instead of hard-coding this test\n-                if entry.file_name() == \"link_to_definition\" {\n-                    cargo.env(\"RUSTDOCFLAGS\", \"-Zunstable-options --generate-link-to-definition\");\n-                } else if entry.file_name() == \"scrape_examples\" {\n-                    cargo.arg(\"-Zrustdoc-scrape-examples\");\n-                } else if entry.file_name() == \"extend_css\" {\n-                    cargo.env(\"RUSTDOCFLAGS\", &format!(\"--extend-css extra.css\"));\n-                }\n-                builder.run(&mut cargo);\n-            }\n+        if let Some(initial_cargo) = builder.config.initial_cargo.to_str() {\n+            cmd.arg(\"--initial-cargo\").arg(initial_cargo);\n         }\n \n-        // We now run GUI tests.\n-        let mut command = Command::new(&nodejs);\n-        command\n-            .arg(builder.build.src.join(\"src/tools/rustdoc-gui/tester.js\"))\n-            .arg(\"--jobs\")\n-            .arg(&builder.jobs().to_string())\n-            .arg(\"--doc-folder\")\n-            .arg(out_dir.join(\"doc\"))\n-            .arg(\"--tests-folder\")\n-            .arg(builder.build.src.join(\"tests/rustdoc-gui\"));\n+        cmd.arg(\"--jobs\").arg(builder.jobs().to_string());\n+\n+        cmd.env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n+            .env(\"RUSTC\", builder.rustc(self.compiler));\n+\n         for path in &builder.paths {\n             if let Some(p) = util::is_valid_test_suite_arg(path, \"tests/rustdoc-gui\", builder) {\n                 if !p.ends_with(\".goml\") {\n                     eprintln!(\"A non-goml file was given: `{}`\", path.display());\n                     panic!(\"Cannot run rustdoc-gui tests\");\n                 }\n                 if let Some(name) = path.file_name().and_then(|f| f.to_str()) {\n-                    command.arg(\"--file\").arg(name);\n+                    cmd.arg(\"--goml-file\").arg(name);\n                 }\n             }\n         }\n+\n         for test_arg in builder.config.test_args() {\n-            command.arg(test_arg);\n+            cmd.arg(\"--test-arg\").arg(test_arg);\n         }\n-        builder.run(&mut command);\n+\n+        if let Some(ref nodejs) = builder.config.nodejs {\n+            cmd.arg(\"--nodejs\").arg(nodejs);\n+        }\n+\n+        if let Some(ref npm) = builder.config.npm {\n+            cmd.arg(\"--npm\").arg(npm);\n+        }\n+\n+        let _time = util::timeit(&builder);\n+        crate::render_tests::try_run_tests(builder, &mut cmd);\n     }\n }\n "}, {"sha": "b3791efaf58cfc43a601d1f5e03066eb854a3178", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -302,6 +302,7 @@ bootstrap_tool!(\n     GenerateCopyright, \"src/tools/generate-copyright\", \"generate-copyright\";\n     SuggestTests, \"src/tools/suggest-tests\", \"suggest-tests\";\n     GenerateWindowsSys, \"src/tools/generate-windows-sys\", \"generate-windows-sys\";\n+    RustdocGUITest, \"src/tools/rustdoc-gui-test\", \"rustdoc-gui-test\", is_unstable_tool = true, allow_features = \"test\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "d2f258320f086aa23c628f4a448bf94b8f78b0b2", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -3,6 +3,9 @@ name = \"compiletest\"\n version = \"0.0.0\"\n edition = \"2021\"\n \n+[lib]\n+doctest = false\n+\n [dependencies]\n colored = \"2\"\n diff = \"0.1.10\""}, {"sha": "f796c898731117384e15e449f6f686e36fb50ec2", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -69,6 +69,12 @@ string_enum! {\n     }\n }\n \n+impl Default for Mode {\n+    fn default() -> Self {\n+        Mode::Ui\n+    }\n+}\n+\n impl Mode {\n     pub fn disambiguator(self) -> &'static str {\n         // Pretty-printing tests could run concurrently, and if they do,\n@@ -125,7 +131,7 @@ pub enum PanicStrategy {\n }\n \n /// Configuration for compiletest\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Default, Clone)]\n pub struct Config {\n     /// `true` to overwrite stderr/stdout files instead of complaining about changes in output.\n     pub bless: bool,"}, {"sha": "fc48d0159905b1ffc3dd60a8cb9d57586d8bce7f", "filename": "src/tools/compiletest/src/lib.rs", "status": "added", "additions": 1136, "deletions": 0, "changes": 1136, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Flib.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -0,0 +1,1136 @@\n+#![crate_name = \"compiletest\"]\n+// The `test` crate is the only unstable feature\n+// allowed here, just to share similar code.\n+#![feature(test)]\n+\n+extern crate test;\n+\n+#[cfg(test)]\n+mod tests;\n+\n+pub mod common;\n+pub mod compute_diff;\n+pub mod errors;\n+pub mod header;\n+mod json;\n+mod raise_fd_limit;\n+mod read2;\n+pub mod runtest;\n+pub mod util;\n+\n+use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n+use crate::common::{Config, Debugger, Mode, PassMode, TestPaths};\n+use crate::util::logv;\n+use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n+use core::panic;\n+use getopts::Options;\n+use lazycell::AtomicLazyCell;\n+use std::collections::BTreeSet;\n+use std::ffi::OsString;\n+use std::fs;\n+use std::io::{self, ErrorKind};\n+use std::path::{Path, PathBuf};\n+use std::process::{Command, Stdio};\n+use std::time::SystemTime;\n+use std::{env, vec};\n+use test::ColorConfig;\n+use tracing::*;\n+use walkdir::WalkDir;\n+\n+use self::header::{make_test_description, EarlyProps};\n+use crate::header::HeadersCache;\n+use std::sync::Arc;\n+\n+pub fn parse_config(args: Vec<String>) -> Config {\n+    let mut opts = Options::new();\n+    opts.reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\")\n+        .reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\")\n+        .reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\")\n+        .optopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\")\n+        .optopt(\"\", \"rust-demangler-path\", \"path to rust-demangler to use in tests\", \"PATH\")\n+        .reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\")\n+        .optopt(\"\", \"jsondocck-path\", \"path to jsondocck to use for doc tests\", \"PATH\")\n+        .optopt(\"\", \"jsondoclint-path\", \"path to jsondoclint to use for doc tests\", \"PATH\")\n+        .optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\")\n+        .optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\")\n+        .optopt(\"\", \"run-clang-based-tests-with\", \"path to Clang executable\", \"PATH\")\n+        .optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\")\n+        .reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\")\n+        .reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\")\n+        .reqopt(\"\", \"sysroot-base\", \"directory containing the compiler sysroot\", \"PATH\")\n+        .reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\")\n+        .reqopt(\n+            \"\",\n+            \"mode\",\n+            \"which sort of compile tests to run\",\n+            \"run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n+            | rustdoc-json | codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n+        )\n+        .reqopt(\n+            \"\",\n+            \"suite\",\n+            \"which suite of compile tests to run. used for nicer error reporting.\",\n+            \"SUITE\",\n+        )\n+        .optopt(\n+            \"\",\n+            \"pass\",\n+            \"force {check,build,run}-pass tests to this mode.\",\n+            \"check | build | run\",\n+        )\n+        .optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\")\n+        .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n+        .optmulti(\"\", \"skip\", \"skip tests matching SUBSTRING. Can be passed multiple times\", \"SUBSTRING\")\n+        .optflag(\"\", \"exact\", \"filters match exactly\")\n+        .optopt(\n+            \"\",\n+            \"runtool\",\n+            \"supervisor program to run tests under \\\n+             (eg. emulator, valgrind)\",\n+            \"PROGRAM\",\n+        )\n+        .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n+        .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optflag(\"\", \"optimize-tests\", \"run tests with optimizations enabled\")\n+        .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n+        .optflag(\n+            \"\",\n+            \"bless\",\n+            \"overwrite stderr/stdout files instead of complaining about a mismatch\",\n+        )\n+        .optflag(\"\", \"quiet\", \"print one character per test instead of one line\")\n+        .optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\")\n+        .optflag(\"\", \"json\", \"emit json output instead of plaintext output\")\n+        .optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\")\n+        .optopt(\"\", \"target\", \"the target to build for\", \"TARGET\")\n+        .optopt(\"\", \"host\", \"the host to build for\", \"HOST\")\n+        .optopt(\"\", \"cdb\", \"path to CDB to use for CDB debuginfo tests\", \"PATH\")\n+        .optopt(\"\", \"gdb\", \"path to GDB to use for GDB debuginfo tests\", \"PATH\")\n+        .optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\")\n+        .optopt(\"\", \"llvm-version\", \"the version of LLVM used\", \"VERSION STRING\")\n+        .optflag(\"\", \"system-llvm\", \"is LLVM the system LLVM\")\n+        .optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\")\n+        .optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\")\n+        .optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\")\n+        .optopt(\"\", \"lldb-python-dir\", \"directory containing LLDB's python module\", \"PATH\")\n+        .reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\")\n+        .reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\")\n+        .reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\")\n+        .reqopt(\"\", \"cxxflags\", \"flags for the CXX compiler\", \"FLAGS\")\n+        .optopt(\"\", \"ar\", \"path to an archiver\", \"PATH\")\n+        .optopt(\"\", \"target-linker\", \"path to a linker for the target\", \"PATH\")\n+        .optopt(\"\", \"host-linker\", \"path to a linker for the host\", \"PATH\")\n+        .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n+        .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n+        .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n+        .optopt(\"\", \"npm\", \"the name of npm\", \"PATH\")\n+        .optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\")\n+        .optopt(\n+            \"\",\n+            \"compare-mode\",\n+            \"mode describing what file the actual ui output will be compared to\",\n+            \"COMPARE MODE\",\n+        )\n+        .optflag(\n+            \"\",\n+            \"rustfix-coverage\",\n+            \"enable this to generate a Rustfix coverage file, which is saved in \\\n+            `./<build_base>/rustfix_missing_coverage.txt`\",\n+        )\n+        .optflag(\"\", \"force-rerun\", \"rerun tests even if the inputs are unchanged\")\n+        .optflag(\"\", \"only-modified\", \"only run tests that result been modified\")\n+        .optflag(\"\", \"nocapture\", \"\")\n+        .optflag(\"h\", \"help\", \"show this message\")\n+        .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\")\n+        .optflag(\"\", \"git-hash\", \"run tests which rely on commit version being compiled into the binaries\")\n+        .optopt(\"\", \"edition\", \"default Rust edition\", \"EDITION\");\n+\n+    let (argv0, args_) = args.split_first().unwrap();\n+    if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n+        let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n+        println!(\"{}\", opts.usage(&message));\n+        println!();\n+        panic!()\n+    }\n+\n+    let matches = &match opts.parse(args_) {\n+        Ok(m) => m,\n+        Err(f) => panic!(\"{:?}\", f),\n+    };\n+\n+    if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n+        let message = format!(\"Usage: {} [OPTIONS]  [TESTNAME...]\", argv0);\n+        println!(\"{}\", opts.usage(&message));\n+        println!();\n+        panic!()\n+    }\n+\n+    fn opt_path(m: &getopts::Matches, nm: &str) -> PathBuf {\n+        match m.opt_str(nm) {\n+            Some(s) => PathBuf::from(&s),\n+            None => panic!(\"no option (=path) found for {}\", nm),\n+        }\n+    }\n+\n+    fn make_absolute(path: PathBuf) -> PathBuf {\n+        if path.is_relative() { env::current_dir().unwrap().join(path) } else { path }\n+    }\n+\n+    let target = opt_str2(matches.opt_str(\"target\"));\n+    let android_cross_path = opt_path(matches, \"android-cross-path\");\n+    let (cdb, cdb_version) = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n+    let (gdb, gdb_version, gdb_native_rust) =\n+        analyze_gdb(matches.opt_str(\"gdb\"), &target, &android_cross_path);\n+    let (lldb_version, lldb_native_rust) = matches\n+        .opt_str(\"lldb-version\")\n+        .as_deref()\n+        .and_then(extract_lldb_version)\n+        .map(|(v, b)| (Some(v), b))\n+        .unwrap_or((None, false));\n+    let color = match matches.opt_str(\"color\").as_deref() {\n+        Some(\"auto\") | None => ColorConfig::AutoColor,\n+        Some(\"always\") => ColorConfig::AlwaysColor,\n+        Some(\"never\") => ColorConfig::NeverColor,\n+        Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n+    };\n+    let llvm_version =\n+        matches.opt_str(\"llvm-version\").as_deref().and_then(header::extract_llvm_version).or_else(\n+            || header::extract_llvm_version_from_binary(&matches.opt_str(\"llvm-filecheck\")?),\n+        );\n+\n+    let src_base = opt_path(matches, \"src-base\");\n+    let run_ignored = matches.opt_present(\"ignored\");\n+    let mode = matches.opt_str(\"mode\").unwrap().parse().expect(\"invalid mode\");\n+    let has_tidy = if mode == Mode::Rustdoc {\n+        Command::new(\"tidy\")\n+            .arg(\"--version\")\n+            .stdout(Stdio::null())\n+            .status()\n+            .map_or(false, |status| status.success())\n+    } else {\n+        // Avoid spawning an external command when we know tidy won't be used.\n+        false\n+    };\n+    Config {\n+        bless: matches.opt_present(\"bless\"),\n+        compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n+        run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n+        rustc_path: opt_path(matches, \"rustc-path\"),\n+        rustdoc_path: matches.opt_str(\"rustdoc-path\").map(PathBuf::from),\n+        rust_demangler_path: matches.opt_str(\"rust-demangler-path\").map(PathBuf::from),\n+        python: matches.opt_str(\"python\").unwrap(),\n+        jsondocck_path: matches.opt_str(\"jsondocck-path\"),\n+        jsondoclint_path: matches.opt_str(\"jsondoclint-path\"),\n+        valgrind_path: matches.opt_str(\"valgrind-path\"),\n+        force_valgrind: matches.opt_present(\"force-valgrind\"),\n+        run_clang_based_tests_with: matches.opt_str(\"run-clang-based-tests-with\"),\n+        llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(PathBuf::from),\n+        llvm_bin_dir: matches.opt_str(\"llvm-bin-dir\").map(PathBuf::from),\n+        src_base,\n+        build_base: opt_path(matches, \"build-base\"),\n+        sysroot_base: opt_path(matches, \"sysroot-base\"),\n+        stage_id: matches.opt_str(\"stage-id\").unwrap(),\n+        mode,\n+        suite: matches.opt_str(\"suite\").unwrap(),\n+        debugger: None,\n+        run_ignored,\n+        filters: matches.free.clone(),\n+        skip: matches.opt_strs(\"skip\"),\n+        filter_exact: matches.opt_present(\"exact\"),\n+        force_pass_mode: matches.opt_str(\"pass\").map(|mode| {\n+            mode.parse::<PassMode>()\n+                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n+        }),\n+        run: matches.opt_str(\"run\").and_then(|mode| match mode.as_str() {\n+            \"auto\" => None,\n+            \"always\" => Some(true),\n+            \"never\" => Some(false),\n+            _ => panic!(\"unknown `--run` option `{}` given\", mode),\n+        }),\n+        logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n+        runtool: matches.opt_str(\"runtool\"),\n+        host_rustcflags: matches.opt_strs(\"host-rustcflags\"),\n+        target_rustcflags: matches.opt_strs(\"target-rustcflags\"),\n+        optimize_tests: matches.opt_present(\"optimize-tests\"),\n+        target,\n+        host: opt_str2(matches.opt_str(\"host\")),\n+        cdb,\n+        cdb_version,\n+        gdb,\n+        gdb_version,\n+        gdb_native_rust,\n+        lldb_version,\n+        lldb_native_rust,\n+        llvm_version,\n+        system_llvm: matches.opt_present(\"system-llvm\"),\n+        android_cross_path,\n+        adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n+        adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n+        adb_device_status: opt_str2(matches.opt_str(\"target\")).contains(\"android\")\n+            && \"(none)\" != opt_str2(matches.opt_str(\"adb-test-dir\"))\n+            && !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n+        lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n+        verbose: matches.opt_present(\"verbose\"),\n+        format: match (matches.opt_present(\"quiet\"), matches.opt_present(\"json\")) {\n+            (true, true) => panic!(\"--quiet and --json are incompatible\"),\n+            (true, false) => test::OutputFormat::Terse,\n+            (false, true) => test::OutputFormat::Json,\n+            (false, false) => test::OutputFormat::Pretty,\n+        },\n+        only_modified: matches.opt_present(\"only-modified\"),\n+        color,\n+        remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n+        compare_mode: matches\n+            .opt_str(\"compare-mode\")\n+            .map(|s| s.parse().expect(\"invalid --compare-mode provided\")),\n+        rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n+        has_tidy,\n+        channel: matches.opt_str(\"channel\").unwrap(),\n+        git_hash: matches.opt_present(\"git-hash\"),\n+        edition: matches.opt_str(\"edition\"),\n+\n+        cc: matches.opt_str(\"cc\").unwrap(),\n+        cxx: matches.opt_str(\"cxx\").unwrap(),\n+        cflags: matches.opt_str(\"cflags\").unwrap(),\n+        cxxflags: matches.opt_str(\"cxxflags\").unwrap(),\n+        ar: matches.opt_str(\"ar\").unwrap_or_else(|| String::from(\"ar\")),\n+        target_linker: matches.opt_str(\"target-linker\"),\n+        host_linker: matches.opt_str(\"host-linker\"),\n+        llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n+        nodejs: matches.opt_str(\"nodejs\"),\n+        npm: matches.opt_str(\"npm\"),\n+\n+        force_rerun: matches.opt_present(\"force-rerun\"),\n+\n+        target_cfgs: AtomicLazyCell::new(),\n+\n+        nocapture: matches.opt_present(\"nocapture\"),\n+    }\n+}\n+\n+pub fn log_config(config: &Config) {\n+    let c = config;\n+    logv(c, \"configuration:\".to_string());\n+    logv(c, format!(\"compile_lib_path: {:?}\", config.compile_lib_path));\n+    logv(c, format!(\"run_lib_path: {:?}\", config.run_lib_path));\n+    logv(c, format!(\"rustc_path: {:?}\", config.rustc_path.display()));\n+    logv(c, format!(\"rustdoc_path: {:?}\", config.rustdoc_path));\n+    logv(c, format!(\"rust_demangler_path: {:?}\", config.rust_demangler_path));\n+    logv(c, format!(\"src_base: {:?}\", config.src_base.display()));\n+    logv(c, format!(\"build_base: {:?}\", config.build_base.display()));\n+    logv(c, format!(\"stage_id: {}\", config.stage_id));\n+    logv(c, format!(\"mode: {}\", config.mode));\n+    logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n+    logv(c, format!(\"filters: {:?}\", config.filters));\n+    logv(c, format!(\"skip: {:?}\", config.skip));\n+    logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n+    logv(\n+        c,\n+        format!(\"force_pass_mode: {}\", opt_str(&config.force_pass_mode.map(|m| format!(\"{}\", m))),),\n+    );\n+    logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n+    logv(c, format!(\"host-rustcflags: {:?}\", config.host_rustcflags));\n+    logv(c, format!(\"target-rustcflags: {:?}\", config.target_rustcflags));\n+    logv(c, format!(\"target: {}\", config.target));\n+    logv(c, format!(\"host: {}\", config.host));\n+    logv(c, format!(\"android-cross-path: {:?}\", config.android_cross_path.display()));\n+    logv(c, format!(\"adb_path: {:?}\", config.adb_path));\n+    logv(c, format!(\"adb_test_dir: {:?}\", config.adb_test_dir));\n+    logv(c, format!(\"adb_device_status: {}\", config.adb_device_status));\n+    logv(c, format!(\"ar: {}\", config.ar));\n+    logv(c, format!(\"target-linker: {:?}\", config.target_linker));\n+    logv(c, format!(\"host-linker: {:?}\", config.host_linker));\n+    logv(c, format!(\"verbose: {}\", config.verbose));\n+    logv(c, format!(\"format: {:?}\", config.format));\n+    logv(c, \"\\n\".to_string());\n+}\n+\n+pub fn opt_str(maybestr: &Option<String>) -> &str {\n+    match *maybestr {\n+        None => \"(none)\",\n+        Some(ref s) => s,\n+    }\n+}\n+\n+pub fn opt_str2(maybestr: Option<String>) -> String {\n+    match maybestr {\n+        None => \"(none)\".to_owned(),\n+        Some(s) => s,\n+    }\n+}\n+\n+pub fn run_tests(config: Arc<Config>) {\n+    // If we want to collect rustfix coverage information,\n+    // we first make sure that the coverage file does not exist.\n+    // It will be created later on.\n+    if config.rustfix_coverage {\n+        let mut coverage_file_path = config.build_base.clone();\n+        coverage_file_path.push(\"rustfix_missing_coverage.txt\");\n+        if coverage_file_path.exists() {\n+            if let Err(e) = fs::remove_file(&coverage_file_path) {\n+                panic!(\"Could not delete {} due to {}\", coverage_file_path.display(), e)\n+            }\n+        }\n+    }\n+\n+    // sadly osx needs some file descriptor limits raised for running tests in\n+    // parallel (especially when we have lots and lots of child processes).\n+    // For context, see #8904\n+    unsafe {\n+        raise_fd_limit::raise_fd_limit();\n+    }\n+    // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n+    // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n+    env::set_var(\"__COMPAT_LAYER\", \"RunAsInvoker\");\n+\n+    // Let tests know which target they're running as\n+    env::set_var(\"TARGET\", &config.target);\n+\n+    let opts = test_opts(&config);\n+\n+    let mut configs = Vec::new();\n+    if let Mode::DebugInfo = config.mode {\n+        // Debugging emscripten code doesn't make sense today\n+        if !config.target.contains(\"emscripten\") {\n+            configs.extend(configure_cdb(&config));\n+            configs.extend(configure_gdb(&config));\n+            configs.extend(configure_lldb(&config));\n+        }\n+    } else {\n+        configs.push(config.clone());\n+    };\n+\n+    let mut tests = Vec::new();\n+    for c in configs {\n+        let mut found_paths = BTreeSet::new();\n+        make_tests(c, &mut tests, &mut found_paths);\n+        check_overlapping_tests(&found_paths);\n+    }\n+\n+    tests.sort_by(|a, b| a.desc.name.as_slice().cmp(&b.desc.name.as_slice()));\n+\n+    let res = test::run_tests_console(&opts, tests);\n+    match res {\n+        Ok(true) => {}\n+        Ok(false) => {\n+            // We want to report that the tests failed, but we also want to give\n+            // some indication of just what tests we were running. Especially on\n+            // CI, where there can be cross-compiled tests for a lot of\n+            // architectures, without this critical information it can be quite\n+            // easy to miss which tests failed, and as such fail to reproduce\n+            // the failure locally.\n+\n+            println!(\n+                \"Some tests failed in compiletest suite={}{} mode={} host={} target={}\",\n+                config.suite,\n+                config\n+                    .compare_mode\n+                    .as_ref()\n+                    .map(|c| format!(\" compare_mode={:?}\", c))\n+                    .unwrap_or_default(),\n+                config.mode,\n+                config.host,\n+                config.target\n+            );\n+\n+            std::process::exit(1);\n+        }\n+        Err(e) => {\n+            // We don't know if tests passed or not, but if there was an error\n+            // during testing we don't want to just succeed (we may not have\n+            // tested something), so fail.\n+            //\n+            // This should realistically \"never\" happen, so don't try to make\n+            // this a pretty error message.\n+            panic!(\"I/O failure during tests: {:?}\", e);\n+        }\n+    }\n+}\n+\n+fn configure_cdb(config: &Config) -> Option<Arc<Config>> {\n+    config.cdb.as_ref()?;\n+\n+    Some(Arc::new(Config { debugger: Some(Debugger::Cdb), ..config.clone() }))\n+}\n+\n+fn configure_gdb(config: &Config) -> Option<Arc<Config>> {\n+    config.gdb_version?;\n+\n+    if config.matches_env(\"msvc\") {\n+        return None;\n+    }\n+\n+    if config.remote_test_client.is_some() && !config.target.contains(\"android\") {\n+        println!(\n+            \"WARNING: debuginfo tests are not available when \\\n+             testing with remote\"\n+        );\n+        return None;\n+    }\n+\n+    if config.target.contains(\"android\") {\n+        println!(\n+            \"{} debug-info test uses tcp 5039 port.\\\n+             please reserve it\",\n+            config.target\n+        );\n+\n+        // android debug-info test uses remote debugger so, we test 1 thread\n+        // at once as they're all sharing the same TCP port to communicate\n+        // over.\n+        //\n+        // we should figure out how to lift this restriction! (run them all\n+        // on different ports allocated dynamically).\n+        env::set_var(\"RUST_TEST_THREADS\", \"1\");\n+    }\n+\n+    Some(Arc::new(Config { debugger: Some(Debugger::Gdb), ..config.clone() }))\n+}\n+\n+fn configure_lldb(config: &Config) -> Option<Arc<Config>> {\n+    config.lldb_python_dir.as_ref()?;\n+\n+    if let Some(350) = config.lldb_version {\n+        println!(\n+            \"WARNING: The used version of LLDB (350) has a \\\n+             known issue that breaks debuginfo tests. See \\\n+             issue #32520 for more information. Skipping all \\\n+             LLDB-based tests!\",\n+        );\n+        return None;\n+    }\n+\n+    Some(Arc::new(Config { debugger: Some(Debugger::Lldb), ..config.clone() }))\n+}\n+\n+pub fn test_opts(config: &Config) -> test::TestOpts {\n+    if env::var(\"RUST_TEST_NOCAPTURE\").is_ok() {\n+        eprintln!(\n+            \"WARNING: RUST_TEST_NOCAPTURE is no longer used. \\\n+                   Use the `--nocapture` flag instead.\"\n+        );\n+    }\n+\n+    test::TestOpts {\n+        exclude_should_panic: false,\n+        filters: config.filters.clone(),\n+        filter_exact: config.filter_exact,\n+        run_ignored: if config.run_ignored { test::RunIgnored::Yes } else { test::RunIgnored::No },\n+        format: config.format,\n+        logfile: config.logfile.clone(),\n+        run_tests: true,\n+        bench_benchmarks: true,\n+        nocapture: config.nocapture,\n+        color: config.color,\n+        shuffle: false,\n+        shuffle_seed: None,\n+        test_threads: None,\n+        skip: config.skip.clone(),\n+        list: false,\n+        options: test::Options::new(),\n+        time_options: None,\n+        force_run_in_process: false,\n+        fail_fast: std::env::var_os(\"RUSTC_TEST_FAIL_FAST\").is_some(),\n+    }\n+}\n+\n+pub fn make_tests(\n+    config: Arc<Config>,\n+    tests: &mut Vec<test::TestDescAndFn>,\n+    found_paths: &mut BTreeSet<PathBuf>,\n+) {\n+    debug!(\"making tests from {:?}\", config.src_base.display());\n+    let inputs = common_inputs_stamp(&config);\n+    let modified_tests = modified_tests(&config, &config.src_base).unwrap_or_else(|err| {\n+        panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n+    });\n+\n+    let cache = HeadersCache::load(&config);\n+    let mut poisoned = false;\n+    collect_tests_from_dir(\n+        config.clone(),\n+        &cache,\n+        &config.src_base,\n+        &PathBuf::new(),\n+        &inputs,\n+        tests,\n+        found_paths,\n+        &modified_tests,\n+        &mut poisoned,\n+    )\n+    .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n+\n+    if poisoned {\n+        eprintln!();\n+        panic!(\"there are errors in tests\");\n+    }\n+}\n+\n+/// Returns a stamp constructed from input files common to all test cases.\n+fn common_inputs_stamp(config: &Config) -> Stamp {\n+    let rust_src_dir = config.find_rust_src_root().expect(\"Could not find Rust source root\");\n+\n+    let mut stamp = Stamp::from_path(&config.rustc_path);\n+\n+    // Relevant pretty printer files\n+    let pretty_printer_files = [\n+        \"src/etc/rust_types.py\",\n+        \"src/etc/gdb_load_rust_pretty_printers.py\",\n+        \"src/etc/gdb_lookup.py\",\n+        \"src/etc/gdb_providers.py\",\n+        \"src/etc/lldb_batchmode.py\",\n+        \"src/etc/lldb_lookup.py\",\n+        \"src/etc/lldb_providers.py\",\n+    ];\n+    for file in &pretty_printer_files {\n+        let path = rust_src_dir.join(file);\n+        stamp.add_path(&path);\n+    }\n+\n+    stamp.add_dir(&rust_src_dir.join(\"src/etc/natvis\"));\n+\n+    stamp.add_dir(&config.run_lib_path);\n+\n+    if let Some(ref rustdoc_path) = config.rustdoc_path {\n+        stamp.add_path(&rustdoc_path);\n+        stamp.add_path(&rust_src_dir.join(\"src/etc/htmldocck.py\"));\n+    }\n+\n+    // Compiletest itself.\n+    stamp.add_dir(&rust_src_dir.join(\"src/tools/compiletest/\"));\n+\n+    stamp\n+}\n+\n+fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n+    if !config.only_modified {\n+        return Ok(vec![]);\n+    }\n+    let files =\n+        get_git_modified_files(Some(dir), &vec![\"rs\", \"stderr\", \"fixed\"])?.unwrap_or(vec![]);\n+    // Add new test cases to the list, it will be convenient in daily development.\n+    let untracked_files = get_git_untracked_files(None)?.unwrap_or(vec![]);\n+\n+    let all_paths = [&files[..], &untracked_files[..]].concat();\n+    let full_paths = {\n+        let mut full_paths: Vec<PathBuf> = all_paths\n+            .into_iter()\n+            .map(|f| PathBuf::from(f).with_extension(\"\").with_extension(\"rs\"))\n+            .filter_map(|f| if Path::new(&f).exists() { f.canonicalize().ok() } else { None })\n+            .collect();\n+        full_paths.dedup();\n+        full_paths.sort_unstable();\n+        full_paths\n+    };\n+    Ok(full_paths)\n+}\n+\n+fn collect_tests_from_dir(\n+    config: Arc<Config>,\n+    cache: &HeadersCache,\n+    dir: &Path,\n+    relative_dir_path: &Path,\n+    inputs: &Stamp,\n+    tests: &mut Vec<test::TestDescAndFn>,\n+    found_paths: &mut BTreeSet<PathBuf>,\n+    modified_tests: &Vec<PathBuf>,\n+    poisoned: &mut bool,\n+) -> io::Result<()> {\n+    // Ignore directories that contain a file named `compiletest-ignore-dir`.\n+    if dir.join(\"compiletest-ignore-dir\").exists() {\n+        return Ok(());\n+    }\n+\n+    if config.mode == Mode::RunMake && dir.join(\"Makefile\").exists() {\n+        let paths = TestPaths {\n+            file: dir.to_path_buf(),\n+            relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n+        };\n+        tests.extend(make_test(config, cache, &paths, inputs, poisoned));\n+        return Ok(());\n+    }\n+\n+    // If we find a test foo/bar.rs, we have to build the\n+    // output directory `$build/foo` so we can write\n+    // `$build/foo/bar` into it. We do this *now* in this\n+    // sequential loop because otherwise, if we do it in the\n+    // tests themselves, they race for the privilege of\n+    // creating the directories and sometimes fail randomly.\n+    let build_dir = output_relative_path(&config, relative_dir_path);\n+    fs::create_dir_all(&build_dir).unwrap();\n+\n+    // Add each `.rs` file as a test, and recurse further on any\n+    // subdirectories we find, except for `aux` directories.\n+    for file in fs::read_dir(dir)? {\n+        let file = file?;\n+        let file_path = file.path();\n+        let file_name = file.file_name();\n+        if is_test(&file_name) && (!config.only_modified || modified_tests.contains(&file_path)) {\n+            debug!(\"found test file: {:?}\", file_path.display());\n+            let rel_test_path = relative_dir_path.join(file_path.file_stem().unwrap());\n+            found_paths.insert(rel_test_path);\n+            let paths =\n+                TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n+\n+            tests.extend(make_test(config.clone(), cache, &paths, inputs, poisoned))\n+        } else if file_path.is_dir() {\n+            let relative_file_path = relative_dir_path.join(file.file_name());\n+            if &file_name != \"auxiliary\" {\n+                debug!(\"found directory: {:?}\", file_path.display());\n+                collect_tests_from_dir(\n+                    config.clone(),\n+                    cache,\n+                    &file_path,\n+                    &relative_file_path,\n+                    inputs,\n+                    tests,\n+                    found_paths,\n+                    modified_tests,\n+                    poisoned,\n+                )?;\n+            }\n+        } else {\n+            debug!(\"found other file/directory: {:?}\", file_path.display());\n+        }\n+    }\n+    Ok(())\n+}\n+\n+/// Returns true if `file_name` looks like a proper test file name.\n+pub fn is_test(file_name: &OsString) -> bool {\n+    let file_name = file_name.to_str().unwrap();\n+\n+    if !file_name.ends_with(\".rs\") {\n+        return false;\n+    }\n+\n+    // `.`, `#`, and `~` are common temp-file prefixes.\n+    let invalid_prefixes = &[\".\", \"#\", \"~\"];\n+    !invalid_prefixes.iter().any(|p| file_name.starts_with(p))\n+}\n+\n+fn make_test(\n+    config: Arc<Config>,\n+    cache: &HeadersCache,\n+    testpaths: &TestPaths,\n+    inputs: &Stamp,\n+    poisoned: &mut bool,\n+) -> Vec<test::TestDescAndFn> {\n+    let test_path = if config.mode == Mode::RunMake {\n+        // Parse directives in the Makefile\n+        testpaths.file.join(\"Makefile\")\n+    } else {\n+        PathBuf::from(&testpaths.file)\n+    };\n+    let early_props = EarlyProps::from_file(&config, &test_path);\n+\n+    // Incremental tests are special, they inherently cannot be run in parallel.\n+    // `runtest::run` will be responsible for iterating over revisions.\n+    let revisions = if early_props.revisions.is_empty() || config.mode == Mode::Incremental {\n+        vec![None]\n+    } else {\n+        early_props.revisions.iter().map(Some).collect()\n+    };\n+\n+    revisions\n+        .into_iter()\n+        .map(|revision| {\n+            let src_file =\n+                std::fs::File::open(&test_path).expect(\"open test file to parse ignores\");\n+            let cfg = revision.map(|v| &**v);\n+            let test_name = crate::make_test_name(&config, testpaths, revision);\n+            let mut desc = make_test_description(\n+                &config, cache, test_name, &test_path, src_file, cfg, poisoned,\n+            );\n+            // Ignore tests that already run and are up to date with respect to inputs.\n+            if !config.force_rerun {\n+                desc.ignore |= is_up_to_date(\n+                    &config,\n+                    testpaths,\n+                    &early_props,\n+                    revision.map(|s| s.as_str()),\n+                    inputs,\n+                );\n+            }\n+            test::TestDescAndFn {\n+                desc,\n+                testfn: make_test_closure(config.clone(), testpaths, revision),\n+            }\n+        })\n+        .collect()\n+}\n+\n+fn stamp(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> PathBuf {\n+    output_base_dir(config, testpaths, revision).join(\"stamp\")\n+}\n+\n+fn files_related_to_test(\n+    config: &Config,\n+    testpaths: &TestPaths,\n+    props: &EarlyProps,\n+    revision: Option<&str>,\n+) -> Vec<PathBuf> {\n+    let mut related = vec![];\n+\n+    if testpaths.file.is_dir() {\n+        // run-make tests use their individual directory\n+        for entry in WalkDir::new(&testpaths.file) {\n+            let path = entry.unwrap().into_path();\n+            if path.is_file() {\n+                related.push(path);\n+            }\n+        }\n+    } else {\n+        related.push(testpaths.file.clone());\n+    }\n+\n+    for aux in &props.aux {\n+        let path = testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux);\n+        related.push(path);\n+    }\n+\n+    // UI test files.\n+    for extension in UI_EXTENSIONS {\n+        let path = expected_output_path(testpaths, revision, &config.compare_mode, extension);\n+        related.push(path);\n+    }\n+\n+    related\n+}\n+\n+fn is_up_to_date(\n+    config: &Config,\n+    testpaths: &TestPaths,\n+    props: &EarlyProps,\n+    revision: Option<&str>,\n+    inputs: &Stamp,\n+) -> bool {\n+    let stamp_name = stamp(config, testpaths, revision);\n+    // Check hash.\n+    let contents = match fs::read_to_string(&stamp_name) {\n+        Ok(f) => f,\n+        Err(ref e) if e.kind() == ErrorKind::InvalidData => panic!(\"Can't read stamp contents\"),\n+        Err(_) => return false,\n+    };\n+    let expected_hash = runtest::compute_stamp_hash(config);\n+    if contents != expected_hash {\n+        return false;\n+    }\n+\n+    // Check timestamps.\n+    let mut inputs = inputs.clone();\n+    for path in files_related_to_test(config, testpaths, props, revision) {\n+        inputs.add_path(&path);\n+    }\n+\n+    inputs < Stamp::from_path(&stamp_name)\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+struct Stamp {\n+    time: SystemTime,\n+}\n+\n+impl Stamp {\n+    fn from_path(path: &Path) -> Self {\n+        let mut stamp = Stamp { time: SystemTime::UNIX_EPOCH };\n+        stamp.add_path(path);\n+        stamp\n+    }\n+\n+    fn add_path(&mut self, path: &Path) {\n+        let modified = fs::metadata(path)\n+            .and_then(|metadata| metadata.modified())\n+            .unwrap_or(SystemTime::UNIX_EPOCH);\n+        self.time = self.time.max(modified);\n+    }\n+\n+    fn add_dir(&mut self, path: &Path) {\n+        for entry in WalkDir::new(path) {\n+            let entry = entry.unwrap();\n+            if entry.file_type().is_file() {\n+                let modified = entry\n+                    .metadata()\n+                    .ok()\n+                    .and_then(|metadata| metadata.modified().ok())\n+                    .unwrap_or(SystemTime::UNIX_EPOCH);\n+                self.time = self.time.max(modified);\n+            }\n+        }\n+    }\n+}\n+\n+fn make_test_name(\n+    config: &Config,\n+    testpaths: &TestPaths,\n+    revision: Option<&String>,\n+) -> test::TestName {\n+    // Print the name of the file, relative to the repository root.\n+    // `src_base` looks like `/path/to/rust/tests/ui`\n+    let root_directory = config.src_base.parent().unwrap().parent().unwrap();\n+    let path = testpaths.file.strip_prefix(root_directory).unwrap();\n+    let debugger = match config.debugger {\n+        Some(d) => format!(\"-{}\", d),\n+        None => String::new(),\n+    };\n+    let mode_suffix = match config.compare_mode {\n+        Some(ref mode) => format!(\" ({})\", mode.to_str()),\n+        None => String::new(),\n+    };\n+\n+    test::DynTestName(format!(\n+        \"[{}{}{}] {}{}\",\n+        config.mode,\n+        debugger,\n+        mode_suffix,\n+        path.display(),\n+        revision.map_or(\"\".to_string(), |rev| format!(\"#{}\", rev))\n+    ))\n+}\n+\n+fn make_test_closure(\n+    config: Arc<Config>,\n+    testpaths: &TestPaths,\n+    revision: Option<&String>,\n+) -> test::TestFn {\n+    let config = config.clone();\n+    let testpaths = testpaths.clone();\n+    let revision = revision.cloned();\n+    test::DynTestFn(Box::new(move || {\n+        runtest::run(config, &testpaths, revision.as_deref());\n+        Ok(())\n+    }))\n+}\n+\n+/// Returns `true` if the given target is an Android target for the\n+/// purposes of GDB testing.\n+fn is_android_gdb_target(target: &str) -> bool {\n+    matches!(\n+        &target[..],\n+        \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\"\n+    )\n+}\n+\n+/// Returns `true` if the given target is a MSVC target for the purpouses of CDB testing.\n+fn is_pc_windows_msvc_target(target: &str) -> bool {\n+    target.ends_with(\"-pc-windows-msvc\")\n+}\n+\n+fn find_cdb(target: &str) -> Option<OsString> {\n+    if !(cfg!(windows) && is_pc_windows_msvc_target(target)) {\n+        return None;\n+    }\n+\n+    let pf86 = env::var_os(\"ProgramFiles(x86)\").or_else(|| env::var_os(\"ProgramFiles\"))?;\n+    let cdb_arch = if cfg!(target_arch = \"x86\") {\n+        \"x86\"\n+    } else if cfg!(target_arch = \"x86_64\") {\n+        \"x64\"\n+    } else if cfg!(target_arch = \"aarch64\") {\n+        \"arm64\"\n+    } else if cfg!(target_arch = \"arm\") {\n+        \"arm\"\n+    } else {\n+        return None; // No compatible CDB.exe in the Windows 10 SDK\n+    };\n+\n+    let mut path = PathBuf::new();\n+    path.push(pf86);\n+    path.push(r\"Windows Kits\\10\\Debuggers\"); // We could check 8.1 etc. too?\n+    path.push(cdb_arch);\n+    path.push(r\"cdb.exe\");\n+\n+    if !path.exists() {\n+        return None;\n+    }\n+\n+    Some(path.into_os_string())\n+}\n+\n+/// Returns Path to CDB\n+fn analyze_cdb(cdb: Option<String>, target: &str) -> (Option<OsString>, Option<[u16; 4]>) {\n+    let cdb = cdb.map(OsString::from).or_else(|| find_cdb(target));\n+\n+    let mut version = None;\n+    if let Some(cdb) = cdb.as_ref() {\n+        if let Ok(output) = Command::new(cdb).arg(\"/version\").output() {\n+            if let Some(first_line) = String::from_utf8_lossy(&output.stdout).lines().next() {\n+                version = extract_cdb_version(&first_line);\n+            }\n+        }\n+    }\n+\n+    (cdb, version)\n+}\n+\n+fn extract_cdb_version(full_version_line: &str) -> Option<[u16; 4]> {\n+    // Example full_version_line: \"cdb version 10.0.18362.1\"\n+    let version = full_version_line.rsplit(' ').next()?;\n+    let mut components = version.split('.');\n+    let major: u16 = components.next().unwrap().parse().unwrap();\n+    let minor: u16 = components.next().unwrap().parse().unwrap();\n+    let patch: u16 = components.next().unwrap_or(\"0\").parse().unwrap();\n+    let build: u16 = components.next().unwrap_or(\"0\").parse().unwrap();\n+    Some([major, minor, patch, build])\n+}\n+\n+/// Returns (Path to GDB, GDB Version, GDB has Rust Support)\n+fn analyze_gdb(\n+    gdb: Option<String>,\n+    target: &str,\n+    android_cross_path: &PathBuf,\n+) -> (Option<String>, Option<u32>, bool) {\n+    #[cfg(not(windows))]\n+    const GDB_FALLBACK: &str = \"gdb\";\n+    #[cfg(windows)]\n+    const GDB_FALLBACK: &str = \"gdb.exe\";\n+\n+    const MIN_GDB_WITH_RUST: u32 = 7011010;\n+\n+    let fallback_gdb = || {\n+        if is_android_gdb_target(target) {\n+            let mut gdb_path = match android_cross_path.to_str() {\n+                Some(x) => x.to_owned(),\n+                None => panic!(\"cannot find android cross path\"),\n+            };\n+            gdb_path.push_str(\"/bin/gdb\");\n+            gdb_path\n+        } else {\n+            GDB_FALLBACK.to_owned()\n+        }\n+    };\n+\n+    let gdb = match gdb {\n+        None => fallback_gdb(),\n+        Some(ref s) if s.is_empty() => fallback_gdb(), // may be empty if configure found no gdb\n+        Some(ref s) => s.to_owned(),\n+    };\n+\n+    let mut version_line = None;\n+    if let Ok(output) = Command::new(&gdb).arg(\"--version\").output() {\n+        if let Some(first_line) = String::from_utf8_lossy(&output.stdout).lines().next() {\n+            version_line = Some(first_line.to_string());\n+        }\n+    }\n+\n+    let version = match version_line {\n+        Some(line) => extract_gdb_version(&line),\n+        None => return (None, None, false),\n+    };\n+\n+    let gdb_native_rust = version.map_or(false, |v| v >= MIN_GDB_WITH_RUST);\n+\n+    (Some(gdb), version, gdb_native_rust)\n+}\n+\n+fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n+    let full_version_line = full_version_line.trim();\n+\n+    // GDB versions look like this: \"major.minor.patch?.yyyymmdd?\", with both\n+    // of the ? sections being optional\n+\n+    // We will parse up to 3 digits for each component, ignoring the date\n+\n+    // We skip text in parentheses.  This avoids accidentally parsing\n+    // the openSUSE version, which looks like:\n+    //  GNU gdb (GDB; openSUSE Leap 15.0) 8.1\n+    // This particular form is documented in the GNU coding standards:\n+    // https://www.gnu.org/prep/standards/html_node/_002d_002dversion.html#g_t_002d_002dversion\n+\n+    let unbracketed_part = full_version_line.split('[').next().unwrap();\n+    let mut splits = unbracketed_part.trim_end().rsplit(' ');\n+    let version_string = splits.next().unwrap();\n+\n+    let mut splits = version_string.split('.');\n+    let major = splits.next().unwrap();\n+    let minor = splits.next().unwrap();\n+    let patch = splits.next();\n+\n+    let major: u32 = major.parse().unwrap();\n+    let (minor, patch): (u32, u32) = match minor.find(not_a_digit) {\n+        None => {\n+            let minor = minor.parse().unwrap();\n+            let patch: u32 = match patch {\n+                Some(patch) => match patch.find(not_a_digit) {\n+                    None => patch.parse().unwrap(),\n+                    Some(idx) if idx > 3 => 0,\n+                    Some(idx) => patch[..idx].parse().unwrap(),\n+                },\n+                None => 0,\n+            };\n+            (minor, patch)\n+        }\n+        // There is no patch version after minor-date (e.g. \"4-2012\").\n+        Some(idx) => {\n+            let minor = minor[..idx].parse().unwrap();\n+            (minor, 0)\n+        }\n+    };\n+\n+    Some(((major * 1000) + minor) * 1000 + patch)\n+}\n+\n+/// Returns (LLDB version, LLDB is rust-enabled)\n+fn extract_lldb_version(full_version_line: &str) -> Option<(u32, bool)> {\n+    // Extract the major LLDB version from the given version string.\n+    // LLDB version strings are different for Apple and non-Apple platforms.\n+    // The Apple variant looks like this:\n+    //\n+    // LLDB-179.5 (older versions)\n+    // lldb-300.2.51 (new versions)\n+    //\n+    // We are only interested in the major version number, so this function\n+    // will return `Some(179)` and `Some(300)` respectively.\n+    //\n+    // Upstream versions look like:\n+    // lldb version 6.0.1\n+    //\n+    // There doesn't seem to be a way to correlate the Apple version\n+    // with the upstream version, and since the tests were originally\n+    // written against Apple versions, we make a fake Apple version by\n+    // multiplying the first number by 100.  This is a hack, but\n+    // normally fine because the only non-Apple version we test is\n+    // rust-enabled.\n+\n+    let full_version_line = full_version_line.trim();\n+\n+    if let Some(apple_ver) =\n+        full_version_line.strip_prefix(\"LLDB-\").or_else(|| full_version_line.strip_prefix(\"lldb-\"))\n+    {\n+        if let Some(idx) = apple_ver.find(not_a_digit) {\n+            let version: u32 = apple_ver[..idx].parse().unwrap();\n+            return Some((version, full_version_line.contains(\"rust-enabled\")));\n+        }\n+    } else if let Some(lldb_ver) = full_version_line.strip_prefix(\"lldb version \") {\n+        if let Some(idx) = lldb_ver.find(not_a_digit) {\n+            let version: u32 = lldb_ver[..idx].parse().ok()?;\n+            return Some((version * 100, full_version_line.contains(\"rust-enabled\")));\n+        }\n+    }\n+    None\n+}\n+\n+fn not_a_digit(c: char) -> bool {\n+    !c.is_digit(10)\n+}\n+\n+fn check_overlapping_tests(found_paths: &BTreeSet<PathBuf>) {\n+    let mut collisions = Vec::new();\n+    for path in found_paths {\n+        for ancestor in path.ancestors().skip(1) {\n+            if found_paths.contains(ancestor) {\n+                collisions.push((path, ancestor.clone()));\n+            }\n+        }\n+    }\n+    if !collisions.is_empty() {\n+        let collisions: String = collisions\n+            .into_iter()\n+            .map(|(path, check_parent)| format!(\"test {path:?} clashes with {check_parent:?}\\n\"))\n+            .collect();\n+        panic!(\n+            \"{collisions}\\n\\\n+            Tests cannot have overlapping names. Make sure they use unique prefixes.\"\n+        );\n+    }\n+}"}, {"sha": "34d48559c378da12748c63c7e0421b7bfd3d82cd", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 1135, "changes": 1137, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -1,45 +1,6 @@\n-#![crate_name = \"compiletest\"]\n-// The `test` crate is the only unstable feature\n-// allowed here, just to share similar code.\n-#![feature(test)]\n+use std::{env, sync::Arc};\n \n-extern crate test;\n-\n-use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n-use crate::common::{Config, Debugger, Mode, PassMode, TestPaths};\n-use crate::util::logv;\n-use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n-use core::panic;\n-use getopts::Options;\n-use lazycell::AtomicLazyCell;\n-use std::collections::BTreeSet;\n-use std::ffi::OsString;\n-use std::fs;\n-use std::io::{self, ErrorKind};\n-use std::path::{Path, PathBuf};\n-use std::process::{Command, Stdio};\n-use std::time::SystemTime;\n-use std::{env, vec};\n-use test::ColorConfig;\n-use tracing::*;\n-use walkdir::WalkDir;\n-\n-use self::header::{make_test_description, EarlyProps};\n-use crate::header::HeadersCache;\n-use std::sync::Arc;\n-\n-#[cfg(test)]\n-mod tests;\n-\n-pub mod common;\n-pub mod compute_diff;\n-pub mod errors;\n-pub mod header;\n-mod json;\n-mod raise_fd_limit;\n-mod read2;\n-pub mod runtest;\n-pub mod util;\n+use compiletest::{common::Mode, log_config, parse_config, run_tests};\n \n fn main() {\n     tracing_subscriber::fmt::init();\n@@ -57,1097 +18,3 @@ fn main() {\n     log_config(&config);\n     run_tests(config);\n }\n-\n-pub fn parse_config(args: Vec<String>) -> Config {\n-    let mut opts = Options::new();\n-    opts.reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\")\n-        .reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\")\n-        .reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\")\n-        .optopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\")\n-        .optopt(\"\", \"rust-demangler-path\", \"path to rust-demangler to use in tests\", \"PATH\")\n-        .reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\")\n-        .optopt(\"\", \"jsondocck-path\", \"path to jsondocck to use for doc tests\", \"PATH\")\n-        .optopt(\"\", \"jsondoclint-path\", \"path to jsondoclint to use for doc tests\", \"PATH\")\n-        .optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\")\n-        .optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\")\n-        .optopt(\"\", \"run-clang-based-tests-with\", \"path to Clang executable\", \"PATH\")\n-        .optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\")\n-        .reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\")\n-        .reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\")\n-        .reqopt(\"\", \"sysroot-base\", \"directory containing the compiler sysroot\", \"PATH\")\n-        .reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\")\n-        .reqopt(\n-            \"\",\n-            \"mode\",\n-            \"which sort of compile tests to run\",\n-            \"run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n-            | rustdoc-json | codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n-        )\n-        .reqopt(\n-            \"\",\n-            \"suite\",\n-            \"which suite of compile tests to run. used for nicer error reporting.\",\n-            \"SUITE\",\n-        )\n-        .optopt(\n-            \"\",\n-            \"pass\",\n-            \"force {check,build,run}-pass tests to this mode.\",\n-            \"check | build | run\",\n-        )\n-        .optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\")\n-        .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n-        .optmulti(\"\", \"skip\", \"skip tests matching SUBSTRING. Can be passed multiple times\", \"SUBSTRING\")\n-        .optflag(\"\", \"exact\", \"filters match exactly\")\n-        .optopt(\n-            \"\",\n-            \"runtool\",\n-            \"supervisor program to run tests under \\\n-             (eg. emulator, valgrind)\",\n-            \"PROGRAM\",\n-        )\n-        .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n-        .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n-        .optflag(\"\", \"optimize-tests\", \"run tests with optimizations enabled\")\n-        .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n-        .optflag(\n-            \"\",\n-            \"bless\",\n-            \"overwrite stderr/stdout files instead of complaining about a mismatch\",\n-        )\n-        .optflag(\"\", \"quiet\", \"print one character per test instead of one line\")\n-        .optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\")\n-        .optflag(\"\", \"json\", \"emit json output instead of plaintext output\")\n-        .optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\")\n-        .optopt(\"\", \"target\", \"the target to build for\", \"TARGET\")\n-        .optopt(\"\", \"host\", \"the host to build for\", \"HOST\")\n-        .optopt(\"\", \"cdb\", \"path to CDB to use for CDB debuginfo tests\", \"PATH\")\n-        .optopt(\"\", \"gdb\", \"path to GDB to use for GDB debuginfo tests\", \"PATH\")\n-        .optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\")\n-        .optopt(\"\", \"llvm-version\", \"the version of LLVM used\", \"VERSION STRING\")\n-        .optflag(\"\", \"system-llvm\", \"is LLVM the system LLVM\")\n-        .optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\")\n-        .optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\")\n-        .optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\")\n-        .optopt(\"\", \"lldb-python-dir\", \"directory containing LLDB's python module\", \"PATH\")\n-        .reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\")\n-        .reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\")\n-        .reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\")\n-        .reqopt(\"\", \"cxxflags\", \"flags for the CXX compiler\", \"FLAGS\")\n-        .optopt(\"\", \"ar\", \"path to an archiver\", \"PATH\")\n-        .optopt(\"\", \"target-linker\", \"path to a linker for the target\", \"PATH\")\n-        .optopt(\"\", \"host-linker\", \"path to a linker for the host\", \"PATH\")\n-        .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n-        .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n-        .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n-        .optopt(\"\", \"npm\", \"the name of npm\", \"PATH\")\n-        .optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\")\n-        .optopt(\n-            \"\",\n-            \"compare-mode\",\n-            \"mode describing what file the actual ui output will be compared to\",\n-            \"COMPARE MODE\",\n-        )\n-        .optflag(\n-            \"\",\n-            \"rustfix-coverage\",\n-            \"enable this to generate a Rustfix coverage file, which is saved in \\\n-            `./<build_base>/rustfix_missing_coverage.txt`\",\n-        )\n-        .optflag(\"\", \"force-rerun\", \"rerun tests even if the inputs are unchanged\")\n-        .optflag(\"\", \"only-modified\", \"only run tests that result been modified\")\n-        .optflag(\"\", \"nocapture\", \"\")\n-        .optflag(\"h\", \"help\", \"show this message\")\n-        .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\")\n-        .optflag(\"\", \"git-hash\", \"run tests which rely on commit version being compiled into the binaries\")\n-        .optopt(\"\", \"edition\", \"default Rust edition\", \"EDITION\");\n-\n-    let (argv0, args_) = args.split_first().unwrap();\n-    if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n-        let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n-        println!(\"{}\", opts.usage(&message));\n-        println!();\n-        panic!()\n-    }\n-\n-    let matches = &match opts.parse(args_) {\n-        Ok(m) => m,\n-        Err(f) => panic!(\"{:?}\", f),\n-    };\n-\n-    if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n-        let message = format!(\"Usage: {} [OPTIONS]  [TESTNAME...]\", argv0);\n-        println!(\"{}\", opts.usage(&message));\n-        println!();\n-        panic!()\n-    }\n-\n-    fn opt_path(m: &getopts::Matches, nm: &str) -> PathBuf {\n-        match m.opt_str(nm) {\n-            Some(s) => PathBuf::from(&s),\n-            None => panic!(\"no option (=path) found for {}\", nm),\n-        }\n-    }\n-\n-    fn make_absolute(path: PathBuf) -> PathBuf {\n-        if path.is_relative() { env::current_dir().unwrap().join(path) } else { path }\n-    }\n-\n-    let target = opt_str2(matches.opt_str(\"target\"));\n-    let android_cross_path = opt_path(matches, \"android-cross-path\");\n-    let (cdb, cdb_version) = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n-    let (gdb, gdb_version, gdb_native_rust) =\n-        analyze_gdb(matches.opt_str(\"gdb\"), &target, &android_cross_path);\n-    let (lldb_version, lldb_native_rust) = matches\n-        .opt_str(\"lldb-version\")\n-        .as_deref()\n-        .and_then(extract_lldb_version)\n-        .map(|(v, b)| (Some(v), b))\n-        .unwrap_or((None, false));\n-    let color = match matches.opt_str(\"color\").as_deref() {\n-        Some(\"auto\") | None => ColorConfig::AutoColor,\n-        Some(\"always\") => ColorConfig::AlwaysColor,\n-        Some(\"never\") => ColorConfig::NeverColor,\n-        Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n-    };\n-    let llvm_version =\n-        matches.opt_str(\"llvm-version\").as_deref().and_then(header::extract_llvm_version).or_else(\n-            || header::extract_llvm_version_from_binary(&matches.opt_str(\"llvm-filecheck\")?),\n-        );\n-\n-    let src_base = opt_path(matches, \"src-base\");\n-    let run_ignored = matches.opt_present(\"ignored\");\n-    let mode = matches.opt_str(\"mode\").unwrap().parse().expect(\"invalid mode\");\n-    let has_tidy = if mode == Mode::Rustdoc {\n-        Command::new(\"tidy\")\n-            .arg(\"--version\")\n-            .stdout(Stdio::null())\n-            .status()\n-            .map_or(false, |status| status.success())\n-    } else {\n-        // Avoid spawning an external command when we know tidy won't be used.\n-        false\n-    };\n-    Config {\n-        bless: matches.opt_present(\"bless\"),\n-        compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n-        run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n-        rustc_path: opt_path(matches, \"rustc-path\"),\n-        rustdoc_path: matches.opt_str(\"rustdoc-path\").map(PathBuf::from),\n-        rust_demangler_path: matches.opt_str(\"rust-demangler-path\").map(PathBuf::from),\n-        python: matches.opt_str(\"python\").unwrap(),\n-        jsondocck_path: matches.opt_str(\"jsondocck-path\"),\n-        jsondoclint_path: matches.opt_str(\"jsondoclint-path\"),\n-        valgrind_path: matches.opt_str(\"valgrind-path\"),\n-        force_valgrind: matches.opt_present(\"force-valgrind\"),\n-        run_clang_based_tests_with: matches.opt_str(\"run-clang-based-tests-with\"),\n-        llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(PathBuf::from),\n-        llvm_bin_dir: matches.opt_str(\"llvm-bin-dir\").map(PathBuf::from),\n-        src_base,\n-        build_base: opt_path(matches, \"build-base\"),\n-        sysroot_base: opt_path(matches, \"sysroot-base\"),\n-        stage_id: matches.opt_str(\"stage-id\").unwrap(),\n-        mode,\n-        suite: matches.opt_str(\"suite\").unwrap(),\n-        debugger: None,\n-        run_ignored,\n-        filters: matches.free.clone(),\n-        skip: matches.opt_strs(\"skip\"),\n-        filter_exact: matches.opt_present(\"exact\"),\n-        force_pass_mode: matches.opt_str(\"pass\").map(|mode| {\n-            mode.parse::<PassMode>()\n-                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n-        }),\n-        run: matches.opt_str(\"run\").and_then(|mode| match mode.as_str() {\n-            \"auto\" => None,\n-            \"always\" => Some(true),\n-            \"never\" => Some(false),\n-            _ => panic!(\"unknown `--run` option `{}` given\", mode),\n-        }),\n-        logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n-        runtool: matches.opt_str(\"runtool\"),\n-        host_rustcflags: matches.opt_strs(\"host-rustcflags\"),\n-        target_rustcflags: matches.opt_strs(\"target-rustcflags\"),\n-        optimize_tests: matches.opt_present(\"optimize-tests\"),\n-        target,\n-        host: opt_str2(matches.opt_str(\"host\")),\n-        cdb,\n-        cdb_version,\n-        gdb,\n-        gdb_version,\n-        gdb_native_rust,\n-        lldb_version,\n-        lldb_native_rust,\n-        llvm_version,\n-        system_llvm: matches.opt_present(\"system-llvm\"),\n-        android_cross_path,\n-        adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n-        adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n-        adb_device_status: opt_str2(matches.opt_str(\"target\")).contains(\"android\")\n-            && \"(none)\" != opt_str2(matches.opt_str(\"adb-test-dir\"))\n-            && !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n-        lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n-        verbose: matches.opt_present(\"verbose\"),\n-        format: match (matches.opt_present(\"quiet\"), matches.opt_present(\"json\")) {\n-            (true, true) => panic!(\"--quiet and --json are incompatible\"),\n-            (true, false) => test::OutputFormat::Terse,\n-            (false, true) => test::OutputFormat::Json,\n-            (false, false) => test::OutputFormat::Pretty,\n-        },\n-        only_modified: matches.opt_present(\"only-modified\"),\n-        color,\n-        remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n-        compare_mode: matches\n-            .opt_str(\"compare-mode\")\n-            .map(|s| s.parse().expect(\"invalid --compare-mode provided\")),\n-        rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n-        has_tidy,\n-        channel: matches.opt_str(\"channel\").unwrap(),\n-        git_hash: matches.opt_present(\"git-hash\"),\n-        edition: matches.opt_str(\"edition\"),\n-\n-        cc: matches.opt_str(\"cc\").unwrap(),\n-        cxx: matches.opt_str(\"cxx\").unwrap(),\n-        cflags: matches.opt_str(\"cflags\").unwrap(),\n-        cxxflags: matches.opt_str(\"cxxflags\").unwrap(),\n-        ar: matches.opt_str(\"ar\").unwrap_or_else(|| String::from(\"ar\")),\n-        target_linker: matches.opt_str(\"target-linker\"),\n-        host_linker: matches.opt_str(\"host-linker\"),\n-        llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n-        nodejs: matches.opt_str(\"nodejs\"),\n-        npm: matches.opt_str(\"npm\"),\n-\n-        force_rerun: matches.opt_present(\"force-rerun\"),\n-\n-        target_cfgs: AtomicLazyCell::new(),\n-\n-        nocapture: matches.opt_present(\"nocapture\"),\n-    }\n-}\n-\n-pub fn log_config(config: &Config) {\n-    let c = config;\n-    logv(c, \"configuration:\".to_string());\n-    logv(c, format!(\"compile_lib_path: {:?}\", config.compile_lib_path));\n-    logv(c, format!(\"run_lib_path: {:?}\", config.run_lib_path));\n-    logv(c, format!(\"rustc_path: {:?}\", config.rustc_path.display()));\n-    logv(c, format!(\"rustdoc_path: {:?}\", config.rustdoc_path));\n-    logv(c, format!(\"rust_demangler_path: {:?}\", config.rust_demangler_path));\n-    logv(c, format!(\"src_base: {:?}\", config.src_base.display()));\n-    logv(c, format!(\"build_base: {:?}\", config.build_base.display()));\n-    logv(c, format!(\"stage_id: {}\", config.stage_id));\n-    logv(c, format!(\"mode: {}\", config.mode));\n-    logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n-    logv(c, format!(\"filters: {:?}\", config.filters));\n-    logv(c, format!(\"skip: {:?}\", config.skip));\n-    logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n-    logv(\n-        c,\n-        format!(\"force_pass_mode: {}\", opt_str(&config.force_pass_mode.map(|m| format!(\"{}\", m))),),\n-    );\n-    logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n-    logv(c, format!(\"host-rustcflags: {:?}\", config.host_rustcflags));\n-    logv(c, format!(\"target-rustcflags: {:?}\", config.target_rustcflags));\n-    logv(c, format!(\"target: {}\", config.target));\n-    logv(c, format!(\"host: {}\", config.host));\n-    logv(c, format!(\"android-cross-path: {:?}\", config.android_cross_path.display()));\n-    logv(c, format!(\"adb_path: {:?}\", config.adb_path));\n-    logv(c, format!(\"adb_test_dir: {:?}\", config.adb_test_dir));\n-    logv(c, format!(\"adb_device_status: {}\", config.adb_device_status));\n-    logv(c, format!(\"ar: {}\", config.ar));\n-    logv(c, format!(\"target-linker: {:?}\", config.target_linker));\n-    logv(c, format!(\"host-linker: {:?}\", config.host_linker));\n-    logv(c, format!(\"verbose: {}\", config.verbose));\n-    logv(c, format!(\"format: {:?}\", config.format));\n-    logv(c, \"\\n\".to_string());\n-}\n-\n-pub fn opt_str(maybestr: &Option<String>) -> &str {\n-    match *maybestr {\n-        None => \"(none)\",\n-        Some(ref s) => s,\n-    }\n-}\n-\n-pub fn opt_str2(maybestr: Option<String>) -> String {\n-    match maybestr {\n-        None => \"(none)\".to_owned(),\n-        Some(s) => s,\n-    }\n-}\n-\n-pub fn run_tests(config: Arc<Config>) {\n-    // If we want to collect rustfix coverage information,\n-    // we first make sure that the coverage file does not exist.\n-    // It will be created later on.\n-    if config.rustfix_coverage {\n-        let mut coverage_file_path = config.build_base.clone();\n-        coverage_file_path.push(\"rustfix_missing_coverage.txt\");\n-        if coverage_file_path.exists() {\n-            if let Err(e) = fs::remove_file(&coverage_file_path) {\n-                panic!(\"Could not delete {} due to {}\", coverage_file_path.display(), e)\n-            }\n-        }\n-    }\n-\n-    // sadly osx needs some file descriptor limits raised for running tests in\n-    // parallel (especially when we have lots and lots of child processes).\n-    // For context, see #8904\n-    unsafe {\n-        raise_fd_limit::raise_fd_limit();\n-    }\n-    // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n-    // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n-    env::set_var(\"__COMPAT_LAYER\", \"RunAsInvoker\");\n-\n-    // Let tests know which target they're running as\n-    env::set_var(\"TARGET\", &config.target);\n-\n-    let opts = test_opts(&config);\n-\n-    let mut configs = Vec::new();\n-    if let Mode::DebugInfo = config.mode {\n-        // Debugging emscripten code doesn't make sense today\n-        if !config.target.contains(\"emscripten\") {\n-            configs.extend(configure_cdb(&config));\n-            configs.extend(configure_gdb(&config));\n-            configs.extend(configure_lldb(&config));\n-        }\n-    } else {\n-        configs.push(config.clone());\n-    };\n-\n-    let mut tests = Vec::new();\n-    for c in configs {\n-        let mut found_paths = BTreeSet::new();\n-        make_tests(c, &mut tests, &mut found_paths);\n-        check_overlapping_tests(&found_paths);\n-    }\n-\n-    tests.sort_by(|a, b| a.desc.name.as_slice().cmp(&b.desc.name.as_slice()));\n-\n-    let res = test::run_tests_console(&opts, tests);\n-    match res {\n-        Ok(true) => {}\n-        Ok(false) => {\n-            // We want to report that the tests failed, but we also want to give\n-            // some indication of just what tests we were running. Especially on\n-            // CI, where there can be cross-compiled tests for a lot of\n-            // architectures, without this critical information it can be quite\n-            // easy to miss which tests failed, and as such fail to reproduce\n-            // the failure locally.\n-\n-            println!(\n-                \"Some tests failed in compiletest suite={}{} mode={} host={} target={}\",\n-                config.suite,\n-                config\n-                    .compare_mode\n-                    .as_ref()\n-                    .map(|c| format!(\" compare_mode={:?}\", c))\n-                    .unwrap_or_default(),\n-                config.mode,\n-                config.host,\n-                config.target\n-            );\n-\n-            std::process::exit(1);\n-        }\n-        Err(e) => {\n-            // We don't know if tests passed or not, but if there was an error\n-            // during testing we don't want to just succeed (we may not have\n-            // tested something), so fail.\n-            //\n-            // This should realistically \"never\" happen, so don't try to make\n-            // this a pretty error message.\n-            panic!(\"I/O failure during tests: {:?}\", e);\n-        }\n-    }\n-}\n-\n-fn configure_cdb(config: &Config) -> Option<Arc<Config>> {\n-    config.cdb.as_ref()?;\n-\n-    Some(Arc::new(Config { debugger: Some(Debugger::Cdb), ..config.clone() }))\n-}\n-\n-fn configure_gdb(config: &Config) -> Option<Arc<Config>> {\n-    config.gdb_version?;\n-\n-    if config.matches_env(\"msvc\") {\n-        return None;\n-    }\n-\n-    if config.remote_test_client.is_some() && !config.target.contains(\"android\") {\n-        println!(\n-            \"WARNING: debuginfo tests are not available when \\\n-             testing with remote\"\n-        );\n-        return None;\n-    }\n-\n-    if config.target.contains(\"android\") {\n-        println!(\n-            \"{} debug-info test uses tcp 5039 port.\\\n-             please reserve it\",\n-            config.target\n-        );\n-\n-        // android debug-info test uses remote debugger so, we test 1 thread\n-        // at once as they're all sharing the same TCP port to communicate\n-        // over.\n-        //\n-        // we should figure out how to lift this restriction! (run them all\n-        // on different ports allocated dynamically).\n-        env::set_var(\"RUST_TEST_THREADS\", \"1\");\n-    }\n-\n-    Some(Arc::new(Config { debugger: Some(Debugger::Gdb), ..config.clone() }))\n-}\n-\n-fn configure_lldb(config: &Config) -> Option<Arc<Config>> {\n-    config.lldb_python_dir.as_ref()?;\n-\n-    if let Some(350) = config.lldb_version {\n-        println!(\n-            \"WARNING: The used version of LLDB (350) has a \\\n-             known issue that breaks debuginfo tests. See \\\n-             issue #32520 for more information. Skipping all \\\n-             LLDB-based tests!\",\n-        );\n-        return None;\n-    }\n-\n-    Some(Arc::new(Config { debugger: Some(Debugger::Lldb), ..config.clone() }))\n-}\n-\n-pub fn test_opts(config: &Config) -> test::TestOpts {\n-    if env::var(\"RUST_TEST_NOCAPTURE\").is_ok() {\n-        eprintln!(\n-            \"WARNING: RUST_TEST_NOCAPTURE is no longer used. \\\n-                   Use the `--nocapture` flag instead.\"\n-        );\n-    }\n-\n-    test::TestOpts {\n-        exclude_should_panic: false,\n-        filters: config.filters.clone(),\n-        filter_exact: config.filter_exact,\n-        run_ignored: if config.run_ignored { test::RunIgnored::Yes } else { test::RunIgnored::No },\n-        format: config.format,\n-        logfile: config.logfile.clone(),\n-        run_tests: true,\n-        bench_benchmarks: true,\n-        nocapture: config.nocapture,\n-        color: config.color,\n-        shuffle: false,\n-        shuffle_seed: None,\n-        test_threads: None,\n-        skip: config.skip.clone(),\n-        list: false,\n-        options: test::Options::new(),\n-        time_options: None,\n-        force_run_in_process: false,\n-        fail_fast: std::env::var_os(\"RUSTC_TEST_FAIL_FAST\").is_some(),\n-    }\n-}\n-\n-pub fn make_tests(\n-    config: Arc<Config>,\n-    tests: &mut Vec<test::TestDescAndFn>,\n-    found_paths: &mut BTreeSet<PathBuf>,\n-) {\n-    debug!(\"making tests from {:?}\", config.src_base.display());\n-    let inputs = common_inputs_stamp(&config);\n-    let modified_tests = modified_tests(&config, &config.src_base).unwrap_or_else(|err| {\n-        panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n-    });\n-\n-    let cache = HeadersCache::load(&config);\n-    let mut poisoned = false;\n-    collect_tests_from_dir(\n-        config.clone(),\n-        &cache,\n-        &config.src_base,\n-        &PathBuf::new(),\n-        &inputs,\n-        tests,\n-        found_paths,\n-        &modified_tests,\n-        &mut poisoned,\n-    )\n-    .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n-\n-    if poisoned {\n-        eprintln!();\n-        panic!(\"there are errors in tests\");\n-    }\n-}\n-\n-/// Returns a stamp constructed from input files common to all test cases.\n-fn common_inputs_stamp(config: &Config) -> Stamp {\n-    let rust_src_dir = config.find_rust_src_root().expect(\"Could not find Rust source root\");\n-\n-    let mut stamp = Stamp::from_path(&config.rustc_path);\n-\n-    // Relevant pretty printer files\n-    let pretty_printer_files = [\n-        \"src/etc/rust_types.py\",\n-        \"src/etc/gdb_load_rust_pretty_printers.py\",\n-        \"src/etc/gdb_lookup.py\",\n-        \"src/etc/gdb_providers.py\",\n-        \"src/etc/lldb_batchmode.py\",\n-        \"src/etc/lldb_lookup.py\",\n-        \"src/etc/lldb_providers.py\",\n-    ];\n-    for file in &pretty_printer_files {\n-        let path = rust_src_dir.join(file);\n-        stamp.add_path(&path);\n-    }\n-\n-    stamp.add_dir(&rust_src_dir.join(\"src/etc/natvis\"));\n-\n-    stamp.add_dir(&config.run_lib_path);\n-\n-    if let Some(ref rustdoc_path) = config.rustdoc_path {\n-        stamp.add_path(&rustdoc_path);\n-        stamp.add_path(&rust_src_dir.join(\"src/etc/htmldocck.py\"));\n-    }\n-\n-    // Compiletest itself.\n-    stamp.add_dir(&rust_src_dir.join(\"src/tools/compiletest/\"));\n-\n-    stamp\n-}\n-\n-fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n-    if !config.only_modified {\n-        return Ok(vec![]);\n-    }\n-    let files =\n-        get_git_modified_files(Some(dir), &vec![\"rs\", \"stderr\", \"fixed\"])?.unwrap_or(vec![]);\n-    // Add new test cases to the list, it will be convenient in daily development.\n-    let untracked_files = get_git_untracked_files(None)?.unwrap_or(vec![]);\n-\n-    let all_paths = [&files[..], &untracked_files[..]].concat();\n-    let full_paths = {\n-        let mut full_paths: Vec<PathBuf> = all_paths\n-            .into_iter()\n-            .map(|f| PathBuf::from(f).with_extension(\"\").with_extension(\"rs\"))\n-            .filter_map(|f| if Path::new(&f).exists() { f.canonicalize().ok() } else { None })\n-            .collect();\n-        full_paths.dedup();\n-        full_paths.sort_unstable();\n-        full_paths\n-    };\n-    Ok(full_paths)\n-}\n-\n-fn collect_tests_from_dir(\n-    config: Arc<Config>,\n-    cache: &HeadersCache,\n-    dir: &Path,\n-    relative_dir_path: &Path,\n-    inputs: &Stamp,\n-    tests: &mut Vec<test::TestDescAndFn>,\n-    found_paths: &mut BTreeSet<PathBuf>,\n-    modified_tests: &Vec<PathBuf>,\n-    poisoned: &mut bool,\n-) -> io::Result<()> {\n-    // Ignore directories that contain a file named `compiletest-ignore-dir`.\n-    if dir.join(\"compiletest-ignore-dir\").exists() {\n-        return Ok(());\n-    }\n-\n-    if config.mode == Mode::RunMake && dir.join(\"Makefile\").exists() {\n-        let paths = TestPaths {\n-            file: dir.to_path_buf(),\n-            relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n-        };\n-        tests.extend(make_test(config, cache, &paths, inputs, poisoned));\n-        return Ok(());\n-    }\n-\n-    // If we find a test foo/bar.rs, we have to build the\n-    // output directory `$build/foo` so we can write\n-    // `$build/foo/bar` into it. We do this *now* in this\n-    // sequential loop because otherwise, if we do it in the\n-    // tests themselves, they race for the privilege of\n-    // creating the directories and sometimes fail randomly.\n-    let build_dir = output_relative_path(&config, relative_dir_path);\n-    fs::create_dir_all(&build_dir).unwrap();\n-\n-    // Add each `.rs` file as a test, and recurse further on any\n-    // subdirectories we find, except for `aux` directories.\n-    for file in fs::read_dir(dir)? {\n-        let file = file?;\n-        let file_path = file.path();\n-        let file_name = file.file_name();\n-        if is_test(&file_name) && (!config.only_modified || modified_tests.contains(&file_path)) {\n-            debug!(\"found test file: {:?}\", file_path.display());\n-            let rel_test_path = relative_dir_path.join(file_path.file_stem().unwrap());\n-            found_paths.insert(rel_test_path);\n-            let paths =\n-                TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n-\n-            tests.extend(make_test(config.clone(), cache, &paths, inputs, poisoned))\n-        } else if file_path.is_dir() {\n-            let relative_file_path = relative_dir_path.join(file.file_name());\n-            if &file_name != \"auxiliary\" {\n-                debug!(\"found directory: {:?}\", file_path.display());\n-                collect_tests_from_dir(\n-                    config.clone(),\n-                    cache,\n-                    &file_path,\n-                    &relative_file_path,\n-                    inputs,\n-                    tests,\n-                    found_paths,\n-                    modified_tests,\n-                    poisoned,\n-                )?;\n-            }\n-        } else {\n-            debug!(\"found other file/directory: {:?}\", file_path.display());\n-        }\n-    }\n-    Ok(())\n-}\n-\n-/// Returns true if `file_name` looks like a proper test file name.\n-pub fn is_test(file_name: &OsString) -> bool {\n-    let file_name = file_name.to_str().unwrap();\n-\n-    if !file_name.ends_with(\".rs\") {\n-        return false;\n-    }\n-\n-    // `.`, `#`, and `~` are common temp-file prefixes.\n-    let invalid_prefixes = &[\".\", \"#\", \"~\"];\n-    !invalid_prefixes.iter().any(|p| file_name.starts_with(p))\n-}\n-\n-fn make_test(\n-    config: Arc<Config>,\n-    cache: &HeadersCache,\n-    testpaths: &TestPaths,\n-    inputs: &Stamp,\n-    poisoned: &mut bool,\n-) -> Vec<test::TestDescAndFn> {\n-    let test_path = if config.mode == Mode::RunMake {\n-        // Parse directives in the Makefile\n-        testpaths.file.join(\"Makefile\")\n-    } else {\n-        PathBuf::from(&testpaths.file)\n-    };\n-    let early_props = EarlyProps::from_file(&config, &test_path);\n-\n-    // Incremental tests are special, they inherently cannot be run in parallel.\n-    // `runtest::run` will be responsible for iterating over revisions.\n-    let revisions = if early_props.revisions.is_empty() || config.mode == Mode::Incremental {\n-        vec![None]\n-    } else {\n-        early_props.revisions.iter().map(Some).collect()\n-    };\n-\n-    revisions\n-        .into_iter()\n-        .map(|revision| {\n-            let src_file =\n-                std::fs::File::open(&test_path).expect(\"open test file to parse ignores\");\n-            let cfg = revision.map(|v| &**v);\n-            let test_name = crate::make_test_name(&config, testpaths, revision);\n-            let mut desc = make_test_description(\n-                &config, cache, test_name, &test_path, src_file, cfg, poisoned,\n-            );\n-            // Ignore tests that already run and are up to date with respect to inputs.\n-            if !config.force_rerun {\n-                desc.ignore |= is_up_to_date(\n-                    &config,\n-                    testpaths,\n-                    &early_props,\n-                    revision.map(|s| s.as_str()),\n-                    inputs,\n-                );\n-            }\n-            test::TestDescAndFn {\n-                desc,\n-                testfn: make_test_closure(config.clone(), testpaths, revision),\n-            }\n-        })\n-        .collect()\n-}\n-\n-fn stamp(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> PathBuf {\n-    output_base_dir(config, testpaths, revision).join(\"stamp\")\n-}\n-\n-fn files_related_to_test(\n-    config: &Config,\n-    testpaths: &TestPaths,\n-    props: &EarlyProps,\n-    revision: Option<&str>,\n-) -> Vec<PathBuf> {\n-    let mut related = vec![];\n-\n-    if testpaths.file.is_dir() {\n-        // run-make tests use their individual directory\n-        for entry in WalkDir::new(&testpaths.file) {\n-            let path = entry.unwrap().into_path();\n-            if path.is_file() {\n-                related.push(path);\n-            }\n-        }\n-    } else {\n-        related.push(testpaths.file.clone());\n-    }\n-\n-    for aux in &props.aux {\n-        let path = testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux);\n-        related.push(path);\n-    }\n-\n-    // UI test files.\n-    for extension in UI_EXTENSIONS {\n-        let path = expected_output_path(testpaths, revision, &config.compare_mode, extension);\n-        related.push(path);\n-    }\n-\n-    related\n-}\n-\n-fn is_up_to_date(\n-    config: &Config,\n-    testpaths: &TestPaths,\n-    props: &EarlyProps,\n-    revision: Option<&str>,\n-    inputs: &Stamp,\n-) -> bool {\n-    let stamp_name = stamp(config, testpaths, revision);\n-    // Check hash.\n-    let contents = match fs::read_to_string(&stamp_name) {\n-        Ok(f) => f,\n-        Err(ref e) if e.kind() == ErrorKind::InvalidData => panic!(\"Can't read stamp contents\"),\n-        Err(_) => return false,\n-    };\n-    let expected_hash = runtest::compute_stamp_hash(config);\n-    if contents != expected_hash {\n-        return false;\n-    }\n-\n-    // Check timestamps.\n-    let mut inputs = inputs.clone();\n-    for path in files_related_to_test(config, testpaths, props, revision) {\n-        inputs.add_path(&path);\n-    }\n-\n-    inputs < Stamp::from_path(&stamp_name)\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n-struct Stamp {\n-    time: SystemTime,\n-}\n-\n-impl Stamp {\n-    fn from_path(path: &Path) -> Self {\n-        let mut stamp = Stamp { time: SystemTime::UNIX_EPOCH };\n-        stamp.add_path(path);\n-        stamp\n-    }\n-\n-    fn add_path(&mut self, path: &Path) {\n-        let modified = fs::metadata(path)\n-            .and_then(|metadata| metadata.modified())\n-            .unwrap_or(SystemTime::UNIX_EPOCH);\n-        self.time = self.time.max(modified);\n-    }\n-\n-    fn add_dir(&mut self, path: &Path) {\n-        for entry in WalkDir::new(path) {\n-            let entry = entry.unwrap();\n-            if entry.file_type().is_file() {\n-                let modified = entry\n-                    .metadata()\n-                    .ok()\n-                    .and_then(|metadata| metadata.modified().ok())\n-                    .unwrap_or(SystemTime::UNIX_EPOCH);\n-                self.time = self.time.max(modified);\n-            }\n-        }\n-    }\n-}\n-\n-fn make_test_name(\n-    config: &Config,\n-    testpaths: &TestPaths,\n-    revision: Option<&String>,\n-) -> test::TestName {\n-    // Print the name of the file, relative to the repository root.\n-    // `src_base` looks like `/path/to/rust/tests/ui`\n-    let root_directory = config.src_base.parent().unwrap().parent().unwrap();\n-    let path = testpaths.file.strip_prefix(root_directory).unwrap();\n-    let debugger = match config.debugger {\n-        Some(d) => format!(\"-{}\", d),\n-        None => String::new(),\n-    };\n-    let mode_suffix = match config.compare_mode {\n-        Some(ref mode) => format!(\" ({})\", mode.to_str()),\n-        None => String::new(),\n-    };\n-\n-    test::DynTestName(format!(\n-        \"[{}{}{}] {}{}\",\n-        config.mode,\n-        debugger,\n-        mode_suffix,\n-        path.display(),\n-        revision.map_or(\"\".to_string(), |rev| format!(\"#{}\", rev))\n-    ))\n-}\n-\n-fn make_test_closure(\n-    config: Arc<Config>,\n-    testpaths: &TestPaths,\n-    revision: Option<&String>,\n-) -> test::TestFn {\n-    let config = config.clone();\n-    let testpaths = testpaths.clone();\n-    let revision = revision.cloned();\n-    test::DynTestFn(Box::new(move || {\n-        runtest::run(config, &testpaths, revision.as_deref());\n-        Ok(())\n-    }))\n-}\n-\n-/// Returns `true` if the given target is an Android target for the\n-/// purposes of GDB testing.\n-fn is_android_gdb_target(target: &str) -> bool {\n-    matches!(\n-        &target[..],\n-        \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\"\n-    )\n-}\n-\n-/// Returns `true` if the given target is a MSVC target for the purpouses of CDB testing.\n-fn is_pc_windows_msvc_target(target: &str) -> bool {\n-    target.ends_with(\"-pc-windows-msvc\")\n-}\n-\n-fn find_cdb(target: &str) -> Option<OsString> {\n-    if !(cfg!(windows) && is_pc_windows_msvc_target(target)) {\n-        return None;\n-    }\n-\n-    let pf86 = env::var_os(\"ProgramFiles(x86)\").or_else(|| env::var_os(\"ProgramFiles\"))?;\n-    let cdb_arch = if cfg!(target_arch = \"x86\") {\n-        \"x86\"\n-    } else if cfg!(target_arch = \"x86_64\") {\n-        \"x64\"\n-    } else if cfg!(target_arch = \"aarch64\") {\n-        \"arm64\"\n-    } else if cfg!(target_arch = \"arm\") {\n-        \"arm\"\n-    } else {\n-        return None; // No compatible CDB.exe in the Windows 10 SDK\n-    };\n-\n-    let mut path = PathBuf::new();\n-    path.push(pf86);\n-    path.push(r\"Windows Kits\\10\\Debuggers\"); // We could check 8.1 etc. too?\n-    path.push(cdb_arch);\n-    path.push(r\"cdb.exe\");\n-\n-    if !path.exists() {\n-        return None;\n-    }\n-\n-    Some(path.into_os_string())\n-}\n-\n-/// Returns Path to CDB\n-fn analyze_cdb(cdb: Option<String>, target: &str) -> (Option<OsString>, Option<[u16; 4]>) {\n-    let cdb = cdb.map(OsString::from).or_else(|| find_cdb(target));\n-\n-    let mut version = None;\n-    if let Some(cdb) = cdb.as_ref() {\n-        if let Ok(output) = Command::new(cdb).arg(\"/version\").output() {\n-            if let Some(first_line) = String::from_utf8_lossy(&output.stdout).lines().next() {\n-                version = extract_cdb_version(&first_line);\n-            }\n-        }\n-    }\n-\n-    (cdb, version)\n-}\n-\n-fn extract_cdb_version(full_version_line: &str) -> Option<[u16; 4]> {\n-    // Example full_version_line: \"cdb version 10.0.18362.1\"\n-    let version = full_version_line.rsplit(' ').next()?;\n-    let mut components = version.split('.');\n-    let major: u16 = components.next().unwrap().parse().unwrap();\n-    let minor: u16 = components.next().unwrap().parse().unwrap();\n-    let patch: u16 = components.next().unwrap_or(\"0\").parse().unwrap();\n-    let build: u16 = components.next().unwrap_or(\"0\").parse().unwrap();\n-    Some([major, minor, patch, build])\n-}\n-\n-/// Returns (Path to GDB, GDB Version, GDB has Rust Support)\n-fn analyze_gdb(\n-    gdb: Option<String>,\n-    target: &str,\n-    android_cross_path: &PathBuf,\n-) -> (Option<String>, Option<u32>, bool) {\n-    #[cfg(not(windows))]\n-    const GDB_FALLBACK: &str = \"gdb\";\n-    #[cfg(windows)]\n-    const GDB_FALLBACK: &str = \"gdb.exe\";\n-\n-    const MIN_GDB_WITH_RUST: u32 = 7011010;\n-\n-    let fallback_gdb = || {\n-        if is_android_gdb_target(target) {\n-            let mut gdb_path = match android_cross_path.to_str() {\n-                Some(x) => x.to_owned(),\n-                None => panic!(\"cannot find android cross path\"),\n-            };\n-            gdb_path.push_str(\"/bin/gdb\");\n-            gdb_path\n-        } else {\n-            GDB_FALLBACK.to_owned()\n-        }\n-    };\n-\n-    let gdb = match gdb {\n-        None => fallback_gdb(),\n-        Some(ref s) if s.is_empty() => fallback_gdb(), // may be empty if configure found no gdb\n-        Some(ref s) => s.to_owned(),\n-    };\n-\n-    let mut version_line = None;\n-    if let Ok(output) = Command::new(&gdb).arg(\"--version\").output() {\n-        if let Some(first_line) = String::from_utf8_lossy(&output.stdout).lines().next() {\n-            version_line = Some(first_line.to_string());\n-        }\n-    }\n-\n-    let version = match version_line {\n-        Some(line) => extract_gdb_version(&line),\n-        None => return (None, None, false),\n-    };\n-\n-    let gdb_native_rust = version.map_or(false, |v| v >= MIN_GDB_WITH_RUST);\n-\n-    (Some(gdb), version, gdb_native_rust)\n-}\n-\n-fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n-    let full_version_line = full_version_line.trim();\n-\n-    // GDB versions look like this: \"major.minor.patch?.yyyymmdd?\", with both\n-    // of the ? sections being optional\n-\n-    // We will parse up to 3 digits for each component, ignoring the date\n-\n-    // We skip text in parentheses.  This avoids accidentally parsing\n-    // the openSUSE version, which looks like:\n-    //  GNU gdb (GDB; openSUSE Leap 15.0) 8.1\n-    // This particular form is documented in the GNU coding standards:\n-    // https://www.gnu.org/prep/standards/html_node/_002d_002dversion.html#g_t_002d_002dversion\n-\n-    let unbracketed_part = full_version_line.split('[').next().unwrap();\n-    let mut splits = unbracketed_part.trim_end().rsplit(' ');\n-    let version_string = splits.next().unwrap();\n-\n-    let mut splits = version_string.split('.');\n-    let major = splits.next().unwrap();\n-    let minor = splits.next().unwrap();\n-    let patch = splits.next();\n-\n-    let major: u32 = major.parse().unwrap();\n-    let (minor, patch): (u32, u32) = match minor.find(not_a_digit) {\n-        None => {\n-            let minor = minor.parse().unwrap();\n-            let patch: u32 = match patch {\n-                Some(patch) => match patch.find(not_a_digit) {\n-                    None => patch.parse().unwrap(),\n-                    Some(idx) if idx > 3 => 0,\n-                    Some(idx) => patch[..idx].parse().unwrap(),\n-                },\n-                None => 0,\n-            };\n-            (minor, patch)\n-        }\n-        // There is no patch version after minor-date (e.g. \"4-2012\").\n-        Some(idx) => {\n-            let minor = minor[..idx].parse().unwrap();\n-            (minor, 0)\n-        }\n-    };\n-\n-    Some(((major * 1000) + minor) * 1000 + patch)\n-}\n-\n-/// Returns (LLDB version, LLDB is rust-enabled)\n-fn extract_lldb_version(full_version_line: &str) -> Option<(u32, bool)> {\n-    // Extract the major LLDB version from the given version string.\n-    // LLDB version strings are different for Apple and non-Apple platforms.\n-    // The Apple variant looks like this:\n-    //\n-    // LLDB-179.5 (older versions)\n-    // lldb-300.2.51 (new versions)\n-    //\n-    // We are only interested in the major version number, so this function\n-    // will return `Some(179)` and `Some(300)` respectively.\n-    //\n-    // Upstream versions look like:\n-    // lldb version 6.0.1\n-    //\n-    // There doesn't seem to be a way to correlate the Apple version\n-    // with the upstream version, and since the tests were originally\n-    // written against Apple versions, we make a fake Apple version by\n-    // multiplying the first number by 100.  This is a hack, but\n-    // normally fine because the only non-Apple version we test is\n-    // rust-enabled.\n-\n-    let full_version_line = full_version_line.trim();\n-\n-    if let Some(apple_ver) =\n-        full_version_line.strip_prefix(\"LLDB-\").or_else(|| full_version_line.strip_prefix(\"lldb-\"))\n-    {\n-        if let Some(idx) = apple_ver.find(not_a_digit) {\n-            let version: u32 = apple_ver[..idx].parse().unwrap();\n-            return Some((version, full_version_line.contains(\"rust-enabled\")));\n-        }\n-    } else if let Some(lldb_ver) = full_version_line.strip_prefix(\"lldb version \") {\n-        if let Some(idx) = lldb_ver.find(not_a_digit) {\n-            let version: u32 = lldb_ver[..idx].parse().ok()?;\n-            return Some((version * 100, full_version_line.contains(\"rust-enabled\")));\n-        }\n-    }\n-    None\n-}\n-\n-fn not_a_digit(c: char) -> bool {\n-    !c.is_digit(10)\n-}\n-\n-fn check_overlapping_tests(found_paths: &BTreeSet<PathBuf>) {\n-    let mut collisions = Vec::new();\n-    for path in found_paths {\n-        for ancestor in path.ancestors().skip(1) {\n-            if found_paths.contains(ancestor) {\n-                collisions.push((path, ancestor.clone()));\n-            }\n-        }\n-    }\n-    if !collisions.is_empty() {\n-        let collisions: String = collisions\n-            .into_iter()\n-            .map(|(path, check_parent)| format!(\"test {path:?} clashes with {check_parent:?}\\n\"))\n-            .collect();\n-        panic!(\n-            \"{collisions}\\n\\\n-            Tests cannot have overlapping names. Make sure they use unique prefixes.\"\n-        );\n-    }\n-}"}, {"sha": "f0c5b367117e1996f767ea5cbff3292e456b618f", "filename": "src/tools/rustdoc-gui-test/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"rustdoc-gui-test\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+compiletest = { path = \"../compiletest\" }\n+getopts = \"0.2\"\n+walkdir = \"2\""}, {"sha": "dc4c56a5e7abd67f6d718ff2df9a7efa0cb9cd5c", "filename": "src/tools/rustdoc-gui-test/src/config.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fconfig.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -0,0 +1,62 @@\n+use getopts::Options;\n+use std::{env, path::PathBuf};\n+\n+pub(crate) struct Config {\n+    pub(crate) nodejs: PathBuf,\n+    pub(crate) npm: PathBuf,\n+    pub(crate) rust_src: PathBuf,\n+    pub(crate) out_dir: PathBuf,\n+    pub(crate) initial_cargo: PathBuf,\n+    pub(crate) jobs: String,\n+    pub(crate) test_args: Vec<PathBuf>,\n+    pub(crate) goml_files: Vec<PathBuf>,\n+    pub(crate) rustc: PathBuf,\n+    pub(crate) rustdoc: PathBuf,\n+    pub(crate) verbose: bool,\n+}\n+\n+impl Config {\n+    pub(crate) fn from_args(args: Vec<String>) -> Self {\n+        let mut opts = Options::new();\n+        opts.reqopt(\"\", \"nodejs\", \"absolute path of nodejs\", \"PATH\")\n+            .reqopt(\"\", \"npm\", \"absolute path of npm\", \"PATH\")\n+            .reqopt(\"\", \"out-dir\", \"output path of doc compilation\", \"PATH\")\n+            .reqopt(\"\", \"rust-src\", \"root source of the rust source\", \"PATH\")\n+            .reqopt(\n+                \"\",\n+                \"initial-cargo\",\n+                \"path to cargo to use for compiling tests/rustdoc-gui/src/*\",\n+                \"PATH\",\n+            )\n+            .reqopt(\"\", \"jobs\", \"jobs arg of browser-ui-test\", \"JOBS\")\n+            .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n+            .optmulti(\"\", \"test-arg\", \"args for browser-ui-test\", \"FLAGS\")\n+            .optmulti(\"\", \"goml-file\", \"goml files for testing with browser-ui-test\", \"LIST\");\n+\n+        let (argv0, args_) = args.split_first().unwrap();\n+        if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n+            let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n+            println!(\"{}\", opts.usage(&message));\n+            std::process::exit(1);\n+        }\n+\n+        let matches = &match opts.parse(args_) {\n+            Ok(m) => m,\n+            Err(f) => panic!(\"{:?}\", f),\n+        };\n+\n+        Self {\n+            nodejs: matches.opt_str(\"nodejs\").map(PathBuf::from).expect(\"nodejs isn't available\"),\n+            npm: matches.opt_str(\"npm\").map(PathBuf::from).expect(\"npm isn't available\"),\n+            rust_src: matches.opt_str(\"rust-src\").map(PathBuf::from).unwrap(),\n+            out_dir: matches.opt_str(\"out-dir\").map(PathBuf::from).unwrap(),\n+            initial_cargo: matches.opt_str(\"initial-cargo\").map(PathBuf::from).unwrap(),\n+            jobs: matches.opt_str(\"jobs\").unwrap(),\n+            goml_files: matches.opt_strs(\"goml-file\").iter().map(PathBuf::from).collect(),\n+            test_args: matches.opt_strs(\"test-arg\").iter().map(PathBuf::from).collect(),\n+            rustc: env::var(\"RUSTC\").map(PathBuf::from).unwrap(),\n+            rustdoc: env::var(\"RUSTDOC\").map(PathBuf::from).unwrap(),\n+            verbose: matches.opt_present(\"verbose\"),\n+        }\n+    }\n+}"}, {"sha": "8dc18dfaea2d6db5213fb99473ff0d6daed45e1b", "filename": "src/tools/rustdoc-gui-test/src/main.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -0,0 +1,162 @@\n+use compiletest::header::TestProps;\n+use config::Config;\n+use std::path::{Path, PathBuf};\n+use std::process::Command;\n+use std::sync::Arc;\n+use std::{env, fs};\n+\n+mod config;\n+\n+fn get_browser_ui_test_version_inner(npm: &Path, global: bool) -> Option<String> {\n+    let mut command = Command::new(&npm);\n+    command.arg(\"list\").arg(\"--parseable\").arg(\"--long\").arg(\"--depth=0\");\n+    if global {\n+        command.arg(\"--global\");\n+    }\n+    let lines = command\n+        .output()\n+        .map(|output| String::from_utf8_lossy(&output.stdout).into_owned())\n+        .unwrap_or(String::new());\n+    lines\n+        .lines()\n+        .find_map(|l| l.split(':').nth(1)?.strip_prefix(\"browser-ui-test@\"))\n+        .map(|v| v.to_owned())\n+}\n+\n+fn get_browser_ui_test_version(npm: &Path) -> Option<String> {\n+    get_browser_ui_test_version_inner(npm, false)\n+        .or_else(|| get_browser_ui_test_version_inner(npm, true))\n+}\n+\n+fn compare_browser_ui_test_version(installed_version: &str, src: &Path) {\n+    match fs::read_to_string(\n+        src.join(\"src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version\"),\n+    ) {\n+        Ok(v) => {\n+            if v.trim() != installed_version {\n+                eprintln!(\n+                    \"\u26a0\ufe0f Installed version of browser-ui-test (`{}`) is different than the \\\n+                     one used in the CI (`{}`)\",\n+                    installed_version, v\n+                );\n+                eprintln!(\n+                    \"You can install this version using `npm update browser-ui-test` or by using \\\n+                     `npm install browser-ui-test@{}`\",\n+                    v,\n+                );\n+            }\n+        }\n+        Err(e) => eprintln!(\"Couldn't find the CI browser-ui-test version: {:?}\", e),\n+    }\n+}\n+\n+fn find_librs<P: AsRef<Path>>(path: P) -> Option<PathBuf> {\n+    for entry in walkdir::WalkDir::new(path) {\n+        let entry = entry.ok()?;\n+        if entry.file_type().is_file() && entry.file_name() == \"lib.rs\" {\n+            return Some(entry.path().to_path_buf());\n+        }\n+    }\n+    None\n+}\n+\n+// FIXME: move `bootstrap::util::try_run` into `build_helper` crate\n+// and use that one instead of creating this function.\n+fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n+    let status = match cmd.status() {\n+        Ok(status) => status,\n+        Err(e) => panic!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e),\n+    };\n+    if !status.success() && print_cmd_on_fail {\n+        println!(\n+            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n\\n\",\n+            cmd, status\n+        );\n+    }\n+    status.success()\n+}\n+\n+fn main() {\n+    let config = Arc::new(Config::from_args(env::args().collect()));\n+\n+    // The goal here is to check if the necessary packages are installed, and if not, we\n+    // panic.\n+    match get_browser_ui_test_version(&config.npm) {\n+        Some(version) => {\n+            // We also check the version currently used in CI and emit a warning if it's not the\n+            // same one.\n+            compare_browser_ui_test_version(&version, &config.rust_src);\n+        }\n+        None => {\n+            eprintln!(\n+                r#\"\n+error: rustdoc-gui test suite cannot be run because npm `browser-ui-test` dependency is missing.\n+\n+If you want to install the `browser-ui-test` dependency, run `npm install browser-ui-test`\n+\"#,\n+            );\n+\n+            panic!(\"Cannot run rustdoc-gui tests\");\n+        }\n+    }\n+\n+    let src_path = config.rust_src.join(\"tests/rustdoc-gui/src\");\n+    for entry in src_path.read_dir().expect(\"read_dir call failed\") {\n+        if let Ok(entry) = entry {\n+            let path = entry.path();\n+\n+            if !path.is_dir() {\n+                continue;\n+            }\n+\n+            let mut cargo = Command::new(&config.initial_cargo);\n+            cargo\n+                .arg(\"doc\")\n+                .arg(\"--target-dir\")\n+                .arg(&config.out_dir)\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\")\n+                .env(\"RUSTDOC\", &config.rustdoc)\n+                .env(\"RUSTC\", &config.rustc)\n+                .current_dir(path);\n+\n+            if let Some(librs) = find_librs(entry.path()) {\n+                let compiletest_c = compiletest::common::Config {\n+                    edition: None,\n+                    mode: compiletest::common::Mode::Rustdoc,\n+                    ..Default::default()\n+                };\n+\n+                let test_props = TestProps::from_file(&librs, None, &compiletest_c);\n+\n+                if !test_props.compile_flags.is_empty() {\n+                    cargo.env(\"RUSTDOCFLAGS\", test_props.compile_flags.join(\" \"));\n+                }\n+\n+                if let Some(flags) = &test_props.run_flags {\n+                    cargo.arg(flags);\n+                }\n+            }\n+\n+            try_run(&mut cargo, config.verbose);\n+        }\n+    }\n+\n+    let mut command = Command::new(&config.nodejs);\n+    command\n+        .arg(config.rust_src.join(\"src/tools/rustdoc-gui/tester.js\"))\n+        .arg(\"--jobs\")\n+        .arg(&config.jobs)\n+        .arg(\"--doc-folder\")\n+        .arg(config.out_dir.join(\"doc\"))\n+        .arg(\"--tests-folder\")\n+        .arg(config.rust_src.join(\"tests/rustdoc-gui\"));\n+\n+    for file in &config.goml_files {\n+        command.arg(\"--file\").arg(file);\n+    }\n+\n+    command.args(&config.test_args);\n+\n+    try_run(&mut command, config.verbose);\n+}"}, {"sha": "67f1497e70ce64d8c115ceca32abd7eecebcda4c", "filename": "tests/rustdoc-gui/source-anchor-scroll.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsource-anchor-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsource-anchor-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsource-anchor-scroll.goml?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -8,13 +8,13 @@ set-window-size: (600, 800)\n assert-property: (\"html\", {\"scrollTop\": \"0\"})\n \n click: '//a[text() = \"barbar\"]'\n-assert-property: (\"html\", {\"scrollTop\": \"125\"})\n+assert-property: (\"html\", {\"scrollTop\": \"149\"})\n click: '//a[text() = \"bar\"]'\n-assert-property: (\"html\", {\"scrollTop\": \"156\"})\n+assert-property: (\"html\", {\"scrollTop\": \"180\"})\n click: '//a[text() = \"sub_fn\"]'\n-assert-property: (\"html\", {\"scrollTop\": \"53\"})\n+assert-property: (\"html\", {\"scrollTop\": \"77\"})\n \n // We now check that clicking on lines doesn't change the scroll\n // Extra information: the \"sub_fn\" function header is on line 1.\n click: '//*[@id=\"6\"]'\n-assert-property: (\"html\", {\"scrollTop\": \"53\"})\n+assert-property: (\"html\", {\"scrollTop\": \"77\"})"}, {"sha": "2308c0932fd0e5329275a017f58f781669d50f46", "filename": "tests/rustdoc-gui/src/extend_css/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Fextend_css%2Flib.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -1 +1,2 @@\n+// compile-flags: --extend-css extra.css\n //! <div class=\"extend\">text in red</div>"}, {"sha": "6fed79aedb890e91457a4f2b8a0128570eb98e5b", "filename": "tests/rustdoc-gui/src/link_to_definition/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Flink_to_definition%2Flib.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zunstable-options --generate-link-to-definition\n pub fn sub_fn() {\n     barbar();\n }"}, {"sha": "6666587ad541a08ee87696ea60dd7f6eab0e12be", "filename": "tests/rustdoc-gui/src/scrape_examples/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/tests%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fsrc%2Flib.rs?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -1,3 +1,4 @@\n+// run-flags:-Zrustdoc-scrape-examples\n /// # Examples\n ///\n /// ```"}, {"sha": "c160c83cc9590fd863b00ce124869a153d627dca", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc95f969802788f6082772c50f7f3d20d5bf88/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc95f969802788f6082772c50f7f3d20d5bf88/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=dbfc95f969802788f6082772c50f7f3d20d5bf88", "patch": "@@ -190,6 +190,7 @@ trigger_files = [\n     \"src/stage0.json\",\n     \"src/tools/compiletest\",\n     \"src/tools/tidy\",\n+    \"src/tools/rustdoc-gui-test\",\n ]\n \n [autolabel.\"T-infra\"]\n@@ -640,3 +641,4 @@ style-team = [\n \"/src/tools/rustdoc-themes\" =                [\"rustdoc\"]\n \"/src/tools/tidy\" =                          [\"bootstrap\"]\n \"/src/tools/x\" =                             [\"bootstrap\"]\n+\"/src/tools/rustdoc-gui-test\" =              [\"bootstrap\", \"@ozkanonur\"]"}]}