{"sha": "e87fcf979fc5ff36386c642d779f2c071cf30fe8", "node_id": "C_kwDOAAsO6NoAKGU4N2ZjZjk3OWZjNWZmMzYzODZjNjQyZDc3OWYyYzA3MWNmMzBmZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-03T18:47:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-03T18:47:27Z"}, "message": "Rollup merge of #111097 - oli-obk:\ud83d\udeb2_layout, r=compiler-errors\n\nAvoid ICEing miri on layout query cycles\n\nMiri has special logic for catching panics during interpretation. Raising a fatal error in rustc uses unwinding to abort compilation. Thus miri ends up catching that fatal error and thinks it saw an ICE. While we should probably change that to ignore `Fatal` payloads, I think it's also neat to continue compilation after a layout query cycle \ud83d\ude06\n\nQuery cycles now (in addition to reporting an error just like before), return `Err(Cycle)` instead of raising a fatal error. This allows the interpreter to wind down via the regular error paths.\n\nr? `@RalfJung` for a first round, feel free to reroll for the compiler team once the miri side looks good", "tree": {"sha": "10c28bb928677239f9ed65d2ef54785fe39bc51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c28bb928677239f9ed65d2ef54785fe39bc51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e87fcf979fc5ff36386c642d779f2c071cf30fe8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUqw/CRBK7hj4Ov3rIwAAj8wIAFgqt9C0hHCvaEP0dojFYM6E\nkNdkkaYYrmND2IOQXzKJgR8YJaZr6jytaYZhHO73DcIOXNmvXsQxyT2CLjZDliV6\nb6CLrKEboBEF5SEO4ocjQkI+KPpAX7IkKtZ6XLtAHKxLG70XHN5Vd0C9Buh2RCOY\nqTHZ3bg3Rzw3BEBSjiFwRHMPcz+0+1uGIXBq5NNUJZt3g9QQPo4EW8aWivoFOHK0\nXWrhagSZORoR06Tl9UkRYiRFfwwz/0TJMzRTliuBJk4yfS9gNWuqH7lmJgmyZG9G\nPh0ySdAOSoVt80T5DyBstXuNoJuSAH6wXrm1C5eMYQ6VcciU7WBHcxYXcDpNh8M=\n=kJGd\n-----END PGP SIGNATURE-----\n", "payload": "tree 10c28bb928677239f9ed65d2ef54785fe39bc51e\nparent 887dffc44795f30c32e8776a9a1850f82da81942\nparent 7bc6d598f94744751a249ed18885592a6f077bcd\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683139647 +0530\ncommitter GitHub <noreply@github.com> 1683139647 +0530\n\nRollup merge of #111097 - oli-obk:\ud83d\udeb2_layout, r=compiler-errors\n\nAvoid ICEing miri on layout query cycles\n\nMiri has special logic for catching panics during interpretation. Raising a fatal error in rustc uses unwinding to abort compilation. Thus miri ends up catching that fatal error and thinks it saw an ICE. While we should probably change that to ignore `Fatal` payloads, I think it's also neat to continue compilation after a layout query cycle \ud83d\ude06\n\nQuery cycles now (in addition to reporting an error just like before), return `Err(Cycle)` instead of raising a fatal error. This allows the interpreter to wind down via the regular error paths.\n\nr? `@RalfJung` for a first round, feel free to reroll for the compiler team once the miri side looks good\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e87fcf979fc5ff36386c642d779f2c071cf30fe8", "html_url": "https://github.com/rust-lang/rust/commit/e87fcf979fc5ff36386c642d779f2c071cf30fe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e87fcf979fc5ff36386c642d779f2c071cf30fe8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887dffc44795f30c32e8776a9a1850f82da81942", "url": "https://api.github.com/repos/rust-lang/rust/commits/887dffc44795f30c32e8776a9a1850f82da81942", "html_url": "https://github.com/rust-lang/rust/commit/887dffc44795f30c32e8776a9a1850f82da81942"}, {"sha": "7bc6d598f94744751a249ed18885592a6f077bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc6d598f94744751a249ed18885592a6f077bcd", "html_url": "https://github.com/rust-lang/rust/commit/7bc6d598f94744751a249ed18885592a6f077bcd"}], "stats": {"total": 163, "additions": 119, "deletions": 44}, "files": [{"sha": "c6bbf2ef0cdb5bfdf986e7849e4e496149d60ba6", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87fcf979fc5ff36386c642d779f2c071cf30fe8/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e87fcf979fc5ff36386c642d779f2c071cf30fe8/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=e87fcf979fc5ff36386c642d779f2c071cf30fe8", "patch": "@@ -32,6 +32,9 @@ middle_values_too_big =\n middle_cannot_be_normalized =\n     unable to determine layout for `{$ty}` because `{$failure_ty}` cannot be normalized\n \n+middle_cycle =\n+    a cycle occurred during layout computation\n+\n middle_strict_coherence_needs_negative_coherence =\n     to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n     .label = due to this attribute"}, {"sha": "f2a2e67cf82dcbda5304da72f36f586540cddf13", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e87fcf979fc5ff36386c642d779f2c071cf30fe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87fcf979fc5ff36386c642d779f2c071cf30fe8/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e87fcf979fc5ff36386c642d779f2c071cf30fe8", "patch": "@@ -210,6 +210,7 @@ pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n+    Cycle,\n }\n \n impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n@@ -230,6 +231,9 @@ impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n                 diag.set_arg(\"failure_ty\", e.get_type_for_failure());\n                 diag.set_primary_message(fluent::middle_cannot_be_normalized);\n             }\n+            LayoutError::Cycle => {\n+                diag.set_primary_message(fluent::middle_cycle);\n+            }\n         }\n         diag\n     }\n@@ -250,6 +254,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n                 t,\n                 e.get_type_for_failure()\n             ),\n+            LayoutError::Cycle => write!(f, \"a cycle occurred during layout computation\"),\n         }\n     }\n }"}, {"sha": "c62c33d4dfc1894633378deca54b7aecb65adeff", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e87fcf979fc5ff36386c642d779f2c071cf30fe8/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87fcf979fc5ff36386c642d779f2c071cf30fe8/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=e87fcf979fc5ff36386c642d779f2c071cf30fe8", "patch": "@@ -106,6 +106,12 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::F\n     }\n }\n \n+impl<'tcx, T> Value<TyCtxt<'tcx>, DepKind> for Result<T, ty::layout::LayoutError<'_>> {\n+    fn from_cycle_error(_tcx: TyCtxt<'tcx>, _cycle: &[QueryInfo<DepKind>]) -> Self {\n+        Err(ty::layout::LayoutError::Cycle)\n+    }\n+}\n+\n // item_and_field_ids should form a cycle where each field contains the\n // type in the next element in the list\n pub fn recursive_type_error("}, {"sha": "20e09a548058ddcf536ef07e6bf35f116d2f39eb", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e87fcf979fc5ff36386c642d779f2c071cf30fe8/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/e87fcf979fc5ff36386c642d779f2c071cf30fe8/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=e87fcf979fc5ff36386c642d779f2c071cf30fe8", "patch": "@@ -1,53 +1,58 @@\n-<h2 id=\"layout\" class=\"small-section-header\">  {# #}\n+<h2 id=\"layout\" class=\"small-section-header\"> {# #}\n     Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n </h2> {# #}\n <div class=\"docblock\"> {# #}\n     {% match type_layout_size %}\n-        {% when Ok(type_layout_size) %}\n-            <div class=\"warning\"> {# #}\n-                <p> {# #}\n-                    <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n-                    unstable</strong> and may even differ between compilations. {#+ #}\n-                    The only exception is types with certain <code>repr(...)</code> {#+ #}\n-                    attributes. Please see the Rust Reference\u2019s {#+ #}\n-                    <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n-                    chapter for details on type layout guarantees. {# #}\n-                </p> {# #}\n-            </div> {# #}\n-            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n-            {% if !variants.is_empty() %}\n-                <p> {# #}\n-                    <strong>Size for each variant:</strong> {# #}\n-                </p> {# #}\n-                <ul> {# #}\n-                    {% for (name, layout_size) in variants %}\n-                        <li> {# #}\n-                            <code>{{ name }}</code>: {#+ #}\n-                            {{ layout_size|safe }}\n-                        </li> {# #}\n-                    {% endfor %}\n-                </ul> {# #}\n-            {% endif %}\n-        {# This kind of layout error can occur with valid code, e.g. if you try to\n-           get the layout of a generic type such as `Vec<T>`. #}\n+    {% when Ok(type_layout_size) %}\n+    <div class=\"warning\"> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n+                unstable</strong> and may even differ between compilations. {#+ #}\n+            The only exception is types with certain <code>repr(...)</code> {#+ #}\n+            attributes. Please see the Rust Reference\u2019s {#+ #}\n+            <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n+            chapter for details on type layout guarantees. {# #}\n+        </p> {# #}\n+    </div> {# #}\n+    <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+    {% if !variants.is_empty() %}\n+    <p> {# #}\n+        <strong>Size for each variant:</strong> {# #}\n+    </p> {# #}\n+    <ul> {# #}\n+        {% for (name, layout_size) in variants %}\n+        <li> {# #}\n+            <code>{{ name }}</code>: {#+ #}\n+            {{ layout_size|safe }}\n+        </li> {# #}\n+        {% endfor %}\n+    </ul> {# #}\n+    {% endif %}\n+    {# This kind of layout error can occur with valid code, e.g. if you try to\n+    get the layout of a generic type such as `Vec<T>`. #}\n         {% when Err(LayoutError::Unknown(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Unable to compute type layout, {#+ #}\n-                possibly due to this type having generic parameters. {#+ #}\n-                Layout can only be computed for concrete, fully-instantiated types. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Unable to compute type layout, {#+ #}\n+            possibly due to this type having generic parameters. {#+ #}\n+            Layout can only be computed for concrete, fully-instantiated types. {# #}\n+        </p> {# #}\n         {# This kind of error probably can't happen with valid code, but we don't\n-           want to panic and prevent the docs from building, so we just let the\n-           user know that we couldn't compute the layout. #}\n+        want to panic and prevent the docs from building, so we just let the\n+        user know that we couldn't compute the layout. #}\n         {% when Err(LayoutError::SizeOverflow(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type was too big. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type was too big. {# #}\n+        </p> {# #}\n         {% when Err(LayoutError::NormalizationFailure(_, _)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type failed to be normalized. {# #}\n-            </p> {# #}\n-    {% endmatch %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type failed to be normalized. {# #}\n+        </p> {# #}\n+        {% when Err(LayoutError::Cycle) %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type's layout depended on the type's layout itself. {# #}\n+        </p> {# #}\n+        {% endmatch %}\n </div> {# #}"}, {"sha": "d050310bd805ccb2a4700cc8033b7a449fd9e58f", "filename": "src/tools/miri/tests/fail/layout_cycle.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e87fcf979fc5ff36386c642d779f2c071cf30fe8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87fcf979fc5ff36386c642d779f2c071cf30fe8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs?ref=e87fcf979fc5ff36386c642d779f2c071cf30fe8", "patch": "@@ -0,0 +1,28 @@\n+//@error-pattern: a cycle occurred during layout computation\n+//~^ ERROR: cycle detected when computing layout of\n+\n+use std::mem;\n+\n+pub struct S<T: Tr> {\n+    pub f: <T as Tr>::I,\n+}\n+\n+pub trait Tr {\n+    type I: Tr;\n+}\n+\n+impl<T: Tr> Tr for S<T> {\n+    type I = S<S<T>>;\n+}\n+\n+impl Tr for () {\n+    type I = ();\n+}\n+\n+fn foo<T: Tr>() -> usize {\n+    mem::size_of::<S<T>>()\n+}\n+\n+fn main() {\n+    println!(\"{}\", foo::<S<()>>());\n+}"}, {"sha": "62b7d5fb77d12f3141a50952d6d64e67ed6fb521", "filename": "src/tools/miri/tests/fail/layout_cycle.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e87fcf979fc5ff36386c642d779f2c071cf30fe8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e87fcf979fc5ff36386c642d779f2c071cf30fe8/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr?ref=e87fcf979fc5ff36386c642d779f2c071cf30fe8", "patch": "@@ -0,0 +1,28 @@\n+error[E0391]: cycle detected when computing layout of `S<S<()>>`\n+   |\n+   = note: ...which requires computing layout of `<S<()> as Tr>::I`...\n+   = note: ...which again requires computing layout of `S<S<()>>`, completing the cycle\n+\n+error: post-monomorphization error: a cycle occurred during layout computation\n+  --> RUSTLIB/core/src/mem/mod.rs:LL:CC\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ a cycle occurred during layout computation\n+   |\n+   = note: inside `std::mem::size_of::<S<S<()>>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n+note: inside `foo::<S<()>>`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     mem::size_of::<S<T>>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `main`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", foo::<S<()>>());\n+   |                    ^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}]}