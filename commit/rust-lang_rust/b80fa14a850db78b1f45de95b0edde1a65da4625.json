{"sha": "b80fa14a850db78b1f45de95b0edde1a65da4625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MGZhMTRhODUwZGI3OGIxZjQ1ZGU5NWIwZWRkZTFhNjVkYTQ2MjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T09:00:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T09:00:36Z"}, "message": "Use Local more", "tree": {"sha": "84b91fa8d28871a4c5ae5eed947b05b8b5883e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b91fa8d28871a4c5ae5eed947b05b8b5883e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80fa14a850db78b1f45de95b0edde1a65da4625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80fa14a850db78b1f45de95b0edde1a65da4625", "html_url": "https://github.com/rust-lang/rust/commit/b80fa14a850db78b1f45de95b0edde1a65da4625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80fa14a850db78b1f45de95b0edde1a65da4625/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31d01efb069065449e53cfd7d0935c4b9fecf1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d01efb069065449e53cfd7d0935c4b9fecf1e3", "html_url": "https://github.com/rust-lang/rust/commit/31d01efb069065449e53cfd7d0935c4b9fecf1e3"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "899e0fa04ad624bdc3228edc52c01b981f76ebfb", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=b80fa14a850db78b1f45de95b0edde1a65da4625", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn resolver_for_scope(\n     let scopes = owner.expr_scopes(db);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n-        r = r.push_expr_scope(Arc::clone(&scopes), scope);\n+        r = r.push_expr_scope(owner, Arc::clone(&scopes), scope);\n     }\n     r\n }"}, {"sha": "b922fe20faf8a8346822985ebff8386539806e19", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=b80fa14a850db78b1f45de95b0edde1a65da4625", "patch": "@@ -16,8 +16,8 @@ use crate::{\n     expr::{ExprScopes, PatId, ScopeId},\n     generics::GenericParams,\n     impl_block::ImplBlock,\n-    Adt, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, PerNs, Static, Struct, Trait,\n-    TypeAlias,\n+    Adt, Const, DefWithBody, Enum, EnumVariant, Function, Local, MacroDef, ModuleDef, PerNs,\n+    Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -34,6 +34,7 @@ pub(crate) struct ModuleItemMap {\n \n #[derive(Debug, Clone)]\n pub(crate) struct ExprScope {\n+    owner: DefWithBody,\n     expr_scopes: Arc<ExprScopes>,\n     scope_id: ScopeId,\n }\n@@ -399,10 +400,11 @@ impl Resolver {\n \n     pub(crate) fn push_expr_scope(\n         self,\n+        owner: DefWithBody,\n         expr_scopes: Arc<ExprScopes>,\n         scope_id: ScopeId,\n     ) -> Resolver {\n-        self.push_scope(Scope::ExprScope(ExprScope { expr_scopes, scope_id }))\n+        self.push_scope(Scope::ExprScope(ExprScope { owner, expr_scopes, scope_id }))\n     }\n }\n \n@@ -413,7 +415,7 @@ pub enum ScopeDef {\n     GenericParam(u32),\n     ImplSelfType(ImplBlock),\n     AdtSelfType(Adt),\n-    LocalBinding(PatId),\n+    Local(Local),\n     Unknown,\n }\n \n@@ -467,9 +469,10 @@ impl Scope {\n             Scope::AdtScope(i) => {\n                 f(name::SELF_TYPE, ScopeDef::AdtSelfType(*i));\n             }\n-            Scope::ExprScope(e) => {\n-                e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {\n-                    f(e.name().clone(), ScopeDef::LocalBinding(e.pat()));\n+            Scope::ExprScope(scope) => {\n+                scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n+                    let local = Local { parent: scope.owner, pat_id: e.pat() };\n+                    f(e.name().clone(), ScopeDef::Local(local));\n                 });\n             }\n         }"}, {"sha": "59046edcc414bc63d980c781b2be798beaf986e8", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b80fa14a850db78b1f45de95b0edde1a65da4625", "patch": "@@ -195,14 +195,6 @@ impl SourceAnalyzer {\n         Some(self.infer.as_ref()?[pat_id].clone())\n     }\n \n-    pub fn type_of_pat_by_id(\n-        &self,\n-        _db: &impl HirDatabase,\n-        pat_id: expr::PatId,\n-    ) -> Option<crate::Ty> {\n-        Some(self.infer.as_ref()?[pat_id].clone())\n-    }\n-\n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n         let expr_id = self.expr_id(&call.clone().into())?;\n         self.infer.as_ref()?.method_resolution(expr_id)"}, {"sha": "c343cece646a6c5a8b956325f6a9fedcf73ac347", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80fa14a850db78b1f45de95b0edde1a65da4625/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b80fa14a850db78b1f45de95b0edde1a65da4625", "patch": "@@ -68,7 +68,7 @@ impl Completions {\n             ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::TypeAlias,\n             ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n             ScopeDef::GenericParam(..) => CompletionItemKind::TypeParam,\n-            ScopeDef::LocalBinding(..) => CompletionItemKind::Binding,\n+            ScopeDef::Local(..) => CompletionItemKind::Binding,\n             // (does this need its own kind?)\n             ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n             ScopeDef::MacroDef(mac) => {\n@@ -96,13 +96,11 @@ impl Completions {\n \n         let mut completion_item =\n             CompletionItem::new(completion_kind, ctx.source_range(), local_name.clone());\n-        if let ScopeDef::LocalBinding(pat_id) = resolution {\n-            let ty = ctx\n-                .analyzer\n-                .type_of_pat_by_id(ctx.db, pat_id.clone())\n-                .filter(|t| t != &Ty::Unknown)\n-                .map(|t| t.display(ctx.db).to_string());\n-            completion_item = completion_item.set_detail(ty);\n+        if let ScopeDef::Local(local) = resolution {\n+            let ty = local.ty(ctx.db);\n+            if ty != Ty::Unknown {\n+                completion_item = completion_item.detail(ty.display(ctx.db).to_string());\n+            }\n         };\n \n         // If not an import, add parenthesis automatically."}]}