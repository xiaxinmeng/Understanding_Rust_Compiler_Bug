{"sha": "a7453ad0dffd94e57389b893527111c98a96ec40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NDUzYWQwZGZmZDk0ZTU3Mzg5Yjg5MzUyNzExMWM5OGE5NmVjNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-22T22:31:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-22T22:31:26Z"}, "message": "auto merge of #9969 : reedlepee123/rust/priv_fields, r=bstrie", "tree": {"sha": "20cb7a545b241e074a653ff223bef484fa4a5c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cb7a545b241e074a653ff223bef484fa4a5c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7453ad0dffd94e57389b893527111c98a96ec40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7453ad0dffd94e57389b893527111c98a96ec40", "html_url": "https://github.com/rust-lang/rust/commit/a7453ad0dffd94e57389b893527111c98a96ec40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7453ad0dffd94e57389b893527111c98a96ec40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b477f7a7b74615bba9ab3074082f9cc76a24e8a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b477f7a7b74615bba9ab3074082f9cc76a24e8a3", "html_url": "https://github.com/rust-lang/rust/commit/b477f7a7b74615bba9ab3074082f9cc76a24e8a3"}, {"sha": "7e6f5bb5c9eaab292a755036656cf62bfc669974", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6f5bb5c9eaab292a755036656cf62bfc669974", "html_url": "https://github.com/rust-lang/rust/commit/7e6f5bb5c9eaab292a755036656cf62bfc669974"}], "stats": {"total": 430, "additions": 216, "deletions": 214}, "files": [{"sha": "1ce52d1d2784a61b82cca5443b47e64109bcf4e5", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -521,15 +521,15 @@ fn borrow_rwlock<T:Freeze + Send>(state: *mut RWArcInner<T>) -> *RWLock {\n \n /// The \"write permission\" token used for RWArc.write_downgrade().\n pub struct RWWriteMode<'self, T> {\n-    data: &'self mut T,\n-    token: sync::RWLockWriteMode<'self>,\n-    poison: PoisonOnFail,\n+    priv data: &'self mut T,\n+    priv token: sync::RWLockWriteMode<'self>,\n+    priv poison: PoisonOnFail,\n }\n \n /// The \"read permission\" token used for RWArc.write_downgrade().\n pub struct RWReadMode<'self, T> {\n-    data: &'self T,\n-    token: sync::RWLockReadMode<'self>,\n+    priv data: &'self T,\n+    priv token: sync::RWLockReadMode<'self>,\n }\n \n impl<'self, T:Freeze + Send> RWWriteMode<'self, T> {"}, {"sha": "15b932677535086b352dd1a22685ec4f630eb918", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -22,11 +22,11 @@ pub enum CharacterSet {\n /// Contains configuration parameters for `to_base64`.\n pub struct Config {\n     /// Character set to use\n-    char_set: CharacterSet,\n+    priv char_set: CharacterSet,\n     /// True to pad output with `=` characters\n-    pad: bool,\n+    priv pad: bool,\n     /// `Some(len)` to wrap lines at `len`, `None` to disable line wrapping\n-    line_length: Option<uint>\n+    priv line_length: Option<uint>\n }\n \n /// Configuration for RFC 4648 standard base64 encoding"}, {"sha": "96123ad75b250603a7dfa877773f33c25c833741", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -226,9 +226,9 @@ enum Op {Union, Intersect, Assign, Difference}\n #[deriving(Clone)]\n pub struct Bitv {\n     /// Internal representation of the bit vector (small or large)\n-    rep: BitvVariant,\n+    priv rep: BitvVariant,\n     /// The number of valid bits in the internal representation\n-    nbits: uint\n+    priv nbits: uint\n }\n \n fn die() -> ! {"}, {"sha": "34515a2b955cb0b7ebe600fa38c5511821bd9f47", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -50,7 +50,7 @@ impl Doc {\n }\n \n pub struct TaggedDoc {\n-    tag: uint,\n+    priv tag: uint,\n     doc: Doc,\n }\n "}, {"sha": "49072dab6d025c76ada29125361f0d86affecf8e", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -155,7 +155,7 @@ struct FileInput_ {\n // \"self.fi\" -> \"self.\" and renaming FileInput_. Documentation above\n // will likely have to be updated to use `let mut in = ...`.\n pub struct FileInput  {\n-    fi: @mut FileInput_\n+    priv fi: @mut FileInput_\n }\n \n impl FileInput {"}, {"sha": "38b4d83fe0be42afc400d32f57afcc2e079e1c4b", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -119,7 +119,7 @@ pub struct Opt {\n     /// How often it can occur\n     occur: Occur,\n     /// Which options it aliases\n-    aliases: ~[Opt],\n+    priv aliases: ~[Opt],\n }\n \n /// Describes wether an option is given at all or has a value.\n@@ -134,9 +134,9 @@ enum Optval {\n #[deriving(Clone, Eq)]\n pub struct Matches {\n     /// Options that matched\n-    opts: ~[Opt],\n+    priv opts: ~[Opt],\n     /// Values of the Options that matched\n-    vals: ~[~[Optval]],\n+    priv vals: ~[~[Optval]],\n     /// Free string fragments\n     free: ~[~str]\n }"}, {"sha": "5297b48b0e156719c83ccb3a127128cf66b5b1b2", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -480,21 +480,21 @@ pub struct MatchOptions {\n      * currently only considers upper/lower case relationships between ASCII characters,\n      * but in future this might be extended to work with Unicode.\n      */\n-    case_sensitive: bool,\n+    priv case_sensitive: bool,\n \n     /**\n      * If this is true then path-component separator characters (e.g. `/` on Posix)\n      * must be matched by a literal `/`, rather than by `*` or `?` or `[...]`\n      */\n-    require_literal_separator: bool,\n+    priv require_literal_separator: bool,\n \n     /**\n      * If this is true then paths that contain components that start with a `.` will\n      * not match unless the `.` appears literally in the pattern: `*`, `?` or `[...]`\n      * will not match. This is useful because such files are conventionally considered\n      * hidden on Unix systems and it might be desirable to skip them when listing files.\n      */\n-    require_literal_leading_dot: bool\n+    priv require_literal_leading_dot: bool\n }\n \n impl MatchOptions {"}, {"sha": "27a09be3a625b81fd1122fcc236317daeca59652", "filename": "src/libextra/io_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fio_util.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -17,9 +17,9 @@ use std::cast;\n /// An implementation of the io::Reader interface which reads a buffer of bytes\n pub struct BufReader {\n     /// The buffer of bytes to read\n-    buf: ~[u8],\n+    priv buf: ~[u8],\n     /// The current position in the buffer of bytes\n-    pos: @mut uint\n+    priv pos: @mut uint\n }\n \n impl BufReader {"}, {"sha": "90260282e4b5b87beedda504f0add0c56ea214e8", "filename": "src/libextra/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -49,11 +49,11 @@ pub type Object = TreeMap<~str, Json>;\n /// returned\n pub struct Error {\n     /// The line number at which the error occurred\n-    line: uint,\n+    priv line: uint,\n     /// The column number at which the error occurred\n-    col: uint,\n+    priv col: uint,\n     /// A message describing the type of the error\n-    msg: @~str,\n+    priv msg: @~str,\n }\n \n fn escape_str(s: &str) -> ~str {"}, {"sha": "bdec950c87bca5a176f048520ad1bd31987c1c37", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -20,8 +20,8 @@ use super::bigint::BigInt;\n #[deriving(Clone)]\n #[allow(missing_doc)]\n pub struct Ratio<T> {\n-    numer: T,\n-    denom: T\n+    priv numer: T,\n+    priv denom: T\n }\n \n /// Alias for a `Ratio` of machine-sized integers."}, {"sha": "02c35000ce3a4320bf280376492d7e8fe6290d0e", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -71,17 +71,17 @@ impl ToStr for Identifier {\n #[deriving(Clone, Eq)]\n pub struct Version {\n     /// The major version, to be incremented on incompatible changes.\n-    major: uint,\n+    priv major: uint,\n     /// The minor version, to be incremented when functionality is added in a\n     /// backwards-compatible manner.\n-    minor: uint,\n+    priv minor: uint,\n     /// The patch version, to be incremented when backwards-compatible bug\n     /// fixes are made.\n-    patch: uint,\n+    priv patch: uint,\n     /// The pre-release version identifier, if one exists.\n-    pre: ~[Identifier],\n+    priv pre: ~[Identifier],\n     /// The build metadata, ignored when determining version precedence.\n-    build: ~[Identifier],\n+    priv build: ~[Identifier],\n }\n \n impl ToStr for Version {"}, {"sha": "40f99716ca796832054a69181e0df72f333a1980", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -105,18 +105,23 @@ pub trait Stats {\n #[deriving(Clone, Eq)]\n #[allow(missing_doc)]\n pub struct Summary {\n-    sum: f64,\n+    priv sum: f64,\n+    // public\n     min: f64,\n+    // public\n     max: f64,\n-    mean: f64,\n+    priv mean: f64,\n+    // public\n     median: f64,\n-    var: f64,\n-    std_dev: f64,\n-    std_dev_pct: f64,\n+    priv var: f64,\n+    priv std_dev: f64,\n+    priv std_dev_pct: f64,\n+    // public\n     median_abs_dev: f64,\n+    // public\n     median_abs_dev_pct: f64,\n-    quartiles: (f64,f64,f64),\n-    iqr: f64,\n+    priv quartiles: (f64,f64,f64),\n+    priv iqr: f64,\n }\n \n impl Summary {"}, {"sha": "131cf063d1d356f9e82f26779e9a56bfb27b2979", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -376,8 +376,8 @@ impl Semaphore {\n  * A task which fails while holding a mutex will unlock the mutex as it\n  * unwinds.\n  */\n-pub struct Mutex { priv sem: Sem<~[WaitQueue]> }\n \n+pub struct Mutex { priv sem: Sem<~[WaitQueue]> }\n impl Clone for Mutex {\n     /// Create a new handle to the mutex.\n     fn clone(&self) -> Mutex { Mutex { sem: Sem((*self.sem).clone()) } }\n@@ -663,8 +663,8 @@ impl RWLock {\n }\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n-pub struct RWLockWriteMode<'self> { priv lock: &'self RWLock, priv token: NonCopyable }\n \n+pub struct RWLockWriteMode<'self> { priv lock: &'self RWLock, priv token: NonCopyable }\n /// The \"read permission\" token used for rwlock.write_downgrade().\n pub struct RWLockReadMode<'self> { priv lock: &'self RWLock,\n                                    priv token: NonCopyable }"}, {"sha": "f7db66dc4e0c491253d5342b7b304c6b00a08024", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -28,8 +28,8 @@ enum Msg<T> {\n }\n \n pub struct TaskPool<T> {\n-    channels: ~[Chan<Msg<T>>],\n-    next_index: uint,\n+    priv channels: ~[Chan<Msg<T>>],\n+    priv next_index: uint,\n }\n \n #[unsafe_destructor]"}, {"sha": "878224890e619f3bc05d463d261e2945cfaaf0d2", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -95,14 +95,14 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n \n #[cfg(not(target_os = \"win32\"))]\n pub struct Terminal {\n-    num_colors: u16,\n+    priv num_colors: u16,\n     priv out: @io::Writer,\n     priv ti: ~TermInfo\n }\n \n #[cfg(target_os = \"win32\")]\n pub struct Terminal {\n-    num_colors: u16,\n+    priv num_colors: u16,\n     priv out: @io::Writer,\n }\n "}, {"sha": "c0a5d9d53aa9eb915d8818ad1c6b077d4e72daa3", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -48,9 +48,9 @@ pub enum Param {\n /// Container for static and dynamic variable arrays\n pub struct Variables {\n     /// Static variables A-Z\n-    sta: [Param, ..26],\n+    priv sta: [Param, ..26],\n     /// Dynamic variables a-z\n-    dyn: [Param, ..26]\n+    priv dyn: [Param, ..26]\n }\n \n impl Variables {"}, {"sha": "06bf6e47c329107bd7651e0c215805e467bce4eb", "filename": "src/libextra/terminfo/terminfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fterminfo.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -15,9 +15,9 @@ use std::hashmap::HashMap;\n /// A parsed terminfo entry.\n pub struct TermInfo {\n     /// Names for the terminal\n-    names: ~[~str],\n+    priv names: ~[~str],\n     /// Map of capability name to boolean value\n-    bools: HashMap<~str, bool>,\n+    priv bools: HashMap<~str, bool>,\n     /// Map of capability name to numeric value\n     numbers: HashMap<~str, u16>,\n     /// Map of capability name to raw (unexpanded) string"}, {"sha": "f95c7aa22b7f0407f8c511d2e66dc1be38e70edc", "filename": "src/libextra/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -102,9 +102,9 @@ impl TestFn {\n \n // Structure passed to BenchFns\n pub struct BenchHarness {\n-    iterations: u64,\n-    ns_start: u64,\n-    ns_end: u64,\n+    priv iterations: u64,\n+    priv ns_start: u64,\n+    priv ns_end: u64,\n     bytes: u64\n }\n \n@@ -124,8 +124,8 @@ pub struct TestDescAndFn {\n \n #[deriving(Clone, Encodable, Decodable, Eq)]\n pub struct Metric {\n-    value: f64,\n-    noise: f64\n+    priv value: f64,\n+    priv noise: f64\n }\n \n #[deriving(Eq)]\n@@ -322,8 +322,8 @@ pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n \n #[deriving(Clone, Eq)]\n pub struct BenchSamples {\n-    ns_iter_summ: stats::Summary,\n-    mb_s: uint\n+    priv ns_iter_summ: stats::Summary,\n+    priv mb_s: uint\n }\n \n #[deriving(Clone, Eq)]"}, {"sha": "71569be3a8192e622540ffa89ffcdbc307066274", "filename": "src/libextra/time.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -31,9 +31,10 @@ pub mod rustrt {\n }\n \n /// A record specifying a time value in seconds and nanoseconds.\n-#[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n-pub struct Timespec { sec: i64, nsec: i32 }\n \n+\n+#[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n+pub struct Timespec { priv sec: i64, priv nsec: i32 }\n /*\n  * Timespec assumes that pre-epoch Timespecs have negative sec and positive\n  * nsec fields. Darwin's and Linux's struct timespec functions handle pre-\n@@ -105,18 +106,18 @@ pub fn tzset() {\n \n #[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n pub struct Tm {\n-    tm_sec: i32, // seconds after the minute ~[0-60]\n-    tm_min: i32, // minutes after the hour ~[0-59]\n-    tm_hour: i32, // hours after midnight ~[0-23]\n-    tm_mday: i32, // days of the month ~[1-31]\n-    tm_mon: i32, // months since January ~[0-11]\n-    tm_year: i32, // years since 1900\n-    tm_wday: i32, // days since Sunday ~[0-6]\n-    tm_yday: i32, // days since January 1 ~[0-365]\n-    tm_isdst: i32, // Daylight Savings Time flag\n-    tm_gmtoff: i32, // offset from UTC in seconds\n-    tm_zone: ~str, // timezone abbreviation\n-    tm_nsec: i32, // nanoseconds\n+    priv tm_sec: i32, // seconds after the minute ~[0-60]\n+    priv tm_min: i32, // minutes after the hour ~[0-59]\n+    priv tm_hour: i32, // hours after midnight ~[0-23]\n+    priv tm_mday: i32, // days of the month ~[1-31]\n+    priv tm_mon: i32, // months since January ~[0-11]\n+    priv tm_year: i32, // years since 1900\n+    priv tm_wday: i32, // days since Sunday ~[0-6]\n+    priv tm_yday: i32, // days since January 1 ~[0-365]\n+    priv tm_isdst: i32, // Daylight Savings Time flag\n+    priv tm_gmtoff: i32, // offset from UTC in seconds\n+    priv tm_zone: ~str, // timezone abbreviation\n+    priv tm_nsec: i32, // nanoseconds\n }\n \n pub fn empty_tm() -> Tm {"}, {"sha": "4d79b2059db5cd94b14d3d94418050563337d700", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -128,8 +128,8 @@ impl WorkMap {\n }\n \n pub struct Database {\n-    db_filename: Path,\n-    db_cache: TreeMap<~str, ~str>,\n+    priv db_filename: Path,\n+    priv db_cache: TreeMap<~str, ~str>,\n     db_dirty: bool\n }\n \n@@ -209,7 +209,7 @@ impl Drop for Database {\n \n pub struct Logger {\n     // FIXME #4432: Fill in\n-    a: ()\n+    priv a: ()\n }\n \n impl Logger {\n@@ -228,26 +228,26 @@ pub type FreshnessMap = TreeMap<~str,extern fn(&str,&str)->bool>;\n #[deriving(Clone)]\n pub struct Context {\n     db: RWArc<Database>,\n-    logger: RWArc<Logger>,\n-    cfg: Arc<json::Object>,\n+    priv logger: RWArc<Logger>,\n+    priv cfg: Arc<json::Object>,\n     /// Map from kinds (source, exe, url, etc.) to a freshness function.\n     /// The freshness function takes a name (e.g. file path) and value\n     /// (e.g. hash of file contents) and determines whether it's up-to-date.\n     /// For example, in the file case, this would read the file off disk,\n     /// hash it, and return the result of comparing the given hash and the\n     /// read hash for equality.\n-    freshness: Arc<FreshnessMap>\n+    priv freshness: Arc<FreshnessMap>\n }\n \n pub struct Prep<'self> {\n-    ctxt: &'self Context,\n-    fn_name: &'self str,\n-    declared_inputs: WorkMap,\n+    priv ctxt: &'self Context,\n+    priv fn_name: &'self str,\n+    priv declared_inputs: WorkMap,\n }\n \n pub struct Exec {\n-    discovered_inputs: WorkMap,\n-    discovered_outputs: WorkMap\n+    priv discovered_inputs: WorkMap,\n+    priv discovered_outputs: WorkMap\n }\n \n enum Work<'self, T> {"}, {"sha": "9d5c9c1a5cd66fe9df469b2a16123e81b87ffdc7", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -490,7 +490,6 @@ pub struct Formatter<'self> {\n \n     /// Output buffer.\n     buf: &'self mut io::Writer,\n-\n     priv curarg: vec::VecIterator<'self, Argument<'self>>,\n     priv args: &'self [Argument<'self>],\n }"}, {"sha": "4e55c5fe60eb50c8741a59698039eeb7b85d959d", "filename": "src/libstd/io.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -1009,7 +1009,7 @@ impl<R:Reader,C> Reader for Wrapper<R, C> {\n }\n \n pub struct FILERes {\n-    f: *libc::FILE,\n+    priv f: *libc::FILE,\n }\n \n impl FILERes {\n@@ -1282,7 +1282,7 @@ impl Writer for fd_t {\n }\n \n pub struct FdRes {\n-    fd: fd_t,\n+    priv fd: fd_t,\n }\n \n impl FdRes {\n@@ -1792,7 +1792,7 @@ pub mod fsync {\n \n     // Artifacts that need to fsync on destruction\n     pub struct Res<t> {\n-        arg: Arg<t>,\n+        priv arg: Arg<t>,\n     }\n \n     impl <t> Res<t> {\n@@ -1815,9 +1815,9 @@ pub mod fsync {\n     }\n \n     pub struct Arg<t> {\n-        val: t,\n-        opt_level: Option<Level>,\n-        fsync_fn: extern \"Rust\" fn(f: &t, Level) -> int,\n+        priv val: t,\n+        priv opt_level: Option<Level>,\n+        priv fsync_fn: extern \"Rust\" fn(f: &t, Level) -> int,\n     }\n \n     // fsync file after executing blk"}, {"sha": "771be3b2a134fc375856af6a50aa0a93bcc827ac", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -1790,9 +1790,9 @@ impl<'self, A, St> Iterator<A> for Unfold<'self, A, St> {\n #[deriving(Clone)]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n-    state: A,\n+    priv state: A,\n     /// The amount that this iterator is stepping by\n-    step: A\n+    priv step: A\n }\n \n /// Creates a new counter with the specified start/step"}, {"sha": "d63b14f982d403a6dd845a2afc0555a6fcd84a85", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -41,7 +41,7 @@ pub fn align(size: uint, align: uint) -> uint {\n \n /// Adaptor to wrap around visitors implementing MovePtr.\n pub struct MovePtrAdaptor<V> {\n-    inner: V\n+    priv inner: V\n }\n pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n     MovePtrAdaptor { inner: v }"}, {"sha": "d03621eb60d2f216aee918d48808512fe2d63edf", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -98,10 +98,10 @@ enum VariantState {\n }\n \n pub struct ReprVisitor<'self> {\n-    ptr: *c_void,\n-    ptr_stk: ~[*c_void],\n-    var_stk: ~[VariantState],\n-    writer: &'self mut io::Writer\n+    priv ptr: *c_void,\n+    priv ptr_stk: ~[*c_void],\n+    priv var_stk: ~[VariantState],\n+    priv writer: &'self mut io::Writer\n }\n \n pub fn ReprVisitor<'a>(ptr: *c_void,"}, {"sha": "4426a3eafe1e864b11157bd23b6e886ee51d6a9a", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -29,9 +29,9 @@ static ALL_BITS: uint = FROZEN_BIT | MUT_BIT;\n \n #[deriving(Eq)]\n pub struct BorrowRecord {\n-    box: *mut raw::Box<()>,\n+    priv box: *mut raw::Box<()>,\n     file: *c_char,\n-    line: size_t\n+    priv line: size_t\n }\n \n fn try_take_task_borrow_list() -> Option<~[BorrowRecord]> {"}, {"sha": "0d4271a33c22e404e4e44cc44d6c344be50a1365", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -48,14 +48,14 @@ struct Packet<T> {\n \n // A one-shot channel.\n pub struct ChanOne<T> {\n-    void_packet: *mut Void,\n-    suppress_finalize: bool\n+    priv void_packet: *mut Void,\n+    priv suppress_finalize: bool\n }\n \n /// A one-shot port.\n pub struct PortOne<T> {\n-    void_packet: *mut Void,\n-    suppress_finalize: bool\n+    priv void_packet: *mut Void,\n+    priv suppress_finalize: bool\n }\n \n pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {"}, {"sha": "9508c757c9dd74ea45dd7dc00ca06ecb91d50896", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -25,11 +25,11 @@ pub static RED_ZONE: uint = 20 * 1024;\n // then misalign the regs again.\n pub struct Context {\n     /// The context entry point, saved here for later destruction\n-    start: Option<~~fn()>,\n+    priv start: Option<~~fn()>,\n     /// Hold the registers while the task or scheduler is suspended\n-    regs: ~Registers,\n+    priv regs: ~Registers,\n     /// Lower bound and upper bound for the stack\n-    stack_bounds: Option<(uint, uint)>,\n+    priv stack_bounds: Option<(uint, uint)>,\n }\n \n impl Context {"}, {"sha": "dd71426938dc45e1444f9a022fdf80c368f6e6c4", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -26,9 +26,9 @@ pub struct ModEntry<'self> {\n }\n \n pub struct CrateMap<'self> {\n-    version: i32,\n-    entries: &'self [ModEntry<'self>],\n-    children: &'self [&'self CrateMap<'self>]\n+     priv version: i32,\n+     priv entries: &'self [ModEntry<'self>],\n+     priv children: &'self [&'self CrateMap<'self>]\n }\n \n #[cfg(not(windows))]"}, {"sha": "3869f99adeaed0bee96017049b93c059a39359b9", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -362,8 +362,8 @@ impl Seek for FileWriter {\n /// For this reason, it is best to use the access-constrained wrappers that are\n /// exposed via `FileInfo.open_reader()` and `FileInfo.open_writer()`.\n pub struct FileStream {\n-    fd: ~RtioFileStream,\n-    last_nread: int,\n+    priv fd: ~RtioFileStream,\n+    priv last_nread: int,\n }\n \n /// a `std::rt::io::Reader` trait impl for file I/O."}, {"sha": "8a5aa171eb805d55c7dcb00f284580acf242313e", "filename": "src/libstd/rt/io/flate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -17,7 +17,7 @@ use super::*;\n \n /// A Writer decorator that compresses using the 'deflate' scheme\n pub struct DeflateWriter<W> {\n-    inner_writer: W\n+    priv inner_writer: W\n }\n \n impl<W: Writer> DeflateWriter<W> {\n@@ -56,7 +56,7 @@ impl<W: Writer> Decorator<W> for DeflateWriter<W> {\n \n /// A Reader decorator that decompresses using the 'deflate' scheme\n pub struct InflateReader<R> {\n-    inner_reader: R\n+    priv inner_reader: R\n }\n \n impl<R: Reader> InflateReader<R> {"}, {"sha": "44709c7b7b686321e21716bf99cb2a2452c6de7b", "filename": "src/libstd/rt/io/mock.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fio%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fio%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmock.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -13,7 +13,7 @@ use rt::io::{Reader, Writer};\n \n pub struct MockReader {\n     read: ~fn(buf: &mut [u8]) -> Option<uint>,\n-    eof: ~fn() -> bool\n+    priv eof: ~fn() -> bool\n }\n \n impl MockReader {\n@@ -31,8 +31,8 @@ impl Reader for MockReader {\n }\n \n pub struct MockWriter {\n-    write: ~fn(buf: &[u8]),\n-    flush: ~fn()\n+    priv write: ~fn(buf: &[u8]),\n+    priv flush: ~fn()\n }\n \n impl MockWriter {"}, {"sha": "19f17ca966d2d551fd088e45683429e058df7926", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -219,17 +219,17 @@ pub struct Death {\n     // might kill it. This is optional so we can take it by-value at exit time.\n     kill_handle:     Option<KillHandle>,\n     // Handle to a watching parent, if we have one, for exit code propagation.\n-    watching_parent: Option<KillHandle>,\n+    priv watching_parent: Option<KillHandle>,\n     // Action to be done with the exit code. If set, also makes the task wait\n     // until all its watched children exit before collecting the status.\n     on_exit:         Option<~fn(bool)>,\n     // nesting level counter for task::unkillable calls (0 == killable).\n-    unkillable:      int,\n+    priv unkillable:      int,\n     // nesting level counter for unstable::atomically calls (0 == can deschedule).\n-    wont_sleep:      int,\n+    priv wont_sleep:      int,\n     // A \"spare\" handle to the kill flag inside the kill handle. Used during\n     // blocking/waking as an optimization to avoid two xadds on the refcount.\n-    spare_kill_flag: Option<KillFlagHandle>,\n+    priv spare_kill_flag: Option<KillFlagHandle>,\n }\n \n impl Drop for KillFlag {"}, {"sha": "14df292343e9f496ca5cdbe2d94f3576a947252c", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -32,8 +32,8 @@ pub type OpaqueBox = c_void;\n pub type TypeDesc = c_void;\n \n pub struct LocalHeap {\n-    memory_region: *MemoryRegion,\n-    boxed_region: *BoxedRegion\n+    priv memory_region: *MemoryRegion,\n+    priv boxed_region: *BoxedRegion\n }\n \n impl LocalHeap {"}, {"sha": "2699dab6d38a871586762b7f331092b32fbc2d6b", "filename": "src/libstd/rt/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frc.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -24,7 +24,7 @@ use libc::c_void;\n use cast;\n \n pub struct RC<T> {\n-    p: *c_void // ~(uint, T)\n+    priv p: *c_void // ~(uint, T)\n }\n \n impl<T> RC<T> {"}, {"sha": "501def8b0607903f82f7fc33d1346e224a9dad00", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -66,7 +66,7 @@ pub struct FileOpenConfig {\n     /// Flags for file access mode (as per open(2))\n     flags: int,\n     /// File creation mode, ignored unless O_CREAT is passed as part of flags\n-    mode: int\n+    priv mode: int\n }\n \n pub trait IoFactory {"}, {"sha": "48cd79875079d4721738244fd300c7b19659daa5", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -66,26 +66,26 @@ pub struct Scheduler {\n     event_loop: ~EventLoopObject,\n     /// The scheduler runs on a special task. When it is not running\n     /// it is stored here instead of the work queue.\n-    sched_task: Option<~Task>,\n+    priv sched_task: Option<~Task>,\n     /// An action performed after a context switch on behalf of the\n     /// code running before the context switch\n-    cleanup_job: Option<CleanupJob>,\n+    priv cleanup_job: Option<CleanupJob>,\n     /// Should this scheduler run any task, or only pinned tasks?\n     run_anything: bool,\n     /// If the scheduler shouldn't run some tasks, a friend to send\n     /// them to.\n-    friend_handle: Option<SchedHandle>,\n+    priv friend_handle: Option<SchedHandle>,\n     /// A fast XorShift rng for scheduler use\n     rng: XorShiftRng,\n     /// A toggleable idle callback\n-    idle_callback: Option<~PausibleIdleCallback>,\n+    priv idle_callback: Option<~PausibleIdleCallback>,\n     /// A countdown that starts at a random value and is decremented\n     /// every time a yield check is performed. When it hits 0 a task\n     /// will yield.\n-    yield_check_count: uint,\n+    priv yield_check_count: uint,\n     /// A flag to tell the scheduler loop it needs to do some stealing\n     /// in order to introduce randomness as part of a yield\n-    steal_for_yield: bool\n+    priv steal_for_yield: bool\n }\n \n /// An indication of how hard to work on a given operation, the difference"}, {"sha": "55bd4b0732a6f3d16cbed7d898dcb061b6296851", "filename": "src/libstd/rt/stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -15,8 +15,8 @@ use ops::Drop;\n use libc::{c_uint, uintptr_t};\n \n pub struct StackSegment {\n-    buf: ~[u8],\n-    valgrind_id: c_uint\n+    priv buf: ~[u8],\n+    priv valgrind_id: c_uint\n }\n \n impl StackSegment {"}, {"sha": "c4f352501a08bfe621ce6ac2ca6596bd6c656365", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -44,7 +44,7 @@ use send_str::SendStr;\n \n pub struct Task {\n     heap: LocalHeap,\n-    gc: GarbageCollector,\n+    priv gc: GarbageCollector,\n     storage: LocalStorage,\n     logger: StdErrLogger,\n     unwinder: Unwinder,\n@@ -69,7 +69,7 @@ pub struct Coroutine {\n     /// The segment of stack on which the task is currently running or\n     /// if the task is blocked, on which the task will resume\n     /// execution.\n-    current_stack_segment: StackSegment,\n+    priv current_stack_segment: StackSegment,\n     /// Always valid if the task is alive and not running.\n     saved_context: Context\n }"}, {"sha": "949d73ecc4fcfaf63b58045be2fcb7c2245dc589", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -18,9 +18,9 @@ use uint;\n type raw_thread = libc::c_void;\n \n pub struct Thread {\n-    main: ~fn(),\n-    raw_thread: *raw_thread,\n-    joined: bool,\n+    priv main: ~fn(),\n+    priv raw_thread: *raw_thread,\n+    priv joined: bool\n }\n \n impl Thread {"}, {"sha": "16fd3fa38eae9454ba69c47333e23ce519988456", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -28,7 +28,7 @@ struct TubeState<T> {\n }\n \n pub struct Tube<T> {\n-    p: RC<TubeState<T>>\n+    priv p: RC<TubeState<T>>\n }\n \n impl<T> Tube<T> {"}, {"sha": "f2abcd3aca7e35a5be7bd2059d76a47c705674fc", "filename": "src/libstd/rt/uv/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Faddrinfo.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -25,7 +25,7 @@ type GetAddrInfoCallback = ~fn(GetAddrInfoRequest, &UvAddrInfo, Option<UvError>)\n pub struct GetAddrInfoRequest(*uvll::uv_getaddrinfo_t);\n \n pub struct RequestData {\n-    getaddrinfo_cb: Option<GetAddrInfoCallback>,\n+    priv getaddrinfo_cb: Option<GetAddrInfoCallback>,\n }\n \n impl GetAddrInfoRequest {"}, {"sha": "5d64ca4d755ce5ede9682590d31a994e401d8fa0", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -25,7 +25,7 @@ pub struct FsRequest(*uvll::uv_fs_t);\n impl Request for FsRequest {}\n \n pub struct RequestData {\n-    complete_cb: Option<FsCallback>\n+    priv complete_cb: Option<FsCallback>\n }\n \n impl FsRequest {"}, {"sha": "3a6a3acbc5342bb50830155a86611c12d5f33f1b", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -80,7 +80,7 @@ pub mod pipe;\n /// with dtors may not be destructured, but tuple structs can,\n /// but the results are not correct.\n pub struct Loop {\n-    handle: *uvll::uv_loop_t\n+    priv handle: *uvll::uv_loop_t\n }\n \n /// The trait implemented by uv 'watchers' (handles). Watchers are"}, {"sha": "13c3a30eed37875ce319abf30f65490677a0c52b", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -180,7 +180,7 @@ fn socket_name<T, U: Watcher + NativeHandle<*T>>(sk: SocketNameKind,\n \n // Obviously an Event Loop is always home.\n pub struct UvEventLoop {\n-    uvio: UvIoFactory\n+    priv uvio: UvIoFactory\n }\n \n impl UvEventLoop {\n@@ -240,9 +240,9 @@ impl EventLoop for UvEventLoop {\n }\n \n pub struct UvPausibleIdleCallback {\n-    watcher: IdleWatcher,\n-    idle_flag: bool,\n-    closed: bool\n+    priv watcher: IdleWatcher,\n+    priv idle_flag: bool,\n+    priv closed: bool\n }\n \n impl UvPausibleIdleCallback {\n@@ -294,10 +294,10 @@ fn test_callback_run_once() {\n // The entire point of async is to call into a loop from other threads so it does not need to home.\n pub struct UvRemoteCallback {\n     // The uv async handle for triggering the callback\n-    async: AsyncWatcher,\n+    priv async: AsyncWatcher,\n     // A flag to tell the callback to exit, set from the dtor. This is\n     // almost never contested - only in rare races with the dtor.\n-    exit_flag: Exclusive<bool>\n+    priv exit_flag: Exclusive<bool>\n }\n \n impl UvRemoteCallback {\n@@ -801,8 +801,8 @@ impl IoFactory for UvIoFactory {\n }\n \n pub struct UvTcpListener {\n-    watcher : TcpWatcher,\n-    home: SchedHandle,\n+    priv watcher : TcpWatcher,\n+    priv home: SchedHandle,\n }\n \n impl HomingIO for UvTcpListener {\n@@ -863,8 +863,8 @@ impl RtioTcpListener for UvTcpListener {\n }\n \n pub struct UvTcpAcceptor {\n-    listener: UvTcpListener,\n-    incoming: Tube<Result<~RtioTcpStreamObject, IoError>>,\n+    priv listener: UvTcpListener,\n+    priv incoming: Tube<Result<~RtioTcpStreamObject, IoError>>,\n }\n \n impl HomingIO for UvTcpAcceptor {\n@@ -988,7 +988,7 @@ fn write_stream(mut watcher: StreamWatcher,\n \n pub struct UvUnboundPipe {\n     pipe: Pipe,\n-    home: SchedHandle,\n+    priv home: SchedHandle,\n }\n \n impl HomingIO for UvUnboundPipe {\n@@ -1040,8 +1040,8 @@ impl RtioPipe for UvPipeStream {\n }\n \n pub struct UvTcpStream {\n-    watcher: TcpWatcher,\n-    home: SchedHandle,\n+    priv watcher: TcpWatcher,\n+    priv home: SchedHandle,\n }\n \n impl HomingIO for UvTcpStream {\n@@ -1140,8 +1140,8 @@ impl RtioTcpStream for UvTcpStream {\n }\n \n pub struct UvUdpSocket {\n-    watcher: UdpWatcher,\n-    home: SchedHandle,\n+    priv watcher: UdpWatcher,\n+    priv home: SchedHandle,\n }\n \n impl HomingIO for UvUdpSocket {\n@@ -1350,8 +1350,8 @@ impl RtioUdpSocket for UvUdpSocket {\n }\n \n pub struct UvTimer {\n-    watcher: timer::TimerWatcher,\n-    home: SchedHandle,\n+    priv watcher: timer::TimerWatcher,\n+    priv home: SchedHandle,\n }\n \n impl HomingIO for UvTimer {\n@@ -1397,10 +1397,10 @@ impl RtioTimer for UvTimer {\n }\n \n pub struct UvFileStream {\n-    loop_: Loop,\n-    fd: c_int,\n-    close_on_drop: bool,\n-    home: SchedHandle\n+    priv loop_: Loop,\n+    priv fd: c_int,\n+    priv close_on_drop: bool,\n+    priv home: SchedHandle\n }\n \n impl HomingIO for UvFileStream {\n@@ -1530,11 +1530,11 @@ impl RtioFileStream for UvFileStream {\n }\n \n pub struct UvProcess {\n-    process: process::Process,\n+    priv process: process::Process,\n \n     // Sadly, this structure must be created before we return it, so in that\n     // brief interim the `home` is None.\n-    home: Option<SchedHandle>,\n+    priv home: Option<SchedHandle>,\n \n     // All None until the process exits (exit_error may stay None)\n     priv exit_status: Option<int>,"}, {"sha": "96c5dd068d0b2c1b67e383d7ed6e47b3ff86f9d0", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -134,26 +134,26 @@ pub type uv_pipe_t = c_void;\n \n pub struct uv_timespec_t {\n     tv_sec: libc::c_long,\n-    tv_nsec: libc::c_long\n+    priv tv_nsec: libc::c_long\n }\n \n pub struct uv_stat_t {\n-    st_dev: libc::uint64_t,\n+    priv st_dev: libc::uint64_t,\n     st_mode: libc::uint64_t,\n-    st_nlink: libc::uint64_t,\n-    st_uid: libc::uint64_t,\n-    st_gid: libc::uint64_t,\n-    st_rdev: libc::uint64_t,\n-    st_ino: libc::uint64_t,\n+    priv st_nlink: libc::uint64_t,\n+    priv st_uid: libc::uint64_t,\n+    priv st_gid: libc::uint64_t,\n+    priv st_rdev: libc::uint64_t,\n+    priv st_ino: libc::uint64_t,\n     st_size: libc::uint64_t,\n-    st_blksize: libc::uint64_t,\n-    st_blocks: libc::uint64_t,\n-    st_flags: libc::uint64_t,\n-    st_gen: libc::uint64_t,\n+    priv st_blksize: libc::uint64_t,\n+    priv st_blocks: libc::uint64_t,\n+    priv st_flags: libc::uint64_t,\n+    priv st_gen: libc::uint64_t,\n     st_atim: uv_timespec_t,\n     st_mtim: uv_timespec_t,\n     st_ctim: uv_timespec_t,\n-    st_birthtim: uv_timespec_t\n+    priv st_birthtim: uv_timespec_t\n }\n \n impl uv_stat_t {\n@@ -231,37 +231,37 @@ pub type socklen_t = c_int;\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"linux\")]\n pub struct addrinfo {\n-    ai_flags: c_int,\n-    ai_family: c_int,\n-    ai_socktype: c_int,\n-    ai_protocol: c_int,\n-    ai_addrlen: socklen_t,\n+    priv ai_flags: c_int,\n+    priv ai_family: c_int,\n+    priv ai_socktype: c_int,\n+    priv ai_protocol: c_int,\n+    priv ai_addrlen: socklen_t,\n     ai_addr: *sockaddr,\n-    ai_canonname: *char,\n+    priv ai_canonname: *char,\n     ai_next: *addrinfo\n }\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n pub struct addrinfo {\n-    ai_flags: c_int,\n-    ai_family: c_int,\n-    ai_socktype: c_int,\n-    ai_protocol: c_int,\n-    ai_addrlen: socklen_t,\n-    ai_canonname: *char,\n+    priv ai_flags: c_int,\n+    priv ai_family: c_int,\n+    priv ai_socktype: c_int,\n+    priv ai_protocol: c_int,\n+    priv ai_addrlen: socklen_t,\n+    priv ai_canonname: *char,\n     ai_addr: *sockaddr,\n     ai_next: *addrinfo\n }\n \n #[cfg(windows)]\n pub struct addrinfo {\n-    ai_flags: c_int,\n-    ai_family: c_int,\n-    ai_socktype: c_int,\n-    ai_protocol: c_int,\n-    ai_addrlen: size_t,\n-    ai_canonname: *char,\n+    priv ai_flags: c_int,\n+    priv ai_family: c_int,\n+    priv ai_socktype: c_int,\n+    priv ai_protocol: c_int,\n+    priv ai_addrlen: size_t,\n+    priv ai_canonname: *char,\n     ai_addr: *sockaddr,\n     ai_next: *addrinfo\n }\n@@ -960,8 +960,8 @@ pub unsafe fn freeaddrinfo(ai: *addrinfo) {\n }\n \n pub struct uv_err_data {\n-    err_name: ~str,\n-    err_msg: ~str,\n+    priv err_name: ~str,\n+    priv err_msg: ~str,\n }\n \n extern {"}, {"sha": "483bb18137309cd72c29d46f8dab57696a329400", "filename": "src/libstd/run.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -34,7 +34,6 @@ pub struct Process {\n \n /// Options that can be given when starting a Process.\n pub struct ProcessOptions<'self> {\n-\n     /**\n      * If this is None then the new process will have the same initial\n      * environment as the parent process.\n@@ -99,7 +98,6 @@ impl <'self> ProcessOptions<'self> {\n \n /// The output of a finished process.\n pub struct ProcessOutput {\n-\n     /// The status (exit code) of the process.\n     status: int,\n "}, {"sha": "f134788942cdb316bf0345e0567373936ac86eb0", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -998,7 +998,6 @@ pub fn utf8_char_width(b: u8) -> uint {\n pub struct CharRange {\n     /// Current `char`\n     ch: char,\n-\n     /// Index of the first byte of the next `char`\n     next: uint\n }"}, {"sha": "30c99c628853fed6114c2cd3d3dd37889069f784", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -108,7 +108,7 @@ pub enum SchedMode {\n  *\n  */\n pub struct SchedOpts {\n-    mode: SchedMode,\n+    priv mode: SchedMode,\n }\n \n /**\n@@ -144,11 +144,11 @@ pub struct SchedOpts {\n  *           scheduler other tasks will be impeded or even blocked indefinitely.\n  */\n pub struct TaskOpts {\n-    linked: bool,\n-    supervised: bool,\n-    watched: bool,\n-    indestructible: bool,\n-    notify_chan: Option<Chan<TaskResult>>,\n+    priv linked: bool,\n+    priv supervised: bool,\n+    priv watched: bool,\n+    priv indestructible: bool,\n+    priv notify_chan: Option<Chan<TaskResult>>,\n     name: Option<SendStr>,\n     sched: SchedOpts,\n     stack_size: Option<uint>\n@@ -170,9 +170,9 @@ pub struct TaskOpts {\n // FIXME (#3724): Replace the 'consumed' bit with move mode on self\n pub struct TaskBuilder {\n     opts: TaskOpts,\n-    gen_body: Option<~fn(v: ~fn()) -> ~fn()>,\n-    can_not_copy: Option<util::NonCopyable>,\n-    consumed: bool,\n+    priv gen_body: Option<~fn(v: ~fn()) -> ~fn()>,\n+    priv can_not_copy: Option<util::NonCopyable>,\n+    priv consumed: bool,\n }\n \n /**"}, {"sha": "dec13eded3983873a8d4511224a707873b18684e", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -308,10 +308,10 @@ fn each_ancestor(list:        &mut AncestorList,\n // One of these per task.\n pub struct Taskgroup {\n     // List of tasks with whose fates this one's is intertwined.\n-    tasks:      TaskGroupArc, // 'none' means the group has failed.\n+    priv tasks:      TaskGroupArc, // 'none' means the group has failed.\n     // Lists of tasks who will kill us if they fail, but whom we won't kill.\n-    ancestors:  AncestorList,\n-    notifier:   Option<AutoNotify>,\n+    priv ancestors:  AncestorList,\n+    priv notifier:   Option<AutoNotify>,\n }\n \n impl Drop for Taskgroup {"}, {"sha": "ee44bf4d9964a396a0f20adfcc259d5812bca230", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -49,23 +49,23 @@ pub struct TyDesc {\n     align: uint,\n \n     // Called on a copy of a value of type `T` *after* memcpy\n-    take_glue: GlueFn,\n+    priv take_glue: GlueFn,\n \n     // Called when a value of type `T` is no longer needed\n     drop_glue: GlueFn,\n \n     // Called by drop glue when a value of type `T` can be freed\n-    free_glue: GlueFn,\n+    priv free_glue: GlueFn,\n \n     // Called by reflection visitor to visit a value of type `T`\n-    visit_glue: GlueFn,\n+    priv visit_glue: GlueFn,\n \n     // If T represents a box pointer (`@U` or `~U`), then\n     // `borrow_offset` is the amount that the pointer must be adjusted\n     // to find the payload.  This is always derivable from the type\n     // `U`, but in the case of `@Trait` or `~Trait` objects, the type\n     // `U` is unknown.\n-    borrow_offset: uint,\n+    priv borrow_offset: uint,\n \n     // Name corresponding to the type\n     name: &'static str"}, {"sha": "b5d7cc47fdc55a1d16a721cbe48f4c14389f4a71", "filename": "src/libstd/unstable/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Funstable%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Funstable%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fraw.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -15,7 +15,7 @@ use unstable::intrinsics::TyDesc;\n pub struct Box<T> {\n     ref_count: uint,\n     type_desc: *TyDesc,\n-    prev: *Box<T>,\n+    priv prev: *Box<T>,\n     next: *Box<T>,\n     data: T\n }"}, {"sha": "9d15dd031e0dce2b51573cd5a0aabe78c3b9e5cf", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7453ad0dffd94e57389b893527111c98a96ec40/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=a7453ad0dffd94e57389b893527111c98a96ec40", "patch": "@@ -304,7 +304,7 @@ pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n type rust_little_lock = *libc::c_void;\n \n pub struct LittleLock {\n-    l: rust_little_lock,\n+    priv l: rust_little_lock,\n }\n \n impl Drop for LittleLock {\n@@ -353,7 +353,7 @@ struct ExData<T> {\n  * need to block or deschedule while accessing shared state, use extra::sync::RWArc.\n  */\n pub struct Exclusive<T> {\n-    x: UnsafeArc<ExData<T>>\n+    priv x: UnsafeArc<ExData<T>>\n }\n \n impl<T:Send> Clone for Exclusive<T> {"}]}