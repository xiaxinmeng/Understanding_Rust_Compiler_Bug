{"sha": "cdeba02ff71416e014f7130f75166890688be986", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZWJhMDJmZjcxNDE2ZTAxNGY3MTMwZjc1MTY2ODkwNjg4YmU5ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-15T03:51:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-15T03:51:03Z"}, "message": "Auto merge of #88558 - fee1-dead:const-drop, r=oli-obk\n\nConst drop\n\nThe changes are pretty primitive at this point. But at least it works. ^-^\n\nProblems with the current change that I can think of now:\n - [x] `~const Drop` shouldn't change anything in the non-const world.\n - [x] types that do not have drop glues shouldn't fail to satisfy `~const Drop` in const contexts. `struct S { a: u8, b: u16 }` This might not fail for `needs_non_const_drop`, but it will fail in `rustc_trait_selection`.\n - [x] The current change accepts types that have `const Drop` impls but have non-const `Drop` glue.\n\nFixes #88424.\n\nSignificant Changes:\n\n- `~const Drop` is no longer treated as a normal trait bound. In non-const contexts, this bound has no effect, but in const contexts, this restricts the input type and all of its transitive fields to either a) have a `const Drop` impl or b) can be trivially dropped (i.e. no drop glue)\n- `T: ~const Drop` will not be linted like `T: Drop`.\n- Instead of recursing and iterating through the type in `rustc_mir::transform::check_consts`, we use the trait system to special case `~const Drop`. See [`rustc_trait_selection::...::candidate_assembly#assemble_const_drop_candidates`](https://github.com/fee1-dead/rust/blob/const-drop/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L817) and others.\n\nChanges not related to `const Drop`ping and/or changes that are insignificant:\n\n - `Node.constness_for_typeck` no longer returns `hir::Constness::Const` for type aliases in traits. This was previously used to hack how we determine default bound constness for items. But because we now use an explicit opt-in, it is no longer needed.\n - Removed `is_const_impl_raw` query. We have `impl_constness`, and the only existing use of that query uses `HirId`, which means we can just operate it with hir.\n - `ty::Destructor` now has a field `constness`, which represents the constness of the destructor.\n\nr? `@oli-obk`", "tree": {"sha": "7abdff0663fd163ce1684276436982235b47f082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abdff0663fd163ce1684276436982235b47f082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdeba02ff71416e014f7130f75166890688be986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdeba02ff71416e014f7130f75166890688be986", "html_url": "https://github.com/rust-lang/rust/commit/cdeba02ff71416e014f7130f75166890688be986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdeba02ff71416e014f7130f75166890688be986/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c0f80d6081092faff801542dd82f0e2420152b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c0f80d6081092faff801542dd82f0e2420152b", "html_url": "https://github.com/rust-lang/rust/commit/c3c0f80d6081092faff801542dd82f0e2420152b"}, {"sha": "f749e05f6b95b66485c0417996d9aeb369def8da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f749e05f6b95b66485c0417996d9aeb369def8da", "html_url": "https://github.com/rust-lang/rust/commit/f749e05f6b95b66485c0417996d9aeb369def8da"}], "stats": {"total": 658, "additions": 552, "deletions": 106}, "files": [{"sha": "11153284cad8c3abe6240a86e0c0d55517a5e71c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -1669,7 +1669,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_ty, ty);\n             }\n             AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body))\n-                if self.in_const_trait_impl || ctxt == AssocCtxt::Trait =>\n+                if self.in_const_trait_impl\n+                    || ctxt == AssocCtxt::Trait\n+                    || matches!(sig.header.constness, Const::Yes(_)) =>\n             {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);"}, {"sha": "10afd9560fa956da688e68238a35b12d5c9a435e", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -34,8 +34,14 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n }\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n-    let parent_id = tcx.hir().get_parent_did(hir_id);\n-    if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }\n+    let parent_id = tcx.hir().get_parent_node(hir_id);\n+    matches!(\n+        tcx.hir().get(parent_id),\n+        hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n+            ..\n+        })\n+    )\n }\n \n /// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether\n@@ -70,19 +76,6 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-/// Checks whether the given item is an `impl` that has a `const` modifier.\n-fn is_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let node = tcx.hir().get(hir_id);\n-    matches!(\n-        node,\n-        hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n-            ..\n-        })\n-    )\n-}\n-\n fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     is_const_fn(tcx, def_id)\n         && match tcx.lookup_const_stability(def_id) {\n@@ -103,10 +96,5 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers {\n-        is_const_fn_raw,\n-        is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),\n-        is_promotable_const_fn,\n-        ..*providers\n-    };\n+    *providers = Providers { is_const_fn_raw, is_promotable_const_fn, ..*providers };\n }"}, {"sha": "d5682f702ba854390a689d9b9272c214bd31971e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -22,7 +22,7 @@ use std::mem;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp, Status};\n-use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n+use super::qualifs::{self, CustomEq, HasMutInterior, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n@@ -39,7 +39,7 @@ type QualifResults<'mir, 'tcx, Q> =\n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {\n     has_mut_interior: Option<QualifResults<'mir, 'tcx, HasMutInterior>>,\n-    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsDrop>>,\n+    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n     indirectly_mutable: Option<IndirectlyMutableResults<'mir, 'tcx>>,\n }\n \n@@ -80,14 +80,14 @@ impl Qualifs<'mir, 'tcx> {\n         location: Location,\n     ) -> bool {\n         let ty = ccx.body.local_decls[local].ty;\n-        if !NeedsDrop::in_any_value_of_ty(ccx, ty) {\n+        if !NeedsNonConstDrop::in_any_value_of_ty(ccx, ty) {\n             return false;\n         }\n \n         let needs_drop = self.needs_drop.get_or_insert_with(|| {\n             let ConstCx { tcx, body, .. } = *ccx;\n \n-            FlowSensitiveAnalysis::new(NeedsDrop, ccx)\n+            FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n                 .into_engine(tcx, &body)\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n@@ -988,12 +988,12 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 let mut err_span = self.span;\n \n-                // Check to see if the type of this place can ever have a drop impl. If not, this\n-                // `Drop` terminator is frivolous.\n-                let ty_needs_drop =\n-                    dropped_place.ty(self.body, self.tcx).ty.needs_drop(self.tcx, self.param_env);\n+                let ty_needs_non_const_drop = qualifs::NeedsNonConstDrop::in_any_value_of_ty(\n+                    self.ccx,\n+                    dropped_place.ty(self.body, self.tcx).ty,\n+                );\n \n-                if !ty_needs_drop {\n+                if !ty_needs_non_const_drop {\n                     return;\n                 }\n "}, {"sha": "f2ba5a1ebb19be757884b27d555268116199e560", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -5,7 +5,7 @@ use rustc_span::Span;\n \n use super::check::Qualifs;\n use super::ops::{self, NonConstOp};\n-use super::qualifs::{NeedsDrop, Qualif};\n+use super::qualifs::{NeedsNonConstDrop, Qualif};\n use super::ConstCx;\n \n /// Returns `true` if we should use the more precise live drop checker that runs after drop\n@@ -78,10 +78,10 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n         match &terminator.kind {\n             mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n-                if !NeedsDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n-                    bug!(\n-                        \"Drop elaboration left behind a Drop for a type that does not need dropping\"\n-                    );\n+                if !NeedsNonConstDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n+                    // Instead of throwing a bug, we just return here. This is because we have to\n+                    // run custom `const Drop` impls.\n+                    return;\n                 }\n \n                 if dropped_place.is_indirect() {"}, {"sha": "dc3927ed85b3da8fa8182549a11c3bc5cc16e762", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -3,10 +3,14 @@\n //! See the `Qualif` trait for more info.\n \n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n-use rustc_trait_selection::traits;\n+use rustc_trait_selection::traits::{\n+    self, ImplSource, Obligation, ObligationCause, SelectionContext,\n+};\n \n use super::ConstCx;\n \n@@ -17,7 +21,7 @@ pub fn in_any_value_of_ty(\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n-        needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n+        needs_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n         error_occured,\n     }\n@@ -97,22 +101,48 @@ impl Qualif for HasMutInterior {\n /// This must be ruled out (a) because we cannot run `Drop` during compile-time\n /// as that might not be a `const fn`, and (b) because implicit promotion would\n /// remove side-effects that occur as part of dropping that value.\n-pub struct NeedsDrop;\n+pub struct NeedsNonConstDrop;\n \n-impl Qualif for NeedsDrop {\n-    const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n+impl Qualif for NeedsNonConstDrop {\n+    const ANALYSIS_NAME: &'static str = \"flow_needs_nonconst_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n     fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n         qualifs.needs_drop\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-        ty.needs_drop(cx.tcx, cx.param_env)\n+        let drop_trait = if let Some(did) = cx.tcx.lang_items().drop_trait() {\n+            did\n+        } else {\n+            // there is no way to define a type that needs non-const drop\n+            // without having the lang item present.\n+            return false;\n+        };\n+        let trait_ref =\n+            ty::TraitRef { def_id: drop_trait, substs: cx.tcx.mk_substs_trait(ty, &[]) };\n+        let obligation = Obligation::new(\n+            ObligationCause::dummy(),\n+            cx.param_env,\n+            ty::Binder::dummy(ty::TraitPredicate {\n+                trait_ref,\n+                constness: ty::BoundConstness::ConstIfConst,\n+            }),\n+        );\n+\n+        let implsrc = cx.tcx.infer_ctxt().enter(|infcx| {\n+            let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+            selcx.select(&obligation)\n+        });\n+        match implsrc {\n+            Ok(Some(ImplSource::ConstDrop(_)))\n+            | Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => false,\n+            _ => true,\n+        }\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n-        adt.has_dtor(cx.tcx)\n+        adt.has_non_const_dtor(cx.tcx)\n     }\n }\n "}, {"sha": "52d04cb4ff1e0f689a6794e6d5d7631b4ece72fd", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -231,7 +231,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                         // We cannot promote things that need dropping, since the promoted value\n                         // would not get dropped.\n-                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n+                        if self.qualif_local::<qualifs::NeedsNonConstDrop>(place.local) {\n                             return Err(Unpromotable);\n                         }\n "}, {"sha": "5655c4c0e973ef3cd70c165617a394aa52c39b57", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -3234,12 +3234,7 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    /// Returns `Constness::Const` when this node is a const fn/impl/item,\n-    ///\n-    /// HACK(fee1-dead): or an associated type in a trait. This works because\n-    /// only typeck cares about const trait predicates, so although the predicates\n-    /// query would return const predicates when it does not need to be const,\n-    /// it wouldn't have any effect.\n+    /// Returns `Constness::Const` when this node is a const fn/impl/item.\n     pub fn constness_for_typeck(&self) -> Constness {\n         match self {\n             Node::Item(Item {\n@@ -3258,7 +3253,6 @@ impl<'hir> Node<'hir> {\n \n             Node::Item(Item { kind: ItemKind::Const(..), .. })\n             | Node::TraitItem(TraitItem { kind: TraitItemKind::Const(..), .. })\n-            | Node::TraitItem(TraitItem { kind: TraitItemKind::Type(..), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Const(..), .. }) => Constness::Const,\n \n             _ => Constness::NotConst,"}, {"sha": "5435ff1396de800c0841de33c4c74ae4dbfb9df0", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -86,6 +86,7 @@ declare_lint_pass!(\n \n impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        use rustc_middle::ty;\n         use rustc_middle::ty::PredicateKind::*;\n \n         let predicates = cx.tcx.explicit_predicates_of(item.def_id);\n@@ -94,6 +95,10 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                 Trait(trait_predicate) => trait_predicate,\n                 _ => continue,\n             };\n+            if trait_predicate.constness == ty::BoundConstness::ConstIfConst {\n+                // `~const Drop` definitely have meanings so avoid linting here.\n+                continue;\n+            }\n             let def_id = trait_predicate.trait_ref.def_id;\n             if cx.tcx.lang_items().drop_trait() == Some(def_id) {\n                 // Explicitly allow `impl Drop`, a drop-guards-as-Voldemort-type pattern."}, {"sha": "4296acce1ffbe294862ea6bec9ab15f933eafa7c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -552,14 +552,6 @@ rustc_queries! {\n         desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n     }\n \n-    /// Returns `true` if this is a const `impl`. **Do not call this function manually.**\n-    ///\n-    /// This query caches the base data for the `is_const_impl` helper function, which also\n-    /// takes into account stability attributes (e.g., `#[rustc_const_unstable]`).\n-    query is_const_impl_raw(key: DefId) -> bool {\n-        desc { |tcx| \"checking if item is const impl: `{}`\", tcx.def_path_str(key) }\n-    }\n-\n     query asyncness(key: DefId) -> hir::IsAsync {\n         desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n     }"}, {"sha": "07c2ffac8c78c097c50d3fa5575eb211e9855503", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -529,6 +529,9 @@ pub enum ImplSource<'tcx, N> {\n \n     /// ImplSource for a trait alias.\n     TraitAlias(ImplSourceTraitAliasData<'tcx, N>),\n+\n+    /// ImplSource for a `const Drop` implementation.\n+    ConstDrop(ImplSourceConstDropData),\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n@@ -543,7 +546,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::ConstDrop(ImplSourceConstDropData) => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n         }\n@@ -560,7 +564,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => &d.nested[..],\n             ImplSource::FnPointer(d) => &d.nested[..],\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::ConstDrop(ImplSourceConstDropData) => &[],\n             ImplSource::TraitAlias(d) => &d.nested[..],\n             ImplSource::TraitUpcasting(d) => &d.nested[..],\n         }\n@@ -621,6 +626,9 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: d.nested.into_iter().map(f).collect(),\n                 })\n             }\n+            ImplSource::ConstDrop(ImplSourceConstDropData) => {\n+                ImplSource::ConstDrop(ImplSourceConstDropData)\n+            }\n         }\n     }\n }\n@@ -712,6 +720,9 @@ pub struct ImplSourceDiscriminantKindData;\n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n pub struct ImplSourcePointeeData;\n \n+#[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+pub struct ImplSourceConstDropData;\n+\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,"}, {"sha": "3c0fedb360827ef9a0900f384afee996e3407ccf", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -143,6 +143,9 @@ pub enum SelectionCandidate<'tcx> {\n     BuiltinObjectCandidate,\n \n     BuiltinUnsizeCandidate,\n+\n+    /// Implementation of `const Drop`.\n+    ConstDropCandidate,\n }\n \n /// The result of trait evaluation. The order is important"}, {"sha": "6032004e6077652a408506098dad933be5ba54d4", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -32,6 +32,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitAlias(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n+\n+            super::ImplSource::ConstDrop(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -125,4 +127,5 @@ TrivialTypeFoldableAndLiftImpls! {\n     super::IfExpressionCause,\n     super::ImplSourceDiscriminantKindData,\n     super::ImplSourcePointeeData,\n+    super::ImplSourceConstDropData,\n }"}, {"sha": "c32f0ea9ca55a2c147c9177071379f92960b6a92", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -288,6 +289,10 @@ impl<'tcx> AdtDef {\n         self.destructor(tcx).is_some()\n     }\n \n+    pub fn has_non_const_dtor(&self, tcx: TyCtxt<'tcx>) -> bool {\n+        matches!(self.destructor(tcx), Some(Destructor { constness: hir::Constness::NotConst, .. }))\n+    }\n+\n     /// Asserts this is a struct or union and returns its unique variant.\n     pub fn non_enum_variant(&self) -> &VariantDef {\n         assert!(self.is_struct() || self.is_union());"}, {"sha": "777c6035be831c503043aacd9e89ca503952979c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -1377,6 +1377,8 @@ where\n pub struct Destructor {\n     /// The `DefId` of the destructor method\n     pub did: DefId,\n+    /// The constness of the destructor method\n+    pub constness: hir::Constness,\n }\n \n bitflags! {"}, {"sha": "2ec06d472fee0b9889f33ff146c267d2ee707f82", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -324,16 +324,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.ensure().coherent_trait(drop_trait);\n \n         let ty = self.type_of(adt_did);\n-        let dtor_did = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n+        let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n                 if validate(self, impl_did).is_ok() {\n-                    return Some(item.def_id);\n+                    return Some((item.def_id, self.impl_constness(impl_did)));\n                 }\n             }\n             None\n-        });\n+        })?;\n \n-        Some(ty::Destructor { did: dtor_did? })\n+        Some(ty::Destructor { did, constness })\n     }\n \n     /// Returns the set of types that are required to be alive in"}, {"sha": "4f22543950c0bf5785e00c10383b34c5b4879f3e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -1477,7 +1477,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             }\n             super::ImplSource::AutoImpl(..)\n             | super::ImplSource::Builtin(..)\n-            | super::ImplSource::TraitUpcasting(_) => {\n+            | super::ImplSource::TraitUpcasting(_)\n+            | super::ImplSource::ConstDrop(_) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1549,7 +1550,8 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::Param(..)\n         | super::ImplSource::Builtin(..)\n         | super::ImplSource::TraitUpcasting(_)\n-        | super::ImplSource::TraitAlias(..) => {\n+        | super::ImplSource::TraitAlias(..)\n+        | super::ImplSource::ConstDrop(_) => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "6d64dc8254bb4a426379aa977ba7790e6000a16a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -8,7 +8,7 @@\n use rustc_hir as hir;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits::coherence::Conflict;\n@@ -277,6 +277,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n         } else if lang_items.unsize_trait() == Some(def_id) {\n             self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n+        } else if lang_items.drop_trait() == Some(def_id)\n+            && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+        {\n+            if self.is_in_const_context {\n+                self.assemble_const_drop_candidates(obligation, &mut candidates)?;\n+            } else {\n+                debug!(\"passing ~const Drop bound; in non-const context\");\n+                // `~const Drop` when we are not in a const context has no effect.\n+                candidates.vec.push(ConstDropCandidate)\n+            }\n         } else {\n             if lang_items.clone_trait() == Some(def_id) {\n                 // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -803,4 +813,118 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn assemble_const_drop_candidates(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) -> Result<(), SelectionError<'tcx>> {\n+        let mut stack: Vec<(Ty<'tcx>, usize)> = vec![(obligation.self_ty().skip_binder(), 0)];\n+\n+        while let Some((ty, depth)) = stack.pop() {\n+            let mut noreturn = false;\n+\n+            self.check_recursion_depth(depth, obligation)?;\n+            let mut copy_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n+            let mut copy_obligation =\n+                obligation.with(obligation.predicate.rebind(ty::TraitPredicate {\n+                    trait_ref: ty::TraitRef {\n+                        def_id: self.tcx().require_lang_item(hir::LangItem::Copy, None),\n+                        substs: self.tcx().mk_substs_trait(ty, &[]),\n+                    },\n+                    constness: ty::BoundConstness::NotConst,\n+                }));\n+            copy_obligation.recursion_depth = depth + 1;\n+            self.assemble_candidates_from_impls(&copy_obligation, &mut copy_candidates);\n+            let copy_conditions = self.copy_clone_conditions(&copy_obligation);\n+            self.assemble_builtin_bound_candidates(copy_conditions, &mut copy_candidates);\n+            if !copy_candidates.vec.is_empty() {\n+                noreturn = true;\n+            }\n+            debug!(?copy_candidates.vec, \"assemble_const_drop_candidates - copy\");\n+\n+            match ty.kind() {\n+                ty::Int(_)\n+                | ty::Uint(_)\n+                | ty::Float(_)\n+                | ty::Infer(ty::IntVar(_))\n+                | ty::Infer(ty::FloatVar(_))\n+                | ty::FnPtr(_)\n+                | ty::Never\n+                | ty::Ref(..)\n+                | ty::FnDef(..)\n+                | ty::RawPtr(_)\n+                | ty::Bool\n+                | ty::Char\n+                | ty::Str\n+                | ty::Foreign(_) => {} // Do nothing. These types satisfy `const Drop`.\n+\n+                ty::Adt(def, subst) => {\n+                    let mut set = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n+                    self.assemble_candidates_from_impls(\n+                        &obligation.with(obligation.predicate.map_bound(|mut pred| {\n+                            pred.trait_ref.substs = self.tcx().mk_substs_trait(ty, &[]);\n+                            pred\n+                        })),\n+                        &mut set,\n+                    );\n+                    stack.extend(def.all_fields().map(|f| (f.ty(self.tcx(), subst), depth + 1)));\n+\n+                    debug!(?set.vec, \"assemble_const_drop_candidates - ty::Adt\");\n+                    if set.vec.into_iter().any(|candidate| {\n+                        if let SelectionCandidate::ImplCandidate(did) = candidate {\n+                            matches!(self.tcx().impl_constness(did), hir::Constness::NotConst)\n+                        } else {\n+                            false\n+                        }\n+                    }) {\n+                        if !noreturn {\n+                            // has non-const Drop\n+                            return Ok(());\n+                        }\n+                        debug!(\"not returning\");\n+                    }\n+                }\n+\n+                ty::Array(ty, _) => stack.push((ty, depth + 1)),\n+\n+                ty::Tuple(_) => stack.extend(ty.tuple_fields().map(|t| (t, depth + 1))),\n+\n+                ty::Closure(_, substs) => {\n+                    stack.extend(substs.as_closure().upvar_tys().map(|t| (t, depth + 1)))\n+                }\n+\n+                ty::Generator(_, substs, _) => {\n+                    let substs = substs.as_generator();\n+                    stack.extend(substs.upvar_tys().map(|t| (t, depth + 1)));\n+                    stack.push((substs.witness(), depth + 1));\n+                }\n+\n+                ty::GeneratorWitness(tys) => stack.extend(\n+                    self.tcx().erase_late_bound_regions(*tys).iter().map(|t| (t, depth + 1)),\n+                ),\n+\n+                ty::Slice(ty) => stack.push((ty, depth + 1)),\n+\n+                ty::Opaque(..)\n+                | ty::Dynamic(..)\n+                | ty::Error(_)\n+                | ty::Bound(..)\n+                | ty::Infer(_)\n+                | ty::Placeholder(_)\n+                | ty::Projection(..)\n+                | ty::Param(..) => {\n+                    if !noreturn {\n+                        return Ok(());\n+                    }\n+                    debug!(\"not returning\");\n+                }\n+            }\n+            debug!(?stack, \"assemble_const_drop_candidates - in loop\");\n+        }\n+        // all types have passed.\n+        candidates.vec.push(ConstDropCandidate);\n+\n+        Ok(())\n+    }\n }"}, {"sha": "3b6555de912e959465d14a13180ee4ed2ffdd9a7", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -28,7 +28,7 @@ use crate::traits::TraitNotObjectSafe;\n use crate::traits::VtblSegment;\n use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n use crate::traits::{\n-    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n+    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData, ImplSourceConstDropData,\n     ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n     ImplSourceObjectData, ImplSourcePointeeData, ImplSourceTraitAliasData,\n     ImplSourceTraitUpcastingData, ImplSourceUserDefinedData,\n@@ -124,6 +124,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let data = self.confirm_trait_upcasting_unsize_candidate(obligation, idx)?;\n                 Ok(ImplSource::TraitUpcasting(data))\n             }\n+\n+            ConstDropCandidate => Ok(ImplSource::ConstDrop(ImplSourceConstDropData)),\n         }\n     }\n "}, {"sha": "7b948a0939fff4233e040a6ce2f2671b0fc67e15", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -1038,19 +1038,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);\n     }\n \n-    /// Checks that the recursion limit has not been exceeded.\n-    ///\n-    /// The weird return type of this function allows it to be used with the `try` (`?`)\n-    /// operator within certain functions.\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(\n         &self,\n-        obligation: &Obligation<'tcx, T>,\n-        error_obligation: &Obligation<'tcx, V>,\n+        depth: usize,\n+        error_obligation: &Obligation<'tcx, T>,\n     ) -> Result<(), OverflowError> {\n-        if !self.infcx.tcx.recursion_limit().value_within_limit(obligation.recursion_depth) {\n+        if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n-                    self.infcx().report_overflow_error(error_obligation, true);\n+                    self.infcx.report_overflow_error(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n                     return Err(OverflowError);\n@@ -1060,6 +1056,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(())\n     }\n \n+    /// Checks that the recursion limit has not been exceeded.\n+    ///\n+    /// The weird return type of this function allows it to be used with the `try` (`?`)\n+    /// operator within certain functions.\n+    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+        &self,\n+        obligation: &Obligation<'tcx, T>,\n+        error_obligation: &Obligation<'tcx, V>,\n+    ) -> Result<(), OverflowError> {\n+        self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n+    }\n+\n     fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)\n     where\n         OP: FnOnce(&mut Self) -> R,\n@@ -1079,28 +1087,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n         if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n-            if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n-                != tcx.lang_items().sized_trait()\n-            // const Sized bounds are skipped\n-            {\n-                match candidate {\n-                    // const impl\n-                    ImplCandidate(def_id)\n-                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                    // const param\n-                    ParamCandidate(ty::ConstnessAnd {\n-                        constness: ty::BoundConstness::ConstIfConst,\n-                        ..\n-                    }) => {}\n-                    // auto trait impl\n-                    AutoImplCandidate(..) => {}\n-                    // generator, this will raise error in other places\n-                    // or ignore error with const_async_blocks feature\n-                    GeneratorCandidate => {}\n-                    _ => {\n-                        // reject all other types of candidates\n-                        return Err(Unimplemented);\n-                    }\n+            match candidate {\n+                // const impl\n+                ImplCandidate(def_id) if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                // const param\n+                ParamCandidate(ty::ConstnessAnd {\n+                    constness: ty::BoundConstness::ConstIfConst,\n+                    ..\n+                }) => {}\n+                // auto trait impl\n+                AutoImplCandidate(..) => {}\n+                // generator, this will raise error in other places\n+                // or ignore error with const_async_blocks feature\n+                GeneratorCandidate => {}\n+                ConstDropCandidate => {}\n+                _ => {\n+                    // reject all other types of candidates\n+                    return Err(Unimplemented);\n                 }\n             }\n         }\n@@ -1476,14 +1479,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n-                | PointeeCandidate,\n+                | PointeeCandidate\n+                | ConstDropCandidate,\n                 _,\n             ) => true,\n             (\n                 _,\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n-                | PointeeCandidate,\n+                | PointeeCandidate\n+                | ConstDropCandidate,\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {"}, {"sha": "87b729faa54e0ad5f34796d330d236b9270612e7", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -386,7 +386,8 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::TraitAlias(..)\n         | traits::ImplSource::DiscriminantKind(..)\n         | traits::ImplSource::Pointee(..)\n-        | traits::ImplSource::TraitUpcasting(_) => None,\n+        | traits::ImplSource::TraitUpcasting(_)\n+        | traits::ImplSource::ConstDrop(_) => None,\n     })\n }\n "}, {"sha": "32d271d94c8ea2ac79984c2fc5b7562237191e12", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -11,12 +11,15 @@ use rustc_span::{sym, DUMMY_SP};\n type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let adt_fields =\n+    let adt_components =\n         move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n+\n     // If we don't know a type doesn't need drop, for example if it's a type\n     // parameter without a `Copy` bound, then we conservatively return that it\n     // needs drop.\n-    let res = NeedsDropTypes::new(tcx, query.param_env, query.value, adt_fields).next().is_some();\n+    let res =\n+        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components).next().is_some();\n+\n     debug!(\"needs_drop_raw({:?}) = {:?}\", query, res);\n     res\n }"}, {"sha": "1ac62f0bfec053ec583767594b81773be477ed97", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -0,0 +1,59 @@\n+error: `~const` is not allowed here\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+\n+error[E0277]: the trait bound `NonTrivialDrop: Drop` is not satisfied\n+  --> $DIR/const-drop-fail.rs:45:5\n+   |\n+LL |     NonTrivialDrop,\n+   |     ^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const-drop-fail.rs:36:19\n+   |\n+LL | const fn check<T: ~const Drop>(_: T) {}\n+   |                   ^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: the trait bound `ConstImplWithDropGlue: Drop` is not satisfied\n+  --> $DIR/const-drop-fail.rs:47:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `ConstImplWithDropGlue`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const-drop-fail.rs:36:19\n+   |\n+LL | const fn check<T: ~const Drop>(_: T) {}\n+   |                   ^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:49:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:1\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:49:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3d4de088f5530f02cd9b8235160281c9192adb00", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -0,0 +1,54 @@\n+// revisions: stock precise\n+#![feature(const_trait_impl)]\n+#![feature(const_mut_refs)]\n+#![feature(const_fn_trait_bound)]\n+#![cfg_attr(precise, feature(const_precise_live_drops))]\n+\n+use std::marker::PhantomData;\n+\n+struct NonTrivialDrop;\n+\n+impl Drop for NonTrivialDrop {\n+    fn drop(&mut self) {\n+        println!(\"Non trivial drop\");\n+    }\n+}\n+\n+struct ConstImplWithDropGlue(NonTrivialDrop);\n+\n+impl const Drop for ConstImplWithDropGlue {\n+    fn drop(&mut self) {}\n+}\n+\n+trait A { fn a() { println!(\"A\"); } }\n+\n+impl A for NonTrivialDrop {}\n+\n+struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+//~^ ERROR `~const` is not allowed\n+\n+impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n+    fn drop(&mut self) {\n+        T::a();\n+    }\n+}\n+\n+const fn check<T: ~const Drop>(_: T) {}\n+\n+macro_rules! check_all {\n+    ($($exp:expr),*$(,)?) => {$(\n+        const _: () = check($exp);\n+    )*};\n+}\n+\n+check_all! {\n+    NonTrivialDrop,\n+    //~^ ERROR the trait bound\n+    ConstImplWithDropGlue(NonTrivialDrop),\n+    //~^ ERROR the trait bound\n+    ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+    //~^ ERROR the trait bound\n+    //~| ERROR the trait bound\n+}\n+\n+fn main() {}"}, {"sha": "1ac62f0bfec053ec583767594b81773be477ed97", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -0,0 +1,59 @@\n+error: `~const` is not allowed here\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n+\n+error[E0277]: the trait bound `NonTrivialDrop: Drop` is not satisfied\n+  --> $DIR/const-drop-fail.rs:45:5\n+   |\n+LL |     NonTrivialDrop,\n+   |     ^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const-drop-fail.rs:36:19\n+   |\n+LL | const fn check<T: ~const Drop>(_: T) {}\n+   |                   ^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: the trait bound `ConstImplWithDropGlue: Drop` is not satisfied\n+  --> $DIR/const-drop-fail.rs:47:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Drop` is not implemented for `ConstImplWithDropGlue`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/const-drop-fail.rs:36:19\n+   |\n+LL | const fn check<T: ~const Drop>(_: T) {}\n+   |                   ^^^^^^^^^^^ required by this bound in `check`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:49:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:1\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:49:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n+   |\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9a1b554f45f65b3b3b28564aaae80ee2ee8e1958", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -0,0 +1,81 @@\n+// run-pass\n+// revisions: stock precise\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_mut_refs)]\n+#![feature(const_panic)]\n+#![cfg_attr(precise, feature(const_precise_live_drops))]\n+\n+struct S<'a>(&'a mut u8);\n+\n+impl<'a> const Drop for S<'a> {\n+    fn drop(&mut self) {\n+        *self.0 += 1;\n+    }\n+}\n+\n+const fn a<T: ~const Drop>(_: T) {}\n+\n+const fn b() -> u8 {\n+    let mut c = 0;\n+    let _ = S(&mut c);\n+    a(S(&mut c));\n+    c\n+}\n+\n+const C: u8 = b();\n+\n+macro_rules! implements_const_drop {\n+    ($($exp:expr),*$(,)?) => {\n+        $(\n+            const _: () = a($exp);\n+        )*\n+    }\n+}\n+\n+#[allow(dead_code)]\n+mod t {\n+    pub struct Foo;\n+    pub enum Bar { A }\n+    pub fn foo() {}\n+    pub struct ConstDrop;\n+\n+    impl const Drop for ConstDrop {\n+        fn drop(&mut self) {}\n+    }\n+\n+    pub struct HasConstDrop(pub ConstDrop);\n+    pub struct TrivialFields(pub u8, pub i8, pub usize, pub isize);\n+}\n+\n+use t::*;\n+\n+implements_const_drop! {\n+    1u8,\n+    2,\n+    3.0,\n+    Foo,\n+    Bar::A,\n+    foo,\n+    ConstDrop,\n+    HasConstDrop(ConstDrop),\n+    TrivialFields(1, 2, 3, 4),\n+    &1,\n+    &1 as *const i32,\n+}\n+\n+fn main() {\n+    struct HasDropGlue(Box<u8>);\n+    struct HasDropImpl;\n+    impl Drop for HasDropImpl {\n+        fn drop(&mut self) {\n+            println!(\"not trivial drop\");\n+        }\n+    }\n+\n+    // These types should pass because ~const in a non-const context should have no effect.\n+    a(HasDropGlue(Box::new(0)));\n+    a(HasDropImpl);\n+\n+    assert_eq!(C, 2);\n+}"}, {"sha": "fe1015b3bf7ee0549f7471612b01cc74f290a936", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl-const-bounds.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdeba02ff71416e014f7130f75166890688be986/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs?ref=cdeba02ff71416e014f7130f75166890688be986", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+struct S;\n+\n+trait A {}\n+trait B {}\n+\n+impl const A for S {}\n+impl const B for S {}\n+\n+impl S {\n+    const fn a<T: ~const A>() where T: ~const B {\n+\n+    }\n+}\n+\n+const _: () = S::a::<S>();\n+\n+fn main() {}"}]}