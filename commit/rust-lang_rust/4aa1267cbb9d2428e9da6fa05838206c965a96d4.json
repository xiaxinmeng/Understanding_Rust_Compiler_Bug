{"sha": "4aa1267cbb9d2428e9da6fa05838206c965a96d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTEyNjdjYmI5ZDI0MjhlOWRhNmZhMDU4MzgyMDZjOTY1YTk2ZDQ=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T12:24:49Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T12:24:49Z"}, "message": "Update and bless tests for const read out of bounds", "tree": {"sha": "9efc0b34c080247f2c656b7e4e4e04a0bc31befd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9efc0b34c080247f2c656b7e4e4e04a0bc31befd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa1267cbb9d2428e9da6fa05838206c965a96d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmDYbigACgkQH1AezRu9\ncKdkhA//VmxDBpypJSquVJpxNjh79c4RBTFlqJ/E2ruafDoDQK3lYk4mzdMstJbs\nInIEnEFSVX4N9KSfjQQTAKY1z0FOiWXNeZfKna0f7o8fQrJHRpu5AyscSuT5d4IH\nT8vHpUDi6MsKu1B1Ep14xWVr7ZCV5hz1O8t88WAD0dHdFMNOGKHk+HmbrnohzrmF\nE7orrSqw7Uv5tC3qhZBD0fgbGrTEf/awPioY8akLcKPBZc2eOVwIN3MpSomC671m\nlOJpYoPi4txKLwi+o0Bqh+unBrI7rP2OcBnx3MCk0INlBij2vsxVYL3/av48j0ri\nZiEeB6tGue1CIfvL/+khzMigiJptPRvuLAFkuZ1IAlTcgs+wW6bWsKr52qekqUIA\nPJdVibPY9uJVWL4CAplF1YDbxzKAqUQXzdvKjUSH26aqsGWNsnqcw6oE+fTY2d77\nuA/gzE6oRrJQGzut7OdvafVJ7nJv7FLMHfiYzPUdF7Qol0LF/TVa/W9ygI2yHFGe\nJopEc7Gk40S4oJ49Py46lnDtQRebYd76SsafDbrBqNgu+ZIl/NFPZIWrPgBCBh/V\nDYqrNcWKhefd6CObhFrpyrqfAULsEbJ4vb1NhwqfGZ4Gym+7od6g0UPRIiPknCX7\n8x+mruiX1ZNgNIW9+gO4WtK7nYm3DXKWUaOhQxUkcnTZO8cSBdg=\n=tm1/\n-----END PGP SIGNATURE-----", "payload": "tree 9efc0b34c080247f2c656b7e4e4e04a0bc31befd\nparent c0125532ead50d3ae4bc4846e7fbdb23da6d8531\nauthor Albin Hedman <albin9604@gmail.com> 1624796689 +0200\ncommitter Albin Hedman <albin9604@gmail.com> 1624796689 +0200\n\nUpdate and bless tests for const read out of bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa1267cbb9d2428e9da6fa05838206c965a96d4", "html_url": "https://github.com/rust-lang/rust/commit/4aa1267cbb9d2428e9da6fa05838206c965a96d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa1267cbb9d2428e9da6fa05838206c965a96d4/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "html_url": "https://github.com/rust-lang/rust/commit/c0125532ead50d3ae4bc4846e7fbdb23da6d8531"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "c45198cc39b08f9d73e1b204ed04b74ee4219e92", "filename": "src/test/ui/const-ptr/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa1267cbb9d2428e9da6fa05838206c965a96d4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa1267cbb9d2428e9da6fa05838206c965a96d4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=4aa1267cbb9d2428e9da6fa05838206c965a96d4", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: any use of this value will cause an error\n+// error-pattern: evaluation of constant value failed\n \n #![feature(const_ptr_read)]\n #![feature(const_ptr_offset)]"}, {"sha": "67175d5d1f5c3509764e9e824816f4ba85b37541", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4aa1267cbb9d2428e9da6fa05838206c965a96d4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa1267cbb9d2428e9da6fa05838206c965a96d4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=4aa1267cbb9d2428e9da6fa05838206c965a96d4", "patch": "@@ -1,62 +1,70 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |              inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n    | \n-  ::: $DIR/out_of_bounds_read.rs:13:5\n+  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |     ------------------------------------------------------\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:13:33\n    |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |              inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |              inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n    | \n-  ::: $DIR/out_of_bounds_read.rs:14:5\n+  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |     --------------------------------------------------------\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:14:39\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |              inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   |              inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n    | \n-  ::: $DIR/out_of_bounds_read.rs:15:5\n+  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |     --------------------------------------------------------------------\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:15:37\n+   |\n+LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}]}