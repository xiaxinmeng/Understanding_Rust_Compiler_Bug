{"sha": "210f0cbd27b0621c47e15c74bbb16ab47a642999", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMGYwY2JkMjdiMDYyMWM0N2UxNWM3NGJiYjE2YWI0N2E2NDI5OTk=", "commit": {"author": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-07T13:30:20Z"}, "committer": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-07T13:31:51Z"}, "message": "Remove HasVisibility implementation", "tree": {"sha": "29254a5781765ac930e413bfee99f8d6abca1148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29254a5781765ac930e413bfee99f8d6abca1148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/210f0cbd27b0621c47e15c74bbb16ab47a642999", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEOrvX5g4uaJk/ZAnkk9Q25ma/D+4FAl60DcsACgkQk9Q25ma/\nD+7kygwArWmLrk4C0P5vOVfx4GlylQOABqRL6ddf4zDzXGa5+P3EWPYs+4hdxYno\nzeZhy0jsAzjtkKSX6+GjYQXYWz4UeaUeXOv6gAk14yRVXep0bcdpNxrQdr5C0vdR\nWycq+jDi4HKZgTExyR+tQ08zaymbiiO5luCuRklIxwg517OQWSyR7egnOyTSjYn4\nkAN7UhMT9BobFpYgCbYJKAexGHwcbOL6RqYGSU4dQaAXDAQ00aISQbP/sVPp8vXr\nwjV1T+Zu6Xm4l+cZnWmy7/JH5A9JcEdfCRwUVGFYIQZF6VIVgVnof9sF7vNq4BfX\nRy8ml2iCTaRu2wSEUdqNEIQL6nYiX6C3nPtN6QCQpaOlhb1RbHv02gWQTKYEzCOi\nVg4OSHNBWZ4RauNSknf4MWhueAsZso7OWflphacjYxlrxx6MHUIW2jqVDq1ac731\nKgqoHOVk2gRNpwBMBjMGHy9U5B1nqSFmtlxOlV9URHZNVF1T/SqloLt2SQvSXBA2\nBoLjbmDE\n=2C9p\n-----END PGP SIGNATURE-----", "payload": "tree 29254a5781765ac930e413bfee99f8d6abca1148\nparent bd9f1f7eb78843ddd91d259a04e988b0681a5db4\nauthor Fedor Sakharov <fedor.sakharov@gmail.com> 1588858220 +0300\ncommitter Fedor Sakharov <fedor.sakharov@gmail.com> 1588858311 +0300\n\nRemove HasVisibility implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/210f0cbd27b0621c47e15c74bbb16ab47a642999", "html_url": "https://github.com/rust-lang/rust/commit/210f0cbd27b0621c47e15c74bbb16ab47a642999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/210f0cbd27b0621c47e15c74bbb16ab47a642999/comments", "author": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "html_url": "https://github.com/rust-lang/rust/commit/bd9f1f7eb78843ddd91d259a04e988b0681a5db4"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "5f480c3040d79cc8def014f8b9754669a6d26bd3", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/210f0cbd27b0621c47e15c74bbb16ab47a642999/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210f0cbd27b0621c47e15c74bbb16ab47a642999/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=210f0cbd27b0621c47e15c74bbb16ab47a642999", "patch": "@@ -474,13 +474,6 @@ impl EnumVariant {\n     }\n }\n \n-impl HasVisibility for EnumVariant {\n-    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n-        let visibility = &db.enum_data(self.parent.id).visibility;\n-        visibility.resolve(db.upcast(), &self.parent.id.resolver(db.upcast()))\n-    }\n-}\n-\n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum Adt {"}, {"sha": "2bc34d449f2fd8b9404e9b59762d3cbe8124f521", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210f0cbd27b0621c47e15c74bbb16ab47a642999/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210f0cbd27b0621c47e15c74bbb16ab47a642999/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=210f0cbd27b0621c47e15c74bbb16ab47a642999", "patch": "@@ -33,7 +33,6 @@ pub struct StructData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub name: Name,\n-    pub visibility: RawVisibility,\n     pub variants: Arena<EnumVariantData>,\n }\n \n@@ -92,8 +91,7 @@ impl EnumData {\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n         lower_enum(db, &mut trace, &src, e.lookup(db).container.module(db));\n-        let visibility = RawVisibility::from_ast(db, src.with_value(src.value.visibility()));\n-        Arc::new(EnumData { name, visibility, variants: trace.into_arena() })\n+        Arc::new(EnumData { name, variants: trace.into_arena() })\n     }\n \n     pub fn variant(&self, name: &Name) -> Option<LocalEnumVariantId> {"}, {"sha": "f990e3bb97da08482d556e252a41276445cc5417", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/210f0cbd27b0621c47e15c74bbb16ab47a642999/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210f0cbd27b0621c47e15c74bbb16ab47a642999/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=210f0cbd27b0621c47e15c74bbb16ab47a642999", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Adt, Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n     Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n@@ -48,7 +48,10 @@ impl Definition {\n             Definition::Macro(_) => None,\n             Definition::Field(sf) => Some(sf.visibility(db)),\n             Definition::ModuleDef(def) => match def {\n-                ModuleDef::EnumVariant(id) => Some(id.visibility(db)),\n+                ModuleDef::EnumVariant(id) => {\n+                    let parent = id.parent_enum(db);\n+                    module?.visibility_of(db, &ModuleDef::Adt(Adt::Enum(parent)))\n+                }\n                 _ => module?.visibility_of(db, def),\n             },\n             Definition::SelfType(_) => None,"}]}