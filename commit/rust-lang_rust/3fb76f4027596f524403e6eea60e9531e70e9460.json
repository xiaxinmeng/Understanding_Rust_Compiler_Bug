{"sha": "3fb76f4027596f524403e6eea60e9531e70e9460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYjc2ZjQwMjc1OTZmNTI0NDAzZTZlZWE2MGU5NTMxZTcwZTk0NjA=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-29T02:32:03Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-06-26T14:54:49Z"}, "message": "inclusive range syntax lint (`...` \u2192 `..=`)\n\nOur implementation ends up changing the `PatKind::Range` variant in the\nAST to take a `Spanned<RangeEnd>` instead of just a `RangeEnd`, because\nthe alternative would be to try to infer the span of the range operator\nfrom the spans of the start and end subexpressions, which is both\nhideous and nontrivial to get right (whereas getting the change to the\nAST right was a simple game of type tennis).\n\nThis is concerning #51043.", "tree": {"sha": "7dd227fd8bf34166a93324df392ac057e2965b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dd227fd8bf34166a93324df392ac057e2965b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb76f4027596f524403e6eea60e9531e70e9460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb76f4027596f524403e6eea60e9531e70e9460", "html_url": "https://github.com/rust-lang/rust/commit/3fb76f4027596f524403e6eea60e9531e70e9460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb76f4027596f524403e6eea60e9531e70e9460/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057715557b51af125847da6d19b2e016283c5ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/057715557b51af125847da6d19b2e016283c5ae7", "html_url": "https://github.com/rust-lang/rust/commit/057715557b51af125847da6d19b2e016283c5ae7"}], "stats": {"total": 176, "additions": 154, "deletions": 22}, "files": [{"sha": "110ebf6b215a15ab4d840564d6ee0c3210d892a1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -3356,7 +3356,7 @@ impl<'a> LoweringContext<'a> {\n             PatKind::Ref(ref inner, mutbl) => {\n                 hir::PatKind::Ref(self.lower_pat(inner), self.lower_mutability(mutbl))\n             }\n-            PatKind::Range(ref e1, ref e2, ref end) => hir::PatKind::Range(\n+            PatKind::Range(ref e1, ref e2, Spanned { node: ref end, .. }) => hir::PatKind::Range(\n                 P(self.lower_expr(e1)),\n                 P(self.lower_expr(e2)),\n                 self.lower_range_end(end),"}, {"sha": "dfbfcfccf7c896f9bb6bc97598c4dcad75c644e5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -43,6 +43,7 @@ use std::collections::HashSet;\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::codemap::Spanned;\n use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n@@ -1669,6 +1670,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n     }\n }\n \n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -1701,3 +1703,39 @@ impl LintPass for SoftLints {\n         )\n     }\n }\n+\n+\n+declare_lint! {\n+    pub ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n+    Allow,\n+    \"`...` range patterns are deprecated\"\n+}\n+\n+\n+pub struct EllipsisInclusiveRangePatterns;\n+\n+impl LintPass for EllipsisInclusiveRangePatterns {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS)\n+    }\n+}\n+\n+impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n+    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat) {\n+        use self::ast::{PatKind, RangeEnd, RangeSyntax};\n+\n+        if let PatKind::Range(\n+            _, _, Spanned { span, node: RangeEnd::Included(RangeSyntax::DotDotDot) }\n+        ) = pat.node {\n+            let msg = \"`...` range patterns are deprecated\";\n+            let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, span, msg);\n+            err.span_suggestion_short_with_applicability(\n+                span, \"use `..=` for an inclusive range\", \"..=\".to_owned(),\n+                // FIXME: outstanding problem with precedence in ref patterns:\n+                // https://github.com/rust-lang/rust/issues/51043#issuecomment-392252285\n+                Applicability::MaybeIncorrect\n+            );\n+            err.emit()\n+        }\n+    }\n+}"}, {"sha": "ba373b5c0e89dc4f106efb8fa5b03f811900cc5e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -111,6 +111,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        AnonymousParameters,\n                        UnusedDocComment,\n                        BadRepr,\n+                       EllipsisInclusiveRangePatterns,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -188,7 +189,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     \"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n                     UNREACHABLE_PUB,\n-                    UNUSED_EXTERN_CRATES);\n+                    UNUSED_EXTERN_CRATES,\n+                    ELLIPSIS_INCLUSIVE_RANGE_PATTERNS);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "53465c071f33a1db651f031967010d4b513baca4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -617,7 +617,7 @@ pub enum PatKind {\n     /// A literal\n     Lit(P<Expr>),\n     /// A range pattern, e.g. `1...2`, `1..=2` or `1..2`\n-    Range(P<Expr>, P<Expr>, RangeEnd),\n+    Range(P<Expr>, P<Expr>, Spanned<RangeEnd>),\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n     Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),"}, {"sha": "c813ec1977b881bc00ee8cb3f6379af7f89c9c79", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -28,6 +28,7 @@ use self::AttributeGate::*;\n use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n+use codemap::Spanned;\n use edition::{ALL_EDITIONS, Edition};\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -1752,7 +1753,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                   pattern.span,\n                                   \"box pattern syntax is experimental\");\n             }\n-            PatKind::Range(_, _, RangeEnd::Excluded) => {\n+            PatKind::Range(_, _, Spanned { node: RangeEnd::Excluded, .. }) => {\n                 gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n                                    \"exclusive range pattern syntax is experimental\");\n             }"}, {"sha": "712d00fde32db9293496c68b0716a1c064b56a83", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -1137,10 +1137,10 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             }\n             PatKind::Box(inner) => PatKind::Box(folder.fold_pat(inner)),\n             PatKind::Ref(inner, mutbl) => PatKind::Ref(folder.fold_pat(inner), mutbl),\n-            PatKind::Range(e1, e2, end) => {\n+            PatKind::Range(e1, e2, Spanned { span, node: end }) => {\n                 PatKind::Range(folder.fold_expr(e1),\n                                folder.fold_expr(e2),\n-                               folder.fold_range_end(end))\n+                               Spanned { span, node: folder.fold_range_end(end) })\n             },\n             PatKind::Slice(before, slice, after) => {\n                 PatKind::Slice(before.move_map(|x| folder.fold_pat(x)),"}, {"sha": "21bd6c083244d0f8050d67dcf29bd313d5dee087", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -4024,12 +4024,14 @@ impl<'a> Parser<'a> {\n                             _ => panic!(\"can only parse `..`/`...`/`..=` for ranges \\\n                                          (checked above)\"),\n                         };\n+                        let op_span = self.span;\n                         // Parse range\n                         let span = lo.to(self.prev_span);\n                         let begin = self.mk_expr(span, ExprKind::Path(qself, path), ThinVec::new());\n                         self.bump();\n                         let end = self.parse_pat_range_end()?;\n-                        pat = PatKind::Range(begin, end, end_kind);\n+                        let op = Spanned { span: op_span, node: end_kind };\n+                        pat = PatKind::Range(begin, end, op);\n                     }\n                     token::OpenDelim(token::Brace) => {\n                         if qself.is_some() {\n@@ -4065,17 +4067,22 @@ impl<'a> Parser<'a> {\n                 // Try to parse everything else as literal with optional minus\n                 match self.parse_literal_maybe_minus() {\n                     Ok(begin) => {\n-                        if self.eat(&token::DotDotDot) {\n+                        let op_span = self.span;\n+                        if self.check(&token::DotDot) || self.check(&token::DotDotEq) ||\n+                                self.check(&token::DotDotDot) {\n+                            let end_kind = if self.eat(&token::DotDotDot) {\n+                                RangeEnd::Included(RangeSyntax::DotDotDot)\n+                            } else if self.eat(&token::DotDotEq) {\n+                                RangeEnd::Included(RangeSyntax::DotDotEq)\n+                            } else if self.eat(&token::DotDot) {\n+                                RangeEnd::Excluded\n+                            } else {\n+                                panic!(\"impossible case: we already matched \\\n+                                        on a range-operator token\")\n+                            };\n                             let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end,\n-                                    RangeEnd::Included(RangeSyntax::DotDotDot));\n-                        } else if self.eat(&token::DotDotEq) {\n-                            let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end,\n-                                    RangeEnd::Included(RangeSyntax::DotDotEq));\n-                        } else if self.eat(&token::DotDot) {\n-                            let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end, RangeEnd::Excluded);\n+                            let op = Spanned { span: op_span, node: end_kind };\n+                            pat = PatKind::Range(begin, end, op);\n                         } else {\n                             pat = PatKind::Lit(begin);\n                         }\n@@ -4096,7 +4103,9 @@ impl<'a> Parser<'a> {\n \n         if !allow_range_pat {\n             match pat.node {\n-                PatKind::Range(_, _, RangeEnd::Included(RangeSyntax::DotDotDot)) => {}\n+                PatKind::Range(\n+                    _, _, Spanned { node: RangeEnd::Included(RangeSyntax::DotDotDot), .. }\n+                ) => {},\n                 PatKind::Range(..) => {\n                     let mut err = self.struct_span_err(\n                         pat.span,"}, {"sha": "3359225e1596595647c813057f791f73c1e9375e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -16,7 +16,7 @@ use ast::{SelfKind, GenericBound, TraitBoundModifier};\n use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n-use codemap::{self, CodeMap};\n+use codemap::{self, CodeMap, Spanned};\n use syntax_pos::{self, BytePos};\n use syntax_pos::hygiene::{Mark, SyntaxContext};\n use parse::token::{self, BinOpToken, Token};\n@@ -2624,7 +2624,7 @@ impl<'a> State<'a> {\n                 self.print_pat(inner)?;\n             }\n             PatKind::Lit(ref e) => self.print_expr(&**e)?,\n-            PatKind::Range(ref begin, ref end, ref end_kind) => {\n+            PatKind::Range(ref begin, ref end, Spanned { node: ref end_kind, .. }) => {\n                 self.print_expr(begin)?;\n                 self.s.space()?;\n                 match *end_kind {"}, {"sha": "d16859df79e257c154b102d179e03cf01b55cc6d", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// run-rustfix\n+\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    let despondency = 2;\n+    match despondency {\n+        1..=2 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        _ => {}\n+    }\n+}"}, {"sha": "9d418aec0858fc3b416e91c4cb2b5ba153f09728", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// run-rustfix\n+\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    let despondency = 2;\n+    match despondency {\n+        1...2 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        _ => {}\n+    }\n+}"}, {"sha": "de04fed589b2396b09bed0f3032103c2bd39f78b", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -0,0 +1,12 @@\n+warning: `...` range patterns are deprecated\n+  --> $DIR/inclusive-range-pattern-syntax.rs:19:10\n+   |\n+LL |         1...2 => {}\n+   |          ^^^ help: use `..=` for an inclusive range\n+   |\n+note: lint level defined here\n+  --> $DIR/inclusive-range-pattern-syntax.rs:14:9\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "ce0c9947a05f67bb9ef281e30e421832a3528a4f", "filename": "src/test/ui/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -16,10 +16,14 @@\n // older ... syntax is still allowed as a stability guarantee.\n \n #![feature(box_patterns)]\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n \n pub fn main() {\n     match &12 {\n         &0...9 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n         //~^^ HELP add parentheses to clarify the precedence\n@@ -29,6 +33,8 @@ pub fn main() {\n \n     match Box::new(12) {\n         box 0...9 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n         //~^^ HELP add parentheses to clarify the precedence"}, {"sha": "cd5ce3035c683247399ab268bbe3c0fac809c4bb", "filename": "src/test/ui/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb76f4027596f524403e6eea60e9531e70e9460/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr?ref=3fb76f4027596f524403e6eea60e9531e70e9460", "patch": "@@ -1,14 +1,32 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:23:10\n+  --> $DIR/range-inclusive-pattern-precedence.rs:27:10\n    |\n LL |         &10..=15 => {}\n    |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:32:13\n+  --> $DIR/range-inclusive-pattern-precedence.rs:38:13\n    |\n LL |         box 10..=15 => {}\n    |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n+warning: `...` range patterns are deprecated\n+  --> $DIR/range-inclusive-pattern-precedence.rs:24:11\n+   |\n+LL |         &0...9 => {}\n+   |           ^^^ help: use `..=` for an inclusive range\n+   |\n+note: lint level defined here\n+  --> $DIR/range-inclusive-pattern-precedence.rs:19:9\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: `...` range patterns are deprecated\n+  --> $DIR/range-inclusive-pattern-precedence.rs:35:14\n+   |\n+LL |         box 0...9 => {}\n+   |              ^^^ help: use `..=` for an inclusive range\n+\n error: aborting due to 2 previous errors\n "}]}