{"sha": "d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "node_id": "C_kwDOAAsO6NoAKGQyODIzYTFiYmU4YWI2YjkxODVhMDk3MmJkYWQ1ZGJlOGYwZWEyYTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-18T12:07:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-18T12:07:09Z"}, "message": "Rollup merge of #111695 - fmease:dont-lump-together-alias-tys, r=compiler-errors\n\nExclude inherent projections from some alias type `match`es\n\nUpdating (hopefully) all remaining `match`es which I overlooked to update when adding `AliasKind::Inherent` in #109410.\n\nFixes #111399.\nSadly the regression test is a clippy test instead of a rustc one as I don't know of another way to test that a trait bound like `Ty::InhProj: Trait` doesn't cause a crash without reaching a cycle error first (this is getting old ^^').\n\n`@rustbot` label F-inherent_associated_types\nr? `@compiler-errors`", "tree": {"sha": "2769cd2523ac82839572110cf4daa748dd4f9b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2769cd2523ac82839572110cf4daa748dd4f9b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZhTtCRBK7hj4Ov3rIwAAdPEIAALr+Dz8yp/rwuPx7+lA/h1i\n9jpZYQXqd9AA2H9nQzyknQcgEzK+f8XbE7JL2mQPWgWyXR0kZkh5dDIrvjYeau4N\nHARcmTJrNUL2I59H2/UztClYQx6IqvzkKZesZOWwiIdc8UQQAayioFE8BM8EJDzs\nkhZo4m4rejo+A4HQRrYYYRG4XjFl6ajNFi4l32kG4R5K1SWuZtABVFvhQdN41pW9\nSeY+9DuvZBQZDWsk3suInCTqk+Qm7JzXDiEfjfKgcdF6XX27GDmVuoBH4aKWFMbu\nsY6TQHiHxjDNz4rUcRdZql6hAVUXanpsHgKRrKEF9Gugoo5Z3S/ZNiVJQ+gl0+s=\n=n60s\n-----END PGP SIGNATURE-----\n", "payload": "tree 2769cd2523ac82839572110cf4daa748dd4f9b99\nparent ea6ac450e20dcd1bd0748354b9d13688ea32bf0f\nparent 434f08884ecf2fd7ef0811956429c55359c4b195\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684411629 +0530\ncommitter GitHub <noreply@github.com> 1684411629 +0530\n\nRollup merge of #111695 - fmease:dont-lump-together-alias-tys, r=compiler-errors\n\nExclude inherent projections from some alias type `match`es\n\nUpdating (hopefully) all remaining `match`es which I overlooked to update when adding `AliasKind::Inherent` in #109410.\n\nFixes #111399.\nSadly the regression test is a clippy test instead of a rustc one as I don't know of another way to test that a trait bound like `Ty::InhProj: Trait` doesn't cause a crash without reaching a cycle error first (this is getting old ^^').\n\n`@rustbot` label F-inherent_associated_types\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "html_url": "https://github.com/rust-lang/rust/commit/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6ac450e20dcd1bd0748354b9d13688ea32bf0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6ac450e20dcd1bd0748354b9d13688ea32bf0f", "html_url": "https://github.com/rust-lang/rust/commit/ea6ac450e20dcd1bd0748354b9d13688ea32bf0f"}, {"sha": "434f08884ecf2fd7ef0811956429c55359c4b195", "url": "https://api.github.com/repos/rust-lang/rust/commits/434f08884ecf2fd7ef0811956429c55359c4b195", "html_url": "https://github.com/rust-lang/rust/commit/434f08884ecf2fd7ef0811956429c55359c4b195"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "d14e6244f7d0774335a413ce5649fe9adc796811", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "patch": "@@ -506,10 +506,12 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Param(_)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+            | ty::Alias(ty::Inherent, _)\n             | ty::Error(_) => return,\n             ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n             | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n-            ty::Alias(_, alias_ty) => alias_ty,\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, alias_ty) => alias_ty,\n         };\n \n         for assumption in self.tcx().item_bounds(alias_ty.def_id).subst(self.tcx(), alias_ty.substs)"}, {"sha": "51069897120af6bb779a0ea5898454ade6316d32", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "patch": "@@ -1543,7 +1543,10 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Alias(_, ref data) => tcx.item_bounds(data.def_id).subst(tcx, data.substs),\n+        // Excluding IATs here as they don't have meaningful item bounds.\n+        ty::Alias(ty::Projection | ty::Opaque, ref data) => {\n+            tcx.item_bounds(data.def_id).subst(tcx, data.substs)\n+        }\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "aa230936903f1ce75a1473539d07594ec77c078c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "patch": "@@ -143,7 +143,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n-            ty::Alias(..) => {}\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, _) => {}\n             ty::Infer(ty::TyVar(_)) => {\n                 span_bug!(\n                     obligation.cause.span,"}, {"sha": "de023501f9e8595e69cff010498499fd109bf720", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "patch": "@@ -156,7 +156,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+                (def_id, substs)\n+            }\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "f1bd9f5bbf8fa649910d05a9fbaa455a661dbd74", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "patch": "@@ -1645,7 +1645,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n+            ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+                (def_id, substs)\n+            }\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,"}, {"sha": "b65e6c7261a57b3ed339abe49f97f8854b649c60", "filename": "src/tools/clippy/tests/ui/issue-111399.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs?ref=d2823a1bbe8ab6b9185a0972bdad5dbe8f0ea2a9", "patch": "@@ -0,0 +1,13 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that rustc doesn't crash on the trait bound `Self::Ty: std::marker::Freeze`.\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    pub type Ty = usize;\n+    pub const CT: Self::Ty = 42;\n+}\n+\n+fn main() {}"}]}