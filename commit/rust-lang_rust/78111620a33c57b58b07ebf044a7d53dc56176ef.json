{"sha": "78111620a33c57b58b07ebf044a7d53dc56176ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MTExNjIwYTMzYzU3YjU4YjA3ZWJmMDQ0YTdkNTNkYzU2MTc2ZWY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:22:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Remove visibility query, instead add struct field visibility to data\n\nMethods should be handled the same, and for items the visibility will be in the\ndef map.", "tree": {"sha": "8d5d2f89db0db56f8abfbda59b4391a7b0dff9db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d5d2f89db0db56f8abfbda59b4391a7b0dff9db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78111620a33c57b58b07ebf044a7d53dc56176ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78111620a33c57b58b07ebf044a7d53dc56176ef", "html_url": "https://github.com/rust-lang/rust/commit/78111620a33c57b58b07ebf044a7d53dc56176ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78111620a33c57b58b07ebf044a7d53dc56176ef/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ebff257dafe6e820f002241466ff4a98aa1f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ebff257dafe6e820f002241466ff4a98aa1f32", "html_url": "https://github.com/rust-lang/rust/commit/50ebff257dafe6e820f002241466ff4a98aa1f32"}], "stats": {"total": 137, "additions": 35, "deletions": 102}, "files": [{"sha": "9612c86da52123a5e8289d952ff94c8387fd8dd1", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=78111620a33c57b58b07ebf044a7d53dc56176ef", "patch": "@@ -257,8 +257,8 @@ impl StructField {\n \n impl HasVisibility for StructField {\n     fn visibility(&self, db: &impl HirDatabase) -> Visibility {\n-        let struct_field_id: hir_def::StructFieldId = (*self).into();\n-        let visibility = db.visibility(struct_field_id.into());\n+        let variant_data = self.parent.variant_data(db);\n+        let visibility = &variant_data.fields()[self.id].visibility;\n         let parent_id: hir_def::VariantId = self.parent.into();\n         visibility.resolve(db, &parent_id.resolver(db))\n     }"}, {"sha": "aac5f3e15360eb9fb9bd0ce20deeef0ea58c3066", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=78111620a33c57b58b07ebf044a7d53dc56176ef", "patch": "@@ -9,11 +9,12 @@ use hir_expand::{\n };\n use ra_arena::{map::ArenaMap, Arena};\n use ra_prof::profile;\n-use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n use crate::{\n-    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef, EnumId,\n-    LocalEnumVariantId, LocalStructFieldId, Lookup, StructId, UnionId, VariantId,\n+    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef,\n+    visibility::RawVisibility, EnumId, LocalEnumVariantId, LocalStructFieldId, Lookup, StructId,\n+    UnionId, VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -47,24 +48,27 @@ pub enum VariantData {\n pub struct StructFieldData {\n     pub name: Name,\n     pub type_ref: TypeRef,\n+    pub visibility: RawVisibility,\n }\n \n impl StructData {\n     pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructId) -> Arc<StructData> {\n         let src = id.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let variant_data = VariantData::new(src.value.kind());\n+        let variant_data = VariantData::new(db, src.map(|s| s.kind()));\n         let variant_data = Arc::new(variant_data);\n         Arc::new(StructData { name, variant_data })\n     }\n     pub(crate) fn union_data_query(db: &impl DefDatabase, id: UnionId) -> Arc<StructData> {\n         let src = id.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(\n-            src.value\n-                .record_field_def_list()\n-                .map(ast::StructKind::Record)\n-                .unwrap_or(ast::StructKind::Unit),\n+            db,\n+            src.map(|s| {\n+                s.record_field_def_list()\n+                    .map(ast::StructKind::Record)\n+                    .unwrap_or(ast::StructKind::Unit)\n+            }),\n         );\n         let variant_data = Arc::new(variant_data);\n         Arc::new(StructData { name, variant_data })\n@@ -77,7 +81,7 @@ impl EnumData {\n         let src = e.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n-        lower_enum(&mut trace, &src.value);\n+        lower_enum(db, &mut trace, &src);\n         Arc::new(EnumData { name, variants: trace.into_arena() })\n     }\n \n@@ -93,30 +97,31 @@ impl HasChildSource for EnumId {\n     fn child_source(&self, db: &impl DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n-        lower_enum(&mut trace, &src.value);\n+        lower_enum(db, &mut trace, &src);\n         src.with_value(trace.into_map())\n     }\n }\n \n fn lower_enum(\n+    db: &impl DefDatabase,\n     trace: &mut Trace<LocalEnumVariantId, EnumVariantData, ast::EnumVariant>,\n-    ast: &ast::EnumDef,\n+    ast: &InFile<ast::EnumDef>,\n ) {\n-    for var in ast.variant_list().into_iter().flat_map(|it| it.variants()) {\n+    for var in ast.value.variant_list().into_iter().flat_map(|it| it.variants()) {\n         trace.alloc(\n             || var.clone(),\n             || EnumVariantData {\n                 name: var.name().map_or_else(Name::missing, |it| it.as_name()),\n-                variant_data: Arc::new(VariantData::new(var.kind())),\n+                variant_data: Arc::new(VariantData::new(db, ast.with_value(var.kind()))),\n             },\n         );\n     }\n }\n \n impl VariantData {\n-    fn new(flavor: ast::StructKind) -> Self {\n+    fn new(db: &impl DefDatabase, flavor: InFile<ast::StructKind>) -> Self {\n         let mut trace = Trace::new_for_arena();\n-        match lower_struct(&mut trace, &flavor) {\n+        match lower_struct(db, &mut trace, &flavor) {\n             StructKind::Tuple => VariantData::Tuple(trace.into_arena()),\n             StructKind::Record => VariantData::Record(trace.into_arena()),\n             StructKind::Unit => VariantData::Unit,\n@@ -163,7 +168,7 @@ impl HasChildSource for VariantId {\n             }),\n         };\n         let mut trace = Trace::new_for_map();\n-        lower_struct(&mut trace, &src.value);\n+        lower_struct(db, &mut trace, &src);\n         src.with_value(trace.into_map())\n     }\n }\n@@ -175,21 +180,23 @@ enum StructKind {\n }\n \n fn lower_struct(\n+    db: &impl DefDatabase,\n     trace: &mut Trace<\n         LocalStructFieldId,\n         StructFieldData,\n         Either<ast::TupleFieldDef, ast::RecordFieldDef>,\n     >,\n-    ast: &ast::StructKind,\n+    ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n-    match ast {\n+    match &ast.value {\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n                 trace.alloc(\n                     || Either::Left(fd.clone()),\n                     || StructFieldData {\n                         name: Name::new_tuple_field(i),\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n+                        visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );\n             }\n@@ -202,6 +209,7 @@ fn lower_struct(\n                     || StructFieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n+                        visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );\n             }"}, {"sha": "c55fd411107f9baca6fa9d569c6318a7aebbaa35", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=78111620a33c57b58b07ebf044a7d53dc56176ef", "patch": "@@ -14,10 +14,9 @@ use crate::{\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::{raw::RawItems, CrateDefMap},\n-    visibility::RawVisibility,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n-    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VisibilityDefId,\n+    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -91,9 +90,6 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     #[salsa::invoke(Attrs::attrs_query)]\n     fn attrs(&self, def: AttrDefId) -> Attrs;\n \n-    #[salsa::invoke(RawVisibility::visibility_query)]\n-    fn visibility(&self, def: VisibilityDefId) -> RawVisibility;\n-\n     #[salsa::invoke(LangItems::module_lang_items_query)]\n     fn module_lang_items(&self, module: ModuleId) -> Option<Arc<LangItems>>;\n "}, {"sha": "61f044ecf0b4170712437d83fe9d45ec1fe9892e", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=78111620a33c57b58b07ebf044a7d53dc56176ef", "patch": "@@ -325,29 +325,6 @@ impl_froms!(\n     ImplId\n );\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum VisibilityDefId {\n-    ModuleId(ModuleId),\n-    StructFieldId(StructFieldId),\n-    AdtId(AdtId),\n-    FunctionId(FunctionId),\n-    StaticId(StaticId),\n-    ConstId(ConstId),\n-    TraitId(TraitId),\n-    TypeAliasId(TypeAliasId),\n-}\n-\n-impl_froms!(\n-    VisibilityDefId: ModuleId,\n-    StructFieldId,\n-    AdtId(StructId, EnumId, UnionId),\n-    StaticId,\n-    ConstId,\n-    FunctionId,\n-    TraitId,\n-    TypeAliasId\n-);\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum VariantId {\n     EnumVariantId(EnumVariantId),"}, {"sha": "dccf2776e2fa470c7c875188e2ee0dc7ba511a08", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 6, "deletions": 54, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78111620a33c57b58b07ebf044a7d53dc56176ef/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=78111620a33c57b58b07ebf044a7d53dc56176ef", "patch": "@@ -2,16 +2,13 @@\n \n use std::sync::Arc;\n \n-use either::Either;\n-\n use hir_expand::{hygiene::Hygiene, InFile};\n-use ra_syntax::ast::{self, VisibilityOwner};\n+use ra_syntax::ast;\n \n use crate::{\n     db::DefDatabase,\n     path::{ModPath, PathKind},\n-    src::{HasChildSource, HasSource},\n-    AdtId, Lookup, ModuleId, VisibilityDefId,\n+    ModuleId,\n };\n \n /// Visibility of an item, not yet resolved.\n@@ -28,51 +25,15 @@ pub enum RawVisibility {\n }\n \n impl RawVisibility {\n-    pub(crate) fn visibility_query(db: &impl DefDatabase, def: VisibilityDefId) -> RawVisibility {\n-        match def {\n-            VisibilityDefId::ModuleId(module) => {\n-                let def_map = db.crate_def_map(module.krate);\n-                let src = match def_map[module.local_id].declaration_source(db) {\n-                    Some(it) => it,\n-                    None => return RawVisibility::private(),\n-                };\n-                RawVisibility::from_ast(db, src.map(|it| it.visibility()))\n-            }\n-            VisibilityDefId::StructFieldId(it) => {\n-                let src = it.parent.child_source(db);\n-                let is_enum = match it.parent {\n-                    crate::VariantId::EnumVariantId(_) => true,\n-                    _ => false,\n-                };\n-                let vis_node = src.map(|m| match &m[it.local_id] {\n-                    Either::Left(tuple) => tuple.visibility(),\n-                    Either::Right(record) => record.visibility(),\n-                });\n-                if vis_node.value.is_none() && is_enum {\n-                    RawVisibility::Public\n-                } else {\n-                    RawVisibility::from_ast(db, vis_node)\n-                }\n-            }\n-            VisibilityDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => visibility_from_loc(it.lookup(db), db),\n-                AdtId::EnumId(it) => visibility_from_loc(it.lookup(db), db),\n-                AdtId::UnionId(it) => visibility_from_loc(it.lookup(db), db),\n-            },\n-            VisibilityDefId::TraitId(it) => visibility_from_loc(it.lookup(db), db),\n-            VisibilityDefId::ConstId(it) => visibility_from_loc(it.lookup(db), db),\n-            VisibilityDefId::StaticId(it) => visibility_from_loc(it.lookup(db), db),\n-            VisibilityDefId::FunctionId(it) => visibility_from_loc(it.lookup(db), db),\n-            VisibilityDefId::TypeAliasId(it) => visibility_from_loc(it.lookup(db), db),\n-        }\n-    }\n-\n     fn private() -> RawVisibility {\n         let path = ModPath { kind: PathKind::Super(0), segments: Vec::new() };\n         RawVisibility::Module(Arc::new(path))\n     }\n \n-    fn from_ast(db: &impl DefDatabase, node: InFile<Option<ast::Visibility>>) -> RawVisibility {\n+    pub(crate) fn from_ast(\n+        db: &impl DefDatabase,\n+        node: InFile<Option<ast::Visibility>>,\n+    ) -> RawVisibility {\n         Self::from_ast_with_hygiene(node.value, &Hygiene::new(db, node.file_id))\n     }\n \n@@ -155,12 +116,3 @@ impl Visibility {\n         ancestors.any(|m| m == to_module.local_id)\n     }\n }\n-\n-fn visibility_from_loc<T>(node: T, db: &impl DefDatabase) -> RawVisibility\n-where\n-    T: HasSource,\n-    T::Value: ast::VisibilityOwner,\n-{\n-    let src = node.source(db);\n-    RawVisibility::from_ast(db, src.map(|n| n.visibility()))\n-}"}]}