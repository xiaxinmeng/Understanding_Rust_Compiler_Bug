{"sha": "b41105ba2656c7e70665737268828dc3a1820cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MTEwNWJhMjY1NmM3ZTcwNjY1NzM3MjY4ODI4ZGMzYTE4MjBjZjE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-11T18:38:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-11T18:38:40Z"}, "message": "Rollup merge of #52239 - CAD97:patch-1, r=alexcrichton\n\nRemove sync::Once::call_once 'static bound\n\nSee https://internals.rust-lang.org/t/sync-once-per-instance/7918 for more context.\n\nSuggested r is @alexcrichton, the one who added the `'static` bound back in 2014. I don't want to officially r? though, if the system would even let me. I'd rather let the system choose the appropriate member since it knows more than I do.\n\n`git blame` history for `sync::Once::call_once`'s signature:\n\n- [std: Second pass stabilization of sync](https://github.com/rust-lang/rust/commit/f3a7ec7028c76b3a1c6051131328f372b068e33a) (Dec 2014)\n\n    ```diff\n    -    pub fn doit<F>(&'static self, f: F) where F: FnOnce() {\n    +    #[stable]\n    +    pub fn call_once<F>(&'static self, f: F) where F: FnOnce() {\n    ```\n\n- [libstd: use unboxed closures](https://github.com/rust-lang/rust/commit/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b) (Dec 2014)\n\n    ```diff\n    -    pub fn doit(&'static self, f: ||) {\n    +    pub fn doit<F>(&'static self, f: F) where F: FnOnce() {\n    ```\n\n- [std: Rewrite the `sync` module](https://github.com/rust-lang/rust/commit/71d4e77db8ad4b6d821da7e5d5300134ac95974e) (Nov 2014)\n\n    ```diff\n    -    pub fn doit(&self, f: ||) {\n    +    pub fn doit(&'static self, f: ||) {\n    ```\n\n    > ```text\n    >  The second layer is the layer provided by `std::sync` which is intended to be\n    >  the thinnest possible layer on top of `sys_common` which is entirely safe to\n    >  use. There are a few concerns which need to be addressed when making these\n    >  system primitives safe:\n    >\n    >    * Once used, the OS primitives can never be **moved**. This means that they\n    >      essentially need to have a stable address. The static primitives use\n    >      `&'static self` to enforce this, and the non-static primitives all use a\n    >      `Box` to provide this guarantee.\n    > ```\n\nThe author of this diff is @alexcrichton. `sync::Once` now contains only a pointer to (privately hidden) `Waiter`s, which are all stack-allocated. The `'static` bound to `sync::Once` is thus unnecessary to guarantee that any OS primitives are non-relocatable.\n\nAs the `'static` bound is not required for `sync::Once`'s operation, removing it is strictly more useful. As an example, it allows attaching a one-time operation to instances rather than only to global singletons.", "tree": {"sha": "5a4a3246895836119349e1b219cf3f73401b8b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4a3246895836119349e1b219cf3f73401b8b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41105ba2656c7e70665737268828dc3a1820cf1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRk6wCRBK7hj4Ov3rIwAAdHIIAKEGY6yXaM5eblRj+EMhmzqh\n1oyJNATuSUOvyoMamtk9RjBiq32kXXsd75xYeTXYLFxSGkugrcGY3eQD4aDOCWLv\nja+RDN6gTEiXKIHikg1reoqIioygNa4vKuW26ilKjqETFdnmALhfn0N3DmPasGOc\nuHnzB8mDNbpLYKUWYxpAWfvhaSbOTO1mdmbxN0bOiUXE5T/CWJjKX3hRnzZJXhlP\ngzaAzpF5KFHJ6idOqP4hvhXGn3OZSly3A7gGhZzcKqJdKpcgqTOfw2NUXHIMbL26\ncyItU/vLGE1/D77vHmLkzEwHpRoKHvWHUE3HDbBGkejBlICa4cDjTiuTmQ2fJyw=\n=sCqh\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a4a3246895836119349e1b219cf3f73401b8b35\nparent 2d49909f45d1f6851f26a983190047f64ab6b559\nparent 0f3f292b4c7a15b656a925e7ebe5f2d3955b8553\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1531334320 -0600\ncommitter GitHub <noreply@github.com> 1531334320 -0600\n\nRollup merge of #52239 - CAD97:patch-1, r=alexcrichton\n\nRemove sync::Once::call_once 'static bound\n\nSee https://internals.rust-lang.org/t/sync-once-per-instance/7918 for more context.\n\nSuggested r is @alexcrichton, the one who added the `'static` bound back in 2014. I don't want to officially r? though, if the system would even let me. I'd rather let the system choose the appropriate member since it knows more than I do.\n\n`git blame` history for `sync::Once::call_once`'s signature:\n\n- [std: Second pass stabilization of sync](https://github.com/rust-lang/rust/commit/f3a7ec7028c76b3a1c6051131328f372b068e33a) (Dec 2014)\n\n    ```diff\n    -    pub fn doit<F>(&'static self, f: F) where F: FnOnce() {\n    +    #[stable]\n    +    pub fn call_once<F>(&'static self, f: F) where F: FnOnce() {\n    ```\n\n- [libstd: use unboxed closures](https://github.com/rust-lang/rust/commit/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b) (Dec 2014)\n\n    ```diff\n    -    pub fn doit(&'static self, f: ||) {\n    +    pub fn doit<F>(&'static self, f: F) where F: FnOnce() {\n    ```\n\n- [std: Rewrite the `sync` module](https://github.com/rust-lang/rust/commit/71d4e77db8ad4b6d821da7e5d5300134ac95974e) (Nov 2014)\n\n    ```diff\n    -    pub fn doit(&self, f: ||) {\n    +    pub fn doit(&'static self, f: ||) {\n    ```\n\n    > ```text\n    >  The second layer is the layer provided by `std::sync` which is intended to be\n    >  the thinnest possible layer on top of `sys_common` which is entirely safe to\n    >  use. There are a few concerns which need to be addressed when making these\n    >  system primitives safe:\n    >\n    >    * Once used, the OS primitives can never be **moved**. This means that they\n    >      essentially need to have a stable address. The static primitives use\n    >      `&'static self` to enforce this, and the non-static primitives all use a\n    >      `Box` to provide this guarantee.\n    > ```\n\nThe author of this diff is @alexcrichton. `sync::Once` now contains only a pointer to (privately hidden) `Waiter`s, which are all stack-allocated. The `'static` bound to `sync::Once` is thus unnecessary to guarantee that any OS primitives are non-relocatable.\n\nAs the `'static` bound is not required for `sync::Once`'s operation, removing it is strictly more useful. As an example, it allows attaching a one-time operation to instances rather than only to global singletons.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41105ba2656c7e70665737268828dc3a1820cf1", "html_url": "https://github.com/rust-lang/rust/commit/b41105ba2656c7e70665737268828dc3a1820cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41105ba2656c7e70665737268828dc3a1820cf1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d49909f45d1f6851f26a983190047f64ab6b559", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d49909f45d1f6851f26a983190047f64ab6b559", "html_url": "https://github.com/rust-lang/rust/commit/2d49909f45d1f6851f26a983190047f64ab6b559"}, {"sha": "0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "html_url": "https://github.com/rust-lang/rust/commit/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "51c42995d5e71947c60783b12935bc17e9940eb1", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b41105ba2656c7e70665737268828dc3a1820cf1/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41105ba2656c7e70665737268828dc3a1820cf1/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=b41105ba2656c7e70665737268828dc3a1820cf1", "patch": "@@ -149,9 +149,9 @@ struct Waiter {\n \n // Helper struct used to clean up after a closure call with a `Drop`\n // implementation to also run on panic.\n-struct Finish {\n+struct Finish<'a> {\n     panicked: bool,\n-    me: &'static Once,\n+    me: &'a Once,\n }\n \n impl Once {\n@@ -218,7 +218,7 @@ impl Once {\n     ///\n     /// [poison]: struct.Mutex.html#poisoning\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn call_once<F>(&'static self, f: F) where F: FnOnce() {\n+    pub fn call_once<F>(&self, f: F) where F: FnOnce() {\n         // Fast path, just see if we've completed initialization.\n         if self.state.load(Ordering::SeqCst) == COMPLETE {\n             return\n@@ -275,7 +275,7 @@ impl Once {\n     /// INIT.call_once(|| {});\n     /// ```\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n-    pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n+    pub fn call_once_force<F>(&self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`.\n         if self.state.load(Ordering::SeqCst) == COMPLETE {\n             return\n@@ -299,7 +299,7 @@ impl Once {\n     // currently no way to take an `FnOnce` and call it via virtual dispatch\n     // without some allocation overhead.\n     #[cold]\n-    fn call_inner(&'static self,\n+    fn call_inner(&self,\n                   ignore_poisoning: bool,\n                   init: &mut FnMut(bool)) {\n         let mut state = self.state.load(Ordering::SeqCst);\n@@ -390,7 +390,7 @@ impl fmt::Debug for Once {\n     }\n }\n \n-impl Drop for Finish {\n+impl<'a> Drop for Finish<'a> {\n     fn drop(&mut self) {\n         // Swap out our state with however we finished. We should only ever see\n         // an old state which was RUNNING."}]}