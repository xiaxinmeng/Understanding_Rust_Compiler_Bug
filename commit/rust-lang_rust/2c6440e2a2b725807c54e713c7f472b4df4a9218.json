{"sha": "2c6440e2a2b725807c54e713c7f472b4df4a9218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNjQ0MGUyYTJiNzI1ODA3YzU0ZTcxM2M3ZjQ3MmI0ZGY0YTkyMTg=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2015-01-27T15:55:07Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2015-01-27T15:55:07Z"}, "message": "borrowck: aliasability violation with closure captures can happen\n\nIt was considered to be impossible but actually it can\nhappen for nested closures. Also, because there must\nbe nested closures when this happens, we can use more\ntargeted help message.\n\nCloses #21390\nCloses #21600", "tree": {"sha": "2709234514f7b586c1a654d33d50876895e6ad3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2709234514f7b586c1a654d33d50876895e6ad3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6440e2a2b725807c54e713c7f472b4df4a9218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6440e2a2b725807c54e713c7f472b4df4a9218", "html_url": "https://github.com/rust-lang/rust/commit/2c6440e2a2b725807c54e713c7f472b4df4a9218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6440e2a2b725807c54e713c7f472b4df4a9218/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6a6fadbb97268d2b3e47649d91053fbb4827266", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a6fadbb97268d2b3e47649d91053fbb4827266", "html_url": "https://github.com/rust-lang/rust/commit/a6a6fadbb97268d2b3e47649d91053fbb4827266"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "71a0a9e38d12dc582ed64e96e6c70d5a0c50edae", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c6440e2a2b725807c54e713c7f472b4df4a9218/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6440e2a2b725807c54e713c7f472b4df4a9218/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=2c6440e2a2b725807c54e713c7f472b4df4a9218", "patch": "@@ -770,16 +770,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             MutabilityViolation => {\n                 \"cannot assign to data\"\n             }\n-            BorrowViolation(euv::ClosureCapture(_)) => {\n-                // I don't think we can get aliasability violations\n-                // with closure captures, so no need to come up with a\n-                // good error message. The reason this cannot happen\n-                // is because we only capture local variables in\n-                // closures, and those are never aliasable.\n-                self.tcx.sess.span_bug(\n-                    span,\n-                    \"aliasability violation with closure\");\n-            }\n+            BorrowViolation(euv::ClosureCapture(_)) |\n             BorrowViolation(euv::OverloadedOperator) |\n             BorrowViolation(euv::AddrOf) |\n             BorrowViolation(euv::AutoRef) |\n@@ -809,8 +800,17 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_err(span,\n                                        format!(\"{} in a captured outer \\\n                                                variable in an `Fn` closure\", prefix).as_slice());\n-                span_help!(self.tcx.sess, self.tcx.map.span(id),\n+                if let BorrowViolation(euv::ClosureCapture(_)) = kind {\n+                    // The aliasability violation with closure captures can\n+                    // happen for nested closures, so we know the enclosing\n+                    // closure incorrectly accepts an `Fn` while it needs to\n+                    // be `FnMut`.\n+                    span_help!(self.tcx.sess, self.tcx.map.span(id),\n+                           \"consider changing this to accept closures that implement `FnMut`\");\n+                } else {\n+                    span_help!(self.tcx.sess, self.tcx.map.span(id),\n                            \"consider changing this closure to take self by mutable reference\");\n+                }\n             }\n             mc::AliasableStatic(..) |\n             mc::AliasableStaticMut(..) => {"}, {"sha": "f9a79dbb9c32a2f91c0e6e8926095f452cb2f889", "filename": "src/test/compile-fail/issue-21600.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c6440e2a2b725807c54e713c7f472b4df4a9218/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6440e2a2b725807c54e713c7f472b4df4a9218/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs?ref=2c6440e2a2b725807c54e713c7f472b4df4a9218", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn call_it<F>(f: F) where F: Fn() { f(); }\n+\n+struct A;\n+\n+impl A {\n+    fn gen(&self) {}\n+    fn gen_mut(&mut self) {}\n+}\n+\n+fn main() {\n+    let mut x = A;\n+    call_it(|| {    //~ HELP consider changing this to accept closures that implement `FnMut`\n+        call_it(|| x.gen());\n+        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+        //~^ ERROR cannot borrow data mutably in a captured outer\n+    });\n+}"}]}