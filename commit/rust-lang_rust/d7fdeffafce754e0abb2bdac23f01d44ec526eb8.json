{"sha": "d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZmRlZmZhZmNlNzU0ZTBhYmIyYmRhYzIzZjAxZDQ0ZWM1MjZlYjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:15:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:05Z"}, "message": "Add generic consts to `BottomUpFolder`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "93694c608e19eddcd7ce9384fcc61c5e01c585f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93694c608e19eddcd7ce9384fcc61c5e01c585f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "html_url": "https://github.com/rust-lang/rust/commit/d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77447deb2184d618abb26a16fde43d153f85c3b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/77447deb2184d618abb26a16fde43d153f85c3b8", "html_url": "https://github.com/rust-lang/rust/commit/77447deb2184d618abb26a16fde43d153f85c3b8"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "6d8558211818b777716922954f146cbf08b25210", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "patch": "@@ -676,8 +676,7 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         value.fold_with(&mut BottomUpFolder {\n             tcx,\n-            reg_op: |reg| reg,\n-            fldop: |ty| {\n+            ty_op: |ty| {\n                 if let ty::Opaque(def_id, substs) = ty.sty {\n                     // Check that this is `impl Trait` type is\n                     // declared by `parent_def_id` -- i.e., one whose\n@@ -776,6 +775,8 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n \n                 ty\n             },\n+            lt_op: |lt| lt,\n+            ct_op: |ct| ct,\n         })\n     }\n "}, {"sha": "afd94757b2329e88721b1898ebcc90c3573ef103", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "patch": "@@ -193,29 +193,37 @@ pub trait TypeVisitor<'tcx> : Sized {\n ///////////////////////////////////////////////////////////////////////////\n // Some sample folders\n \n-pub struct BottomUpFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a, F, G>\n+pub struct BottomUpFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a, F, G, H>\n     where F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n           G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n+          H: FnMut(&'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx>,\n {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pub fldop: F,\n-    pub reg_op: G,\n+    pub ty_op: F,\n+    pub lt_op: G,\n+    pub ct_op: H,\n }\n \n-impl<'a, 'gcx, 'tcx, F, G> TypeFolder<'gcx, 'tcx> for BottomUpFolder<'a, 'gcx, 'tcx, F, G>\n+impl<'a, 'gcx, 'tcx, F, G, H> TypeFolder<'gcx, 'tcx> for BottomUpFolder<'a, 'gcx, 'tcx, F, G, H>\n     where F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n           G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n+          H: FnMut(&'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx>,\n {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let t1 = ty.super_fold_with(self);\n-        (self.fldop)(t1)\n+        let t = ty.super_fold_with(self);\n+        (self.ty_op)(t)\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let r = r.super_fold_with(self);\n-        (self.reg_op)(r)\n+        (self.lt_op)(r)\n+    }\n+\n+    fn fold_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n+        let c = c.super_fold_with(self);\n+        (self.ct_op)(c)\n     }\n }\n "}, {"sha": "8ee30c0d2d31d8759378367e37745425ecdb4e8b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "patch": "@@ -616,7 +616,7 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n     let mut substituted_predicates = Vec::new();\n     ty.fold_with(&mut ty::fold::BottomUpFolder {\n         tcx: fcx.tcx,\n-        fldop: |ty| {\n+        ty_op: |ty| {\n             if let ty::Opaque(def_id, substs) = ty.sty {\n                 trace!(\"check_existential_types: opaque_ty, {:?}, {:?}\", def_id, substs);\n                 let generics = tcx.generics_of(def_id);\n@@ -739,7 +739,8 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n             } // if let Opaque\n             ty\n         },\n-        reg_op: |reg| reg,\n+        lt_op: |lt| lt,\n+        ct_op: |ct| ct,\n     });\n     substituted_predicates\n }"}, {"sha": "d16d69e92332662ebcc9c70f9867334dd52a5fc7", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7fdeffafce754e0abb2bdac23f01d44ec526eb8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d7fdeffafce754e0abb2bdac23f01d44ec526eb8", "patch": "@@ -11,7 +11,8 @@ use rustc::infer::InferCtxt;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n use rustc::ty::subst::UnpackedKind;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, Const, LazyConst};\n+use rustc::mir::interpret::ConstValue;\n use rustc::util::nodemap::DefIdSet;\n use rustc_data_structures::sync::Lrc;\n use std::mem;\n@@ -488,7 +489,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 // figures out the concrete type with `U`, but the stored type is with `T`\n                 instantiated_ty.fold_with(&mut BottomUpFolder {\n                     tcx: self.tcx().global_tcx(),\n-                    fldop: |ty| {\n+                    ty_op: |ty| {\n                         trace!(\"checking type {:?}\", ty);\n                         // find a type parameter\n                         if let ty::Param(..) = ty.sty {\n@@ -520,7 +521,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                         }\n                         ty\n                     },\n-                    reg_op: |region| {\n+                    lt_op: |region| {\n                         match region {\n                             // ignore static regions\n                             ty::ReStatic => region,\n@@ -564,6 +565,41 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                             }\n                         }\n                     },\n+                    ct_op: |ct| {\n+                        trace!(\"checking const {:?}\", ct);\n+                        // find a const parameter\n+                        if let LazyConst::Evaluated(Const { ty, val }) = ct {\n+                            if let ConstValue::Param(..) = val {\n+                                // look it up in the substitution list\n+                                assert_eq!(opaque_defn.substs.len(), generics.params.len());\n+                                for (subst, param) in opaque_defn.substs.iter()\n+                                                                        .zip(&generics.params) {\n+                                    if let UnpackedKind::Const(subst) = subst.unpack() {\n+                                        if subst == ct {\n+                                            // found it in the substitution list, replace with the\n+                                            // parameter from the existential type\n+                                            return self.tcx()\n+                                                .global_tcx()\n+                                                .mk_const_param(param.index, param.name, ty);\n+                                        }\n+                                    }\n+                                }\n+                                self.tcx()\n+                                    .sess\n+                                    .struct_span_err(\n+                                        span,\n+                                        &format!(\n+                                            \"const parameter `{}` is part of concrete type but not \\\n+                                             used in parameter list for existential type\",\n+                                            ct,\n+                                        ),\n+                                    )\n+                                    .emit();\n+                                return self.tcx().types.ct_err;\n+                            }\n+                        }\n+                        ct\n+                    }\n                 })\n             };\n "}]}