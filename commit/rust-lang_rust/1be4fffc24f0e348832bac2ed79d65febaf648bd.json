{"sha": "1be4fffc24f0e348832bac2ed79d65febaf648bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZTRmZmZjMjRmMGUzNDg4MzJiYWMyZWQ3OWQ2NWZlYmFmNjQ4YmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T11:19:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T11:19:17Z"}, "message": "improve comment on instantiate NLL query result fn", "tree": {"sha": "5721eead59e5cf4cd2ce96a63210930f1eff8863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5721eead59e5cf4cd2ce96a63210930f1eff8863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be4fffc24f0e348832bac2ed79d65febaf648bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be4fffc24f0e348832bac2ed79d65febaf648bd", "html_url": "https://github.com/rust-lang/rust/commit/1be4fffc24f0e348832bac2ed79d65febaf648bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be4fffc24f0e348832bac2ed79d65febaf648bd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bfdb97684546bb3716e11fbd47ebfa8703eb5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfdb97684546bb3716e11fbd47ebfa8703eb5e5", "html_url": "https://github.com/rust-lang/rust/commit/5bfdb97684546bb3716e11fbd47ebfa8703eb5e5"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "fae624b38a8e888eb2a9733c08a1c3a60a8ef84a", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1be4fffc24f0e348832bac2ed79d65febaf648bd/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be4fffc24f0e348832bac2ed79d65febaf648bd/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=1be4fffc24f0e348832bac2ed79d65febaf648bd", "patch": "@@ -206,16 +206,44 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         })\n     }\n \n-    /// NLL does a lot of queries that have a particular form that we\n-    /// can take advantage of to be more efficient. These queries do\n-    /// not have any *type* inference variables, only region inference\n-    /// variables. Therefore, when we instantiate the query result, we\n-    /// only ever produce new *region constraints* and never other\n-    /// forms of obligations (moreover, since we only determine\n-    /// satisfiability modulo region constraints, instantiation is\n-    /// infallible). Therefore, the return value need only be a larger\n-    /// set of query region constraints. These constraints can then be\n-    /// added directly to the NLL inference context.\n+    /// An alternative to\n+    /// `instantiate_query_result_and_region_obligations` that is more\n+    /// efficient for NLL. NLL is a bit more advanced in the\n+    /// \"transition to chalk\" than the rest of the compiler. During\n+    /// the NLL type check, all of the \"processing\" of types and\n+    /// things happens in queries -- the NLL checker itself is only\n+    /// interested in the region obligations (`'a: 'b` or `T: 'b`)\n+    /// that come out of these queries, which it wants to convert into\n+    /// MIR-based constraints and solve. Therefore, it is most\n+    /// convenient for the NLL Type Checker to **directly consume**\n+    /// the `QueryRegionConstraint` values that arise from doing a\n+    /// query. This is contrast to other parts of the compiler, which\n+    /// would prefer for those `QueryRegionConstraint` to be converted\n+    /// into the older infcx-style constraints (e.g., calls to\n+    /// [`sub_regions()`] or [`register_region_obligation()`]).\n+    ///\n+    /// Therefore, `instantiate_nll_query_result_and_region_obligations` performs the same\n+    /// basic operations as `instantiate_query_result_and_region_obligations` but\n+    /// it returns its result differently:\n+    ///\n+    /// - It creates a substitution `S` that maps from the original\n+    ///   query variables to the values computed in the query\n+    ///   result. If any errors arise, they are propagated back as an\n+    ///   `Err` result.\n+    /// - In the case of a successful substitution, we will append\n+    ///   `QueryRegionConstraint` values onto the\n+    ///   `output_query_region_constraints` vector for the solver to\n+    ///   use (if an error arises, some values may also be pushed, but\n+    ///   they should be ignored).\n+    /// - It **can happen** (though it rarely does currently) that\n+    ///   equating types and things will give rise to subobligations\n+    ///   that must be processed.  In this case, those subobligations\n+    ///   are propagated back in the return value.\n+    /// - Finally, the query result (of type `R`) is propagated back,\n+    ///   after applying the substitution `S`.\n+    ///\n+    /// [`register_region_obligation()`: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/infer/struct.InferCtxt.html#method.register_region_obligation\n+    /// [`sub_regions()`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/infer/struct.InferCtxt.html#method.sub_regions\n     pub fn instantiate_nll_query_result_and_region_obligations<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,"}]}