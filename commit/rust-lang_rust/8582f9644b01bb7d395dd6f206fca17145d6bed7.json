{"sha": "8582f9644b01bb7d395dd6f206fca17145d6bed7", "node_id": "C_kwDOAAsO6NoAKDg1ODJmOTY0NGIwMWJiN2QzOTVkZDZmMjA2ZmNhMTcxNDVkNmJlZDc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-14T16:54:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T16:25:28Z"}, "message": "Cache Predicates' hash within themselves", "tree": {"sha": "02980d448713c24bf83b58fa22346efa7c81d881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02980d448713c24bf83b58fa22346efa7c81d881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8582f9644b01bb7d395dd6f206fca17145d6bed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8582f9644b01bb7d395dd6f206fca17145d6bed7", "html_url": "https://github.com/rust-lang/rust/commit/8582f9644b01bb7d395dd6f206fca17145d6bed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8582f9644b01bb7d395dd6f206fca17145d6bed7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a75c5a9b5d9c48aa576b08faf735b926d0d9a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a75c5a9b5d9c48aa576b08faf735b926d0d9a71", "html_url": "https://github.com/rust-lang/rust/commit/8a75c5a9b5d9c48aa576b08faf735b926d0d9a71"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "e83106b1ee51507cc6807e5c4947c833136c25a7", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8582f9644b01bb7d395dd6f206fca17145d6bed7/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8582f9644b01bb7d395dd6f206fca17145d6bed7/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=8582f9644b01bb7d395dd6f206fca17145d6bed7", "patch": "@@ -89,7 +89,7 @@ macro_rules! arena_types {\n \n             // Interned types\n             [] tys: rustc_data_structures::intern::WithStableHash<rustc_middle::ty::TyS<'tcx>>,\n-            [] predicates: rustc_middle::ty::PredicateS<'tcx>,\n+            [] predicates: rustc_data_structures::intern::WithStableHash<rustc_middle::ty::PredicateS<'tcx>>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,"}, {"sha": "b9deaed94088d1389d8041def9a4086b4fd56998", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 54, "deletions": 23, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8582f9644b01bb7d395dd6f206fca17145d6bed7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8582f9644b01bb7d395dd6f206fca17145d6bed7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8582f9644b01bb7d395dd6f206fca17145d6bed7", "patch": "@@ -141,7 +141,7 @@ pub struct CtxtInterners<'tcx> {\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind<'tcx>>,\n     poly_existential_predicates: InternedSet<'tcx, List<PolyExistentialPredicate<'tcx>>>,\n-    predicate: InternedSet<'tcx, PredicateS<'tcx>>,\n+    predicate: InternedSet<'tcx, WithStableHash<PredicateS<'tcx>>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n@@ -188,20 +188,8 @@ impl<'tcx> CtxtInterners<'tcx> {\n             self.type_\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_kind(&kind);\n-\n-                    // It's impossible to hash inference variables (and will ICE), so we don't need to try to cache them.\n-                    // Without incremental, we rarely stable-hash types, so let's not do it proactively.\n-                    let stable_hash = if flags.flags.intersects(TypeFlags::NEEDS_INFER)\n-                        || sess.opts.incremental.is_none()\n-                    {\n-                        Fingerprint::ZERO\n-                    } else {\n-                        let mut hasher = StableHasher::new();\n-                        let mut hcx =\n-                            StableHashingContext::new(sess, definitions, cstore, source_span);\n-                        kind.hash_stable(&mut hcx, &mut hasher);\n-                        hasher.finish()\n-                    };\n+                    let stable_hash =\n+                        self.stable_hash(&flags, sess, definitions, cstore, source_span, &kind);\n \n                     let ty_struct = TyS {\n                         kind,\n@@ -217,20 +205,54 @@ impl<'tcx> CtxtInterners<'tcx> {\n         ))\n     }\n \n+    fn stable_hash<'a, T: HashStable<StableHashingContext<'a>>>(\n+        &self,\n+        flags: &ty::flags::FlagComputation,\n+        sess: &'a Session,\n+        definitions: &'a rustc_hir::definitions::Definitions,\n+        cstore: &'a CrateStoreDyn,\n+        source_span: &'a IndexVec<LocalDefId, Span>,\n+        val: &T,\n+    ) -> Fingerprint {\n+        // It's impossible to hash inference variables (and will ICE), so we don't need to try to cache them.\n+        // Without incremental, we rarely stable-hash types, so let's not do it proactively.\n+        if flags.flags.intersects(TypeFlags::NEEDS_INFER) || sess.opts.incremental.is_none() {\n+            Fingerprint::ZERO\n+        } else {\n+            let mut hasher = StableHasher::new();\n+            let mut hcx = StableHashingContext::new(sess, definitions, cstore, source_span);\n+            val.hash_stable(&mut hcx, &mut hasher);\n+            hasher.finish()\n+        }\n+    }\n+\n     #[inline(never)]\n-    fn intern_predicate(&self, kind: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {\n+    fn intern_predicate(\n+        &self,\n+        kind: Binder<'tcx, PredicateKind<'tcx>>,\n+        sess: &Session,\n+        definitions: &rustc_hir::definitions::Definitions,\n+        cstore: &CrateStoreDyn,\n+        source_span: &IndexVec<LocalDefId, Span>,\n+    ) -> Predicate<'tcx> {\n         Predicate(Interned::new_unchecked(\n             self.predicate\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_predicate(kind);\n \n+                    let stable_hash =\n+                        self.stable_hash(&flags, sess, definitions, cstore, source_span, &kind);\n+\n                     let predicate_struct = PredicateS {\n                         kind,\n                         flags: flags.flags,\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n                     };\n \n-                    InternedInSet(self.arena.alloc(predicate_struct))\n+                    InternedInSet(\n+                        self.arena\n+                            .alloc(WithStableHash { internee: predicate_struct, stable_hash }),\n+                    )\n                 })\n                 .0,\n         ))\n@@ -2158,23 +2180,25 @@ impl<'tcx> Hash for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n     }\n }\n \n-impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for InternedInSet<'tcx, PredicateS<'tcx>> {\n+impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>>\n+    for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>>\n+{\n     fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n         &self.0.kind\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, PredicateS<'tcx>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, PredicateS<'tcx>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, PredicateS<'tcx>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, PredicateS<'tcx>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)\n@@ -2373,7 +2397,14 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {\n-        self.interners.intern_predicate(binder)\n+        self.interners.intern_predicate(\n+            binder,\n+            self.sess,\n+            &self.definitions.read(),\n+            &*self.untracked_resolutions.cstore,\n+            // This is only used to create a stable hashing context.\n+            &self.untracked_resolutions.source_span,\n+        )\n     }\n \n     #[inline]"}, {"sha": "a4c67ad0f3d4d83fc69bd815482a4cec226b78c7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8582f9644b01bb7d395dd6f206fca17145d6bed7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8582f9644b01bb7d395dd6f206fca17145d6bed7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8582f9644b01bb7d395dd6f206fca17145d6bed7", "patch": "@@ -546,9 +546,9 @@ pub(crate) struct PredicateS<'tcx> {\n }\n \n /// Use this rather than `PredicateS`, whenever possible.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, HashStable)]\n #[rustc_pass_by_value]\n-pub struct Predicate<'tcx>(Interned<'tcx, PredicateS<'tcx>>);\n+pub struct Predicate<'tcx>(Interned<'tcx, WithStableHash<PredicateS<'tcx>>>);\n \n impl<'tcx> Predicate<'tcx> {\n     /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.\n@@ -627,7 +627,7 @@ impl<'tcx> Predicate<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for PredicateS<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let PredicateS {\n             ref kind,\n@@ -636,7 +636,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n             // also contained in `kind`, so no need to hash them.\n             flags: _,\n             outer_exclusive_binder: _,\n-        } = self.0.0;\n+        } = self;\n \n         kind.hash_stable(hcx, hasher);\n     }"}]}