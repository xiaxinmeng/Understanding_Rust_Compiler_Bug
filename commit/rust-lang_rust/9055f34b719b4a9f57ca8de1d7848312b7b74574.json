{"sha": "9055f34b719b4a9f57ca8de1d7848312b7b74574", "node_id": "C_kwDOAAsO6NoAKDkwNTVmMzRiNzE5YjRhOWY1N2NhOGRlMWQ3ODQ4MzEyYjdiNzQ1NzQ", "commit": {"author": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-02-12T17:43:23Z"}, "committer": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-02-12T17:43:23Z"}, "message": "Merge remote-tracking branch 'upstream/master' into only_used_in_recursion\n\n# Conflicts:\n#\tclippy_lints/src/lib.rs", "tree": {"sha": "586d8265af3528d2fb261e21c4d287e587b73151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586d8265af3528d2fb261e21c4d287e587b73151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9055f34b719b4a9f57ca8de1d7848312b7b74574", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErNAvdl6JhsmcOZwWK4aJjMsqVIYFAmIH8bsACgkQK4aJjMsq\nVIZ4NxAAkCRP7SIoSOf/l/ZtyKDII31AaCseER/7gUg0JtgjF0WRpc4tvhHL+/tm\naFN/7Y0lCo5vc/iYsv8tYJJ0Jo12mPzzUbMDvN8FQPw/N8ARxrINdgF6zBZIqQdP\nNtZ37c3Uw+koJ7H2srt6t1HhwJAYC+pB8xU/3RDV5lMTW2MKMygUSBSU54Jf6YLi\njiksl3LCgZUSUS+ZOj+atpTqSW3gNIystiFwuBN1KzswnXiXwrPOgk7uUyvvDS8T\n6S4vayY3GizpWawqF7X1GB6qfJ2JUCEnnGIylfBbJkqSKLmeIf+HHNZYl31ZzksD\nTu3JUct9h2/xsA4NXkVHlEAu1/SKLKdR1XSofrrPYvry+/YpyTH1e38qdr10Ztjz\nDzUhi5uljOkHoREG5NZx1j5GkER5LMxu4L2xtX0jEm6VfUMcjM2ausEmWV0TbI3Y\noG8SxZnOEzQSKbcs7tiGK1bVmknpX77QS+1C/y4iGd5Sacp7sS4eXfsGmnodL2Db\niS3f1VnzhotjYVnHYwySf9TQFrgOZ5bsd8+k5mBeXsWrmwjO2dCvLvHviTfh1Brr\n6Qebwj0pa/VLPUY4YjIzptBt9bT2ggGM4L8S9J0zTmYgEc/CcMadNosNc/R7LChd\n+25PFx5YlUIpHJkp1Leb7k0BmOceALw17jLg/lrvv6NtmbXholY=\n=Fz6v\n-----END PGP SIGNATURE-----", "payload": "tree 586d8265af3528d2fb261e21c4d287e587b73151\nparent 4f96ca353ec2f48e02efe592dc9d7ebaa1e66f60\nparent 5707491b185f9c9fc913f25efbd09d2649136683\nauthor Jaeyong Sung <jaeyong0201@gmail.com> 1644687803 +0900\ncommitter Jaeyong Sung <jaeyong0201@gmail.com> 1644687803 +0900\n\nMerge remote-tracking branch 'upstream/master' into only_used_in_recursion\n\n# Conflicts:\n#\tclippy_lints/src/lib.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9055f34b719b4a9f57ca8de1d7848312b7b74574", "html_url": "https://github.com/rust-lang/rust/commit/9055f34b719b4a9f57ca8de1d7848312b7b74574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9055f34b719b4a9f57ca8de1d7848312b7b74574/comments", "author": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f96ca353ec2f48e02efe592dc9d7ebaa1e66f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f96ca353ec2f48e02efe592dc9d7ebaa1e66f60", "html_url": "https://github.com/rust-lang/rust/commit/4f96ca353ec2f48e02efe592dc9d7ebaa1e66f60"}, {"sha": "5707491b185f9c9fc913f25efbd09d2649136683", "url": "https://api.github.com/repos/rust-lang/rust/commits/5707491b185f9c9fc913f25efbd09d2649136683", "html_url": "https://github.com/rust-lang/rust/commit/5707491b185f9c9fc913f25efbd09d2649136683"}], "stats": {"total": 343, "additions": 202, "deletions": 141}, "files": [{"sha": "df1a4128af35957aa8cb5bf8fa02d37b905611cd", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 52, "deletions": 45, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -1,11 +1,11 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n-use clippy_utils::source::snippet_opt;\n-use rustc_ast::ast;\n-use rustc_ast::tokenstream::TokenStream;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::macros::root_macro_call_first_node;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -15,14 +15,6 @@ declare_clippy_lint! {\n     /// `dbg!` macro is intended as a debugging tool. It\n     /// should not be in version control.\n     ///\n-    /// ### Known problems\n-    /// * The lint level is unaffected by crate attributes. The level can still\n-    ///   be set for functions, modules and other items. To change the level for\n-    ///   the entire crate, please use command line flags. More information and a\n-    ///   configuration example can be found in [clippy#6610].\n-    ///\n-    /// [clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n-    ///\n     /// ### Example\n     /// ```rust,ignore\n     /// // Bad\n@@ -39,37 +31,52 @@ declare_clippy_lint! {\n \n declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n \n-impl EarlyLintPass for DbgMacro {\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {\n-        if mac.path == sym!(dbg) {\n-            if let Some(sugg) = tts_span(mac.args.inner_tokens()).and_then(|span| snippet_opt(cx, span)) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    DBG_MACRO,\n-                    mac.span(),\n-                    \"`dbg!` macro is intended as a debugging tool\",\n-                    \"ensure to avoid having uses of it in version control\",\n-                    sugg,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else {\n-                span_lint_and_help(\n-                    cx,\n-                    DBG_MACRO,\n-                    mac.span(),\n-                    \"`dbg!` macro is intended as a debugging tool\",\n-                    None,\n-                    \"ensure to avoid having uses of it in version control\",\n-                );\n-            }\n+impl LateLintPass<'_> for DbgMacro {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n+        if cx.tcx.is_diagnostic_item(sym::dbg_macro, macro_call.def_id) {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let suggestion = match expr.peel_drop_temps().kind {\n+                // dbg!()\n+                ExprKind::Block(_, _) => String::new(),\n+                // dbg!(1)\n+                ExprKind::Match(val, ..) => {\n+                    snippet_with_applicability(cx, val.span.source_callsite(), \"..\", &mut applicability).to_string()\n+                },\n+                // dbg!(2, 3)\n+                ExprKind::Tup(\n+                    [\n+                        Expr {\n+                            kind: ExprKind::Match(first, ..),\n+                            ..\n+                        },\n+                        ..,\n+                        Expr {\n+                            kind: ExprKind::Match(last, ..),\n+                            ..\n+                        },\n+                    ],\n+                ) => {\n+                    let snippet = snippet_with_applicability(\n+                        cx,\n+                        first.span.source_callsite().to(last.span.source_callsite()),\n+                        \"..\",\n+                        &mut applicability,\n+                    );\n+                    format!(\"({snippet})\")\n+                },\n+                _ => return,\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                DBG_MACRO,\n+                macro_call.span,\n+                \"`dbg!` macro is intended as a debugging tool\",\n+                \"ensure to avoid having uses of it in version control\",\n+                suggestion,\n+                applicability,\n+            );\n         }\n     }\n }\n-\n-// Get span enclosing entire the token stream.\n-fn tts_span(tts: TokenStream) -> Option<Span> {\n-    let mut cursor = tts.into_trees();\n-    let first = cursor.next()?.span();\n-    let span = cursor.last().map_or(first, |tree| first.to(tree.span()));\n-    Some(span)\n-}"}, {"sha": "6d0851d804c26936e2fdb2c876a7f4ea370efac6", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TyS, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n \n@@ -448,7 +448,7 @@ fn try_parse_ref_op<'tcx>(\n // the reference.\n fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n-        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => TyS::same_type(result_ty, arg_ty),\n+        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => result_ty == arg_ty,\n \n         // The result type for a deref method is always a reference\n         // Not matching the previous pattern means the argument type is not a reference"}, {"sha": "5e4cde553b52e954a0bf7e30f2eed0ef0531e21c", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind}\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{Ty, TyS, TypeckResults};\n+use rustc_middle::ty::{Ty, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n@@ -345,7 +345,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n             if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             if let Some(ty_did) = ty_path.res.opt_def_id();\n             then {\n-                if !TyS::same_type(self.target.ty(), self.maybe_typeck_results.unwrap().expr_ty(e)) {\n+                if self.target.ty() != self.maybe_typeck_results.unwrap().expr_ty(e) {\n                     return;\n                 }\n "}, {"sha": "2a4bcd773c684a508bcaff5c70c3405cf3ab9e47", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::higher::IfLet;\n use clippy_utils::ty::is_copy;\n use clippy_utils::{is_expn_of, is_lint_allowed, meets_msrv, msrvs, path_to_local};\n use if_chain::if_chain;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -92,9 +92,9 @@ impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n     extract_msrv_attr!(LateContext);\n }\n \n-fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxHashMap<hir::HirId, SliceLintInformation> {\n+fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxIndexMap<hir::HirId, SliceLintInformation> {\n     let mut removed_pat: FxHashSet<hir::HirId> = FxHashSet::default();\n-    let mut slices: FxHashMap<hir::HirId, SliceLintInformation> = FxHashMap::default();\n+    let mut slices: FxIndexMap<hir::HirId, SliceLintInformation> = FxIndexMap::default();\n     pat.walk_always(|pat| {\n         if let hir::PatKind::Binding(binding, value_hir_id, ident, sub_pat) = pat.kind {\n             // We'll just ignore mut and ref mut for simplicity sake right now\n@@ -208,10 +208,10 @@ impl SliceLintInformation {\n \n fn filter_lintable_slices<'a, 'tcx>(\n     cx: &'a LateContext<'tcx>,\n-    slice_lint_info: FxHashMap<hir::HirId, SliceLintInformation>,\n+    slice_lint_info: FxIndexMap<hir::HirId, SliceLintInformation>,\n     max_suggested_slice: u64,\n     scope: &'tcx hir::Expr<'tcx>,\n-) -> FxHashMap<hir::HirId, SliceLintInformation> {\n+) -> FxIndexMap<hir::HirId, SliceLintInformation> {\n     let mut visitor = SliceIndexLintingVisitor {\n         cx,\n         slice_lint_info,\n@@ -225,7 +225,7 @@ fn filter_lintable_slices<'a, 'tcx>(\n \n struct SliceIndexLintingVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n-    slice_lint_info: FxHashMap<hir::HirId, SliceLintInformation>,\n+    slice_lint_info: FxIndexMap<hir::HirId, SliceLintInformation>,\n     max_suggested_slice: u64,\n }\n "}, {"sha": "3418d276c53549d1cd55fc0bbad490fd782d3b08", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     ItemKind, Mutability, Node, TraitItemRef, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, AssocKind, FnSig, Ty, TyS};\n+use rustc_middle::ty::{self, AssocKind, FnSig, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{\n     source_map::{Span, Spanned, Symbol},\n@@ -265,7 +265,7 @@ impl LenOutput<'_> {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did => subs.type_at(0).is_bool(),\n             (Self::Result(id, err_ty), &ty::Adt(adt, subs)) if id == adt.did => {\n-                subs.type_at(0).is_bool() && TyS::same_type(subs.type_at(1), err_ty)\n+                subs.type_at(0).is_bool() && subs.type_at(1) == err_ty\n             },\n             _ => false,\n         }"}, {"sha": "38decb8a692511097b85baf3d01a29aeb5b0e422", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -278,7 +278,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n     LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-    LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(transmuting_null::TRANSMUTING_NULL),"}, {"sha": "4217fd3a3ea72c04af802f688f39d34f1f501c7a", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -58,7 +58,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(swap::ALMOST_SWAPPED),\n     LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n-    LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(transmuting_null::TRANSMUTING_NULL),"}, {"sha": "8d4dde42bbecad322b0d3ba28da5e24a8ac8d7f2", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -26,6 +26,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(strings::STRING_LIT_AS_BYTES),\n     LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n     LintId::of(trailing_empty_array::TRAILING_EMPTY_ARRAY),\n+    LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n     LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(use_self::USE_SELF),\n ])"}, {"sha": "e7c9181ebb5fe6a6a14ef04901cfe9bf5d8f95fb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -18,6 +18,8 @@\n #![warn(rust_2018_idioms, unused_lifetimes)]\n // warn on rustc internal lints\n #![warn(rustc::internal)]\n+// Disable this rustc lint for now, as it was also done in rustc\n+#![allow(rustc::potential_query_instability)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n@@ -431,7 +433,6 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n \n     store.register_pre_expansion_pass(|| Box::new(write::Write::default()));\n     store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv }));\n-    store.register_pre_expansion_pass(|| Box::new(dbg_macro::DbgMacro));\n }\n \n #[doc(hidden)]\n@@ -864,6 +865,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_late_pass(|| Box::new(only_used_in_recursion::OnlyUsedInRecursion));\n+    store.register_late_pass(|| Box::new(dbg_macro::DbgMacro));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "175e2b382e3f6d03b3afef51d5259e6dbcbddd15", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -5,13 +5,12 @@ use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, call_expr: &Expr<'_>) {\n     let self_ty = cx.typeck_results().expr_ty(self_arg);\n     let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n-    if !(TyS::same_type(self_ty, self_ty_adjusted) && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n+    if !(self_ty == self_ty_adjusted && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n         return;\n     }\n "}, {"sha": "5f5beccd030c171c4a1c80566b1c8e75fc16a59d", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, method_name: &str) {\n@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, m\n                     mutbl: Mutability::Not,\n                 },\n             );\n-            TyS::same_type(receiver_ty_adjusted, ref_receiver_ty)\n+            receiver_ty_adjusted == ref_receiver_ty\n         },\n         _ => false,\n     };"}, {"sha": "271a386859555040a8c43990020700447e7b9c9e", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::source::snippet;\n use clippy_utils::{path_to_local, search_same, SpanlessEq, SpanlessHash};\n use rustc_hir::{Arm, Expr, ExprKind, HirId, HirIdMap, HirIdSet, MatchSource, Pat, PatKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use std::collections::hash_map::Entry;\n \n use super::MATCH_SAME_ARMS;\n@@ -32,7 +31,7 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n                     };\n                     // the names technically don't have to match; this makes the lint more conservative\n                     if cx.tcx.hir().name(a_id) == cx.tcx.hir().name(b_id);\n-                    if TyS::same_type(cx.typeck_results().expr_ty(a), cx.typeck_results().expr_ty(b));\n+                    if cx.typeck_results().expr_ty(a) == cx.typeck_results().expr_ty(b);\n                     if pat_contains_local(lhs.pat, a_id);\n                     if pat_contains_local(rhs.pat, b_id);\n                     then {"}, {"sha": "30c68186b3aef1468033f63161c9c5a7f1d1d724", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n use std::borrow::Cow;\n@@ -149,7 +148,7 @@ pub(super) fn check<'tcx>(\n                 if_chain! {\n                     if path_to_local_id(a_path, filter_param_id);\n                     if path_to_local_id(b, map_param_id);\n-                    if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n+                    if cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b);\n                     then {\n                         return true;\n                     }"}, {"sha": "7a255baffd745aa7855fb9a78be1f0762bbb0080", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -6,7 +6,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::sym;\n \n use super::IMPLICIT_CLONE;\n@@ -19,7 +18,7 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n         let input_type = cx.typeck_results().expr_ty(recv);\n         let (input_type, ref_count) = peel_mid_ty_refs(input_type);\n         if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n-        if TyS::same_type(return_type, input_type);\n+        if return_type == input_type;\n         then {\n             let mut app = Applicability::MachineApplicable;\n             let recv_snip = snippet_with_context(cx, recv.span, expr.span.ctxt(), \"..\", &mut app).0;"}, {"sha": "c2202cb1e57709517787801ef261964e9ebd2de9", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -78,7 +78,7 @@ use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PrimTy, QPath, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n+use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -2198,7 +2198,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 }\n             }\n \n-            if name == \"new\" && !TyS::same_type(ret_ty, self_ty) {\n+            if name == \"new\" && ret_ty != self_ty {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,"}, {"sha": "12ad3d8d69038d3016ebf021f0fa7895603fa749", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, TyS};\n+use rustc_middle::ty;\n use rustc_span::sym;\n \n use super::UNNECESSARY_FILTER_MAP;\n@@ -33,9 +33,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         } else if !found_mapping && !mutates_arg {\n             let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n             match cx.typeck_results().expr_ty(&body.value).kind() {\n-                ty::Adt(adt, subst)\n-                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && TyS::same_type(in_ty, subst.type_at(0)) =>\n-                {\n+                ty::Adt(adt, subst) if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && in_ty == subst.type_at(0) => {\n                     \"filter\"\n                 },\n                 _ => return,"}, {"sha": "9d3d7d1f24cbc3dfa86f5a8166fd38eadc02ecd2", "filename": "clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -4,7 +4,6 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -49,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if let ExprKind::MethodCall(path, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n             if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n-            if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n+            if outer_ty == typeck.expr_ty(sub_expr);\n             then{\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "8f85b00596c019f248a290b2087771977257e377", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{AsyncGeneratorKind, Block, Body, Expr, ExprKind, GeneratorKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -128,7 +127,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if expr.span.ctxt() == inner_expr.span.ctxt();\n         let expr_ty = cx.typeck_results().expr_ty(expr);\n         let inner_ty = cx.typeck_results().expr_ty(inner_expr);\n-        if TyS::same_type(expr_ty, inner_ty);\n+        if expr_ty == inner_ty;\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "f86af7a7bb6eaddb736730d7ab682a417f90d3f0", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -103,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if cx.access_levels.is_reachable(impl_item.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n-                            if TyS::same_type(self_ty, return_ty(cx, id));\n+                            if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {"}, {"sha": "cd3aee5565538aa07cda95414baca765cb26f1b8", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -6,7 +6,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -54,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n             if addressee.span.ctxt() == ctxt;\n             if let ExprKind::Index(indexed, range) = addressee.kind;\n             if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n-            if TyS::same_type(cx.typeck_results().expr_ty(expr), cx.typeck_results().expr_ty(indexed));\n+            if cx.typeck_results().expr_ty(expr) == cx.typeck_results().expr_ty(indexed);\n             then {\n                 let mut app = Applicability::MachineApplicable;\n                 let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "971729e5c54b35d2bc05866d567fb08954247062", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_hir::BinOpKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty, TyS, TypeAndMut};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n             // Find a size_of call in the count parameter expression and\n             // check that it's the same type\n             if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr, false);\n-            if TyS::same_type(pointee_ty, ty_used_for_size_of);\n+            if pointee_ty == ty_used_for_size_of;\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "5e94ab6d04820afe307d36b4915ec11617e2aff6", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -376,7 +376,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.60.0\"]\n     pub TRANSMUTE_UNDEFINED_REPR,\n-    correctness,\n+    nursery,\n     \"transmute to or from a type with an undefined representation\"\n }\n "}, {"sha": "c91bc3245e41784e24bd7a18dd10d95b1235efc7", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{GenericArg, Subst};\n-use rustc_middle::ty::{self, Ty, TyS, TypeAndMut};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_span::Span;\n \n #[allow(clippy::too_many_lines)]\n@@ -16,7 +16,7 @@ pub(super) fn check<'tcx>(\n     let mut from_ty = cx.tcx.erase_regions(from_ty_orig);\n     let mut to_ty = cx.tcx.erase_regions(to_ty_orig);\n \n-    while !TyS::same_type(from_ty, to_ty) {\n+    while from_ty != to_ty {\n         match reduce_refs(cx, e.span, from_ty, to_ty) {\n             ReducedTys::FromFatPtr { unsized_ty, .. } => {\n                 span_lint_and_then(\n@@ -25,7 +25,7 @@ pub(super) fn check<'tcx>(\n                     e.span,\n                     &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n                     |diag| {\n-                        if !TyS::same_type(from_ty_orig.peel_refs(), unsized_ty) {\n+                        if from_ty_orig.peel_refs() != unsized_ty {\n                             diag.note(&format!(\"the contained type `&{}` has an undefined layout\", unsized_ty));\n                         }\n                     },\n@@ -39,7 +39,7 @@ pub(super) fn check<'tcx>(\n                     e.span,\n                     &format!(\"transmute to `{}` which has an undefined layout\", to_ty_orig),\n                     |diag| {\n-                        if !TyS::same_type(to_ty_orig.peel_refs(), unsized_ty) {\n+                        if to_ty_orig.peel_refs() != unsized_ty {\n                             diag.note(&format!(\"the contained type `&{}` has an undefined layout\", unsized_ty));\n                         }\n                     },\n@@ -57,7 +57,7 @@ pub(super) fn check<'tcx>(\n                         e.span,\n                         &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n                         |diag| {\n-                            if !TyS::same_type(from_ty_orig.peel_refs(), from_ty) {\n+                            if from_ty_orig.peel_refs() != from_ty {\n                                 diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n                             }\n                         },\n@@ -82,7 +82,7 @@ pub(super) fn check<'tcx>(\n                         e.span,\n                         &format!(\"transmute to `{}` which has an undefined layout\", to_ty_orig),\n                         |diag| {\n-                            if !TyS::same_type(to_ty_orig.peel_refs(), to_ty) {\n+                            if to_ty_orig.peel_refs() != to_ty {\n                                 diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n                             }\n                         },\n@@ -101,9 +101,7 @@ pub(super) fn check<'tcx>(\n                 to_ty: to_sub_ty,\n             } => match (reduce_ty(cx, from_sub_ty), reduce_ty(cx, to_sub_ty)) {\n                 (ReducedTy::IntArray, _) | (_, ReducedTy::IntArray) => return false,\n-                (ReducedTy::UnorderedFields(from_ty), ReducedTy::UnorderedFields(to_ty))\n-                    if !TyS::same_type(from_ty, to_ty) =>\n-                {\n+                (ReducedTy::UnorderedFields(from_ty), ReducedTy::UnorderedFields(to_ty)) if from_ty != to_ty => {\n                     span_lint_and_then(\n                         cx,\n                         TRANSMUTE_UNDEFINED_REPR,\n@@ -121,10 +119,10 @@ pub(super) fn check<'tcx>(\n                                     cx.tcx.item_name(from_def.did)\n                                 ));\n                             } else {\n-                                if !TyS::same_type(from_ty_orig.peel_refs(), from_ty) {\n+                                if from_ty_orig.peel_refs() != from_ty {\n                                     diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n                                 }\n-                                if !TyS::same_type(to_ty_orig.peel_refs(), to_ty) {\n+                                if to_ty_orig.peel_refs() != to_ty {\n                                     diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n                                 }\n                             }\n@@ -142,7 +140,7 @@ pub(super) fn check<'tcx>(\n                         e.span,\n                         &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n                         |diag| {\n-                            if !TyS::same_type(from_ty_orig.peel_refs(), from_ty) {\n+                            if from_ty_orig.peel_refs() != from_ty {\n                                 diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n                             }\n                         },\n@@ -159,7 +157,7 @@ pub(super) fn check<'tcx>(\n                         e.span,\n                         &format!(\"transmute into `{}` which has an undefined layout\", to_ty_orig),\n                         |diag| {\n-                            if !TyS::same_type(to_ty_orig.peel_refs(), to_ty) {\n+                            if to_ty_orig.peel_refs() != to_ty {\n                                 diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n                             }\n                         },"}, {"sha": "8691148313702e4657a2137b664289b4b1925cb8", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -54,9 +54,6 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n             ),\n             hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n-        if item.defaultness.is_default() {\n-            println!(\"default\");\n-        }\n         match item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {\n                 println!(\"associated constant\");"}, {"sha": "56633490eaa1a7d51d1c4744eaba273226ccaa09", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -612,8 +612,8 @@ fn get_lint_group_and_level_or_lint(\n }\n \n fn get_lint_group(cx: &LateContext<'_>, lint_id: LintId) -> Option<String> {\n-    for (group_name, lints, _) in &cx.lint_store.get_lint_groups() {\n-        if IGNORED_LINT_GROUPS.contains(group_name) {\n+    for (group_name, lints, _) in cx.lint_store.get_lint_groups() {\n+        if IGNORED_LINT_GROUPS.contains(&group_name) {\n             continue;\n         }\n "}, {"sha": "9654895060f85bde17984d509fb4fc2f0906adf4", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -101,7 +101,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 if let Some(typeck) = self.inner.maybe_typeck_results {\n                     let l_ty = typeck.pat_ty(l.pat);\n                     let r_ty = typeck.pat_ty(r.pat);\n-                    if !rustc_middle::ty::TyS::same_type(l_ty, r_ty) {\n+                    if l_ty != r_ty {\n                         return false;\n                     }\n                 }"}, {"sha": "5a76ac23332d31d5fd08c8826cd8f9c78ec876ff", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -340,15 +340,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         expr_visitor_no_bodies(|e| {\n             // if we're still inside of the macro definition...\n             if e.span.ctxt() == expr.span.ctxt() {\n-                // ArgumnetV1::new(<value>, <format_trait>::fmt)\n+                // ArgumnetV1::new_<format_trait>(<value>)\n                 if_chain! {\n-                    if let ExprKind::Call(callee, [val, fmt_path]) = e.kind;\n+                    if let ExprKind::Call(callee, [val]) = e.kind;\n                     if let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind;\n-                    if seg.ident.name == sym::new;\n                     if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n                     if path.segments.last().unwrap().ident.name == sym::ArgumentV1;\n-                    if let ExprKind::Path(QPath::Resolved(_, path)) = fmt_path.kind;\n-                    if let [.., fmt_trait, _fmt] = path.segments;\n+                    if seg.ident.name.as_str().starts_with(\"new_\");\n                     then {\n                         let val_idx = if_chain! {\n                             if val.span.ctxt() == expr.span.ctxt();\n@@ -362,7 +360,19 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                                 formatters.len()\n                             }\n                         };\n-                        formatters.push((val_idx, fmt_trait.ident.name));\n+                        let fmt_trait = match seg.ident.name.as_str() {\n+                            \"new_display\" => \"Display\",\n+                            \"new_debug\" => \"Debug\",\n+                            \"new_lower_exp\" => \"LowerExp\",\n+                            \"new_upper_exp\" => \"UpperExp\",\n+                            \"new_octal\" => \"Octal\",\n+                            \"new_pointer\" => \"Pointer\",\n+                            \"new_binary\" => \"Binary\",\n+                            \"new_lower_hex\" => \"LowerHex\",\n+                            \"new_upper_hex\" => \"UpperHex\",\n+                            _ => unreachable!(),\n+                        };\n+                        formatters.push((val_idx, Symbol::intern(fmt_trait)));\n                     }\n                 }\n                 if let ExprKind::Struct(QPath::Resolved(_, path), ..) = e.kind {"}, {"sha": "5407b5e8ed93e8c014503b099723485fc67660c3", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -32,6 +32,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::Projection(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::OpaqueType(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),"}, {"sha": "958e6d1ec4615b2eeeaa8acfcf61ea17ac58ceb1", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -42,7 +42,7 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n-        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n+        GenericArgKind::Type(inner_ty) => other_ty == inner_ty,\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }"}, {"sha": "f065f0bffc7bf70fc934bec08ab33408bad2874c", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-01-27\"\n+channel = \"nightly-2022-02-10\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "9b03c9b47832f60e1626b6477d404ec8fab87157", "filename": "tests/ui/dbg_macro.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -16,4 +16,27 @@ fn main() {\n     dbg!(42);\n     dbg!(dbg!(dbg!(42)));\n     foo(3) + dbg!(factorial(4));\n+    dbg!(1, 2, dbg!(3, 4));\n+    dbg!(1, 2, 3, 4, 5);\n+}\n+\n+mod issue7274 {\n+    trait Thing<'b> {\n+        fn foo(&self);\n+    }\n+\n+    macro_rules! define_thing {\n+        ($thing:ident, $body:expr) => {\n+            impl<'a> Thing<'a> for $thing {\n+                fn foo<'b>(&self) {\n+                    $body\n+                }\n+            }\n+        };\n+    }\n+\n+    struct MyThing;\n+    define_thing!(MyThing, {\n+        dbg!(2);\n+    });\n }"}, {"sha": "8ee1b328720d919f2e9629bae91bd8ae5ca8e4bc", "filename": "tests/ui/dbg_macro.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -76,5 +76,38 @@ help: ensure to avoid having uses of it in version control\n LL |     foo(3) + factorial(4);\n    |              ~~~~~~~~~~~~\n \n-error: aborting due to 7 previous errors\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:19:5\n+   |\n+LL |     dbg!(1, 2, dbg!(3, 4));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, dbg!(3, 4));\n+   |     ~~~~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:20:5\n+   |\n+LL |     dbg!(1, 2, 3, 4, 5);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, 3, 4, 5);\n+   |     ~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:40:9\n+   |\n+LL |         dbg!(2);\n+   |         ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         2;\n+   |         ~\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "514fb25c8cfd823bfacd62b2babbfcd3d05e2a22", "filename": "tests/ui/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.rs?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::non_send_fields_in_send_ty)]\n+#![allow(suspicious_auto_trait_impls)]\n #![feature(extern_types)]\n \n use std::cell::UnsafeCell;"}, {"sha": "b6c904a147a5f4da727b9e75b70c94ced79ad607", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9055f34b719b4a9f57ca8de1d7848312b7b74574/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=9055f34b719b4a9f57ca8de1d7848312b7b74574", "patch": "@@ -1,167 +1,167 @@\n error: some fields in `RingBuffer<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:16:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:17:1\n    |\n LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n note: it is not safe to send field `data` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:11:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:12:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n \n error: some fields in `MvccRwLock<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:24:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:25:1\n    |\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `lock` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:21:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:22:5\n    |\n LL |     lock: Mutex<Box<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n \n error: some fields in `ArcGuard<RC, T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:32:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:33:1\n    |\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `head` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:29:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:30:5\n    |\n LL |     head: Arc<RC>,\n    |     ^^^^^^^^^^^^^\n    = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n \n error: some fields in `DeviceHandle<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:48:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:49:1\n    |\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `context` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:44:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:45:5\n    |\n LL |     context: T,\n    |     ^^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `NoGeneric` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:55:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:56:1\n    |\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `rc_is_not_send` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:52:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:53:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: some fields in `MultiField<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:63:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:64:1\n    |\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field1` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:58:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n note: it is not safe to send field `field2` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n note: it is not safe to send field `field3` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:61:5\n    |\n LL |     field3: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `MyOption<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:70:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:71:1\n    |\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `0` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:66:12\n+  --> $DIR/non_send_fields_in_send_ty.rs:67:12\n    |\n LL |     MySome(T),\n    |            ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `MultiParam<A, B>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:82:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:83:1\n    |\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `vec` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:79:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:80:5\n    |\n LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n \n error: some fields in `HeuristicTest` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:100:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:101:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field4` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:95:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:96:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: some fields in `AttrTest3<T>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:119:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:120:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `0` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:114:11\n+  --> $DIR/non_send_fields_in_send_ty.rs:115:11\n    |\n LL |     Enum2(T),\n    |           ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: some fields in `Complex<P, u32>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:127:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:128:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field1` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:123:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:124:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n error: some fields in `Complex<Q, MutexGuard<'static, bool>>` are not safe to be sent to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:130:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:131:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: it is not safe to send field `field2` to another thread\n-  --> $DIR/non_send_fields_in_send_ty.rs:124:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:125:5\n    |\n LL |     field2: B,\n    |     ^^^^^^^^^"}]}