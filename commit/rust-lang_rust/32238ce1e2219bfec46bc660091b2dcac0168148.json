{"sha": "32238ce1e2219bfec46bc660091b2dcac0168148", "node_id": "C_kwDOAAsO6NoAKDMyMjM4Y2UxZTIyMTliZmVjNDZiYzY2MDA5MWIyZGNhYzAxNjgxNDg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-04T09:26:04Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-10-23T11:43:07Z"}, "message": "Allow LTO for dylibs", "tree": {"sha": "87da7362e0c0ac60531beb67b1366de8f107d7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87da7362e0c0ac60531beb67b1366de8f107d7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32238ce1e2219bfec46bc660091b2dcac0168148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmNVKMsACgkQkJzQ0mSD\nUWuSjgv/c6dFtLf4GgtzQpLbKTcvXhfBajU2ZlMN/ZoQkvAu3L+4bli2JUlw4BIU\ngQJ0CtNXv7l9H1JlXaZ9mwhB6qq7Nx8JO/hu2qJsdmMJ8O6KQ2PlQ+tpPjKiKcwn\nmZcuoeJruUq0sRPB24rkTXCgXSec951jglCGRbmFxYCSNMiRVGxIwdKDuCB0pNpV\nL/nOyy+lronOCFnsHPfa2Z4l9aimg3/Mk5CfNIHpisNWCxJfYlfG9yVhC2EJEZBp\nu1IHAMzkRTrEgvhGhQizpWTnOR53fgQM3bo0h9lX10yq+pnmDz56Npjy+Zx2XBAz\npfNIiCOnC1DVrVXI6J9wH3lby0dodJ4HSsJta846GtkfDrHKCXNjXuvleZUP3rs2\n6wGzumv+SpI2n/82LsDf57zkn6O5m7ufiGkW+INzy99u1ZnNtZeSgaFPwKEQJUux\n9IHww5R586T1GHalt+JImcgRKOditrBh4RlDWE6YxpD6N2OnZ0DTpQwoFGy7ROd9\n3kANvHWO\n=88Dv\n-----END PGP SIGNATURE-----", "payload": "tree 87da7362e0c0ac60531beb67b1366de8f107d7dc\nparent f7f17bf220265f0d36a015a14d5ce613b81a2822\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1662283564 +0000\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1666525387 +0200\n\nAllow LTO for dylibs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32238ce1e2219bfec46bc660091b2dcac0168148", "html_url": "https://github.com/rust-lang/rust/commit/32238ce1e2219bfec46bc660091b2dcac0168148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32238ce1e2219bfec46bc660091b2dcac0168148/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f17bf220265f0d36a015a14d5ce613b81a2822", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f17bf220265f0d36a015a14d5ce613b81a2822", "html_url": "https://github.com/rust-lang/rust/commit/f7f17bf220265f0d36a015a14d5ce613b81a2822"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "fb58d5f7df2d095872466003d8c8fe64165db4de", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32238ce1e2219bfec46bc660091b2dcac0168148/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32238ce1e2219bfec46bc660091b2dcac0168148/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=32238ce1e2219bfec46bc660091b2dcac0168148", "patch": "@@ -32,8 +32,8 @@ pub const THIN_LTO_KEYS_INCR_COMP_FILE_NAME: &str = \"thin-lto-past-keys.bin\";\n \n pub fn crate_type_allows_lto(crate_type: CrateType) -> bool {\n     match crate_type {\n-        CrateType::Executable | CrateType::Staticlib | CrateType::Cdylib => true,\n-        CrateType::Dylib | CrateType::Rlib | CrateType::ProcMacro => false,\n+        CrateType::Executable | CrateType::Dylib | CrateType::Staticlib | CrateType::Cdylib => true,\n+        CrateType::Rlib | CrateType::ProcMacro => false,\n     }\n }\n \n@@ -73,17 +73,6 @@ fn prepare_lto(\n     // with either fat or thin LTO\n     let mut upstream_modules = Vec::new();\n     if cgcx.lto != Lto::ThinLocal {\n-        if cgcx.opts.cg.prefer_dynamic {\n-            diag_handler\n-                .struct_err(\"cannot prefer dynamic linking when performing LTO\")\n-                .note(\n-                    \"only 'staticlib', 'bin', and 'cdylib' outputs are \\\n-                               supported with LTO\",\n-                )\n-                .emit();\n-            return Err(FatalError);\n-        }\n-\n         // Make sure we actually can run LTO\n         for crate_type in cgcx.crate_types.iter() {\n             if !crate_type_allows_lto(*crate_type) {\n@@ -92,6 +81,8 @@ fn prepare_lto(\n                                             static library outputs\",\n                 );\n                 return Err(e);\n+            } else if *crate_type == CrateType::Dylib {\n+                diag_handler.warn(\"LTO with dylibs may not be as effective\");\n             }\n         }\n "}, {"sha": "1adaf9bd6cfd6cc8320c69b5bdaec56c8bf75d7a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32238ce1e2219bfec46bc660091b2dcac0168148/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32238ce1e2219bfec46bc660091b2dcac0168148/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=32238ce1e2219bfec46bc660091b2dcac0168148", "patch": "@@ -11,7 +11,7 @@ use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{emit_metadata, METADATA_FILENAME};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n-use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n+use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Lto, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SplitDwarfKind};\n use rustc_session::cstore::DllImport;\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n@@ -49,6 +49,7 @@ use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{env, fmt, fs, io, mem, str};\n+use itertools::Itertools;\n \n pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n@@ -208,11 +209,24 @@ pub fn link_binary<'a>(\n }\n \n pub fn each_linked_rlib(\n+    sess: &Session,\n     info: &CrateInfo,\n     f: &mut dyn FnMut(CrateNum, &Path),\n ) -> Result<(), errors::LinkRlibError> {\n     let crates = info.used_crates.iter();\n     let mut fmts = None;\n+\n+    let lto_active = matches!(sess.lto(), Lto::Fat | Lto::Thin);\n+    if lto_active {\n+        for combination in info.dependency_formats.iter().combinations(2) {\n+            let (ty1, list1) = combination[0];\n+            let (ty2, list2) = combination[1];\n+            if list1 != list2 {\n+                return Err(format!(\"{ty1:?} and {ty2:?} do not have equivalent dependency formats (`{list1:?}` vs `{list2:?}`)\"));\n+            }\n+        }\n+    }\n+\n     for (ty, list) in info.dependency_formats.iter() {\n         match ty {\n             CrateType::Executable\n@@ -222,6 +236,10 @@ pub fn each_linked_rlib(\n                 fmts = Some(list);\n                 break;\n             }\n+            CrateType::Dylib if lto_active => {\n+                fmts = Some(list);\n+                break;\n+            }\n             _ => {}\n         }\n     }\n@@ -490,7 +508,7 @@ fn link_staticlib<'a>(\n     )?;\n     let mut all_native_libs = vec![];\n \n-    let res = each_linked_rlib(&codegen_results.crate_info, &mut |cnum, path| {\n+    let res = each_linked_rlib(sess, &codegen_results.crate_info, &mut |cnum, path| {\n         let name = codegen_results.crate_info.crate_name[&cnum];\n         let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n "}, {"sha": "d0ac016b02e151863d263c9223c7c26dba6f2889", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32238ce1e2219bfec46bc660091b2dcac0168148/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32238ce1e2219bfec46bc660091b2dcac0168148/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=32238ce1e2219bfec46bc660091b2dcac0168148", "patch": "@@ -999,6 +999,14 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     let coordinator_send = tx_to_llvm_workers;\n     let sess = tcx.sess;\n \n+    let mut each_linked_rlib_for_lto = Vec::new();\n+    drop(link::each_linked_rlib(sess, crate_info, &mut |cnum, path| {\n+        if link::ignored_for_lto(sess, crate_info, cnum) {\n+            return;\n+        }\n+        each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n+    }));\n+\n     // Compute the set of symbols we need to retain when doing LTO (if we need to)\n     let exported_symbols = {\n         let mut exported_symbols = FxHashMap::default();\n@@ -1020,7 +1028,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n             }\n             Lto::Fat | Lto::Thin => {\n                 exported_symbols.insert(LOCAL_CRATE, copy_symbols(LOCAL_CRATE));\n-                for &cnum in tcx.crates(()).iter() {\n+                for &(cnum, ref _path) in &each_linked_rlib_for_lto {\n                     exported_symbols.insert(cnum, copy_symbols(cnum));\n                 }\n                 Some(Arc::new(exported_symbols))\n@@ -1040,14 +1048,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         })\n         .expect(\"failed to spawn helper thread\");\n \n-    let mut each_linked_rlib_for_lto = Vec::new();\n-    drop(link::each_linked_rlib(crate_info, &mut |cnum, path| {\n-        if link::ignored_for_lto(sess, crate_info, cnum) {\n-            return;\n-        }\n-        each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n-    }));\n-\n     let ol =\n         if tcx.sess.opts.unstable_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n             // If we know that we won\u2019t be doing codegen, create target machines without optimisation."}]}