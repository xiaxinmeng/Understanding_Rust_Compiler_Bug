{"sha": "5593add3a8da4bb69ecbece5eaef91f01ca748f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OTNhZGQzYThkYTRiYjY5ZWNiZWNlNWVhZWY5MWYwMWNhNzQ4Zjc=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-24T22:31:33Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-27T19:48:35Z"}, "message": "rustc: Break cyclical dependence between emit_tydescs and gen_shape_tables.\n\nForce all tydescs to be emitted before emit_tydescs to avoid linker\nfailures.", "tree": {"sha": "78af200509e9069abccb5e9936de97eb3fd2fe57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78af200509e9069abccb5e9936de97eb3fd2fe57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5593add3a8da4bb69ecbece5eaef91f01ca748f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5593add3a8da4bb69ecbece5eaef91f01ca748f7", "html_url": "https://github.com/rust-lang/rust/commit/5593add3a8da4bb69ecbece5eaef91f01ca748f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5593add3a8da4bb69ecbece5eaef91f01ca748f7/comments", "author": null, "committer": null, "parents": [{"sha": "785c524d3ecbb44760139c9a2deab8f897ab0426", "url": "https://api.github.com/repos/rust-lang/rust/commits/785c524d3ecbb44760139c9a2deab8f897ab0426", "html_url": "https://github.com/rust-lang/rust/commit/785c524d3ecbb44760139c9a2deab8f897ab0426"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "405a52cf7c866ce975f75c7aa0c9132534f8634a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5593add3a8da4bb69ecbece5eaef91f01ca748f7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5593add3a8da4bb69ecbece5eaef91f01ca748f7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5593add3a8da4bb69ecbece5eaef91f01ca748f7", "patch": "@@ -531,6 +531,10 @@ fn declare_tydesc_addrspace(ccx: @crate_ctxt, t: ty::t) -> addrspace {\n // Generates the declaration for (but doesn't emit) a type descriptor.\n fn declare_tydesc(ccx: @crate_ctxt, t: ty::t) -> @tydesc_info {\n     let _icx = ccx.insn_ctxt(\"declare_tydesc\");\n+    // If emit_tydescs already ran, then we shouldn't be creating any new\n+    // tydescs.\n+    assert !ccx.finished_tydescs;\n+\n     let llty = type_of(ccx, t);\n \n     if ccx.sess.count_type_sizes() {\n@@ -624,6 +628,8 @@ fn make_generic_glue(ccx: @crate_ctxt, t: ty::t, llfn: ValueRef,\n \n fn emit_tydescs(ccx: @crate_ctxt) {\n     let _icx = ccx.insn_ctxt(\"emit_tydescs\");\n+    // As of this point, allow no more tydescs to be created.\n+    ccx.finished_tydescs = true;\n     for ccx.tydescs.each |key, val| {\n         let glue_fn_ty = T_ptr(T_generic_glue_fn(ccx));\n         let ti = val;\n@@ -5927,6 +5933,7 @@ fn trans_crate(sess: session::session,\n           discrims: ast_util::new_def_hash::<ValueRef>(),\n           discrim_symbols: int_hash::<~str>(),\n           tydescs: ty::new_ty_hash(),\n+          mut finished_tydescs: false,\n           external: ast_util::new_def_hash(),\n           monomorphized: map::hashmap(hash_mono_id, sys::shape_eq),\n           monomorphizing: ast_util::new_def_hash(),\n@@ -5982,6 +5989,9 @@ fn trans_crate(sess: session::session,\n     }\n \n     fill_crate_map(ccx, crate_map);\n+    // NB: Must call force_declare_tydescs before emit_tydescs to break\n+    // cyclical dependency with shape code! See shape.rs for details.\n+    force_declare_tydescs(ccx);\n     emit_tydescs(ccx);\n     gen_shape_tables(ccx);\n     write_abi_version(ccx);"}, {"sha": "1a205929e5c054a90c7e801caa3df58e0a88011b", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5593add3a8da4bb69ecbece5eaef91f01ca748f7/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5593add3a8da4bb69ecbece5eaef91f01ca748f7/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5593add3a8da4bb69ecbece5eaef91f01ca748f7", "patch": "@@ -117,6 +117,9 @@ type crate_ctxt = {\n      discrims: hashmap<ast::def_id, ValueRef>,\n      discrim_symbols: hashmap<ast::node_id, ~str>,\n      tydescs: hashmap<ty::t, @tydesc_info>,\n+     // Set when running emit_tydescs to enforce that no more tydescs are\n+     // created.\n+     mut finished_tydescs: bool,\n      // Track mapping of external ids to local items imported for inlining\n      external: hashmap<ast::def_id, Option<ast::node_id>>,\n      // Cache instances of monomorphized functions"}, {"sha": "b0dce025f8ee4f47d00984df893d700a8630dca9", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5593add3a8da4bb69ecbece5eaef91f01ca748f7/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5593add3a8da4bb69ecbece5eaef91f01ca748f7/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=5593add3a8da4bb69ecbece5eaef91f01ca748f7", "patch": "@@ -584,6 +584,34 @@ fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     return mk_global(ccx, ~\"resource_shapes\", C_struct(dtors), true);\n }\n \n+// This function serves to break a cyclical dependence between\n+// emit_tydescs and gen_shape_tables.\n+//\n+//  * emit_tydescs calls shape_of, which causes changes to the shape\n+//    tables\n+//  * gen_shape_tables transitively calls get_tydesc, which causes new\n+//    tydescs to be created\n+//\n+// We force those tydescs to be emitted now, thus breaking the\n+// dependency.\n+fn force_declare_tydescs(ccx: @crate_ctxt) {\n+    // Walk all known tydescs first to force shape code to declare\n+    // dependencies.\n+    for ccx.tydescs.each |key, _val| {\n+        shape_of(ccx, key);\n+    }\n+\n+    // Then walk all resource shapes to force emit all dtors.\n+    let len = ccx.shape_cx.resources.len();\n+    for uint::range(0u, len) |i| {\n+        let ri = ccx.shape_cx.resources.get(i);\n+        for ri.tps.each() |s| { assert !ty::type_has_params(s); }\n+        do option::iter(ri.parent_id) |id| {\n+            trans::base::get_res_dtor(ccx, ri.did, id, ri.tps);\n+        }\n+    }\n+}\n+\n fn gen_shape_tables(ccx: @crate_ctxt) {\n     let lltagstable = gen_enum_shapes(ccx);\n     let llresourcestable = gen_resource_shapes(ccx);"}]}