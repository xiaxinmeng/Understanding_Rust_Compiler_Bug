{"sha": "19d44f2d2491cc2c5f603da79737dacac84715ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDQ0ZjJkMjQ5MWNjMmM1ZjYwM2RhNzk3MzdkYWNhYzg0NzE1ZWY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-12-03T12:49:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-15T18:53:03Z"}, "message": "Make arenas thread safe", "tree": {"sha": "a818f8b92ac8a2eef64ec671600b0ee02f9fabe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a818f8b92ac8a2eef64ec671600b0ee02f9fabe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d44f2d2491cc2c5f603da79737dacac84715ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d44f2d2491cc2c5f603da79737dacac84715ef", "html_url": "https://github.com/rust-lang/rust/commit/19d44f2d2491cc2c5f603da79737dacac84715ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d44f2d2491cc2c5f603da79737dacac84715ef/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ead5cf11b81e97b614f57ed4cece67e9453b9ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead5cf11b81e97b614f57ed4cece67e9453b9ced", "html_url": "https://github.com/rust-lang/rust/commit/ead5cf11b81e97b614f57ed4cece67e9453b9ced"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "e03d9454d062fc982de12ff08ecdde4a39536a25", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19d44f2d2491cc2c5f603da79737dacac84715ef/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/19d44f2d2491cc2c5f603da79737dacac84715ef/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=19d44f2d2491cc2c5f603da79737dacac84715ef", "patch": "@@ -66,6 +66,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"arena\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_data_structures 0.0.0\",\n+]\n \n [[package]]\n name = \"arrayvec\""}, {"sha": "e2af67dd9286138e61ef1196d4d7a8487a80c20c", "filename": "src/libarena/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19d44f2d2491cc2c5f603da79737dacac84715ef/src%2Flibarena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/19d44f2d2491cc2c5f603da79737dacac84715ef/src%2Flibarena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2FCargo.toml?ref=19d44f2d2491cc2c5f603da79737dacac84715ef", "patch": "@@ -7,3 +7,6 @@ version = \"0.0.0\"\n name = \"arena\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+\n+[dependencies]\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file"}, {"sha": "c79e0e14e3d8b4d1ab65050153537f716e37508b", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/19d44f2d2491cc2c5f603da79737dacac84715ef/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d44f2d2491cc2c5f603da79737dacac84715ef/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=19d44f2d2491cc2c5f603da79737dacac84715ef", "patch": "@@ -32,6 +32,9 @@\n #![allow(deprecated)]\n \n extern crate alloc;\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::sync::MTLock;\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -290,6 +293,8 @@ pub struct DroplessArena {\n     chunks: RefCell<Vec<TypedArenaChunk<u8>>>,\n }\n \n+unsafe impl Send for DroplessArena {}\n+\n impl DroplessArena {\n     pub fn new() -> DroplessArena {\n         DroplessArena {\n@@ -410,6 +415,72 @@ impl DroplessArena {\n     }\n }\n \n+pub struct SyncTypedArena<T> {\n+    lock: MTLock<TypedArena<T>>,\n+}\n+\n+impl<T> SyncTypedArena<T> {\n+    #[inline(always)]\n+    pub fn new() -> SyncTypedArena<T> {\n+        SyncTypedArena {\n+            lock: MTLock::new(TypedArena::new())\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc(&self, object: T) -> &mut T {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n+    where\n+        T: Copy,\n+    {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n+    }\n+\n+    #[inline(always)]\n+    pub fn clear(&mut self) {\n+        self.lock.get_mut().clear();\n+    }\n+}\n+\n+pub struct SyncDroplessArena {\n+    lock: MTLock<DroplessArena>,\n+}\n+\n+impl SyncDroplessArena {\n+    #[inline(always)]\n+    pub fn new() -> SyncDroplessArena {\n+        SyncDroplessArena {\n+            lock: MTLock::new(DroplessArena::new())\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n+        self.lock.lock().in_arena(ptr)\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc<T>(&self, object: T) -> &mut T {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc(object) as *mut T) }\n+    }\n+\n+    #[inline(always)]\n+    pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n+    where\n+        T: Copy,\n+    {\n+        // Extend the lifetime of the result since it's limited to the lock guard\n+        unsafe { &mut *(self.lock.lock().alloc_slice(slice) as *mut [T]) }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     extern crate test;"}]}