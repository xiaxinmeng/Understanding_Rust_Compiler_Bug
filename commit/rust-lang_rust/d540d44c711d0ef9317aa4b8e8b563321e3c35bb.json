{"sha": "d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDBkNDRjNzExZDBlZjkzMTdhYTRiOGU4YjU2MzMyMWUzYzM1YmI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-25T19:36:14Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-27T17:33:48Z"}, "message": "Remove global_tcx from TyCtxt\n\nThe non-global context was removed; there's only one context now. This\nis a noop method that only serves to confuse readers -- remove it.", "tree": {"sha": "489a8b51b1afa8b584fd2e0cef6c1468c261bc3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489a8b51b1afa8b584fd2e0cef6c1468c261bc3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "html_url": "https://github.com/rust-lang/rust/commit/d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37fe2de697bb1a9d304e4e811836e125f944cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37fe2de697bb1a9d304e4e811836e125f944cd5", "html_url": "https://github.com/rust-lang/rust/commit/a37fe2de697bb1a9d304e4e811836e125f944cd5"}], "stats": {"total": 136, "additions": 59, "deletions": 77}, "files": [{"sha": "acfdc91523f70fce25036ac59148d453d304e0b4", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -590,7 +590,7 @@ impl DepGraph {\n                 // mark it as green by recursively marking all of its\n                 // dependencies green.\n                 self.try_mark_previous_green(\n-                    tcx.global_tcx(),\n+                    tcx,\n                     data,\n                     prev_index,\n                     &dep_node"}, {"sha": "acb018f2d34d731103ea4ec035a9c6e3bcef8643", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -1460,7 +1460,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // type-checking closure types are in local tables only.\n         if !self.in_progress_tables.is_some() || !ty.has_closure_types() {\n             if !(param_env, ty).has_local_value() {\n-                return ty.is_copy_modulo_regions(self.tcx.global_tcx(), param_env, span);\n+                return ty.is_copy_modulo_regions(self.tcx, param_env, span);\n             }\n         }\n "}, {"sha": "7e7b4f2a17a40e2c02210368b71307f02eef6874", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -561,15 +561,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             def_id, instantiated_ty\n         );\n \n-        let gcx = self.tcx.global_tcx();\n-\n         // Use substs to build up a reverse map from regions to their\n         // identity mappings. This is necessary because of `impl\n         // Trait` lifetimes are computed by replacing existing\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n-        let id_substs = InternalSubsts::identity_for_item(gcx, def_id);\n+        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n         let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> = opaque_defn\n             .substs\n             .iter()\n@@ -854,7 +852,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.tcx().global_tcx().mk_region(ty::ReStatic)\n+                self.tcx().mk_region(ty::ReStatic)\n             },\n         }\n     }"}, {"sha": "c1435551a591854918a745eb7bad2ab337566da5", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -82,7 +82,7 @@ impl ExprVisitor<'tcx> {\n \n             // Special-case transmutting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n-            let from = unpack_option_like(self.tcx.global_tcx(), from);\n+            let from = unpack_option_like(self.tcx, from);\n             if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (&from.kind, sk_to) {\n                 if size_to == Pointer.size(&self.tcx) {\n                     struct_span_err!(self.tcx.sess, span, E0591,"}, {"sha": "3f5f54c94638eba2c0f71f820b18dc5c27429f7a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -749,7 +749,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                              .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>\n-                        closure_substs.closure_kind(closure_def_id, self.tcx.global_tcx()),\n+                        closure_substs.closure_kind(closure_def_id, self.tcx),\n                 }\n             }\n             _ => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", ty),"}, {"sha": "d9e83df7ddda6028e2001c00a3158218060a0727", "filename": "src/librustc/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -108,7 +108,7 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                     goal: obligation.goal.predicate,\n                 }, &mut orig_values);\n \n-                match infcx.tcx.global_tcx().evaluate_goal(canonical_goal) {\n+                match infcx.tcx.evaluate_goal(canonical_goal) {\n                     Ok(response) => {\n                         if response.is_proven() {\n                             making_progress = true;"}, {"sha": "c2d531793372a37c141a7b5df05e2db44ec52be8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             4\n         };\n \n-        let normalize = |candidate| self.tcx.global_tcx().infer_ctxt().enter(|ref infcx| {\n+        let normalize = |candidate| self.tcx.infer_ctxt().enter(|ref infcx| {\n             let normalized = infcx\n                 .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n                 .normalize(candidate)\n@@ -783,8 +783,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n \n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n-                        let violations = self.tcx.global_tcx()\n-                            .object_safety_violations(trait_def_id);\n+                        let violations = self.tcx.object_safety_violations(trait_def_id);\n                         if let Some(err) = self.tcx.report_object_safety_error(\n                             span,\n                             trait_def_id,\n@@ -920,7 +919,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             TraitNotObjectSafe(did) => {\n-                let violations = self.tcx.global_tcx().object_safety_violations(did);\n+                let violations = self.tcx.object_safety_violations(did);\n                 if let Some(err) = self.tcx.report_object_safety_error(span, did, violations) {\n                     err\n                 } else {"}, {"sha": "a981162fdc326130d8518a7b3f99595b6aa04629", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 } else {\n                     if !substs.has_local_value() {\n                         let instance = ty::Instance::resolve(\n-                            self.selcx.tcx().global_tcx(),\n+                            self.selcx.tcx(),\n                             obligation.param_env,\n                             def_id,\n                             substs,"}, {"sha": "aa30541610e9b8e1ef9f740a8092bf09ff8e1708", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -40,12 +40,11 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n             };\n         }\n \n-        let gcx = tcx.global_tcx();\n         let mut orig_values = OriginalQueryValues::default();\n         let c_ty = self.infcx.canonicalize_query(&self.param_env.and(ty), &mut orig_values);\n         let span = self.cause.span;\n         debug!(\"c_ty = {:?}\", c_ty);\n-        if let Ok(result) = &gcx.dropck_outlives(c_ty) {\n+        if let Ok(result) = &tcx.dropck_outlives(c_ty) {\n             if result.is_proven() {\n                 if let Ok(InferOk { value, obligations }) =\n                     self.infcx.instantiate_query_response_and_region_obligations("}, {"sha": "17684df7e9b8eb79579abf8573c07f3c0a815de0", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -50,7 +50,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`.\n-        self.tcx.global_tcx().evaluate_obligation(c_pred)\n+        self.tcx.evaluate_obligation(c_pred)\n     }\n \n     // Helper function that canonicalizes and runs the query. If an"}, {"sha": "ab42eab28440f91494616b347db6c6ec19ab4b64", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -141,7 +141,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 // binder). It would be better to normalize in a\n                 // binding-aware fashion.\n \n-                let gcx = self.infcx.tcx.global_tcx();\n+                let tcx = self.infcx.tcx;\n \n                 let mut orig_values = OriginalQueryValues::default();\n                 // HACK(matthewjasper) `'static` is special-cased in selection,\n@@ -150,7 +150,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     &self.param_env.and(*data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n-                match gcx.normalize_projection_ty(c_data) {\n+                match tcx.normalize_projection_ty(c_data) {\n                     Ok(result) => {\n                         // We don't expect ambiguity.\n                         if result.is_ambiguous() {"}, {"sha": "f5808b6b5faaf03b9811d488ec84c50079ce11ef", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -97,7 +97,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         let mut orig_values = OriginalQueryValues::default();\n         let key = self.canonicalize_query(&param_env.and(ty), &mut orig_values);\n-        let result = match self.tcx.global_tcx().implied_outlives_bounds(key) {\n+        let result = match self.tcx.implied_outlives_bounds(key) {\n             Ok(r) => r,\n             Err(NoSolution) => {\n                 self.tcx.sess.delay_span_bug("}, {"sha": "e1ca9a16d965f690eb5df33c39b0d439659c1ed2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -2491,7 +2491,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 if other.evaluation.must_apply_modulo_regions() {\n                     match victim.candidate {\n                         ImplCandidate(victim_def) => {\n-                            let tcx = self.tcx().global_tcx();\n+                            let tcx = self.tcx();\n                             return tcx.specializes((other_def, victim_def))\n                                 || tcx.impls_are_allowed_to_overlap(\n                                     other_def, victim_def).is_some();"}, {"sha": "ce0f43021378b22073f3252b7ea398e3b05d082b", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -162,7 +162,6 @@ impl<'tcx> Children {\n                 }\n             };\n \n-            let tcx = tcx.global_tcx();\n             let (le, ge) = traits::overlapping_impls(\n                 tcx,\n                 possible_sibling,"}, {"sha": "18ec2241b2df89605db8ceca1d7a78bf9ec49d49", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -661,8 +661,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 }\n             }\n             None => {\n-                self.global_tcx()\n-                    .impl_defaultness(node_item_def_id)\n+                self.impl_defaultness(node_item_def_id)\n                     .is_default()\n             }\n         }"}, {"sha": "2d68ad7fbd5c11ba7368b49466089e9fc5aec405", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -1067,14 +1067,6 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    /// Gets the global `TyCtxt`.\n-    #[inline]\n-    pub fn global_tcx(self) -> TyCtxt<'tcx> {\n-        TyCtxt {\n-            gcx: self.gcx,\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn hir(self) -> &'tcx hir_map::Map<'tcx> {\n         &self.hir_map\n@@ -1158,7 +1150,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Like lift, but only tries in the global tcx.\n     pub fn lift_to_global<T: ?Sized + Lift<'tcx>>(self, value: &T) -> Option<T::Lifted> {\n-        value.lift_to_tcx(self.global_tcx())\n+        value.lift_to_tcx(self)\n     }\n \n     /// Creates a type context and call the closure with a `TyCtxt` reference\n@@ -1432,7 +1424,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                            -> Result<(), E::Error>\n         where E: ty::codec::TyEncoder\n     {\n-        self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n+        self.queries.on_disk_cache.serialize(self, encoder)\n     }\n \n     /// If `true`, we should use the AST-based borrowck (we may *also* use\n@@ -1606,7 +1598,7 @@ impl<'tcx> GlobalCtxt<'tcx> {\n         let tcx = TyCtxt {\n             gcx: self,\n         };\n-        ty::tls::with_related_context(tcx.global_tcx(), |icx| {\n+        ty::tls::with_related_context(tcx, |icx| {\n             let new_icx = ty::tls::ImplicitCtxt {\n                 tcx,\n                 query: icx.query.clone(),\n@@ -2431,7 +2423,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, ty::Const::from_usize(self.global_tcx(), n)))\n+        self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))\n     }\n \n     #[inline]\n@@ -2646,7 +2638,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.len() == 0 {\n             List::empty()\n         } else {\n-            self.global_tcx()._intern_canonical_var_infos(ts)\n+            self._intern_canonical_var_infos(ts)\n         }\n     }\n "}, {"sha": "741830f205cb0a56a83c99ac0f3326de500a9854", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -210,7 +210,7 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {\n-        Instance::new(def_id, tcx.global_tcx().empty_substs_for_def_id(def_id))\n+        Instance::new(def_id, tcx.empty_substs_for_def_id(def_id))\n     }\n \n     #[inline]"}, {"sha": "3accbdf9bcbc6314d0aa88d264dc81413095feae", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -1883,7 +1883,7 @@ impl<'tcx> HasDataLayout for TyCtxt<'tcx> {\n \n impl<'tcx> HasTyCtxt<'tcx> for TyCtxt<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.global_tcx()\n+        *self\n     }\n }\n \n@@ -2003,7 +2003,7 @@ impl TyCtxt<'tcx> {\n     pub fn layout_of(self, param_env_and_ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                      -> Result<TyLayout<'tcx>, LayoutError<'tcx>> {\n         let cx = LayoutCx {\n-            tcx: self.global_tcx(),\n+            tcx: self,\n             param_env: param_env_and_ty.param_env\n         };\n         cx.layout_of(param_env_and_ty.value)\n@@ -2017,7 +2017,7 @@ impl ty::query::TyCtxtAt<'tcx> {\n     pub fn layout_of(self, param_env_and_ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                      -> Result<TyLayout<'tcx>, LayoutError<'tcx>> {\n         let cx = LayoutCx {\n-            tcx: self.global_tcx().at(self.span),\n+            tcx: self.at(self.span),\n             param_env: param_env_and_ty.param_env\n         };\n         cx.layout_of(param_env_and_ty.value)"}, {"sha": "0e9600449f62c7088032b8bb651eb901b08b3dc8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -2378,7 +2378,7 @@ impl<'tcx> AdtDef {\n     pub fn eval_explicit_discr(&self, tcx: TyCtxt<'tcx>, expr_did: DefId) -> Option<Discr<'tcx>> {\n         let param_env = tcx.param_env(expr_did);\n         let repr_type = self.repr.discr_type();\n-        let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), expr_did);\n+        let substs = InternalSubsts::identity_for_item(tcx, expr_did);\n         let instance = ty::Instance::new(expr_did, substs);\n         let cid = GlobalId {\n             instance,\n@@ -2387,7 +2387,7 @@ impl<'tcx> AdtDef {\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => {\n                 // FIXME: Find the right type and use it instead of `val.ty` here\n-                if let Some(b) = val.try_eval_bits(tcx.global_tcx(), param_env, val.ty) {\n+                if let Some(b) = val.try_eval_bits(tcx, param_env, val.ty) {\n                     trace!(\"discriminants: {} ({:?})\", b, repr_type);\n                     Some(Discr {\n                         val: b,\n@@ -2423,7 +2423,7 @@ impl<'tcx> AdtDef {\n         tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {\n         let repr_type = self.repr.discr_type();\n-        let initial = repr_type.initial_discriminant(tcx.global_tcx());\n+        let initial = repr_type.initial_discriminant(tcx);\n         let mut prev_discr = None::<Discr<'tcx>>;\n         self.variants.iter_enumerated().map(move |(i, v)| {\n             let mut discr = prev_discr.map_or(initial, |d| d.wrap_incr(tcx));\n@@ -2457,7 +2457,7 @@ impl<'tcx> AdtDef {\n         let (val, offset) = self.discriminant_def_for_variant(variant_index);\n         let explicit_value = val\n             .and_then(|expr_did| self.eval_explicit_discr(tcx, expr_did))\n-            .unwrap_or_else(|| self.repr.discr_type().initial_discriminant(tcx.global_tcx()));\n+            .unwrap_or_else(|| self.repr.discr_type().initial_discriminant(tcx));\n         explicit_value.checked_add(tcx, offset as u128).0\n     }\n "}, {"sha": "d247c0f9f69f3d4eb8d12f02da6343a4be01876f", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         tls::with_related_context(self, move |current_icx| {\n             // Update the `ImplicitCtxt` to point to our new query job.\n             let new_icx = tls::ImplicitCtxt {\n-                tcx: self.global_tcx(),\n+                tcx: self,\n                 query: Some(job),\n                 diagnostics,\n                 layout_depth: current_icx.layout_depth,\n@@ -274,7 +274,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             // Use the `ImplicitCtxt` while we execute the query.\n             tls::enter_context(&new_icx, |_| {\n-                compute(self.global_tcx())\n+                compute(self)\n             })\n         })\n     }\n@@ -384,7 +384,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n                 self.start_query(job.job.clone(), diagnostics, |tcx| {\n                     tcx.dep_graph.with_anon_task(Q::dep_kind(), || {\n-                        Q::compute(tcx.global_tcx(), key)\n+                        Q::compute(tcx, key)\n                     })\n                 })\n             });\n@@ -445,10 +445,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         debug_assert!(self.dep_graph.is_green(dep_node));\n \n         // First we try to load the result from the on-disk cache.\n-        let result = if Q::cache_on_disk(self.global_tcx(), key.clone(), None) &&\n+        let result = if Q::cache_on_disk(self, key.clone(), None) &&\n                         self.sess.opts.debugging_opts.incremental_queries {\n             self.sess.profiler(|p| p.incremental_load_result_start(Q::NAME));\n-            let result = Q::try_load_from_disk(self.global_tcx(), prev_dep_node_index);\n+            let result = Q::try_load_from_disk(self, prev_dep_node_index);\n             self.sess.profiler(|p| p.incremental_load_result_end(Q::NAME));\n \n             // We always expect to find a cached result for things that\n@@ -643,7 +643,7 @@ impl<'tcx> TyCtxt<'tcx> {\n macro_rules! handle_cycle_error {\n     ([][$tcx: expr, $error:expr]) => {{\n         $tcx.report_cycle($error).emit();\n-        Value::from_cycle_error($tcx.global_tcx())\n+        Value::from_cycle_error($tcx)\n     }};\n     ([fatal_cycle$(, $modifiers:ident)*][$tcx:expr, $error:expr]) => {{\n         $tcx.report_cycle($error).emit();\n@@ -652,7 +652,7 @@ macro_rules! handle_cycle_error {\n     }};\n     ([cycle_delay_bug$(, $modifiers:ident)*][$tcx:expr, $error:expr]) => {{\n         $tcx.report_cycle($error).delay_as_bug();\n-        Value::from_cycle_error($tcx.global_tcx())\n+        Value::from_cycle_error($tcx)\n     }};\n     ([$other:ident$(, $modifiers:ident)*][$($args:tt)*]) => {\n         handle_cycle_error!([$($modifiers),*][$($args)*])\n@@ -999,7 +999,7 @@ macro_rules! define_queries_inner {\n                         // would be missing appropriate entries in `providers`.\n                         .unwrap_or(&tcx.queries.fallback_extern_providers)\n                         .$name;\n-                    provider(tcx.global_tcx(), key)\n+                    provider(tcx, key)\n                 })\n             }\n "}, {"sha": "9a68dd0f5e3ced95e1ee9b3fd42d7b042e8fbbf5", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -442,8 +442,8 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                                          .map(|c| c.is_green())\n                                          .unwrap_or(false));\n \n-                        let key = RecoverKey::recover(tcx.global_tcx(), self).unwrap();\n-                        if queries::#name::cache_on_disk(tcx.global_tcx(), key, None) {\n+                        let key = RecoverKey::recover(tcx, self).unwrap();\n+                        if queries::#name::cache_on_disk(tcx, key, None) {\n                             let _ = tcx.#name(key);\n                         }\n                     }"}, {"sha": "d469b9209958fae8eeaf38e9d93dd02f85dea5fd", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -621,18 +621,18 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 target: _,\n                 unwind: _,\n             } => {\n-                let gcx = self.infcx.tcx.global_tcx();\n+                let tcx = self.infcx.tcx;\n \n                 // Compute the type with accurate region information.\n                 let drop_place_ty = drop_place.ty(self.body, self.infcx.tcx);\n \n                 // Erase the regions.\n                 let drop_place_ty = self.infcx.tcx.erase_regions(&drop_place_ty).ty;\n \n-                // \"Lift\" into the gcx -- once regions are erased, this type should be in the\n+                // \"Lift\" into the tcx -- once regions are erased, this type should be in the\n                 // global arenas; this \"lift\" operation basically just asserts that is true, but\n                 // that is useful later.\n-                gcx.lift_to_global(&drop_place_ty).unwrap();\n+                tcx.lift_to_global(&drop_place_ty).unwrap();\n \n                 debug!(\"visit_terminator_drop \\\n                         loc: {:?} term: {:?} drop_place: {:?} drop_place_ty: {:?} span: {:?}\","}, {"sha": "b981c76905c14155cca84a422091541260ab4c97", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -1894,9 +1894,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // Erase the regions from `ty` to get a global type.  The\n         // `Sized` bound in no way depends on precise regions, so this\n         // shouldn't affect `is_sized`.\n-        let gcx = tcx.global_tcx();\n         let erased_ty = tcx.erase_regions(&ty);\n-        if !erased_ty.is_sized(gcx.at(span), self.param_env) {\n+        if !erased_ty.is_sized(tcx.at(span), self.param_env) {\n             // in current MIR construction, all non-control-flow rvalue\n             // expressions evaluate through `as_temp` or `into` a return\n             // slot or local, so to find all unsized rvalues it is enough"}, {"sha": "9f9450188fa94b6794ad46fdf3ecbe8e162bcaef", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -521,9 +521,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         defining_ty: DefiningTy<'tcx>,\n     ) -> UniversalRegionIndices<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let gcx = tcx.global_tcx();\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n-        let identity_substs = InternalSubsts::identity_for_item(gcx, closure_base_def_id);\n+        let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n             DefiningTy::Closure(_, ClosureSubsts { ref substs })\n             | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n@@ -542,7 +541,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             DefiningTy::FnDef(_, substs) | DefiningTy::Const(_, substs) => substs,\n         };\n \n-        let global_mapping = iter::once((gcx.lifetimes.re_static, fr_static));\n+        let global_mapping = iter::once((tcx.lifetimes.re_static, fr_static));\n         let subst_mapping = identity_substs\n             .regions()\n             .zip(fr_substs.regions().map(|r| r.to_region_vid()));"}, {"sha": "0fe58c07b1b866bcd2742011e02195be6e1f8ec0", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -148,9 +148,8 @@ pub(crate) fn on_all_drop_children_bits<'tcx, F>(\n         let ty = place.ty(body, tcx).ty;\n         debug!(\"on_all_drop_children_bits({:?}, {:?} : {:?})\", path, place, ty);\n \n-        let gcx = tcx.global_tcx();\n         let erased_ty = tcx.erase_regions(&ty);\n-        if erased_ty.needs_drop(gcx, ctxt.param_env) {\n+        if erased_ty.needs_drop(tcx, ctxt.param_env) {\n             each_child(child);\n         } else {\n             debug!(\"on_all_drop_children_bits - skipping\")"}, {"sha": "eed51cdab8c3cf2845906b06475f7778863923df", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -543,9 +543,9 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n             let def_id = cx.tcx.hir().local_def_id(count.hir_id);\n-            let substs = InternalSubsts::identity_for_item(cx.tcx.global_tcx(), def_id);\n+            let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n             let instance = ty::Instance::resolve(\n-                cx.tcx.global_tcx(),\n+                cx.tcx,\n                 cx.param_env,\n                 def_id,\n                 substs,"}, {"sha": "32efbd6f011730d92a381491462f66dc22c606fc", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n             infcx,\n             root_lint_level: src_id,\n             param_env: tcx.param_env(src_def_id),\n-            identity_substs: InternalSubsts::identity_for_item(tcx.global_tcx(), src_def_id),\n+            identity_substs: InternalSubsts::identity_for_item(tcx, src_def_id),\n             region_scope_tree: tcx.region_scope_tree(src_def_id),\n             tables,\n             constness,\n@@ -154,12 +154,11 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n     }\n \n     pub fn pattern_from_hir(&mut self, p: &hir::Pat) -> Pat<'tcx> {\n-        let tcx = self.tcx.global_tcx();\n-        let p = match tcx.hir().get(p.hir_id) {\n+        let p = match self.tcx.hir().get(p.hir_id) {\n             Node::Pat(p) | Node::Binding(p) => p,\n             node => bug!(\"pattern became {:?}\", node)\n         };\n-        Pat::from_hir(tcx, self.param_env.and(self.identity_substs), self.tables(), p)\n+        Pat::from_hir(self.tcx, self.param_env.and(self.identity_substs), self.tables(), p)\n     }\n \n     pub fn trait_method(&mut self,\n@@ -187,7 +186,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n     }\n \n     pub fn needs_drop(&mut self, ty: Ty<'tcx>) -> bool {\n-        ty.needs_drop(self.tcx.global_tcx(), self.param_env)\n+        ty.needs_drop(self.tcx, self.param_env)\n     }\n \n     pub fn tcx(&self) -> TyCtxt<'tcx> {"}, {"sha": "4fae0976ffb5a1302c9c4a05e31f4a5b08a265c9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -79,7 +79,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n         }\n         ty::InstanceDef::ClosureOnceShim { call_once } => {\n             let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n-            let call_mut = tcx.global_tcx()\n+            let call_mut = tcx\n                 .associated_items(fn_mut)\n                 .find(|it| it.kind == ty::AssocKind::Method)\n                 .unwrap().def_id;"}, {"sha": "d08064e6892cd76f61964ad5f86c088c207bd3d5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -1269,7 +1269,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // to avoid ICEs.\n         for item in &regular_traits {\n             let object_safety_violations =\n-                tcx.global_tcx().astconv_object_safety_violations(item.trait_ref().def_id());\n+                tcx.astconv_object_safety_violations(item.trait_ref().def_id());\n             if !object_safety_violations.is_empty() {\n                 tcx.report_object_safety_error(\n                     span,"}, {"sha": "3403e8b8c890e2b259fe638ffd9c4fd8e3787dbf", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -932,9 +932,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Ok(self.to_const(count, tcx.type_of(count_def_id)))\n         } else {\n             let param_env = ty::ParamEnv::empty();\n-            let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n+            let substs = InternalSubsts::identity_for_item(tcx, count_def_id);\n             let instance = ty::Instance::resolve(\n-                tcx.global_tcx(),\n+                tcx,\n                 param_env,\n                 count_def_id,\n                 substs,"}, {"sha": "7cd3c019047305b2294466d1251004fb84997d2e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d540d44c711d0ef9317aa4b8e8b563321e3c35bb/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d540d44c711d0ef9317aa4b8e8b563321e3c35bb", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n                 // empty `param_env`.\n                 check_false_global_bounds(&fcx, span, id);\n             }\n-            let wf_tys = f(&fcx, fcx.tcx.global_tcx());\n+            let wf_tys = f(&fcx, fcx.tcx);\n             fcx.select_all_obligations_or_error();\n             fcx.regionck_item(id, span, &wf_tys);\n         });"}]}