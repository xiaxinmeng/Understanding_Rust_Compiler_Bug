{"sha": "a4e8904ce8a3de49cd211123ed24c44b45711705", "node_id": "C_kwDOAAsO6NoAKGE0ZTg5MDRjZThhM2RlNDljZDIxMTEyM2VkMjRjNDRiNDU3MTE3MDU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-07T14:39:47Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:34:14Z"}, "message": "add way to split mir-opt into panic=abort and panic=unwind", "tree": {"sha": "7099f392c768d8f0e5b022d1094011406a8b1eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7099f392c768d8f0e5b022d1094011406a8b1eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e8904ce8a3de49cd211123ed24c44b45711705", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGynYACgkQzXazX3c0\ndp7zrA//Zjz6CwiiK2HHAuX9DlUW05IjrBmBPbQ/SWDBZEVgMipnlblSjH2exSDK\nw9otEbDteUnRUI4DT3nhe5C4pTbaJVhlk3Pm5Qn3M3VNwtazGQE7d2mdf9ZTZSIZ\nmJLobgaCllQJCAVwhm7hlrPZ9nOogGcY9TIKEe/v9hxoPTXJNjIRyRZigOE+yKSI\ngIzKLO5oO7yOZl8JplS0qbRpWqN67I2+ByTZHEsiDbwcvCGbabGBIZ9jQG26WBZf\nPwHOEItfbH/ElRzwdFC4RP7pZmz6Nm8/Go6xfitvonk6ixD3ULp/l+/g5gXtRgKX\nrzd2GV5zGCc5ybpxwZqBrKXcIHUZIGu8i1llls9BUP8o38XYeYrXnY7V9KUlmL9z\nEMsbS4AHM/WsHRtovq3e4UWJgLqKbHo29zw68GJnxQhcDpHtqLMyWnflzeF7kc9c\n5k7A/g1Lk6LOBNuQyg0vM2/Daoo+dpb6tb5B7Kt7lM1M1RClhQLBfcW59rMCNg4q\nTJnGGl8UgmsXjZn+Ir1W7PJ+4QbUriTuXn5Jt7XEIpF81/tfz259KRu5geNcQNUp\nTW0m6AKQO2YM1//+1jluI0uYGgGT3ETkp0x1Z1jNhALhqq/i/ZFISLpgeexqAgIx\nYPU5bp8RBj7XOvZNcxpZw+EWJ3CeE62czdnc7BiFwHxMt588GPQ=\n=tdQR\n-----END PGP SIGNATURE-----", "payload": "tree 7099f392c768d8f0e5b022d1094011406a8b1eb6\nparent 6fd0d1ba149a7049f2acb78ed4a93570ce36e3e4\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686148787 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555254 +0200\n\nadd way to split mir-opt into panic=abort and panic=unwind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e8904ce8a3de49cd211123ed24c44b45711705", "html_url": "https://github.com/rust-lang/rust/commit/a4e8904ce8a3de49cd211123ed24c44b45711705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e8904ce8a3de49cd211123ed24c44b45711705/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd0d1ba149a7049f2acb78ed4a93570ce36e3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd0d1ba149a7049f2acb78ed4a93570ce36e3e4", "html_url": "https://github.com/rust-lang/rust/commit/6fd0d1ba149a7049f2acb78ed4a93570ce36e3e4"}], "stats": {"total": 88, "additions": 68, "deletions": 20}, "files": [{"sha": "1b46c42fa4cf10533c2d1c5decf330f0859f5653", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=a4e8904ce8a3de49cd211123ed24c44b45711705", "patch": "@@ -131,6 +131,15 @@ pub enum PanicStrategy {\n     Abort,\n }\n \n+impl PanicStrategy {\n+    pub(crate) fn for_miropt_test_tools(&self) -> miropt_test_tools::PanicStrategy {\n+        match self {\n+            PanicStrategy::Unwind => miropt_test_tools::PanicStrategy::Unwind,\n+            PanicStrategy::Abort => miropt_test_tools::PanicStrategy::Abort,\n+        }\n+    }\n+}\n+\n /// Configuration for compiletest\n #[derive(Debug, Default, Clone)]\n pub struct Config {\n@@ -572,7 +581,7 @@ pub struct TargetCfg {\n     #[serde(rename = \"target-endian\", default)]\n     endian: Endian,\n     #[serde(rename = \"panic-strategy\", default)]\n-    panic: PanicStrategy,\n+    pub(crate) panic: PanicStrategy,\n }\n \n impl TargetCfg {"}, {"sha": "7c6668b1c5ddfe80e0accc08952ce285fd401a46", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a4e8904ce8a3de49cd211123ed24c44b45711705", "patch": "@@ -3565,6 +3565,7 @@ impl<'test> TestCx<'test> {\n         let files = miropt_test_tools::files_for_miropt_test(\n             &self.testpaths.file,\n             self.config.get_pointer_width(),\n+            self.config.target_cfg().panic.for_miropt_test_tools(),\n         );\n \n         let mut out = Vec::new();\n@@ -3582,25 +3583,24 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn check_mir_dump(&self) {\n-        let test_file_contents = fs::read_to_string(&self.testpaths.file).unwrap();\n-\n         let test_dir = self.testpaths.file.parent().unwrap();\n         let test_crate =\n             self.testpaths.file.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n \n-        let mut bit_width = String::new();\n-        if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n-            bit_width = format!(\".{}bit\", self.config.get_pointer_width());\n-        }\n+        let suffix = miropt_test_tools::output_file_suffix(\n+            &self.testpaths.file,\n+            self.config.get_pointer_width(),\n+            self.config.target_cfg().panic.for_miropt_test_tools(),\n+        );\n \n         if self.config.bless {\n             for e in\n-                glob(&format!(\"{}/{}.*{}.mir\", test_dir.display(), test_crate, bit_width)).unwrap()\n+                glob(&format!(\"{}/{}.*{}.mir\", test_dir.display(), test_crate, suffix)).unwrap()\n             {\n                 std::fs::remove_file(e.unwrap()).unwrap();\n             }\n             for e in\n-                glob(&format!(\"{}/{}.*{}.diff\", test_dir.display(), test_crate, bit_width)).unwrap()\n+                glob(&format!(\"{}/{}.*{}.diff\", test_dir.display(), test_crate, suffix)).unwrap()\n             {\n                 std::fs::remove_file(e.unwrap()).unwrap();\n             }\n@@ -3609,6 +3609,7 @@ impl<'test> TestCx<'test> {\n         let files = miropt_test_tools::files_for_miropt_test(\n             &self.testpaths.file,\n             self.config.get_pointer_width(),\n+            self.config.target_cfg().panic.for_miropt_test_tools(),\n         );\n         for miropt_test_tools::MiroptTestFiles { from_file, to_file, expected_file, passes: _ } in\n             files"}, {"sha": "e33ecfe8eab2408e7012ac248aa0e74152e0434d", "filename": "src/tools/miropt-test-tools/src/lib.rs", "status": "modified", "additions": 44, "deletions": 9, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs?ref=a4e8904ce8a3de49cd211123ed24c44b45711705", "patch": "@@ -1,4 +1,5 @@\n use std::fs;\n+use std::path::Path;\n \n pub struct MiroptTestFiles {\n     pub expected_file: std::path::PathBuf,\n@@ -8,18 +9,52 @@ pub struct MiroptTestFiles {\n     pub passes: Vec<String>,\n }\n \n-pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<MiroptTestFiles> {\n+pub enum PanicStrategy {\n+    Unwind,\n+    Abort,\n+}\n+\n+pub fn output_file_suffix(\n+    testfile: &Path,\n+    bit_width: u32,\n+    panic_strategy: PanicStrategy,\n+) -> String {\n+    let mut each_bit_width = false;\n+    let mut each_panic_strategy = false;\n+    for line in fs::read_to_string(testfile).unwrap().lines() {\n+        if line == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\" {\n+            each_bit_width = true;\n+        }\n+        if line == \"// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\" {\n+            each_panic_strategy = true;\n+        }\n+    }\n+\n+    let mut suffix = String::new();\n+    if each_bit_width {\n+        suffix.push_str(&format!(\".{}bit\", bit_width));\n+    }\n+    if each_panic_strategy {\n+        match panic_strategy {\n+            PanicStrategy::Unwind => suffix.push_str(\".panic-unwind\"),\n+            PanicStrategy::Abort => suffix.push_str(\".panic-abort\"),\n+        }\n+    }\n+    suffix\n+}\n+\n+pub fn files_for_miropt_test(\n+    testfile: &std::path::Path,\n+    bit_width: u32,\n+    panic_strategy: PanicStrategy,\n+) -> Vec<MiroptTestFiles> {\n     let mut out = Vec::new();\n     let test_file_contents = fs::read_to_string(&testfile).unwrap();\n \n     let test_dir = testfile.parent().unwrap();\n     let test_crate = testfile.file_stem().unwrap().to_str().unwrap().replace('-', \"_\");\n \n-    let bit_width = if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n-        format!(\".{}bit\", bit_width)\n-    } else {\n-        String::new()\n-    };\n+    let suffix = output_file_suffix(testfile, bit_width, panic_strategy);\n \n     for l in test_file_contents.lines() {\n         if l.starts_with(\"// EMIT_MIR \") {\n@@ -37,7 +72,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                 passes.push(trimmed.split('.').last().unwrap().to_owned());\n                 let test_against = format!(\"{}.after.mir\", trimmed);\n                 from_file = format!(\"{}.before.mir\", trimmed);\n-                expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n+                expected_file = format!(\"{}{}.diff\", trimmed, suffix);\n                 assert!(test_names.next().is_none(), \"two mir pass names specified for MIR diff\");\n                 to_file = Some(test_against);\n             } else if let Some(first_pass) = test_names.next() {\n@@ -51,7 +86,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                 assert!(test_names.next().is_none(), \"three mir pass names specified for MIR diff\");\n \n                 expected_file =\n-                    format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n+                    format!(\"{}{}.{}-{}.diff\", test_name, suffix, first_pass, second_pass);\n                 let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n                 from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n                 to_file = Some(second_file);\n@@ -64,7 +99,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                 let extension = cap.get(1).unwrap().as_str();\n \n                 expected_file =\n-                    format!(\"{}{}{}\", test_name.trim_end_matches(extension), bit_width, extension,);\n+                    format!(\"{}{}{}\", test_name.trim_end_matches(extension), suffix, extension,);\n                 from_file = test_name.to_string();\n                 assert!(test_names.next().is_none(), \"two mir pass names specified for MIR dump\");\n                 to_file = None;"}, {"sha": "c307bcb93902da31aaf4b0e1c7f58dd0aa4d970b", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e8904ce8a3de49cd211123ed24c44b45711705/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=a4e8904ce8a3de49cd211123ed24c44b45711705", "patch": "@@ -1,5 +1,6 @@\n //! Tidy check to ensure that mir opt directories do not have stale files or dashes in file names\n \n+use miropt_test_tools::PanicStrategy;\n use std::collections::HashSet;\n use std::path::{Path, PathBuf};\n \n@@ -24,8 +25,10 @@ fn check_unused_files(path: &Path, bless: bool, bad: &mut bool) {\n \n     for file in rs_files {\n         for bw in [32, 64] {\n-            for output_file in miropt_test_tools::files_for_miropt_test(&file, bw) {\n-                output_files.remove(&output_file.expected_file);\n+            for ps in [PanicStrategy::Unwind, PanicStrategy::Abort] {\n+                for output_file in miropt_test_tools::files_for_miropt_test(&file, bw, ps) {\n+                    output_files.remove(&output_file.expected_file);\n+                }\n             }\n         }\n     }"}]}