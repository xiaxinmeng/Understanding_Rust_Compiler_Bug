{"sha": "88e297e47deb63b249b83fb5fe153fed365407d6", "node_id": "C_kwDOAAsO6NoAKDg4ZTI5N2U0N2RlYjYzYjI0OWI4M2ZiNWZlMTUzZmVkMzY1NDA3ZDY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-20T14:42:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-20T14:52:10Z"}, "message": "minor: Simplify", "tree": {"sha": "a928af24ba68405f7915d3aa4f0225fcfac23f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a928af24ba68405f7915d3aa4f0225fcfac23f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e297e47deb63b249b83fb5fe153fed365407d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e297e47deb63b249b83fb5fe153fed365407d6", "html_url": "https://github.com/rust-lang/rust/commit/88e297e47deb63b249b83fb5fe153fed365407d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e297e47deb63b249b83fb5fe153fed365407d6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5229cebb23671ea1221a81646f757a87d1b339a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5229cebb23671ea1221a81646f757a87d1b339a", "html_url": "https://github.com/rust-lang/rust/commit/f5229cebb23671ea1221a81646f757a87d1b339a"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "69585b44a1a1fb0d1929a37f6a5391242222de0a", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=88e297e47deb63b249b83fb5fe153fed365407d6", "patch": "@@ -408,6 +408,7 @@ fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n     } else {\n         let crate_origin = match &*crate_str {\n             \"std\" => CrateOrigin::Lang(LangCrateOrigin::Std),\n+            \"core\" => CrateOrigin::Lang(LangCrateOrigin::Core),\n             _ => CrateOrigin::CratesIo { repo: None },\n         };\n         (crate_str, crate_origin, None)"}, {"sha": "6819e9114a02476129260eb553f695b9407a729f", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs?ref=88e297e47deb63b249b83fb5fe153fed365407d6", "patch": "@@ -25,6 +25,7 @@ fn test_copy_expand_in_core() {\n     cov_mark::check!(test_copy_expand_in_core);\n     check(\n         r#\"\n+//- /lib.rs crate:core\n #[rustc_builtin_macro]\n macro derive {}\n #[rustc_builtin_macro]"}, {"sha": "79989bc2e38b601339085934488c44cf09217f7c", "filename": "crates/hir-expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=88e297e47deb63b249b83fb5fe153fed365407d6", "patch": "@@ -1,5 +1,6 @@\n //! Builtin derives.\n \n+use base_db::{CrateOrigin, LangCrateOrigin};\n use tracing::debug;\n \n use syntax::{\n@@ -160,14 +161,11 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: MacroCallId) -> tt::TokenTree {\n     let cg = db.crate_graph();\n     let krate = db.lookup_intern_macro_call(id).krate;\n \n-    // XXX\n-    //  All crates except core itself should have a dependency on core,\n-    //  We detect `core` by seeing whether it doesn't have such a dependency.\n-    let tt = if cg[krate].dependencies.iter().any(|dep| &*dep.name == \"core\") {\n-        quote! { core }\n-    } else {\n+    let tt = if matches!(cg[krate].origin, CrateOrigin::Lang(LangCrateOrigin::Core)) {\n         cov_mark::hit!(test_copy_expand_in_core);\n         quote! { crate }\n+    } else {\n+        quote! { core }\n     };\n \n     tt.token_trees[0].clone()"}, {"sha": "540cc70dd5228cf9d78898f0f41be98c0fb40512", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=88e297e47deb63b249b83fb5fe153fed365407d6", "patch": "@@ -7,9 +7,9 @@\n \n use arrayvec::ArrayVec;\n use hir::{\n-    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Field, Function, GenericParam,\n-    HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef, Name, PathResolution,\n-    Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n+    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, Field, Function,\n+    GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef, Name,\n+    PathResolution, Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -46,6 +46,13 @@ impl Definition {\n         self.module(db).map(|it| it.path_to_root(db).into_iter().rev())\n     }\n \n+    pub fn krate(&self, db: &RootDatabase) -> Option<Crate> {\n+        Some(match self {\n+            Definition::Module(m) => m.krate(),\n+            _ => self.module(db)?.krate(),\n+        })\n+    }\n+\n     pub fn module(&self, db: &RootDatabase) -> Option<Module> {\n         let module = match self {\n             Definition::Macro(it) => it.module(db),"}, {"sha": "5c6363f37858e18817f052940ee9090dd15b1a5d", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=88e297e47deb63b249b83fb5fe153fed365407d6", "patch": "@@ -293,7 +293,7 @@ fn broken_link_clone_cb<'a>(link: BrokenLink<'a>) -> Option<(CowStr<'a>, CowStr<\n fn get_doc_link(db: &RootDatabase, def: Definition) -> Option<String> {\n     let (target, file, frag) = filename_and_frag_for_def(db, def)?;\n \n-    let krate = crate_of_def(db, target)?;\n+    let krate = target.krate(db)?;\n     let mut url = get_doc_base_url(db, krate)?;\n \n     if let Some(path) = mod_path_of_def(db, target) {\n@@ -315,7 +315,7 @@ fn rewrite_intra_doc_link(\n     let (link, ns) = parse_intra_doc_link(target);\n \n     let resolved = resolve_doc_path_for_def(db, def, link, ns)?;\n-    let krate = crate_of_def(db, resolved)?;\n+    let krate = resolved.krate(db)?;\n     let mut url = get_doc_base_url(db, krate)?;\n \n     let (_, file, frag) = filename_and_frag_for_def(db, resolved)?;\n@@ -335,7 +335,7 @@ fn rewrite_url_link(db: &RootDatabase, def: Definition, target: &str) -> Option<\n         return None;\n     }\n \n-    let krate = crate_of_def(db, def)?;\n+    let krate = def.krate(db)?;\n     let mut url = get_doc_base_url(db, krate)?;\n     let (def, file, frag) = filename_and_frag_for_def(db, def)?;\n \n@@ -348,15 +348,6 @@ fn rewrite_url_link(db: &RootDatabase, def: Definition, target: &str) -> Option<\n     url.join(target).ok().map(Into::into)\n }\n \n-fn crate_of_def(db: &RootDatabase, def: Definition) -> Option<Crate> {\n-    let krate = match def {\n-        // Definition::module gives back the parent module, we don't want that as it fails for root modules\n-        Definition::Module(module) => module.krate(),\n-        def => def.module(db)?.krate(),\n-    };\n-    Some(krate)\n-}\n-\n fn mod_path_of_def(db: &RootDatabase, def: Definition) -> Option<String> {\n     def.canonical_module_path(db).map(|it| {\n         let mut path = String::new();"}, {"sha": "198e17db5358530d305ee31aeaeebb27526d982e", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e297e47deb63b249b83fb5fe153fed365407d6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=88e297e47deb63b249b83fb5fe153fed365407d6", "patch": "@@ -466,10 +466,7 @@ fn highlight_def(sema: &Semantics<RootDatabase>, krate: hir::Crate, def: Definit\n         Definition::ToolModule(_) => Highlight::new(HlTag::Symbol(SymbolKind::ToolModule)),\n     };\n \n-    let def_crate = def.module(db).map(hir::Module::krate).or_else(|| match def {\n-        Definition::Module(module) => Some(module.krate()),\n-        _ => None,\n-    });\n+    let def_crate = def.krate(db);\n     let is_from_other_crate = def_crate != Some(krate);\n     let is_from_builtin_crate = def_crate.map_or(false, |def_crate| def_crate.is_builtin(db));\n     let is_builtin_type = matches!(def, Definition::BuiltinType(_));"}]}