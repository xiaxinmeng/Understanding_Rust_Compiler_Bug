{"sha": "5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTM2ZWZhOWYyMjE5MWIyOWFhMDFlNmQyOWM4Y2E3MDY4MmQ2YWQ=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-08-02T19:24:21Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-08-25T03:16:40Z"}, "message": "Don't truncate discriminants to host uint for C_uint's sake.", "tree": {"sha": "96c0f0e989265ec7244b75a626f39e69dee1cfa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96c0f0e989265ec7244b75a626f39e69dee1cfa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "html_url": "https://github.com/rust-lang/rust/commit/5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef8dd9ceb0a4790d65c1dd8327a0d5618c3a46f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef8dd9ceb0a4790d65c1dd8327a0d5618c3a46f", "html_url": "https://github.com/rust-lang/rust/commit/8ef8dd9ceb0a4790d65c1dd8327a0d5618c3a46f"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "5c255ad081811e85185549417eee9a35d4082ad3", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "patch": "@@ -306,7 +306,7 @@ pub fn trans_get_discr(bcx: @mut Block, r: &Repr, scrutinee: ValueRef)\n     -> ValueRef {\n     match *r {\n         CEnum(min, max) => load_discr(bcx, scrutinee, min, max),\n-        Univariant(*) => C_uint(bcx.ccx(), 0),\n+        Univariant(*) => C_disr(bcx.ccx(), 0),\n         General(ref cases) => load_discr(bcx, scrutinee, 0, (cases.len() - 1) as Disr),\n         NullablePointer{ nonnull: ref nonnull, nndiscr, ptrfield, _ } => {\n             ZExt(bcx, nullable_bitdiscr(bcx, nonnull, nndiscr, ptrfield, scrutinee),\n@@ -351,13 +351,13 @@ fn load_discr(bcx: @mut Block, scrutinee: ValueRef, min: Disr, max: Disr)\n pub fn trans_case(bcx: @mut Block, r: &Repr, discr: Disr) -> _match::opt_result {\n     match *r {\n         CEnum(*) => {\n-            _match::single_result(rslt(bcx, C_uint(bcx.ccx(), discr /*bad*/as uint)))\n+            _match::single_result(rslt(bcx, C_disr(bcx.ccx(), discr)))\n         }\n         Univariant(*) => {\n             bcx.ccx().sess.bug(\"no cases for univariants or structs\")\n         }\n         General(*) => {\n-            _match::single_result(rslt(bcx, C_uint(bcx.ccx(), discr /*bad*/as uint)))\n+            _match::single_result(rslt(bcx, C_disr(bcx.ccx(), discr)))\n         }\n         NullablePointer{ _ } => {\n             assert!(discr == 0 || discr == 1);\n@@ -375,7 +375,7 @@ pub fn trans_start_init(bcx: @mut Block, r: &Repr, val: ValueRef, discr: Disr) {\n     match *r {\n         CEnum(min, max) => {\n             assert!(min <= discr && discr <= max);\n-            Store(bcx, C_uint(bcx.ccx(), discr/*bad*/ as uint), GEPi(bcx, val, [0, 0]))\n+            Store(bcx, C_disr(bcx.ccx(), discr), GEPi(bcx, val, [0, 0]))\n         }\n         Univariant(ref st, true) => {\n             assert_eq!(discr, 0);\n@@ -386,7 +386,7 @@ pub fn trans_start_init(bcx: @mut Block, r: &Repr, val: ValueRef, discr: Disr) {\n             assert_eq!(discr, 0);\n         }\n         General(*) => {\n-            Store(bcx, C_uint(bcx.ccx(), discr/*bad*/ as uint), GEPi(bcx, val, [0, 0]))\n+            Store(bcx, C_disr(bcx.ccx(), discr), GEPi(bcx, val, [0, 0]))\n         }\n         NullablePointer{ nonnull: ref nonnull, nndiscr, ptrfield, _ } => {\n             if discr != nndiscr {\n@@ -501,7 +501,7 @@ pub fn trans_const(ccx: &mut CrateContext, r: &Repr, discr: Disr,\n         CEnum(min, max) => {\n             assert_eq!(vals.len(), 0);\n             assert!(min <= discr && discr <= max);\n-            C_uint(ccx, discr/*bad*/ as uint)\n+            C_disr(ccx, discr)\n         }\n         Univariant(ref st, _dro) => {\n             assert_eq!(discr, 0);\n@@ -510,7 +510,7 @@ pub fn trans_const(ccx: &mut CrateContext, r: &Repr, discr: Disr,\n         General(ref cases) => {\n             let case = &cases[discr];\n             let max_sz = cases.iter().map(|x| x.size).max().unwrap();\n-            let discr_ty = C_uint(ccx, discr/*bad*/ as uint);\n+            let discr_ty = C_disr(ccx, discr);\n             let contents = build_const_struct(ccx, case,\n                                               ~[discr_ty] + vals);\n             C_struct(contents + &[padding(max_sz - case.size)])\n@@ -645,3 +645,7 @@ pub fn is_newtypeish(r: &Repr) -> bool {\n         _ => false\n     }\n }\n+\n+fn C_disr(cx: &CrateContext, i: Disr) -> ValueRef {\n+    return C_integral(cx.int_type, i, false);\n+}"}, {"sha": "2ac481cf73070b9bf4b0f19abc5c3645ddd34f0e", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "patch": "@@ -453,7 +453,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               (expr::cast_enum, expr::cast_float)  => {\n                 let repr = adt::represent_type(cx, basety);\n                 let discr = adt::const_get_discrim(cx, repr, v);\n-                let iv = C_uint(cx, discr /*bad*/ as uint);\n+                let iv = C_integral(cx.int_type, discr, false);\n                 let ety_cast = expr::cast_type_kind(ety);\n                 match ety_cast {\n                     expr::cast_integral => {"}, {"sha": "98d2b6df88787531cd945f7bdf94d987920dbf9e", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f536efa9f22191b29aa01e6d29c8ca70682d6ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=5f536efa9f22191b29aa01e6d29c8ca70682d6ad", "patch": "@@ -317,7 +317,7 @@ impl Reflector {\n                 for (i, v) in variants.iter().enumerate() {\n                     let name = ccx.sess.str_of(v.name);\n                     let variant_args = ~[this.c_uint(i),\n-                                         this.c_uint(v.disr_val /*bad*/ as uint),\n+                                         C_integral(self.bcx.ccx().int_type, v.disr_val, false),\n                                          this.c_uint(v.args.len()),\n                                          this.c_slice(name)];\n                     do this.bracketed(\"enum_variant\", variant_args) |this| {"}]}