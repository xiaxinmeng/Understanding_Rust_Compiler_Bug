{"sha": "e624ef4d64cc800b9d69104bd3f77fc10d65080b", "node_id": "C_kwDOAAsO6NoAKGU2MjRlZjRkNjRjYzgwMGI5ZDY5MTA0YmQzZjc3ZmMxMGQ2NTA4MGI", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-03-17T14:35:12Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-03-17T14:35:12Z"}, "message": "replace chain with two `add_goal`", "tree": {"sha": "ca9461941ecaf26b1f039d081a3c0b338301b238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9461941ecaf26b1f039d081a3c0b338301b238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e624ef4d64cc800b9d69104bd3f77fc10d65080b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e624ef4d64cc800b9d69104bd3f77fc10d65080b", "html_url": "https://github.com/rust-lang/rust/commit/e624ef4d64cc800b9d69104bd3f77fc10d65080b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e624ef4d64cc800b9d69104bd3f77fc10d65080b/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa8de179283b4c9aac6039ad2b04529ed6055680", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8de179283b4c9aac6039ad2b04529ed6055680", "html_url": "https://github.com/rust-lang/rust/commit/aa8de179283b4c9aac6039ad2b04529ed6055680"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "8ab55c79fc4502ec41a12c8b9bbdbb9df14cb374", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e624ef4d64cc800b9d69104bd3f77fc10d65080b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e624ef4d64cc800b9d69104bd3f77fc10d65080b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=e624ef4d64cc800b9d69104bd3f77fc10d65080b", "patch": "@@ -342,23 +342,18 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     let Some(sized_def_id) = tcx.lang_items().sized_trait() else {\n                         return Err(NoSolution);\n                     };\n+                    // Check that the type implements all of the predicates of the def-id.\n+                    // (i.e. the principal, all of the associated types match, and any auto traits)\n                     ecx.add_goals(\n-                        data.iter()\n-                            // Check that the type implements all of the predicates of the def-id.\n-                            // (i.e. the principal, all of the associated types match, and any auto traits)\n-                            .map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty)))\n-                            .chain([\n-                                // The type must be Sized to be unsized.\n-                                goal.with(\n-                                    tcx,\n-                                    ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [a_ty])),\n-                                ),\n-                                // The type must outlive the lifetime of the `dyn` we're unsizing into.\n-                                goal.with(\n-                                    tcx,\n-                                    ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region)),\n-                                ),\n-                            ]),\n+                        data.iter().map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty))),\n+                    );\n+                    // The type must be Sized to be unsized.\n+                    ecx.add_goal(\n+                        goal.with(tcx, ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [a_ty]))),\n+                    );\n+                    // The type must outlive the lifetime of the `dyn` we're unsizing into.\n+                    ecx.add_goal(\n+                        goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region))),\n                     );\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }"}]}