{"sha": "681cccad571c99673be4e2ad14bc2048e8894ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWNjY2FkNTcxYzk5NjczYmU0ZTJhZDE0YmMyMDQ4ZTg4OTRhYzg=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-12T16:48:00Z"}, "committer": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-12T16:48:00Z"}, "message": "Rename to `inline_attr` and use if-let to extract `NestedMetaItem`", "tree": {"sha": "eaea159d8b8a46dbce6c97ba87e7e9eb77ba7ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaea159d8b8a46dbce6c97ba87e7e9eb77ba7ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681cccad571c99673be4e2ad14bc2048e8894ac8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCAAyFiEEgbkHgdnD1idvtMJ0QJ1+7h56cWoFAmAmsbUUHHl1c3VrdGFu\nQG1hZ3Vyby5kZXYACgkQQJ1+7h56cWoLNA/+PS/ey2XdcKq3USJu8Qm/oTbK3X7a\nqgddRRmPMP7AFeZrHUPV46v2QKFMcAuXlsMyFJHF4HbNRfajixt+T8IAmRafN78C\nEPv5lq8Cu0FpKPN5wJSiMMoRjbK5vtyrgwihKLg89MZNnIJcRUJbRsxLxr68Rb4k\n/fjpAhvQ3Z30zEmCQPFoWFHTrKXrVbQXTXS7n0pI0WlpsbuSbsjr0zsF+Ev662po\nB4ruqQPPX5q7odvgD4DkwXjf46jfFzMo8Ac+5oH0mhTUaloUeqEE59Lp/Se0qu3+\nS+WvNP//UEDzLehJURQ45R5EXbNQkYTShFI8bFaoX816Ip/BNhpkB+07UctBK7Hx\nfPM/GKbNH0rSvzZ+p1WidleHkPnElAYaaROchcrZH9qRPVbRukPIvDyqtEUu2/YF\ncL3K/ohtviJJU/zr9RRkUMDyyCIT7y2QM3x1x2sRZtQbJxjiuw1ruO5zJQ2VzEGV\nDqhEGHwMmsR2TGi08jTWBXTSjN/G7HqIMgAuLTUXGewhU3c88z8QKprpDhjJHgxh\nPJbPlvRo1cdK8CLhZViTNl7hStcX/Rtpc/m60H9UKg1GL6vbrD4Onr1jwnfC3KwK\ngUrnutsBBYcH7IuzR5r7IlIbqPALmyrLmiMbvlMnGusUYNrcnnXsa5bohgP0Yjvc\nVCFd6oWhuC1fdKU=\n=Xp7K\n-----END PGP SIGNATURE-----", "payload": "tree eaea159d8b8a46dbce6c97ba87e7e9eb77ba7ab0\nparent 715c19e75e0e2a88f6c0a5ec8c13ee77737c4798\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1613148480 +0900\ncommitter Yusuke Tanaka <yusuktan@maguro.dev> 1613148480 +0900\n\nRename to `inline_attr` and use if-let to extract `NestedMetaItem`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681cccad571c99673be4e2ad14bc2048e8894ac8", "html_url": "https://github.com/rust-lang/rust/commit/681cccad571c99673be4e2ad14bc2048e8894ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681cccad571c99673be4e2ad14bc2048e8894ac8/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715c19e75e0e2a88f6c0a5ec8c13ee77737c4798", "url": "https://api.github.com/repos/rust-lang/rust/commits/715c19e75e0e2a88f6c0a5ec8c13ee77737c4798", "html_url": "https://github.com/rust-lang/rust/commit/715c19e75e0e2a88f6c0a5ec8c13ee77737c4798"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "7fc7d9f541cbb26fcf2dbadad59d8b5aef1d910b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/681cccad571c99673be4e2ad14bc2048e8894ac8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681cccad571c99673be4e2ad14bc2048e8894ac8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=681cccad571c99673be4e2ad14bc2048e8894ac8", "patch": "@@ -2163,19 +2163,20 @@ fn clean_use_statement(\n         return Vec::new();\n     }\n \n-    let doc_meta_item = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n-    let please_inline = doc_meta_item.is_some();\n+    let inline_attr = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n     let pub_underscore = import.vis.node.is_pub() && name == kw::Underscore;\n \n-    if pub_underscore && please_inline {\n-        rustc_errors::struct_span_err!(\n-            cx.tcx.sess,\n-            doc_meta_item.unwrap().span(),\n-            E0780,\n-            \"anonymous imports cannot be inlined\"\n-        )\n-        .span_label(import.span, \"anonymous import\")\n-        .emit();\n+    if pub_underscore {\n+        if let Some(ref inline) = inline_attr {\n+            rustc_errors::struct_span_err!(\n+                cx.tcx.sess,\n+                inline.span(),\n+                E0780,\n+                \"anonymous imports cannot be inlined\"\n+            )\n+            .span_label(import.span, \"anonymous import\")\n+            .emit();\n+        }\n     }\n \n     // We consider inlining the documentation of `pub use` statements, but we\n@@ -2208,7 +2209,7 @@ fn clean_use_statement(\n         }\n         Import::new_glob(resolve_use_source(cx, path), true)\n     } else {\n-        if !please_inline {\n+        if inline_attr.is_none() {\n             if let Res::Def(DefKind::Mod, did) = path.res {\n                 if !did.is_local() && did.index == CRATE_DEF_INDEX {\n                     // if we're `pub use`ing an extern crate root, don't inline it unless we"}]}