{"sha": "7f99c7d3e64143bdeda8f519a656ad1963162fb2", "node_id": "C_kwDOAAsO6NoAKDdmOTljN2QzZTY0MTQzYmRlZGE4ZjUxOWE2NTZhZDE5NjMxNjJmYjI", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-13T16:33:19Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-26T22:18:28Z"}, "message": "Add invalid_from_utf8 analogous to invalid_from_utf8_unchecked", "tree": {"sha": "27fe55d50d88c891cd299a3d08c64ebafeeab4b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27fe55d50d88c891cd299a3d08c64ebafeeab4b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f99c7d3e64143bdeda8f519a656ad1963162fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f99c7d3e64143bdeda8f519a656ad1963162fb2", "html_url": "https://github.com/rust-lang/rust/commit/7f99c7d3e64143bdeda8f519a656ad1963162fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f99c7d3e64143bdeda8f519a656ad1963162fb2/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0612d90b08e2ee3fac4e807f56e51dd665ec882", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0612d90b08e2ee3fac4e807f56e51dd665ec882", "html_url": "https://github.com/rust-lang/rust/commit/a0612d90b08e2ee3fac4e807f56e51dd665ec882"}], "stats": {"total": 190, "additions": 169, "deletions": 21}, "files": [{"sha": "e707ac41a050d4a89f7b8220ca636742cf50c763", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -304,6 +304,10 @@ lint_improper_ctypes_union_layout_help = consider adding a `#[repr(C)]` or `#[re\n lint_improper_ctypes_union_layout_reason = this union has unspecified layout\n lint_improper_ctypes_union_non_exhaustive = this union is non-exhaustive\n \n+# FIXME: we should ordinalize $valid_up_to when we add support for doing so\n+lint_invalid_from_utf8_checked = calls to `{$method}` with a invalid literal always return an error\n+    .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n+\n # FIXME: we should ordinalize $valid_up_to when we add support for doing so\n lint_invalid_from_utf8_unchecked = calls to `{$method}` with a invalid literal are undefined behavior\n     .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes"}, {"sha": "3291286ad679be4c79f853e025e3b6d72a1c3da5", "filename": "compiler/rustc_lint/src/invalid_from_utf8.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{Expr, ExprKind};\n use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n \n-use crate::lints::InvalidFromUtf8UncheckedDiag;\n+use crate::lints::InvalidFromUtf8Diag;\n use crate::{LateContext, LateLintPass, LintContext};\n \n declare_lint! {\n@@ -33,23 +33,56 @@ declare_lint! {\n     \"using a non UTF-8 literal in `std::str::from_utf8_unchecked`\"\n }\n \n-declare_lint_pass!(InvalidFromUtf8 => [INVALID_FROM_UTF8_UNCHECKED]);\n+declare_lint! {\n+    /// The `invalid_from_utf8` lint checks for calls to\n+    /// `std::str::from_utf8` and `std::str::from_utf8_mut`\n+    /// with an invalid UTF-8 literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #[allow(unused)]\n+    /// std::str::from_utf8(b\"Ru\\x82st\");\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Trying to create such a `str` would always return an error as per documentation\n+    /// for `std::str::from_utf8` and `std::str::from_utf8_mut`.\n+    pub INVALID_FROM_UTF8,\n+    Warn,\n+    \"using a non UTF-8 literal in `std::str::from_utf8`\"\n+}\n+\n+declare_lint_pass!(InvalidFromUtf8 => [INVALID_FROM_UTF8_UNCHECKED, INVALID_FROM_UTF8]);\n \n impl<'tcx> LateLintPass<'tcx> for InvalidFromUtf8 {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if let ExprKind::Call(path, [arg]) = expr.kind\n             && let ExprKind::Path(ref qpath) = path.kind\n             && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n             && let Some(diag_item) = cx.tcx.get_diagnostic_name(def_id)\n-            && [sym::str_from_utf8_unchecked, sym::str_from_utf8_unchecked_mut].contains(&diag_item)\n+            && [sym::str_from_utf8, sym::str_from_utf8_mut,\n+                sym::str_from_utf8_unchecked, sym::str_from_utf8_unchecked_mut].contains(&diag_item)\n         {\n             let lint = |utf8_error: Utf8Error| {\n+                let label = arg.span;\n                 let method = diag_item.as_str().strip_prefix(\"str_\").unwrap();\n-                cx.emit_spanned_lint(INVALID_FROM_UTF8_UNCHECKED, expr.span, InvalidFromUtf8UncheckedDiag {\n-                    method: format!(\"std::str::{method}\"),\n-                    valid_up_to: utf8_error.valid_up_to(),\n-                    label: arg.span,\n-                })\n+                let method = format!(\"std::str::{method}\");\n+                let valid_up_to = utf8_error.valid_up_to();\n+                let is_unchecked_variant = diag_item.as_str().contains(\"unchecked\");\n+\n+                cx.emit_spanned_lint(\n+                    if is_unchecked_variant { INVALID_FROM_UTF8_UNCHECKED } else { INVALID_FROM_UTF8 },\n+                    expr.span,\n+                    if is_unchecked_variant {\n+                        InvalidFromUtf8Diag::Unchecked { method,  valid_up_to, label }\n+                    } else {\n+                        InvalidFromUtf8Diag::Checked { method,  valid_up_to, label }\n+                    }\n+                )\n             };\n \n             match &arg.kind {"}, {"sha": "dcfef84f550bbb2331fcb6e6008ad866f9b9ee43", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -701,12 +701,21 @@ pub struct ForgetCopyDiag<'a> {\n \n // invalid_from_utf8.rs\n #[derive(LintDiagnostic)]\n-#[diag(lint_invalid_from_utf8_unchecked)]\n-pub struct InvalidFromUtf8UncheckedDiag {\n-    pub method: String,\n-    pub valid_up_to: usize,\n-    #[label]\n-    pub label: Span,\n+pub enum InvalidFromUtf8Diag {\n+    #[diag(lint_invalid_from_utf8_unchecked)]\n+    Unchecked {\n+        method: String,\n+        valid_up_to: usize,\n+        #[label]\n+        label: Span,\n+    },\n+    #[diag(lint_invalid_from_utf8_checked)]\n+    Checked {\n+        method: String,\n+        valid_up_to: usize,\n+        #[label]\n+        label: Span,\n+    },\n }\n \n // hidden_unicode_codepoints.rs"}, {"sha": "1185563ea8063e989bafb23f980782ced36eddd3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -1454,6 +1454,8 @@ symbols! {\n         stop_after_dataflow,\n         store,\n         str,\n+        str_from_utf8,\n+        str_from_utf8_mut,\n         str_from_utf8_unchecked,\n         str_from_utf8_unchecked_mut,\n         str_split_whitespace,"}, {"sha": "0f23cf7ae239fbf07a27549af25c68665ac03a6e", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -84,6 +84,7 @@ use super::Utf8Error;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_shared\", since = \"1.63.0\")]\n #[rustc_allow_const_fn_unstable(str_internals)]\n+#[rustc_diagnostic_item = \"str_from_utf8\"]\n pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     // FIXME: This should use `?` again, once it's `const`\n     match run_utf8_validation(v) {\n@@ -127,6 +128,7 @@ pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n /// errors that can be returned.\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_mut\"]\n pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     // This should use `?` again, once it's `const`\n     match run_utf8_validation(v) {"}, {"sha": "9c8c636812e0d8c727eaf67e01cea666075ce4b8", "filename": "tests/ui/lint/invalid_from_utf8.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.rs?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(concat_bytes)]\n #![warn(invalid_from_utf8_unchecked)]\n+#![warn(invalid_from_utf8)]\n \n pub fn from_utf8_unchecked_mut() {\n     // Valid\n@@ -46,4 +47,47 @@ pub fn from_utf8_unchecked() {\n     }\n }\n \n+pub fn from_utf8_mut() {\n+    // Valid\n+    {\n+        std::str::from_utf8_mut(&mut [99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_mut(&mut [b'c', b'l', b'i', b'p', b'p', b'y']);\n+\n+        let x = 0xa0;\n+        std::str::from_utf8_mut(&mut [0xc0, x]);\n+    }\n+\n+    // Invalid\n+    {\n+        std::str::from_utf8_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_mut`\n+        std::str::from_utf8_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_mut`\n+    }\n+}\n+\n+pub fn from_utf8() {\n+    // Valid\n+    {\n+        std::str::from_utf8(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    {\n+        std::str::from_utf8(&[99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(b\"cl\\x82ippy\");\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+        //~^ WARN calls to `std::str::from_utf8`\n+    }\n+}\n+\n fn main() {}"}, {"sha": "8e00d3bf872f4c4b87ae70f0d35b4381a006b218", "filename": "tests/ui/lint/invalid_from_utf8.stderr", "status": "modified", "additions": 61, "deletions": 7, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7f99c7d3e64143bdeda8f519a656ad1963162fb2/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f99c7d3e64143bdeda8f519a656ad1963162fb2/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr?ref=7f99c7d3e64143bdeda8f519a656ad1963162fb2", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n-  --> $DIR/invalid_from_utf8.rs:18:9\n+  --> $DIR/invalid_from_utf8.rs:19:9\n    |\n LL |         std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n@@ -13,44 +13,98 @@ LL | #![warn(invalid_from_utf8_unchecked)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n-  --> $DIR/invalid_from_utf8.rs:20:9\n+  --> $DIR/invalid_from_utf8.rs:21:9\n    |\n LL |         std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n    |                                           |\n    |                                           the literal was valid UTF-8 up to the 2 bytes\n \n warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n-  --> $DIR/invalid_from_utf8.rs:38:9\n+  --> $DIR/invalid_from_utf8.rs:39:9\n    |\n LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n    |                                       |\n    |                                       the literal was valid UTF-8 up to the 2 bytes\n \n warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n-  --> $DIR/invalid_from_utf8.rs:40:9\n+  --> $DIR/invalid_from_utf8.rs:41:9\n    |\n LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n    |                                       |\n    |                                       the literal was valid UTF-8 up to the 2 bytes\n \n warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n-  --> $DIR/invalid_from_utf8.rs:42:9\n+  --> $DIR/invalid_from_utf8.rs:43:9\n    |\n LL |         std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^\n    |                                       |\n    |                                       the literal was valid UTF-8 up to the 2 bytes\n \n warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n-  --> $DIR/invalid_from_utf8.rs:44:9\n+  --> $DIR/invalid_from_utf8.rs:45:9\n    |\n LL |         std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^\n    |                                       |\n    |                                       the literal was valid UTF-8 up to the 2 bytes\n \n-warning: 6 warnings emitted\n+warning: calls to `std::str::from_utf8_mut` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:62:9\n+   |\n+LL |         std::str::from_utf8_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n+   |                                 |\n+   |                                 the literal was valid UTF-8 up to the 2 bytes\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_from_utf8.rs:5:9\n+   |\n+LL | #![warn(invalid_from_utf8)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::str::from_utf8_mut` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:64:9\n+   |\n+LL |         std::str::from_utf8_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n+   |                                 |\n+   |                                 the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:82:9\n+   |\n+LL |         std::str::from_utf8(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:84:9\n+   |\n+LL |         std::str::from_utf8(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:86:9\n+   |\n+LL |         std::str::from_utf8(b\"cl\\x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^-------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:88:9\n+   |\n+LL |         std::str::from_utf8(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^---------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: 12 warnings emitted\n "}]}