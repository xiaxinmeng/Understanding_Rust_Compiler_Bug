{"sha": "d0cae14f6627e2ad2b50998755eeb818aad750ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwY2FlMTRmNjYyN2UyYWQyYjUwOTk4NzU1ZWViODE4YWFkNzUwY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-08T22:40:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-08T22:40:50Z"}, "message": "Auto merge of #28900 - cristicbz:typos, r=alexcrichton\n\n\r\nI found these automatically, but fixed them manually to ensure the semantics are correct. I know things like these are hardly important, since they only marginally improve clarity. But at least for me typos and simple grammatical errors trigger an---unjustified---sense of unprofessionalism, despite the fact that I make them all the time and I understand that they're the sort of thing that is bound to slip through review.  \r\n\r\nAnyway, to find most of these I used:\r\n\r\n  * `ag '.*//.*(\\b[A-Za-z]{2,}\\b) \\1\\b'` for repeated words\r\n\r\n  * `ag '\\b(the|this|those|these|a|it) (a|the|this|those|these|it)\\b'` to find constructs like 'the this' etc. many false positives, but not too hard to scroll through them to actually find the mistakes.\r\n\r\n  * `cat ../../typos.txt | paste -d'|' - - - - - - - - - - - - - - - - - - - - - - | tr '\\n' '\\0' | xargs -0 -P4 -n1 ag`. Hacky way to find misspellings, but it works ok. I got `typos.txt` from [Wikipedia](https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines)\r\n\r\n* `ag '.*//.* a ([ae][a-z]|(o[^n])|(i[a-rt-z]))'` to find places where 'a' was followed by a vowel (requiring 'an' instead).\r\n\r\nI also used a handful more one off regexes that are too boring to reproduce here.", "tree": {"sha": "37db2fd58d85f39c7154c96f6dffc4b2f341dfe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37db2fd58d85f39c7154c96f6dffc4b2f341dfe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0cae14f6627e2ad2b50998755eeb818aad750ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cae14f6627e2ad2b50998755eeb818aad750ca", "html_url": "https://github.com/rust-lang/rust/commit/d0cae14f6627e2ad2b50998755eeb818aad750ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0cae14f6627e2ad2b50998755eeb818aad750ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11eda66df859f53754788044476af753a012332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/11eda66df859f53754788044476af753a012332f", "html_url": "https://github.com/rust-lang/rust/commit/11eda66df859f53754788044476af753a012332f"}, {"sha": "4b308b44e1d8204702f6912dda4dfc404aa2a87d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b308b44e1d8204702f6912dda4dfc404aa2a87d", "html_url": "https://github.com/rust-lang/rust/commit/4b308b44e1d8204702f6912dda4dfc404aa2a87d"}], "stats": {"total": 186, "additions": 92, "deletions": 94}, "files": [{"sha": "a5a2b318db47c417310783b6770d390601b41ace", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -773,7 +773,7 @@ bound := path | lifetime\n \n ## Type kinds\n \n-**FIXME:** this this probably not relevant to the grammar...\n+**FIXME:** this is probably not relevant to the grammar...\n \n # Memory and concurrency models\n "}, {"sha": "d62a96f7308794cb3be5f7cdfcc1dd64b0bfcbaa", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -195,7 +195,7 @@ our value if it's immutable, but we want to be able to mutate it, so we need\n something else to persuade the borrow checker we know what we're doing.\n \n It looks like we need some type that allows us to safely mutate a shared value,\n-for example a type that that can ensure only one thread at a time is able to\n+for example a type that can ensure only one thread at a time is able to\n mutate the value inside it at any one time.\n \n For that, we can use the `Mutex<T>` type!"}, {"sha": "6cd0d9f8352fcfab532e0e56ceb8b002f53fc14d", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -302,7 +302,7 @@ This will print\n \n `filter()` is an adapter that takes a closure as an argument. This closure\n returns `true` or `false`. The new iterator `filter()` produces\n-only the elements that that closure returns `true` for:\n+only the elements that the closure returns `true` for:\n \n ```rust\n for i in (1..100).filter(|&x| x % 2 == 0) {"}, {"sha": "27af63a5876bc2c208d6405e3d31799d50da50c5", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -71,7 +71,7 @@\n \n Incomplete records are an error. Not-a-Number bit patterns are invalid too.\n \n-The tests run serially but the validaition for a a single test is parallelized\n+The tests run serially but the validation for a single test is parallelized\n with ``multiprocessing``. Each test is launched as a subprocess.\n One thread supervises it: Accepts and enqueues records to validate, observe\n stderr, and waits for the process to exit. A set of worker processes perform"}, {"sha": "96d29c7da4abea11514e6b5acbc6eb6f79ab4172", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -593,7 +593,7 @@ mod stack {\n         top: node::Handle<*mut Node<K, V>, Type, NodeType>,\n     }\n \n-    /// A `PartialSearchStack` that doesn't hold a a reference to the next node, and is just\n+    /// A `PartialSearchStack` that doesn't hold a reference to the next node, and is just\n     /// just waiting for a `Handle` to that next node to be pushed. See `PartialSearchStack::with`\n     /// for more details.\n     pub struct Pusher<'id, 'a, K:'a, V:'a> {"}, {"sha": "4c5f47bcab03675559e647a9eea6169f67ff7e79", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -86,7 +86,7 @@ fn test_find_str() {\n     assert_eq!(data[43..86].find(\"i\u1ec7t\"), Some(77 - 43));\n     assert_eq!(data[43..86].find(\"Nam\"), Some(83 - 43));\n \n-    // find every substring -- assert that it finds it, or an earlier occurence.\n+    // find every substring -- assert that it finds it, or an earlier occurrence.\n     let string = \"Vi\u1ec7t Namacbaabcaabaaba\";\n     for (i, ci) in string.char_indices() {\n         let ip = i + ci.len_utf8();"}, {"sha": "1b4af44da46892d309a819705b6534d9d097a14d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -598,7 +598,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n         }\n     }\n \n-    /// Make a new `Ref` for a optional component of the borrowed data, e.g. an\n+    /// Make a new `Ref` for an optional component of the borrowed data, e.g. an\n     /// enum variant.\n     ///\n     /// The `RefCell` is already immutably borrowed, so this cannot fail.\n@@ -668,7 +668,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n         }\n     }\n \n-    /// Make a new `RefMut` for a optional component of the borrowed data, e.g.\n+    /// Make a new `RefMut` for an optional component of the borrowed data, e.g.\n     /// an enum variant.\n     ///\n     /// The `RefCell` is already mutably borrowed, so this cannot fail."}, {"sha": "08c017841e3c893581a073d001d23e916e1f6ad7", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -373,20 +373,20 @@ extern \"rust-intrinsic\" {\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n-    /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n+    /// The volatile parameter is set to `true`, so it will not be optimized out.\n     pub fn volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T,\n                                                   count: usize);\n     /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n-    /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n+    /// The volatile parameter is set to `true`, so it will not be optimized out.\n     pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n     /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n     /// size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`.\n     ///\n-    /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n+    /// The volatile parameter is set to `true`, so it will not be optimized out.\n     pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Perform a volatile load from the `src` pointer."}, {"sha": "bf95ce868500b5537f93d1e88e82c0b4f864b33b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -381,7 +381,7 @@ mod impls {\n /// ```\n ///\n /// Without the declaration `T:Reflect`, `foo` would not type check\n-/// (note: as a matter of style, it would be preferable to to write\n+/// (note: as a matter of style, it would be preferable to write\n /// `T:Any`, because `T:Any` implies `T:Reflect` and `T:'static`, but\n /// we use `Reflect` here to show how it works). The `Reflect` bound\n /// thus serves to alert `foo`'s caller to the fact that `foo` may"}, {"sha": "18b34e24fcb306b2e3c1bab31cc534214c17a86e", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -110,7 +110,7 @@ macro_rules! define_bignum {\n     ($name:ident: type=$ty:ty, n=$n:expr) => (\n         /// Stack-allocated arbitrary-precision (up to certain limit) integer.\n         ///\n-        /// This is backed by an fixed-size array of given type (\"digit\").\n+        /// This is backed by a fixed-size array of given type (\"digit\").\n         /// While the array is not very large (normally some hundred bytes),\n         /// copying it recklessly may result in the performance hit.\n         /// Thus this is intentionally not `Copy`."}, {"sha": "57d4bccbfa68f1ab4a40f3662c374bd57e7cd00a", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -461,7 +461,7 @@ pub fn to_shortest_str<'a, T, F>(mut format_shortest: F, v: T,\n /// You probably would want `strategy::grisu::format_shortest` for this.\n ///\n /// The `dec_bounds` is a tuple `(lo, hi)` such that the number is formatted\n-/// as decimal only when `10^lo <= V < 10^hi`. Note that this is the *apparant* `V`\n+/// as decimal only when `10^lo <= V < 10^hi`. Note that this is the *apparent* `V`\n /// instead of the actual `v`! Thus any printed exponent in the exponential form\n /// cannot be in this range, avoiding any confusion.\n ///"}, {"sha": "13e01d9a7f7ab548918288fbbe693da00c980cf1", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -488,7 +488,7 @@ pub fn format_exact_opt(d: &Decoded, buf: &mut [u8], limit: i16)\n         // but scaling `max_ten_kappa << e` by 10 can result in overflow.\n         // thus we are being sloppy here and widen the error range by a factor of 10.\n         // this will increase the false negative rate, but only very, *very* slightly;\n-        // it can only matter noticably when the mantissa is bigger than 60 bits.\n+        // it can only matter noticeably when the mantissa is bigger than 60 bits.\n         return possibly_round(buf, 0, exp, limit, v.f / 10, (max_ten_kappa as u64) << e, err << e);\n     } else if ((exp as i32 - limit as i32) as usize) < buf.len() {\n         (exp - limit) as usize"}, {"sha": "56e55155c65e31b6d17440dde42fbcb5a3c2c5d8", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -1383,7 +1383,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n \n     // all valid digits are ascii, so we will just iterate over the utf8 bytes\n     // and cast them to chars. .to_digit() will safely return None for anything\n-    // other than a valid ascii digit for a the given radix, including the first-byte\n+    // other than a valid ascii digit for the given radix, including the first-byte\n     // of multi-byte sequences\n     let src = src.as_bytes();\n "}, {"sha": "57daa95e8c44dd98edb0d91c38035f2a3c8caef1", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -562,7 +562,7 @@ macro_rules! derive_pattern_clone {\n }\n \n /// This macro generates two public iterator structs\n-/// wrapping an private internal one that makes use of the `Pattern` API.\n+/// wrapping a private internal one that makes use of the `Pattern` API.\n ///\n /// For all patterns `P: Pattern<'a>` the following items will be\n /// generated (generics omitted):"}, {"sha": "51fea6e01717153807d12de369cf8e47c31c0d83", "filename": "src/libcoretest/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -16,7 +16,7 @@ use test;\n mod parse;\n mod rawfp;\n \n-// Take an float literal, turn it into a string in various ways (that are all trusted\n+// Take a float literal, turn it into a string in various ways (that are all trusted\n // to be correct) and see if those strings are parsed back to the value of the literal.\n // Requires a *polymorphic literal*, i.e. one that can serve as f64 as well as f32.\n macro_rules! test_literal {"}, {"sha": "396e2bb5703b1ddd5b4b54ef9b0f93d864386846", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -578,7 +578,7 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    /// Given a node ID, get a list of of attributes associated with the AST\n+    /// Given a node ID, get a list of attributes associated with the AST\n     /// corresponding to the Node ID\n     pub fn attrs(&self, id: NodeId) -> &'ast [ast::Attribute] {\n         let attrs = match self.find(id) {"}, {"sha": "e1f8aaead88dc7aa7fef9d534d214046480ec33f", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -913,7 +913,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         self.consume_expr(&*arm.body);\n     }\n \n-    /// Walks an pat that occurs in isolation (i.e. top-level of fn\n+    /// Walks a pat that occurs in isolation (i.e. top-level of fn\n     /// arg or let binding.  *Not* a match arm or nested pat.)\n     fn walk_irrefutable_pat(&mut self, cmt_discr: mc::cmt<'tcx>, pat: &hir::Pat) {\n         let mut mode = Unknown;\n@@ -1136,7 +1136,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 }\n \n                 hir::PatIdent(_, _, Some(_)) => {\n-                    // Do nothing; this is a binding (not a enum\n+                    // Do nothing; this is a binding (not an enum\n                     // variant or struct), and the cat_pattern call\n                     // will visit the substructure recursively.\n                 }\n@@ -1145,7 +1145,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 hir::PatRegion(..) | hir::PatLit(..) | hir::PatRange(..) |\n                 hir::PatVec(..) => {\n                     // Similarly, each of these cases does not\n-                    // correspond to a enum variant or struct, so we\n+                    // correspond to an enum variant or struct, so we\n                     // do not do any `matched_pat` calls for these\n                     // cases either.\n                 }"}, {"sha": "ef6d9ae41914b00e84755e1450300b09eb486d42", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -567,7 +567,7 @@ pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n \n     // Compute a mapping from the \"taint set\" of each skolemized\n     // region back to the `ty::BoundRegion` that it originally\n-    // represented. Because `leak_check` passed, we know that that\n+    // represented. Because `leak_check` passed, we know that\n     // these taint sets are mutually disjoint.\n     let inv_skol_map: FnvHashMap<ty::Region, ty::BoundRegion> =\n         skol_map"}, {"sha": "f6e35cf739d627f0d88487762766f6b172f86705", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -2394,7 +2394,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// errors as if there is no applicable impl, but rather report\n     /// errors are about mismatched argument types.\n     ///\n-    /// Here is an example. Imagine we have an closure expression\n+    /// Here is an example. Imagine we have a closure expression\n     /// and we desugared it so that the type of the expression is\n     /// `Closure`, and `Closure` expects an int as argument. Then it\n     /// is \"as if\" the compiler generated this impl:"}, {"sha": "c50c9e9765d25ce4a5bdd99d97fc70752b3dc791", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -408,7 +408,7 @@ pub fn upcast<'tcx>(tcx: &ty::ctxt<'tcx>,\n         .collect()\n }\n \n-/// Given an trait `trait_ref`, returns the number of vtable entries\n+/// Given a trait `trait_ref`, returns the number of vtable entries\n /// that come from `trait_ref`, excluding its supertraits. Used in\n /// computing the vtable base for an upcast trait of a trait object.\n pub fn count_own_vtable_entries<'tcx>(tcx: &ty::ctxt<'tcx>,"}, {"sha": "c44ebcfdb693c36c87f2cdfd94c742af11a4ba53", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -48,7 +48,7 @@ pub enum AutoAdjustment<'tcx> {\n ///\n /// 1. The simplest cases are where the pointer is not adjusted fat vs thin.\n /// Here the pointer will be dereferenced N times (where a dereference can\n-/// happen to to raw or borrowed pointers or any smart pointer which implements\n+/// happen to raw or borrowed pointers or any smart pointer which implements\n /// Deref, including Box<_>). The number of dereferences is given by\n /// `autoderefs`.  It can then be auto-referenced zero or one times, indicated\n /// by `autoref`, to either a raw or borrowed pointer. In these cases unsize is"}, {"sha": "37ed716eaa0b828411452ae587b5b5af45d0bda1", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -126,7 +126,7 @@ pub enum TypeVariants<'tcx> {\n     TyRef(&'tcx Region, TypeAndMut<'tcx>),\n \n     /// If the def-id is Some(_), then this is the type of a specific\n-    /// fn item. Otherwise, if None(_), it a fn pointer type.\n+    /// fn item. Otherwise, if None(_), it is a fn pointer type.\n     ///\n     /// FIXME: Conflating function pointers and the type of a\n     /// function is probably a terrible idea; a function pointer is a"}, {"sha": "1639fcf77a66122120d7abaac5747e8bc1f6419f", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -159,7 +159,7 @@ pub struct FragmentSets {\n     /// FIXME(pnkfelix) probably do not want/need\n     /// `parents_of_fragments` at all, if we can avoid it.\n     ///\n-    /// Update: I do not see a way to to avoid it.  Maybe just remove\n+    /// Update: I do not see a way to avoid it.  Maybe just remove\n     /// above fixme, or at least document why doing this may be hard.\n     parents_of_fragments: Vec<MovePathIndex>,\n "}, {"sha": "10e29ef843cd3e65ace904e27f0a004f447e7955", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -373,7 +373,7 @@ const DOWNCAST_PRINTED_OPERATOR: &'static str = \" as \";\n \n // A local, \"cleaned\" version of `mc::InteriorKind` that drops\n // information that is not relevant to loan-path analysis. (In\n-// particular, the distinction between how precisely a array-element\n+// particular, the distinction between how precisely an array-element\n // is tracked is irrelevant here.)\n #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum InteriorKind {"}, {"sha": "dbb0e1208056303bb4f1398077537fd27b274e6a", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -963,8 +963,8 @@ fn insert_lllocals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                         // leaving the remainder of the tuple `(_,\n                         // D(B))` still to be dropped in the future.\n                         //\n-                        // Thus, here we must must zero the place that\n-                        // we are moving *from*, because we do not yet\n+                        // Thus, here we must zero the place that we\n+                        // are moving *from*, because we do not yet\n                         // track drop flags for a fragmented parent\n                         // match input expression.\n                         //"}, {"sha": "86a65f57bdab08b6859bcd695f7ddef865dcf319", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -339,7 +339,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let llargs = get_params(fcx.llfn);\n \n     let self_idx = fcx.arg_offset();\n-    // the first argument (`self`) will be ptr to the the fn pointer\n+    // the first argument (`self`) will be ptr to the fn pointer\n     let llfnpointer = if is_by_ref {\n         Load(bcx, llargs[self_idx])\n     } else {"}, {"sha": "bc5152cba1f2cd7b0da2391f1b98f82ce0f9371c", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -809,7 +809,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let mut type_map = debug_context(cx).type_map.borrow_mut();\n \n         if already_stored_in_typemap {\n-            // Also make sure that we already have a TypeMap entry entry for the unique type id.\n+            // Also make sure that we already have a TypeMap entry for the unique type id.\n             let metadata_for_uid = match type_map.find_metadata_for_unique_id(unique_type_id) {\n                 Some(metadata) => metadata,\n                 None => {"}, {"sha": "6b9cec5ad246a45bf8eb7137df3c198b79ccb93f", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -2526,7 +2526,7 @@ impl OverflowOpViaInputCheck {\n         // Note that the mask's value is derived from the LHS type\n         // (since that is where the 32/64 distinction is relevant) but\n         // the mask's type must match the RHS type (since they will\n-        // both be fed into a and-binop)\n+        // both be fed into an and-binop)\n         let invert_mask = shift_mask_val(bcx, lhs_llty, rhs_llty, true);\n \n         let outer_bits = And(bcx, rhs, invert_mask, binop_debug_loc);"}, {"sha": "d7b6cb41a0a756571f3e6ebc14dbe388396bc0de", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -203,9 +203,9 @@ pub enum DropGlueKind<'tcx> {\n     /// Skips the dtor, if any, for ty; drops the contents directly.\n     /// Note that the dtor is only skipped at the most *shallow*\n     /// level, namely, an `impl Drop for Ty` itself. So, for example,\n-    /// if Ty is Newtype(S) then only the Drop impl for for Newtype\n-    /// itself will be skipped, while the Drop impl for S, if any,\n-    /// will be invoked.\n+    /// if Ty is Newtype(S) then only the Drop impl for Newtype itself\n+    /// will be skipped, while the Drop impl for S, if any, will be\n+    /// invoked.\n     TyContents(Ty<'tcx>),\n }\n "}, {"sha": "0573d6301c5e8ea5a63e47805f8dc29e71b3b263", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -1221,8 +1221,8 @@ fn try_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n // MSVC's definition of the `rust_try` function. The exact implementation here\n // is a little different than the GNU (standard) version below, not only because\n // of the personality function but also because of the other fiddly bits about\n-// SEH. LLVM also currently requires us to structure this a very particular way\n-// as explained below.\n+// SEH. LLVM also currently requires us to structure this in a very particular\n+// way as explained below.\n //\n // Like with the GNU version we generate a shim wrapper\n fn trans_msvc_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}, {"sha": "c470e4276c4935a5437e1bdbd11261cfd53c1fc0", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -476,8 +476,7 @@ fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n ///    }\n ///\n /// What is the value of `x` when `foo` is invoked with `T=SomeTrait`?\n-/// The answer is that it it is a shim function generate by this\n-/// routine:\n+/// The answer is that it is a shim function generated by this routine:\n ///\n ///    fn shim(t: &SomeTrait) -> int {\n ///        // ... call t.get() virtually ..."}, {"sha": "437c0d9cbc341df0ec12091e9f4edd6df911cc98", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -361,7 +361,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n           let repr = adt::represent_type(cx, t);\n           // Unboxed closures can have substitutions in all spaces\n           // inherited from their environment, so we use entire\n-          // contents of the VecPerParamSpace to to construct the llvm\n+          // contents of the VecPerParamSpace to construct the llvm\n           // name\n           adt::incomplete_type_of(cx, &*repr, \"closure\")\n       }"}, {"sha": "299b6be9951fc80d966529b4e3c25f9a9cc27c87", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -347,7 +347,7 @@ fn create_region_substs<'tcx>(\n {\n     let tcx = this.tcx();\n \n-    // If the type is parameterized by the this region, then replace this\n+    // If the type is parameterized by this region, then replace this\n     // region with the current anon region binding (in other words,\n     // whatever & would get replaced with).\n     let expected_num_region_params = decl_generics.regions.len(TypeSpace);\n@@ -1238,7 +1238,7 @@ fn one_bound_for_assoc_type<'tcx>(tcx: &ty::ctxt<'tcx>,\n     Ok(bounds[0].clone())\n }\n \n-// Create a type from a a path to an associated type.\n+// Create a type from a path to an associated type.\n // For a path A::B::C::D, ty and ty_path_def are the type and def for A::B::C\n // and item_segment is the path segment for D. We return a type and a def for\n // the whole path."}, {"sha": "dfe8bd78c1b9ea2a5d894767aaeea868497a4013", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -185,7 +185,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     for predicate in predicates {\n         // (We do not need to worry about deep analysis of type\n         // expressions etc because the Drop impls are already forced\n-        // to take on a structure that is roughly a alpha-renaming of\n+        // to take on a structure that is roughly an alpha-renaming of\n         // the generic parameters of the item definition.)\n \n         // This path now just checks *all* predicates via the direct"}, {"sha": "00482f2d53c2cdc7d46482c4525cc10461cf192c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -1878,7 +1878,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // If there are no more fallbacks to apply at this point we have applied all possible\n-            // defaults and type inference will procede as normal.\n+            // defaults and type inference will proceed as normal.\n             if unbound_tyvars.is_empty() {\n                 break;\n             }\n@@ -2222,7 +2222,7 @@ fn make_overloaded_lvalue_return_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n {\n     match method {\n         Some(method) => {\n-            // extract method method return type, which will be &T;\n+            // extract method return type, which will be &T;\n             // all LB regions should have been instantiated during method lookup\n             let ret_ty = method.ty.fn_ret();\n             let ret_ty = fcx.tcx().no_late_bound_regions(&ret_ty).unwrap().unwrap();\n@@ -4106,7 +4106,7 @@ fn check_const_with_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // Gather locals in statics (because of block expressions).\n     // This is technically unnecessary because locals in static items are forbidden,\n     // but prevents type checking from blowing up before const checking can properly\n-    // emit a error.\n+    // emit an error.\n     GatherLocalsVisitor { fcx: fcx }.visit_expr(e);\n \n     check_expr_with_hint(fcx, e, declty);\n@@ -4360,7 +4360,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     //    parameters permitted at present, but perhaps we will allow\n     //    them in the future.)\n     //\n-    // 1b. Reference to a enum variant or tuple-like struct:\n+    // 1b. Reference to an enum variant or tuple-like struct:\n     //\n     //        struct foo<T>(...)\n     //        enum E<T> { foo(...) }"}, {"sha": "c2610da3944cc5fd010304b22f1e162eddc79a16", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -77,7 +77,7 @@\n //! borrowed pointer? I mean any data that is reached by first\n //! dereferencing a borrowed pointer and then either traversing\n //! interior offsets or boxes.  We say that the guarantor\n-//! of such data it the region of the borrowed pointer that was\n+//! of such data is the region of the borrowed pointer that was\n //! traversed.  This is essentially the same as the ownership\n //! relation, except that a borrowed pointer never owns its\n //! contents."}, {"sha": "272d776a891bb0b3bd275741a13dfa48a50a48f8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -507,7 +507,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n /// Find bounds from hir::Generics. This requires scanning through the\n /// AST. We do this to avoid having to convert *all* the bounds, which\n /// would create artificial cycles. Instead we can only convert the\n-/// bounds for those a type parameter `X` if `X::Foo` is used.\n+/// bounds for a type parameter `X` if `X::Foo` is used.\n impl<'tcx> GetTypeParameterBounds<'tcx> for hir::Generics {\n     fn get_type_parameter_bounds(&self,\n                                  astconv: &AstConv<'tcx>,"}, {"sha": "3b6cc37181ef1a330cc33a4a38a45c0643d704d7", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -109,7 +109,7 @@ fn main(){\n \"##,\n \n E0026: r##\"\n-This error indicates that a struct pattern attempted to extract a non-existant\n+This error indicates that a struct pattern attempted to extract a non-existent\n field from a struct. Struct fields are identified by the name used before the\n colon `:` so struct patterns should resemble the declaration of the struct type\n being matched.\n@@ -3352,7 +3352,7 @@ register_diagnostics! {\n     E0182,\n     E0183,\n //  E0187, // can't infer the kind of the closure\n-//  E0188, // can not cast a immutable reference to a mutable pointer\n+//  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n     E0196, // cannot determine a type for this closure"}, {"sha": "160c7e7d754d9d12cb253719329e0010f8487ab9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -153,7 +153,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         //\n         // Note that this loop only searches the top-level items of the crate,\n         // and this is intentional. If we were to search the entire crate for an\n-        // item tagged with `#[doc(primitive)]` then we we would also have to\n+        // item tagged with `#[doc(primitive)]` then we would also have to\n         // search the entirety of external modules for items tagged\n         // `#[doc(primitive)]`, which is a pretty inefficient process (decoding\n         // all that metadata unconditionally)."}, {"sha": "53be8b5bc06c8e2cd440ce0c90ea397c41f127d8", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -55,8 +55,8 @@ pub struct TocBuilder {\n     /// strictly increasing (i.e. chain[0].level < chain[1].level <\n     /// ...) with each entry being the most recent occurrence of a\n     /// heading with that level (it doesn't include the most recent\n-    /// occurrences of every level, just, if *is* in `chain` then is is\n-    /// the most recent one).\n+    /// occurrences of every level, just, if it *is* in `chain` then\n+    /// it is the most recent one).\n     ///\n     /// We also have `chain[0].level <= top_level.entries[last]`.\n     chain: Vec<TocEntry>"}, {"sha": "acab63315e4c4286b2af4ac04e583fd5c039fccc", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -546,7 +546,7 @@ impl<W> IntoInnerError<W> {\n     /// let stream = match stream.into_inner() {\n     ///     Ok(s) => s,\n     ///     Err(e) => {\n-    ///         // Here, e is a IntoInnerError, let's re-examine the buffer:\n+    ///         // Here, e is an IntoInnerError, let's re-examine the buffer:\n     ///         let buffer = e.into_inner();\n     ///\n     ///         // do stuff to try to recover"}, {"sha": "166909f20b7e1a97ceb38912f3fd8de2b4f6c6d9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -23,7 +23,7 @@\n //! Because they are traits, they're implemented by a number of other types,\n //! and you can implement them for your types too. As such, you'll see a\n //! few different types of I/O throughout the documentation in this module:\n-//! `File`s, `TcpStream`s, and somtimes even `Vec<T>`s. For example, `Read`\n+//! `File`s, `TcpStream`s, and sometimes even `Vec<T>`s. For example, `Read`\n //! adds a `read()` method, which we can use on `File`s:\n //!\n //! ```\n@@ -234,7 +234,7 @@\n //! The return type of `read_input()`, `io::Result<()>`, is a very common type\n //! for functions which don't have a 'real' return value, but do want to return\n //! errors if they happen. In this case, the only purpose of this function is\n-//! to read the line and print it, so we use use `()`.\n+//! to read the line and print it, so we use `()`.\n //!\n //! [result]: type.Result.html\n //! [try]: macro.try!.html"}, {"sha": "31b881bebf05f9c0672821237be88af69e7bd19f", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -146,7 +146,7 @@ pub struct Stdin {\n     inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n }\n \n-/// A locked reference to the a `Stdin` handle.\n+/// A locked reference to the `Stdin` handle.\n ///\n /// This handle implements both the `Read` and `BufRead` traits and is\n /// constructed via the `lock` method on `Stdin`.\n@@ -323,7 +323,7 @@ pub struct Stdout {\n     inner: Arc<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>>,\n }\n \n-/// A locked reference to the a `Stdout` handle.\n+/// A locked reference to the `Stdout` handle.\n ///\n /// This handle implements the `Write` trait and is constructed via the `lock`\n /// method on `Stdout`.\n@@ -430,7 +430,7 @@ pub struct Stderr {\n     inner: Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>>,\n }\n \n-/// A locked reference to the a `Stderr` handle.\n+/// A locked reference to the `Stderr` handle.\n ///\n /// This handle implements the `Write` trait and is constructed via the `lock`\n /// method on `Stderr`."}, {"sha": "633e7326bb181c10c2e259a765d717078ae6a57f", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -22,7 +22,7 @@ use libc;\n use sys_common::{AsInner, FromInner};\n use net::{hton, ntoh};\n \n-/// An IP address, either a IPv4 or IPv6 address.\n+/// An IP address, either an IPv4 or IPv6 address.\n #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n pub enum IpAddr {"}, {"sha": "f1c626cc16576efb4a17f19f99ea5d182d08cd26", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -74,7 +74,7 @@\n //!     [`Eq`](../cmp/trait.Eq.html),\n //!     [`Ord`](../cmp/trait.Ord.html)\n //!   }.\n-//!   The comparision traits, which implement the comparison operators\n+//!   The comparison traits, which implement the comparison operators\n //!   and are often seen in trait bounds.\n //! * `std::convert::`{\n //!     [`AsRef`](../convert/trait.AsRef.html),"}, {"sha": "a0d0147296a969dd20c1180c6553315696304ffd", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -427,7 +427,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// use std::sync::mpsc::channel;\n /// use std::thread;\n ///\n-/// // tx is is the sending half (tx for transmission), and rx is the receiving\n+/// // tx is the sending half (tx for transmission), and rx is the receiving\n /// // half (rx for receiving).\n /// let (tx, rx) = channel();\n ///"}, {"sha": "a6eada832cdbc62fec8e88ba12dee216b063208e", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -146,13 +146,13 @@ impl fmt::Debug for Wtf8Buf {\n }\n \n impl Wtf8Buf {\n-    /// Creates an new, empty WTF-8 string.\n+    /// Creates a new, empty WTF-8 string.\n     #[inline]\n     pub fn new() -> Wtf8Buf {\n         Wtf8Buf { bytes: Vec::new() }\n     }\n \n-    /// Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.\n+    /// Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.\n     #[inline]\n     pub fn with_capacity(n: usize) -> Wtf8Buf {\n         Wtf8Buf { bytes: Vec::with_capacity(n) }"}, {"sha": "dcfa376c81e3b6e461dd3a0040a2ba1ab97134e1", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -39,7 +39,7 @@ pub trait CommandExt {\n     /// This is not enough to create a daemon process. The *init* process should\n     /// be the child reaper of a daemon. This can be achieved if the parent\n     /// process exit. Moreover, a daemon should not have a controlling terminal.\n-    /// To acheive this, a session leader (the child) must spawn another process\n+    /// To achieve this, a session leader (the child) must spawn another process\n     /// (the daemon) in the same session.\n     #[unstable(feature = \"process_session_leader\", reason = \"recently added\",\n                issue = \"27811\")]"}, {"sha": "3a88f36399eb25e79d34e20cdd1a2cc9d08c6488", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -49,7 +49,7 @@ pub mod time;\n pub mod stdio;\n \n pub fn init() {\n-    // By default, some platforms will send a *signal* when a EPIPE error\n+    // By default, some platforms will send a *signal* when an EPIPE error\n     // would otherwise be delivered. This runtime doesn't install a SIGPIPE\n     // handler, causing it to kill the program, which isn't exactly what we\n     // want!"}, {"sha": "85f5d4e5884a2a3ad4c8a584abeeeba0d9499ea3", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -75,8 +75,8 @@ fn to_utf16_os(s: &OsStr) -> Vec<u16> {\n     v\n }\n \n-// Many Windows APIs follow a pattern of where we hand the a buffer and then\n-// they will report back to us how large the buffer should be or how many bytes\n+// Many Windows APIs follow a pattern of where we hand a buffer and then they\n+// will report back to us how large the buffer should be or how many bytes\n // currently reside in the buffer. This function is an abstraction over these\n // functions by making them easier to call.\n //"}, {"sha": "b770156582d3bd6ff87ba053d1fd7af9833bc235", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -22,7 +22,7 @@\n //!    more details.\n //!\n //! 3. While CriticalSection is fair and SRWLock is not, the current Rust policy\n-//!    is there there are no guarantees of fairness.\n+//!    is that there are no guarantees of fairness.\n //!\n //! The downside of this approach, however, is that SRWLock is not available on\n //! Windows XP, so we continue to have a fallback implementation where"}, {"sha": "7459f8b8f24edeaf2dfaa69c848e028b10d09735", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -600,7 +600,7 @@ impl<'a> ExtCtxt<'a> {\n         self.expander().fold_expr(e)\n     }\n \n-    /// Returns a `Folder` for deeply expanding all macros in a AST node.\n+    /// Returns a `Folder` for deeply expanding all macros in an AST node.\n     pub fn expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n         expand::MacroExpander::new(self)\n     }"}, {"sha": "8dec9ae1e98750b1e6d604278ba8596987db749e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -32,7 +32,7 @@\n //! As it processes them, it fills up `eof_eis` with items that would be valid if\n //! the macro invocation is now over, `bb_eis` with items that are waiting on\n //! a Rust nonterminal like `$e:expr`, and `next_eis` with items that are waiting\n-//! on the a particular token. Most of the logic concerns moving the \u00b7 through the\n+//! on a particular token. Most of the logic concerns moving the \u00b7 through the\n //! repetitions indicated by Kleene stars. It only advances or calls out to the\n //! real Rust parser when no `cur_eis` items remain\n //!"}, {"sha": "cce4450b2991af814a9f0b95a920a93a97f42710", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -497,7 +497,7 @@ fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n                 Ok(true)\n             },\n             \"block\" => {\n-                // anything can follow block, the braces provide a easy boundary to\n+                // anything can follow block, the braces provide an easy boundary to\n                 // maintain\n                 Ok(true)\n             },"}, {"sha": "39b1b746de86339acb72ebbadeb14a9cfef15ad5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -1107,8 +1107,7 @@ pub enum UnstableFeatures {\n     /// Errors are bypassed for bootstrapping. This is required any time\n     /// during the build that feature-related lints are set to warn or above\n     /// because the build turns on warnings-as-errors and uses lots of unstable\n-    /// features. As a result, this this is always required for building Rust\n-    /// itself.\n+    /// features. As a result, this is always required for building Rust itself.\n     Cheat\n }\n "}, {"sha": "4308023a9a535e84a77afc1e99f5a044ebffc718", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -250,7 +250,7 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target,\n #endif\n   PM->run(*unwrap(M));\n \n-  // Apparently `addPassesToEmitFile` adds an pointer to our on-the-stack output\n+  // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output\n   // stream (OS), so the only real safe place to delete this is here? Don't we\n   // wish this was written in Rust?\n   delete PM;"}, {"sha": "d48cff405a6371d473dfafb195d95016c9f43528", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we report an error if the trait ref in an qualified type\n+// Test that we report an error if the trait ref in a qualified type\n // uses invalid type arguments.\n \n trait Foo<T> {"}, {"sha": "786c72b66f36fe812677a781aacf61f9f7a3d85d", "filename": "src/test/compile-fail/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that an constant-evaluation underflow highlights the correct\n+// Check that a constant-evaluation underflow highlights the correct\n // spot (where the underflow occurred), while also providing the\n // overall context for what caused the evaluation.\n "}, {"sha": "020717dc1e18f8fbfccefd584da4e2c296e99e6c", "filename": "src/test/compile-fail/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that an constant-evaluation underflow highlights the correct\n+// Check that a constant-evaluation underflow highlights the correct\n // spot (where the underflow occurred).\n \n const ONE: usize = 1;"}, {"sha": "6cbed34c7ad94053179eec6f7959ab9ff55cf226", "filename": "src/test/compile-fail/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_unsound_drop.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that a arena (TypedArena) cannot carry elements whose drop\n+// Check that an arena (TypedArena) cannot carry elements whose drop\n // methods might access borrowed data of lifetime that does not\n // strictly outlive the arena itself.\n //\n@@ -30,7 +30,7 @@ struct CheckId<T:HasId> { v: T }\n // In the code below, the impl of HasId for `&'a usize` does not\n // actually access the borrowed data, but the point is that the\n // interface to CheckId does not (and cannot) know that, and therefore\n-// when encountering the a value V of type CheckId<S>, we must\n+// when encountering a value V of type CheckId<S>, we must\n // conservatively force the type S to strictly outlive V.\n impl<T:HasId> Drop for CheckId<T> {\n     fn drop(&mut self) {"}, {"sha": "e701718028a7a05349d952f07cb98270b091db4e", "filename": "src/test/compile-fail/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Reject mixing cyclic structure and Drop when using trait\n-// objects to hide the the cross-references.\n+// objects to hide the cross-references.\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n "}, {"sha": "a15ccb71aa733bcf5e64da17fb9012ab2fc45129", "filename": "src/test/compile-fail/issue-17904-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fissue-17904-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fissue-17904-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17904-2.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Test that we can parse a unit struct with a where clause, even if\n-// it leads to a error later on since `T` is unused.\n+// it leads to an error later on since `T` is unused.\n \n struct Foo<T> where T: Copy; //~ ERROR parameter `T` is never used\n "}, {"sha": "c73a17350648bfba823679cd75eb677bb969c4b1", "filename": "src/test/compile-fail/issue-1920-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Test that when a crate is linked under another name that that name is used in global paths\n+//! Test that when a crate is linked under another name that name is used in global paths\n \n extern crate core as bar;\n "}, {"sha": "792d27c179bc4fb70ddf4d65278689f8ccb2913e", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Creating a stack closure which references an box and then\n+// Creating a stack closure which references a box and then\n // transferring ownership of the box before invoking the stack\n // closure results in a crash.\n "}, {"sha": "ec0631a881a37bdaee81aaae3e1bcfd227f1d1f8", "filename": "src/test/compile-fail/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-hrtb.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -37,7 +37,7 @@ pub struct WithHrAssoc<T>\n }\n \n fn with_assoc<'a,'b>() {\n-    // We get an error because beacuse 'b:'a does not hold:\n+    // We get an error because 'b:'a does not hold:\n \n     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n     //~^ ERROR reference has a longer lifetime"}, {"sha": "23306823c729c0e7ab977d1de9636d7376950b16", "filename": "src/test/compile-fail/unboxed-closures-recursive-fn-using-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -12,7 +12,7 @@\n \n use std::marker::PhantomData;\n \n-// A erroneous variant of `run-pass/unboxed_closures-infer-recursive-fn.rs`\n+// An erroneous variant of `run-pass/unboxed_closures-infer-recursive-fn.rs`\n // where we attempt to perform mutation in the recursive function. This fails to compile\n // because it winds up requiring `FnMut` which enforces linearity.\n "}, {"sha": "bb452eecbfc8b3551522d1acab284f0e7a4feaaa", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -48,7 +48,7 @@ struct Test5<'a, 'b:'a> { //~ ERROR regions=[[+, o];[];[]]\n \n // Invariance is a trap from which NO ONE CAN ESCAPE.\n // In other words, even though the `&'b isize` occurs in\n-// a argument list (which is contravariant), that\n+// an argument list (which is contravariant), that\n // argument list occurs in an invariant context.\n \n #[rustc_variance]"}, {"sha": "e326949458ebf86fe43ded57c79ec0a2d8bd853f", "filename": "src/test/run-fail/issue-18576.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-fail%2Fissue-18576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-fail%2Fissue-18576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-18576.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:stop\n \n // #18576\n-// Make sure that an calling extern function pointer in an unreachable\n+// Make sure that calling an extern function pointer in an unreachable\n // context doesn't cause an LLVM assertion\n \n #[allow(unreachable_code)]"}, {"sha": "db30bfbf747901499fea6b30f1c9260a5f184dfc", "filename": "src/test/run-pass/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that a arena (TypedArena) can carry elements whose drop\n+// Check that an arena (TypedArena) can carry elements whose drop\n // methods might access borrowed data, as long as the borrowed data\n // has lifetime that strictly outlives the arena itself.\n //"}, {"sha": "209b4acb09586935210a62d5e72272720e45eaf9", "filename": "src/test/run-pass/impl-inherent-non-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-pass%2Fimpl-inherent-non-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-pass%2Fimpl-inherent-non-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-inherent-non-conflict.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Ensure that an user-defined type admits multiple inherent methods\n+// Ensure that a user-defined type admits multiple inherent methods\n // with the same name, which can be called on values that have a\n // precise enough type to allow distinguishing between the methods.\n "}, {"sha": "fde32cb9023928286f806f1e7bd9d8a3071a9aa4", "filename": "src/test/run-pass/issue-24085.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-pass%2Fissue-24085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cae14f6627e2ad2b50998755eeb818aad750ca/src%2Ftest%2Frun-pass%2Fissue-24085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24085.rs?ref=d0cae14f6627e2ad2b50998755eeb818aad750ca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Regression test for #24085. Errors were occuring in region\n+// Regression test for #24085. Errors were occurring in region\n // inference due to the requirement that `'a:b'`, which was getting\n // incorrectly translated in connection with the closure below.\n "}]}