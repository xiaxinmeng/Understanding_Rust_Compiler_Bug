{"sha": "4b03fd910c4d963a369baa3e38c9a7713c04a79c", "node_id": "C_kwDOAAsO6NoAKDRiMDNmZDkxMGM0ZDk2M2EzNjliYWEzZTM4YzlhNzcxM2MwNGE3OWM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-21T03:24:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-09T01:22:07Z"}, "message": "rustc_middle: Rename `Export` to `ModChild` and add some comments\n\nAlso rename `module_exports`/`export_map` to `module_reexports`/`reexport_map` for clarity.", "tree": {"sha": "98dc1476ae49ca7fae5e060a7c128ada9833325e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98dc1476ae49ca7fae5e060a7c128ada9833325e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b03fd910c4d963a369baa3e38c9a7713c04a79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b03fd910c4d963a369baa3e38c9a7713c04a79c", "html_url": "https://github.com/rust-lang/rust/commit/4b03fd910c4d963a369baa3e38c9a7713c04a79c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b03fd910c4d963a369baa3e38c9a7713c04a79c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3051f6e9c497018b507c407a04a56957f9c83df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3051f6e9c497018b507c407a04a56957f9c83df7", "html_url": "https://github.com/rust-lang/rust/commit/3051f6e9c497018b507c407a04a56957f9c83df7"}], "stats": {"total": 130, "additions": 66, "deletions": 64}, "files": [{"sha": "0bfd5628b35b857cae70ef768c6a6140cfca21a3", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n@@ -1082,7 +1082,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn for_each_module_child(\n         &self,\n         id: DefIndex,\n-        mut callback: impl FnMut(Export),\n+        mut callback: impl FnMut(ModChild),\n         sess: &Session,\n     ) {\n         if let Some(data) = &self.root.proc_macro_data {\n@@ -1096,7 +1096,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         self.local_def_id(def_index),\n                     );\n                     let ident = self.item_ident(def_index, sess);\n-                    callback(Export { ident, res, vis: ty::Visibility::Public, span: ident.span });\n+                    callback(ModChild {\n+                        ident,\n+                        res,\n+                        vis: ty::Visibility::Public,\n+                        span: ident.span,\n+                    });\n                 }\n             }\n             return;\n@@ -1117,7 +1122,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let vis = self.get_visibility(child_index);\n                     let span = self.get_span(child_index, sess);\n \n-                    callback(Export { ident, res, vis, span });\n+                    callback(ModChild { ident, res, vis, span });\n \n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n@@ -1129,7 +1134,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(Export { res: ctor_res, vis, ident, span });\n+                                callback(ModChild { ident, res: ctor_res, vis, span });\n                             }\n                         }\n                         DefKind::Variant => {\n@@ -1154,7 +1159,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }\n                             }\n-                            callback(Export { res: ctor_res, ident, vis, span });\n+                            callback(ModChild { ident, res: ctor_res, vis, span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "395f954b430431d3023948be575e40a8a2a3f30e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::stable_map::FxHashMap;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n@@ -309,7 +309,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                 bfs_queue.push_back(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n             }\n \n-            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &Export, parent: DefId| {\n+            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &ModChild, parent: DefId| {\n                 if !child.vis.is_public() {\n                     return;\n                 }\n@@ -388,7 +388,7 @@ impl CStore {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n \n-    pub fn module_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<Export> {\n+    pub fn module_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<ModChild> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate).for_each_module_child(\n             def_id.index,"}, {"sha": "b70c78cc8ad2f776917634915cd6bbb56c6b787d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -1094,7 +1094,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         // code uses it). However, we skip encoding anything relating to child\n         // items - we encode information about proc-macros later on.\n         let reexports = if !self.is_proc_macro {\n-            match tcx.module_exports(local_def_id) {\n+            match tcx.module_reexports(local_def_id) {\n                 Some(exports) => self.lazy(exports),\n                 _ => Lazy::empty(),\n             }"}, {"sha": "d2081827c147fb1150b1b00a677d3ed9af8ae4f1", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::{DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::thir;\n@@ -350,7 +350,7 @@ enum EntryKind {\n     Union(Lazy<VariantData>, ReprOptions),\n     Fn(Lazy<FnData>),\n     ForeignFn(Lazy<FnData>),\n-    Mod(Lazy<[Export]>),\n+    Mod(Lazy<[ModChild]>),\n     MacroDef(Lazy<MacroDef>),\n     ProcMacro(MacroKind),\n     Closure,"}, {"sha": "f37b976fba68d3d6d450cee0c1cb4b9b353bb2ac", "filename": "compiler/rustc_middle/src/hir/exports.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -1,28 +0,0 @@\n-use crate::ty;\n-\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def::Res;\n-use rustc_hir::def_id::LocalDefId;\n-use rustc_macros::HashStable;\n-use rustc_span::symbol::Ident;\n-use rustc_span::Span;\n-\n-use std::fmt::Debug;\n-\n-/// This is the replacement export map. It maps a module to all of the exports\n-/// within.\n-pub type ExportMap = FxHashMap<LocalDefId, Vec<Export>>;\n-\n-#[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n-pub struct Export {\n-    /// The name of the target.\n-    pub ident: Ident,\n-    /// The resolution of the target.\n-    /// Local variables cannot be exported, so this `Res` doesn't need the ID parameter.\n-    pub res: Res<!>,\n-    /// The span of the target.\n-    pub span: Span,\n-    /// The visibility of the export.\n-    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n-    pub vis: ty::Visibility,\n-}"}, {"sha": "557dc25528f1314bf7be9a7f34ee94170b69e918", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -2,7 +2,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n-pub mod exports;\n pub mod map;\n pub mod place;\n "}, {"sha": "920eca7a717729e72cd1d49bfaea752a0ae74a06", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -84,6 +84,7 @@ pub mod dep_graph;\n pub mod hir;\n pub mod infer;\n pub mod lint;\n+pub mod metadata;\n pub mod middle;\n pub mod mir;\n pub mod thir;"}, {"sha": "6dcdc58c72d829e35cfe206c56a3e5db1597536c", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -0,0 +1,24 @@\n+use crate::ty;\n+\n+use rustc_hir::def::Res;\n+use rustc_macros::HashStable;\n+use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n+\n+/// This structure is supposed to keep enough data to re-create `NameBinding`s for other crates\n+/// during name resolution. Right now the bindings are not recreated entirely precisely so we may\n+/// need to add more data in the future to correctly support macros 2.0, for example.\n+/// Module child can be either a proper item or a reexport (including private imports).\n+/// In case of reexport all the fields describe the reexport item itself, not what it refers to.\n+#[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n+pub struct ModChild {\n+    /// Name of the item.\n+    pub ident: Ident,\n+    /// Resolution result corresponding to the item.\n+    /// Local variables cannot be exported, so this `Res` doesn't need the ID parameter.\n+    pub res: Res<!>,\n+    /// Visibility of the item.\n+    pub vis: ty::Visibility,\n+    /// Span of the item.\n+    pub span: Span,\n+}"}, {"sha": "7108f662cd3eabcc7fa2aff606516c3c419a6a53", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -1300,8 +1300,8 @@ rustc_queries! {\n         desc { \"traits in scope at a block\" }\n     }\n \n-    query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export]> {\n-        desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+    query module_reexports(def_id: LocalDefId) -> Option<&'tcx [ModChild]> {\n+        desc { |tcx| \"looking up reexports of module `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n@@ -1528,8 +1528,8 @@ rustc_queries! {\n         desc { \"fetching what a crate is named\" }\n         separate_provide_extern\n     }\n-    query module_children(def_id: DefId) -> &'tcx [Export] {\n-        desc { |tcx| \"collecting child items of `{}`\", tcx.def_path_str(def_id) }\n+    query module_children(def_id: DefId) -> &'tcx [ModChild] {\n+        desc { |tcx| \"collecting child items of module `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {"}, {"sha": "86ad573b5d748dadbf591df77e6457b987e76e85", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -2820,7 +2820,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.in_scope_traits_map =\n         |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);\n     providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n-    providers.module_exports = |tcx, id| tcx.resolutions(()).export_map.get(&id).map(|v| &v[..]);\n+    providers.module_reexports =\n+        |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name"}, {"sha": "f5f55dcf38cf4efb186221aedf669276d1b76f64", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -19,7 +19,7 @@ pub use assoc::*;\n pub use generics::*;\n pub use vtable::*;\n \n-use crate::hir::exports::ExportMap;\n+use crate::metadata::ModChild;\n use crate::mir::{Body, GeneratorLayout};\n use crate::traits::{self, Reveal};\n use crate::ty;\n@@ -126,7 +126,7 @@ pub struct ResolverOutputs {\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n-    pub export_map: ExportMap,\n+    pub reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "4a38d1c422f923b64c1807642e21fb9aff01186c", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -1,7 +1,7 @@\n use crate::dep_graph;\n-use crate::hir::exports::Export;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n+use crate::metadata::ModChild;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lib_features::LibFeatures;"}, {"sha": "16418e627f2dcf994c637da1d1d792fa3326e544", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -520,7 +520,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.visibility(item_id.def_id);\n             self.update_macro_reachable_def(item_id.def_id, def_kind, vis, defining_mod);\n         }\n-        if let Some(exports) = self.tcx.module_exports(module_def_id) {\n+        if let Some(exports) = self.tcx.module_reexports(module_def_id) {\n             for export in exports {\n                 if export.vis.is_accessible_from(defining_mod.to_def_id(), self.tcx) {\n                     if let Res::Def(def_kind, def_id) = export.res {\n@@ -926,7 +926,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n             let def_id = self.tcx.hir().local_def_id(id);\n-            if let Some(exports) = self.tcx.module_exports(def_id) {\n+            if let Some(exports) = self.tcx.module_reexports(def_id) {\n                 for export in exports.iter() {\n                     if export.vis.is_public() {\n                         if let Some(def_id) = export.res.opt_def_id() {"}, {"sha": "944e71851840cfacda90f818fe7970590e25aedc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -26,7 +26,7 @@ use rustc_hir::def::{self, *};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::bug;\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::ty;\n use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n@@ -938,9 +938,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_res(&mut self, child: Export) {\n+    fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {\n         let parent = self.parent_scope.module;\n-        let Export { ident, res, vis, span } = child;\n+        let ModChild { ident, res, vis, span } = child;\n         let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions."}, {"sha": "2832f59a5efc68340635b16672de6aad0f1c9e63", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n@@ -1409,7 +1409,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             if is_good_import || binding.is_macro_def() {\n                 let res = binding.res().expect_non_local();\n                 if res != def::Res::Err {\n-                    reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n+                    reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });\n                 }\n             }\n         });\n@@ -1418,7 +1418,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             if let Some(def_id) = module.opt_def_id() {\n                 // Call to `expect_local` should be fine because current\n                 // code is only called for local modules.\n-                self.r.export_map.insert(def_id.expect_local(), reexports);\n+                self.r.reexport_map.insert(def_id.expect_local(), reexports);\n             }\n         }\n     }"}, {"sha": "37be0e228d27ade0f3e022cc04e4a5b2cb5cbe38", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -49,7 +49,7 @@ use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n-use rustc_middle::hir::exports::ExportMap;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n@@ -927,7 +927,7 @@ pub struct Resolver<'a> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    export_map: ExportMap,\n+    reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1333,7 +1333,7 @@ impl<'a> Resolver<'a> {\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n             extern_crate_map: Default::default(),\n-            export_map: FxHashMap::default(),\n+            reexport_map: FxHashMap::default(),\n             trait_map: NodeMap::default(),\n             underscore_disambiguator: 0,\n             empty_module,\n@@ -1446,7 +1446,7 @@ impl<'a> Resolver<'a> {\n         let definitions = self.definitions;\n         let visibilities = self.visibilities;\n         let extern_crate_map = self.extern_crate_map;\n-        let export_map = self.export_map;\n+        let reexport_map = self.reexport_map;\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n@@ -1457,7 +1457,7 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             visibilities,\n             extern_crate_map,\n-            export_map,\n+            reexport_map,\n             glob_map,\n             maybe_unused_trait_imports,\n             maybe_unused_extern_crates,\n@@ -1480,7 +1480,7 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.cstore().clone()),\n             visibilities: self.visibilities.clone(),\n             extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self.export_map.clone(),\n+            reexport_map: self.reexport_map.clone(),\n             glob_map: self.glob_map.clone(),\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),"}, {"sha": "6f1736afc3bdc510915bc09033a52e0844c2d212", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b03fd910c4d963a369baa3e38c9a7713c04a79c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b03fd910c4d963a369baa3e38c9a7713c04a79c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4b03fd910c4d963a369baa3e38c9a7713c04a79c", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_exports(CRATE_DEF_ID).unwrap_or(&[]) {\n+        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n             if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n                 if let Some(local_def_id) = def_id.as_local() {\n                     if self.cx.tcx.has_attr(def_id, sym::macro_export) {"}]}