{"sha": "a8c152dfc921e8ec2c00f65e7c731197e522a96d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YzE1MmRmYzkyMWU4ZWMyYzAwZjY1ZTdjNzMxMTk3ZTUyMmE5NmQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-09T20:01:15Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-09T20:02:36Z"}, "message": "add regression tests + improve method name", "tree": {"sha": "03be495a3e80958ed6bde56f068461abb45c730d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03be495a3e80958ed6bde56f068461abb45c730d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c152dfc921e8ec2c00f65e7c731197e522a96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c152dfc921e8ec2c00f65e7c731197e522a96d", "html_url": "https://github.com/rust-lang/rust/commit/a8c152dfc921e8ec2c00f65e7c731197e522a96d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c152dfc921e8ec2c00f65e7c731197e522a96d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3", "html_url": "https://github.com/rust-lang/rust/commit/7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "dfffdbedf4ca46541f63d2d336c3470b79c891f4", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8c152dfc921e8ec2c00f65e7c731197e522a96d/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c152dfc921e8ec2c00f65e7c731197e522a96d/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=a8c152dfc921e8ec2c00f65e7c731197e522a96d", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         // trait selection is because we don't have enough\n                         // information about the types in the trait.\n                         pending_obligation.stalled_on =\n-                            trait_ref_type_vars(self.selcx, data.to_poly_trait_ref());\n+                            trait_ref_infer_vars(self.selcx, data.to_poly_trait_ref());\n \n                         debug!(\n                             \"process_predicate: pending obligation {:?} now stalled on {:?}\",\n@@ -433,7 +433,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     Ok(None) => {\n                         let tcx = self.selcx.tcx();\n                         pending_obligation.stalled_on =\n-                            trait_ref_type_vars(self.selcx, data.to_poly_trait_ref(tcx));\n+                            trait_ref_infer_vars(self.selcx, data.to_poly_trait_ref(tcx));\n                         ProcessResult::Unchanged\n                     }\n                     Ok(Some(os)) => ProcessResult::Changed(mk_pending(infcx, os)),\n@@ -539,8 +539,8 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     }\n }\n \n-/// Returns the set of type inference variables contained in a trait ref.\n-fn trait_ref_type_vars<'a, 'tcx>(\n+/// Returns the set of inference variables contained in a trait ref.\n+fn trait_ref_infer_vars<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> Vec<TyOrConstInferVar<'tcx>> {"}, {"sha": "ff2a5250263d5585a73120f8834b2062b7d16e2b", "filename": "src/test/ui/const-generics/issue-70180-1-stalled_on.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8c152dfc921e8ec2c00f65e7c731197e522a96d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c152dfc921e8ec2c00f65e7c731197e522a96d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs?ref=a8c152dfc921e8ec2c00f65e7c731197e522a96d", "patch": "@@ -0,0 +1,35 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub fn works() {\n+    let array/*: [_; _]*/ = default_array();\n+    let _: [_; 4] = array;\n+    Foo::foo(&array);\n+}\n+\n+pub fn didnt_work() {\n+    let array/*: [_; _]*/ = default_array();\n+    Foo::foo(&array);\n+    let _: [_; 4] = array;\n+}\n+\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+impl Foo for [i32; 4] {}\n+impl Foo for [i64; 8] {}\n+\n+// Only needed because `[_; _]` is not valid type syntax.\n+fn default_array<T, const N: usize>() -> [T; N]\n+where\n+    [T; N]: Default,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    works();\n+    didnt_work();\n+}"}, {"sha": "83338668f4ffde204681938230d23def9e833184", "filename": "src/test/ui/const-generics/issue-70180-2-stalled_on.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8c152dfc921e8ec2c00f65e7c731197e522a96d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c152dfc921e8ec2c00f65e7c731197e522a96d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs?ref=a8c152dfc921e8ec2c00f65e7c731197e522a96d", "patch": "@@ -0,0 +1,35 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn works() {\n+    let array/*: [u8; _]*/ = default_byte_array();\n+    let _: [_; 4] = array;\n+    Foo::foo(&array);\n+}\n+\n+fn didnt_work() {\n+    let array/*: [u8; _]*/ = default_byte_array();\n+    Foo::foo(&array);\n+    let _: [_; 4] = array;\n+}\n+\n+trait Foo<T> {\n+    fn foo(&self) {}\n+}\n+\n+impl Foo<i32> for [u8; 4] {}\n+impl Foo<i64> for [u8; 8] {}\n+\n+// Only needed because `[u8; _]` is not valid type syntax.\n+fn default_byte_array<const N: usize>() -> [u8; N]\n+where\n+    [u8; N]: Default,\n+{\n+    Default::default()\n+}\n+\n+fn main() {\n+    works();\n+    didnt_work();\n+}"}]}