{"sha": "34ed8918959ab2ed3a4e9bb5794d6667a2f594e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZWQ4OTE4OTU5YWIyZWQzYTRlOWJiNTc5NGQ2NjY3YTJmNTk0ZTU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-15T23:32:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-20T19:18:20Z"}, "message": "Fix pop_stack_frame logic", "tree": {"sha": "e82888c4fed2e64910232574a21e07ba9a01a8ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e82888c4fed2e64910232574a21e07ba9a01a8ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ed8918959ab2ed3a4e9bb5794d6667a2f594e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ed8918959ab2ed3a4e9bb5794d6667a2f594e5", "html_url": "https://github.com/rust-lang/rust/commit/34ed8918959ab2ed3a4e9bb5794d6667a2f594e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ed8918959ab2ed3a4e9bb5794d6667a2f594e5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a417f963fe58e2f6ba5e93be7fa960afa238720c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a417f963fe58e2f6ba5e93be7fa960afa238720c", "html_url": "https://github.com/rust-lang/rust/commit/a417f963fe58e2f6ba5e93be7fa960afa238720c"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "d92c37b7debfe052cf7ef2096bc585ac76cec8fd", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34ed8918959ab2ed3a4e9bb5794d6667a2f594e5/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ed8918959ab2ed3a4e9bb5794d6667a2f594e5/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=34ed8918959ab2ed3a4e9bb5794d6667a2f594e5", "patch": "@@ -724,10 +724,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let frame =\n             self.stack_mut().pop().expect(\"tried to pop a stack frame, but there were none\");\n \n-        if let Some(return_place) = frame.return_place {\n+        if !unwinding {\n             // Copy the return value to the caller's stack frame.\n-            let op = self.access_local(&frame, mir::RETURN_PLACE, None)?;\n-            self.copy_op(op, return_place)?;\n+            if let Some(return_place) = frame.return_place {\n+                let op = self.access_local(&frame, mir::RETURN_PLACE, None)?;\n+                self.copy_op(op, return_place)?;\n+            } else {\n+                throw_ub!(Unreachable);\n+            }\n         }\n \n         // Now where do we jump next?\n@@ -768,25 +772,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.unwind_to_block(unwind);\n         } else {\n             // Follow the normal return edge.\n-            // Validate the return value. Do this after deallocating so that we catch dangling\n-            // references.\n-            if let Some(return_place) = return_place {\n-                if M::enforce_validity(self) {\n-                    // Data got changed, better make sure it matches the type!\n-                    // It is still possible that the return place held invalid data while\n-                    // the function is running, but that's okay because nobody could have\n-                    // accessed that same data from the \"outside\" to observe any broken\n-                    // invariant -- that is, unless a function somehow has a ptr to\n-                    // its return place... but the way MIR is currently generated, the\n-                    // return place is always a local and then this cannot happen.\n-                    self.validate_operand(self.place_to_op(return_place)?)?;\n-                }\n-            } else {\n-                // Uh, that shouldn't happen... the function did not intend to return\n-                throw_ub!(Unreachable);\n-            }\n-\n-            // Jump to new block -- *after* validation so that the spans make more sense.\n             if let Some(ret) = next_block {\n                 self.return_to_block(ret)?;\n             }"}]}