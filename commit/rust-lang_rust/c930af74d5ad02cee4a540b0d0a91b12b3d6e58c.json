{"sha": "c930af74d5ad02cee4a540b0d0a91b12b3d6e58c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MzBhZjc0ZDVhZDAyY2VlNGE1NDBiMGQwYTkxYjEyYjNkNmU1OGM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T10:03:11Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T12:05:54Z"}, "message": "Write call_copy_glue", "tree": {"sha": "6cd27f507320fcc543ad8606d71bc67dc0e85b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd27f507320fcc543ad8606d71bc67dc0e85b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c930af74d5ad02cee4a540b0d0a91b12b3d6e58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c930af74d5ad02cee4a540b0d0a91b12b3d6e58c", "html_url": "https://github.com/rust-lang/rust/commit/c930af74d5ad02cee4a540b0d0a91b12b3d6e58c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c930af74d5ad02cee4a540b0d0a91b12b3d6e58c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5e4c21ee1355603bea8c6b478678a51b45b277", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5e4c21ee1355603bea8c6b478678a51b45b277", "html_url": "https://github.com/rust-lang/rust/commit/cd5e4c21ee1355603bea8c6b478678a51b45b277"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "0b62c68563860a90ad3e849218664c3820e0f348", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c930af74d5ad02cee4a540b0d0a91b12b3d6e58c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c930af74d5ad02cee4a540b0d0a91b12b3d6e58c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c930af74d5ad02cee4a540b0d0a91b12b3d6e58c", "patch": "@@ -1186,7 +1186,7 @@ fn make_generic_glue_inner(cx: &@local_ctxt, sp: &span, t: &ty::t,\n         helper(bcx, llval0, t);\n       }\n       copy_helper(helper) {\n-        let llrawptr1 = llvm::LLVMGetParam(llfn, 4u);\n+        let llrawptr1 = llvm::LLVMGetParam(llfn, 5u);\n         let llval1 = bcx.build.BitCast(llrawptr1, llty);\n         helper(bcx, llval0, llval1, t);\n       }\n@@ -2178,6 +2178,45 @@ fn call_cmp_glue(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: &ty::t,\n     ret rslt(r.bcx, r.bcx.build.Load(llcmpresultptr));\n }\n \n+fn call_copy_glue(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: &ty::t,\n+                  take: bool) -> @block_ctxt {\n+    // You can't call this on immediate types. Those are simply copied with\n+    // Load/Store.\n+    assert !type_is_immediate(bcx_ccx(cx), t);\n+    let srcptr = cx.build.BitCast(src, T_ptr(T_i8()));\n+    let dstptr = cx.build.BitCast(dst, T_ptr(T_i8()));\n+    let ti = none;\n+    let {bcx, val: lltydesc} = get_tydesc(cx, t, false, ti).result;\n+    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, ti);\n+    let lltydescs = bcx.build.GEP\n+        (lltydesc, [C_int(0), C_int(abi::tydesc_field_first_param)]);\n+    lltydescs = bcx.build.Load(lltydescs);\n+\n+    let llfn = alt ti {\n+      none. {\n+        bcx.build.Load(bcx.build.GEP\n+            (lltydesc, [C_int(0), C_int(abi::tydesc_field_copy_glue)]))\n+      }\n+      some(sti) { option::get(sti.copy_glue) }\n+    };\n+    bcx.build.Call(llfn, [C_null(T_ptr(T_nil())), bcx.fcx.lltaskptr,\n+                          C_null(T_ptr(T_nil())), lltydescs, srcptr, dstptr]);\n+    if take {\n+        lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, ti);\n+        llfn = alt ti {\n+          none. {\n+            bcx.build.Load(bcx.build.GEP\n+                (lltydesc, [C_int(0), C_int(abi::tydesc_field_take_glue)]))\n+          }\n+          some(sti) { option::get(sti.take_glue) }\n+        };\n+        bcx.build.Call(llfn, [C_null(T_ptr(T_nil())), bcx.fcx.lltaskptr,\n+                              C_null(T_ptr(T_nil())), lltydescs, dstptr]);\n+    }\n+    ret bcx;\n+}\n+\n+\n // Compares two values. Performs the simple scalar comparison if the types are\n // scalar and calls to comparison glue otherwise.\n fn compare(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: &ty::t,"}]}