{"sha": "54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjQ3MjdmYTNhNDYyOGJhYzZhMjlmYzBiMzAzNGRhOGM1ODI0YzA=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-01T19:19:19Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T19:19:03Z"}, "message": "7708: Added the work for review comments.\n\nAlso added 1 test case to test multiple struct blocks are present.", "tree": {"sha": "f3eb5832b0e0f6d06998671ae66463a070dd4bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3eb5832b0e0f6d06998671ae66463a070dd4bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "html_url": "https://github.com/rust-lang/rust/commit/54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b4727fa3a4628bac6a29fc0b3034da8c5824c0/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135c9e2027583181e89c696385c24af89127c7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/135c9e2027583181e89c696385c24af89127c7a4", "html_url": "https://github.com/rust-lang/rust/commit/135c9e2027583181e89c696385c24af89127c7a4"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "b4f80fec9e7478b4411557c53c49e3185da3b525", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 60, "deletions": 31, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/54b4727fa3a4628bac6a29fc0b3034da8c5824c0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b4727fa3a4628bac6a29fc0b3034da8c5824c0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "patch": "@@ -1,10 +1,10 @@\n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    utils, AssistId,\n };\n use syntax::{\n-    ast::{self, NameOwner},\n-    AstNode, SyntaxKind, SyntaxNode, SyntaxText,\n+    ast::{self, Adt, Impl, NameOwner},\n+    AstNode, Direction,\n };\n use test_utils::mark;\n \n@@ -38,54 +38,50 @@ use test_utils::mark;\n // }\n // ```\n pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let fn_node: ast::Fn = ctx.find_node_at_offset()?;\n-    let fn_name = fn_node.name()?.to_string();\n+    let fn_node = ctx.find_node_at_offset::<ast::Fn>()?;\n+    let fn_name = fn_node.name()?;\n \n-    if !fn_name.eq(\"new\") {\n+    if fn_name.text() != \"new\" {\n         mark::hit!(other_function_than_new);\n         return None;\n     }\n \n-    if fn_node.param_list()?.params().count() != 0 {\n+    if fn_node.param_list()?.params().next().is_some() {\n         mark::hit!(new_function_with_parameters);\n         return None;\n     }\n \n-    let insert_after = scope_for_fn_insertion_node(&fn_node.syntax())?;\n-    let impl_obj = ast::Impl::cast(insert_after)?;\n-    let struct_name = impl_obj.self_ty()?.syntax().text();\n+    let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n \n-    let default_fn_syntax = default_fn_node_for_new(struct_name);\n+    let insert_location = impl_.syntax().text_range();\n \n     acc.add(\n         AssistId(\"generate_default_from_new\", crate::AssistKind::Generate),\n         \"Generate a Default impl from a new fn\",\n-        impl_obj.syntax().text_range(),\n+        insert_location,\n         move |builder| {\n-            // FIXME: indentation logic can also go here.\n-            // let new_indent = IndentLevel::from_node(&insert_after);\n-            let insert_location = impl_obj.syntax().text_range().end();\n-            builder.insert(insert_location, default_fn_syntax);\n+            let default_fn_syntax = default_fn_node_for_new(impl_);\n+            if let Some(code) = default_fn_syntax {\n+                builder.insert(insert_location.end(), code)\n+            }\n         },\n     )\n }\n \n-fn scope_for_fn_insertion_node(node: &SyntaxNode) -> Option<SyntaxNode> {\n-    node.ancestors().into_iter().find(|node| node.kind() == SyntaxKind::IMPL)\n-}\n-\n-fn default_fn_node_for_new(struct_name: SyntaxText) -> String {\n-    // FIXME: Update the implementation to consider the code indentation.\n-    format!(\n-        r#\"\n-\n-impl Default for {} {{\n-    fn default() -> Self {{\n+fn default_fn_node_for_new(impl_: Impl) -> Option<String> {\n+    // the code string is this way due to formatting reason\n+    let code = r#\"    fn default() -> Self {\n         Self::new()\n-    }}\n-}}\"#,\n-        struct_name\n-    )\n+    }\"#;\n+    let struct_name = impl_.self_ty()?.syntax().to_string();\n+    let struct_ = impl_\n+        .syntax()\n+        .siblings(Direction::Prev)\n+        .filter_map(ast::Struct::cast)\n+        .find(|struct_| struct_.name().unwrap().text() == struct_name)?;\n+\n+    let adt = Adt::cast(struct_.syntax().clone())?;\n+    Some(utils::generate_trait_impl_text(&adt, \"Default\", code))\n }\n \n #[cfg(test)]\n@@ -224,6 +220,39 @@ impl Exmaple {\n fn n$0ew() -> u32 {\n     0\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_struct_blocks() {\n+        check_assist(\n+            generate_default_from_new,\n+            r#\"\n+struct Example { _inner: () }\n+struct Test { value: u32 }\n+\n+impl Example {\n+    pub fn new$0 () -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Example { _inner: () }\n+struct Test { value: u32 }\n+\n+impl Example {\n+    pub fn new () -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n \"#,\n         );\n     }"}]}