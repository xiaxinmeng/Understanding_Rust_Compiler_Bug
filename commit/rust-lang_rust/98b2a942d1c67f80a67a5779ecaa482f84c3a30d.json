{"sha": "98b2a942d1c67f80a67a5779ecaa482f84c3a30d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YjJhOTQyZDFjNjdmODBhNjdhNTc3OWVjYWE0ODJmODRjM2EzMGQ=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-09T17:54:54Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-14T00:01:46Z"}, "message": "vscode-prerefactor: add some utility functions", "tree": {"sha": "e5cfafdaa7dcc537851bc7c4db3ae9d4967553f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5cfafdaa7dcc537851bc7c4db3ae9d4967553f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98b2a942d1c67f80a67a5779ecaa482f84c3a30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98b2a942d1c67f80a67a5779ecaa482f84c3a30d", "html_url": "https://github.com/rust-lang/rust/commit/98b2a942d1c67f80a67a5779ecaa482f84c3a30d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98b2a942d1c67f80a67a5779ecaa482f84c3a30d/comments", "author": null, "committer": null, "parents": [{"sha": "8203828bb081faae4cd9d39c8abe6bc073138176", "url": "https://api.github.com/repos/rust-lang/rust/commits/8203828bb081faae4cd9d39c8abe6bc073138176", "html_url": "https://github.com/rust-lang/rust/commit/8203828bb081faae4cd9d39c8abe6bc073138176"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "2bfc145e6fe574dda566c93eef93244e537e4d97", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/98b2a942d1c67f80a67a5779ecaa482f84c3a30d/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98b2a942d1c67f80a67a5779ecaa482f84c3a30d/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=98b2a942d1c67f80a67a5779ecaa482f84c3a30d", "patch": "@@ -1,5 +1,6 @@\n import * as lc from \"vscode-languageclient\";\n import * as vscode from \"vscode\";\n+import { promises as dns } from \"dns\";\n import { strict as nativeAssert } from \"assert\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n@@ -11,21 +12,40 @@ export function assert(condition: boolean, explanation: string): asserts conditi\n     }\n }\n \n-export const log = {\n-    enabled: true,\n+export const log = new class {\n+    private enabled = true;\n+\n+    setEnabled(yes: boolean): void {\n+        log.enabled = yes;\n+    }\n+\n     debug(message?: any, ...optionalParams: any[]): void {\n         if (!log.enabled) return;\n         // eslint-disable-next-line no-console\n         console.log(message, ...optionalParams);\n-    },\n+    }\n+\n     error(message?: any, ...optionalParams: any[]): void {\n         if (!log.enabled) return;\n         debugger;\n         // eslint-disable-next-line no-console\n         console.error(message, ...optionalParams);\n-    },\n-    setEnabled(yes: boolean): void {\n-        log.enabled = yes;\n+    }\n+\n+    downloadError(err: Error, artifactName: string, repoName: string) {\n+        vscode.window.showErrorMessage(\n+            `Failed to download the rust-analyzer ${artifactName} from ${repoName} ` +\n+            `GitHub repository: ${err.message}`\n+        );\n+        log.error(err);\n+        dns.resolve('example.com').then(\n+            addrs => log.debug(\"DNS resolution for example.com was successful\", addrs),\n+            err => log.error(\n+                \"DNS resolution for example.com failed, \" +\n+                \"there might be an issue with Internet availability\",\n+                err\n+            )\n+        );\n     }\n };\n \n@@ -66,6 +86,17 @@ function sleep(ms: number) {\n     return new Promise(resolve => setTimeout(resolve, ms));\n }\n \n+export function notReentrant<TThis, TParams extends any[], TRet>(\n+    fn: (this: TThis, ...params: TParams) => Promise<TRet>\n+): typeof fn {\n+    let entered = false;\n+    return function(...params) {\n+        assert(!entered, `Reentrancy invariant for ${fn.name} is violated`);\n+        entered = true;\n+        return fn.apply(this, params).finally(() => entered = false);\n+    };\n+}\n+\n export type RustDocument = vscode.TextDocument & { languageId: \"rust\" };\n export type RustEditor = vscode.TextEditor & { document: RustDocument; id: string };\n \n@@ -79,3 +110,29 @@ export function isRustDocument(document: vscode.TextDocument): document is RustD\n export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n     return isRustDocument(editor.document);\n }\n+\n+/**\n+ * @param extensionId The canonical extension identifier in the form of: `publisher.name`\n+ */\n+export async function vscodeReinstallExtension(extensionId: string) {\n+    // Unfortunately there is no straightforward way as of now, these commands\n+    // were found in vscode source code.\n+\n+    log.debug(\"Uninstalling extension\", extensionId);\n+    await vscode.commands.executeCommand(\"workbench.extensions.uninstallExtension\", extensionId);\n+    log.debug(\"Installing extension\", extensionId);\n+    await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", extensionId);\n+}\n+\n+export async function vscodeReloadWindow(): Promise<never> {\n+    await vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n+\n+    assert(false, \"unreachable\");\n+}\n+\n+export async function vscodeInstallExtensionFromVsix(vsixPath: string) {\n+    await vscode.commands.executeCommand(\n+        \"workbench.extensions.installExtension\",\n+        vscode.Uri.file(vsixPath)\n+    );\n+}"}]}