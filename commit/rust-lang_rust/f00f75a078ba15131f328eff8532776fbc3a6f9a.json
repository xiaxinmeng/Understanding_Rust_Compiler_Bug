{"sha": "f00f75a078ba15131f328eff8532776fbc3a6f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMGY3NWEwNzhiYTE1MTMxZjMyOGVmZjg1MzI3NzZmYmMzYTZmOWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:01:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:01:31Z"}, "message": "Document `make` module design", "tree": {"sha": "9c4bc9f3b612f082db3d10690fff7d5d1e407d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4bc9f3b612f082db3d10690fff7d5d1e407d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f00f75a078ba15131f328eff8532776fbc3a6f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f00f75a078ba15131f328eff8532776fbc3a6f9a", "html_url": "https://github.com/rust-lang/rust/commit/f00f75a078ba15131f328eff8532776fbc3a6f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f00f75a078ba15131f328eff8532776fbc3a6f9a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a28751611e564eb4cdde28ca953407f551b696", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a28751611e564eb4cdde28ca953407f551b696", "html_url": "https://github.com/rust-lang/rust/commit/85a28751611e564eb4cdde28ca953407f551b696"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "cafa4c198923f393ac3d12d0ccac0e1fb036b2a2", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f00f75a078ba15131f328eff8532776fbc3a6f9a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00f75a078ba15131f328eff8532776fbc3a6f9a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=f00f75a078ba15131f328eff8532776fbc3a6f9a", "patch": "@@ -4,6 +4,11 @@\n //! Note that all functions here intended to be stupid constructors, which just\n //! assemble a finish node from immediate children. If you want to do something\n //! smarter than that, it probably doesn't belong in this module.\n+//!\n+//! Keep in mind that `from_text` functions should be kept private. The public\n+//! API should require to assemble every node piecewise. The trick of\n+//! `parse(format!())` we use internally is an implementation detail -- long\n+//! term, it will be replaced with direct tree manipulation.\n use itertools::Itertools;\n use stdx::format_to;\n \n@@ -16,7 +21,8 @@ pub fn name(text: &str) -> ast::Name {\n pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n-\n+// FIXME: replace stringly-typed constructor with a family of typed ctors, a-la\n+// `expr_xxx`.\n pub fn ty(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"impl {} for D {{}};\", text))\n }"}]}