{"sha": "d49a8d558f20a753b13c1c9f10c1f63775399f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OWE4ZDU1OGYyMGE3NTNiMTNjMWM5ZjEwYzFmNjM3NzUzOTlmN2Q=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-30T02:57:30Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-30T15:42:43Z"}, "message": "Removed feature gate.", "tree": {"sha": "ead90cc0867882e13575932692df69045d3097e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead90cc0867882e13575932692df69045d3097e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49a8d558f20a753b13c1c9f10c1f63775399f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49a8d558f20a753b13c1c9f10c1f63775399f7d", "html_url": "https://github.com/rust-lang/rust/commit/d49a8d558f20a753b13c1c9f10c1f63775399f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49a8d558f20a753b13c1c9f10c1f63775399f7d/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f19cdc4f87be3bf6391264ef41264bdd3d0d370", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f19cdc4f87be3bf6391264ef41264bdd3d0d370", "html_url": "https://github.com/rust-lang/rust/commit/5f19cdc4f87be3bf6391264ef41264bdd3d0d370"}], "stats": {"total": 145, "additions": 7, "deletions": 138}, "files": [{"sha": "b4742c48a32ff7f13f26d536a2677b031f94a882", "filename": "src/doc/unstable-book/src/language-features/self-struct-ctor.md", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5f19cdc4f87be3bf6391264ef41264bdd3d0d370/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f19cdc4f87be3bf6391264ef41264bdd3d0d370/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md?ref=5f19cdc4f87be3bf6391264ef41264bdd3d0d370", "patch": "@@ -1,33 +0,0 @@\n-# `self_struct_ctor`\n-\n-The tracking issue for this feature is: [#51994]\n-[#51994]: https://github.com/rust-lang/rust/issues/51994\n-\n-------------------------\n-\n-The `self_struct_ctor` feature gate lets you use the special `Self`\n-identifier as a constructor and a pattern.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(self_struct_ctor)]\n-\n-struct ST(i32, i32);\n-\n-impl ST {\n-    fn new() -> Self {\n-        ST(0, 1)\n-    }\n-\n-    fn ctor() -> Self {\n-        Self(1,2)           // constructed by `Self`, it is the same as `ST(1, 2)`\n-    }\n-\n-    fn pattern(self) {\n-        match self {\n-            Self(x, y) => println!(\"{} {}\", x, y), // used as a pattern\n-        }\n-    }\n-}\n-```"}, {"sha": "dc8baa112bb59a79ec38d1dbb81a6dc8369bd822", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -67,7 +67,6 @@ use syntax::ast;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n@@ -3628,7 +3627,6 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::TupleStruct(\n                     qpath,\n                     pats.iter().map(|x| self.lower_pat(x)).collect(),\n@@ -3643,7 +3641,6 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::Path(qpath)\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {\n@@ -4039,7 +4036,6 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                self.check_self_struct_ctor_feature(&qpath);\n                 hir::ExprKind::Path(qpath)\n             }\n             ExprKind::Break(opt_label, ref opt_expr) => {\n@@ -5102,18 +5098,6 @@ impl<'a> LoweringContext<'a> {\n                                             ThinVec::new()));\n         P(self.expr_call(e.span, from_err, hir_vec![e]))\n     }\n-\n-    fn check_self_struct_ctor_feature(&self, qp: &hir::QPath) {\n-        if let hir::QPath::Resolved(_, ref p) = qp {\n-            if p.segments.len() == 1 &&\n-               p.segments[0].ident.name == keywords::SelfType.name() &&\n-               !self.sess.features_untracked().self_struct_ctor {\n-                emit_feature_err(&self.sess.parse_sess, \"self_struct_ctor\",\n-                                 p.span, GateIssue::Language,\n-                                 \"`Self` struct constructors are unstable\");\n-            }\n-        }\n-    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {"}, {"sha": "0d8f45433e4c76ca7a1d1128c0d5c38ecfd0b192", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -475,9 +475,6 @@ declare_features! (\n     // Non-builtin attributes in inner attribute position\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    // Self struct constructor  (RFC 2302)\n-    (active, self_struct_ctor, \"1.30.0\", Some(51994), None),\n-\n     // allow mixing of bind-by-move in patterns and references to\n     // those identifiers in guards, *if* we are using MIR-borrowck\n     // (aka NLL). Essentially this means you need to be on\n@@ -688,9 +685,11 @@ declare_features! (\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n+    // Self struct constructor  (RFC 2302)\n+    (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n );\n \n-// If you change this, please modify src/doc/unstable-book as well. You must\n+// If you change this, please modify `src/doc/unstable-book` as well. You must\n // move that documentation into the relevant place in the other docs, and\n // remove the chapter on the flag.\n "}, {"sha": "1ec20c50034bdc4bfe5b0af0b620885349a14cd1", "filename": "src/test/run-pass/rfcs/rfc-2302-self-struct-ctor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(self_struct_ctor)]\n-\n #![allow(dead_code)]\n \n use std::fmt::Display;"}, {"sha": "98eab3949132046005f628d9dc0dd95455c91a21", "filename": "src/test/ui/feature-gates/feature-gate-self-struct-ctor.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f19cdc4f87be3bf6391264ef41264bdd3d0d370/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f19cdc4f87be3bf6391264ef41264bdd3d0d370/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs?ref=5f19cdc4f87be3bf6391264ef41264bdd3d0d370", "patch": "@@ -1,22 +0,0 @@\n-struct ST1(i32, i32);\n-\n-impl ST1 {\n-    fn ctor() -> Self {\n-        Self(1,2)\n-        //~^ ERROR: `Self` struct constructors are unstable (see issue #51994) [E0658]\n-    }\n-}\n-\n-struct ST2;\n-\n-impl ST2 {\n-    fn ctor() -> Self {\n-        Self\n-        //~^ ERROR: `Self` struct constructors are unstable (see issue #51994) [E0658]\n-    }\n-}\n-\n-fn main() {\n-    let _ = ST1::ctor();\n-    let _ = ST2::ctor();\n-}"}, {"sha": "6061a0db76ec54a38f31f07300b80456072915a6", "filename": "src/test/ui/feature-gates/feature-gate-self-struct-ctor.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f19cdc4f87be3bf6391264ef41264bdd3d0d370/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f19cdc4f87be3bf6391264ef41264bdd3d0d370/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr?ref=5f19cdc4f87be3bf6391264ef41264bdd3d0d370", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/feature-gate-self-struct-ctor.rs:5:9\n-   |\n-LL |         Self(1,2)\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/feature-gate-self-struct-ctor.rs:14:9\n-   |\n-LL |         Self\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bd222b7fe980ed64acc1101c8ac92c62a8d6ac46", "filename": "src/test/ui/issues/issue-56202.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fissues%2Fissue-56202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fissues%2Fissue-56202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56202.rs?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(self_struct_ctor)]\n-\n trait FooTrait {}\n \n trait BarTrait {"}, {"sha": "b50fc68bed6be587c24f1d525165931dfd543fb6", "filename": "src/test/ui/keyword/keyword-self-as-identifier.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -10,5 +10,4 @@\n \n fn main() {\n     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-        //~^ ERROR `Self` struct constructors are unstable (see issue #51994)\n }"}, {"sha": "dbb106e8d53a536fbd1d726d39f2807457fae508", "filename": "src/test/ui/keyword/keyword-self-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -4,15 +4,7 @@ error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n LL |     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n    |         ^^^^ not found in this scope\n \n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/keyword-self-as-identifier.rs:12:9\n-   |\n-LL |     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to 1 previous error\n \n Some errors occurred: E0531, E0658.\n For more information about an error, try `rustc --explain E0531`."}, {"sha": "8331ae0b307d95ebd222685fdf2147be7be246c8", "filename": "src/test/ui/self/self_type_keyword-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -13,14 +13,11 @@ use self::Self as Foo; //~ ERROR unresolved import `self::Self`\n pub fn main() {\n     let Self = 5;\n     //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-    //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n \n     match 15 {\n         Self => (),\n         //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-        //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n         Foo { x: Self } => (),\n         //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n-        //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n     }\n }"}, {"sha": "3a2e9bb9c9c834082ba8ff81a5d6647d6354c190", "filename": "src/test/ui/self/self_type_keyword-2.stderr", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d49a8d558f20a753b13c1c9f10c1f63775399f7d/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr?ref=d49a8d558f20a753b13c1c9f10c1f63775399f7d", "patch": "@@ -11,42 +11,18 @@ LL |     let Self = 5;\n    |         ^^^^ not found in this scope\n \n error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n-  --> $DIR/self_type_keyword-2.rs:19:9\n+  --> $DIR/self_type_keyword-2.rs:18:9\n    |\n LL |         Self => (),\n    |         ^^^^ not found in this scope\n \n error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n-  --> $DIR/self_type_keyword-2.rs:22:18\n+  --> $DIR/self_type_keyword-2.rs:20:18\n    |\n LL |         Foo { x: Self } => (),\n    |                  ^^^^ not found in this scope\n \n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/self_type_keyword-2.rs:14:9\n-   |\n-LL |     let Self = 5;\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/self_type_keyword-2.rs:19:9\n-   |\n-LL |         Self => (),\n-   |         ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n-  --> $DIR/self_type_keyword-2.rs:22:18\n-   |\n-LL |         Foo { x: Self } => (),\n-   |                  ^^^^\n-   |\n-   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0432, E0531, E0658.\n For more information about an error, try `rustc --explain E0432`."}]}