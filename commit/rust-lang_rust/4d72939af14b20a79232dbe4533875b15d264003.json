{"sha": "4d72939af14b20a79232dbe4533875b15d264003", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzI5MzlhZjE0YjIwYTc5MjMyZGJlNDUzMzg3NWIxNWQyNjQwMDM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T20:39:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T20:39:46Z"}, "message": "Rollup merge of #77830 - cjgillot:remacro, r=oli-obk\n\nSimplify query proc-macros\n\nThe query code generation is split between proc-macros and regular macros in `rustc_middle::ty::query`.\n\nThis PR removes unused capabilities of the proc-macros, and tend to use regular macros for the logic.", "tree": {"sha": "4e420291b9152272b0397b37411f0a52940118a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e420291b9152272b0397b37411f0a52940118a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d72939af14b20a79232dbe4533875b15d264003", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflJESCRBK7hj4Ov3rIwAAdHIIAHhp8+uk46odGNNRq0rD8oOj\n9HThLuXDCrWRxas0lPEUpk0u8G1+z+mtFfuaWB1c11B5nh2+X1qjLdFyIvu3+U2l\nZsh/gOCIK0z6HwiieO5kUACUAkacL8b8ZovUS/n75M03jgMH14bC1sZ3s2O9HpYV\n5aYHQh51OiDd+ajyCyrnUoxnqf9DstfcXoe45dtSiHCxl3TOkddn8WVjsrzx3QhW\noxvl6vOkfI4GIr6FxcF91ahv4LzHZtDjXVcHhbshhfgWGw8PIM3owiEX4xGxVAzJ\nYcqEAceCLRcvAqSoq7yeEnLO7TouSuL8z3nFth5qQQJ0P/mjUZlgwAfjnh0ekW0=\n=WlTT\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e420291b9152272b0397b37411f0a52940118a2\nparent e34263d86a41dc896d025dc767c8d7c77afe219b\nparent 57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603571986 +0200\ncommitter GitHub <noreply@github.com> 1603571986 +0200\n\nRollup merge of #77830 - cjgillot:remacro, r=oli-obk\n\nSimplify query proc-macros\n\nThe query code generation is split between proc-macros and regular macros in `rustc_middle::ty::query`.\n\nThis PR removes unused capabilities of the proc-macros, and tend to use regular macros for the logic.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d72939af14b20a79232dbe4533875b15d264003", "html_url": "https://github.com/rust-lang/rust/commit/4d72939af14b20a79232dbe4533875b15d264003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d72939af14b20a79232dbe4533875b15d264003/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e34263d86a41dc896d025dc767c8d7c77afe219b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e34263d86a41dc896d025dc767c8d7c77afe219b", "html_url": "https://github.com/rust-lang/rust/commit/e34263d86a41dc896d025dc767c8d7c77afe219b"}, {"sha": "57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3", "html_url": "https://github.com/rust-lang/rust/commit/57ba8edb9eb7a805f63ab425fb5b1b7baa2e9fb3"}], "stats": {"total": 185, "additions": 72, "deletions": 113}, "files": [{"sha": "0ae3c75fcc2cbafd1364405568e907a75e2fd724", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=4d72939af14b20a79232dbe4533875b15d264003", "patch": "@@ -111,17 +111,6 @@ cfg_if! {\n \n type Profiler = measureme::Profiler<SerializationSink>;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd)]\n-pub enum ProfileCategory {\n-    Parsing,\n-    Expansion,\n-    TypeChecking,\n-    BorrowChecking,\n-    Codegen,\n-    Linking,\n-    Other,\n-}\n-\n bitflags::bitflags! {\n     struct EventFilter: u32 {\n         const GENERIC_ACTIVITIES = 1 << 0;"}, {"sha": "fd85919636949ac89760c4b4270b6b94449e613a", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 6, "deletions": 66, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=4d72939af14b20a79232dbe4533875b15d264003", "patch": "@@ -190,7 +190,11 @@ impl<T: Parse> Parse for List<T> {\n }\n \n /// A named group containing queries.\n+///\n+/// For now, the name is not used any more, but the capability remains interesting for future\n+/// developments of the query system.\n struct Group {\n+    #[allow(unused)]\n     name: Ident,\n     queries: List<Query>,\n }\n@@ -417,12 +421,9 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n     let mut dep_node_def_stream = quote! {};\n-    let mut dep_node_force_stream = quote! {};\n-    let mut try_load_from_on_disk_cache_stream = quote! {};\n     let mut cached_queries = quote! {};\n \n     for group in groups.0 {\n-        let mut group_stream = quote! {};\n         for mut query in group.queries.0 {\n             let modifiers = process_modifiers(&mut query);\n             let name = &query.name;\n@@ -437,22 +438,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 cached_queries.extend(quote! {\n                     #name,\n                 });\n-\n-                try_load_from_on_disk_cache_stream.extend(quote! {\n-                    ::rustc_middle::dep_graph::DepKind::#name => {\n-                        if <#arg as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n-                            debug_assert!($tcx.dep_graph\n-                                            .node_color($dep_node)\n-                                            .map(|c| c.is_green())\n-                                            .unwrap_or(false));\n-\n-                            let key = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node).unwrap();\n-                            if queries::#name::cache_on_disk($tcx, &key, None) {\n-                                let _ = $tcx.#name(key);\n-                            }\n-                        }\n-                    }\n-                });\n             }\n \n             let mut attributes = Vec::new();\n@@ -485,47 +470,20 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             let attribute_stream = quote! {#(#attributes),*};\n             let doc_comments = query.doc_comments.iter();\n             // Add the query to the group\n-            group_stream.extend(quote! {\n+            query_stream.extend(quote! {\n                 #(#doc_comments)*\n-                [#attribute_stream] fn #name: #name(#arg) #result,\n+                [#attribute_stream] fn #name(#arg) #result,\n             });\n \n             // Create a dep node for the query\n             dep_node_def_stream.extend(quote! {\n                 [#attribute_stream] #name(#arg),\n             });\n \n-            // Add a match arm to force the query given the dep node\n-            dep_node_force_stream.extend(quote! {\n-                ::rustc_middle::dep_graph::DepKind::#name => {\n-                    if <#arg as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n-                        if let Some(key) = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node) {\n-                            force_query::<crate::ty::query::queries::#name<'_>, _>(\n-                                $tcx,\n-                                key,\n-                                DUMMY_SP,\n-                                *$dep_node\n-                            );\n-                            return true;\n-                        }\n-                    }\n-                }\n-            });\n-\n             add_query_description_impl(&query, modifiers, &mut query_description_stream);\n         }\n-        let name = &group.name;\n-        query_stream.extend(quote! {\n-            #name { #group_stream },\n-        });\n     }\n \n-    dep_node_force_stream.extend(quote! {\n-        ::rustc_middle::dep_graph::DepKind::Null => {\n-            bug!(\"Cannot force dep node: {:?}\", $dep_node)\n-        }\n-    });\n-\n     TokenStream::from(quote! {\n         macro_rules! rustc_query_append {\n             ([$($macro:tt)*][$($other:tt)*]) => {\n@@ -546,30 +504,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 );\n             }\n         }\n-        macro_rules! rustc_dep_node_force {\n-            ([$dep_node:expr, $tcx:expr] $($other:tt)*) => {\n-                match $dep_node.kind {\n-                    $($other)*\n-\n-                    #dep_node_force_stream\n-                }\n-            }\n-        }\n         macro_rules! rustc_cached_queries {\n             ($($macro:tt)*) => {\n                 $($macro)*(#cached_queries);\n             }\n         }\n \n         #query_description_stream\n-\n-        macro_rules! rustc_dep_node_try_load_from_on_disk_cache {\n-            ($dep_node:expr, $tcx:expr) => {\n-                match $dep_node.kind {\n-                    #try_load_from_on_disk_cache_stream\n-                    _ => (),\n-                }\n-            }\n-        }\n     })\n }"}, {"sha": "7ba4d5a14dffb49e474bcbe37a6607ff8b84cd96", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=4d72939af14b20a79232dbe4533875b15d264003", "patch": "@@ -34,7 +34,6 @@ use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_data_structures::profiling::ProfileCategory::*;\n use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n@@ -169,26 +168,71 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n         return false;\n     }\n \n-    rustc_dep_node_force!([dep_node, tcx]\n-        // These are inputs that are expected to be pre-allocated and that\n-        // should therefore always be red or green already.\n-        DepKind::CrateMetadata |\n+    macro_rules! force_from_dep_node {\n+        ($($(#[$attr:meta])* [$($modifiers:tt)*] $name:ident($K:ty),)*) => {\n+            match dep_node.kind {\n+                // These are inputs that are expected to be pre-allocated and that\n+                // should therefore always be red or green already.\n+                DepKind::CrateMetadata |\n \n-        // These are anonymous nodes.\n-        DepKind::TraitSelect |\n+                // These are anonymous nodes.\n+                DepKind::TraitSelect |\n \n-        // We don't have enough information to reconstruct the query key of\n-        // these.\n-        DepKind::CompileCodegenUnit => {\n-            bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n+                // We don't have enough information to reconstruct the query key of\n+                // these.\n+                DepKind::CompileCodegenUnit |\n+\n+                // Forcing this makes no sense.\n+                DepKind::Null => {\n+                    bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n+                }\n+\n+                $(DepKind::$name => {\n+                    debug_assert!(<$K as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key());\n+\n+                    if let Some(key) = <$K as DepNodeParams<TyCtxt<'_>>>::recover(tcx, dep_node) {\n+                        force_query::<queries::$name<'_>, _>(\n+                            tcx,\n+                            key,\n+                            DUMMY_SP,\n+                            *dep_node\n+                        );\n+                        return true;\n+                    }\n+                })*\n+            }\n         }\n-    );\n+    }\n+\n+    rustc_dep_node_append! { [force_from_dep_node!][] }\n \n     false\n }\n \n pub(crate) fn try_load_from_on_disk_cache<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) {\n-    rustc_dep_node_try_load_from_on_disk_cache!(dep_node, tcx)\n+    macro_rules! try_load_from_on_disk_cache {\n+        ($($name:ident,)*) => {\n+            match dep_node.kind {\n+                $(DepKind::$name => {\n+                    if <query_keys::$name<'tcx> as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n+                        debug_assert!(tcx.dep_graph\n+                                         .node_color(dep_node)\n+                                         .map(|c| c.is_green())\n+                                         .unwrap_or(false));\n+\n+                        let key = <query_keys::$name<'tcx> as DepNodeParams<TyCtxt<'_>>>::recover(tcx, dep_node).unwrap();\n+                        if queries::$name::cache_on_disk(tcx, &key, None) {\n+                            let _ = tcx.$name(key);\n+                        }\n+                    }\n+                })*\n+\n+                _ => (),\n+            }\n+        }\n+    }\n+\n+    rustc_cached_queries!(try_load_from_on_disk_cache!);\n }\n \n mod sealed {"}, {"sha": "d038695283c107588aa8a252da3d4061f561aeb7", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=4d72939af14b20a79232dbe4533875b15d264003", "patch": "@@ -242,33 +242,22 @@ macro_rules! hash_result {\n     };\n }\n \n-macro_rules! define_queries {\n-    (<$tcx:tt> $($category:tt {\n-        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*\n-    },)*) => {\n-        define_queries_inner! { <$tcx>\n-            $($( $(#[$attr])* category<$category> [$($modifiers)*] fn $name: $node($($K)*) -> $V,)*)*\n-        }\n-    }\n-}\n-\n macro_rules! query_helper_param_ty {\n     (DefId) => { impl IntoQueryParam<DefId> };\n     ($K:ty) => { $K };\n }\n \n-macro_rules! define_queries_inner {\n+macro_rules! define_queries {\n     (<$tcx:tt>\n-     $($(#[$attr:meta])* category<$category:tt>\n-        [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*) => {\n+     $($(#[$attr:meta])*\n+        [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n         use std::mem;\n         use crate::{\n             rustc_data_structures::stable_hasher::HashStable,\n             rustc_data_structures::stable_hasher::StableHasher,\n             ich::StableHashingContext\n         };\n-        use rustc_data_structures::profiling::ProfileCategory;\n \n         define_queries_struct! {\n             tcx: $tcx,\n@@ -362,13 +351,12 @@ macro_rules! define_queries_inner {\n                 as QueryStorage\n             >::Stored;\n             const NAME: &'static str = stringify!($name);\n-            const CATEGORY: ProfileCategory = $category;\n         }\n \n         impl<$tcx> QueryAccessors<TyCtxt<$tcx>> for queries::$name<$tcx> {\n             const ANON: bool = is_anon!([$($modifiers)*]);\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n-            const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$node;\n+            const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$name;\n \n             type Cache = query_storage!([$($modifiers)*][$($K)*, $V]);\n "}, {"sha": "e0b44ce23c912c0fba3c5e0f48dc6d28b4bd9787", "filename": "compiler/rustc_middle/src/ty/query/stats.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs?ref=4d72939af14b20a79232dbe4533875b15d264003", "patch": "@@ -120,13 +120,13 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n }\n \n macro_rules! print_stats {\n-    (<$tcx:tt> $($category:tt {\n-        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*\n-    },)*) => {\n+    (<$tcx:tt>\n+        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($K:ty) -> $V:ty,)*\n+    ) => {\n         fn query_stats(tcx: TyCtxt<'_>) -> Vec<QueryStats> {\n             let mut queries = Vec::new();\n \n-            $($(\n+            $(\n                 queries.push(stats::<\n                     crate::dep_graph::DepKind,\n                     <TyCtxt<'_> as QueryContext>::Query,\n@@ -135,7 +135,7 @@ macro_rules! print_stats {\n                     stringify!($name),\n                     &tcx.queries.$name,\n                 ));\n-            )*)*\n+            )*\n \n             queries\n         }"}, {"sha": "0f0684b354791b549120d1e29101ac9a0095955b", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72939af14b20a79232dbe4533875b15d264003/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=4d72939af14b20a79232dbe4533875b15d264003", "patch": "@@ -5,7 +5,6 @@ use crate::dep_graph::SerializedDepNodeIndex;\n use crate::query::caches::QueryCache;\n use crate::query::plumbing::CycleError;\n use crate::query::{QueryContext, QueryState};\n-use rustc_data_structures::profiling::ProfileCategory;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use std::borrow::Cow;\n@@ -14,7 +13,6 @@ use std::hash::Hash;\n \n pub trait QueryConfig {\n     const NAME: &'static str;\n-    const CATEGORY: ProfileCategory;\n \n     type Key: Eq + Hash + Clone + Debug;\n     type Value;"}]}