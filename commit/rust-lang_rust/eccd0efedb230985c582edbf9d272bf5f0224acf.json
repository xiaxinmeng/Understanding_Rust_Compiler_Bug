{"sha": "eccd0efedb230985c582edbf9d272bf5f0224acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2QwZWZlZGIyMzA5ODVjNTgyZWRiZjlkMjcyYmY1ZjAyMjRhY2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-10T23:33:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-10T23:33:18Z"}, "message": "Merge #8463\n\n8463: Support macros in pattern position r=jonas-schievink a=jonas-schievink\n\nThis was fairly easy, because patterns are limited to bodies, so almost all changes were inside body lowering.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "e9d878c43c5b487a8788ea2000e6e00cac883cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d878c43c5b487a8788ea2000e6e00cac883cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eccd0efedb230985c582edbf9d272bf5f0224acf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcjW/CRBK7hj4Ov3rIwAAdHIIAAR3iDb7MNBRdeVfELoSIBJg\nSCvQRIm2iIzJzGxL+0cXsoemH7uWR2AkHIdFPHlkUkM1nhEINQNsjnWwG82wQMpO\nwqMifa7hN0/QQZTZz3PQX2IHTi4JKj8cdqPkMEd9rugmOBacvHlTMgxTjCvXNVeC\nZJLZE4CwzSGEH3Dqbk/IglvRqe6c0D41LAzD3xfcAATo9Reeq8UlTeEJGr4duv4N\nzu3j0FWfnU8awZzSBHlSz5wMX7TUfhWjjbN0/Rlnniuwm1ndD+sECHBPzZC8dUwl\nkbxOPbcbyByVyaztsXINcme9Wk3nTLDuJ00bOqop3qpFYy9KMyt3wzacaS2nk04=\n=Y2yZ\n-----END PGP SIGNATURE-----\n", "payload": "tree e9d878c43c5b487a8788ea2000e6e00cac883cc2\nparent a8a25863f6e1e6da94b60813b2daee73b55132f7\nparent e2c1da36f59cd99d4da4c1d5f8f323626d3dbe61\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618097598 +0000\ncommitter GitHub <noreply@github.com> 1618097598 +0000\n\nMerge #8463\n\n8463: Support macros in pattern position r=jonas-schievink a=jonas-schievink\n\nThis was fairly easy, because patterns are limited to bodies, so almost all changes were inside body lowering.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eccd0efedb230985c582edbf9d272bf5f0224acf", "html_url": "https://github.com/rust-lang/rust/commit/eccd0efedb230985c582edbf9d272bf5f0224acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eccd0efedb230985c582edbf9d272bf5f0224acf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a25863f6e1e6da94b60813b2daee73b55132f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a25863f6e1e6da94b60813b2daee73b55132f7", "html_url": "https://github.com/rust-lang/rust/commit/a8a25863f6e1e6da94b60813b2daee73b55132f7"}, {"sha": "e2c1da36f59cd99d4da4c1d5f8f323626d3dbe61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c1da36f59cd99d4da4c1d5f8f323626d3dbe61", "html_url": "https://github.com/rust-lang/rust/commit/e2c1da36f59cd99d4da4c1d5f8f323626d3dbe61"}], "stats": {"total": 98, "additions": 88, "deletions": 10}, "files": [{"sha": "ed07d692812c2f95d132fbaa754c293aa8b0e2c1", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -531,8 +531,9 @@ impl ExprCollector<'_> {\n                 }\n             }\n             ast::Expr::MacroCall(e) => {\n+                let macro_ptr = AstPtr::new(&e);\n                 let mut ids = vec![];\n-                self.collect_macro_call(e, syntax_ptr.clone(), true, |this, expansion| {\n+                self.collect_macro_call(e, macro_ptr, true, |this, expansion| {\n                     ids.push(match expansion {\n                         Some(it) => this.collect_expr(it),\n                         None => this.alloc_expr(Expr::Missing, syntax_ptr.clone()),\n@@ -555,7 +556,7 @@ impl ExprCollector<'_> {\n     fn collect_macro_call<F: FnMut(&mut Self, Option<T>), T: ast::AstNode>(\n         &mut self,\n         e: ast::MacroCall,\n-        syntax_ptr: AstPtr<ast::Expr>,\n+        syntax_ptr: AstPtr<ast::MacroCall>,\n         is_error_recoverable: bool,\n         mut collector: F,\n     ) {\n@@ -643,10 +644,14 @@ impl ExprCollector<'_> {\n \n                 // Note that macro could be expended to multiple statements\n                 if let Some(ast::Expr::MacroCall(m)) = stmt.expr() {\n+                    let macro_ptr = AstPtr::new(&m);\n                     let syntax_ptr = AstPtr::new(&stmt.expr().unwrap());\n \n-                    self.collect_macro_call(m, syntax_ptr.clone(), false, |this, expansion| {\n-                        match expansion {\n+                    self.collect_macro_call(\n+                        m,\n+                        macro_ptr,\n+                        false,\n+                        |this, expansion| match expansion {\n                             Some(expansion) => {\n                                 let statements: ast::MacroStmts = expansion;\n \n@@ -660,8 +665,8 @@ impl ExprCollector<'_> {\n                                 let expr = this.alloc_expr(Expr::Missing, syntax_ptr.clone());\n                                 this.statements_in_scope.push(Statement::Expr(expr));\n                             }\n-                        }\n-                    });\n+                        },\n+                    );\n                 } else {\n                     let expr = self.collect_expr_opt(stmt.expr());\n                     self.statements_in_scope.push(Statement::Expr(expr));\n@@ -848,8 +853,23 @@ impl ExprCollector<'_> {\n                     Pat::Missing\n                 }\n             }\n+            ast::Pat::MacroPat(mac) => match mac.macro_call() {\n+                Some(call) => {\n+                    let macro_ptr = AstPtr::new(&call);\n+                    let mut pat = None;\n+                    self.collect_macro_call(call, macro_ptr, true, |this, expanded_pat| {\n+                        pat = Some(this.collect_pat_opt(expanded_pat));\n+                    });\n+\n+                    match pat {\n+                        Some(pat) => return pat,\n+                        None => Pat::Missing,\n+                    }\n+                }\n+                None => Pat::Missing,\n+            },\n             // FIXME: implement\n-            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n+            ast::Pat::RangePat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "94e08f83590ceca9fe0dc8cbea2ed7d6cccfa70a", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -99,6 +99,11 @@ impl ItemTree {\n                     // items.\n                     ctx.lower_macro_stmts(stmts)\n                 },\n+                ast::Pat(_pat) => {\n+                    // FIXME: This occurs because macros in pattern position are treated as inner\n+                    // items and expanded during block DefMap computation\n+                    return Default::default();\n+                },\n                 ast::Expr(e) => {\n                     // Macros can expand to expressions. We return an empty item tree in this case, but\n                     // still need to collect inner items."}, {"sha": "45b099cf3194e4ecdc5a89582d761a6165ba428a", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -189,7 +189,7 @@ impl Ctx {\n                                 block_stack.push(self.source_ast_id_map.ast_id(&block));\n                             },\n                             ast::Item(item) => {\n-                                // FIXME: This triggers for macro calls in expression position\n+                                // FIXME: This triggers for macro calls in expression/pattern/type position\n                                 let mod_items = self.lower_mod_item(&item, true);\n                                 let current_block = block_stack.last();\n                                 if let (Some(mod_items), Some(block)) = (mod_items, current_block) {"}, {"sha": "ca705ee9d4d45ae2979d4f229bd19a6bbd981235", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -439,6 +439,7 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n     match parent.kind() {\n         MACRO_ITEMS | SOURCE_FILE => FragmentKind::Items,\n         MACRO_STMTS => FragmentKind::Statements,\n+        MACRO_PAT => FragmentKind::Pattern,\n         ITEM_LIST => FragmentKind::Items,\n         LET_STMT => {\n             // FIXME: Handle LHS Pattern"}, {"sha": "b8e373ed889466f7218e0576da4c2bd16ac618ef", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -1065,11 +1065,11 @@ fn macro_in_arm() {\n         }\n         \"#,\n         expect![[r#\"\n+            !0..2 '()': ()\n             51..110 '{     ...  }; }': ()\n             61..62 'x': u32\n             65..107 'match ...     }': u32\n             71..73 '()': ()\n-            84..91 'unit!()': ()\n             95..100 '92u32': u32\n         \"#]],\n     );"}, {"sha": "f514b3efe614a302d0f920d49f897fdc53d43848", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -1,6 +1,6 @@\n use expect_test::expect;\n \n-use super::{check_infer, check_infer_with_mismatches};\n+use super::{check_infer, check_infer_with_mismatches, check_types};\n \n #[test]\n fn infer_pattern() {\n@@ -825,3 +825,29 @@ fn foo(foo: Foo) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn macro_pat() {\n+    check_types(\n+        r#\"\n+macro_rules! pat {\n+    ($name:ident) => { Enum::Variant1($name) }\n+}\n+\n+enum Enum {\n+    Variant1(u8),\n+    Variant2,\n+}\n+\n+fn f(e: Enum) {\n+    match e {\n+        pat!(bind) => {\n+            bind;\n+          //^^^^ u8\n+        }\n+        Enum::Variant2 => {}\n+    }\n+}\n+    \"#,\n+    )\n+}"}, {"sha": "d057d5402d3f85fad2300bdd27092d22e0a115d6", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccd0efedb230985c582edbf9d272bf5f0224acf/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=eccd0efedb230985c582edbf9d272bf5f0224acf", "patch": "@@ -1185,6 +1185,32 @@ pub mod theitem {\n pub fn gimme() -> theitem::TheItem {\n     theitem::TheItem\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_ident_from_pat_macro() {\n+        check(\n+            r#\"\n+macro_rules! pat {\n+    ($name:ident) => { Enum::Variant1($name) }\n+}\n+\n+enum Enum {\n+    Variant1(u8),\n+    Variant2,\n+}\n+\n+fn f(e: Enum) {\n+    match e {\n+        pat!(bind) => {\n+           //^^^^\n+            bind$0\n+        }\n+        Enum::Variant2 => {}\n+    }\n+}\n \"#,\n         );\n     }"}]}