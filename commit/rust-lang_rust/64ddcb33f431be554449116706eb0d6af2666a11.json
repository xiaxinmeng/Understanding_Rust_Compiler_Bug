{"sha": "64ddcb33f431be554449116706eb0d6af2666a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZGRjYjMzZjQzMWJlNTU0NDQ5MTE2NzA2ZWIwZDZhZjI2NjZhMTE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-01-16T23:40:11Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-02-18T19:07:05Z"}, "message": "Add intrinsics for compare_exchange and compare_exchange_weak", "tree": {"sha": "12db3dad35ef7741e2e9a8deac27f39f2fc2da3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12db3dad35ef7741e2e9a8deac27f39f2fc2da3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ddcb33f431be554449116706eb0d6af2666a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ddcb33f431be554449116706eb0d6af2666a11", "html_url": "https://github.com/rust-lang/rust/commit/64ddcb33f431be554449116706eb0d6af2666a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ddcb33f431be554449116706eb0d6af2666a11/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2a577804b32b6d203abe61e0cdf3a88837d228", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2a577804b32b6d203abe61e0cdf3a88837d228", "html_url": "https://github.com/rust-lang/rust/commit/8e2a577804b32b6d203abe61e0cdf3a88837d228"}], "stats": {"total": 154, "additions": 114, "deletions": 40}, "files": [{"sha": "47f5d68f311588d66584dbfbfe846912408face8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -58,6 +58,33 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> T;\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> T;\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> T;\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> T;\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> T;\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> T;\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> T;\n+\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     pub fn atomic_load<T>(src: *const T) -> T;\n     pub fn atomic_load_acq<T>(src: *const T) -> T;"}, {"sha": "d55a801875be1e6d982857106992f964df83a8cf", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -1584,7 +1584,8 @@ extern {\n                                   CMP: ValueRef,\n                                   RHS: ValueRef,\n                                   Order: AtomicOrdering,\n-                                  FailureOrder: AtomicOrdering)\n+                                  FailureOrder: AtomicOrdering,\n+                                  Weak: Bool)\n                                   -> ValueRef;\n     pub fn LLVMBuildAtomicRMW(B: BuilderRef,\n                               Op: AtomicBinOp,"}, {"sha": "2b4fcf436cbc090bca122bf06d3a2139cbb18155", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -1067,8 +1067,9 @@ pub fn Resume(cx: Block, exn: ValueRef) -> ValueRef {\n pub fn AtomicCmpXchg(cx: Block, dst: ValueRef,\n                      cmp: ValueRef, src: ValueRef,\n                      order: AtomicOrdering,\n-                     failure_order: AtomicOrdering) -> ValueRef {\n-    B(cx).atomic_cmpxchg(dst, cmp, src, order, failure_order)\n+                     failure_order: AtomicOrdering,\n+                     weak: llvm::Bool) -> ValueRef {\n+    B(cx).atomic_cmpxchg(dst, cmp, src, order, failure_order, weak)\n }\n pub fn AtomicRMW(cx: Block, op: AtomicBinOp,\n                  dst: ValueRef, src: ValueRef,"}, {"sha": "434fca4168858421bb2b5e220e6a303294886614", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -1077,10 +1077,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn atomic_cmpxchg(&self, dst: ValueRef,\n                          cmp: ValueRef, src: ValueRef,\n                          order: AtomicOrdering,\n-                         failure_order: AtomicOrdering) -> ValueRef {\n+                         failure_order: AtomicOrdering,\n+                         weak: llvm::Bool) -> ValueRef {\n         unsafe {\n             llvm::LLVMBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src,\n-                                         order, failure_order)\n+                                         order, failure_order, weak)\n         }\n     }\n     pub fn atomic_rmw(&self, op: AtomicBinOp,"}, {"sha": "b7b520f6c825913094cee701474669e518d45e76", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -678,49 +678,54 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n         (_, name) if name.starts_with(\"atomic_\") => {\n             let split: Vec<&str> = name.split('_').collect();\n-            assert!(split.len() >= 2, \"Atomic intrinsic not correct format\");\n \n-            let order = if split.len() == 2 {\n-                llvm::SequentiallyConsistent\n-            } else {\n-                match split[2] {\n-                    \"unordered\" => llvm::Unordered,\n-                    \"relaxed\" => llvm::Monotonic,\n-                    \"acq\"     => llvm::Acquire,\n-                    \"rel\"     => llvm::Release,\n-                    \"acqrel\"  => llvm::AcquireRelease,\n+            let (order, failorder) = match split.len() {\n+                2 => (llvm::SequentiallyConsistent, llvm::SequentiallyConsistent),\n+                3 => match split[2] {\n+                    \"unordered\" => (llvm::Unordered, llvm::Unordered),\n+                    \"relaxed\" => (llvm::Monotonic, llvm::Monotonic),\n+                    \"acq\"     => (llvm::Acquire, llvm::Acquire),\n+                    \"rel\"     => (llvm::Release, llvm::Monotonic),\n+                    \"acqrel\"  => (llvm::AcquireRelease, llvm::Acquire),\n+                    \"failrelaxed\" if split[1] == \"cxchg\" || split[1] == \"cxchgweak\" =>\n+                        (llvm::SequentiallyConsistent, llvm::Monotonic),\n+                    \"failacq\" if split[1] == \"cxchg\" || split[1] == \"cxchgweak\" =>\n+                        (llvm::SequentiallyConsistent, llvm::Acquire),\n                     _ => ccx.sess().fatal(\"unknown ordering in atomic intrinsic\")\n-                }\n+                },\n+                4 => match (split[2], split[3]) {\n+                    (\"acq\", \"failrelaxed\") if split[1] == \"cxchg\" || split[1] == \"cxchgweak\" =>\n+                        (llvm::Acquire, llvm::Monotonic),\n+                    (\"acqrel\", \"failrelaxed\") if split[1] == \"cxchg\" || split[1] == \"cxchgweak\" =>\n+                        (llvm::AcquireRelease, llvm::Monotonic),\n+                    _ => ccx.sess().fatal(\"unknown ordering in atomic intrinsic\")\n+                },\n+                _ => ccx.sess().fatal(\"Atomic intrinsic not in correct format\"),\n             };\n \n             match split[1] {\n                 \"cxchg\" => {\n-                    // See include/llvm/IR/Instructions.h for their implementation\n-                    // of this, I assume that it's good enough for us to use for\n-                    // now.\n-                    let strongest_failure_ordering = match order {\n-                        llvm::NotAtomic | llvm::Unordered =>\n-                            ccx.sess().fatal(\"cmpxchg must be atomic\"),\n-\n-                        llvm::Monotonic | llvm::Release =>\n-                            llvm::Monotonic,\n-\n-                        llvm::Acquire | llvm::AcquireRelease =>\n-                            llvm::Acquire,\n-\n-                        llvm::SequentiallyConsistent =>\n-                            llvm::SequentiallyConsistent\n-                    };\n-\n                     let tp_ty = *substs.types.get(FnSpace, 0);\n                     let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n                     let cmp = from_arg_ty(bcx, llargs[1], tp_ty);\n                     let src = from_arg_ty(bcx, llargs[2], tp_ty);\n-                    let res = AtomicCmpXchg(bcx, ptr, cmp, src, order,\n-                                            strongest_failure_ordering);\n+                    let res = AtomicCmpXchg(bcx, ptr, cmp, src, order, failorder, llvm::False);\n                     ExtractValue(bcx, res, 0)\n                 }\n \n+                \"cxchgweak\" => {\n+                    let tp_ty = *substs.types.get(FnSpace, 0);\n+                    let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);\n+                    let cmp = from_arg_ty(bcx, llargs[1], tp_ty);\n+                    let src = from_arg_ty(bcx, llargs[2], tp_ty);\n+                    let val = AtomicCmpXchg(bcx, ptr, cmp, src, order, failorder, llvm::True);\n+                    let result = ExtractValue(bcx, val, 0);\n+                    let success = ZExt(bcx, ExtractValue(bcx, val, 1), Type::bool(bcx.ccx()));\n+                    Store(bcx, result, StructGEP(bcx, llresult, 0));\n+                    Store(bcx, success, StructGEP(bcx, llresult, 1));\n+                    C_nil(ccx)\n+                }\n+\n                 \"load\" => {\n                     let tp_ty = *substs.types.get(FnSpace, 0);\n                     let ptr = to_arg_ty_ptr(bcx, llargs[0], tp_ty);"}, {"sha": "5e1dc35870bb2798dbd73afe5899943e06f26dda", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -83,6 +83,10 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                                 param(ccx, 0),\n                                 param(ccx, 0)),\n                         param(ccx, 0)),\n+            \"cxchgweak\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)),\n+                                param(ccx, 0),\n+                                param(ccx, 0)),\n+                            tcx.mk_tup(vec!(param(ccx, 0), tcx.types.bool))),\n             \"load\" => (1, vec!(tcx.mk_imm_ptr(param(ccx, 0))),\n                        param(ccx, 0)),\n             \"store\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)),"}, {"sha": "4ebe49512d74b007f8c06fb7dd16672fe3f09a56", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -191,11 +191,15 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                LLVMValueRef old,\n                                                LLVMValueRef source,\n                                                AtomicOrdering order,\n-                                               AtomicOrdering failure_order) {\n-    return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n-                                               unwrap(source), order,\n-                                               failure_order\n-                                               ));\n+                                               AtomicOrdering failure_order,\n+                                               LLVMBool weak) {\n+    AtomicCmpXchgInst* acxi = unwrap(B)->CreateAtomicCmpXchg(unwrap(target),\n+                                                             unwrap(old),\n+                                                             unwrap(source),\n+                                                             order,\n+                                                             failure_order);\n+    acxi->setWeak(weak);\n+    return wrap(acxi);\n }\n extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B,\n                                              AtomicOrdering order,"}, {"sha": "3cc125e95133470e4049e98dd31a0dbd2e14e5da", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/64ddcb33f431be554449116706eb0d6af2666a11/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ddcb33f431be554449116706eb0d6af2666a11/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=64ddcb33f431be554449116706eb0d6af2666a11", "patch": "@@ -19,6 +19,10 @@ mod rusti {\n         pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> T;\n         pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> T;\n \n+        pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+        pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+        pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+\n         pub fn atomic_load<T>(src: *const T) -> T;\n         pub fn atomic_load_acq<T>(src: *const T) -> T;\n \n@@ -79,5 +83,32 @@ pub fn main() {\n         assert_eq!(rusti::atomic_xsub_acq(&mut *x, 1), 2);\n         assert_eq!(rusti::atomic_xsub_rel(&mut *x, 1), 1);\n         assert_eq!(*x, 0);\n+\n+        loop {\n+            let res = rusti::atomic_cxchgweak(&mut *x, 0, 1);\n+            assert_eq!(res.0, 0);\n+            if res.1 {\n+                break;\n+            }\n+        }\n+        assert_eq!(*x, 1);\n+\n+        loop {\n+            let res = rusti::atomic_cxchgweak_acq(&mut *x, 1, 2);\n+            assert_eq!(res.0, 1);\n+            if res.1 {\n+                break;\n+            }\n+        }\n+        assert_eq!(*x, 2);\n+\n+        loop {\n+            let res = rusti::atomic_cxchgweak_rel(&mut *x, 2, 3);\n+            assert_eq!(res.0, 2);\n+            if res.1 {\n+                break;\n+            }\n+        }\n+        assert_eq!(*x, 3);\n     }\n }"}]}