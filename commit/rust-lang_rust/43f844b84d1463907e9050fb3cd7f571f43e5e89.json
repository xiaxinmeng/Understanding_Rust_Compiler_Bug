{"sha": "43f844b84d1463907e9050fb3cd7f571f43e5e89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjg0NGI4NGQxNDYzOTA3ZTkwNTBmYjNjZDdmNTcxZjQzZTVlODk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T16:11:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T16:41:26Z"}, "message": "Add documentation to Windows thread parker implementation.", "tree": {"sha": "fc96254c198381bce0b6df35b73ed6fc3ff293fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc96254c198381bce0b6df35b73ed6fc3ff293fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f844b84d1463907e9050fb3cd7f571f43e5e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f844b84d1463907e9050fb3cd7f571f43e5e89", "html_url": "https://github.com/rust-lang/rust/commit/43f844b84d1463907e9050fb3cd7f571f43e5e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f844b84d1463907e9050fb3cd7f571f43e5e89/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c139360ba7658532b80bb08c26c64c578b0cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c139360ba7658532b80bb08c26c64c578b0cc7", "html_url": "https://github.com/rust-lang/rust/commit/d1c139360ba7658532b80bb08c26c64c578b0cc7"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "8f45db78d2f5d6a3acf603e67b1af544ae3fad15", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/43f844b84d1463907e9050fb3cd7f571f43e5e89/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f844b84d1463907e9050fb3cd7f571f43e5e89/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=43f844b84d1463907e9050fb3cd7f571f43e5e89", "patch": "@@ -1,3 +1,62 @@\n+// Thread parker implementation for Windows.\n+//\n+// This uses WaitOnAddress and WakeByAddressSingle if available (Windows 8+).\n+// This modern API is exactly the same as the futex syscalls the Linux thread\n+// parker uses. When These APIs are available, the implementation of this\n+// thread parker matches the Linux thread parker exactly.\n+//\n+// However, when the modern API is not available, this implementation falls\n+// back to NT Keyed Events, which are similar, but have some important\n+// differences. These are available since Windows XP.\n+//\n+// WaitOnAddress first checks the state of the thread parker to make sure it no\n+// WakeByAddressSingle calls can be missed between updating the parker state\n+// and calling the function.\n+//\n+// NtWaitForKeyedEvent does not have this option, and unconditionally blocks\n+// without checking the parker state first. Instead, NtReleaseKeyedEvent\n+// (unlike WakeByAddressSingle) *blocks* until it woke up a thread waiting for\n+// it by NtWaitForKeyedEvent. This way, we can be sure no events are missed,\n+// but we need to be careful not to block unpark() if park_timeout() was woken\n+// up by a timeout instead of unpark().\n+//\n+// Unlike WaitOnAddress, NtWaitForKeyedEvent/NtReleaseKeyedEvent operate on a\n+// HANDLE (created with NtCreateKeyedEvent). This means that we can be sure\n+// a succesfully awoken park() was awoken by unpark() and not a\n+// NtReleaseKeyedEvent call from some other code, as these events are not only\n+// matched by the key (address of the parker (state)), but also by this HANDLE.\n+// We lazily allocate this handle the first time it is needed.\n+//\n+// The fast path (calling park() after unpark() was already called) and the\n+// possible states are the same for both implementations. This is used here to\n+// make sure the fast path does not even check which API to use, but can return\n+// right away, independent of the used API. Only the slow paths (which will\n+// actually block/wake a thread) check which API is available and have\n+// different implementations.\n+//\n+// Unfortunately, NT Keyed Events are an undocumented Windows API. However:\n+// - This API is relatively simple with obvious behaviour, and there are\n+//   several (unofficial) articles documenting the details. [1]\n+// - `parking_lot` has been using this API for years (on Windows versions\n+//   before Windows 8). [2] Many big projects extensively use parking_lot,\n+//   such as servo and the Rust compiler itself.\n+// - It is the underlying API used by Windows SRW locks and Windows critical\n+//   sections. [3] [4]\n+// - The source code of the implementations of Wine, ReactOs, and Windows XP\n+//   are available and match the expected behaviour.\n+// - The main risk with an undocumented API is that it might change in the\n+//   future. But since we only use it for older versions of Windows, that's not\n+//   a problem.\n+// - Even if these functions do not block or wake as we expect (which is\n+//   unlikely, see all previous points), this implementation would still be\n+//   memory safe. The NT Keyed Events API is only used to sleep/block in the\n+//   right place.\n+//\n+// [1]: http://www.locklessinc.com/articles/keyed_events/\n+// [2]: https://github.com/Amanieu/parking_lot/commit/43abbc964e\n+// [3]: https://docs.microsoft.com/en-us/archive/msdn-magazine/2012/november/windows-with-c-the-evolution-of-synchronization-in-windows-and-c\n+// [4]: Windows Internals, Part 1, ISBN 9780735671300\n+\n use crate::convert::TryFrom;\n use crate::ptr;\n use crate::sync::atomic::{\n@@ -34,7 +93,7 @@ const NOTIFIED: i8 = 1;\n //\n // This is done with a release-acquire synchronization, by using\n // Ordering::Release when writing NOTIFIED (the 'token') in unpark(), and using\n-// Ordering::Acquire when checking for this state in park().\n+// Ordering::Acquire when reading this state in park() after waking up.\n impl Parker {\n     pub fn new() -> Self {\n         Self { state: AtomicI8::new(EMPTY) }"}]}