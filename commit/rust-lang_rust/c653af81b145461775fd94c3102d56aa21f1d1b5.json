{"sha": "c653af81b145461775fd94c3102d56aa21f1d1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTNhZjgxYjE0NTQ2MTc3NWZkOTRjMzEwMmQ1NmFhMjFmMWQxYjU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-09-19T13:58:13Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-09-27T23:29:15Z"}, "message": "Remove unnecessary -Zunsound-mir-opts uses in tests", "tree": {"sha": "fd9afbc5a42a06f3c942c11219c3ba988bfe70d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd9afbc5a42a06f3c942c11219c3ba988bfe70d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c653af81b145461775fd94c3102d56aa21f1d1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c653af81b145461775fd94c3102d56aa21f1d1b5", "html_url": "https://github.com/rust-lang/rust/commit/c653af81b145461775fd94c3102d56aa21f1d1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c653af81b145461775fd94c3102d56aa21f1d1b5/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc", "html_url": "https://github.com/rust-lang/rust/commit/b9d0ea95c8d87310262f6f6cb88c16f6d3d323cc"}], "stats": {"total": 345, "additions": 177, "deletions": 168}, "files": [{"sha": "fb0de020f73a2d945ba3717e6547ab1eea2aa27e", "filename": "src/test/mir-opt/inline/inline-any-operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z span_free_formats -Zunsound-mir-opts\n+// compile-flags: -Z span_free_formats\n \n // Tests that MIR inliner works for any operand\n "}, {"sha": "6e5de8315a1cb4b54b62847fb4ea3f30b99ac492", "filename": "src/test/mir-opt/inline/inline-trait-method_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z span_free_formats -Z mir-opt-level=3 -Zunsound-mir-opts\n+// compile-flags: -Z span_free_formats -Z mir-opt-level=3\n \n // EMIT_MIR inline_trait_method_2.test2.Inline.after.mir\n fn test2(x: &dyn X) -> bool {"}, {"sha": "4d623297f8d68a42f82979f165b2dc4c256608da", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -4,13 +4,15 @@ fn bar() -> bool {\n     let mut _0: bool;                    // return place in scope 0 at $DIR/inline-any-operand.rs:10:13: 10:17\n     let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n     let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:6\n-    let mut _3: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n-    let mut _4: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    let mut _5: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    let mut _6: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n         scope 2 {\n-            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n-            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n+            debug x => _5;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n+            debug y => _6;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n+            let mut _3: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+            let mut _4: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n         }\n     }\n \n@@ -22,13 +24,19 @@ fn bar() -> bool {\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _5 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_6);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _6 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_3);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        _3 = _5;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        StorageLive(_4);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _4 = _6;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n         _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageDead(_4);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageDead(_3);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageDead(_6);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n         StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2"}, {"sha": "09546205962a41a03eaf9035614b0e1e47ab3c19", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -7,6 +7,7 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n     scope 1 {\n         debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n+        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n     }\n \n     bb0: {\n@@ -15,13 +16,16 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        _0 = <dyn X as X>::y(move _2) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:6\n+        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:6\n+        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:9: 10:10\n         StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:11: 5:12\n         return;                          // scope 0 at $DIR/inline-trait-method_2.rs:6:2: 6:2\n     }"}, {"sha": "ab46d7b94c72c09872aec2d17d961ae5f1cc4d97", "filename": "src/test/mir-opt/nrvo-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnrvo-simple.rs?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=1 -Zunsound-mir-opts\n+// compile-flags: -Zmir-opt-level=1\n \n // EMIT_MIR nrvo_simple.nrvo.RenameReturnPlace.diff\n fn nrvo(init: fn(&mut [u8; 1024])) -> [u8; 1024] {"}, {"sha": "cf8940ec33096d44cb60b2d668ec50a9eb31c71c", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zunsound-mir-opts\n-\n fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n     match x {\n         None => None,"}, {"sha": "68a113f94efdaed487ed0d390ca660c1f06cc7dc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "68a113f94efdaed487ed0d390ca660c1f06cc7dc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }\n   }\n   "}, {"sha": "fca80bee89679df7dbdcbf074baf1796bfc21596", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Zunsound-mir-opts\n // EMIT_MIR simplify_try.try_identity.SimplifyArmIdentity.diff\n // EMIT_MIR simplify_try.try_identity.SimplifyBranchSame.after.mir\n // EMIT_MIR simplify_try.try_identity.SimplifyLocals.after.mir"}, {"sha": "187a3cfbb896d545e2bbed1f86e29e6439bf4d7a", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -2,35 +2,35 @@\n + // MIR for `try_identity` after DestinationPropagation\n   \n   fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n+          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n           scope 3 {\n               scope 7 {\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n               }\n           }\n       }\n       scope 4 {\n-          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n+          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n           scope 5 {\n           }\n       }\n@@ -40,33 +40,33 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+-         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+-         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n -         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n++         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n +         nop;                             // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n++         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n+          goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "0c687684c508ea25d83005607844dbc25820a519", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `try_identity` after SimplifyArmIdentity\n   \n   fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n           scope 3 {\n               scope 7 {\n -                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n@@ -29,13 +29,13 @@\n               scope 8 {\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n               }\n           }\n       }\n       scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-+         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n++         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n           scope 5 {\n           }\n       }\n@@ -44,55 +44,55 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n           _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:9:9: 9:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:7:13: 7:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:8:8: 8:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:8:8: 8:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n -         _8 = move _9;                    // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n -         StorageLive(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         _12 = move _8;                   // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n       }\n   \n       bb3: {\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "9428d305c87319547ed2864aae42ac4279b0b73e", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,35 +1,35 @@\n // MIR for `try_identity` after SimplifyBranchSame\n \n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n+    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n         scope 3 {\n             scope 7 {\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n+                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n             }\n         }\n     }\n     scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n         scope 5 {\n         }\n     }\n@@ -38,24 +38,24 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n+        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n+        goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n     }\n \n     bb2: {\n-        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n     }\n }"}, {"sha": "a25472f6a5e05c96224b9b5ac5b7bb9b9e446e37", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c653af81b145461775fd94c3102d56aa21f1d1b5/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=c653af81b145461775fd94c3102d56aa21f1d1b5", "patch": "@@ -1,13 +1,13 @@\n // MIR for `try_identity` after SimplifyLocals\n \n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n         scope 3 {\n             scope 7 {\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n@@ -18,7 +18,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         }\n     }\n     scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n         scope 5 {\n         }\n     }\n@@ -27,7 +27,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+        return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n     }\n }"}]}