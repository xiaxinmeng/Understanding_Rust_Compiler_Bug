{"sha": "dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGFjNWViM2M2NTdjMzlmOWYzMjhmMzAzZGM3ZWYwMWRkNzYwYzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-17T01:08:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-19T16:59:21Z"}, "message": "std: Stablize io::ErrorKind\n\nThis commit stabilizes the `ErrorKind` enumeration which is consumed by and\ngenerated by the `io::Error` type. The purpose of this type is to serve as a\ncross-platform namespace to categorize errors into. Two specific issues are\naddressed as part of this stablization:\n\n* The naming of each variant was scrutinized and some were tweaked. An example\n  is how `FileNotFound` was renamed to simply `NotFound`. These names should not\n  show either a Unix or Windows bias and the set of names is intended to grow\n  over time. For now the names will likely largely consist of those errors\n  generated by the I/O APIs in the standard library.\n\n* The mapping of OS error codes onto kinds has been altered. Coalescing no\n  longer occurs (multiple error codes become one kind). It is intended that each\n  OS error code, if bound, corresponds to only one `ErrorKind`. The current set\n  of error kinds was expanded slightly to include some networking errors.\n\nThis commit also adds a `raw_os_error` function which returns an `Option<i32>`\nto extract the underlying raw error code from the `Error`.", "tree": {"sha": "11494f8adbbaa8e954cfb5635db07b8f26d46d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11494f8adbbaa8e954cfb5635db07b8f26d46d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "html_url": "https://github.com/rust-lang/rust/commit/dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cb7c6a2847959460ecac75b2c983d071585472", "url": "https://api.github.com/repos/rust-lang/rust/commits/12cb7c6a2847959460ecac75b2c983d071585472", "html_url": "https://github.com/rust-lang/rust/commit/12cb7c6a2847959460ecac75b2c983d071585472"}], "stats": {"total": 135, "additions": 83, "deletions": 52}, "files": [{"sha": "0e87ba278db21f520286843306901c2494beac2f", "filename": "src/librustc_back/tempdir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibrustc_back%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibrustc_back%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftempdir.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -61,12 +61,12 @@ impl TempDir {\n             let path = tmpdir.join(&leaf);\n             match fs::create_dir(&path) {\n                 Ok(_) => return Ok(TempDir { path: Some(path) }),\n-                Err(ref e) if e.kind() == ErrorKind::PathAlreadyExists => {}\n+                Err(ref e) if e.kind() == ErrorKind::AlreadyExists => {}\n                 Err(e) => return Err(e)\n             }\n         }\n \n-        Err(Error::new(ErrorKind::PathAlreadyExists,\n+        Err(Error::new(ErrorKind::AlreadyExists,\n                        \"too many temporary directories already exist\",\n                        None))\n     }"}, {"sha": "0650b4d515860902ab9409444b96822042a5611c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -35,7 +35,6 @@\n #![feature(test)]\n #![feature(unicode)]\n #![feature(str_words)]\n-#![feature(io)]\n #![feature(file_path)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]"}, {"sha": "90cb88046e53d008416577d3934a927888b6dbe9", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -31,7 +31,6 @@ Core encoding and decoding interfaces.\n #![feature(collections)]\n #![feature(core)]\n #![feature(int_uint)]\n-#![feature(io)]\n #![feature(old_path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "80336a0da87aa2dfb8a1832c78d6eefa9e73b45d", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -493,7 +493,7 @@ pub fn copy<P: AsPath, Q: AsPath>(from: P, to: Q) -> io::Result<u64> {\n     let from = from.as_path();\n     let to = to.as_path();\n     if !from.is_file() {\n-        return Err(Error::new(ErrorKind::MismatchedFileTypeForOperation,\n+        return Err(Error::new(ErrorKind::InvalidInput,\n                               \"the source path is not an existing file\",\n                               None))\n     }\n@@ -1134,7 +1134,7 @@ mod tests {\n         let dir = &tmpdir.join(\"mkdir_error_twice\");\n         check!(fs::create_dir(dir));\n         let e = fs::create_dir(dir).err().unwrap();\n-        assert_eq!(e.kind(), ErrorKind::PathAlreadyExists);\n+        assert_eq!(e.kind(), ErrorKind::AlreadyExists);\n     }\n \n     #[test]"}, {"sha": "8f32d7a586459241324a3a249a6ede228c4bce55", "filename": "src/libstd/fs/tempdir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Ffs%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Ffs%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Ftempdir.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -68,12 +68,12 @@ impl TempDir {\n             let path = tmpdir.join(&leaf);\n             match fs::create_dir(&path) {\n                 Ok(_) => return Ok(TempDir { path: Some(path) }),\n-                Err(ref e) if e.kind() == ErrorKind::PathAlreadyExists => {}\n+                Err(ref e) if e.kind() == ErrorKind::AlreadyExists => {}\n                 Err(e) => return Err(e)\n             }\n         }\n \n-        Err(Error::new(ErrorKind::PathAlreadyExists,\n+        Err(Error::new(ErrorKind::AlreadyExists,\n                        \"too many temporary directories already exist\",\n                        None))\n     }"}, {"sha": "f445ace081e4ffc9f2b66b4e2317d07f76076bdb", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 58, "deletions": 21, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -51,53 +51,77 @@ struct Custom {\n }\n \n /// A list specifying general categories of I/O error.\n+///\n+/// This list is intended to grow over time and it is not recommended to\n+/// exhaustively match against it.\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n-#[unstable(feature = \"io\",\n-           reason = \"the interaction between OS error codes and how they map to \\\n-                     these names (as well as the names themselves) has not \\\n-                     been thoroughly thought out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum ErrorKind {\n-    /// The file was not found.\n-    FileNotFound,\n-    /// The file permissions disallowed access to this file.\n+    /// An entity was not found, often a file.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    NotFound,\n+    /// The operation lacked the necessary privileges to complete.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     PermissionDenied,\n     /// The connection was refused by the remote server.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     ConnectionRefused,\n     /// The connection was reset by the remote server.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     ConnectionReset,\n     /// The connection was aborted (terminated) by the remote server.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     ConnectionAborted,\n     /// The network operation failed because it was not connected yet.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     NotConnected,\n+    /// A socket address could not be bound because the address is already in\n+    /// use elsewhere.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    AddrInUse,\n+    /// A nonexistent interface was requested or the requested address was not\n+    /// local.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    AddrNotAvailable,\n     /// The operation failed because a pipe was closed.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     BrokenPipe,\n-    /// A file already existed with that name.\n-    PathAlreadyExists,\n-    /// No file exists at that location.\n-    PathDoesntExist,\n-    /// The path did not specify the type of file that this operation required.\n-    /// For example, attempting to copy a directory with the `fs::copy()`\n-    /// operation will fail with this error.\n-    MismatchedFileTypeForOperation,\n-    /// The operation temporarily failed (for example, because a signal was\n-    /// received), and retrying may succeed.\n-    ResourceUnavailable,\n-    /// A parameter was incorrect in a way that caused an I/O error not part of\n-    /// this list.\n+    /// An entity already exists, often a file.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    AlreadyExists,\n+    /// The operation needs to block to complete, but the blocking operation was\n+    /// requested to not occur.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    WouldBlock,\n+    /// A parameter was incorrect.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     InvalidInput,\n     /// The I/O operation's timeout expired, causing it to be canceled.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     TimedOut,\n     /// An error returned when an operation could not be completed because a\n     /// call to `write` returned `Ok(0)`.\n     ///\n     /// This typically means that an operation could only succeed if it wrote a\n     /// particular number of bytes but only a smaller number of bytes could be\n     /// written.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     WriteZero,\n-    /// This operation was interrupted\n+    /// This operation was interrupted.\n+    ///\n+    /// Interrupted operations can typically be retried.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Interrupted,\n     /// Any I/O error not part of this list.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Other,\n+\n+    /// Any I/O error not part of this list.\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"better expressed through extensible enums that this \\\n+                         enum cannot be exhaustively matched against\")]\n+    #[doc(hidden)]\n+    __Nonexhaustive,\n }\n \n impl Error {\n@@ -134,6 +158,19 @@ impl Error {\n         Error { repr: Repr::Os(code) }\n     }\n \n+    /// Returns the OS error that this error represents (if any).\n+    ///\n+    /// If this `Error` was constructed via `last_os_error` then this function\n+    /// will return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io\", reason = \"function was just added and the return \\\n+                                         type may become an abstract OS error\")]\n+    pub fn raw_os_error(&self) -> Option<i32> {\n+        match self.repr {\n+            Repr::Os(i) => Some(i),\n+            Repr::Custom(..) => None,\n+        }\n+    }\n+\n     /// Return the corresponding `ErrorKind` for this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> ErrorKind {"}, {"sha": "f263d7d72d35d364d5d5d04af0a6c2d78dc83c15", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -273,17 +273,19 @@ mod tests {\n         match TcpListener::bind(\"1.1.1.1:9999\") {\n             Ok(..) => panic!(),\n             Err(e) =>\n-                // EADDRNOTAVAIL is mapped to ConnectionRefused\n-                assert_eq!(e.kind(), ErrorKind::ConnectionRefused),\n+                assert_eq!(e.kind(), ErrorKind::AddrNotAvailable),\n         }\n     }\n \n     #[test]\n     fn connect_error() {\n         match TcpStream::connect(\"0.0.0.0:1\") {\n             Ok(..) => panic!(),\n-            Err(e) => assert!((e.kind() == ErrorKind::ConnectionRefused)\n-                              || (e.kind() == ErrorKind::InvalidInput)),\n+            Err(e) => assert!(e.kind() == ErrorKind::ConnectionRefused ||\n+                              e.kind() == ErrorKind::InvalidInput ||\n+                              e.kind() == ErrorKind::AddrInUse ||\n+                              e.kind() == ErrorKind::AddrNotAvailable,\n+                              \"bad error: {} {:?}\", e, e.kind()),\n         }\n     }\n \n@@ -535,7 +537,8 @@ mod tests {\n                 Ok(..) => panic!(),\n                 Err(e) => {\n                     assert!(e.kind() == ErrorKind::ConnectionRefused ||\n-                            e.kind() == ErrorKind::Other,\n+                            e.kind() == ErrorKind::Other ||\n+                            e.kind() == ErrorKind::AddrInUse,\n                             \"unknown error: {} {:?}\", e, e.kind());\n                 }\n             }"}, {"sha": "cda37b19c48680b4815e579acb839be6faa891ff", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -668,7 +668,7 @@ mod tests {\n     #[test]\n     fn test_process_output_fail_to_start() {\n         match Command::new(\"/no-binary-by-this-name-should-exist\").output() {\n-            Err(e) => assert_eq!(e.kind(), ErrorKind::FileNotFound),\n+            Err(e) => assert_eq!(e.kind(), ErrorKind::NotFound),\n             Ok(..) => panic!()\n         }\n     }"}, {"sha": "5555eec4f391876ad7227ba501540bec7dd198df", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -139,22 +139,19 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         libc::EPIPE => ErrorKind::BrokenPipe,\n         libc::ENOTCONN => ErrorKind::NotConnected,\n         libc::ECONNABORTED => ErrorKind::ConnectionAborted,\n-        libc::EADDRNOTAVAIL => ErrorKind::ConnectionRefused,\n-        libc::EADDRINUSE => ErrorKind::ConnectionRefused,\n-        libc::ENOENT => ErrorKind::FileNotFound,\n-        libc::EISDIR => ErrorKind::InvalidInput,\n+        libc::EADDRNOTAVAIL => ErrorKind::AddrNotAvailable,\n+        libc::EADDRINUSE => ErrorKind::AddrInUse,\n+        libc::ENOENT => ErrorKind::NotFound,\n         libc::EINTR => ErrorKind::Interrupted,\n         libc::EINVAL => ErrorKind::InvalidInput,\n-        libc::ENOTTY => ErrorKind::MismatchedFileTypeForOperation,\n         libc::ETIMEDOUT => ErrorKind::TimedOut,\n-        libc::ECANCELED => ErrorKind::TimedOut,\n-        libc::consts::os::posix88::EEXIST => ErrorKind::PathAlreadyExists,\n+        libc::consts::os::posix88::EEXIST => ErrorKind::AlreadyExists,\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match\n         // clause\n         x if x == libc::EAGAIN || x == libc::EWOULDBLOCK =>\n-            ErrorKind::ResourceUnavailable,\n+            ErrorKind::WouldBlock,\n \n         _ => ErrorKind::Other,\n     }"}, {"sha": "eeaf4ced07239e16fe0b5b3b83b08bb45a45fe99", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedac5eb3c657c39f9f328f303dc7ef01dd760c3/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=dedac5eb3c657c39f9f328f303dc7ef01dd760c3", "patch": "@@ -149,25 +149,21 @@ pub fn decode_error_detailed(errno: i32) -> IoError {\n pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     match errno as libc::c_int {\n         libc::ERROR_ACCESS_DENIED => ErrorKind::PermissionDenied,\n-        libc::ERROR_ALREADY_EXISTS => ErrorKind::PathAlreadyExists,\n+        libc::ERROR_ALREADY_EXISTS => ErrorKind::AlreadyExists,\n         libc::ERROR_BROKEN_PIPE => ErrorKind::BrokenPipe,\n-        libc::ERROR_FILE_NOT_FOUND => ErrorKind::FileNotFound,\n-        libc::ERROR_INVALID_FUNCTION => ErrorKind::InvalidInput,\n-        libc::ERROR_INVALID_HANDLE => ErrorKind::MismatchedFileTypeForOperation,\n-        libc::ERROR_INVALID_NAME => ErrorKind::InvalidInput,\n-        libc::ERROR_NOTHING_TO_TERMINATE => ErrorKind::InvalidInput,\n+        libc::ERROR_FILE_NOT_FOUND => ErrorKind::NotFound,\n         libc::ERROR_NO_DATA => ErrorKind::BrokenPipe,\n         libc::ERROR_OPERATION_ABORTED => ErrorKind::TimedOut,\n \n         libc::WSAEACCES => ErrorKind::PermissionDenied,\n-        libc::WSAEADDRINUSE => ErrorKind::ConnectionRefused,\n-        libc::WSAEADDRNOTAVAIL => ErrorKind::ConnectionRefused,\n+        libc::WSAEADDRINUSE => ErrorKind::AddrInUse,\n+        libc::WSAEADDRNOTAVAIL => ErrorKind::AddrNotAvailable,\n         libc::WSAECONNABORTED => ErrorKind::ConnectionAborted,\n         libc::WSAECONNREFUSED => ErrorKind::ConnectionRefused,\n         libc::WSAECONNRESET => ErrorKind::ConnectionReset,\n         libc::WSAEINVAL => ErrorKind::InvalidInput,\n         libc::WSAENOTCONN => ErrorKind::NotConnected,\n-        libc::WSAEWOULDBLOCK => ErrorKind::ResourceUnavailable,\n+        libc::WSAEWOULDBLOCK => ErrorKind::WouldBlock,\n \n         _ => ErrorKind::Other,\n     }"}]}