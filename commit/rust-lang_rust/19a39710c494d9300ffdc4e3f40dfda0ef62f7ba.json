{"sha": "19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTM5NzEwYzQ5NGQ5MzAwZmZkYzRlM2Y0MGRmZGEwZWY2MmY3YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-05T11:59:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-05T11:59:34Z"}, "message": "Auto merge of #26028 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #25925, #26001, #26010, #26011, #26017, #26020\n- Failed merges:", "tree": {"sha": "f2d56fe4efeb621e238b7d98424169b9f9fd5e6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d56fe4efeb621e238b7d98424169b9f9fd5e6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "html_url": "https://github.com/rust-lang/rust/commit/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef72938a8b9171abc5c4b463d3e8345dc0e603a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef72938a8b9171abc5c4b463d3e8345dc0e603a6", "html_url": "https://github.com/rust-lang/rust/commit/ef72938a8b9171abc5c4b463d3e8345dc0e603a6"}, {"sha": "eb6a70cbabbc74699e2b0331fef91be1fadad1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb6a70cbabbc74699e2b0331fef91be1fadad1bd", "html_url": "https://github.com/rust-lang/rust/commit/eb6a70cbabbc74699e2b0331fef91be1fadad1bd"}], "stats": {"total": 187, "additions": 139, "deletions": 48}, "files": [{"sha": "fba919b711586ad91e83cad19ace6cf7bfb5c344", "filename": "src/doc/index.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -25,7 +25,7 @@ series of small examples.\n If you need help with something, or just want to talk about Rust with others,\n there are a few places you can do that:\n \n-The Rust IRC channels on [irc.mozilla.org](http://irc.mozilla.org/) are the\n+The Rust IRC channels on [irc.mozilla.org](irc://irc.mozilla.org/) are the\n fastest way to get help.\n [`#rust`](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust) is\n the general discussion channel, and you'll find people willing to help you with\n@@ -40,15 +40,15 @@ There's also\n [`#rust-internals`](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals), which is for discussion of the development of Rust itself.\n \n You can also get help on [Stack\n-Overflow](http://stackoverflow.com/questions/tagged/rust). Searching for your\n+Overflow](https://stackoverflow.com/questions/tagged/rust). Searching for your\n problem might reveal someone who has asked it before!\n \n-There is an active [subreddit](http://reddit.com/r/rust) with lots of\n+There is an active [subreddit](https://reddit.com/r/rust) with lots of\n discussion and news about Rust.\n \n-There is also a [user forum](http://users.rust-lang.org), for all\n-user-oriented discussion, and a [developer\n-forum](http://internals.rust-lang.org/), where the development of Rust\n+There is also a [user forum](https://users.rust-lang.org), for all\n+user-oriented discussion, and a [developer \n+forum](https://internals.rust-lang.org/), where the development of Rust\n itself is discussed.\n \n # Specification\n@@ -61,7 +61,7 @@ the language in as much detail as possible is in [the reference](reference.html)\n Rust is still a young language, so there isn't a ton of tooling yet, but the\n tools we have are really nice.\n \n-[Cargo](http://crates.io) is Rust's package manager, and its website contains\n+[Cargo](https://crates.io) is Rust's package manager, and its website contains\n lots of good documentation.\n \n [`rustdoc`](book/documentation.html) is used to generate documentation for Rust code."}, {"sha": "2866cee3a1a63bb4546b7c3d833ed0f9453ede9c", "filename": "src/doc/trpl/for-loops.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Ftrpl%2Ffor-loops.md", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Ftrpl%2Ffor-loops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffor-loops.md?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -41,3 +41,45 @@ so our loop will print `0` through `9`, not `10`.\n Rust does not have the \u201cC-style\u201d `for` loop on purpose. Manually controlling\n each element of the loop is complicated and error prone, even for experienced C\n developers.\n+\n+# Enumerate\n+\n+When you need to keep track of how many times you already looped, you can use the `.enumerate()` function.\n+\n+## On ranges:\n+\n+```rust\n+for (i,j) in (5..10).enumerate() {\n+    println!(\"i = {} and j = {}\", i, j);\n+}\n+```\n+\n+Outputs:\n+\n+```text\n+i = 0 and j = 5\n+i = 1 and j = 6\n+i = 2 and j = 7\n+i = 3 and j = 8\n+i = 4 and j = 9\n+```\n+\n+Don't forget to add the parentheses around the range.\n+\n+## On iterators:\n+\n+```rust\n+# let lines = \"hello\\nworld\".lines();\n+for (linenumber, line) in lines.enumerate() {\n+    println!(\"{}: {}\", linenumber, line);\n+}\n+```\n+\n+Outputs:\n+\n+```text\n+0: Content of line one\n+1: Content of line two\n+2: Content of line tree\n+3: Content of line four\n+```"}, {"sha": "1317a1490903b435fda848f500d33ce9c5bbd0d2", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -224,7 +224,7 @@ more\" match. Both forms optionally include a separator, which can be any token\n except `+` or `*`.\n \n This system is based on\n-\"[Macro-by-Example](http://www.cs.indiana.edu/ftp/techreports/TR206.pdf)\"\n+\"[Macro-by-Example](https://www.cs.indiana.edu/ftp/techreports/TR206.pdf)\"\n (PDF link).\n \n # Hygiene\n@@ -319,7 +319,7 @@ syntax context where it was introduced. It\u2019s as though the variable `state`\n inside `main` is painted a different \"color\" from the variable `state` inside\n the macro, and therefore they don\u2019t conflict.\n \n-[hygienic macro system]: http://en.wikipedia.org/wiki/Hygienic_macro\n+[hygienic macro system]: https://en.wikipedia.org/wiki/Hygienic_macro\n \n This also restricts the ability of macros to introduce new bindings at the\n invocation site. Code such as the following will not work:\n@@ -622,7 +622,7 @@ invocation gives you another opportunity to pattern-match the macro\u2019s\n arguments.\n \n As an extreme example, it is possible, though hardly advisable, to implement\n-the [Bitwise Cyclic Tag](http://esolangs.org/wiki/Bitwise_Cyclic_Tag) automaton\n+the [Bitwise Cyclic Tag](https://esolangs.org/wiki/Bitwise_Cyclic_Tag) automaton\n within Rust\u2019s macro system.\n \n ```rust"}, {"sha": "775a6fbd293589337529cad99097d18e00bd2b7f", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -155,7 +155,7 @@ First, any borrow must last for a smaller scope than the owner. Second, you may\n have one or the other of these two kinds of borrows, but not both at the same\n time:\n \n-* 0 to N references (`&T`) to a resource.\n+* one or more references (`&T`) to a resource.\n * exactly one mutable reference (`&mut T`)\n \n "}, {"sha": "175dabaf1d2cb999f070e9944b24a3ef6aaf0733", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -38,7 +38,7 @@\n //!\n //! * Introducing inherited mutability roots to shared types.\n //! * Implementation details of logically-immutable methods.\n-//! * Mutating implementations of `clone`.\n+//! * Mutating implementations of `Clone`.\n //!\n //! ## Introducing inherited mutability roots to shared types\n //!\n@@ -109,7 +109,7 @@\n //! }\n //! ```\n //!\n-//! ## Mutating implementations of `clone`\n+//! ## Mutating implementations of `Clone`\n //!\n //! This is simply a special - but common - case of the previous: hiding mutability for operations\n //! that appear to be immutable. The `clone` method is expected to not change the source value, and"}, {"sha": "4982215d02f49f45d81e2a0f1c747cebcbda41de", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -252,8 +252,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n                 s.push_str(&highlight::highlight(&text,\n-                                                 None,\n-                                                 Some(\"rust-example-rendered\")));\n+                                                 Some(\"rust-example-rendered\"),\n+                                                 None));\n                 let output = CString::new(s).unwrap();\n                 hoedown_buffer_puts(ob, output.as_ptr());\n             })"}, {"sha": "ea80151623bbdc53aa5a473c1ee01c272d7c0b29", "filename": "src/libstd/os/android/raw.rs", "status": "modified", "additions": 82, "deletions": 33, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a39710c494d9300ffdc4e3f40dfda0ef62f7ba/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs?ref=19a39710c494d9300ffdc4e3f40dfda0ef62f7ba", "patch": "@@ -10,37 +10,86 @@\n \n //! Android-specific raw type definitions\n \n-use os::raw::{c_uint, c_uchar, c_ulonglong, c_longlong, c_ulong};\n-use os::unix::raw::{uid_t, gid_t};\n-\n-pub type blkcnt_t = u32;\n-pub type blksize_t = u32;\n-pub type dev_t = u32;\n-pub type ino_t = u32;\n-pub type mode_t = u16;\n-pub type nlink_t = u16;\n-pub type off_t = i32;\n-pub type time_t = i32;\n-\n-#[repr(C)]\n-pub struct stat {\n-    pub st_dev: c_ulonglong,\n-    pub __pad0: [c_uchar; 4],\n-    pub __st_ino: ino_t,\n-    pub st_mode: c_uint,\n-    pub st_nlink: c_uint,\n-    pub st_uid: uid_t,\n-    pub st_gid: gid_t,\n-    pub st_rdev: c_ulonglong,\n-    pub __pad3: [c_uchar; 4],\n-    pub st_size: c_longlong,\n-    pub st_blksize: blksize_t,\n-    pub st_blocks: c_ulonglong,\n-    pub st_atime: time_t,\n-    pub st_atime_nsec: c_ulong,\n-    pub st_mtime: time_t,\n-    pub st_mtime_nsec: c_ulong,\n-    pub st_ctime: time_t,\n-    pub st_ctime_nsec: c_ulong,\n-    pub st_ino: c_ulonglong,\n+#[doc(inline)]\n+pub use self::arch::{dev_t, mode_t, blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n+\n+#[cfg(target_arch = \"arm\")]\n+mod arch {\n+    use os::raw::{c_uint, c_uchar, c_ulonglong, c_longlong, c_ulong};\n+    use os::unix::raw::{uid_t, gid_t};\n+\n+    pub type dev_t = u32;\n+    pub type mode_t = u16;\n+\n+    pub type blkcnt_t = u32;\n+    pub type blksize_t = u32;\n+    pub type ino_t = u32;\n+    pub type nlink_t = u16;\n+    pub type off_t = i32;\n+    pub type time_t = i32;\n+\n+    #[repr(C)]\n+    pub struct stat {\n+        pub st_dev: c_ulonglong,\n+        pub __pad0: [c_uchar; 4],\n+        pub __st_ino: ino_t,\n+        pub st_mode: c_uint,\n+        pub st_nlink: c_uint,\n+        pub st_uid: uid_t,\n+        pub st_gid: gid_t,\n+        pub st_rdev: c_ulonglong,\n+        pub __pad3: [c_uchar; 4],\n+        pub st_size: c_longlong,\n+        pub st_blksize: blksize_t,\n+        pub st_blocks: c_ulonglong,\n+        pub st_atime: time_t,\n+        pub st_atime_nsec: c_ulong,\n+        pub st_mtime: time_t,\n+        pub st_mtime_nsec: c_ulong,\n+        pub st_ctime: time_t,\n+        pub st_ctime_nsec: c_ulong,\n+        pub st_ino: c_ulonglong,\n+    }\n+\n+}\n+\n+\n+#[cfg(target_arch = \"aarch64\")]\n+mod arch {\n+    use os::raw::{c_uchar, c_ulong};\n+    use os::unix::raw::{uid_t, gid_t};\n+\n+    pub type dev_t = u64;\n+    pub type mode_t = u32;\n+\n+    pub type blkcnt_t = u64;\n+    pub type blksize_t = u32;\n+    pub type ino_t = u64;\n+    pub type nlink_t = u32;\n+    pub type off_t = i64;\n+    pub type time_t = i64;\n+\n+    #[repr(C)]\n+    pub struct stat {\n+        pub st_dev: dev_t,\n+        pub __pad0: [c_uchar; 4],\n+        pub __st_ino: ino_t,\n+        pub st_mode: mode_t,\n+        pub st_nlink: nlink_t,\n+        pub st_uid: uid_t,\n+        pub st_gid: gid_t,\n+        pub st_rdev: dev_t,\n+        pub __pad3: [c_uchar; 4],\n+        pub st_size: off_t,\n+        pub st_blksize: blksize_t,\n+        pub st_blocks: blkcnt_t,\n+        pub st_atime: time_t,\n+        pub st_atime_nsec: c_ulong,\n+        pub st_mtime: time_t,\n+        pub st_mtime_nsec: c_ulong,\n+        pub st_ctime: time_t,\n+        pub st_ctime_nsec: c_ulong,\n+        pub st_ino: ino_t,\n+    }\n+\n }"}]}