{"sha": "9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "node_id": "C_kwDOAAsO6NoAKDllNjgzNDQyYTllZDRkNWMzNTNmNDBkNThkYzY0YTBiYzY0OTJhNTk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-03T12:23:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-03T12:29:49Z"}, "message": "Only check inlining counter after recusing.", "tree": {"sha": "60925645f577b901bf789f41d8ac514ab1eec446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60925645f577b901bf789f41d8ac514ab1eec446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "html_url": "https://github.com/rust-lang/rust/commit/9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5", "html_url": "https://github.com/rust-lang/rust/commit/0939ec13d88dfafcbb7f25314bd0d2f1519bf0d5"}], "stats": {"total": 660, "additions": 392, "deletions": 268}, "files": [{"sha": "5487b5987e00171ac91372e1f9295356fea926f8", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -145,13 +145,16 @@ impl<'tcx> Inliner<'tcx> {\n                 Ok(new_blocks) => {\n                     debug!(\"inlined {}\", callsite.callee);\n                     self.changed = true;\n+\n+                    self.history.push(callsite.callee.def_id());\n+                    self.process_blocks(caller_body, new_blocks);\n+                    self.history.pop();\n+\n                     inlined_count += 1;\n                     if inlined_count == inline_limit {\n+                        debug!(\"inline count reached\");\n                         return;\n                     }\n-                    self.history.push(callsite.callee.def_id());\n-                    self.process_blocks(caller_body, new_blocks);\n-                    self.history.pop();\n                 }\n             }\n         }"}, {"sha": "7a39aae1baf5dbf1bfebb6008f8f22b58c555646", "filename": "tests/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -11,6 +11,14 @@\n +         let mut _3: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         let _4: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n++             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++                     debug g => main;     // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n++                     let _6: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n++                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -30,7 +38,11 @@\n +         _3 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _4 = move (*_3)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _6 = main() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -50,6 +62,7 @@\n +     }\n + \n +     bb4: {\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2"}, {"sha": "7fad6aba82ec195e2478d55cfa569f6affceb9e9", "filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.diff", "status": "modified", "additions": 103, "deletions": 3, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -12,6 +12,26 @@\n +             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n +             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n +             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n++             scope 3 (inlined <() as E>::call) { // at $DIR/exponential_runtime.rs:62:9: 62:25\n++                 let _8: ();              // in scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++                 let _9: ();              // in scope 3 at $DIR/exponential_runtime.rs:51:9: 51:25\n++                 let _10: ();             // in scope 3 at $DIR/exponential_runtime.rs:52:9: 52:25\n++                 scope 4 (inlined <() as D>::call) { // at $DIR/exponential_runtime.rs:50:9: 50:25\n++                     let _11: ();         // in scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++                     let _12: ();         // in scope 4 at $DIR/exponential_runtime.rs:39:9: 39:25\n++                     let _13: ();         // in scope 4 at $DIR/exponential_runtime.rs:40:9: 40:25\n++                     scope 5 (inlined <() as C>::call) { // at $DIR/exponential_runtime.rs:38:9: 38:25\n++                         let _14: ();     // in scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++                         let _15: ();     // in scope 5 at $DIR/exponential_runtime.rs:27:9: 27:25\n++                         let _16: ();     // in scope 5 at $DIR/exponential_runtime.rs:28:9: 28:25\n++                         scope 6 (inlined <() as B>::call) { // at $DIR/exponential_runtime.rs:26:9: 26:25\n++                             let _17: (); // in scope 6 at $DIR/exponential_runtime.rs:14:9: 14:25\n++                             let _18: (); // in scope 6 at $DIR/exponential_runtime.rs:15:9: 15:25\n++                             let _19: (); // in scope 6 at $DIR/exponential_runtime.rs:16:9: 16:25\n++                         }\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -24,12 +44,24 @@\n +         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n +         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n +         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n-+         _5 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_8);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_9);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_10);                // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_11);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageLive(_12);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageLive(_13);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageLive(_14);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageLive(_15);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageLive(_16);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageLive(_17);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageLive(_18);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageLive(_19);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         _17 = <() as A>::call() -> bb12; // scope 6 at $DIR/exponential_runtime.rs:14:9: 14:25\n                                            // mir::Constant\n -                                          // + span: $DIR/exponential_runtime.rs:87:5: 87:20\n -                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n-+                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/exponential_runtime.rs:14:9: 14:23\n++                                          // + literal: Const { ty: fn() {<() as A>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n@@ -59,6 +91,9 @@\n +     }\n + \n +     bb4: {\n++         StorageDead(_10);                // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageDead(_9);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageDead(_8);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n +         _6 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n +                                          // mir::Constant\n +                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n@@ -70,6 +105,71 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/exponential_runtime.rs:64:9: 64:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb6: {\n++         StorageDead(_13);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageDead(_12);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageDead(_11);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         _9 = <() as D>::call() -> bb7;   // scope 3 at $DIR/exponential_runtime.rs:51:9: 51:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:51:9: 51:23\n++                                          // + literal: Const { ty: fn() {<() as D>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb7: {\n++         _10 = <() as D>::call() -> bb4;  // scope 3 at $DIR/exponential_runtime.rs:52:9: 52:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:52:9: 52:23\n++                                          // + literal: Const { ty: fn() {<() as D>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb8: {\n++         StorageDead(_16);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageDead(_15);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageDead(_14);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         _12 = <() as C>::call() -> bb9;  // scope 4 at $DIR/exponential_runtime.rs:39:9: 39:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:39:9: 39:23\n++                                          // + literal: Const { ty: fn() {<() as C>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb9: {\n++         _13 = <() as C>::call() -> bb6;  // scope 4 at $DIR/exponential_runtime.rs:40:9: 40:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:40:9: 40:23\n++                                          // + literal: Const { ty: fn() {<() as C>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb10: {\n++         StorageDead(_19);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageDead(_18);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageDead(_17);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         _15 = <() as B>::call() -> bb11; // scope 5 at $DIR/exponential_runtime.rs:27:9: 27:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:27:9: 27:23\n++                                          // + literal: Const { ty: fn() {<() as B>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb11: {\n++         _16 = <() as B>::call() -> bb8;  // scope 5 at $DIR/exponential_runtime.rs:28:9: 28:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:28:9: 28:23\n++                                          // + literal: Const { ty: fn() {<() as B>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb12: {\n++         _18 = <() as A>::call() -> bb13; // scope 6 at $DIR/exponential_runtime.rs:15:9: 15:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:15:9: 15:23\n++                                          // + literal: Const { ty: fn() {<() as A>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb13: {\n++         _19 = <() as A>::call() -> bb10; // scope 6 at $DIR/exponential_runtime.rs:16:9: 16:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:16:9: 16:23\n++                                          // + literal: Const { ty: fn() {<() as A>::call}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "48f0bd10301834497767e45a5d9e437c4292fdef", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -10,6 +10,14 @@\n +         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:54:22: 54:23\n +         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8\n++             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 scope 4 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:60:5: 60:12\n++                     debug f => f;        // in scope 4 at $DIR/inline_cycle.rs:54:22: 54:23\n++                     let _5: ();          // in scope 4 at $DIR/inline_cycle.rs:55:5: 55:8\n++                     scope 5 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -27,10 +35,15 @@\n +         StorageLive(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n-+         _3 = move _2() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _5 = f() -> bb1;                 // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n +         StorageDead(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12"}, {"sha": "8696e624b2237d9782466dadf2fb59c16de23974", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -6,18 +6,20 @@\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:10:5: 10:24\n +         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:39:9: 39:31\n++             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:32:9: 32:28\n++             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:32:9: 32:28\n++         _1 = <B<C> as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle_generic.rs:24:9: 24:31\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle_generic.rs:10:5: 10:22\n -                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/inline_cycle_generic.rs:32:9: 32:26\n-+                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/inline_cycle_generic.rs:24:9: 24:29\n++                                          // + literal: Const { ty: fn() {<B<C> as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "78cd47c5f4bf4f845a18fda65a2214abb5e95d49", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -20,6 +20,8 @@\n +             }\n +         }\n +         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n++             scope 5 (inlined sleep) {    // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++             }\n +         }\n +     }\n   \n@@ -40,44 +42,11 @@\n +         _3 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         StorageLive(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n +         _8 = const ();                   // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         _4 = move (*_3)() -> [return: bb6, unwind: bb4]; // scope 4 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n +     }\n + \n +     bb1: {\n-+         StorageDead(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n-+         StorageLive(_7);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _7 = move _4;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _1 = (move _7, move _6);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n-+         StorageDead(_7);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n-+         drop(_2) -> bb2;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n-+     }\n-+ \n-+     bb2: {\n-+         unreachable;                     // scope 0 at $DIR/inline_diverging.rs:30:2: 30:2\n-+     }\n-+ \n-+     bb3 (cleanup): {\n-+         drop(_4) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n-+     }\n-+ \n-+     bb4 (cleanup): {\n-+         drop(_2) -> [return: bb5, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n-+     }\n-+ \n-+     bb5 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/inline_diverging.rs:26:1: 30:2\n-+     }\n-+ \n-+     bb6: {\n-+         StorageDead(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n-+         StorageLive(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         _5 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         _6 = <fn() -> ! {sleep} as Fn<()>>::call(move _5, const ()) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n-+                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }\n++         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "dff3cbbe76d2272d79dfebe3aedd5b0d1552c259", "filename": "tests/mir-opt/pre-codegen/checked_ops.checked_shl.PreCodegen.after.mir", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -38,37 +38,37 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n                                         debug self => _4; // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                         scope 11 (inlined <u32 as TryFrom<u32>>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                             debug value => _4; // in scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                            scope 21 (inlined <u32 as Into<u32>>::into) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                                debug self => _4; // in scope 21 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                                scope 22 (inlined <u32 as From<u32>>::from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                                    debug t => _4; // in scope 22 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                            scope 12 (inlined <u32 as Into<u32>>::into) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                debug self => _4; // in scope 12 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                scope 13 (inlined <u32 as From<u32>>::from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                    debug t => _4; // in scope 13 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                                 }\n                                             }\n                                         }\n                                     }\n-                                    scope 12 (inlined Result::<u32, Infallible>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                        debug self => _5; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n-                                        let _6: u32; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n-                                        scope 13 {\n-                                            debug x => _6; // in scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                    scope 14 (inlined Result::<u32, Infallible>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _5; // in scope 14 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        let _6: u32; // in scope 14 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        scope 15 {\n+                                            debug x => _6; // in scope 15 at $SRC_DIR/core/src/result.rs:LL:COL\n                                         }\n                                     }\n-                                    scope 14 (inlined #[track_caller] Option::<u32>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                        debug self => _7; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n-                                        let mut _13: &std::option::Option<u32>; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n-                                        scope 15 {\n-                                            debug val => _8; // in scope 15 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                    scope 16 (inlined #[track_caller] Option::<u32>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _7; // in scope 16 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        let mut _13: &std::option::Option<u32>; // in scope 16 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        scope 17 {\n+                                            debug val => _8; // in scope 17 at $SRC_DIR/core/src/option.rs:LL:COL\n                                         }\n-                                        scope 16 {\n-                                            scope 18 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                                                scope 19 {\n-                                                    scope 20 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                        scope 18 {\n+                                            scope 20 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                                scope 21 {\n+                                                    scope 22 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                                                     }\n                                                 }\n                                             }\n                                         }\n-                                        scope 17 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                                            debug self => _13; // in scope 17 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        scope 19 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                            debug self => _13; // in scope 19 at $SRC_DIR/core/src/option.rs:LL:COL\n                                         }\n                                     }\n                                 }\n@@ -84,7 +84,7 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n         StorageLive(_10);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n         StorageLive(_11);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n         StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageLive(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         _3 = const 31_u32;               // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         _4 = BitAnd(_2, move _3);        // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -94,12 +94,12 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n         StorageLive(_5);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         _5 = Result::<u32, Infallible>::Ok(_4); // scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         StorageLive(_6);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _6 = move ((_5 as Ok).0: u32);   // scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _7 = Option::<u32>::Some(move _6); // scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _6 = move ((_5 as Ok).0: u32);   // scope 14 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _7 = Option::<u32>::Some(move _6); // scope 15 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_6);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageDead(_5);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_13);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _8 = move ((_7 as Some).0: u32); // scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _8 = move ((_7 as Some).0: u32); // scope 16 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_13);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageDead(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         _9 = unchecked_shl::<u32>(_1, move _8) -> [return: bb1, unwind unreachable]; // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -110,7 +110,7 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n \n     bb1: {\n         StorageDead(_8);                 // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         _10 = Ge(_2, const _);           // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         _11 = move _9;                   // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL"}, {"sha": "86e0a62b6f96885555ffffe439e2cee6314550b3", "filename": "tests/mir-opt/pre-codegen/loops.int_range.PreCodegen.after.mir", "status": "modified", "additions": 51, "deletions": 45, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -7,29 +7,35 @@ fn int_range(_1: usize, _2: usize) -> () {\n     let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n     let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n     let mut _5: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n-    let mut _9: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n-    let mut _12: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n-    let _14: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _11: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _14: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _16: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n     scope 1 {\n         debug iter => _4;                // in scope 1 at $DIR/loops.rs:+1:14: +1:24\n-        let _13: usize;                  // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        let _15: usize;                  // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n         scope 2 {\n-            debug i => _13;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+            debug i => _15;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n         }\n         scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:8:14: 8:24\n             debug self => _5;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n             scope 5 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 debug self => _5;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 let mut _6: &usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 let mut _7: &usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let mut _8: bool;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let _10: usize;          // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let mut _11: usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _10: bool;       // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _12: usize;          // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _13: usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 scope 6 {\n-                    debug old => _10;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    debug old => _12;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                     scope 7 {\n                     }\n                 }\n+                scope 8 (inlined cmp::impls::<impl PartialOrd for usize>::lt) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    debug self => _6;    // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    debug other => _7;   // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    let mut _8: usize;   // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    let mut _9: usize;   // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                }\n             }\n         }\n     }\n@@ -45,74 +51,74 @@ fn int_range(_1: usize, _2: usize) -> () {\n     }\n \n     bb1: {\n-        StorageLive(_9);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        StorageLive(_11);                // scope 1 at $DIR/loops.rs:+1:14: +1:24\n         _5 = &mut _4;                    // scope 1 at $DIR/loops.rs:+1:14: +1:24\n-        StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _6 = &((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _7 = &((*_5).1: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _8 = <usize as PartialOrd>::lt(move _6, move _7) -> bb2; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> bool {<usize as PartialOrd>::lt}, val: Value(<ZST>) }\n-    }\n-\n-    bb2: {\n+        StorageLive(_8);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _8 = (*_6);                      // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_9);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _9 = (*_7);                      // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _10 = Lt(move _8, move _9);      // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_9);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_8);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        switchInt(move _8) -> [0: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _10) -> [0: bb2, otherwise: bb3]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb3: {\n-        _9 = Option::<usize>::None;      // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb2: {\n+        _11 = Option::<usize>::None;     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb4: {\n-        _10 = ((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _11 = <usize as Step>::forward_unchecked(_10, const 1_usize) -> bb5; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb3: {\n+        _12 = ((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_13);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _13 = <usize as Step>::forward_unchecked(_12, const 1_usize) -> bb4; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> usize {<usize as Step>::forward_unchecked}, val: Value(<ZST>) }\n     }\n \n-    bb5: {\n-        ((*_5).0: usize) = move _11;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _9 = Option::<usize>::Some(_10); // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb4: {\n+        ((*_5).0: usize) = move _13;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_13);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _11 = Option::<usize>::Some(_12); // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb6: {\n-        StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _12 = discriminant(_9);          // scope 1 at $DIR/loops.rs:+1:14: +1:24\n-        switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    bb5: {\n+        StorageDead(_10);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _14 = discriminant(_11);         // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        switchInt(move _14) -> [0: bb6, 1: bb7, otherwise: bb9]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n     }\n \n-    bb7: {\n-        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+    bb6: {\n+        StorageDead(_11);                // scope 1 at $DIR/loops.rs:+3:5: +3:6\n         StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n         return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n     }\n \n-    bb8: {\n-        _13 = ((_9 as Some).0: usize);   // scope 1 at $DIR/loops.rs:+1:9: +1:10\n-        _14 = opaque::<usize>(_13) -> bb9; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+    bb7: {\n+        _15 = ((_11 as Some).0: usize);  // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _16 = opaque::<usize>(_15) -> bb8; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n                                          // mir::Constant\n                                          // + span: $DIR/loops.rs:9:9: 9:15\n                                          // + literal: Const { ty: fn(usize) {opaque::<usize>}, val: Value(<ZST>) }\n     }\n \n-    bb9: {\n-        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+    bb8: {\n+        StorageDead(_11);                // scope 1 at $DIR/loops.rs:+3:5: +3:6\n         goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n     }\n \n-    bb10: {\n+    bb9: {\n         unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:24\n     }\n }"}, {"sha": "06a4e35f1f900a4d55f7e047b9bac3fb558e2e7c", "filename": "tests/mir-opt/pre-codegen/range_iter.forward_loop.PreCodegen.after.mir", "status": "modified", "additions": 64, "deletions": 58, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -8,31 +8,37 @@ fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n     let mut _4: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     let mut _5: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     let mut _6: &mut std::ops::Range<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let mut _10: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let mut _13: isize;                  // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n-    let mut _15: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n-    let mut _16: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n-    let _17: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _12: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _15: isize;                  // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n+    let mut _17: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n+    let mut _18: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    let _19: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     scope 1 {\n         debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        let _14: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        let _16: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _14;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n+            debug x => _16;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n         }\n         scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:21:14: 21:24\n             debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n             scope 5 (inlined <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 debug self => _6;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 let mut _7: &u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 let mut _8: &u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let mut _9: bool;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let _11: u32;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let mut _12: u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _11: bool;       // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _13: u32;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _14: u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 scope 6 {\n-                    debug old => _11;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    debug old => _13;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                     scope 7 {\n                     }\n                 }\n+                scope 8 (inlined cmp::impls::<impl PartialOrd for u32>::lt) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    debug self => _7;    // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    debug other => _8;   // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    let mut _9: u32;     // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    let mut _10: u32;    // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                }\n             }\n         }\n     }\n@@ -48,92 +54,92 @@ fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n     }\n \n     bb1: {\n-        StorageLive(_10);                // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        StorageLive(_12);                // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n         _6 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _7 = &((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _8 = &((*_6).1: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _9 = <u32 as PartialOrd>::lt(move _7, move _8) -> [return: bb2, unwind: bb12]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> bool {<u32 as PartialOrd>::lt}, val: Value(<ZST>) }\n-    }\n-\n-    bb2: {\n+        StorageLive(_9);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _9 = (*_7);                      // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_10);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _10 = (*_8);                     // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _11 = Lt(move _9, move _10);     // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_10);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_9);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _11) -> [0: bb2, otherwise: bb3]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb3: {\n-        _10 = Option::<u32>::None;       // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb2: {\n+        _12 = Option::<u32>::None;       // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb4: {\n-        _11 = ((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _12 = <u32 as Step>::forward_unchecked(_11, const 1_usize) -> [return: bb5, unwind: bb12]; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb3: {\n+        _13 = ((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_14);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _14 = <u32 as Step>::forward_unchecked(_13, const 1_usize) -> [return: bb4, unwind: bb11]; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // + literal: Const { ty: unsafe fn(u32, usize) -> u32 {<u32 as Step>::forward_unchecked}, val: Value(<ZST>) }\n     }\n \n-    bb5: {\n-        ((*_6).0: u32) = move _12;       // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _10 = Option::<u32>::Some(_11);  // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb4: {\n+        ((*_6).0: u32) = move _14;       // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_14);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = Option::<u32>::Some(_13);  // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb6: {\n-        StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _13 = discriminant(_10);         // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb11]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+    bb5: {\n+        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _15 = discriminant(_12);         // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n     }\n \n-    bb7: {\n-        StorageDead(_10);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+    bb6: {\n+        StorageDead(_12);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n         StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n-        drop(_3) -> bb8;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+        drop(_3) -> bb7;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n-    bb8: {\n+    bb7: {\n         return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n     }\n \n-    bb9: {\n-        _14 = ((_10 as Some).0: u32);    // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n-        StorageLive(_15);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        _15 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        StorageLive(_16);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _16 = (_14,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _17 = <impl Fn(u32) as Fn<(u32,)>>::call(move _15, move _16) -> [return: bb10, unwind: bb12]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+    bb8: {\n+        _16 = ((_12 as Some).0: u32);    // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        StorageLive(_17);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        _17 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        StorageLive(_18);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _18 = (_16,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _19 = <impl Fn(u32) as Fn<(u32,)>>::call(move _17, move _18) -> [return: bb9, unwind: bb11]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n                                          // mir::Constant\n                                          // + span: $DIR/range_iter.rs:22:9: 22:10\n                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n     }\n \n-    bb10: {\n-        StorageDead(_16);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_15);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_10);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+    bb9: {\n+        StorageDead(_18);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_17);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_12);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n         goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n     }\n \n-    bb11: {\n+    bb10: {\n         unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n     }\n \n-    bb12 (cleanup): {\n-        drop(_3) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    bb11 (cleanup): {\n+        drop(_3) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n-    bb13 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n     }\n }"}, {"sha": "f15722deee0131b6d6372b3d266821ecc6b74742", "filename": "tests/mir-opt/pre-codegen/range_iter.range_iter_next.PreCodegen.after.mir", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -9,60 +9,66 @@ fn range_iter_next(_1: &mut std::ops::Range<u32>) -> Option<u32> {\n             debug self => _1;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n             let mut _2: &u32;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n             let mut _3: &u32;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-            let mut _4: bool;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-            let _5: u32;                 // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-            let mut _6: u32;             // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let mut _6: bool;            // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let _7: u32;                 // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            let mut _8: u32;             // in scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n             scope 3 {\n-                debug old => _5;         // in scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug old => _7;         // in scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 scope 4 {\n                 }\n             }\n+            scope 5 (inlined cmp::impls::<impl PartialOrd for u32>::lt) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug self => _2;        // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug other => _3;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _4: u32;         // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _5: u32;         // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_2);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _2 = &((*_1).0: u32);            // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _3 = &((*_1).1: u32);            // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _4 = <u32 as PartialOrd>::lt(move _2, move _3) -> bb1; // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> bool {<u32 as PartialOrd>::lt}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n+        StorageLive(_4);                 // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _4 = (*_2);                      // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_5);                 // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _5 = (*_3);                      // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _6 = Lt(move _4, move _5);       // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_5);                 // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_4);                 // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageDead(_2);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        switchInt(move _4) -> [0: bb2, otherwise: bb3]; // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb2: {\n+    bb1: {\n         _0 = Option::<u32>::None;        // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb4;                     // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb3: {\n-        _5 = ((*_1).0: u32);             // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _6 = <u32 as Step>::forward_unchecked(_5, const 1_usize) -> bb4; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb2: {\n+        _7 = ((*_1).0: u32);             // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = <u32 as Step>::forward_unchecked(_7, const 1_usize) -> bb3; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // + literal: Const { ty: unsafe fn(u32, usize) -> u32 {<u32 as Step>::forward_unchecked}, val: Value(<ZST>) }\n     }\n \n-    bb4: {\n-        ((*_1).0: u32) = move _6;        // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _0 = Option::<u32>::Some(_5);    // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb3: {\n+        ((*_1).0: u32) = move _8;        // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _0 = Option::<u32>::Some(_7);    // scope 3 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb4;                     // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb5: {\n-        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb4: {\n+        StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         return;                          // scope 0 at $DIR/range_iter.rs:+2:2: +2:2\n     }\n }"}, {"sha": "870496f14ea90221a7754d437357013cfcd85e4b", "filename": "tests/mir-opt/pre-codegen/slice_iter.range_loop.PreCodegen.after.mir", "status": "modified", "additions": 72, "deletions": 66, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e683442a9ed4d5c353f40d58dc64a0bc6492a59/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir?ref=9e683442a9ed4d5c353f40d58dc64a0bc6492a59", "patch": "@@ -8,21 +8,21 @@ fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n     let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n     let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n     let mut _6: &mut std::ops::Range<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n-    let mut _10: std::option::Option<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n-    let mut _13: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +4:6\n-    let mut _15: usize;                  // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n-    let mut _16: bool;                   // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n-    let mut _18: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:10\n-    let mut _19: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:16\n-    let _20: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _12: std::option::Option<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _15: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +4:6\n+    let mut _17: usize;                  // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n+    let mut _18: bool;                   // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n+    let mut _20: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:10\n+    let mut _21: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:16\n+    let _22: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n     scope 1 {\n         debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n-        let _14: usize;                  // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        let _16: usize;                  // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug i => _14;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n-            let _17: &T;                 // in scope 2 at $DIR/slice_iter.rs:+2:13: +2:14\n+            debug i => _16;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+            let _19: &T;                 // in scope 2 at $DIR/slice_iter.rs:+2:13: +2:14\n             scope 3 {\n-                debug x => _17;          // in scope 3 at $DIR/slice_iter.rs:+2:13: +2:14\n+                debug x => _19;          // in scope 3 at $DIR/slice_iter.rs:+2:13: +2:14\n             }\n         }\n         scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/slice_iter.rs:49:14: 49:28\n@@ -31,14 +31,20 @@ fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n                 debug self => _6;        // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 let mut _7: &usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 let mut _8: &usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let mut _9: bool;        // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let _11: usize;          // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                let mut _12: usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _11: bool;       // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _13: usize;          // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _14: usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                 scope 7 {\n-                    debug old => _11;    // in scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    debug old => _13;    // in scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                     scope 8 {\n                     }\n                 }\n+                scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::lt) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    debug self => _7;    // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    debug other => _8;   // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    let mut _9: usize;   // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                    let mut _10: usize;  // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                }\n             }\n         }\n     }\n@@ -57,99 +63,99 @@ fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n     }\n \n     bb1: {\n-        StorageLive(_10);                // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        StorageLive(_12);                // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n         _6 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n-        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _7 = &((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         _8 = &((*_6).1: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _9 = <usize as PartialOrd>::lt(move _7, move _8) -> [return: bb2, unwind: bb13]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> bool {<usize as PartialOrd>::lt}, val: Value(<ZST>) }\n-    }\n-\n-    bb2: {\n+        StorageLive(_9);                 // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _9 = (*_7);                      // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_10);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _10 = (*_8);                     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _11 = Lt(move _9, move _10);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_10);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_9);                 // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _11) -> [0: bb2, otherwise: bb3]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb3: {\n-        _10 = Option::<usize>::None;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb6;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb2: {\n+        _12 = Option::<usize>::None;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n-    bb4: {\n-        _11 = ((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _12 = <usize as Step>::forward_unchecked(_11, const 1_usize) -> [return: bb5, unwind: bb13]; // scope 8 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    bb3: {\n+        _13 = ((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _14 = <usize as Step>::forward_unchecked(_13, const 1_usize) -> [return: bb4, unwind: bb12]; // scope 8 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> usize {<usize as Step>::forward_unchecked}, val: Value(<ZST>) }\n     }\n \n+    bb4: {\n+        ((*_6).0: usize) = move _14;     // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = Option::<usize>::Some(_13); // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb5;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n     bb5: {\n-        ((*_6).0: usize) = move _12;     // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _10 = Option::<usize>::Some(_11); // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        goto -> bb6;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _15 = discriminant(_12);         // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb11]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n     }\n \n     bb6: {\n-        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n-        _13 = discriminant(_10);         // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n-        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb12]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        StorageDead(_12);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n+        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+4:5: +4:6\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n     }\n \n     bb7: {\n-        StorageDead(_10);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n-        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+4:5: +4:6\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+5:2: +5:2\n     }\n \n     bb8: {\n-        return;                          // scope 0 at $DIR/slice_iter.rs:+5:2: +5:2\n+        _16 = ((_12 as Some).0: usize);  // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        _17 = Len((*_1));                // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        _18 = Lt(_16, _17);              // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        assert(move _18, \"index out of bounds: the length is {} but the index is {}\", move _17, _16) -> [success: bb9, unwind: bb12]; // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n     }\n \n     bb9: {\n-        _14 = ((_10 as Some).0: usize);  // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n-        _15 = Len((*_1));                // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n-        _16 = Lt(_14, _15);              // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n-        assert(move _16, \"index out of bounds: the length is {} but the index is {}\", move _15, _14) -> [success: bb10, unwind: bb13]; // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n-    }\n-\n-    bb10: {\n-        _17 = &(*_1)[_14];               // scope 2 at $DIR/slice_iter.rs:+2:17: +2:26\n-        StorageLive(_18);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n-        _18 = &_2;                       // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n-        StorageLive(_19);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n-        _19 = (_14, _17);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n-        _20 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _18, move _19) -> [return: bb11, unwind: bb13]; // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _19 = &(*_1)[_16];               // scope 2 at $DIR/slice_iter.rs:+2:17: +2:26\n+        StorageLive(_20);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n+        _20 = &_2;                       // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n+        StorageLive(_21);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _21 = (_16, _19);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _22 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _20, move _21) -> [return: bb10, unwind: bb12]; // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n                                          // mir::Constant\n                                          // + span: $DIR/slice_iter.rs:51:9: 51:10\n                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(usize, &T), (usize, &T)) -> <impl Fn(usize, &T) as FnOnce<(usize, &T)>>::Output {<impl Fn(usize, &T) as Fn<(usize, &T)>>::call}, val: Value(<ZST>) }\n     }\n \n-    bb11: {\n-        StorageDead(_19);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n-        StorageDead(_18);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n-        StorageDead(_10);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n+    bb10: {\n+        StorageDead(_21);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n+        StorageDead(_20);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n+        StorageDead(_12);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n         goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +4:6\n     }\n \n-    bb12: {\n+    bb11: {\n         unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n     }\n \n-    bb13 (cleanup): {\n-        drop(_2) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+    bb12 (cleanup): {\n+        drop(_2) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n     }\n \n-    bb14 (cleanup): {\n+    bb13 (cleanup): {\n         resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +5:2\n     }\n }"}]}