{"sha": "2dbaa05af8f2aeef709712725e103836405fa5f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmFhMDVhZjhmMmFlZWY3MDk3MTI3MjVlMTAzODM2NDA1ZmE1ZjU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-01T10:54:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-01T11:23:13Z"}, "message": "Remove support for native types\n\nIssue #1673", "tree": {"sha": "9b60a37a5ee7c9d93910e2e8e8c7589730b23d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b60a37a5ee7c9d93910e2e8e8c7589730b23d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbaa05af8f2aeef709712725e103836405fa5f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbaa05af8f2aeef709712725e103836405fa5f5", "html_url": "https://github.com/rust-lang/rust/commit/2dbaa05af8f2aeef709712725e103836405fa5f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbaa05af8f2aeef709712725e103836405fa5f5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856a544d0c55ba00ddcc8aa821e642796673c40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/856a544d0c55ba00ddcc8aa821e642796673c40e", "html_url": "https://github.com/rust-lang/rust/commit/856a544d0c55ba00ddcc8aa821e642796673c40e"}], "stats": {"total": 141, "additions": 17, "deletions": 124}, "files": [{"sha": "b26eb52eaf5254e3b758fb5dcf9cfcbec110fd22", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -198,7 +198,6 @@ fn lookup_def(cnum: ast::crate_num, data: @[u8], did_: ast::def_id) ->\n           'f' { ast::def_fn(did, ast::impure_fn) }\n           'p' { ast::def_fn(did, ast::pure_fn) }\n           'y' { ast::def_ty(did) }\n-          'T' { ast::def_native_ty(did) }\n           't' { ast::def_ty(did) }\n           'm' { ast::def_mod(did) }\n           'n' { ast::def_native_mod(did) }"}, {"sha": "c5823896d9c31199d7504a638cb7ae6bfa13efb6", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -423,12 +423,6 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                                nitem: @native_item) {\n     ebml::start_tag(ebml_w, tag_items_data_item);\n     alt nitem.node {\n-      native_item_ty {\n-        encode_def_id(ebml_w, local_def(nitem.id));\n-        encode_family(ebml_w, 'T' as u8);\n-        encode_type(ecx, ebml_w,\n-                    ty::mk_native(ecx.ccx.tcx, local_def(nitem.id)));\n-      }\n       native_item_fn(fn_decl, tps) {\n         let letter = alt fn_decl.purity {\n           unsafe_fn { 'u' }"}, {"sha": "92e6da125ef56a5c5c1c99fa4d1c360453b094e3", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -255,7 +255,6 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         ret ty::mk_res(st.tcx, def, inner, params);\n       }\n       'X' { ret ty::mk_var(st.tcx, parse_int(st)); }\n-      'E' { let def = parse_def(st, conv); ret ty::mk_native(st.tcx, def); }\n       'Y' { ret ty::mk_type(st.tcx); }\n       'y' { ret ty::mk_send_type(st.tcx); }\n       'C' {"}, {"sha": "84f77842a585964117f8861e9a4e8f8493f06600", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -163,11 +163,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         w.write_char(']');\n       }\n       ty::ty_var(id) { w.write_char('X'); w.write_str(int::str(id)); }\n-      ty::ty_native(def) {\n-        w.write_char('E');\n-        w.write_str(cx.ds(def));\n-        w.write_char('|');\n-      }\n       ty::ty_param(id, did) {\n         w.write_char('p');\n         w.write_str(cx.ds(did));"}, {"sha": "7aa675c9e8df5a3e29b2d776cca01164266302cb", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -560,7 +560,7 @@ fn copy_is_expensive(tcx: ty::ctxt, ty: ty::t) -> bool {\n     fn score_ty(tcx: ty::ctxt, ty: ty::t) -> uint {\n         ret alt ty::struct(tcx, ty) {\n           ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_int(_) |\n-          ty::ty_uint(_) | ty::ty_float(_) | ty::ty_type | ty::ty_native(_) |\n+          ty::ty_uint(_) | ty::ty_float(_) | ty::ty_type |\n           ty::ty_ptr(_) { 1u }\n           ty::ty_box(_) | ty::ty_iface(_, _) { 3u }\n           ty::ty_constr(t, _) | ty::ty_res(_, t, _) { score_ty(tcx, t) }"}, {"sha": "0fe72c5b8f749486e2b1d8621cea1edc60ba16f8", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -103,7 +103,7 @@ fn type_is_gc_relevant(cx: ty::ctxt, ty: ty::t) -> bool {\n     alt ty::struct(cx, ty) {\n       ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_int(_) |\n       ty::ty_float(_) | ty::ty_uint(_) | ty::ty_str |\n-      ty::ty_type | ty::ty_send_type | ty::ty_ptr(_) | ty::ty_native(_) {\n+      ty::ty_type | ty::ty_send_type | ty::ty_ptr(_) {\n         ret false;\n       }\n       ty::ty_rec(fields) {"}, {"sha": "d708ddf4b4256a8320f1cc94d3855f139d4f3203", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -1358,11 +1358,6 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n       }\n       mie_native_item(native_item) {\n         alt native_item.node {\n-          ast::native_item_ty {\n-            if ns == ns_type {\n-                ret some(ast::def_native_ty(local_def(native_item.id)));\n-            }\n-          }\n           ast::native_item_fn(decl, _) {\n             if ns == ns_val(ns_any_value) {\n                 ret some(ast::def_fn(local_def(native_item.id),\n@@ -1467,7 +1462,6 @@ fn ns_for_def(d: def) -> namespace {\n       ast::def_upvar(_, _, _) |  ast::def_self(_) { ns_val(ns_any_value) }\n       ast::def_mod(_) | ast::def_native_mod(_) { ns_module }\n       ast::def_ty(_) | ast::def_binding(_) | ast::def_use(_) |\n-      ast::def_native_ty(_) { ns_type }\n       ast::def_ty_param(_, _) { ns_type }\n     }\n }"}, {"sha": "c5746974fe2837591a0bcb58e0c34ef89cdc2a4f", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -324,8 +324,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       ty::ty_bot { s += [shape_u8]; }\n       ty::ty_int(ast::ty_i) { s += [s_int(ccx.tcx)]; }\n       ty::ty_float(ast::ty_f) { s += [s_float(ccx.tcx)]; }\n-      ty::ty_uint(ast::ty_u) | ty::ty_ptr(_) |\n-      ty::ty_native(_) { s += [s_uint(ccx.tcx)]; }\n+      ty::ty_uint(ast::ty_u) | ty::ty_ptr(_) { s += [s_uint(ccx.tcx)]; }\n       ty::ty_type { s += [s_tydesc(ccx.tcx)]; }\n       ty::ty_send_type { s += [s_send_tydesc(ccx.tcx)]; }\n       ty::ty_int(ast::ty_i8) { s += [shape_i8]; }"}, {"sha": "b681389b12c889583f504fb20592bbb38dfb64f9", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -125,7 +125,6 @@ fn type_of_inner(cx: @crate_ctxt, t: ty::t)\n \n     if cx.lltypes.contains_key(t) { ret cx.lltypes.get(t); }\n     let llty = alt ty::struct(cx.tcx, t) {\n-      ty::ty_native(_) { T_ptr(T_i8()) }\n       ty::ty_nil { T_nil() }\n       ty::ty_bot {\n         T_nil() /* ...I guess? */\n@@ -1421,11 +1420,6 @@ fn compare_scalar_types(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef,\n       ty::ty_int(_) { ret rslt(cx, f(signed_int)); }\n       ty::ty_uint(_) { ret rslt(cx, f(unsigned_int)); }\n       ty::ty_float(_) { ret rslt(cx, f(floating_point)); }\n-      ty::ty_native(_) {\n-        let cx = trans_fail(cx, none::<span>,\n-                            \"attempt to compare values of type native\");\n-        ret rslt(cx, C_nil());\n-      }\n       ty::ty_type {\n         ret rslt(trans_fail(cx, none,\n                             \"attempt to compare values of type type\"),\n@@ -1922,7 +1916,7 @@ fn copy_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n fn copy_val_no_check(bcx: @block_ctxt, action: copy_action, dst: ValueRef,\n                      src: ValueRef, t: ty::t) -> @block_ctxt {\n     let ccx = bcx_ccx(bcx), bcx = bcx;\n-    if ty::type_is_scalar(ccx.tcx, t) || ty::type_is_native(ccx.tcx, t) {\n+    if ty::type_is_scalar(ccx.tcx, t) {\n         Store(bcx, src, dst);\n         ret bcx;\n     }\n@@ -1952,7 +1946,7 @@ fn move_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n             src: lval_result, t: ty::t) -> @block_ctxt {\n     let src_val = src.val;\n     let tcx = bcx_tcx(cx), cx = cx;\n-    if ty::type_is_scalar(tcx, t) || ty::type_is_native(tcx, t) {\n+    if ty::type_is_scalar(tcx, t) {\n         if src.kind == owned { src_val = Load(cx, src_val); }\n         Store(cx, src_val, dst);\n         ret cx;\n@@ -2905,8 +2899,7 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n     fn t_kind(tcx: ty::ctxt, t: ty::t) -> kind {\n         ret if ty::type_is_fp(tcx, t) {\n                 float\n-            } else if ty::type_is_native(tcx, t) ||\n-                      ty::type_is_unsafe_ptr(tcx, t) {\n+            } else if ty::type_is_unsafe_ptr(tcx, t) {\n                 pointer\n             } else if ty::type_is_integral(tcx, t) {\n                 integral\n@@ -4905,7 +4898,6 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n \n     for native_item in native_mod.items {\n       alt native_item.node {\n-        ast::native_item_ty {}\n         ast::native_item_fn(fn_decl, tps) {\n           let id = native_item.id;\n           let tys = c_stack_tys(ccx, id);\n@@ -5144,10 +5136,6 @@ fn native_fn_ty_param_count(cx: @crate_ctxt, id: ast::node_id) -> uint {\n          _ { cx.sess.bug(\"native_fn_ty_param_count\\\n                          given a non-native item\"); } };\n     alt native_item.node {\n-      ast::native_item_ty {\n-        cx.sess.bug(\"register_native_fn(): native fn isn't \\\n-                        actually a fn\");\n-      }\n       ast::native_item_fn(_, tps) {\n         count = vec::len::<ast::ty_param>(tps);\n       }"}, {"sha": "013ffd5686727afdaa022a061337edb32deb8426", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -68,7 +68,6 @@ export mk_vec;\n export mk_mach_int;\n export mk_mach_uint;\n export mk_mach_float;\n-export mk_native;\n export mk_nil;\n export mk_iface;\n export mk_res;\n@@ -116,7 +115,6 @@ export ty_fn_ret_style;\n export ty_int;\n export ty_str;\n export ty_vec;\n-export ty_native;\n export ty_nil;\n export ty_iface;\n export ty_res;\n@@ -153,7 +151,6 @@ export type_is_fp;\n export type_allows_implicit_copy;\n export type_is_integral;\n export type_is_numeric;\n-export type_is_native;\n export type_is_nil;\n export type_is_pod;\n export type_is_scalar;\n@@ -270,7 +267,6 @@ enum sty {\n \n     ty_type, // type_desc*\n     ty_send_type, // type_desc* that has been cloned into exchange heap\n-    ty_native(def_id),\n     ty_constr(t, [@type_constr]),\n     ty_opaque_closure_ptr(closure_kind), // ptr to env for fn, fn@, fn~\n     ty_named(t, @str),\n@@ -458,10 +454,7 @@ fn mk_raw_ty(cx: ctxt, st: sty) -> @raw_t {\n     }\n     alt st {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_str | ty_type | ty_send_type | ty_native(_) |\n-      ty_opaque_closure_ptr(_) {\n-        /* no-op */\n-      }\n+      ty_str | ty_type | ty_send_type | ty_opaque_closure_ptr(_) {}\n       ty_param(_, _) { has_params = true; }\n       ty_var(_) { has_vars = true; }\n       ty_enum(_, tys) | ty_iface(_, tys) {\n@@ -607,8 +600,6 @@ fn mk_type(_cx: ctxt) -> t { ret idx_type; }\n \n fn mk_send_type(_cx: ctxt) -> t { ret idx_send_type; }\n \n-fn mk_native(cx: ctxt, did: def_id) -> t { ret gen_ty(cx, ty_native(did)); }\n-\n fn mk_opaque_closure_ptr(cx: ctxt, ck: closure_kind) -> t {\n     ret gen_ty(cx, ty_opaque_closure_ptr(ck));\n }\n@@ -658,7 +649,7 @@ pure fn ty_name(cx: ctxt, typ: t) -> option<@str> {\n fn walk_ty(cx: ctxt, ty: t, f: fn(t)) {\n     alt struct(cx, ty) {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_str | ty_send_type | ty_type | ty_native(_) |\n+      ty_str | ty_send_type | ty_type |\n       ty_opaque_closure_ptr(_) | ty_var(_) | ty_param(_, _) {}\n       ty_box(tm) | ty_vec(tm) | ty_ptr(tm) { walk_ty(cx, tm.ty, f); }\n       ty_enum(_, subtys) | ty_iface(_, subtys) {\n@@ -702,10 +693,7 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n     }\n     alt interner::get(*cx.ts, ty).struct {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_str | ty_type | ty_send_type | ty_native(_) |\n-      ty_opaque_closure_ptr(_) {\n-        /* no-op */\n-      }\n+      ty_str | ty_type | ty_send_type | ty_opaque_closure_ptr(_) {}\n       ty_box(tm) {\n         ty = mk_box(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n@@ -889,15 +877,15 @@ pure fn type_is_unique(cx: ctxt, ty: t) -> bool {\n pure fn type_is_scalar(cx: ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       ty_nil | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_send_type | ty_type | ty_native(_) | ty_ptr(_) { true }\n+      ty_send_type | ty_type | ty_ptr(_) { true }\n       _ { false }\n     }\n }\n \n // FIXME maybe inline this for speed?\n fn type_is_immediate(cx: ctxt, ty: t) -> bool {\n     ret type_is_scalar(cx, ty) || type_is_boxed(cx, ty) ||\n-        type_is_unique(cx, ty) || type_is_native(cx, ty);\n+        type_is_unique(cx, ty);\n }\n \n fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n@@ -910,7 +898,7 @@ fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n     let result = alt struct(cx, ty) {\n       // scalar types\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_type | ty_native(_) | ty_ptr(_) { false }\n+      ty_type | ty_ptr(_) { false }\n       ty_rec(flds) {\n         for f in flds { if type_needs_drop(cx, f.mt.ty) { accum = true; } }\n         accum\n@@ -993,8 +981,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n     let result = alt struct(cx, ty) {\n       // Scalar and unique types are sendable\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_native(_) | ty_ptr(_) |\n-      ty_send_type | ty_str { kind_sendable }\n+      ty_ptr(_) | ty_send_type | ty_str { kind_sendable }\n       ty_type { kind_copyable }\n       ty_fn(f) { proto_kind(f.proto) }\n       ty_opaque_closure_ptr(ck_block) { kind_noncopyable }\n@@ -1043,12 +1030,6 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n     ret result;\n }\n \n-// FIXME: should we just return true for native types in\n-// type_is_scalar?\n-fn type_is_native(cx: ctxt, ty: t) -> bool {\n-    alt struct(cx, ty) { ty_native(_) { ret true; } _ { ret false; } }\n-}\n-\n fn type_structurally_contains(cx: ctxt, ty: t, test: fn(sty) -> bool) ->\n    bool {\n     let sty = struct(cx, ty);\n@@ -1168,7 +1149,7 @@ fn type_is_pod(cx: ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       // Scalar types\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_send_type | ty_type | ty_native(_) | ty_ptr(_) { result = true; }\n+      ty_send_type | ty_type | ty_ptr(_) { result = true; }\n       // Boxed types\n       ty_str | ty_box(_) | ty_uniq(_) | ty_vec(_) | ty_fn(_) |\n       ty_iface(_, _) { result = false; }\n@@ -1359,7 +1340,6 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_var(v) { ret hash_uint(30u, v as uint); }\n       ty_param(pid, _) { ret hash_uint(31u, pid); }\n       ty_type { ret 32u; }\n-      ty_native(did) { ret hash_def(33u, did); }\n       ty_bot { ret 34u; }\n       ty_ptr(mt) { ret hash_subty(35u, mt.ty); }\n       ty_res(did, sub, tps) {\n@@ -2082,16 +2062,6 @@ mod unify {\n           ty::ty_str | ty::ty_send_type {\n             ret struct_cmp(cx, expected, actual);\n           }\n-          ty::ty_native(ex_id) {\n-            alt struct(cx.tcx, actual) {\n-              ty_native(act_id) {\n-                if ex_id.crate == act_id.crate && ex_id.node == act_id.node {\n-                    ret ures_ok(actual);\n-                } else { ret ures_err(terr_mismatch); }\n-              }\n-              _ { ret ures_err(terr_mismatch); }\n-            }\n-          }\n           ty::ty_param(expected_n, _) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_param(actual_n, _) if expected_n == actual_n {\n@@ -2515,7 +2485,7 @@ fn def_has_ty_params(def: ast::def) -> bool {\n       ast::def_mod(_) | ast::def_const(_) |\n       ast::def_arg(_, _) | ast::def_local(_, _) | ast::def_upvar(_, _, _) |\n       ast::def_ty_param(_, _) | ast::def_binding(_) | ast::def_use(_) |\n-      ast::def_native_ty(_) | ast::def_self(_) | ast::def_ty(_) { false }\n+      ast::def_self(_) | ast::def_ty(_) { false }\n       ast::def_fn(_, _) | ast::def_variant(_, _) { true }\n       _ { false } // ????\n     }"}, {"sha": "b7d35128cbf1cb00ad0af89b070cb53f722557bb", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -338,7 +338,6 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n           some(ast::def_ty(id)) {\n             typ = instantiate(tcx, ast_ty.span, mode, id, path.node.types);\n           }\n-          some(ast::def_native_ty(id)) { typ = getter(tcx, mode, id).ty; }\n           some(ast::def_ty_param(id, n)) {\n             typ = ty::mk_param(tcx, n, id);\n           }\n@@ -438,17 +437,6 @@ fn ty_of_native_item(tcx: ty::ctxt, mode: mode, it: @ast::native_item)\n         ret ty_of_native_fn_decl(tcx, mode, fn_decl, params,\n                                  local_def(it.id));\n       }\n-      ast::native_item_ty {\n-        alt tcx.tcache.find(local_def(it.id)) {\n-          some(tpt) { ret tpt; }\n-          none { }\n-        }\n-        let t = ty::mk_native(tcx, local_def(it.id));\n-        let t = ty::mk_named(tcx, t, @it.ident);\n-        let tpt = {bounds: @[], ty: t};\n-        tcx.tcache.insert(local_def(it.id), tpt);\n-        ret tpt;\n-      }\n     }\n }\n fn ty_of_arg(tcx: ty::ctxt, mode: mode, a: ast::arg) -> ty::arg {\n@@ -762,9 +750,6 @@ mod collect {\n         // table.\n         let tpt = ty_of_native_item(cx.tcx, m_collect, i);\n         alt i.node {\n-          ast::native_item_ty {\n-            // FIXME: Native types have no annotation. Should they? --pcw\n-          }\n           ast::native_item_fn(_, _) {\n             write_ty(cx.tcx, i.id, tpt.ty);\n           }"}, {"sha": "79285c810c9f9f35f85f8e67975a9454f794632e", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -45,7 +45,6 @@ enum def {\n     def_ty_param(def_id, uint),\n     def_binding(def_id),\n     def_use(def_id),\n-    def_native_ty(def_id),\n     def_upvar(def_id, @def, node_id), // node_id == expr_fn or expr_fn_block\n }\n \n@@ -477,7 +476,6 @@ type native_item =\n      span: span};\n \n enum native_item_ {\n-    native_item_ty,\n     native_item_fn(fn_decl, [ty_param]),\n }\n "}, {"sha": "bdfaee5d4c2d3e77fdb0aa2e91a693b00be4bf7c", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -30,8 +30,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_fn(id, _) | def_self(id) | def_mod(id) |\n       def_native_mod(id) | def_const(id) | def_arg(id, _) | def_local(id, _) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n-      def_binding(id) | def_use(id) | def_native_ty(id) |\n-      def_upvar(id, _, _) { id }\n+      def_binding(id) | def_use(id) | def_upvar(id, _, _) { id }\n     }\n }\n "}, {"sha": "42a6dd22b5b9eadc5db2c291e15972e50de40db7", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -189,7 +189,6 @@ fn noop_fold_native_item(&&ni: @native_item, fld: ast_fold) -> @native_item {\n           attrs: vec::map(ni.attrs, fold_attribute),\n           node:\n               alt ni.node {\n-                native_item_ty { native_item_ty }\n                 native_item_fn(fdec, typms) {\n                   native_item_fn({inputs: vec::map(fdec.inputs, fold_arg),\n                                   output: fld.fold_ty(fdec.output),"}, {"sha": "35c0bce9a4bf4a8ea1c19b9067eabc3cdceeb500", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -1963,18 +1963,6 @@ fn parse_item_mod(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     ret mk_item(p, lo, hi, id, ast::item_mod(m), attrs + inner_attrs.inner);\n }\n \n-fn parse_item_native_type(p: parser, attrs: [ast::attribute]) ->\n-   @ast::native_item {\n-    let t = parse_type_decl(p);\n-    let hi = p.span.hi;\n-    expect(p, token::SEMI);\n-    ret @{ident: t.ident,\n-          attrs: attrs,\n-          node: ast::native_item_ty,\n-          id: p.get_id(),\n-          span: ast_util::mk_sp(t.lo, hi)};\n-}\n-\n fn parse_item_native_fn(p: parser, attrs: [ast::attribute],\n                         purity: ast::purity) -> @ast::native_item {\n     let lo = p.last_span.lo;\n@@ -1991,9 +1979,7 @@ fn parse_item_native_fn(p: parser, attrs: [ast::attribute],\n \n fn parse_native_item(p: parser, attrs: [ast::attribute]) ->\n    @ast::native_item {\n-    if eat_word(p, \"type\") {\n-        ret parse_item_native_type(p, attrs);\n-    } else if eat_word(p, \"fn\") {\n+    if eat_word(p, \"fn\") {\n         ret parse_item_native_fn(p, attrs, ast::impure_fn);\n     } else if eat_word(p, \"pure\") {\n         expect_word(p, \"fn\");"}, {"sha": "cf2f09d50eaa14291ced67a91961d9f84bfccce8", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -380,16 +380,6 @@ fn print_native_item(s: ps, item: @ast::native_item) {\n     maybe_print_comment(s, item.span.lo);\n     print_outer_attributes(s, item.attrs);\n     alt item.node {\n-      ast::native_item_ty {\n-        ibox(s, indent_unit);\n-        ibox(s, 0u);\n-        word_nbsp(s, \"type\");\n-        word(s.s, item.ident);\n-        end(s); // end the inner ibox\n-        word(s.s, \";\");\n-        end(s); // end the outer ibox\n-\n-      }\n       ast::native_item_fn(decl, typarams) {\n         print_fn(s, decl, item.ident, typarams);\n         end(s); // end head-ibox"}, {"sha": "8249bd873bf3d399e2eb9032e82d97e6cd497f0c", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -211,7 +211,6 @@ fn visit_native_item<E>(ni: @native_item, e: E, v: vt<E>) {\n         v.visit_ty_params(tps, e, v);\n         visit_fn_decl(fd, e, v);\n       }\n-      native_item_ty { }\n     }\n }\n "}, {"sha": "4772bbc4fc36ec820838183334c10e09a9e7de67", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbaa05af8f2aeef709712725e103836405fa5f5/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=2dbaa05af8f2aeef709712725e103836405fa5f5", "patch": "@@ -85,7 +85,6 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       _ { }\n     }\n     ret alt struct(cx, typ) {\n-      ty_native(_) { \"native\" }\n       ty_nil { \"()\" }\n       ty_bot { \"_|_\" }\n       ty_bool { \"bool\" }"}]}