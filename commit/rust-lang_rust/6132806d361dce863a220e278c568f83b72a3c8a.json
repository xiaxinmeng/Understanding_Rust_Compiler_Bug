{"sha": "6132806d361dce863a220e278c568f83b72a3c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzI4MDZkMzYxZGNlODYzYTIyMGUyNzhjNTY4ZjgzYjcyYTNjOGE=", "commit": {"author": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-01-06T19:04:09Z"}, "committer": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-01-07T01:30:21Z"}, "message": "Correct reasoning behind writeback ref removal\n\nThe ref was actually always necessary.\nThis clarifies some incorrect thinking in the original code that might\nhave led to errors in the future to do with unsizing.", "tree": {"sha": "fa6750d36e31af993eb80e07964e38fccf3094c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6750d36e31af993eb80e07964e38fccf3094c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6132806d361dce863a220e278c568f83b72a3c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6132806d361dce863a220e278c568f83b72a3c8a", "html_url": "https://github.com/rust-lang/rust/commit/6132806d361dce863a220e278c568f83b72a3c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6132806d361dce863a220e278c568f83b72a3c8a/comments", "author": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2133ace20746d579db2527b94f7d2756690852c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2133ace20746d579db2527b94f7d2756690852c1", "html_url": "https://github.com/rust-lang/rust/commit/2133ace20746d579db2527b94f7d2756690852c1"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "5e102c7a4451684c16acb551a29b87fda97788e3", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6132806d361dce863a220e278c568f83b72a3c8a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6132806d361dce863a220e278c568f83b72a3c8a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=6132806d361dce863a220e278c568f83b72a3c8a", "patch": "@@ -169,41 +169,37 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         if let hir::ExprIndex(ref base, ref index) = e.node {\n             let mut tables = self.fcx.tables.borrow_mut();\n \n-            let base_ty = {\n-                let base_ty = tables.expr_ty_adjusted(&base);\n-                // When unsizing, the final type of the expression is taken\n-                // from the first argument of the indexing operator, which\n-                // is a &self, and has to be deconstructed\n-                if let ty::TyRef(_, ref ref_to) = base_ty.sty {\n-                    ref_to.ty\n-                } else {\n-                    base_ty\n-                }\n-            };\n-\n-            let index_ty = tables.expr_ty_adjusted(&index);\n-            let index_ty = self.fcx.resolve_type_vars_if_possible(&index_ty);\n-\n-            if base_ty.builtin_index().is_some()\n-                && index_ty == self.fcx.tcx.types.usize {\n-                // Remove the method call record\n-                tables.type_dependent_defs_mut().remove(e.hir_id);\n-                tables.node_substs_mut().remove(e.hir_id);\n-\n-                tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n-                    // Discard the need for a mutable borrow\n-                    match a.pop() {\n-                        // Extra adjustment made when indexing causes a drop\n-                        // of size information - we need to get rid of it\n-                        // Since this is \"after\" the other adjustment to be\n-                        // discarded, we do an extra `pop()`\n-                        Some(Adjustment { kind: Adjust::Unsize, .. }) => {\n-                            // So the borrow discard actually happens here\n-                            a.pop();\n-                        },\n-                        _ => {}\n+            match tables.expr_ty_adjusted(&base).sty {\n+                // All valid indexing looks like this\n+                ty::TyRef(_, ty::TypeAndMut { ty: ref base_ty, .. }) => {\n+                    let index_ty = tables.expr_ty_adjusted(&index);\n+                    let index_ty = self.fcx.resolve_type_vars_if_possible(&index_ty);\n+\n+                    if base_ty.builtin_index().is_some()\n+                        && index_ty == self.fcx.tcx.types.usize {\n+                        // Remove the method call record\n+                        tables.type_dependent_defs_mut().remove(e.hir_id);\n+                        tables.node_substs_mut().remove(e.hir_id);\n+\n+                        tables.adjustments_mut().get_mut(base.hir_id).map(|a| {\n+                            // Discard the need for a mutable borrow\n+                            match a.pop() {\n+                                // Extra adjustment made when indexing causes a drop\n+                                // of size information - we need to get rid of it\n+                                // Since this is \"after\" the other adjustment to be\n+                                // discarded, we do an extra `pop()`\n+                                Some(Adjustment { kind: Adjust::Unsize, .. }) => {\n+                                    // So the borrow discard actually happens here\n+                                    a.pop();\n+                                },\n+                                _ => {}\n+                            }\n+                        });\n                     }\n-                });\n+                },\n+                // Might encounter non-valid indexes at this point, so there\n+                // has to be a fall-through\n+                _ => {},\n             }\n         }\n     }"}]}