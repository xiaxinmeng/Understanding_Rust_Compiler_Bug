{"sha": "3ad03347180445366e127e9ec589920eb3c547ed", "node_id": "C_kwDOAAsO6NoAKDNhZDAzMzQ3MTgwNDQ1MzY2ZTEyN2U5ZWM1ODk5MjBlYjNjNTQ3ZWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-30T22:42:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-30T22:42:16Z"}, "message": "Fix move_format_string_arg being tokentree unaware", "tree": {"sha": "1a2b873f8e72f9c13e32f4c9138d2e0f58bc55b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a2b873f8e72f9c13e32f4c9138d2e0f58bc55b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad03347180445366e127e9ec589920eb3c547ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad03347180445366e127e9ec589920eb3c547ed", "html_url": "https://github.com/rust-lang/rust/commit/3ad03347180445366e127e9ec589920eb3c547ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad03347180445366e127e9ec589920eb3c547ed/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39eaf7864cd786d53e98771864a689ff0f9b9259", "url": "https://api.github.com/repos/rust-lang/rust/commits/39eaf7864cd786d53e98771864a689ff0f9b9259", "html_url": "https://github.com/rust-lang/rust/commit/39eaf7864cd786d53e98771864a689ff0f9b9259"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "aa710d2ce6513d4c96846a95a0e4836b863cb065", "filename": "crates/ide-assists/src/handlers/move_format_string_arg.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3ad03347180445366e127e9ec589920eb3c547ed/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad03347180445366e127e9ec589920eb3c547ed/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs?ref=3ad03347180445366e127e9ec589920eb3c547ed", "patch": "@@ -7,6 +7,7 @@ use ide_db::{\n     },\n };\n use itertools::Itertools;\n+use stdx::format_to;\n use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxKind::COMMA, TextRange};\n \n // Assist: move_format_string_arg\n@@ -78,20 +79,26 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n \n             // Extract existing arguments in macro\n             let tokens =\n-                tt.token_trees_and_tokens().filter_map(NodeOrToken::into_token).collect_vec();\n+                tt.token_trees_and_tokens().collect_vec();\n \n             let mut existing_args: Vec<String> = vec![];\n \n             let mut current_arg = String::new();\n-            if let [_opening_bracket, format_string, _args_start_comma, tokens @ .., end_bracket] =\n+            if let [_opening_bracket, NodeOrToken::Token(format_string), _args_start_comma, tokens @ .., NodeOrToken::Token(end_bracket)] =\n                 tokens.as_slice()\n             {\n                 for t in tokens {\n-                    if t.kind() == COMMA {\n-                        existing_args.push(current_arg.trim().into());\n-                        current_arg.clear();\n-                    } else {\n-                        current_arg.push_str(t.text());\n+                    match t {\n+                        NodeOrToken::Node(n) => {\n+                            format_to!(current_arg, \"{n}\");\n+                        },\n+                        NodeOrToken::Token(t) if t.kind() == COMMA=> {\n+                            existing_args.push(current_arg.trim().into());\n+                            current_arg.clear();\n+                        },\n+                        NodeOrToken::Token(t) => {\n+                            current_arg.push_str(t.text());\n+                        },\n                     }\n                 }\n                 existing_args.push(current_arg.trim().into());\n@@ -261,6 +268,27 @@ fn main() {\n fn main() {\n     print!(\"{} {:b} {}\"$0, 1, x + 1, Struct(1, 2));\n }\n+\"#,\n+            ),\n+        );\n+    }\n+\n+    #[test]\n+    fn nested_tt() {\n+        check_assist(\n+            move_format_string_arg,\n+            &add_macro_decl(\n+                r#\"\n+fn main() {\n+    print!(\"My name is {} {x$0 + x}\", stringify!(Paperino))\n+}\n+\"#,\n+            ),\n+            &add_macro_decl(\n+                r#\"\n+fn main() {\n+    print!(\"My name is {} {}\"$0, stringify!(Paperino), x + x)\n+}\n \"#,\n             ),\n         );"}]}