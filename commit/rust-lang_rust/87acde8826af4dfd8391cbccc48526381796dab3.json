{"sha": "87acde8826af4dfd8391cbccc48526381796dab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YWNkZTg4MjZhZjRkZmQ4MzkxY2JjY2M0ODUyNjM4MTc5NmRhYjM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-30T03:45:53Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-30T03:49:47Z"}, "message": "rustdoc: Remove structural records from tests. Fixes build breakage", "tree": {"sha": "ec5cdaec27e852c2bff729aa4822682a660da8c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec5cdaec27e852c2bff729aa4822682a660da8c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87acde8826af4dfd8391cbccc48526381796dab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87acde8826af4dfd8391cbccc48526381796dab3", "html_url": "https://github.com/rust-lang/rust/commit/87acde8826af4dfd8391cbccc48526381796dab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87acde8826af4dfd8391cbccc48526381796dab3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aef28dd6d6d61f8cbdebb0e07c41279bf48bd0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aef28dd6d6d61f8cbdebb0e07c41279bf48bd0f", "html_url": "https://github.com/rust-lang/rust/commit/0aef28dd6d6d61f8cbdebb0e07c41279bf48bd0f"}], "stats": {"total": 158, "additions": 75, "deletions": 83}, "files": [{"sha": "c818250e4a3e48899bee4c836798748643e8fa62", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -70,13 +70,13 @@ fn fold_crate(\n     };\n \n     doc::CrateDoc {\n-        topmod: doc::ModDoc_(doc::ModDoc_ {\n+        topmod: doc::ModDoc {\n             item: doc::ItemDoc {\n                 name: option::get_or_default(attrs.name, doc.topmod.name()),\n                 .. doc.topmod.item\n             },\n-            .. *doc.topmod\n-        })\n+            .. doc.topmod\n+        }\n     }\n }\n "}, {"sha": "f16ad3dc34b47a3dd8bf11340e1e31b5d631be74", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -256,7 +256,7 @@ fn maybe_find_pandoc(\n \n #[test]\n fn should_find_pandoc() {\n-    let config = {\n+    let config = Config {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n@@ -273,7 +273,7 @@ fn should_find_pandoc() {\n \n #[test]\n fn should_error_with_no_pandoc() {\n-    let config = {\n+    let config = Config {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };"}, {"sha": "d890906ef491af77fee4ea95e77ca5d5cd35516a", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -22,15 +22,10 @@ use core::vec;\n pub type AstId = int;\n \n #[deriving_eq]\n-pub struct Doc_ {\n+pub struct Doc {\n     pages: ~[Page]\n }\n \n-#[deriving_eq]\n-pub enum Doc {\n-    Doc_(Doc_)\n-}\n-\n #[deriving_eq]\n pub enum Page {\n     CratePage(CrateDoc),\n@@ -93,17 +88,12 @@ pub struct SimpleItemDoc {\n }\n \n #[deriving_eq]\n-pub struct ModDoc_ {\n+pub struct ModDoc {\n     item: ItemDoc,\n     items: ~[ItemTag],\n     index: Option<Index>\n }\n \n-#[deriving_eq]\n-pub enum ModDoc {\n-    ModDoc_(ModDoc_)\n-}\n-\n #[deriving_eq]\n pub struct NmodDoc {\n     item: ItemDoc,"}, {"sha": "d73d7b2c2794c0f50754ac18a282b414bb5f6df9", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -57,13 +57,13 @@ pub fn extract(\n     crate: @ast::crate,\n     +default_name: ~str\n ) -> doc::Doc {\n-    doc::Doc_(doc::Doc_ {\n+    doc::Doc {\n         pages: ~[\n             doc::CratePage(doc::CrateDoc {\n                 topmod: top_moddoc_from_crate(crate, default_name),\n             })\n         ]\n-    })\n+    }\n }\n \n fn top_moddoc_from_crate(\n@@ -90,7 +90,7 @@ fn moddoc_from_mod(\n     +itemdoc: doc::ItemDoc,\n     module_: ast::_mod\n ) -> doc::ModDoc {\n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         item: itemdoc,\n         items: do vec::filter_map(module_.items) |item| {\n             let ItemDoc = mk_itemdoc(item.id, to_str(item.ident));\n@@ -144,7 +144,7 @@ fn moddoc_from_mod(\n             }\n         },\n         index: None\n-    })\n+    }\n }\n \n fn nmoddoc_from_mod("}, {"sha": "ba201f145b0368dbe135c5a3d8c3193ae34738d7", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -158,7 +158,7 @@ pub fn default_par_fold<T:Owned Clone>(+ctxt: T) -> Fold<T> {\n }\n \n pub fn default_seq_fold_doc<T>(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc {\n-    doc::Doc_(doc::Doc_ {\n+    doc::Doc {\n         pages: do vec::map(doc.pages) |page| {\n             match *page {\n               doc::CratePage(doc) => {\n@@ -169,8 +169,8 @@ pub fn default_seq_fold_doc<T>(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc {\n               }\n             }\n         },\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n pub fn default_seq_fold_crate<T>(\n@@ -194,40 +194,40 @@ pub fn default_any_fold_mod<T:Owned Clone>(\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let fold_copy = fold.clone();\n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item),\n         items: par::map(doc.items, |ItemTag, move fold_copy| {\n             fold_ItemTag(&fold_copy, *ItemTag)\n         }),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n pub fn default_seq_fold_mod<T>(\n     fold: &Fold<T>,\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item),\n         items: vec::map(doc.items, |ItemTag| {\n             fold_ItemTag(fold, *ItemTag)\n         }),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n pub fn default_par_fold_mod<T:Owned Clone>(\n     fold: &Fold<T>,\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let fold_copy = fold.clone();\n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item),\n         items: par::map(doc.items, |ItemTag, move fold_copy| {\n             fold_ItemTag(&fold_copy, *ItemTag)\n         }),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n pub fn default_any_fold_nmod<T:Owned Clone>("}, {"sha": "1ab659b1eefd6c13bcb8434069306647947113c6", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -54,10 +54,10 @@ fn fold_mod(\n \n     let doc = fold::default_any_fold_mod(fold, doc);\n \n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         index: Some(build_mod_index(doc, fold.ctxt)),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n fn fold_nmod(\n@@ -180,13 +180,13 @@ fn should_index_mod_contents() {\n         config::DocPerCrate,\n         ~\"mod a { } fn b() { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0] == {\n+    assert doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n         kind: ~\"Module\",\n         name: ~\"a\",\n         brief: None,\n         link: ~\"#module-a\"\n     };\n-    assert doc.cratemod().index.get().entries[1] == {\n+    assert doc.cratemod().index.get().entries[1] == doc::IndexEntry {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n@@ -200,13 +200,13 @@ fn should_index_mod_contents_multi_page() {\n         config::DocPerMod,\n         ~\"mod a { } fn b() { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0] == {\n+    assert doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n         kind: ~\"Module\",\n         name: ~\"a\",\n         brief: None,\n         link: ~\"a.html\"\n     };\n-    assert doc.cratemod().index.get().entries[1] == {\n+    assert doc.cratemod().index.get().entries[1] == doc::IndexEntry {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n@@ -220,7 +220,7 @@ fn should_index_foreign_mod_pages() {\n         config::DocPerMod,\n         ~\"extern mod a { }\"\n     );\n-    assert doc.cratemod().index.get().entries[0] == {\n+    assert doc.cratemod().index.get().entries[0] == doc::IndexEntry {\n         kind: ~\"Foreign module\",\n         name: ~\"a\",\n         brief: None,\n@@ -244,7 +244,8 @@ fn should_index_foreign_mod_contents() {\n         config::DocPerCrate,\n         ~\"extern mod a { fn b(); }\"\n     );\n-    assert doc.cratemod().nmods()[0].index.get().entries[0] == {\n+    assert doc.cratemod().nmods()[0].index.get().entries[0]\n+        == doc::IndexEntry {\n         kind: ~\"Function\",\n         name: ~\"b\",\n         brief: None,\n@@ -268,7 +269,7 @@ mod test {\n     pub fn mk_doc(output_style: config::OutputStyle, +source: ~str)\n                -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n-            let config = {\n+            let config = config::Config {\n                 output_style: output_style,\n                 .. config::default_config(&Path(\"whatever\"))\n             };"}, {"sha": "f0e840dfdcec129b6c5b27b925f1f25298c7f125", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -573,20 +573,20 @@ fn should_insert_blank_line_after_fn_signature() {\n #[test]\n fn should_correctly_indent_fn_signature() {\n     let doc = test::create_doc(~\"fn a() { }\");\n-    let doc = doc::Doc_({\n+    let doc = doc::Doc{\n         pages: ~[\n-            doc::CratePage({\n-                topmod: doc::ModDoc_({\n-                    items: ~[doc::FnTag({\n+            doc::CratePage(doc::CrateDoc{\n+                topmod: doc::ModDoc{\n+                    items: ~[doc::FnTag(doc::SimpleItemDoc{\n                         sig: Some(~\"line 1\\nline 2\"),\n                         .. doc.cratemod().fns()[0]\n                     })],\n-                    .. *doc.cratemod()\n-                }),\n+                    .. doc.cratemod()\n+                },\n                 .. doc.CrateDoc()\n             })\n         ]\n-    });\n+    };\n     let markdown = test::write_markdown_str(doc);\n     assert str::contains(markdown, ~\"    line 1\\n    line 2\");\n }\n@@ -863,7 +863,7 @@ mod test {\n     fn create_doc_srv(+source: ~str) -> (astsrv::Srv, doc::Doc) {\n         do astsrv::from_str(source) |srv| {\n \n-            let config = {\n+            let config = config::Config {\n                 output_style: config::DocPerCrate,\n                 .. config::default_config(&Path(\"whatever\"))\n             };"}, {"sha": "ab6da1cf403a2ada0ee00eb1d0ec494fdfcf7db6", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use config;\n+use config::Config;\n use doc::ItemUtils;\n use doc;\n use pass::Pass;\n@@ -228,7 +229,7 @@ pub fn make_filename(\n \n #[test]\n fn should_use_markdown_file_name_based_off_crate() {\n-    let config = {\n+    let config = Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::Markdown,\n         output_style: config::DocPerCrate,\n@@ -242,7 +243,7 @@ fn should_use_markdown_file_name_based_off_crate() {\n \n #[test]\n fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n-    let config = {\n+    let config = Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::PandocHtml,\n         output_style: config::DocPerMod,\n@@ -256,7 +257,7 @@ fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n \n #[test]\n fn should_name_mod_file_names_by_path() {\n-    let config = {\n+    let config = Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::PandocHtml,\n         output_style: config::DocPerMod,"}, {"sha": "a5ab6da1b3aeeb2cfd0d5efbdb63d09503cf7af2", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -76,9 +76,9 @@ fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n             break;\n         }\n     }\n-    doc::Doc_(doc::Doc_ {\n+    doc::Doc {\n         pages: pages\n-    })\n+    }\n }\n \n fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n@@ -128,16 +128,16 @@ fn fold_mod(\n }\n \n fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         items: do doc.items.filtered |item| {\n             match *item {\n               doc::ModTag(_) => false,\n               doc::NmodTag(_) => false,\n               _ => true\n             }\n         },\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n fn fold_nmod("}, {"sha": "77dbc7a3dfec52c8f43ed9901421e0a2346bd50c", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -45,39 +45,39 @@ fn test_run_passes() {\n         _srv: astsrv::Srv,\n         +doc: doc::Doc\n     ) -> doc::Doc {\n-        doc::Doc_({\n+        doc::Doc{\n             pages: ~[\n-                doc::CratePage({\n-                    topmod: doc::ModDoc_({\n-                        item: {\n+                doc::CratePage(doc::CrateDoc{\n+                    topmod: doc::ModDoc{\n+                        item: doc::ItemDoc {\n                             name: doc.cratemod().name() + ~\"two\",\n                             .. doc.cratemod().item\n                         },\n                         items: ~[],\n                         index: None\n-                    })\n+                    }\n                 })\n             ]\n-        })\n+        }\n     }\n     fn pass2(\n         _srv: astsrv::Srv,\n         +doc: doc::Doc\n     ) -> doc::Doc {\n-        doc::Doc_({\n+        doc::Doc{\n             pages: ~[\n-                doc::CratePage({\n-                    topmod: doc::ModDoc_({\n-                        item: {\n+                doc::CratePage(doc::CrateDoc{\n+                    topmod: doc::ModDoc{\n+                        item: doc::ItemDoc {\n                             name: doc.cratemod().name() + ~\"three\",\n                             .. doc.cratemod().item\n                         },\n                         items: ~[],\n                         index: None\n-                    })\n+                    }\n                 })\n             ]\n-        })\n+        }\n     }\n     let source = ~\"\";\n     do astsrv::from_str(source) |srv| {"}, {"sha": "904c2ffffb72f6c8565816a57005db06ad5a70a6", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -68,10 +68,10 @@ fn fold_mod(fold: &fold::Fold<Ctxt>, +doc: doc::ModDoc) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     if !is_topmod { fold.ctxt.path.pop(); }\n \n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         item: (fold.fold_item)(fold, doc.item),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n fn fold_nmod(fold: &fold::Fold<Ctxt>, +doc: doc::NmodDoc) -> doc::NmodDoc {"}, {"sha": "15412788495e7a903ad464495b15d6290f8fd7ed", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -42,12 +42,12 @@ fn fold_mod(\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         items: do doc.items.filtered |ItemTag| {\n             !is_hidden(fold.ctxt, ItemTag.item())\n         },\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {"}, {"sha": "be0c1d3aaafc8799ab41022e23fc10a00fdb4439", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -48,12 +48,12 @@ fn fold_mod(\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         items: doc.items.filtered(|ItemTag| {\n             is_visible(fold.ctxt, ItemTag.item())\n         }),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {"}, {"sha": "2169633391594051055a00739643dc1197cd3814", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87acde8826af4dfd8391cbccc48526381796dab3/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=87acde8826af4dfd8391cbccc48526381796dab3", "patch": "@@ -55,10 +55,10 @@ fn fold_mod(\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n-    doc::ModDoc_(doc::ModDoc_ {\n+    doc::ModDoc {\n         items: sort::merge_sort(doc.items, fold.ctxt.op),\n-        .. *doc\n-    })\n+        .. doc\n+    }\n }\n \n #[test]"}]}