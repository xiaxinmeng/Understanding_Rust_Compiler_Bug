{"sha": "37dd79ff44cf129e4639eec6b314d41269a9d145", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZGQ3OWZmNDRjZjEyOWU0NjM5ZWVjNmIzMTRkNDEyNjlhOWQxNDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-13T19:07:00Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-15T20:46:01Z"}, "message": "extend `where-allowed.rs` with many more cases\n\nalso merge disallowed and disallowed-2 into that set", "tree": {"sha": "7573bdd5959adfd943b8476a330984d672cd52cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7573bdd5959adfd943b8476a330984d672cd52cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37dd79ff44cf129e4639eec6b314d41269a9d145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37dd79ff44cf129e4639eec6b314d41269a9d145", "html_url": "https://github.com/rust-lang/rust/commit/37dd79ff44cf129e4639eec6b314d41269a9d145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37dd79ff44cf129e4639eec6b314d41269a9d145/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3", "html_url": "https://github.com/rust-lang/rust/commit/ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3"}], "stats": {"total": 272, "additions": 179, "deletions": 93}, "files": [{"sha": "46b3106ab8d6e19de3a220f426acd0889c109294", "filename": "src/test/compile-fail/impl-trait/disallowed-2.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed-2.rs?ref=ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(conservative_impl_trait)]\n-\n-fn main() {\n-    let _: impl Fn() = || {};\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-    let _ = || -> impl Fn() { || {} };\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-}"}, {"sha": "bf2e22aa8e6f7d2154a2c78a11ac7aca166eb519", "filename": "src/test/compile-fail/impl-trait/disallowed.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs?ref=ebc4408fc02c5847012a01e30f5ffcf4bc6bfea3", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(conservative_impl_trait)]\n-\n-type Factory<R> = impl Fn() -> R;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-\n-type GlobalFactory<R> = fn() -> impl FnOnce() -> R;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-\n-trait LazyToString {\n-    fn lazy_to_string<'a>(&'a self) -> impl Fn() -> String;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-}\n-\n-impl LazyToString for String {\n-    fn lazy_to_string<'a>(&'a self) -> impl Fn() -> String {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-        || self.clone()\n-    }\n-}\n-\n-#[derive(Copy, Clone)]\n-struct Lazy<T>(T);\n-\n-impl std::ops::Add<Lazy<i32>> for Lazy<i32> {\n-    type Output = impl Fn() -> Lazy<i32>;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-\n-    fn add(self, other: Lazy<i32>) -> Self::Output {\n-        move || Lazy(self.0 + other.0)\n-    }\n-}\n-\n-impl<F> std::ops::Add<F>\n-for impl Fn() -> Lazy<i32>\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-where F: Fn() -> impl FnOnce() -> i32\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-{\n-    type Output = Self;\n-\n-    fn add(self, other: F) -> Self::Output {\n-        move || Lazy(self().0 + other()())\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "be990b0e15d9690a92df403d3ba1fad680bf02a9", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 179, "deletions": 19, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/37dd79ff44cf129e4639eec6b314d41269a9d145/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dd79ff44cf129e4639eec6b314d41269a9d145/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=37dd79ff44cf129e4639eec6b314d41269a9d145", "patch": "@@ -14,58 +14,218 @@\n use std::fmt::Debug;\n \n // Allowed\n-fn simple_universal(_: impl Debug) { panic!() }\n+fn in_parameters(_: impl Debug) { panic!() }\n \n // Allowed\n-fn simple_existential() -> impl Debug { panic!() }\n+fn in_return() -> impl Debug { panic!() }\n \n // Allowed\n-fn collection_universal(_: Vec<impl Debug>) { panic!() }\n+fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n // Allowed\n-fn collection_existential() -> Vec<impl Debug> { panic!() }\n+fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n \n // Disallowed\n-fn fn_type_universal(_: fn(impl Debug)) { panic!() }\n+fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n-fn fn_type_existential() -> fn(impl Debug) { panic!() }\n+fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n-// Allowed\n-fn dyn_universal(_: &dyn Iterator<Item = impl Debug>) { panic!() }\n+// Disallowed\n+fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+// FIXME -- no error currently\n+\n+// Disallowed\n+fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+// FIXME -- no error currently\n+\n+// Disallowed\n+fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+// FIXME -- no error currently\n \n // Disallowed\n-fn dyn_fn_trait(_: &dyn Fn(impl Debug)) { panic!() }\n+fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n+// Disallowed\n+fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+// FIXME -- no error currently\n+\n // Allowed\n-fn nested_universal(_: impl Iterator<Item = impl Iterator>) { panic!() }\n+fn in_impl_Trait_in_parameters(_: impl Iterator<Item = impl Iterator>) { panic!() }\n \n // Allowed\n-fn nested_existential() -> impl IntoIterator<Item = impl IntoIterator> {\n+fn in_impl_Trait_in_return() -> impl IntoIterator<Item = impl IntoIterator> {\n     vec![vec![0; 10], vec![12; 7], vec![8; 3]]\n }\n \n // Disallowed\n-fn universal_fn_trait(_: impl Fn(impl Debug)) { panic!() }\n+struct InBraceStructField { x: impl Debug }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+struct InAdtInBraceStructField { x: Vec<impl Debug> }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n-struct ImplMember { x: impl Debug }\n+struct InTupleStructField(impl Debug);\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n-trait Universal {\n-    // FIXME, should error?\n-    fn universal(impl Debug);\n+enum InEnum {\n+    InBraceVariant { x: impl Debug },\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    InTupleVariant(impl Debug),\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Allowed\n+trait InTraitDefnParameters {\n+    fn in_parameters(_: impl Debug);\n }\n \n // Disallowed\n-trait Existential {\n-    fn existential() -> impl Debug;\n+trait InTraitDefnReturn {\n+    fn in_return() -> impl Debug;\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Allowed and disallowed in trait impls\n+trait DummyTrait {\n+    type Out;\n+    fn in_trait_impl_parameter(impl Debug);\n+    fn in_trait_impl_return() -> Self::Out;\n+}\n+impl DummyTrait for () {\n+    type Out = impl Debug;\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+    fn in_trait_impl_parameter(_: impl Debug) { }\n+    // Allowed\n+\n+    fn in_trait_impl_return() -> impl Debug { () }\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Allowed\n+struct DummyType;\n+impl DummyType {\n+    fn in_inherent_impl_parameters(_: impl Debug) { }\n+    fn in_inherent_impl_return() -> impl Debug { () }\n+}\n+\n+// Disallowed\n+extern \"C\" {\n+    fn in_foreign_parameters(_: impl Debug);\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    // FIXME currently allowed\n+\n+    fn in_foreign_return() -> impl Debug;\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    // FIXME currently allowed\n+}\n+\n+// Allowed\n+extern \"C\" fn in_extern_fn_parameters(_: impl Debug) {\n+}\n+\n+// Allowed\n+extern \"C\" fn in_extern_fn_return() -> impl Debug {\n+    22\n+}\n+\n+type InTypeAlias<R> = impl Debug;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+type InReturnInTypeAlias<R> = fn() -> impl Debug;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed in impl headers\n+impl PartialEq<impl Debug> for () {\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Disallowed in impl headers\n+impl PartialEq<()> for impl Debug {\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Disallowed in inherent impls\n+impl impl Debug {\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Disallowed in inherent impls\n+struct InInherentImplAdt<T> { t: T }\n+impl InInherentImplAdt<impl Debug> {\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Disallowed in where clauses\n+fn in_fn_where_clause()\n+    where impl Debug: Debug\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+{\n+}\n+\n+// Disallowed in where clauses\n+fn in_adt_in_fn_where_clause()\n+    where Vec<impl Debug>: Debug\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+{\n+}\n+\n+// Disallowed\n+fn in_trait_parameter_in_fn_where_clause<T>()\n+    where T: PartialEq<impl Debug>\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+{\n+}\n+\n+// Disallowed\n+fn in_Fn_parameter_in_fn_where_clause<T>()\n+    where T: Fn(impl Debug)\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+{\n+}\n+\n+// Disallowed\n+fn in_Fn_return_in_fn_where_clause<T>()\n+    where T: Fn() -> impl Debug\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+{\n+}\n+\n+fn main() {\n+    let _in_local_variable: impl Fn() = || {};\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    let _in_return_in_local_variable = || -> impl Fn() { || {} };\n     //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n-fn main() {}"}]}