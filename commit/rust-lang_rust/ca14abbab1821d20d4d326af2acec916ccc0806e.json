{"sha": "ca14abbab1821d20d4d326af2acec916ccc0806e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTRhYmJhYjE4MjFkMjBkNGQzMjZhZjJhY2VjOTE2Y2NjMDgwNmU=", "commit": {"author": {"name": "Alan Somers", "email": "asomers@gmail.com", "date": "2021-03-27T17:12:38Z"}, "committer": {"name": "Alan Somers", "email": "asomers@gmail.com", "date": "2021-04-02T04:57:20Z"}, "message": "Fix stack overflow detection on FreeBSD 11.1+\n\nBeginning with FreeBSD 10.4 and 11.1, there is one guard page by\ndefault.  And the stack autoresizes, so if Rust allocates its own guard\npage, then FreeBSD's will simply move up one page.  The best solution is\nto just use the OS's guard page.", "tree": {"sha": "566541c26c55daa945abf04d3fcab86b416fb354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/566541c26c55daa945abf04d3fcab86b416fb354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca14abbab1821d20d4d326af2acec916ccc0806e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca14abbab1821d20d4d326af2acec916ccc0806e", "html_url": "https://github.com/rust-lang/rust/commit/ca14abbab1821d20d4d326af2acec916ccc0806e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca14abbab1821d20d4d326af2acec916ccc0806e/comments", "author": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e3dffa50cfffdcfa145c0cc0ba48b49abc0c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e3dffa50cfffdcfa145c0cc0ba48b49abc0c07", "html_url": "https://github.com/rust-lang/rust/commit/52e3dffa50cfffdcfa145c0cc0ba48b49abc0c07"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "b8f43caec32a3962e219cd6bbc0c7521a9bde4fc", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca14abbab1821d20d4d326af2acec916ccc0806e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca14abbab1821d20d4d326af2acec916ccc0806e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=ca14abbab1821d20d4d326af2acec916ccc0806e", "patch": "@@ -343,6 +343,20 @@ pub mod guard {\n             // it can eventually grow to. It cannot be used to determine\n             // the position of kernel's stack guard.\n             None\n+        } else if cfg!(target_os = \"freebsd\") {\n+            // FreeBSD's stack autogrows, and optionally includes a guard page\n+            // at the bottom.  If we try to remap the bottom of the stack\n+            // ourselves, FreeBSD's guard page moves upwards.  So we'll just use\n+            // the builtin guard page.\n+            let stackaddr = get_stack_start_aligned()?;\n+            let guardaddr = stackaddr as usize;\n+            // Technically the number of guard pages is tunable and controlled\n+            // by the security.bsd.stack_guard_page sysctl, but there are\n+            // few reasons to change it from the default.  The default value has\n+            // been 1 ever since FreeBSD 11.1 and 10.4.\n+            const GUARD_PAGES: usize = 1;\n+            let guard = guardaddr..guardaddr + GUARD_PAGES * page_size;\n+            Some(guard)\n         } else {\n             // Reallocate the last page of the stack.\n             // This ensures SIGBUS will be raised on\n@@ -371,9 +385,8 @@ pub mod guard {\n             }\n \n             let guardaddr = stackaddr as usize;\n-            let offset = if cfg!(target_os = \"freebsd\") { 2 } else { 1 };\n \n-            Some(guardaddr..guardaddr + offset * page_size)\n+            Some(guardaddr..guardaddr + page_size)\n         }\n     }\n \n@@ -417,11 +430,7 @@ pub mod guard {\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr, &mut size), 0);\n \n             let stackaddr = stackaddr as usize;\n-            ret = if cfg!(target_os = \"freebsd\") {\n-                // FIXME does freebsd really fault *below* the guard addr?\n-                let guardaddr = stackaddr - guardsize;\n-                Some(guardaddr - PAGE_SIZE.load(Ordering::Relaxed)..guardaddr)\n-            } else if cfg!(target_os = \"netbsd\") {\n+            ret = if cfg!(any(target_os = \"freebsd\", target_os = \"netbsd\")) {\n                 Some(stackaddr - guardsize..stackaddr)\n             } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n                 Some(stackaddr - guardsize..stackaddr)"}]}