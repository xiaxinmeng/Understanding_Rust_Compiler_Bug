{"sha": "9273782d559a342beb2443018f2f8fc873f53b79", "node_id": "C_kwDOAAsO6NoAKDkyNzM3ODJkNTU5YTM0MmJlYjI0NDMwMThmMmY4ZmM4NzNmNTNiNzk", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-05T11:43:11Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-10T01:21:59Z"}, "message": "Move `TRY_LOAD_FROM_DISK` out of `rustc_queries` to `rustc_query_impl`\n\nWe want to refer to `crate::plumbing::try_load_from_disk` in the const, but hard-coding it in\nrustc_queries, where we don't yet know the crate this macro will be called in, seems kind of hacky.\nDo it in query_impl instead.", "tree": {"sha": "1d32bc06daadfe64c198eb165f0f743e45d90be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d32bc06daadfe64c198eb165f0f743e45d90be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9273782d559a342beb2443018f2f8fc873f53b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9273782d559a342beb2443018f2f8fc873f53b79", "html_url": "https://github.com/rust-lang/rust/commit/9273782d559a342beb2443018f2f8fc873f53b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9273782d559a342beb2443018f2f8fc873f53b79/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7208bdee33460b9915e6b389b236d231d2ca3ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7208bdee33460b9915e6b389b236d231d2ca3ffc", "html_url": "https://github.com/rust-lang/rust/commit/7208bdee33460b9915e6b389b236d231d2ca3ffc"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "742ae964f5c70999eb6284b1960a995b85fc3021", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9273782d559a342beb2443018f2f8fc873f53b79/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273782d559a342beb2443018f2f8fc873f53b79/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=9273782d559a342beb2443018f2f8fc873f53b79", "patch": "@@ -253,18 +253,13 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n             fn cache_on_disk(#tcx: TyCtxt<'tcx>, #key: &Self::Key) -> bool {\n                 #expr\n             }\n-\n-            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n-                = Some(crate::plumbing::try_load_from_disk::<Self::Value>);\n         }\n     } else {\n         quote! {\n             #[inline]\n             fn cache_on_disk(_: TyCtxt<'tcx>, _: &Self::Key) -> bool {\n                 false\n             }\n-\n-            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>> = None;\n         }\n     };\n \n@@ -333,6 +328,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             remap_env_constness,\n         );\n \n+        if modifiers.cache.is_some() {\n+            attributes.push(quote! { (cache) });\n+        }\n+\n         // This uses the span of the query definition for the commas,\n         // which can be important if we later encounter any ambiguity\n         // errors with any of the numerous macro_rules! macros that"}, {"sha": "e38de2a0e407a872263bf540f65ee7e31b8b64b7", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9273782d559a342beb2443018f2f8fc873f53b79/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273782d559a342beb2443018f2f8fc873f53b79/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=9273782d559a342beb2443018f2f8fc873f53b79", "patch": "@@ -412,6 +412,9 @@ macro_rules! define_queries {\n         impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n             rustc_query_description! { $name }\n \n+            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n+                = should_ever_cache_on_disk!([$($modifiers)*]);\n+\n             type Cache = query_storage::$name<'tcx>;\n \n             #[inline(always)]"}]}