{"sha": "1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "node_id": "C_kwDOAAsO6NoAKDFjNjYxNjM4NzFmYzBjODhiZGZhNDM1YjhjNWQ2YWVkZjJhM2Q0Yzc", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T06:49:55Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T06:50:49Z"}, "message": "Bless stderr files after rustfmt", "tree": {"sha": "b3945ac5dd978b109cb652640ac6465478f386b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3945ac5dd978b109cb652640ac6465478f386b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKxakkACgkQ+boUO5X/\nbYIuEQ/+NElCygfUnrbEh0ytuiOP4qVuslCw2MWqgEKWEQqX9HrMk7UR9WT2zmIV\nYpcGVNQeLmh6NHV9vf5Ddjpf9ysh1Fq0FA6C418urY7mcN9vsfxDzMsvmTDpPNT4\nMVXo7oLx7rH0DGP/tmN9uKOdLD/gD9MGpUR2xrNmzLKhyFyc0pfyZjhAEULiPC0y\nnTSSqWad5PRI0q9JSqHpLBmaipGq4CtkupK8hzRr3meMpYTtRthWNI2pqkV4tgW+\n0w+JU+idFEw38w/U/Nb61m1HOoux+JQdjLP7OILwMzDDmuJu38rUTlXVVklESY9q\nCuaX7nxjH0fx1mpRShsknHjZVOLarRKb3fl5ClDE2moUgEwJL2qdRJrqyqAeMezf\no9uPfgrB6CcJh1l8tdCIlDeWzie9jCNyv638AhFsZa7lHr8dw0WUhYJ2GXhIAcMY\nCTxMOUG4vgV2G5EFED5afYDeynjxUeFl59RLQ1nw8JBtOcQp9A4f2twviR6UewvL\noSKnE46ZNadO3Mf1Ga2aCFdbbK4yrUQ5UguCAnSsRegRG1oTOT+5hBSFmuc2ElQL\nVkGen221Ejt3vGle2MXcUzHlYyGGltEfXUAjiqrOmMfEf7kvvShtNB4igJwLS+3Z\naUqJFmJU1NBB5toSunbatBzHFAJTEUOe09MDs5f8/21KoC06wbA=\n=Q/eq\n-----END PGP SIGNATURE-----", "payload": "tree b3945ac5dd978b109cb652640ac6465478f386b8\nparent 30376ba709ef627d09a0ff365cd76ec58f329880\nauthor David Tolnay <dtolnay@gmail.com> 1655794195 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655794249 -0700\n\nBless stderr files after rustfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "html_url": "https://github.com/rust-lang/rust/commit/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30376ba709ef627d09a0ff365cd76ec58f329880", "url": "https://api.github.com/repos/rust-lang/rust/commits/30376ba709ef627d09a0ff365cd76ec58f329880", "html_url": "https://github.com/rust-lang/rust/commit/30376ba709ef627d09a0ff365cd76ec58f329880"}], "stats": {"total": 140, "additions": 72, "deletions": 68}, "files": [{"sha": "1adc9f8235eef0d79336e15b87045913650f8f06", "filename": "tests/fail/intrinsics/simd-rem-by-zero.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: calculating the remainder with a divisor of zero\n   --> $DIR/simd-rem-by-zero.rs:LL:CC\n    |\n-LL |     simd_rem(x, y);\n-   |     ^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n+LL |         simd_rem(x, y);\n+   |         ^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "bc6a06fc88e5255f2aed9d9f534a18eba391f97c", "filename": "tests/fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -11,8 +11,12 @@ LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n   --> $DIR/simd-scatter.rs:LL:CC\n    |\n-LL |     Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked(&mut vec, Mask::splat(true), idxs);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | /         Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked(\n+LL | |             &mut vec,\n+LL | |             Mask::splat(true),\n+LL | |             idxs,\n+LL | |         );\n+   | |_________^\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0a72ed39827b224ca2f781181db6e092336d95a5", "filename": "tests/fail/intrinsics/simd-select-bitmask-invalid.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\n   --> $DIR/simd-select-bitmask-invalid.rs:LL:CC\n    |\n-LL |     simd_select_bitmask(0b11111111u8, x, x);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\n+LL |         simd_select_bitmask(0b11111111u8, x, x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "c0ceaac06cddf96a773da806ad97bf173da3b4a3", "filename": "tests/fail/intrinsics/simd-select-invalid-bool.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: each element of a SIMD mask must be all-0-bits or all-1-bits\n   --> $DIR/simd-select-invalid-bool.rs:LL:CC\n    |\n-LL |     simd_select(x, x, x);\n-   |     ^^^^^^^^^^^^^^^^^^^^ each element of a SIMD mask must be all-0-bits or all-1-bits\n+LL |         simd_select(x, x, x);\n+   |         ^^^^^^^^^^^^^^^^^^^^ each element of a SIMD mask must be all-0-bits or all-1-bits\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "1d990e341e68da859ec426cfa51c30470466d9c8", "filename": "tests/fail/intrinsics/simd-shl-too-far.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflowing shift by 100 in `simd_shl` in SIMD lane 0\n   --> $DIR/simd-shl-too-far.rs:LL:CC\n    |\n-LL |     simd_shl(x, y);\n-   |     ^^^^^^^^^^^^^^ overflowing shift by 100 in `simd_shl` in SIMD lane 0\n+LL |         simd_shl(x, y);\n+   |         ^^^^^^^^^^^^^^ overflowing shift by 100 in `simd_shl` in SIMD lane 0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "58ef3737545aae67c50bf011c57cdaf3eea18294", "filename": "tests/fail/intrinsics/simd-shr-too-far.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflowing shift by 40 in `simd_shr` in SIMD lane 1\n   --> $DIR/simd-shr-too-far.rs:LL:CC\n    |\n-LL |     simd_shr(x, y);\n-   |     ^^^^^^^^^^^^^^ overflowing shift by 40 in `simd_shr` in SIMD lane 1\n+LL |         simd_shr(x, y);\n+   |         ^^^^^^^^^^^^^^ overflowing shift by 40 in `simd_shr` in SIMD lane 1\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "5f0e86dc653ec67981a3f6005d2e9f0ca9b5d297", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -11,8 +11,8 @@ LL |     unsafe { intrinsics::unreachable() }\n note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n    |\n-LL |         unsafe { std::hint::unreachable_unchecked(); }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |             std::hint::unreachable_unchecked();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `main` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n    |"}, {"sha": "eb02136478f2bd8648edaa9b80cbaa37f89a280d", "filename": "tests/fail/stacked_borrows/alias_through_mutation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -12,8 +12,8 @@ LL |     let _val = *target_alias;\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/alias_through_mutation.rs:LL:CC\n    |\n-LL |     unsafe { *x = &mut *(target as *mut _); }\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         *x = &mut *(target as *mut _);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/alias_through_mutation.rs:LL:CC\n    |"}, {"sha": "3c3e6bbf1bc724deedbaf6281f2a54ea73f36de3", "filename": "tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,30 +1,30 @@\n error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n-LL |   *our\n-   |   ^^^^\n-   |   |\n-   |   attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |   this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |     *our\n+   |     ^^^^\n+   |     |\n+   |     attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n LL | / fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n-LL | |   unknown_code_1(&*our);\n+LL | |     unknown_code_1(&*our);\n LL | |\n-LL | |   // This \"re-asserts\" uniqueness of the reference: After writing, we know\n+LL | |     // This \"re-asserts\" uniqueness of the reference: After writing, we know\n ...  |\n-LL | |   *our\n+LL | |     *our\n LL | | }\n    | |_^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n-LL |     *LEAK = 7;\n-   |     ^^^^^^^^^\n+LL |         *LEAK = 7;\n+   |         ^^^^^^^^^\n    = note: inside `demo_mut_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n note: inside `main` at $DIR/box_exclusive_violation1.rs:LL:CC\n   --> $DIR/box_exclusive_violation1.rs:LL:CC"}, {"sha": "14cede13b7a18ef263d72fc4b66ee74ad28262f0", "filename": "tests/fail/stacked_borrows/buggy_as_mut_slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -17,8 +17,8 @@ LL |     let v1 = safe::as_mut_slice(&v);\n help: <TAG> was later invalidated at offsets [0x0..0xc]\n   --> $DIR/buggy_as_mut_slice.rs:LL:CC\n    |\n-LL |             from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len())\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         unsafe { from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len()) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/buggy_as_mut_slice.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "47ab7d6a062a78e8aaf2ca27dae5408e5f24c458", "filename": "tests/fail/stacked_borrows/buggy_split_at_mut.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -12,13 +12,13 @@ LL |     let (a, b) = safe::split_at_mut(&mut array, 0);\n help: <TAG> was created by a retag at offsets [0x0..0x10]\n   --> $DIR/buggy_split_at_mut.rs:LL:CC\n    |\n-LL |             (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |                 from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x10]\n   --> $DIR/buggy_split_at_mut.rs:LL:CC\n    |\n-LL |             from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid),\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/buggy_split_at_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9782f1aa3a58d77f0fcf684430332602c894f9d4", "filename": "tests/fail/stacked_borrows/illegal_read6.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/illegal_read6.rs:LL:CC\n    |\n-LL |     let _val = *raw;\n-   |                ^^^^\n-   |                |\n-   |                attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |         let _val = *raw;\n+   |                    ^^^^\n+   |                    |\n+   |                    attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: tag was most recently created at offsets [0x0..0x4]\n   --> $DIR/illegal_read6.rs:LL:CC\n    |\n-LL |     let raw = x as *mut _;\n-   |               ^\n+LL |         let raw = x as *mut _;\n+   |                   ^\n help: tag was later invalidated at offsets [0x0..0x4]\n   --> $DIR/illegal_read6.rs:LL:CC\n    |\n-LL |     let x = &mut *x; // kill `raw`\n-   |             ^^^^^^^\n+LL |         let x = &mut *x; // kill `raw`\n+   |                 ^^^^^^^\n    = note: inside `main` at $DIR/illegal_read6.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3d70945fa6c635a4bf7998ec09c7617b67677897", "filename": "tests/fail/stacked_borrows/illegal_read7.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/illegal_read7.rs:LL:CC\n    |\n-LL |     let _val = *x.get_mut();\n-   |                 ^^^^^^^^^^^\n-   |                 |\n-   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+LL |         let _val = *x.get_mut();\n+   |                     ^^^^^^^^^^^\n+   |                     |\n+   |                     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/illegal_read7.rs:LL:CC\n    |\n-LL |     let x = &mut *raw;\n-   |             ^^^^^^^^^\n+LL |         let x = &mut *raw;\n+   |                 ^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/illegal_read7.rs:LL:CC\n    |\n-LL |     let _val = ptr::read(raw);\n-   |                ^^^^^^^^^^^^^^\n+LL |         let _val = ptr::read(raw);\n+   |                    ^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/illegal_read7.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7c0cb0066b2703ae9154a255dcce998d662dcfa3", "filename": "tests/fail/stacked_borrows/illegal_read8.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/illegal_read8.rs:LL:CC\n    |\n-LL |     let _fail = *y1;\n-   |                 ^^^\n-   |                 |\n-   |                 attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                 this error occurs as part of an access at ALLOC[0x0..0x4]\n+LL |         let _fail = *y1;\n+   |                     ^^^\n+   |                     |\n+   |                     attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                     this error occurs as part of an access at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/illegal_read8.rs:LL:CC\n    |\n-LL |     let y1: &i32 = mem::transmute(&*x); // launder lifetimes\n-   |                    ^^^^^^^^^^^^^^^^^^^\n+LL |         let y1: &i32 = mem::transmute(&*x); // launder lifetimes\n+   |                        ^^^^^^^^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/illegal_read8.rs:LL:CC\n    |\n-LL |     *y2 += 1;\n-   |     ^^^^^^^^\n+LL |         *y2 += 1;\n+   |         ^^^^^^^^\n    = note: inside `main` at $DIR/illegal_read8.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2490fd3e1e9aab592eeb0954c0d8f6cf5c2e4e96", "filename": "tests/fail/stacked_borrows/interior_mut1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr?ref=1c66163871fc0c88bdfa435b8c5d6aedf2a3d4c7", "patch": "@@ -1,24 +1,24 @@\n error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n   --> $DIR/interior_mut1.rs:LL:CC\n    |\n-LL |     let _val = *inner_shr.get();\n-   |                 ^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+LL |         let _val = *inner_shr.get();\n+   |                     ^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n help: <TAG> was created by a retag at offsets [0x0..0x4]\n   --> $DIR/interior_mut1.rs:LL:CC\n    |\n-LL |     let inner_shr = &*inner_uniq; // adds a SharedReadWrite\n-   |                     ^^^^^^^^^^^^\n+LL |         let inner_shr = &*inner_uniq; // adds a SharedReadWrite\n+   |                         ^^^^^^^^^^^^\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/interior_mut1.rs:LL:CC\n    |\n-LL |     *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `main` at $DIR/interior_mut1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}]}