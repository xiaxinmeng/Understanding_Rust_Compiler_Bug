{"sha": "1447ee4c2031cfc0950b1bf0f658055e7a86e0c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDdlZTRjMjAzMWNmYzA5NTBiMWJmMGY2NTgwNTVlN2E4NmUwYzI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-24T04:14:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-24T13:51:14Z"}, "message": "Rollup merge of #24727 - rkruppe:reference-audit, r=steveklabnik\n\nIt was in pretty good shape, but since that is my pet peeve, I clarified the compiler/interpreter distinction and why it is irrelevant for this section. Otherwise only a couple of minor clarifications, and weasel words where reality is more complicated than the text accounted for (e.g., there is more than one kind of library).\n\nr? @steveklabnik", "tree": {"sha": "aaba16e5f6fd64f9107b81b0c978914313f63b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaba16e5f6fd64f9107b81b0c978914313f63b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1447ee4c2031cfc0950b1bf0f658055e7a86e0c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1447ee4c2031cfc0950b1bf0f658055e7a86e0c2", "html_url": "https://github.com/rust-lang/rust/commit/1447ee4c2031cfc0950b1bf0f658055e7a86e0c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1447ee4c2031cfc0950b1bf0f658055e7a86e0c2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1df5dadfbc3d852cf531cfb8fac0d26c1df3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1df5dadfbc3d852cf531cfb8fac0d26c1df3f8", "html_url": "https://github.com/rust-lang/rust/commit/0c1df5dadfbc3d852cf531cfb8fac0d26c1df3f8"}, {"sha": "e9f298082e84a4c7a355d777fce2b4e3347b16e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f298082e84a4c7a355d777fce2b4e3347b16e3", "html_url": "https://github.com/rust-lang/rust/commit/e9f298082e84a4c7a355d777fce2b4e3347b16e3"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "1cedbf299c327949f370b08dc2bda99e5467591b", "filename": "src/doc/reference.md", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1447ee4c2031cfc0950b1bf0f658055e7a86e0c2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1447ee4c2031cfc0950b1bf0f658055e7a86e0c2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1447ee4c2031cfc0950b1bf0f658055e7a86e0c2", "patch": "@@ -738,15 +738,26 @@ Rust syntax is restricted in two ways:\n \n # Crates and source files\n \n-Rust is a *compiled* language. Its semantics obey a *phase distinction* between\n-compile-time and run-time. Those semantic rules that have a *static\n+Although Rust, like any other language, can be implemented by an interpreter as\n+well as a compiler, the only existing implementation is a compiler &mdash;\n+from now on referred to as *the* Rust compiler &mdash; and the language has\n+always been designed to be compiled. For these reasons, this section assumes a\n+compiler.\n+\n+Rust's semantics obey a *phase distinction* between compile-time and\n+run-time.[^phase-distinction] Those semantic rules that have a *static\n interpretation* govern the success or failure of compilation. Those semantics\n that have a *dynamic interpretation* govern the behavior of the program at\n run-time.\n \n+[^phase-distinction]: This distinction would also exist in an interpreter.\n+    Static checks like syntactic analysis, type checking, and lints should\n+    happen before the program is executed regardless of when it is executed.\n+\n The compilation model centers on artifacts called _crates_. Each compilation\n processes a single crate in source form, and if successful, produces a single\n-crate in binary form: either an executable or a library.[^cratesourcefile]\n+crate in binary form: either an executable or some sort of\n+library.[^cratesourcefile]\n \n [^cratesourcefile]: A crate is somewhat analogous to an *assembly* in the\n     ECMA-335 CLI model, a *library* in the SML/NJ Compilation Manager, a *unit*\n@@ -767,21 +778,25 @@ extension `.rs`.\n A Rust source file describes a module, the name and location of which &mdash;\n in the module tree of the current crate &mdash; are defined from outside the\n source file: either by an explicit `mod_item` in a referencing source file, or\n-by the name of the crate itself.\n+by the name of the crate itself. Every source file is a module, but not every\n+module needs its own source file: [module definitions](#modules) can be nested\n+within one file.\n \n Each source file contains a sequence of zero or more `item` definitions, and\n-may optionally begin with any number of `attributes` that apply to the\n-containing module. Attributes on the anonymous crate module define important\n-metadata that influences the behavior of the compiler.\n+may optionally begin with any number of [attributes](#Items and attributes)\n+that apply to the containing module, most of which influence the behavior of\n+the compiler. The anonymous crate module can have additional attributes that\n+apply to the crate as a whole.\n \n ```no_run\n-// Crate name\n+// Specify the crate name.\n #![crate_name = \"projx\"]\n \n-// Specify the output type\n+// Specify the type of output artifact.\n #![crate_type = \"lib\"]\n \n-// Turn on a warning\n+// Turn on a warning.\n+// This can be done in any module, not just the anonymous crate module.\n #![warn(non_camel_case_types)]\n ```\n "}]}