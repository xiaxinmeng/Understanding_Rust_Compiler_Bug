{"sha": "cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYmRiNzNlYjA3ZmI5YTI5ZTIwZjRmYjE2YjhmMWMwNTllOTc2M2Y=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-16T23:00:17Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:27Z"}, "message": "Remove FunctionContext::cleanup, replacing it with a Drop impl.\n\nMove alloca and initial entry block creation into FunctionContext::new.", "tree": {"sha": "0071e279eff97c161971464d7149491f7ce33b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0071e279eff97c161971464d7149491f7ce33b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "html_url": "https://github.com/rust-lang/rust/commit/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8614b55ad248c254be6c00f4eba1f88ac97740", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8614b55ad248c254be6c00f4eba1f88ac97740", "html_url": "https://github.com/rust-lang/rust/commit/bf8614b55ad248c254be6c00f4eba1f88ac97740"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "d2b86ade7a2ab26fb283d5396321453224b5d1db", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "patch": "@@ -710,6 +710,7 @@ extern \"C\" {\n \n     // Operations on instructions\n     pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;\n+    pub fn LLVMGetFirstBasicBlock(Fn: ValueRef) -> BasicBlockRef;\n     pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);\n "}, {"sha": "e8a75d26534c8f01c886a67e5fb8921e3fd9acec", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "patch": "@@ -653,7 +653,6 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n     /// and builds the return block.\n     pub fn finish(&'blk self, ret_cx: &BlockAndBuilder<'blk, 'tcx>) {\n         self.build_return_block(ret_cx);\n-        self.cleanup();\n     }\n \n     // Builds the return block for a function."}, {"sha": "11c995accc53b407f5dfb7876abaddb6e0981f34", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "patch": "@@ -283,7 +283,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // the function, due to LLVM's quirks.\n     // A marker for the place where we want to insert the function's static\n     // allocas, so that LLVM will coalesce them into a single alloca call.\n-    pub alloca_insert_pt: Cell<Option<ValueRef>>,\n+    alloca_insert_pt: Option<ValueRef>,\n \n     // When working with landingpad-based exceptions this value is alloca'd and\n     // later loaded when using the resume instruction. This ends up being\n@@ -347,35 +347,37 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             debuginfo::empty_function_debug_context(ccx)\n         };\n \n-        FunctionContext {\n+        let mut fcx = FunctionContext {\n             mir: mir,\n             llfn: llfndecl,\n             llretslotptr: Cell::new(None),\n             param_env: ccx.tcx().empty_parameter_environment(),\n-            alloca_insert_pt: Cell::new(None),\n+            alloca_insert_pt: None,\n             landingpad_alloca: Cell::new(None),\n             fn_ty: fn_ty,\n             param_substs: param_substs,\n             ccx: ccx,\n             debug_context: debug_context,\n             alloca_builder: OwnedBuilder::new_with_ccx(ccx),\n-        }\n-    }\n+        };\n \n-    /// Performs setup on a newly created function, creating the entry\n-    /// scope block and allocating space for the return pointer.\n-    pub fn init(&'a self, skip_retptr: bool) -> BlockAndBuilder<'a, 'tcx> {\n-        let entry_bcx = self.build_new_block(\"entry-block\");\n+        let val = {\n+            let entry_bcx = fcx.build_new_block(\"entry-block\");\n+            let val = entry_bcx.load(C_null(Type::i8p(ccx)));\n+            fcx.alloca_builder.builder.position_at_start(entry_bcx.llbb());\n+            val\n+        };\n \n         // Use a dummy instruction as the insertion point for all allocas.\n-        // This is later removed in FunctionContext::cleanup.\n-        self.alloca_insert_pt.set(Some(unsafe {\n-            entry_bcx.load(C_null(Type::i8p(self.ccx)));\n-            llvm::LLVMGetFirstInstruction(entry_bcx.llbb())\n-        }));\n+        // This is later removed in the drop of FunctionContext.\n+        fcx.alloca_insert_pt = Some(val);\n \n-        self.alloca_builder.builder.position_at_start(entry_bcx.llbb());\n+        fcx\n+    }\n \n+    /// Performs setup on a newly created function, creating the entry\n+    /// scope block and allocating space for the return pointer.\n+    pub fn init(&'a self, skip_retptr: bool) -> BlockAndBuilder<'a, 'tcx> {\n         if !self.fn_ty.ret.is_ignore() && !skip_retptr {\n             // We normally allocate the llretslotptr, unless we\n             // have been instructed to skip it for immediate return\n@@ -395,19 +397,15 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             self.llretslotptr.set(Some(slot));\n         }\n \n-        entry_bcx\n+        BlockAndBuilder::new(unsafe {\n+            llvm::LLVMGetFirstBasicBlock(self.llfn)\n+        }, self)\n     }\n \n     pub fn mir(&self) -> Ref<'tcx, Mir<'tcx>> {\n         self.mir.as_ref().map(Ref::clone).expect(\"fcx.mir was empty\")\n     }\n \n-    pub fn cleanup(&self) {\n-        unsafe {\n-            llvm::LLVMInstructionEraseFromParent(self.alloca_insert_pt.get().unwrap());\n-        }\n-    }\n-\n     pub fn new_block(&'a self, name: &str) -> BasicBlockRef {\n         unsafe {\n             let name = CString::new(name).unwrap();\n@@ -517,6 +515,13 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> Drop for FunctionContext<'a, 'tcx> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            llvm::LLVMInstructionEraseFromParent(self.alloca_insert_pt.unwrap());\n+        }\n+    }\n+}\n \n pub struct OwnedBuilder<'blk, 'tcx: 'blk> {\n     builder: Builder<'blk, 'tcx>"}, {"sha": "716cbec718e3cf704b1d6a0b06a863c98e3bf431", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "patch": "@@ -967,7 +967,6 @@ fn gen_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     let llfn = declare::define_internal_fn(ccx, name, rust_fn_ty);\n     let fcx = FunctionContext::new(ccx, llfn, fn_ty, None);\n     trans(fcx.init(true));\n-    fcx.cleanup();\n     llfn\n }\n "}, {"sha": "6c72791ec0fc6e7f0b21c9c80bdde7378fb5bdbf", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=cbbdb73eb07fb9a29e20f4fb16b8f1c059e9763f", "patch": "@@ -306,8 +306,6 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n             block.delete();\n         }\n     }\n-\n-    fcx.cleanup();\n }\n \n /// Produce, for each argument, a `ValueRef` pointing at the"}]}