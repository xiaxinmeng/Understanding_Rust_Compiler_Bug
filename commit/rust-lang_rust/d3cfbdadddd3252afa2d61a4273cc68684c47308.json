{"sha": "d3cfbdadddd3252afa2d61a4273cc68684c47308", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2ZiZGFkZGRkMzI1MmFmYTJkNjFhNDI3M2NjNjg2ODRjNDczMDg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-07T01:07:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-07T01:07:52Z"}, "message": "Correct flow-graph wiring for STMT_if.", "tree": {"sha": "9ce751b7ef909aec019c5ccd983e6e74127a6ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ce751b7ef909aec019c5ccd983e6e74127a6ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cfbdadddd3252afa2d61a4273cc68684c47308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cfbdadddd3252afa2d61a4273cc68684c47308", "html_url": "https://github.com/rust-lang/rust/commit/d3cfbdadddd3252afa2d61a4273cc68684c47308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cfbdadddd3252afa2d61a4273cc68684c47308/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6302e1805630bb28ecfae8b2c7692185e0667793", "url": "https://api.github.com/repos/rust-lang/rust/commits/6302e1805630bb28ecfae8b2c7692185e0667793", "html_url": "https://github.com/rust-lang/rust/commit/6302e1805630bb28ecfae8b2c7692185e0667793"}], "stats": {"total": 87, "additions": 64, "deletions": 23}, "files": [{"sha": "06d2f72ffa0cf8ee52109584510bcaa1f722204d", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 64, "deletions": 23, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d3cfbdadddd3252afa2d61a4273cc68684c47308/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/d3cfbdadddd3252afa2d61a4273cc68684c47308/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=d3cfbdadddd3252afa2d61a4273cc68684c47308", "patch": "@@ -629,6 +629,19 @@ let remove_flow_edges\n     Hashtbl.replace graph n (lset_diff existing dsts)\n ;;\n \n+\n+let last_id (nodes:('a identified) array) : node_id =\n+  let len = Array.length nodes in\n+    nodes.(len-1).id\n+;;\n+\n+let last_id_or_block_id (block:Ast.block) : node_id =\n+  let len = Array.length block.node in\n+    if len = 0\n+    then block.id\n+    else last_id block.node\n+;;\n+\n let graph_general_block_structure_building_visitor\n     ((*cx*)_:ctxt)\n     (graph:node_graph)\n@@ -682,7 +695,7 @@ let graph_general_block_structure_building_visitor\n       then\n         begin\n           htab_put graph b.id [b.node.(0).id];\n-          add_flow_edges graph b.node.(len-1).id dsts\n+          add_flow_edges graph (last_id b.node) dsts\n         end\n       else\n         htab_put graph b.id dsts\n@@ -698,7 +711,7 @@ let graph_general_block_structure_building_visitor\n \n \n let graph_special_block_structure_building_visitor\n-    ((*cx*)_:ctxt)\n+    (cx:ctxt)\n     (graph:(node_id, (node_id list)) Hashtbl.t)\n     (inner:Walk.visitor)\n     : Walk.visitor =\n@@ -708,17 +721,48 @@ let graph_special_block_structure_building_visitor\n       match s.node with\n \n         | Ast.STMT_if sif ->\n-            (* \n-             * Drop implicit stmt-bypass edge(s);\n-             * can only flow to inner block(s).\n-             *)\n-            let block_ids =\n-              [sif.Ast.if_then.id] @\n-                match sif.Ast.if_else with\n-                    None -> []\n-                  | Some eb -> [eb.id]\n+            let cond_id = s.id in\n+            let then_id = sif.Ast.if_then.id in\n+            let then_end_id = last_id_or_block_id sif.Ast.if_then in\n+            let show_node s i =\n+              iflog cx\n+                (fun _ ->\n+                   log cx \"node '%s' = %d -> %s\"\n+                     s (int_of_node i) (lset_fmt (Hashtbl.find graph i)))\n             in\n-              Hashtbl.replace graph s.id block_ids\n+              show_node \"initial cond\" cond_id;\n+              show_node \"initial then\" then_id;\n+              show_node \"initial then_end\" then_end_id;\n+              begin\n+                match sif.Ast.if_else with\n+                    None ->\n+                      let succ = Hashtbl.find graph then_end_id in\n+                        Hashtbl.replace graph cond_id (then_id :: succ);\n+                        (* Kill residual messed-up block wiring.*)\n+                        remove_flow_edges graph then_end_id [then_id];\n+                        show_node \"cond\" cond_id;\n+                        show_node \"then\" then_id;\n+                        show_node \"then_end\" then_end_id;\n+\n+                  | Some e ->\n+                      let else_id = e.id in\n+                      let else_end_id = last_id_or_block_id e in\n+                      let succ = Hashtbl.find graph else_end_id in\n+                        show_node \"initial else\" else_id;\n+                        show_node \"initial else_end\" else_end_id;\n+                        Hashtbl.replace graph cond_id [then_id; else_id];\n+                        Hashtbl.replace graph then_end_id succ;\n+                        Hashtbl.replace graph else_end_id succ;\n+                        (* Kill residual messed-up block wiring.*)\n+                        remove_flow_edges graph then_end_id [then_id];\n+                        remove_flow_edges graph else_id [then_id];\n+                        remove_flow_edges graph else_end_id [then_id];\n+                        show_node \"cond\" cond_id;\n+                        show_node \"then\" then_id;\n+                        show_node \"then_end\" then_end_id;\n+                        show_node \"else\" else_id;\n+                        show_node \"else_end\" else_end_id;\n+              end;\n \n         | Ast.STMT_while sw ->\n             (* There are a bunch of rewirings to do on 'while' nodes. *)\n@@ -739,11 +783,12 @@ let graph_special_block_structure_building_visitor\n                   if slen > 0\n                   then\n                     begin\n-                      remove_flow_edges graph s.id [body.id];\n-                      add_flow_edges graph s.id [pre_loop_stmts.(0).id];\n-                      add_flow_edges graph\n-                        pre_loop_stmts.(slen-1).id [body.id];\n-                      pre_loop_stmts.(slen - 1).id\n+                      let pre_loop_begin = pre_loop_stmts.(0).id in\n+                      let pre_loop_end = last_id pre_loop_stmts in\n+                        remove_flow_edges graph s.id [body.id];\n+                        add_flow_edges graph s.id [pre_loop_begin];\n+                        add_flow_edges graph pre_loop_end [body.id];\n+                        pre_loop_end\n                     end\n                   else\n                     body.id\n@@ -756,12 +801,8 @@ let graph_special_block_structure_building_visitor\n                 add_flow_edges graph loop_head_id succ_stmts;\n \n                 (* Flow loop-end to loop-head. *)\n-                let blen = Array.length body.node in\n-                  if blen > 0\n-                  then add_flow_edges graph\n-                    body.node.(blen - 1).id [loop_head_id]\n-                  else add_flow_edges graph\n-                    body.id [loop_head_id]\n+                let loop_end = last_id_or_block_id body in\n+                  add_flow_edges graph loop_end [loop_head_id]\n             end\n \n         | Ast.STMT_alt_tag at ->"}]}