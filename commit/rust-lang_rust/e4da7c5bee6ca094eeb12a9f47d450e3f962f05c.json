{"sha": "e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZGE3YzViZWU2Y2EwOTRlZWIxMmE5ZjQ3ZDQ1MGUzZjk2MmYwNWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-03T05:19:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-03T17:55:59Z"}, "message": "parse_crate_from_source_str takes a parse_sess, not codemap\n\nThis was causing problems when reading from stdin for subsequent passes that\nneeded to generate node ids.", "tree": {"sha": "879eb6d9a3b2f3600b43a8f56421d7e7b888b7d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879eb6d9a3b2f3600b43a8f56421d7e7b888b7d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "html_url": "https://github.com/rust-lang/rust/commit/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a8784c984bd19bf0a369ad5c3f8472ebc646eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a8784c984bd19bf0a369ad5c3f8472ebc646eb", "html_url": "https://github.com/rust-lang/rust/commit/97a8784c984bd19bf0a369ad5c3f8472ebc646eb"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "9b71fc25ceb95085cca045f1f31535e3f9f9ad9e", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "patch": "@@ -106,7 +106,7 @@ fn parse_input_src(sess: session::session, cfg: &ast::crate_cfg,\n     }.read_whole_stream();\n     let src = str::unsafe_from_bytes_ivec(srcbytes);\n     let crate = parser::parse_crate_from_source_str(infile, src, cfg,\n-                                                    sess.get_codemap());\n+                                                    sess.get_parse_sess());\n     ret {crate: crate, src: src};\n }\n "}, {"sha": "9e7f693c74b2d9c67d7862d72c37bad956c0e9f8", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "patch": "@@ -2317,8 +2317,7 @@ fn parse_crate_from_source_file(input: &str, cfg: &ast::crate_cfg,\n }\n \n fn parse_crate_from_source_str(name: &str, source: &str, cfg: &ast::crate_cfg,\n-                               cm: &codemap::codemap) -> @ast::crate {\n-    let sess = @{cm: cm, mutable next_id: 0};\n+                               sess: &parse_sess) -> @ast::crate {\n     let ftype = SOURCE_FILE;\n     let filemap = codemap::new_filemap(name, 0u, 0u);\n     sess.cm.files += ~[filemap];"}, {"sha": "312f0e77787af91d6852643e91aaa9eab7ce43a0", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4da7c5bee6ca094eeb12a9f47d450e3f962f05c/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=e4da7c5bee6ca094eeb12a9f47d450e3f962f05c", "patch": "@@ -224,11 +224,11 @@ fn check_whole_compiler(code: &str) {\n \n fn parse_and_print(code: &str) -> str {\n     let filename = \"tmp.rs\";\n-    let codemap = codemap::new_codemap();\n+    let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n     //write_file(filename, code);\n     let crate =\n-        parser::parse_crate_from_source_str(filename, code, ~[], codemap);\n-    ret as_str(bind pprust::print_crate(codemap, crate, filename,\n+        parser::parse_crate_from_source_str(filename, code, ~[], sess);\n+    ret as_str(bind pprust::print_crate(sess.cm, crate, filename,\n                                         ioivec::string_reader(code), _,\n                                         pprust::no_ann()));\n }\n@@ -336,12 +336,12 @@ fn check_variants(files: &str[]) {\n             let s = ioivec::read_whole_file_str(file);\n             if content_is_dangerous_to_modify(s) || content_is_confusing(s) { cont; }\n             log_err \"check_variants: \" + file;\n-            let codemap = codemap::new_codemap();\n-            let crate = parser::parse_crate_from_source_str(file, s, ~[], codemap);\n-            log_err as_str(bind pprust::print_crate(codemap, crate, file,\n+            let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n+            let crate = parser::parse_crate_from_source_str(file, s, ~[], sess);\n+            log_err as_str(bind pprust::print_crate(sess.cm, crate, file,\n                                         ioivec::string_reader(s), _,\n                                         pprust::no_ann()));\n-            check_variants_of_ast(*crate, codemap, file);\n+            check_variants_of_ast(*crate, sess.cm, file);\n         }\n     }\n }"}]}