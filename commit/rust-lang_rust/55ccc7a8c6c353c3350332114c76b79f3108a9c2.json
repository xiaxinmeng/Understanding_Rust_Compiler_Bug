{"sha": "55ccc7a8c6c353c3350332114c76b79f3108a9c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Y2NjN2E4YzZjMzUzYzMzNTAzMzIxMTRjNzZiNzlmMzEwOGE5YzI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-06T19:42:55Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-26T21:53:13Z"}, "message": "Use break api config for upper_case_acronyms", "tree": {"sha": "26789890436f3e9204138c09ffdb3da892fba3b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26789890436f3e9204138c09ffdb3da892fba3b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ccc7a8c6c353c3350332114c76b79f3108a9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ccc7a8c6c353c3350332114c76b79f3108a9c2", "html_url": "https://github.com/rust-lang/rust/commit/55ccc7a8c6c353c3350332114c76b79f3108a9c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ccc7a8c6c353c3350332114c76b79f3108a9c2/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce581d70698466879dc7acec0629032fb9006fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce581d70698466879dc7acec0629032fb9006fd", "html_url": "https://github.com/rust-lang/rust/commit/1ce581d70698466879dc7acec0629032fb9006fd"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "5139b1464c4818a85459e054a49fee3ccf4c642e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ccc7a8c6c353c3350332114c76b79f3108a9c2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccc7a8c6c353c3350332114c76b79f3108a9c2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=55ccc7a8c6c353c3350332114c76b79f3108a9c2", "patch": "@@ -2020,7 +2020,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));\n+    store.register_late_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive));\n     store.register_late_pass(|| box default::Default::default());\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);"}, {"sha": "0b58c6c0917ca025433ddbd853521edc190b4abc", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55ccc7a8c6c353c3350332114c76b79f3108a9c2/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ccc7a8c6c353c3350332114c76b79f3108a9c2/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=55ccc7a8c6c353c3350332114c76b79f3108a9c2", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use itertools::Itertools;\n-use rustc_ast::ast::{Item, ItemKind, VisibilityKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n@@ -38,12 +38,14 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct UpperCaseAcronyms {\n+    avoid_breaking_exported_api: bool,\n     upper_case_acronyms_aggressive: bool,\n }\n \n impl UpperCaseAcronyms {\n-    pub fn new(aggressive: bool) -> Self {\n+    pub fn new(avoid_breaking_exported_api: bool, aggressive: bool) -> Self {\n         Self {\n+            avoid_breaking_exported_api,\n             upper_case_acronyms_aggressive: aggressive,\n         }\n     }\n@@ -72,7 +74,7 @@ fn correct_ident(ident: &str) -> String {\n     ident\n }\n \n-fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n+fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n     let ident = &ident.as_str();\n     let corrected = correct_ident(ident);\n@@ -96,23 +98,27 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n     }\n }\n \n-impl EarlyLintPass for UpperCaseAcronyms {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, it: &Item) {\n+impl LateLintPass<'_> for UpperCaseAcronyms {\n+    fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n-        if !in_external_macro(cx.sess(), it.span) && !matches!(it.vis.kind, VisibilityKind::Public) {\n-            if matches!(\n-                it.kind,\n-                ItemKind::TyAlias(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n-            ) {\n+        if in_external_macro(cx.sess(), it.span)\n+            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.hir_id()))\n+        {\n+            return;\n+        }\n+        match it.kind {\n+            ItemKind::TyAlias(..) | ItemKind::Struct(..) | ItemKind::Trait(..) => {\n                 check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n-            } else if let ItemKind::Enum(ref enumdef, _) = it.kind {\n+            },\n+            ItemKind::Enum(ref enumdef, _) => {\n                 // check enum variants seperately because again we only want to lint on private enums and\n                 // the fn check_variant does not know about the vis of the enum of its variants\n                 enumdef\n                     .variants\n                     .iter()\n                     .for_each(|variant| check_ident(cx, &variant.ident, self.upper_case_acronyms_aggressive));\n-            }\n+            },\n+            _ => {},\n         }\n     }\n }"}]}