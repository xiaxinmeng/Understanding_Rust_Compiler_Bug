{"sha": "8ec61a613ad1278b18a4770332b6da128704fdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzYxYTYxM2FkMTI3OGIxOGE0NzcwMzMyYjZkYTEyODcwNGZkZDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-11T11:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-11T11:23:15Z"}, "message": "Merge pull request #2661 from devonhollowood/ptr-ptr-casts\n\nReplace `misaligned_transmute` lint", "tree": {"sha": "8dacfd6396523f481b8b1713e348901c727be417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dacfd6396523f481b8b1713e348901c727be417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec61a613ad1278b18a4770332b6da128704fdd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJazfAjCRBK7hj4Ov3rIwAAdHIIAIPmAnlYRkABBeAIiujxx+Zi\nvHR4L6bo8DM7fFYZXH9LO1bxqlGGs/CjyV3v6RK7ENEqbUQGfvv9/VUjekxOeZtr\nOy5iw3ZkSfHlPPIJIJ08tAfjmW1RqZosrbvjtHHpJd7AANRjum1csPnWmv0qfyEy\ns6SG46SpPf5W2XQZJkvGvtbYMct4PneiO69Zs67sDJ2kVDpXjXMiwyewBU6b/oxG\nMuxZpCMwhD6N8kIeE8OdezuW3GwqUzHbL2CUlgtv7RwwgJBFmnB/3vFot4SGkrrW\nV30zIQIWG9AJTEBgfAdi7Ve5TkzpbtPhr06PWQfIPJxa/Cnwn6PoOT6GU8N5vCo=\n=Y60J\n-----END PGP SIGNATURE-----\n", "payload": "tree 8dacfd6396523f481b8b1713e348901c727be417\nparent c5f31077e8da84b233229080ef372efbea807837\nparent b77d74030b193c5d188d2191ece074b0898a3996\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1523445795 +0200\ncommitter GitHub <noreply@github.com> 1523445795 +0200\n\nMerge pull request #2661 from devonhollowood/ptr-ptr-casts\n\nReplace `misaligned_transmute` lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec61a613ad1278b18a4770332b6da128704fdd6", "html_url": "https://github.com/rust-lang/rust/commit/8ec61a613ad1278b18a4770332b6da128704fdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec61a613ad1278b18a4770332b6da128704fdd6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5f31077e8da84b233229080ef372efbea807837", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f31077e8da84b233229080ef372efbea807837", "html_url": "https://github.com/rust-lang/rust/commit/c5f31077e8da84b233229080ef372efbea807837"}, {"sha": "b77d74030b193c5d188d2191ece074b0898a3996", "url": "https://api.github.com/repos/rust-lang/rust/commits/b77d74030b193c5d188d2191ece074b0898a3996", "html_url": "https://github.com/rust-lang/rust/commit/b77d74030b193c5d188d2191ece074b0898a3996"}], "stats": {"total": 234, "additions": 198, "deletions": 36}, "files": [{"sha": "1edeb30560ce035f7e76331b3c7b224d1a1f9533", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -71,3 +71,14 @@ declare_deprecated_lint! {\n     pub STRING_TO_STRING,\n     \"using `string::to_string` is common even today and specialization will likely happen soon\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This lint should never have applied to non-pointer types, as transmuting\n+/// between non-pointer types of differing alignment is well-defined behavior (it's semantically\n+/// equivalent to a memcpy). This lint has thus been refactored into two separate lints:\n+/// cast_ptr_alignment and transmute_ptr_to_ptr.\n+declare_deprecated_lint! {\n+    pub MISALIGNED_TRANSMUTE,\n+    \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\"\n+}"}, {"sha": "3b2251b9021e624063542ada5a3716e93a337826", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -276,6 +276,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         \"string_to_string\",\n         \"using `string::to_string` is common even today and specialization will likely happen soon\",\n     );\n+    store.register_removed(\n+        \"misaligned_transmute\",\n+        \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde_api::Serde);\n@@ -633,18 +637,19 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::CROSSPOINTER_TRANSMUTE,\n-        transmute::MISALIGNED_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,\n         transmute::TRANSMUTE_INT_TO_CHAR,\n         transmute::TRANSMUTE_INT_TO_FLOAT,\n         transmute::TRANSMUTE_PTR_TO_REF,\n+        transmute::TRANSMUTE_PTR_TO_PTR,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,\n         types::CAST_LOSSLESS,\n+        types::CAST_PTR_ALIGNMENT,\n         types::CHAR_LIT_AS_U8,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n@@ -782,12 +787,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::CROSSPOINTER_TRANSMUTE,\n-        transmute::MISALIGNED_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,\n         transmute::TRANSMUTE_INT_TO_CHAR,\n         transmute::TRANSMUTE_INT_TO_FLOAT,\n         transmute::TRANSMUTE_PTR_TO_REF,\n+        transmute::TRANSMUTE_PTR_TO_PTR,\n         transmute::USELESS_TRANSMUTE,\n         types::BORROWED_BOX,\n         types::CAST_LOSSLESS,\n@@ -845,6 +850,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         swap::ALMOST_SWAPPED,\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n+        types::CAST_PTR_ALIGNMENT,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "68321e7bd5e3c86760e816019cc15a5c3a376873", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -1,7 +1,6 @@\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use rustc::hir::*;\n-use rustc::ty::layout::LayoutOf;\n use std::borrow::Cow;\n use syntax::ast;\n use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n@@ -169,21 +168,31 @@ declare_clippy_lint! {\n     \"transmutes from an integer to a float\"\n }\n \n-/// **What it does:** Checks for transmutes to a potentially less-aligned type.\n+/// **What it does:** Checks for transmutes from a pointer to a pointer, or\n+/// from a reference to a reference.\n ///\n-/// **Why is this bad?** This might result in undefined behavior.\n+/// **Why is this bad?** Transmutes are dangerous, and these can instead be\n+/// written as casts.\n ///\n /// **Known problems:** None.\n ///\n /// **Example:**\n /// ```rust\n-/// // u32 is 32-bit aligned; u8 is 8-bit aligned\n-/// let _: u32 = unsafe { std::mem::transmute([0u8; 4]) };\n+/// let ptr = &1u32 as *const u32;\n+/// unsafe {\n+///     // pointer-to-pointer transmute\n+///     let _: *const f32 = std::mem::transmute(ptr);\n+///     // ref-ref transmute\n+///     let _: &f32 = std::mem::transmute(&1u32);\n+/// }\n+/// // These can be respectively written:\n+/// let _ = ptr as *const f32\n+/// let _ = unsafe{ &*(&1u32 as *const u32 as *const f32) };\n /// ```\n declare_clippy_lint! {\n-    pub MISALIGNED_TRANSMUTE,\n+    pub TRANSMUTE_PTR_TO_PTR,\n     complexity,\n-    \"transmutes to a potentially less-aligned type\"\n+    \"transmutes from a pointer to a reference type\"\n }\n \n pub struct Transmute;\n@@ -193,13 +202,13 @@ impl LintPass for Transmute {\n         lint_array!(\n             CROSSPOINTER_TRANSMUTE,\n             TRANSMUTE_PTR_TO_REF,\n+            TRANSMUTE_PTR_TO_PTR,\n             USELESS_TRANSMUTE,\n             WRONG_TRANSMUTE,\n             TRANSMUTE_INT_TO_CHAR,\n             TRANSMUTE_BYTES_TO_STR,\n             TRANSMUTE_INT_TO_BOOL,\n             TRANSMUTE_INT_TO_FLOAT,\n-            MISALIGNED_TRANSMUTE\n         )\n     }\n }\n@@ -220,18 +229,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 e.span,\n                                 &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n                             ),\n-                            _ if cx.layout_of(from_ty).ok().map(|a| a.align.abi())\n-                                < cx.layout_of(to_ty).ok().map(|a| a.align.abi())\n-                                => span_lint(\n-                                    cx,\n-                                    MISALIGNED_TRANSMUTE,\n-                                    e.span,\n-                                    &format!(\n-                                        \"transmute from `{}` to a less-aligned type (`{}`)\",\n-                                        from_ty,\n-                                        to_ty,\n-                                    )\n-                            ),\n                             (&ty::TyRef(_, rty), &ty::TyRawPtr(ptr_ty)) => span_lint_and_then(\n                                 cx,\n                                 USELESS_TRANSMUTE,\n@@ -363,9 +360,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                 );\n                                             }\n                                         )\n+                                    } else {\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            TRANSMUTE_PTR_TO_PTR,\n+                                            e.span,\n+                                            \"transmute from a reference to a reference\",\n+                                            |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                                let sugg_paren = arg.as_ty(cx.tcx.mk_ptr(*ref_from)).as_ty(cx.tcx.mk_ptr(*ref_to));\n+                                                let sugg = if ref_to.mutbl == Mutability::MutMutable {\n+                                                    sugg_paren.mut_addr_deref()\n+                                                } else {\n+                                                    sugg_paren.addr_deref()\n+                                                };\n+                                                db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                            },\n+                                        )\n                                     }\n                                 }\n                             },\n+                            (&ty::TyRawPtr(_), &ty::TyRawPtr(to_ty)) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_PTR_TO_PTR,\n+                                e.span,\n+                                \"transmute from a pointer to a pointer\",\n+                                |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                    let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n+                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                },\n+                            ),\n                             (&ty::TyInt(ast::IntTy::I8), &ty::TyBool) | (&ty::TyUint(ast::UintTy::U8), &ty::TyBool) => {\n                                 span_lint_and_then(\n                                     cx,"}, {"sha": "9034badd5c5dceb475cfb181f45f77a6f32c5e96", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -679,6 +679,25 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n+/// **What it does:** Checks for casts from a more-strictly-aligned pointer to a\n+/// less-strictly-aligned pointer\n+///\n+/// **Why is this bad?** Dereferencing the resulting pointer is undefined\n+/// behavior.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _ = (&1u8 as *const u8) as *const u16;\n+/// let _ = (&mut 1u8 as *mut u8) as *mut u16;\n+/// ```\n+declare_clippy_lint! {\n+    pub CAST_PTR_ALIGNMENT,\n+    correctness,\n+    \"cast from a pointer to a less-strictly-aligned pointer\"\n+}\n+\n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n@@ -871,7 +890,8 @@ impl LintPass for CastPass {\n             CAST_POSSIBLE_TRUNCATION,\n             CAST_POSSIBLE_WRAP,\n             CAST_LOSSLESS,\n-            UNNECESSARY_CAST\n+            UNNECESSARY_CAST,\n+            CAST_PTR_ALIGNMENT\n         )\n     }\n }\n@@ -955,6 +975,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                     },\n                 }\n             }\n+            if_chain!{\n+                if let ty::TyRawPtr(from_ptr_ty) = &cast_from.sty;\n+                if let ty::TyRawPtr(to_ptr_ty) = &cast_to.sty;\n+                if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi());\n+                if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi());\n+                if from_align < to_align;\n+                then {\n+                    span_lint(\n+                        cx,\n+                        CAST_PTR_ALIGNMENT,\n+                        expr.span,\n+                        &format!(\"casting from `{}` to a less-strictly-aligned pointer (`{}`)\", cast_from, cast_to)\n+                    );\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "526cadb435dc4c57616cf15e97aed0f0488381a3", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -160,6 +160,20 @@ impl<'a> Sugg<'a> {\n         make_unop(\"*\", self)\n     }\n \n+    /// Convenience method to create the `&*<expr>` suggestion. Currently this\n+    /// is needed because `sugg.deref().addr()` produces an unnecessary set of\n+    /// parentheses around the deref.\n+    pub fn addr_deref(self) -> Sugg<'static> {\n+        make_unop(\"&*\", self)\n+    }\n+\n+    /// Convenience method to create the `&mut *<expr>` suggestion. Currently\n+    /// this is needed because `sugg.deref().mut_addr()` produces an unnecessary\n+    /// set of parentheses around the deref.\n+    pub fn mut_addr_deref(self) -> Sugg<'static> {\n+        make_unop(\"&mut *\", self)\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {"}, {"sha": "4985a90bdf561573e774d042b7b86a04e49e5ff2", "filename": "tests/ui/cast_alignment.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -0,0 +1,19 @@\n+//! Test casts for alignment issues\n+\n+#[warn(cast_ptr_alignment)]\n+#[allow(no_effect, unnecessary_operation, cast_lossless)]\n+fn main() {\n+    /* These should be warned against */\n+\n+    // cast to more-strictly-aligned type\n+    (&1u8 as *const u8) as *const u16;\n+    (&mut 1u8 as *mut u8) as *mut u16;\n+\n+    /* These should be okay */\n+\n+    // not a pointer type\n+    1u8 as u16;\n+    // cast to less-strictly-aligned type\n+    (&1u16 as *const u16) as *const u8;\n+    (&mut 1u16 as *mut u16) as *mut u8;\n+}"}, {"sha": "d4fdb5becf9e0178cd807e4449d8e22888764278", "filename": "tests/ui/cast_alignment.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -0,0 +1,16 @@\n+error: casting from `*const u8` to a less-strictly-aligned pointer (`*const u16`)\n+ --> $DIR/cast_alignment.rs:9:5\n+  |\n+9 |     (&1u8 as *const u8) as *const u16;\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D cast-ptr-alignment` implied by `-D warnings`\n+\n+error: casting from `*mut u8` to a less-strictly-aligned pointer (`*mut u16`)\n+  --> $DIR/cast_alignment.rs:10:5\n+   |\n+10 |     (&mut 1u8 as *mut u8) as *mut u16;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f456c4172237b59df0711de46ff03a9d8bb7f556", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -9,4 +9,6 @@\n \n #[warn(unstable_as_mut_slice)]\n \n+#[warn(misaligned_transmute)]\n+\n fn main() {}"}, {"sha": "aa62ccbd0e52602d25ad9633a54a4360229e8190", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -24,5 +24,11 @@ error: lint unstable_as_mut_slice has been removed: `Vec::as_mut_slice` has been\n 10 | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: lint misaligned_transmute has been removed: this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\n+  --> $DIR/deprecated.rs:12:8\n+   |\n+12 | #[warn(misaligned_transmute)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "7c5e3f03d13b4f938d1bc8ae673921f1bc6e64ba", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -16,7 +16,7 @@ fn my_vec() -> MyVec<i32> {\n     vec![]\n }\n \n-#[allow(needless_lifetimes)]\n+#[allow(needless_lifetimes, transmute_ptr_to_ptr)]\n #[warn(useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: &'a T = core::intrinsics::transmute(t);\n@@ -140,11 +140,23 @@ fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &mut str = unsafe { std::mem::transmute(mb) };\n }\n \n-#[warn(misaligned_transmute)]\n-fn misaligned_transmute() {\n-    let _: u32 = unsafe { std::mem::transmute([0u8; 4]) }; // err\n-    let _: u32 = unsafe { std::mem::transmute(0f32) }; // ok (alignment-wise)\n-    let _: [u8; 4] = unsafe { std::mem::transmute(0u32) }; // ok (alignment-wise)\n+#[warn(transmute_ptr_to_ptr)]\n+fn transmute_ptr_to_ptr() {\n+    let ptr = &1u32 as *const u32;\n+    let mut_ptr = &mut 1u32 as *mut u32;\n+    unsafe {\n+        // pointer-to-pointer transmutes; bad\n+        let _: *const f32 = std::mem::transmute(ptr);\n+        let _: *mut f32 = std::mem::transmute(mut_ptr);\n+        // ref-ref transmutes; bad\n+        let _: &f32 = std::mem::transmute(&1u32);\n+        let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+    }\n+    // These should be fine\n+    let _ = ptr as *const f32;\n+    let _ = mut_ptr as *mut f32;\n+    let _ = unsafe { &*(&1u32 as *const u32 as *const f32) };\n+    let _ = unsafe { &mut *(&mut 1u32 as *mut u32 as *mut f32) };\n }\n \n fn main() { }"}, {"sha": "a343a8a9cb5bb34a3eace40377a20c02af9e00fa", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ec61a613ad1278b18a4770332b6da128704fdd6/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=8ec61a613ad1278b18a4770332b6da128704fdd6", "patch": "@@ -204,13 +204,31 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n 140 |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: transmute from `[u8; 4]` to a less-aligned type (`u32`)\n-   --> $DIR/transmute.rs:145:27\n+error: transmute from a pointer to a pointer\n+   --> $DIR/transmute.rs:149:29\n     |\n-145 |     let _: u32 = unsafe { std::mem::transmute([0u8; 4]) }; // err\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+149 |         let _: *const f32 = std::mem::transmute(ptr);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n     |\n-    = note: `-D misaligned-transmute` implied by `-D warnings`\n+    = note: `-D transmute-ptr-to-ptr` implied by `-D warnings`\n \n-error: aborting due to 33 previous errors\n+error: transmute from a pointer to a pointer\n+   --> $DIR/transmute.rs:150:27\n+    |\n+150 |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n+\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:152:23\n+    |\n+152 |         let _: &f32 = std::mem::transmute(&1u32);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n+\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:153:27\n+    |\n+153 |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n+\n+error: aborting due to 36 previous errors\n "}]}