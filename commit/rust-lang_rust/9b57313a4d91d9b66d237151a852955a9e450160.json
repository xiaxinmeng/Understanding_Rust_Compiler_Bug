{"sha": "9b57313a4d91d9b66d237151a852955a9e450160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTczMTNhNGQ5MWQ5YjY2ZDIzNzE1MWE4NTI5NTVhOWU0NTAxNjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-06T08:07:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-06T08:07:48Z"}, "message": "also treat CallerLocation and Machine memory as properly tagged", "tree": {"sha": "0cecf8e9b8aed1ad78157623ea0ae0502a521412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cecf8e9b8aed1ad78157623ea0ae0502a521412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b57313a4d91d9b66d237151a852955a9e450160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b57313a4d91d9b66d237151a852955a9e450160", "html_url": "https://github.com/rust-lang/rust/commit/9b57313a4d91d9b66d237151a852955a9e450160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b57313a4d91d9b66d237151a852955a9e450160/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd582c6d8f14ffd730c5911101789e40eccec31", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd582c6d8f14ffd730c5911101789e40eccec31", "html_url": "https://github.com/rust-lang/rust/commit/efd582c6d8f14ffd730c5911101789e40eccec31"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "d5bd300959dfd22282ffd891d0212d6d682edb83", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b57313a4d91d9b66d237151a852955a9e450160/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b57313a4d91d9b66d237151a852955a9e450160/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=9b57313a4d91d9b66d237151a852955a9e450160", "patch": "@@ -504,22 +504,23 @@ impl Stacks {\n             // `Global` memory can be referenced by global pointers from `tcx`.\n             // Thus we call `global_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n-            // `ExternStatic` is used for extern statics, and thus must also be listed here.\n-            // `Env` we list because we can get away with precise tracking there.\n+            // `ExternStatic` is used for extern statics, so the same reasoning applies.\n+            // The others are various forms of machine-managed special global memory, and we can get\n+            // away with precise tracking there.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(\n+            MemoryKind::CallerLocation\n+            | MemoryKind::Machine(\n                 MiriMemoryKind::Global\n                 | MiriMemoryKind::ExternStatic\n                 | MiriMemoryKind::Tls\n-                | MiriMemoryKind::Env,\n+                | MiriMemoryKind::Env\n+                | MiriMemoryKind::Machine,\n             ) => (extra.global_base_ptr(id), Permission::SharedReadWrite),\n-            // Everything else we only track precisely when raw pointers are tagged, for now.\n-            MemoryKind::CallerLocation\n-            | MemoryKind::Machine(\n+            // Heap allocations we only track precisely when raw pointers are tagged, for now.\n+            MemoryKind::Machine(\n                 MiriMemoryKind::Rust\n                 | MiriMemoryKind::C\n-                | MiriMemoryKind::WinHeap\n-                | MiriMemoryKind::Machine,\n+                | MiriMemoryKind::WinHeap,\n             ) => {\n                 let tag =\n                     if extra.track_raw { Tag::Tagged(extra.new_ptr()) } else { Tag::Untagged };"}]}