{"sha": "a94e4c0f10b4ba72c44a34e826974fa5c3f69182", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NGU0YzBmMTBiNGJhNzJjNDRhMzRlODI2OTc0ZmE1YzNmNjkxODI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-12T10:08:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T10:08:23Z"}, "message": "Rollup merge of #34737 - frewsxcv:libstd-process-child, r=GuillaumeGomez\n\nVarious `std::process` doc improvements.\n\nNone", "tree": {"sha": "38e9cb30fe548029e54a6adb6d5c69346c77424b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e9cb30fe548029e54a6adb6d5c69346c77424b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94e4c0f10b4ba72c44a34e826974fa5c3f69182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94e4c0f10b4ba72c44a34e826974fa5c3f69182", "html_url": "https://github.com/rust-lang/rust/commit/a94e4c0f10b4ba72c44a34e826974fa5c3f69182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94e4c0f10b4ba72c44a34e826974fa5c3f69182/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4d2b6cd91b32ead690d7e02e1e64fb8896fc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4d2b6cd91b32ead690d7e02e1e64fb8896fc15", "html_url": "https://github.com/rust-lang/rust/commit/9f4d2b6cd91b32ead690d7e02e1e64fb8896fc15"}, {"sha": "97d96bd40ced744f12289bca1850dc9b618dbcb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d96bd40ced744f12289bca1850dc9b618dbcb6", "html_url": "https://github.com/rust-lang/rust/commit/97d96bd40ced744f12289bca1850dc9b618dbcb6"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "16bc81de78ecf6debe8f6371eedf905779e5f3b9", "filename": "src/libstd/process.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a94e4c0f10b4ba72c44a34e826974fa5c3f69182/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94e4c0f10b4ba72c44a34e826974fa5c3f69182/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=a94e4c0f10b4ba72c44a34e826974fa5c3f69182", "patch": "@@ -27,8 +27,9 @@ use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n /// Representation of a running or exited child process.\n ///\n /// This structure is used to represent and manage child processes. A child\n-/// process is created via the `Command` struct, which configures the spawning\n-/// process and can itself be constructed using a builder-style interface.\n+/// process is created via the [`Command`] struct, which configures the\n+/// spawning process and can itself be constructed using a builder-style\n+/// interface.\n ///\n /// # Examples\n ///\n@@ -48,13 +49,18 @@ use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n ///\n /// # Note\n ///\n-/// Take note that there is no implementation of\n-/// [`Drop`](../../core/ops/trait.Drop.html) for child processes, so if you\n-/// do not ensure the `Child` has exited then it will continue to run, even\n-/// after the `Child` handle to the child process has gone out of scope.\n+/// Take note that there is no implementation of [`Drop`] for child processes,\n+/// so if you do not ensure the `Child` has exited then it will continue to\n+/// run, even after the `Child` handle to the child process has gone out of\n+/// scope.\n ///\n-/// Calling `wait` (or other functions that wrap around it) will make the\n-/// parent process wait until the child has actually exited before continuing.\n+/// Calling [`wait`][`wait`] (or other functions that wrap around it) will make\n+/// the parent process wait until the child has actually exited before\n+/// continuing.\n+///\n+/// [`Command`]: struct.Command.html\n+/// [`Drop`]: ../../core/ops/trait.Drop.html\n+/// [`wait`]: #method.wait\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Child {\n     handle: imp::Process,\n@@ -91,7 +97,11 @@ impl IntoInner<imp::Process> for Child {\n     fn into_inner(self) -> imp::Process { self.handle }\n }\n \n-/// A handle to a child process's stdin\n+/// A handle to a child process's stdin. This struct is used in the [`stdin`]\n+/// field on [`Child`].\n+///\n+/// [`Child`]: struct.Child.html\n+/// [`stdin`]: struct.Child.html#structfield.stdin\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdin {\n     inner: AnonPipe\n@@ -122,7 +132,11 @@ impl FromInner<AnonPipe> for ChildStdin {\n     }\n }\n \n-/// A handle to a child process's stdout\n+/// A handle to a child process's stdout. This struct is used in the [`stdout`]\n+/// field on [`Child`].\n+///\n+/// [`Child`]: struct.Child.html\n+/// [`stdout`]: struct.Child.html#structfield.stdout\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdout {\n     inner: AnonPipe\n@@ -152,7 +166,11 @@ impl FromInner<AnonPipe> for ChildStdout {\n     }\n }\n \n-/// A handle to a child process's stderr\n+/// A handle to a child process's stderr. This struct is used in the [`stderr`]\n+/// field on [`Child`].\n+///\n+/// [`Child`]: struct.Child.html\n+/// [`stderr`]: struct.Child.html#structfield.stderr\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStderr {\n     inner: AnonPipe"}]}