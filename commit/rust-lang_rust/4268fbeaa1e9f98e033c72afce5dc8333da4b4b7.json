{"sha": "4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNjhmYmVhYTFlOWY5OGUwMzNjNzJhZmNlNWRjODMzM2RhNGI0Yjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-01T15:03:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-01T15:03:57Z"}, "message": "simplify", "tree": {"sha": "7822fe514b00b84893d981b75aef2725030dd376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7822fe514b00b84893d981b75aef2725030dd376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "html_url": "https://github.com/rust-lang/rust/commit/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1ce8275347e915b1cc824567e96369875cefd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1ce8275347e915b1cc824567e96369875cefd4", "html_url": "https://github.com/rust-lang/rust/commit/8f1ce8275347e915b1cc824567e96369875cefd4"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "476c12cc16d99d15b7788edd723631a200644e60", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "patch": "@@ -25,11 +25,9 @@ pub use {\n     stdio::{stdio_transport, Threads},\n };\n \n-pub type LspServer = fn(&mut Receiver<RawMessage>, &mut Sender<RawMessage>) -> Result<()>;\n-\n pub fn run_server(\n     caps: ServerCapabilities,\n-    server: LspServer,\n+    server: impl FnOnce(&mut Receiver<RawMessage>, &mut Sender<RawMessage>) -> Result<()>,\n     mut receiver: Receiver<RawMessage>,\n     mut sender: Sender<RawMessage>,\n ) -> Result<()> {"}, {"sha": "ecc1f58f8a4c45cdf40d460af4c338cb06395c2e", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "patch": "@@ -55,7 +55,13 @@ fn main() -> Result<()> {\n \n fn main_inner() -> Result<()> {\n     let (receiver, sender, threads) = stdio_transport();\n-    run_server(caps::server_capabilities(), main_loop::main_loop, receiver, sender)?;\n+    let root = ::std::env::current_dir()?;\n+    run_server(\n+        caps::server_capabilities(),\n+        |r, s| main_loop::main_loop(root, r, s),\n+        receiver,\n+        sender,\n+    )?;\n     info!(\"shutting down IO...\");\n     threads.join()?;\n     info!(\"... IO is down\");"}, {"sha": "75d65dcbf258f12df354c6843925f9a822c2589e", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "patch": "@@ -2,6 +2,7 @@ mod handlers;\n mod subscriptions;\n \n use std::{\n+    path::PathBuf,\n     collections::{HashMap},\n };\n \n@@ -26,14 +27,13 @@ enum Task {\n }\n \n pub(super) fn main_loop(\n-    receriver: &mut Receiver<RawMessage>,\n-    sender: &mut Sender<RawMessage>,\n+    root: PathBuf,\n+    msg_receriver: &mut Receiver<RawMessage>,\n+    msg_sender: &mut Sender<RawMessage>,\n ) -> Result<()> {\n     let pool = ThreadPool::new(4);\n     let (task_sender, task_receiver) = bounded::<Task>(16);\n-    let (fs_events_receiver, watcher) = vfs::watch(vec![\n-        ::std::env::current_dir()?,\n-    ]);\n+    let (fs_events_receiver, watcher) = vfs::watch(vec![root]);\n \n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();\n@@ -42,8 +42,8 @@ pub(super) fn main_loop(\n     let mut subs = Subscriptions::new();\n     main_loop_inner(\n         &pool,\n-        receriver,\n-        sender,\n+        msg_receriver,\n+        msg_sender,\n         task_receiver.clone(),\n         task_sender,\n         fs_events_receiver,\n@@ -53,7 +53,7 @@ pub(super) fn main_loop(\n     )?;\n \n     info!(\"waiting for background jobs to finish...\");\n-    task_receiver.for_each(drop);\n+    task_receiver.for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n     pool.join();\n     info!(\"...background jobs have finished\");\n \n@@ -95,22 +95,8 @@ fn main_loop_inner(\n         };\n         let mut state_changed = false;\n         match event {\n-            Event::FsWatcherDead => {\n-                fs_receiver = None;\n-            }\n-            Event::Task(task) => {\n-                match task {\n-                    Task::Respond(response) => {\n-                        if let Some(handle) = pending_requests.remove(&response.id) {\n-                            assert!(handle.has_completed());\n-                        }\n-                        msg_sender.send(RawMessage::Response(response))\n-                    }\n-                    Task::Notify(n) =>\n-                        msg_sender.send(RawMessage::Notification(n)),\n-                }\n-                continue;\n-            }\n+            Event::FsWatcherDead => fs_receiver = None,\n+            Event::Task(task) => on_task(task, msg_sender, pending_requests),\n             Event::Fs(events) => {\n                 trace!(\"fs change, {} events\", events.len());\n                 state.apply_fs_changes(events);\n@@ -158,6 +144,23 @@ fn main_loop_inner(\n     }\n }\n \n+fn on_task(\n+    task: Task,\n+    msg_sender: &mut Sender<RawMessage>,\n+    pending_requests: &mut HashMap<u64, JobHandle>,\n+) {\n+    match task {\n+        Task::Respond(response) => {\n+            if let Some(handle) = pending_requests.remove(&response.id) {\n+                assert!(handle.has_completed());\n+            }\n+            msg_sender.send(RawMessage::Response(response))\n+        }\n+        Task::Notify(n) =>\n+            msg_sender.send(RawMessage::Notification(n)),\n+    }\n+}\n+\n fn on_request(\n     world: &mut ServerWorldState,\n     pending_requests: &mut HashMap<u64, JobHandle>,\n@@ -280,15 +283,12 @@ impl<'a> PoolDispatcher<'a> {\n             None => return Ok(self),\n             Some(req) => req,\n         };\n-        let world = self.world;\n-        let sender = self.sender;\n-        let pool = self.pool;\n         match req.cast::<R>() {\n             Ok((id, params)) => {\n                 let (handle, token) = JobHandle::new();\n-                let world = world.snapshot();\n-                let sender = sender.clone();\n-                pool.execute(move || {\n+                let world = self.world.snapshot();\n+                let sender = self.sender.clone();\n+                self.pool.execute(move || {\n                     let resp = match f(world, params, token) {\n                         Ok(resp) => RawResponse::ok(id, resp),\n                         Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string()),"}, {"sha": "f5212727196048f27f93651cef8364455a4cc7b4", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4268fbeaa1e9f98e033c72afce5dc8333da4b4b7/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=4268fbeaa1e9f98e033c72afce5dc8333da4b4b7", "patch": "@@ -1,6 +1,4 @@\n use std::collections::HashMap;\n-\n-use serde::{ser::Serialize, de::DeserializeOwned};\n use languageserver_types::{TextDocumentIdentifier, Range, Url, Position, Location};\n use url_serde;\n \n@@ -18,24 +16,6 @@ pub use languageserver_types::{\n     TextDocumentEdit,\n };\n \n-\n-pub trait ClientRequest: 'static {\n-    type Params: DeserializeOwned + Send + 'static;\n-    type Result: Serialize + Send + 'static;\n-    const METHOD: &'static str;\n-}\n-\n-impl<T> ClientRequest for T\n-    where T: Request + 'static,\n-          T::Params: DeserializeOwned + Send + 'static,\n-          T::Result: Serialize + Send + 'static,\n-{\n-    type Params = <T as Request>::Params;\n-    type Result = <T as Request>::Result;\n-    const METHOD: &'static str = <T as Request>::METHOD;\n-}\n-\n-\n pub enum SyntaxTree {}\n \n impl Request for SyntaxTree {"}]}