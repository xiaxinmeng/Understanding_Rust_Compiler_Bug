{"sha": "2f616eea9c21ebbd217a42785eae1af3173689c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjE2ZWVhOWMyMWViYmQyMTdhNDI3ODVlYWUxYWYzMTczNjg5YzI=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-07T00:48:31Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Implement a simple working assist", "tree": {"sha": "a684b71e0e307e114a47dc88d068ba5b336623f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a684b71e0e307e114a47dc88d068ba5b336623f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f616eea9c21ebbd217a42785eae1af3173689c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f616eea9c21ebbd217a42785eae1af3173689c2", "html_url": "https://github.com/rust-lang/rust/commit/2f616eea9c21ebbd217a42785eae1af3173689c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f616eea9c21ebbd217a42785eae1af3173689c2/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "html_url": "https://github.com/rust-lang/rust/commit/1c07c5ccf977eb592fd9f4436b8d41d75c115a66"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "4926a9b24c79103108ee7f51ff2f7b87d1fefde3", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2f616eea9c21ebbd217a42785eae1af3173689c2/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f616eea9c21ebbd217a42785eae1af3173689c2/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=2f616eea9c21ebbd217a42785eae1af3173689c2", "patch": "@@ -1,12 +1,15 @@\n use std::collections::HashSet;\n \n-use crate::assist_ctx::{Assist, AssistCtx};\n+use crate::{Assist, AssistId, AssistCtx};\n \n use hir::Resolver;\n use hir::db::HirDatabase;\n-use ra_syntax::{SmolStr, SyntaxKind, SyntaxNode, TreeArc};\n+use ra_syntax::{SmolStr, SyntaxKind, SyntaxNode, TextUnit, TreeArc};\n use ra_syntax::ast::{self, AstNode, FnDef, ImplItem, ImplItemKind, NameOwner};\n use ra_db::FilePosition;\n+use ra_fmt::{leading_indent, reindent};\n+\n+use itertools::Itertools;\n \n /// Given an `ast::ImplBlock`, resolves the target trait (the one being\n /// implemented) to a `ast::TraitDef`.\n@@ -24,7 +27,21 @@ pub(crate) fn resolve_target_trait_def(\n     }\n }\n \n-pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn build_func_body(def: &ast::FnDef) -> String {\n+    let mut buf = String::new();\n+\n+    for child in def.syntax().children() {\n+        if child.kind() == SyntaxKind::SEMI {\n+            buf.push_str(\" { unimplemented!() }\")\n+        } else {\n+            child.text().push_to(&mut buf);\n+        }\n+    }\n+\n+    buf.trim_end().to_string()\n+}\n+\n+pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     use SyntaxKind::{IMPL_BLOCK, ITEM_LIST, WHITESPACE};\n \n     let node = ctx.covering_node();\n@@ -35,6 +52,7 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n     }\n \n     let impl_node = node.ancestors().find_map(ast::ImplBlock::cast)?;\n+    let impl_item_list = impl_node.item_list()?;\n \n     let trait_def = {\n         let db = ctx.db;\n@@ -47,23 +65,49 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n     };\n \n     let fn_def_opt = |kind| if let ImplItemKind::FnDef(def) = kind { Some(def) } else { None };\n-    let def_name = |&def| -> Option<&SmolStr> { FnDef::name(def).map(ast::Name::text) };\n+    let def_name = |def| -> Option<&SmolStr> { FnDef::name(def).map(ast::Name::text) };\n \n     let trait_items = trait_def.syntax().descendants().find_map(ast::ItemList::cast)?.impl_items();\n-    let impl_items = impl_node.item_list()?.impl_items();\n+    let impl_items = impl_item_list.impl_items();\n \n     let trait_fns = trait_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n     let impl_fns = impl_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n \n-    let trait_fn_names = trait_fns.iter().filter_map(def_name).collect::<HashSet<_>>();\n-    let impl_fn_names = impl_fns.iter().filter_map(def_name).collect::<HashSet<_>>();\n+    let trait_fn_names = trait_fns.iter().cloned().filter_map(def_name).collect::<HashSet<_>>();\n+    let impl_fn_names = impl_fns.iter().cloned().filter_map(def_name).collect::<HashSet<_>>();\n \n     let missing_fn_names = trait_fn_names.difference(&impl_fn_names).collect::<HashSet<_>>();\n-    let missing_fns = trait_fns\n+    let missing_fns: Vec<_> = trait_fns\n         .iter()\n-        .filter(|&t| def_name(t).map(|n| missing_fn_names.contains(&n)).unwrap_or(false));\n+        .cloned()\n+        .filter(|t| def_name(t).map(|n| missing_fn_names.contains(&n)).unwrap_or(false))\n+        .collect();\n \n-    unimplemented!()\n+    if missing_fns.is_empty() {\n+        return None;\n+    }\n+\n+    let last_whitespace_node =\n+        impl_item_list.syntax().children().filter_map(ast::Whitespace::cast).last()?.syntax();\n+\n+    ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add impl missing members\", |edit| {\n+        let func_bodies = missing_fns.into_iter().map(build_func_body).join(\"\\n\");\n+        let func_bodies = String::from(\"\\n\") + &func_bodies;\n+\n+        let first_impl_item = impl_item_list.impl_items().next();\n+        // FIXME: We should respect the indent of the first item from the item list or the indent of leading block + some default indent (4?)\n+        // Another approach is to not indent at all if there are no items here\n+        let indent = first_impl_item.and_then(|i| leading_indent(i.syntax())).unwrap_or_default();\n+        let func_bodies = reindent(&func_bodies, indent) + \"\\n\";\n+\n+        let changed_range = last_whitespace_node.range();\n+        let replaced_text_range = TextUnit::of_str(&func_bodies);\n+\n+        edit.replace(changed_range, func_bodies);\n+        edit.set_cursor(changed_range.start() + replaced_text_range - TextUnit::of_str(\"\\n\"));\n+    });\n+\n+    ctx.build()\n }\n \n #[cfg(test)]\n@@ -78,24 +122,26 @@ mod tests {\n             \"\n trait Foo {\n     fn foo(&self);\n+    fn bar(&self);\n }\n \n struct S;\n \n impl Foo for S {\n+    fn bar(&self) {}\n     <|>\n }\",\n             \"\n trait Foo {\n     fn foo(&self);\n+    fn bar(&self);\n }\n \n struct S;\n \n impl Foo for S {\n-    fn foo(&self) {\n-        <|>\n-    }\n+    fn bar(&self) {}\n+    fn foo(&self) { unimplemented!() }<|>\n }\",\n         );\n     }"}]}