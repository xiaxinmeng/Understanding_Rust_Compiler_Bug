{"sha": "3c6503eb4b24897e9317b4af2faaf6b603be32dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNjUwM2ViNGIyNDg5N2U5MzE3YjRhZjJmYWFmNmI2MDNiZTMyZGQ=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2018-05-22T08:21:42Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2018-05-22T08:21:42Z"}, "message": "Format code", "tree": {"sha": "79cb836411e4118aefb4b500c0589a076920c5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79cb836411e4118aefb4b500c0589a076920c5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6503eb4b24897e9317b4af2faaf6b603be32dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6503eb4b24897e9317b4af2faaf6b603be32dd", "html_url": "https://github.com/rust-lang/rust/commit/3c6503eb4b24897e9317b4af2faaf6b603be32dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6503eb4b24897e9317b4af2faaf6b603be32dd/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b954ea9284c8692a0b5f9c9c2031b40d9283a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b954ea9284c8692a0b5f9c9c2031b40d9283a9", "html_url": "https://github.com/rust-lang/rust/commit/e4b954ea9284c8692a0b5f9c9c2031b40d9283a9"}], "stats": {"total": 263, "additions": 134, "deletions": 129}, "files": [{"sha": "1481f460fc3b4f08abe168ddb8f505eb5241b097", "filename": "build.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -13,12 +13,12 @@\n //! This build script was originally taken from the Rocket web framework:\n //! https://github.com/SergioBenitez/Rocket\n \n-extern crate rustc_version;\n extern crate ansi_term;\n+extern crate rustc_version;\n \n-use std::env;\n-use rustc_version::{version_meta, version_meta_for, Channel, Version, VersionMeta};\n use ansi_term::Colour::Red;\n+use rustc_version::{version_meta, version_meta_for, Channel, Version, VersionMeta};\n+use std::env;\n \n fn main() {\n     check_rustc_version();\n@@ -31,77 +31,81 @@ fn main() {\n \n fn check_rustc_version() {\n     let string = include_str!(\"min_version.txt\");\n-    let min_version_meta = version_meta_for(string)\n-        .expect(\"Could not parse version string in min_version.txt\");\n-    let current_version_meta = version_meta()\n-        .expect(\"Could not retrieve current rustc version information from ENV\");\n+    let min_version_meta = version_meta_for(string).expect(\"Could not parse version string in min_version.txt\");\n+    let current_version_meta = version_meta().expect(\"Could not retrieve current rustc version information from ENV\");\n \n     let min_version = min_version_meta.clone().semver;\n-    let min_date_str = min_version_meta.clone().commit_date\n+    let min_date_str = min_version_meta\n+        .clone()\n+        .commit_date\n         .expect(\"min_version.txt does not contain a rustc commit date\");\n \n     // Dev channel (rustc built from git) does not have any date or commit information in rustc -vV\n     // `current_version_meta.commit_date` would crash, so we return early here.\n     if current_version_meta.channel == Channel::Dev {\n-        return\n+        return;\n     }\n \n     let current_version = current_version_meta.clone().semver;\n-    let current_date_str = current_version_meta.clone().commit_date\n+    let current_date_str = current_version_meta\n+        .clone()\n+        .commit_date\n         .expect(\"current rustc version information does not contain a rustc commit date\");\n \n     let print_version_err = |version: &Version, date: &str| {\n-        eprintln!(\"> {} {}. {} {}.\\n\",\n-                  \"Installed rustc version is:\",\n-                  format!(\"{} ({})\", version, date),\n-                  \"Minimum required rustc version:\",\n-                  format!(\"{} ({})\", min_version, min_date_str));\n+        eprintln!(\n+            \"> {} {}. {} {}.\\n\",\n+            \"Installed rustc version is:\",\n+            format!(\"{} ({})\", version, date),\n+            \"Minimum required rustc version:\",\n+            format!(\"{} ({})\", min_version, min_date_str)\n+        );\n     };\n \n     if !correct_channel(&current_version_meta) {\n-        eprintln!(\"\\n{} {}\",\n-                  Red.bold().paint(\"error:\"),\n-                  \"clippy requires a nightly version of Rust.\");\n+        eprintln!(\n+            \"\\n{} {}\",\n+            Red.bold().paint(\"error:\"),\n+            \"clippy requires a nightly version of Rust.\"\n+        );\n         print_version_err(&current_version, &*current_date_str);\n-        eprintln!(\"{}{}{}\",\n-                  \"See the README (\",\n-                  \"https://github.com/rust-lang-nursery/rust-clippy#usage\",\n-                  \") for more information.\");\n+        eprintln!(\n+            \"{}{}{}\",\n+            \"See the README (\", \"https://github.com/rust-lang-nursery/rust-clippy#usage\", \") for more information.\"\n+        );\n         panic!(\"Aborting compilation due to incompatible compiler.\")\n     }\n \n     let current_date = str_to_ymd(&current_date_str).unwrap();\n     let min_date = str_to_ymd(&min_date_str).unwrap();\n \n     if current_date < min_date {\n-        eprintln!(\"\\n{} {}\",\n-                  Red.bold().paint(\"error:\"),\n-                  \"clippy does not support this version of rustc nightly.\");\n-        eprintln!(\"> {}{}{}\",\n-                  \"Use `\",\n-                  \"rustup update\",\n-                  \"` or your preferred method to update Rust.\");\n+        eprintln!(\n+            \"\\n{} {}\",\n+            Red.bold().paint(\"error:\"),\n+            \"clippy does not support this version of rustc nightly.\"\n+        );\n+        eprintln!(\n+            \"> {}{}{}\",\n+            \"Use `\", \"rustup update\", \"` or your preferred method to update Rust.\"\n+        );\n         print_version_err(&current_version, &*current_date_str);\n         panic!(\"Aborting compilation due to incompatible compiler.\")\n     }\n }\n \n fn correct_channel(version_meta: &VersionMeta) -> bool {\n     match version_meta.channel {\n-        Channel::Stable | Channel::Beta => {\n-            false\n-        },\n-        Channel::Nightly | Channel::Dev => {\n-            true\n-        }\n+        Channel::Stable | Channel::Beta => false,\n+        Channel::Nightly | Channel::Dev => true,\n     }\n }\n \n /// Convert a string of %Y-%m-%d to a single u32 maintaining ordering.\n fn str_to_ymd(ymd: &str) -> Option<u32> {\n     let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();\n     if ymd.len() != 3 {\n-        return None\n+        return None;\n     }\n \n     let (y, m, d) = (ymd[0], ymd[1], ymd[2]);"}, {"sha": "20b9c2792777aa984d8096e7cf38029ea1a11ca7", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -1,5 +1,5 @@\n-use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::lint::*;\n use std::f64::consts as f64;\n use syntax::ast::{FloatTy, Lit, LitKind};\n use syntax::symbol;\n@@ -90,8 +90,7 @@ fn check_known_consts(cx: &LateContext, e: &Expr, s: &symbol::Symbol, module: &s\n                     &format!(\n                         \"approximate value of `{}::consts::{}` found. \\\n                          Consider using it directly\",\n-                        module,\n-                        &name\n+                        module, &name\n                     ),\n                 );\n                 return;"}, {"sha": "835555f42f8b303f84be52b22f70236ac59c80bc", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -57,19 +57,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n         match expr.node {\n             hir::ExprBinary(ref op, ref l, ref r) => {\n                 match op.node {\n-                    hir::BiAnd |\n-                    hir::BiOr |\n-                    hir::BiBitAnd |\n-                    hir::BiBitOr |\n-                    hir::BiBitXor |\n-                    hir::BiShl |\n-                    hir::BiShr |\n-                    hir::BiEq |\n-                    hir::BiLt |\n-                    hir::BiLe |\n-                    hir::BiNe |\n-                    hir::BiGe |\n-                    hir::BiGt => return,\n+                    hir::BiAnd\n+                    | hir::BiOr\n+                    | hir::BiBitAnd\n+                    | hir::BiBitOr\n+                    | hir::BiBitXor\n+                    | hir::BiShl\n+                    | hir::BiShr\n+                    | hir::BiEq\n+                    | hir::BiLt\n+                    | hir::BiLe\n+                    | hir::BiNe\n+                    | hir::BiGe\n+                    | hir::BiGt => return,\n                     _ => (),\n                 }\n                 let (l_ty, r_ty) = (cx.tables.expr_ty(l), cx.tables.expr_ty(r));"}, {"sha": "010f07ab8d249148c9d5bd603d944aabba388911", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -1,10 +1,10 @@\n+use consts::{constant, Constant};\n+use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n-use rustc::hir;\n use syntax::ast::RangeLimits;\n-use utils::{self, higher};\n use utils::higher::Range;\n-use consts::{constant, Constant};\n+use utils::{self, higher};\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n /// index."}, {"sha": "7b4000485bdea25865a976ce58e57ccdfb6ad78d", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -95,24 +95,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                 MISREFACTORED_ASSIGN_OP,\n                                 expr.span,\n                                 \"variable appears on both sides of an assignment operation\",\n-                                |db| if let (Some(snip_a), Some(snip_r)) =\n-                                    (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span))\n-                                {\n-                                    let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n-                                    let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n-                                    let long = format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n-                                    db.span_suggestion(\n-                                        expr.span,\n-                                        &format!(\"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n-                                                 snip_a, snip_a, op.node.as_str(), snip_r,\n-                                                 long),\n-                                        format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r)\n-                                    );\n-                                    db.span_suggestion(\n-                                        expr.span,\n-                                        \"or\",\n-                                        long\n-                                    );\n+                                |db| {\n+                                    if let (Some(snip_a), Some(snip_r)) =\n+                                        (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span))\n+                                    {\n+                                        let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n+                                        let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n+                                        let long =\n+                                            format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n+                                        db.span_suggestion(\n+                                            expr.span,\n+                                            &format!(\n+                                                \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n+                                                snip_a,\n+                                                snip_a,\n+                                                op.node.as_str(),\n+                                                snip_r,\n+                                                long\n+                                            ),\n+                                            format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                        );\n+                                        db.span_suggestion(expr.span, \"or\", long);\n+                                    }\n                                 },\n                             );\n                         };\n@@ -189,14 +193,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                 ASSIGN_OP_PATTERN,\n                                 expr.span,\n                                 \"manual implementation of an assign operation\",\n-                                |db| if let (Some(snip_a), Some(snip_r)) =\n-                                    (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n-                                {\n-                                    db.span_suggestion(\n-                                        expr.span,\n-                                        \"replace it with\",\n-                                        format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n-                                    );\n+                                |db| {\n+                                    if let (Some(snip_a), Some(snip_r)) =\n+                                        (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n+                                    {\n+                                        db.span_suggestion(\n+                                            expr.span,\n+                                            \"replace it with\",\n+                                            format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                        );\n+                                    }\n                                 },\n                             );\n                         }\n@@ -205,7 +211,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                     let mut visitor = ExprVisitor {\n                         assignee,\n                         counter: 0,\n-                        cx\n+                        cx,\n                     };\n \n                     walk_expr(&mut visitor, e);\n@@ -218,13 +224,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                         // a = b commutative_op a\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n                             match op.node {\n-                                hir::BiAdd |\n-                                hir::BiMul |\n-                                hir::BiAnd |\n-                                hir::BiOr |\n-                                hir::BiBitXor |\n-                                hir::BiBitAnd |\n-                                hir::BiBitOr => {\n+                                hir::BiAdd\n+                                | hir::BiMul\n+                                | hir::BiAnd\n+                                | hir::BiOr\n+                                | hir::BiBitXor\n+                                | hir::BiBitAnd\n+                                | hir::BiBitOr => {\n                                     lint(assignee, l);\n                                 },\n                                 _ => {},"}, {"sha": "936b5e75ff64982d63e0d3ee8a096478b248ca2c", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -1,13 +1,16 @@\n //! checks for attributes\n \n use reexport::*;\n-use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::lint::*;\n use rustc::ty::{self, TyCtxt};\n use semver::Version;\n-use syntax::ast::{Attribute, AttrStyle, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n+use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n-use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then, without_block_comments};\n+use utils::{\n+    in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then,\n+    without_block_comments,\n+};\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -118,7 +121,12 @@ pub struct AttrPass;\n \n impl LintPass for AttrPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INLINE_ALWAYS, DEPRECATED_SEMVER, USELESS_ATTRIBUTE, EMPTY_LINE_AFTER_OUTER_ATTR)\n+        lint_array!(\n+            INLINE_ALWAYS,\n+            DEPRECATED_SEMVER,\n+            USELESS_ATTRIBUTE,\n+            EMPTY_LINE_AFTER_OUTER_ATTR\n+        )\n     }\n }\n \n@@ -170,11 +178,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                             \"useless lint attribute\",\n                                             |db| {\n                                                 sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                db.span_suggestion(\n-                                                    line_span,\n-                                                    \"if you just forgot a `!`, use\",\n-                                                    sugg,\n-                                                );\n+                                                db.span_suggestion(line_span, \"if you just forgot a `!`, use\", sugg);\n                                             },\n                                         );\n                                     }\n@@ -234,10 +238,7 @@ fn is_relevant_block(tcx: TyCtxt, tables: &ty::TypeckTables, block: &Block) -> b\n             StmtExpr(ref expr, _) | StmtSemi(ref expr, _) => is_relevant_expr(tcx, tables, expr),\n         }\n     } else {\n-        block\n-            .expr\n-            .as_ref()\n-            .map_or(false, |e| is_relevant_expr(tcx, tables, e))\n+        block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))\n     }\n }\n "}, {"sha": "a88d6e5c26db700b5a56c075a793d9174a79edb7", "filename": "src/driver.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -6,16 +6,16 @@\n extern crate clippy_lints;\n extern crate getopts;\n extern crate rustc;\n+extern crate rustc_codegen_utils;\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_plugin;\n-extern crate rustc_codegen_utils;\n extern crate syntax;\n \n-use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc::session::{config, Session};\n use rustc::session::config::{ErrorOutputType, Input};\n+use rustc::session::{config, Session};\n+use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n use std::path::PathBuf;\n use std::process::Command;\n use syntax::ast;\n@@ -43,8 +43,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n         descriptions: &rustc_errors::registry::Registry,\n         output: ErrorOutputType,\n     ) -> Compilation {\n-        self.default\n-            .early_callback(matches, sopts, cfg, descriptions, output)\n+        self.default.early_callback(matches, sopts, cfg, descriptions, output)\n     }\n     fn no_input(\n         &mut self,\n@@ -55,8 +54,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n         ofile: &Option<PathBuf>,\n         descriptions: &rustc_errors::registry::Registry,\n     ) -> Option<(Input, Option<PathBuf>)> {\n-        self.default\n-            .no_input(matches, sopts, cfg, odir, ofile, descriptions)\n+        self.default.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n     }\n     fn late_callback(\n         &mut self,\n@@ -118,7 +116,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                 }\n                 old(state);\n             });\n-            \n+\n             control.compilation_done.stop = Compilation::Stop;\n         }\n \n@@ -185,15 +183,18 @@ pub fn main() {\n     // this check ensures that dependencies are built but not linted and the final\n     // crate is\n     // linted but not built\n-    let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n-        .ok()\n-        .map_or(false, |val| val == \"true\")\n+    let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n         || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n \n     if clippy_enabled {\n         args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n         if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-            args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter(|s| !s.is_empty()).map(str::to_owned));\n+            args.extend(\n+                extra_args\n+                    .split(\"__CLIPPY_HACKERY__\")\n+                    .filter(|s| !s.is_empty())\n+                    .map(str::to_owned),\n+            );\n         }\n     }\n "}, {"sha": "193be97161f8fa50866221b64ad19589e94c5f1e", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -15,7 +15,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.sess.lint_store.with_read_lock(|lint_store| {\n         for (lint, _, _) in lint_store.get_lint_groups() {\n             reg.sess\n-                .struct_warn(\"the clippy plugin is being deprecated, please use cargo clippy or rls with the clippy feature\")\n+                .struct_warn(\n+                    \"the clippy plugin is being deprecated, please use cargo clippy or rls with the clippy feature\",\n+                )\n                 .emit();\n             if lint == \"clippy\" {\n                 // cargo clippy run on a crate that also uses the plugin"}, {"sha": "b965dceb7747ec9d1af2a10b3bb0fcb7c7bb821b", "filename": "tests/compile-test.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -3,8 +3,8 @@\n extern crate compiletest_rs as compiletest;\n extern crate test;\n \n-use std::path::{Path, PathBuf};\n use std::env::{set_var, var};\n+use std::path::{Path, PathBuf};\n \n fn clippy_driver_path() -> PathBuf {\n     if let Some(path) = option_env!(\"CLIPPY_DRIVER_PATH\") {\n@@ -43,10 +43,7 @@ fn config(dir: &'static str, mode: &'static str) -> compiletest::Config {\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    config.target_rustcflags = Some(format!(\n-        \"-L {0} -L {0}/deps -Dwarnings\",\n-        host_libs().display()\n-    ));\n+    config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n \n     config.mode = cfg_mode;\n     config.build_base = if rustc_test_suite().is_some() {"}, {"sha": "25b0ceefae72f6596c6462c040dd7e2c9c57cb4f", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -7,10 +7,7 @@ fn check_that_clippy_lints_has_the_same_version_as_clippy() {\n     let clippy_meta = cargo_metadata::metadata(None).expect(\"could not obtain cargo metadata\");\n     std::env::set_current_dir(std::env::current_dir().unwrap().join(\"clippy_lints\")).unwrap();\n     let clippy_lints_meta = cargo_metadata::metadata(None).expect(\"could not obtain cargo metadata\");\n-    assert_eq!(\n-        clippy_lints_meta.packages[0].version,\n-        clippy_meta.packages[0].version\n-    );\n+    assert_eq!(clippy_lints_meta.packages[0].version, clippy_meta.packages[0].version);\n     for package in &clippy_meta.packages[0].dependencies {\n         if package.name == \"clippy_lints\" {\n             assert_eq!("}, {"sha": "730c5cb128ffa3a89a3de1e6ce87ad4c5218cdd1", "filename": "tests/without_block_comments.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c6503eb4b24897e9317b4af2faaf6b603be32dd/tests%2Fwithout_block_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6503eb4b24897e9317b4af2faaf6b603be32dd/tests%2Fwithout_block_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwithout_block_comments.rs?ref=3c6503eb4b24897e9317b4af2faaf6b603be32dd", "patch": "@@ -7,9 +7,7 @@ fn test_lines_without_block_comments() {\n     println!(\"result: {:?}\", result);\n     assert!(result.is_empty());\n \n-    let result = without_block_comments(\n-        vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]\n-    );\n+    let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n     assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n \n     let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n@@ -18,7 +16,7 @@ fn test_lines_without_block_comments() {\n     let result = without_block_comments(vec![\"/* one-line comment */\"]);\n     assert!(result.is_empty());\n \n-    let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\",  \"comment\",  \"*/\", \"test\", \"*/\"]);\n+    let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n     assert!(result.is_empty());\n \n     let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);"}]}