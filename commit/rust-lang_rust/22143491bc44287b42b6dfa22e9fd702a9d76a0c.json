{"sha": "22143491bc44287b42b6dfa22e9fd702a9d76a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTQzNDkxYmM0NDI4N2I0MmI2ZGZhMjJlOWZkNzAyYTlkNzZhMGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-16T18:36:13Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-20T09:22:24Z"}, "message": "resolve: Rename `global_macros` to `macro_prelude`\n\nRename `shadows_glob` to `shadowed_glob`", "tree": {"sha": "00460bd6789fb7fa45a70a14a5f0499b53f84269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00460bd6789fb7fa45a70a14a5f0499b53f84269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22143491bc44287b42b6dfa22e9fd702a9d76a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22143491bc44287b42b6dfa22e9fd702a9d76a0c", "html_url": "https://github.com/rust-lang/rust/commit/22143491bc44287b42b6dfa22e9fd702a9d76a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22143491bc44287b42b6dfa22e9fd702a9d76a0c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44f72430c7bf0c254fdb8f8a600c1825984e5a3", "html_url": "https://github.com/rust-lang/rust/commit/c44f72430c7bf0c254fdb8f8a600c1825984e5a3"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "da2847dc557930b5d8c12528f16101563112ce3b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=22143491bc44287b42b6dfa22e9fd702a9d76a0c", "patch": "@@ -651,7 +651,7 @@ impl<'a> Resolver<'a> {\n                            binding: &'a NameBinding<'a>,\n                            span: Span,\n                            allow_shadowing: bool) {\n-        if self.global_macros.insert(name, binding).is_some() && !allow_shadowing {\n+        if self.macro_prelude.insert(name, binding).is_some() && !allow_shadowing {\n             let msg = format!(\"`{}` is already in scope\", name);\n             let note =\n                 \"macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\";"}, {"sha": "9fe25aaa6c01f8af30ace9559b5ddac675189e5c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=22143491bc44287b42b6dfa22e9fd702a9d76a0c", "patch": "@@ -1393,7 +1393,7 @@ pub struct Resolver<'a> {\n \n     crate_loader: &'a mut dyn CrateLoader,\n     macro_names: FxHashSet<Ident>,\n-    global_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n+    macro_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Def>,\n     lexical_macro_resolutions: Vec<(Ident, &'a Cell<LegacyScope<'a>>)>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n@@ -1715,7 +1715,7 @@ impl<'a> Resolver<'a> {\n \n             crate_loader,\n             macro_names: FxHashSet(),\n-            global_macros: FxHashMap(),\n+            macro_prelude: FxHashMap(),\n             all_macros: FxHashMap(),\n             lexical_macro_resolutions: Vec::new(),\n             macro_map: FxHashMap(),\n@@ -3224,7 +3224,7 @@ impl<'a> Resolver<'a> {\n                 };\n             }\n         }\n-        let is_global = self.global_macros.get(&path[0].name).cloned()\n+        let is_global = self.macro_prelude.get(&path[0].name).cloned()\n             .map(|binding| binding.get_macro(self).kind() == MacroKind::Bang).unwrap_or(false);\n         if primary_ns != MacroNS && (is_global ||\n                                      self.macro_names.contains(&path[0].modern())) {"}, {"sha": "c85115c62f8eb4fbc7612db6f44bb1a401f77559", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=22143491bc44287b42b6dfa22e9fd702a9d76a0c", "patch": "@@ -220,7 +220,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             vis: ty::Visibility::Invisible,\n             expansion: Mark::root(),\n         });\n-        self.global_macros.insert(ident.name, binding);\n+        self.macro_prelude.insert(ident.name, binding);\n     }\n \n     fn resolve_imports(&mut self) {\n@@ -238,7 +238,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                 attr::mark_known(&attrs[i]);\n             }\n \n-            match self.global_macros.get(&name).cloned() {\n+            match self.macro_prelude.get(&name).cloned() {\n                 Some(binding) => match *binding.get_macro(self) {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n@@ -274,7 +274,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                     }\n                     let trait_name = traits[j].segments[0].ident.name;\n                     let legacy_name = Symbol::intern(&format!(\"derive_{}\", trait_name));\n-                    if !self.global_macros.contains_key(&legacy_name) {\n+                    if !self.macro_prelude.contains_key(&legacy_name) {\n                         continue\n                     }\n                     let span = traits.remove(j).span;\n@@ -565,7 +565,7 @@ impl<'a> Resolver<'a> {\n                     module, ident, ns, true, record_used, path_span,\n                 ).map(MacroBinding::Modern)\n             } else {\n-                self.global_macros.get(&ident.name).cloned().ok_or(determinacy)\n+                self.macro_prelude.get(&ident.name).cloned().ok_or(determinacy)\n                     .map(MacroBinding::Global)\n             };\n             self.current_module = orig_current_module;\n@@ -652,7 +652,7 @@ impl<'a> Resolver<'a> {\n \n         let binding = if let Some(binding) = binding {\n             MacroBinding::Legacy(binding)\n-        } else if let Some(binding) = self.global_macros.get(&ident.name).cloned() {\n+        } else if let Some(binding) = self.macro_prelude.get(&ident.name).cloned() {\n             if !self.use_extern_macros {\n                 self.record_use(ident, MacroNS, binding, DUMMY_SP);\n             }\n@@ -762,8 +762,8 @@ impl<'a> Resolver<'a> {\n         // Then check global macros.\n         }.or_else(|| {\n             // FIXME: get_macro needs an &mut Resolver, can we do it without cloning?\n-            let global_macros = self.global_macros.clone();\n-            let names = global_macros.iter().filter_map(|(name, binding)| {\n+            let macro_prelude = self.macro_prelude.clone();\n+            let names = macro_prelude.iter().filter_map(|(name, binding)| {\n                 if binding.get_macro(self).kind() == kind {\n                     Some(name)\n                 } else {"}, {"sha": "ed85105d19f8b62a118e3c918629f3410aa07da1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22143491bc44287b42b6dfa22e9fd702a9d76a0c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=22143491bc44287b42b6dfa22e9fd702a9d76a0c", "patch": "@@ -108,7 +108,7 @@ pub struct NameResolution<'a> {\n     single_imports: SingleImports<'a>,\n     /// The least shadowable known binding for this name, or None if there are no known bindings.\n     pub binding: Option<&'a NameBinding<'a>>,\n-    shadows_glob: Option<&'a NameBinding<'a>>,\n+    shadowed_glob: Option<&'a NameBinding<'a>>,\n }\n \n #[derive(Clone, Debug)]\n@@ -194,7 +194,7 @@ impl<'a> Resolver<'a> {\n \n         if record_used {\n             if let Some(binding) = resolution.binding {\n-                if let Some(shadowed_glob) = resolution.shadows_glob {\n+                if let Some(shadowed_glob) = resolution.shadowed_glob {\n                     let name = ident.name;\n                     // Forbid expanded shadowing to avoid time travel.\n                     if restricted_shadowing &&\n@@ -401,7 +401,7 @@ impl<'a> Resolver<'a> {\n                 if binding.is_glob_import() {\n                     if !old_binding.is_glob_import() &&\n                        !(ns == MacroNS && old_binding.expansion != Mark::root()) {\n-                        resolution.shadows_glob = Some(binding);\n+                        resolution.shadowed_glob = Some(binding);\n                     } else if binding.def() != old_binding.def() {\n                         resolution.binding = Some(this.ambiguity(old_binding, binding));\n                     } else if !old_binding.vis.is_at_least(binding.vis, &*this) {\n@@ -414,7 +414,7 @@ impl<'a> Resolver<'a> {\n                         resolution.binding = Some(this.ambiguity(binding, old_binding));\n                     } else {\n                         resolution.binding = Some(binding);\n-                        resolution.shadows_glob = Some(old_binding);\n+                        resolution.shadowed_glob = Some(old_binding);\n                     }\n                 } else {\n                     return Err(old_binding);"}]}