{"sha": "5ab68a82d592c43f7699d739003a4a7680f35e8f", "node_id": "C_kwDOAAsO6NoAKDVhYjY4YTgyZDU5MmM0M2Y3Njk5ZDczOTAwM2E0YTc2ODBmMzVlOGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-29T23:23:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-30T21:30:23Z"}, "message": "Group together more size assertions.\n\nAlso add a few more assertions for some relevant token-related types.\n\nAnd fix an erroneous comment in `rustc_errors`.", "tree": {"sha": "aec0ac30e31e2354bfd2638a9f902875dadd8527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec0ac30e31e2354bfd2638a9f902875dadd8527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab68a82d592c43f7699d739003a4a7680f35e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab68a82d592c43f7699d739003a4a7680f35e8f", "html_url": "https://github.com/rust-lang/rust/commit/5ab68a82d592c43f7699d739003a4a7680f35e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab68a82d592c43f7699d739003a4a7680f35e8f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "307dd938d7937c93dc7a880e81a2383b82f30ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/307dd938d7937c93dc7a880e81a2383b82f30ad0", "html_url": "https://github.com/rust-lang/rust/commit/307dd938d7937c93dc7a880e81a2383b82f30ad0"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "0d3bfe04a25552988e8782257b54550af8d69e5d", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=5ab68a82d592c43f7699d739003a4a7680f35e8f", "patch": "@@ -256,10 +256,6 @@ pub enum TokenKind {\n     Eof,\n }\n \n-// `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenKind, 16);\n-\n #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct Token {\n     pub kind: TokenKind,\n@@ -751,10 +747,6 @@ pub enum Nonterminal {\n     NtVis(P<ast::Visibility>),\n }\n \n-// `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Nonterminal, 16);\n-\n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum NonterminalKind {\n     Item,\n@@ -893,3 +885,16 @@ where\n         panic!(\"interpolated tokens should not be present in the HIR\")\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(Lit, 12);\n+    static_assert_size!(LitKind, 2);\n+    static_assert_size!(Nonterminal, 16);\n+    static_assert_size!(Token, 24);\n+    static_assert_size!(TokenKind, 16);\n+}"}, {"sha": "824206a99d8d3d0fa9c1c3a5e273f7d9757b28a0", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=5ab68a82d592c43f7699d739003a4a7680f35e8f", "patch": "@@ -47,10 +47,6 @@ pub enum TokenTree {\n     Delimited(DelimSpan, Delimiter, TokenStream),\n }\n \n-// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenTree, 32);\n-\n // Ensure all fields of `TokenTree` is `Send` and `Sync`.\n #[cfg(parallel_compiler)]\n fn _dummy()\n@@ -308,10 +304,6 @@ pub struct AttributesData {\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n pub struct TokenStream(pub(crate) Lrc<Vec<TokenTree>>);\n \n-// `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(TokenStream, 8);\n-\n #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]\n pub enum Spacing {\n     Alone,\n@@ -664,3 +656,16 @@ impl DelimSpan {\n         self.open.with_hi(self.close.hi())\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AttrTokenStream, 8);\n+    static_assert_size!(AttrTokenTree, 32);\n+    static_assert_size!(LazyAttrTokenStream, 8);\n+    static_assert_size!(TokenStream, 8);\n+    static_assert_size!(TokenTree, 32);\n+}"}, {"sha": "cdb2c2af7d62a876c7f369b3f2bac7ee96a3a135", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5ab68a82d592c43f7699d739003a4a7680f35e8f", "patch": "@@ -66,7 +66,7 @@ pub type PErr<'a> = DiagnosticBuilder<'a, ErrorGuaranteed>;\n pub type PResult<'a, T> = Result<T, PErr<'a>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n-// (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n+// (See also the comment on `DiagnosticBuilderInner`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(PResult<'_, ()>, 16);\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "0dc05475ce9447f3f7189690be8b82afc3f779b2", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab68a82d592c43f7699d739003a4a7680f35e8f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=5ab68a82d592c43f7699d739003a4a7680f35e8f", "patch": "@@ -32,11 +32,6 @@ pub struct AttrWrapper {\n     start_pos: usize,\n }\n \n-// This struct is passed around very frequently,\n-// so make sure it doesn't accidentally get larger\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(AttrWrapper, 16);\n-\n impl AttrWrapper {\n     pub(super) fn new(attrs: AttrVec, start_pos: usize) -> AttrWrapper {\n         AttrWrapper { attrs, start_pos }\n@@ -96,9 +91,6 @@ struct LazyAttrTokenStreamImpl {\n     replace_ranges: Box<[ReplaceRange]>,\n }\n \n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(LazyAttrTokenStreamImpl, 144);\n-\n impl ToAttrTokenStream for LazyAttrTokenStreamImpl {\n     fn to_attr_token_stream(&self) -> AttrTokenStream {\n         // The token produced by the final call to `{,inlined_}next` was not\n@@ -461,3 +453,13 @@ fn make_token_stream(\n     }\n     AttrTokenStream::new(final_buf.inner)\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // These are in alphabetical order, which is easy to maintain.\n+    static_assert_size!(AttrWrapper, 16);\n+    static_assert_size!(LazyAttrTokenStreamImpl, 144);\n+}"}]}