{"sha": "a95fb8b150a256856aedeca7ebf30b662d2e5141", "node_id": "C_kwDOAAsO6NoAKGE5NWZiOGIxNTBhMjU2ODU2YWVkZWNhN2ViZjMwYjY2MmQyZTUxNDE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-02T03:24:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:19:59Z"}, "message": "Overhaul `Const`.\n\nSpecifically, rename the `Const` struct as `ConstS` and re-introduce `Const` as\nthis:\n```\npub struct Const<'tcx>(&'tcx Interned<ConstS>);\n```\nThis now matches `Ty` and `Predicate` more closely, including using\npointer-based `eq` and `hash`.\n\nNotable changes:\n- `mk_const` now takes a `ConstS`.\n- `Const` was copy, despite being 48 bytes. Now `ConstS` is not, so need a\n  we need separate arena for it, because we can't use the `Dropless` one any\n  more.\n- Many `&'tcx Const<'tcx>`/`&Const<'tcx>` to `Const<'tcx>` changes\n- Many `ct.ty` to `ct.ty()` and `ct.val` to `ct.val()` changes.\n- Lots of tedious sigil fiddling.", "tree": {"sha": "86f2588dc898e21e12de8e6ec307926eefd88331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f2588dc898e21e12de8e6ec307926eefd88331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a95fb8b150a256856aedeca7ebf30b662d2e5141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a95fb8b150a256856aedeca7ebf30b662d2e5141", "html_url": "https://github.com/rust-lang/rust/commit/a95fb8b150a256856aedeca7ebf30b662d2e5141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a95fb8b150a256856aedeca7ebf30b662d2e5141/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb15509ce758849108e80d8807cde1d6806d74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb15509ce758849108e80d8807cde1d6806d74b", "html_url": "https://github.com/rust-lang/rust/commit/7eb15509ce758849108e80d8807cde1d6806d74b"}], "stats": {"total": 1271, "additions": 653, "deletions": 618}, "files": [{"sha": "60c48d8a7648ec65dc29b9bc9c521bb28fac327a", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -198,7 +198,7 @@ fn check_opaque_type_parameter_valid(\n             GenericArgKind::Lifetime(lt) => {\n                 matches!(*lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n             }\n-            GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n+            GenericArgKind::Const(ct) => matches!(ct.val(), ty::ConstKind::Param(_)),\n         };\n \n         if arg_is_param {"}, {"sha": "2876d60527fe7714feacb811f933b9321f7ea16f", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n         debug!(?region);\n     }\n \n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _location: Location) {\n-        *constant = self.renumber_regions(&*constant);\n+    fn visit_const(&mut self, constant: &mut ty::Const<'tcx>, _location: Location) {\n+        *constant = self.renumber_regions(*constant);\n     }\n }"}, {"sha": "46924f50d2e1ba50f7696db2796d1082e45896ee", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         } else {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n-                ConstantKind::Ty(ct) => match ct.val {\n+                ConstantKind::Ty(ct) => match ct.val() {\n                     ty::ConstKind::Unevaluated(uv) => Some(uv),\n                     _ => None,\n                 },\n@@ -1956,7 +1956,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n         if let Operand::Constant(constant) = op {\n             let maybe_uneval = match constant.literal {\n-                ConstantKind::Ty(ct) => match ct.val {\n+                ConstantKind::Ty(ct) => match ct.val() {\n                     ty::ConstKind::Unevaluated(uv) => Some(uv),\n                     _ => None,\n                 },"}, {"sha": "590a7a91641557700b77108b9c4189230c43bf99", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n \n     // We don't have to worry about the equality of consts during borrow checking\n     // as consts always have a static lifetime.\n-    fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {}\n+    fn const_equate(&mut self, _a: Const<'tcx>, _b: Const<'tcx>) {}\n \n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager"}, {"sha": "917afa4eae06cbb91fe44f4fca3f7958c765abde", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -668,7 +668,7 @@ fn codegen_stmt<'tcx>(\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n-                        .val\n+                        .val()\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n                     if operand.layout().size.bytes() == 0 {"}, {"sha": "274fb211b7bbb5cd2ee8dff0b37267aec5fae605", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n             ConstantKind::Ty(ct) => ct,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.val {\n+        match const_.val() {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n@@ -127,15 +127,15 @@ pub(crate) fn codegen_constant<'tcx>(\n         ConstantKind::Ty(ct) => ct,\n         ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n-    let const_val = match const_.val {\n+    let const_val = match const_.val() {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n@@ -152,7 +152,7 @@ pub(crate) fn codegen_constant<'tcx>(\n         | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n     };\n \n-    codegen_const_value(fx, const_val, const_.ty)\n+    codegen_const_value(fx, const_val, const_.ty())\n }\n \n pub(crate) fn codegen_const_value<'tcx>(\n@@ -465,7 +465,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Constant(const_) => match const_.literal {\n             ConstantKind::Ty(const_) => {\n-                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val().try_to_value()\n             }\n             ConstantKind::Val(val, _) => Some(val),\n         },"}, {"sha": "b63851c195de6df091bed7ed0d4627ee3bb736ac", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -146,15 +146,15 @@ fn push_debuginfo_type_name<'tcx>(\n             if cpp_like_debuginfo {\n                 output.push_str(\"array$<\");\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n-                match len.val {\n+                match len.val() {\n                     ty::ConstKind::Param(param) => write!(output, \",{}>\", param.name).unwrap(),\n                     _ => write!(output, \",{}>\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n                         .unwrap(),\n                 }\n             } else {\n                 output.push('[');\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n-                match len.val {\n+                match len.val() {\n                     ty::ConstKind::Param(param) => write!(output, \"; {}]\", param.name).unwrap(),\n                     _ => write!(output, \"; {}]\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n                         .unwrap(),\n@@ -645,19 +645,19 @@ fn push_generic_params_internal<'tcx>(\n     true\n }\n \n-fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: &'tcx ty::Const<'tcx>, output: &mut String) {\n-    match ct.val {\n+fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: ty::Const<'tcx>, output: &mut String) {\n+    match ct.val() {\n         ty::ConstKind::Param(param) => {\n             write!(output, \"{}\", param.name)\n         }\n-        _ => match ct.ty.kind() {\n+        _ => match ct.ty().kind() {\n             ty::Int(ity) => {\n-                let bits = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty);\n+                let bits = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty());\n                 let val = Integer::from_int_ty(&tcx, *ity).size().sign_extend(bits) as i128;\n                 write!(output, \"{}\", val)\n             }\n             ty::Uint(_) => {\n-                let val = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty);\n+                let val = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty());\n                 write!(output, \"{}\", val)\n             }\n             ty::Bool => {\n@@ -672,7 +672,7 @@ fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: &'tcx ty::Const<'tcx>, output:\n                 let mut hasher = StableHasher::new();\n                 hcx.while_hashing_spans(false, |hcx| {\n                     hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-                        ct.val.hash_stable(hcx, &mut hasher);\n+                        ct.val().hash_stable(hcx, &mut hasher);\n                     });\n                 });\n                 // Let's only emit 64 bits of the hash value. That should be plenty for"}, {"sha": "5cdf131b0b633d5d211807479befb4e09c1ab505", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::ConstantKind::Ty(ct) => ct,\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n-        match ct.val {\n+        match ct.val() {\n             ty::ConstKind::Unevaluated(ct) => self\n                 .cx\n                 .tcx()\n@@ -61,11 +61,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let c = ty::Const::from_value(bx.tcx(), val, ty);\n                 let values: Vec<_> = bx\n                     .tcx()\n-                    .destructure_const(ty::ParamEnv::reveal_all().and(&c))\n+                    .destructure_const(ty::ParamEnv::reveal_all().and(c))\n                     .fields\n                     .iter()\n                     .map(|field| {\n-                        if let Some(prim) = field.val.try_to_scalar() {\n+                        if let Some(prim) = field.val().try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);\n                             let scalar = match layout.abi {\n                                 Abi::Scalar(x) => x,\n@@ -78,7 +78,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     })\n                     .collect();\n                 let llval = bx.const_struct(&values, false);\n-                (llval, c.ty)\n+                (llval, c.ty())\n             })\n             .unwrap_or_else(|_| {\n                 bx.tcx().sess.span_err(span, \"could not evaluate shuffle_indices at compile time\");"}, {"sha": "eaa333fd8a9657f6ce8a3d4b6676ca3f1e84f640", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -139,14 +139,14 @@ fn const_to_valtree_inner<'tcx>(\n pub(crate) fn destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    val: &'tcx ty::Const<'tcx>,\n+    val: ty::Const<'tcx>,\n ) -> mir::DestructuredConst<'tcx> {\n     trace!(\"destructure_const: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.const_to_op(val, None).unwrap();\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n-    let (field_count, variant, down) = match val.ty.kind() {\n+    let (field_count, variant, down) = match val.ty().kind() {\n         ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n         ty::Adt(def, _) if def.variants.is_empty() => {\n             return mir::DestructuredConst { variant: None, fields: &[] };\n@@ -173,8 +173,8 @@ pub(crate) fn destructure_const<'tcx>(\n pub(crate) fn deref_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    val: &'tcx ty::Const<'tcx>,\n-) -> &'tcx ty::Const<'tcx> {\n+    val: ty::Const<'tcx>,\n+) -> ty::Const<'tcx> {\n     trace!(\"deref_const: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.const_to_op(val, None).unwrap();\n@@ -203,5 +203,5 @@ pub(crate) fn deref_const<'tcx>(\n         },\n     };\n \n-    tcx.mk_const(ty::Const { val: ty::ConstKind::Value(op_to_const(&ecx, &mplace.into())), ty })\n+    tcx.mk_const(ty::ConstS { val: ty::ConstKind::Value(op_to_const(&ecx, &mplace.into())), ty })\n }"}, {"sha": "e6f243e28dbc5c7a45a524b3ae66b141a559ada0", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n         }\n     }\n \n-    fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+    fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         self.pretty_print_const(ct, false)\n     }\n "}, {"sha": "ec5eafcd6331821b2312d00eab57cde8bd4ee065", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -561,10 +561,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// \"universe\" (param_env).\n     pub fn const_to_op(\n         &self,\n-        val: &ty::Const<'tcx>,\n+        val: ty::Const<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        match val.val {\n+        match val.val() {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n             ty::ConstKind::Unevaluated(uv) => {\n@@ -574,7 +574,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n-            ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),\n+            ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty(), layout),\n         }\n     }\n \n@@ -584,7 +584,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match val {\n-            mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),\n+            mir::ConstantKind::Ty(ct) => self.const_to_op(*ct, layout),\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n         }\n     }"}, {"sha": "e17bd9a8c08993112f43ed8bd45c90d6a1106f09", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -55,7 +55,7 @@ where\n                                     assert!(matches!(ty.kind(), ty::Param(_)))\n                                 }\n                                 ty::subst::GenericArgKind::Const(ct) => {\n-                                    assert!(matches!(ct.val, ty::ConstKind::Param(_)))\n+                                    assert!(matches!(ct.val(), ty::ConstKind::Param(_)))\n                                 }\n                                 ty::subst::GenericArgKind::Lifetime(..) => (),\n                             },\n@@ -68,8 +68,8 @@ where\n             }\n         }\n \n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            match c.val {\n+        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            match c.val() {\n                 ty::ConstKind::Param(..) => ControlFlow::Break(FoundParam),\n                 _ => c.super_visit_with(self),\n             }"}, {"sha": "639b798be5431abad80e703acf5702b10d402d52", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -355,7 +355,7 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val() {\n             // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n             // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n             // check performed after the promotion. Verify that with an assertion."}, {"sha": "cacc0018fe93772bacd6e28caf08ece6bfb74a22", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -839,7 +839,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     span,\n                     user_ty: None,\n                     literal: tcx\n-                        .mk_const(ty::Const {\n+                        .mk_const(ty::ConstS {\n                             ty,\n                             val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                                 def,"}, {"sha": "94991fdb2011091c75af7bf1284e0ec394bbc059", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n+impl<'tcx> ToTrace<'tcx> for Const<'tcx> {\n     fn to_trace(\n         _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "5e67c8cfa27c4a73cc0799ace0fed0efa64de974", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -475,8 +475,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        match ct.val {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        match ct.val() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n                 match self.infcx.probe_const_var(vid) {\n@@ -493,7 +493,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                             ui = ty::UniverseIndex::ROOT;\n                         }\n                         return self.canonicalize_const_var(\n-                            CanonicalVarInfo { kind: CanonicalVarKind::Const(ui, ct.ty) },\n+                            CanonicalVarInfo { kind: CanonicalVarKind::Const(ui, ct.ty()) },\n                             ct,\n                         );\n                     }\n@@ -769,17 +769,17 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     fn canonicalize_const_var(\n         &mut self,\n         info: CanonicalVarInfo<'tcx>,\n-        const_var: &'tcx ty::Const<'tcx>,\n-    ) -> &'tcx ty::Const<'tcx> {\n+        const_var: ty::Const<'tcx>,\n+    ) -> ty::Const<'tcx> {\n         let infcx = self.infcx;\n         let bound_to = infcx.shallow_resolve(const_var);\n         if bound_to != const_var {\n             self.fold_const(bound_to)\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n-            self.tcx().mk_const(ty::Const {\n+            self.tcx().mk_const(ty::ConstS {\n                 val: ty::ConstKind::Bound(self.binder_index, var),\n-                ty: self.fold_ty(const_var.ty),\n+                ty: self.fold_ty(const_var.ty()),\n             })\n         }\n     }"}, {"sha": "798568679851913db782e4db41f7f73c9632e661", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -149,7 +149,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n                 self.tcx\n-                    .mk_const(ty::Const {\n+                    .mk_const(ty::ConstS {\n                         val: ty::ConstKind::Placeholder(placeholder_mapped),\n                         ty: name.ty,\n                     })"}, {"sha": "48d5c21f9eb880ee3ca13963b1a9268d04fbec1a", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -437,12 +437,12 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(result_value) => {\n-                    if let ty::Const { val: ty::ConstKind::Bound(debrujin, b), .. } = result_value {\n+                    if let ty::ConstKind::Bound(debrujin, b) = result_value.val() {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(const X)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(*debrujin, ty::INNERMOST);\n-                        opt_values[*b] = Some(*original_value);\n+                        assert_eq!(debrujin, ty::INNERMOST);\n+                        opt_values[b] = Some(*original_value);\n                     }\n                 }\n             }\n@@ -670,7 +670,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         });\n     }\n \n-    fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {\n+    fn const_equate(&mut self, _a: Const<'tcx>, _b: Const<'tcx>) {\n         span_bug!(\n             self.cause.span(self.infcx.tcx),\n             \"generic_const_exprs: unreachable `const_equate`\""}, {"sha": "e1b5d04ccfb8fc376554d5d3cd5ddc4a39378871", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -123,9 +123,9 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     pub fn super_combine_consts<R>(\n         &self,\n         relation: &mut R,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>>\n     where\n         R: ConstEquateRelation<'tcx>,\n     {\n@@ -139,7 +139,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n \n         let a_is_expected = relation.a_is_expected();\n \n-        match (a.val, b.val) {\n+        match (a.val(), b.val()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n                 ty::ConstKind::Infer(InferConst::Var(b_vid)),\n@@ -226,9 +226,9 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         target_vid: ty::ConstVid<'tcx>,\n-        ct: &'tcx ty::Const<'tcx>,\n+        ct: ty::Const<'tcx>,\n         vid_is_expected: bool,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         let (for_universe, span) = {\n             let mut inner = self.inner.borrow_mut();\n             let variable_table = &mut inner.const_unification_table();\n@@ -451,8 +451,8 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n     pub fn add_const_equate_obligation(\n         &mut self,\n         a_is_expected: bool,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n     ) {\n         let predicate = if a_is_expected {\n             ty::PredicateKind::ConstEquate(a, b)\n@@ -716,12 +716,12 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n \n     fn consts(\n         &mut self,\n-        c: &'tcx ty::Const<'tcx>,\n-        c2: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        c: ty::Const<'tcx>,\n+        c2: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n-        match c.val {\n+        match c.val() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 let mut inner = self.infcx.inner.borrow_mut();\n                 let variable_table = &mut inner.const_unification_table();\n@@ -739,7 +739,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                                 origin: var_value.origin,\n                                 val: ConstVariableValue::Unknown { universe: self.for_universe },\n                             });\n-                            Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n+                            Ok(self.tcx().mk_const_var(new_var_id, c.ty()))\n                         }\n                     }\n                 }\n@@ -754,8 +754,8 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     substs,\n                     substs,\n                 )?;\n-                Ok(self.tcx().mk_const(ty::Const {\n-                    ty: c.ty,\n+                Ok(self.tcx().mk_const(ty::ConstS {\n+                    ty: c.ty(),\n                     val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n                 }))\n             }\n@@ -768,7 +768,7 @@ pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n     /// Register an obligation that both constants must be equal to each other.\n     ///\n     /// If they aren't equal then the relation doesn't hold.\n-    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n }\n \n pub trait RelateResultCompare<'tcx, T> {\n@@ -788,7 +788,7 @@ impl<'tcx, T: Clone + PartialEq> RelateResultCompare<'tcx, T> for RelateResult<'\n \n pub fn const_unification_error<'tcx>(\n     a_is_expected: bool,\n-    (a, b): (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>),\n+    (a, b): (ty::Const<'tcx>, ty::Const<'tcx>),\n ) -> TypeError<'tcx> {\n     TypeError::ConstMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n@@ -945,13 +945,13 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn consts(\n         &mut self,\n-        c: &'tcx ty::Const<'tcx>,\n-        _c: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        c: ty::Const<'tcx>,\n+        _c: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         debug_assert_eq!(c, _c);\n         debug!(\"ConstInferUnifier: c={:?}\", c);\n \n-        match c.val {\n+        match c.val() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 // Check if the current unification would end up\n                 // unifying `target_vid` with a const which contains\n@@ -985,7 +985,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                                         },\n                                     },\n                                 );\n-                            Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n+                            Ok(self.tcx().mk_const_var(new_var_id, c.ty()))\n                         }\n                     }\n                 }\n@@ -1000,8 +1000,8 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     substs,\n                     substs,\n                 )?;\n-                Ok(self.tcx().mk_const(ty::Const {\n-                    ty: c.ty,\n+                Ok(self.tcx().mk_const(ty::ConstS {\n+                    ty: c.ty(),\n                     val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n                 }))\n             }"}, {"sha": "5ac9ad6850c4040ce4a8029682807c5711130fe5", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -117,9 +117,9 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n@@ -143,7 +143,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n         self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n     }\n }"}, {"sha": "d900379c44c629a9c29ee6d919c9c0db1dbce46c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -515,7 +515,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 Err(NonTrivialPath)\n             }\n \n-            fn print_const(self, _ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+            fn print_const(self, _ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n                 Err(NonTrivialPath)\n             }\n "}, {"sha": "aba5666b58cd7ce5f1a707dc97e08a3637b3893b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GenericArgKind::Const(ct) => {\n-                match ct.val {\n+                match ct.val() {\n                     ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                         let origin = self\n                             .inner\n@@ -459,7 +459,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                     }\n                                     _ => {}\n                                 },\n-                                GenericArgKind::Const(c) => match c.val {\n+                                GenericArgKind::Const(c) => match c.val() {\n                                     ty::ConstKind::Infer(InferConst::Var(_)) => {\n                                         return self.extract_inference_diagnostics_data(s, None);\n                                     }\n@@ -935,9 +935,9 @@ impl<'tcx> ResolvedTypeParamEraser<'tcx> {\n     }\n \n     /// Replace not yet inferred const params with their def name.\n-    fn replace_infers(&self, c: &'tcx Const<'tcx>, index: u32, name: Symbol) -> &'tcx Const<'tcx> {\n-        match c.val {\n-            ty::ConstKind::Infer(..) => self.tcx().mk_const_param(index, name, c.ty),\n+    fn replace_infers(&self, c: Const<'tcx>, index: u32, name: Symbol) -> Const<'tcx> {\n+        match c.val() {\n+            ty::ConstKind::Infer(..) => self.tcx().mk_const_param(index, name, c.ty()),\n             _ => c,\n         }\n     }\n@@ -962,7 +962,7 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n                     .map(|(subst, param)| match &(subst.unpack(), &param.kind) {\n                         (_, ty::GenericParamDefKind::Type { has_default: true, .. }) => subst,\n                         (crate::infer::GenericArgKind::Const(c), _) => {\n-                            self.replace_infers(c, param.index, param.name).into()\n+                            self.replace_infers(*c, param.index, param.name).into()\n                         }\n                         _ => subst.super_fold_with(self),\n                     })\n@@ -1002,7 +1002,7 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n             | ty::Projection(_)\n             | ty::Never => t.super_fold_with(self),\n             ty::Array(ty, c) => {\n-                self.tcx().mk_ty(ty::Array(self.fold_ty(*ty), self.replace_infers(c, 0, sym::N)))\n+                self.tcx().mk_ty(ty::Array(self.fold_ty(*ty), self.replace_infers(*c, 0, sym::N)))\n             }\n             // We don't want to hide type params that haven't been resolved yet.\n             // This would be the type that will be written out with the type param"}, {"sha": "e9d3b6a8aa1a4167d777c0645541392bf9529e37", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -46,7 +46,7 @@ pub struct TypeFreshener<'a, 'tcx> {\n     ty_freshen_count: u32,\n     const_freshen_count: u32,\n     ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,\n-    const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,\n+    const_freshen_map: FxHashMap<ty::InferConst<'tcx>, ty::Const<'tcx>>,\n     keep_static: bool,\n }\n \n@@ -89,11 +89,11 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n \n     fn freshen_const<F>(\n         &mut self,\n-        opt_ct: Option<&'tcx ty::Const<'tcx>>,\n+        opt_ct: Option<ty::Const<'tcx>>,\n         key: ty::InferConst<'tcx>,\n         freshener: F,\n         ty: Ty<'tcx>,\n-    ) -> &'tcx ty::Const<'tcx>\n+    ) -> ty::Const<'tcx>\n     where\n         F: FnOnce(u32) -> ty::InferConst<'tcx>,\n     {\n@@ -221,8 +221,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        match ct.val {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        match ct.val() {\n             ty::ConstKind::Infer(ty::InferConst::Var(v)) => {\n                 let opt_ct = self\n                     .infcx\n@@ -236,7 +236,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                     opt_ct,\n                     ty::InferConst::Var(v),\n                     ty::InferConst::Fresh,\n-                    ct.ty,\n+                    ct.ty(),\n                 );\n             }\n             ty::ConstKind::Infer(ty::InferConst::Fresh(i)) => {"}, {"sha": "c5c131a5b796bb074ccea1b53c2ae83f03e90069", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -230,14 +230,14 @@ impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n         r\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ty::ConstKind::Infer(ty::InferConst::Var(vid)), ty } = ct {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = ct.val() {\n             if self.const_vars.0.contains(&vid) {\n                 // This variable was created during the fudging.\n                 // Recreate it with a fresh variable here.\n                 let idx = (vid.index - self.const_vars.0.start.index) as usize;\n                 let origin = self.const_vars.1[idx];\n-                self.infcx.next_const_var(*ty, origin)\n+                self.infcx.next_const_var(ct.ty(), origin)\n             } else {\n                 ct\n             }"}, {"sha": "381097344ec68eec5e000f22196e5b257d862cfd", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -78,9 +78,9 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n@@ -120,7 +120,7 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n }\n \n impl<'tcx> ConstEquateRelation<'tcx> for Glb<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n         self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n     }\n }"}, {"sha": "82454b89156a6110d5b7a5199aab761ad56e6529", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         let fld_c = |bound_var: ty::BoundVar, ty| {\n-            self.tcx.mk_const(ty::Const {\n+            self.tcx.mk_const(ty::ConstS {\n                 val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                     universe: next_universe,\n                     name: ty::BoundConst { var: bound_var, ty },"}, {"sha": "57cbe2c54f7aec978ddbee9e837b0e54cae8eda9", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -78,9 +78,9 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n@@ -103,7 +103,7 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ConstEquateRelation<'tcx> for Lub<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n         self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n     }\n }"}, {"sha": "f0a4ec813134c8eb44535a1f68476135a1baffcd", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -1079,11 +1079,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.tcx.mk_ty_var(vid)\n     }\n \n-    pub fn next_const_var(\n-        &self,\n-        ty: Ty<'tcx>,\n-        origin: ConstVariableOrigin,\n-    ) -> &'tcx ty::Const<'tcx> {\n+    pub fn next_const_var(&self, ty: Ty<'tcx>, origin: ConstVariableOrigin) -> ty::Const<'tcx> {\n         self.tcx.mk_const_var(self.next_const_var_id(origin), ty)\n     }\n \n@@ -1092,7 +1088,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         origin: ConstVariableOrigin,\n         universe: ty::UniverseIndex,\n-    ) -> &'tcx ty::Const<'tcx> {\n+    ) -> ty::Const<'tcx> {\n         let vid = self\n             .inner\n             .borrow_mut()\n@@ -1435,7 +1431,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn probe_const_var(\n         &self,\n         vid: ty::ConstVid<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {\n+    ) -> Result<ty::Const<'tcx>, ty::UniverseIndex> {\n         match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {\n             ConstVariableValue::Known { value } => Ok(value),\n             ConstVariableValue::Unknown { universe } => Err(universe),\n@@ -1501,8 +1497,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_mismatched_consts(\n         &self,\n         cause: &ObligationCause<'tcx>,\n-        expected: &'tcx ty::Const<'tcx>,\n-        actual: &'tcx ty::Const<'tcx>,\n+        expected: ty::Const<'tcx>,\n+        actual: ty::Const<'tcx>,\n         err: TypeError<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let trace = TypeTrace::consts(cause, true, expected, actual);\n@@ -1756,8 +1752,8 @@ impl<'tcx> TyOrConstInferVar<'tcx> {\n \n     /// Tries to extract an inference variable from a constant, returns `None`\n     /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).\n-    pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {\n-        match ct.val {\n+    pub fn maybe_from_const(ct: ty::Const<'tcx>) -> Option<Self> {\n+        match ct.val() {\n             ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),\n             _ => None,\n         }\n@@ -1777,13 +1773,13 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n         self.infcx.shallow_resolve_ty(ty)\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val() {\n             self.infcx\n                 .inner\n                 .borrow_mut()\n                 .const_unification_table()\n-                .probe_value(*vid)\n+                .probe_value(vid)\n                 .val\n                 .known()\n                 .unwrap_or(ct)\n@@ -1813,8 +1809,8 @@ impl<'tcx> TypeTrace<'tcx> {\n     pub fn consts(\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n     ) -> TypeTrace<'tcx> {\n         TypeTrace {\n             cause: cause.clone(),"}, {"sha": "60f776d8c1f6783750b4a35b2257507d04f278d3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -87,7 +87,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n         info: ty::VarianceDiagInfo<'tcx>,\n     );\n \n-    fn const_equate(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n+    fn const_equate(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n@@ -609,16 +609,16 @@ where\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        mut b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        mut b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         let a = self.infcx.shallow_resolve(a);\n \n         if !D::forbid_inference_vars() {\n             b = self.infcx.shallow_resolve(b);\n         }\n \n-        match b.val {\n+        match b.val() {\n             ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n@@ -745,7 +745,7 @@ impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n         self.delegate.const_equate(a, b);\n     }\n }\n@@ -992,10 +992,10 @@ where\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        _: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        match a.val {\n+        a: ty::Const<'tcx>,\n+        _: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n+        match a.val() {\n             ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", a);\n             }\n@@ -1010,7 +1010,7 @@ where\n                             origin: var_value.origin,\n                             val: ConstVariableValue::Unknown { universe: self.universe },\n                         });\n-                        Ok(self.tcx().mk_const_var(new_var_id, a.ty))\n+                        Ok(self.tcx().mk_const_var(new_var_id, a.ty()))\n                     }\n                 }\n             }"}, {"sha": "08358bf506778b85af4c4a1ad8d92ca0d6b970ba", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx Const<'tcx>) -> &'tcx Const<'tcx> {\n+    fn fold_const(&mut self, ct: Const<'tcx>) -> Const<'tcx> {\n         if !ct.has_infer_types_or_consts() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         if !ct.has_infer_regions() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n@@ -218,15 +218,12 @@ impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n         }\n     }\n \n-    fn try_fold_const(\n-        &mut self,\n-        c: &'tcx ty::Const<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n         if !c.needs_infer() {\n             Ok(c) // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n             let c = self.infcx.shallow_resolve(c);\n-            match c.val {\n+            match c.val() {\n                 ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                     return Err(FixupError::UnresolvedConst(vid));\n                 }"}, {"sha": "9ec1b3390d0ad3cf8aea208d765d6759ae19c4d0", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -151,9 +151,9 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n@@ -170,7 +170,7 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n }\n \n impl<'tcx> ConstEquateRelation<'tcx> for Sub<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n         self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n     }\n }"}, {"sha": "85bb727a6c8048dac439d5ff02d65dbec78f089e", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -101,7 +101,7 @@ pub enum FulfillmentErrorCode<'tcx> {\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate\n-    CodeConstEquateError(ExpectedFound<&'tcx Const<'tcx>>, TypeError<'tcx>),\n+    CodeConstEquateError(ExpectedFound<Const<'tcx>>, TypeError<'tcx>),\n     CodeAmbiguity,\n }\n "}, {"sha": "a397db7f32921d733a573af5d95d0ab2f85f9982", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -2895,7 +2895,7 @@ impl ClashingExternDeclarations {\n                         }\n                         (Array(a_ty, a_const), Array(b_ty, b_const)) => {\n                             // For arrays, we also check the constness of the type.\n-                            a_const.val == b_const.val\n+                            a_const.val() == b_const.val()\n                                 && structurally_same_type_impl(seen_types, cx, *a_ty, *b_ty, ckind)\n                         }\n                         (Slice(a_ty), Slice(b_ty)) => {"}, {"sha": "d2d853efda2d25db2c69b2d029118b65939c5c76", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -974,7 +974,7 @@ impl<'tcx> LateContext<'tcx> {\n                 Ok(())\n             }\n \n-            fn print_const(self, _ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+            fn print_const(self, _ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n                 Ok(())\n             }\n "}, {"sha": "9b0272e7fd3b491c35f624249eac1955716d2fb6", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -117,7 +117,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     thir_abstract_const => { cdata.get_thir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }\n-    const_param_default => { tcx.mk_const(cdata.get_const_param_default(tcx, def_id.index)) }\n+    const_param_default => { cdata.get_const_param_default(tcx, def_id.index) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }"}, {"sha": "c4e6734aa0fa71efa23fc2c361a991e462889b35", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -89,6 +89,7 @@ macro_rules! arena_types {\n             // Interned types\n             [] tys: rustc_middle::ty::TyS<'tcx>,\n             [] predicates: rustc_middle::ty::PredicateS<'tcx>,\n+            [] consts: rustc_middle::ty::ConstS<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena"}, {"sha": "419ed429246ac889076f23e8bbdf432eda48c7a5", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -328,8 +328,8 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                         tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n                     }\n                     GenericArgKind::Const(ct) => tcx\n-                        .mk_const(ty::Const {\n-                            ty: ct.ty,\n+                        .mk_const(ty::ConstS {\n+                            ty: ct.ty(),\n                             val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n                         })\n                         .into(),"}, {"sha": "7a6d08fcc349b36a2ac9ff25e0062d36508f9285", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -95,14 +95,14 @@ pub enum ConstVariableOriginKind {\n \n #[derive(Copy, Clone, Debug)]\n pub enum ConstVariableValue<'tcx> {\n-    Known { value: &'tcx ty::Const<'tcx> },\n+    Known { value: ty::Const<'tcx> },\n     Unknown { universe: ty::UniverseIndex },\n }\n \n impl<'tcx> ConstVariableValue<'tcx> {\n     /// If this value is known, returns the const it is known to be.\n     /// Otherwise, `None`.\n-    pub fn known(&self) -> Option<&'tcx ty::Const<'tcx>> {\n+    pub fn known(&self) -> Option<ty::Const<'tcx>> {\n         match *self {\n             ConstVariableValue::Unknown { .. } => None,\n             ConstVariableValue::Known { value } => Some(value),\n@@ -130,7 +130,7 @@ impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {\n }\n \n impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n-    type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);\n+    type Error = (ty::Const<'tcx>, ty::Const<'tcx>);\n \n     fn unify_values(&value1: &Self, &value2: &Self) -> Result<Self, Self::Error> {\n         Ok(match (value1.val, value2.val) {\n@@ -162,18 +162,18 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n     }\n }\n \n-impl<'tcx> EqUnifyValue for &'tcx ty::Const<'tcx> {}\n+impl<'tcx> EqUnifyValue for ty::Const<'tcx> {}\n \n pub fn replace_if_possible<'tcx, V, L>(\n     table: &mut UnificationTable<InPlace<ty::ConstVid<'tcx>, V, L>>,\n-    c: &'tcx ty::Const<'tcx>,\n-) -> &'tcx ty::Const<'tcx>\n+    c: ty::Const<'tcx>,\n+) -> ty::Const<'tcx>\n where\n     V: snapshot_vec::VecLike<unify::Delegate<ty::ConstVid<'tcx>>>,\n     L: UndoLogs<snapshot_vec::UndoLog<unify::Delegate<ty::ConstVid<'tcx>>>>,\n {\n-    if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = c {\n-        match table.probe_value(*vid).val.known() {\n+    if let ty::ConstKind::Infer(InferConst::Var(vid)) = c.val() {\n+        match table.probe_value(vid).val.known() {\n             Some(c) => c,\n             None => c,\n         }"}, {"sha": "e80dfab7c48ec43d8c7699793514867555b3bbc8", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -2185,7 +2185,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     /// [x; 32]\n-    Repeat(Operand<'tcx>, &'tcx ty::Const<'tcx>),\n+    Repeat(Operand<'tcx>, ty::Const<'tcx>),\n \n     /// &x or &mut x\n     Ref(Region<'tcx>, BorrowKind, Place<'tcx>),\n@@ -2335,7 +2335,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n         match *self {\n             Use(ref place) => write!(fmt, \"{:?}\", place),\n-            Repeat(ref a, ref b) => {\n+            Repeat(ref a, b) => {\n                 write!(fmt, \"[{:?}; \", a)?;\n                 pretty_print_const(b, fmt, false)?;\n                 write!(fmt, \"]\")\n@@ -2514,15 +2514,15 @@ pub struct Constant<'tcx> {\n #[derive(Lift)]\n pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n-    Ty(&'tcx ty::Const<'tcx>),\n+    Ty(ty::Const<'tcx>),\n     /// This constant cannot go back into the type system, as it represents\n     /// something the type system cannot handle (e.g. pointers).\n     Val(interpret::ConstValue<'tcx>, Ty<'tcx>),\n }\n \n impl<'tcx> Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n-        match self.literal.const_for_ty()?.val.try_to_scalar() {\n+        match self.literal.const_for_ty()?.val().try_to_scalar() {\n             Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {\n                 GlobalAlloc::Static(def_id) => {\n                     assert!(!tcx.is_thread_local_static(def_id));\n@@ -2539,33 +2539,33 @@ impl<'tcx> Constant<'tcx> {\n     }\n }\n \n-impl<'tcx> From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n+impl<'tcx> From<ty::Const<'tcx>> for ConstantKind<'tcx> {\n     #[inline]\n-    fn from(ct: &'tcx ty::Const<'tcx>) -> Self {\n+    fn from(ct: ty::Const<'tcx>) -> Self {\n         Self::Ty(ct)\n     }\n }\n \n impl<'tcx> ConstantKind<'tcx> {\n     /// Returns `None` if the constant is not trivially safe for use in the type system.\n-    pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {\n+    pub fn const_for_ty(&self) -> Option<ty::Const<'tcx>> {\n         match self {\n-            ConstantKind::Ty(c) => Some(c),\n+            ConstantKind::Ty(c) => Some(*c),\n             ConstantKind::Val(..) => None,\n         }\n     }\n \n     pub fn ty(&self) -> Ty<'tcx> {\n         match self {\n-            ConstantKind::Ty(c) => c.ty,\n+            ConstantKind::Ty(c) => c.ty(),\n             ConstantKind::Val(_, ty) => *ty,\n         }\n     }\n \n     #[inline]\n     pub fn try_to_value(self) -> Option<interpret::ConstValue<'tcx>> {\n         match self {\n-            ConstantKind::Ty(c) => c.val.try_to_value(),\n+            ConstantKind::Ty(c) => c.val().try_to_value(),\n             ConstantKind::Val(val, _) => Some(val),\n         }\n     }\n@@ -2829,7 +2829,7 @@ impl<'tcx> Display for ConstantKind<'tcx> {\n }\n \n fn pretty_print_const<'tcx>(\n-    c: &ty::Const<'tcx>,\n+    c: ty::Const<'tcx>,\n     fmt: &mut Formatter<'_>,\n     print_types: bool,\n ) -> fmt::Result {"}, {"sha": "4f29ef7a6402c862693d19ed7939ccaeb8847a14", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -462,10 +462,11 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n         }\n     }\n \n-    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n+    fn visit_const(&mut self, constant: ty::Const<'tcx>, _: Location) {\n         self.super_const(constant);\n-        let ty::Const { ty, val, .. } = constant;\n-        if use_verbose(*ty, false) {\n+        let ty = constant.ty();\n+        let val = constant.val();\n+        if use_verbose(ty, false) {\n             self.push(\"ty::Const\");\n             self.push(&format!(\"+ ty: {:?}\", ty));\n             let val = match val {\n@@ -683,8 +684,8 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::ConstKind::Value(val) = c.val {\n+        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            if let ty::ConstKind::Value(val) = c.val() {\n                 self.0.extend(alloc_ids_from_const(val));\n             }\n             c.super_visit_with(self)"}, {"sha": "5c616425957df5fef5242920d5327109e76f435b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -387,7 +387,7 @@ pub enum ClosureOutlivesSubject<'tcx> {\n #[derive(Copy, Clone, Debug, HashStable)]\n pub struct DestructuredConst<'tcx> {\n     pub variant: Option<VariantIdx>,\n-    pub fields: &'tcx [&'tcx ty::Const<'tcx>],\n+    pub fields: &'tcx [ty::Const<'tcx>],\n }\n \n /// Coverage information summarized from a MIR if instrumented for source code coverage (see"}, {"sha": "a618800cc1bd2c12a51a8b830f77ad276227f834", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -200,7 +200,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_const(&mut self,\n-                           constant: & $($mutability)? &'tcx ty::Const<'tcx>,\n+                           constant: $(& $mutability)? ty::Const<'tcx>,\n                            _: Location) {\n                 self.super_const(constant);\n             }\n@@ -864,7 +864,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_span(span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantKind::Ty(ct) => self.visit_const(ct, location),\n+                    ConstantKind::Ty(ct) => self.visit_const($(& $mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n@@ -903,7 +903,7 @@ macro_rules! make_mir_visitor {\n             fn super_region(&mut self, _region: $(& $mutability)? ty::Region<'tcx>) {\n             }\n \n-            fn super_const(&mut self, _const: & $($mutability)? &'tcx ty::Const<'tcx>) {\n+            fn super_const(&mut self, _const: $(& $mutability)? ty::Const<'tcx>) {\n             }\n \n             fn super_substs(&mut self, _substs: & $($mutability)? SubstsRef<'tcx>) {"}, {"sha": "77eda70bcd15138d20de582fbbfefc17a2fd5fdb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -113,7 +113,7 @@ rustc_queries! {\n \n     /// Given the def_id of a const-generic parameter, computes the associated default const\n     /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n-    query const_param_default(param: DefId) -> &'tcx ty::Const<'tcx> {\n+    query const_param_default(param: DefId) -> ty::Const<'tcx> {\n         desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n         separate_provide_extern\n     }\n@@ -926,7 +926,7 @@ rustc_queries! {\n     /// Destructure a constant ADT or array into its variant index and its\n     /// field values.\n     query destructure_const(\n-        key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>\n+        key: ty::ParamEnvAnd<'tcx, ty::Const<'tcx>>\n     ) -> mir::DestructuredConst<'tcx> {\n         desc { \"destructure constant\" }\n         remap_env_constness\n@@ -935,8 +935,8 @@ rustc_queries! {\n     /// Dereference a constant reference or raw pointer and turn the result into a constant\n     /// again.\n     query deref_const(\n-        key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>\n-    ) -> &'tcx ty::Const<'tcx> {\n+        key: ty::ParamEnvAnd<'tcx, ty::Const<'tcx>>\n+    ) -> ty::Const<'tcx> {\n         desc { \"deref constant\" }\n         remap_env_constness\n     }\n@@ -947,7 +947,7 @@ rustc_queries! {\n \n     query lit_to_const(\n         key: LitToConstInput<'tcx>\n-    ) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n+    ) -> Result<ty::Const<'tcx>, LitToConstError> {\n         desc { \"converting literal to const\" }\n     }\n "}, {"sha": "40dce281c82bf2460c6885bfadde72160f236a5d", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -368,12 +368,12 @@ pub enum ExprKind<'tcx> {\n     },\n     /// An inline `const` block, e.g. `const {}`.\n     ConstBlock {\n-        value: &'tcx Const<'tcx>,\n+        value: Const<'tcx>,\n     },\n     /// An array literal constructed from one repeated element, e.g. `[1; 5]`.\n     Repeat {\n         value: ExprId,\n-        count: &'tcx Const<'tcx>,\n+        count: Const<'tcx>,\n     },\n     /// An array, e.g. `[a, b, c, d]`.\n     Array {\n@@ -407,7 +407,7 @@ pub enum ExprKind<'tcx> {\n     },\n     /// A literal.\n     Literal {\n-        literal: &'tcx Const<'tcx>,\n+        literal: Const<'tcx>,\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n         /// The `DefId` of the `const` item this literal\n         /// was produced from, if this is not a user-written\n@@ -419,7 +419,7 @@ pub enum ExprKind<'tcx> {\n     /// This is only distinguished from `Literal` so that we can register some\n     /// info for diagnostics.\n     StaticRef {\n-        literal: &'tcx Const<'tcx>,\n+        literal: Const<'tcx>,\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`.\n@@ -501,7 +501,7 @@ pub enum InlineAsmOperand<'tcx> {\n         out_expr: Option<ExprId>,\n     },\n     Const {\n-        value: &'tcx Const<'tcx>,\n+        value: Const<'tcx>,\n         span: Span,\n     },\n     SymFn {\n@@ -640,7 +640,7 @@ pub enum PatKind<'tcx> {\n     /// * Opaque constants, that must not be matched structurally. So anything that does not derive\n     ///   `PartialEq` and `Eq`.\n     Constant {\n-        value: &'tcx ty::Const<'tcx>,\n+        value: ty::Const<'tcx>,\n     },\n \n     Range(PatRange<'tcx>),\n@@ -670,8 +670,8 @@ pub enum PatKind<'tcx> {\n \n #[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n pub struct PatRange<'tcx> {\n-    pub lo: &'tcx ty::Const<'tcx>,\n-    pub hi: &'tcx ty::Const<'tcx>,\n+    pub lo: ty::Const<'tcx>,\n+    pub hi: ty::Const<'tcx>,\n     pub end: RangeEnd,\n }\n "}, {"sha": "e3d004ed133e100e8ada645c6e1a60934a3f6de3", "filename": "compiler/rustc_middle/src/thir/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -22,7 +22,7 @@ pub enum CastKind {\n /// A node of an `AbstractConst`.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n pub enum Node<'tcx> {\n-    Leaf(&'tcx ty::Const<'tcx>),\n+    Leaf(ty::Const<'tcx>),\n     Binop(mir::BinOp, NodeId, NodeId),\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),"}, {"sha": "95489ac3ab2c64c8413680dd4764fa6ef794318e", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -26,7 +26,7 @@ pub trait Visitor<'a, 'tcx: 'a>: Sized {\n         walk_pat(self, pat);\n     }\n \n-    fn visit_const(&mut self, _cnst: &'tcx Const<'tcx>) {}\n+    fn visit_const(&mut self, _cnst: Const<'tcx>) {}\n }\n \n pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Expr<'tcx>) {\n@@ -209,7 +209,7 @@ pub fn walk_pat<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, pat: &Pat<'\n                 visitor.visit_pat(&subpattern.pattern);\n             }\n         }\n-        Constant { value } => visitor.visit_const(value),\n+        Constant { value } => visitor.visit_const(*value),\n         Range(range) => {\n             visitor.visit_const(range.lo);\n             visitor.visit_const(range.hi);"}, {"sha": "738c48dbb5c59c6a336e36a84ddfeea9aaa7c1dc", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -88,21 +88,21 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n         if a == b {\n             return Ok(a);\n         }\n \n-        match (a.val, b.val) {\n+        match (a.val(), b.val()) {\n             (_, ty::ConstKind::Infer(InferConst::Fresh(_))) => {\n                 return Ok(a);\n             }\n \n             (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n-                return Err(TypeError::ConstMismatch(relate::expected_found(self, &a, &b)));\n+                return Err(TypeError::ConstMismatch(relate::expected_found(self, a, b)));\n             }\n \n             _ => {}"}, {"sha": "ecd30ba441ff4c6afd892603087f4039c8ffb2f2", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -144,6 +144,12 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Region<'tcx> {\n     }\n }\n \n+impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Const<'tcx> {\n+    fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n+        self.0.0.encode(e)\n+    }\n+}\n+\n impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for AllocId {\n     fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n         e.encode_alloc_id(self)\n@@ -335,8 +341,8 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>\n     }\n }\n \n-impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::Const<'tcx> {\n-    fn decode(decoder: &mut D) -> &'tcx Self {\n+impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Const<'tcx> {\n+    fn decode(decoder: &mut D) -> Self {\n         decoder.tcx().mk_const(Decodable::decode(decoder))\n     }\n }"}, {"sha": "a794a8c0e0874f3c5c0b4e8b7a340a2509e72782", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -4,10 +4,12 @@ use crate::ty::{\n     self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n     TyCtxt, TypeFoldable,\n };\n+use rustc_data_structures::intern::Interned;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_macros::HashStable;\n+use std::fmt;\n \n mod int;\n mod kind;\n@@ -17,30 +19,50 @@ pub use int::*;\n pub use kind::*;\n pub use valtree::*;\n \n+/// Use this rather than `ConstS`, whenever possible.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+pub struct Const<'tcx>(pub Interned<'tcx, ConstS<'tcx>>);\n+\n+impl<'tcx> fmt::Debug for Const<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // This reflects what `Const` looked liked before `Interned` was\n+        // introduced. We print it like this to avoid having to update expected\n+        // output in a lot of tests.\n+        write!(f, \"Const {{ ty: {:?}, val: {:?} }}\", self.ty(), self.val())\n+    }\n+}\n+\n /// Typed constant value.\n-#[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]\n-#[derive(HashStable)]\n-pub struct Const<'tcx> {\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, TyEncodable, TyDecodable)]\n+pub struct ConstS<'tcx> {\n     pub ty: Ty<'tcx>,\n-\n     pub val: ConstKind<'tcx>,\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(Const<'_>, 48);\n+static_assert_size!(ConstS<'_>, 48);\n \n impl<'tcx> Const<'tcx> {\n+    pub fn ty(self) -> Ty<'tcx> {\n+        self.0.ty\n+    }\n+\n+    pub fn val(self) -> ConstKind<'tcx> {\n+        self.0.val\n+    }\n+\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n-    pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n+    pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Self {\n         Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))\n     }\n \n     #[instrument(skip(tcx), level = \"debug\")]\n     pub fn from_opt_const_arg_anon_const(\n         tcx: TyCtxt<'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n-    ) -> &'tcx Self {\n+    ) -> Self {\n         debug!(\"Const::from_anon_const(def={:?})\", def);\n \n         let body_id = match tcx.hir().get_by_def_id(def.did) {\n@@ -58,7 +80,7 @@ impl<'tcx> Const<'tcx> {\n \n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n-            None => tcx.mk_const(ty::Const {\n+            None => tcx.mk_const(ty::ConstS {\n                 val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n@@ -74,7 +96,7 @@ impl<'tcx> Const<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n-    ) -> Option<&'tcx Self> {\n+    ) -> Option<Self> {\n         // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n         // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n         let expr = match &expr.kind {\n@@ -120,7 +142,7 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                Some(tcx.mk_const(ty::Const {\n+                Some(tcx.mk_const(ty::ConstS {\n                     val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n                     ty,\n                 }))\n@@ -129,7 +151,7 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n+    pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Self {\n         debug!(\"Const::from_inline_const(def_id={:?})\", def_id);\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n@@ -155,7 +177,7 @@ impl<'tcx> Const<'tcx> {\n                 let substs =\n                     InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n                         .substs;\n-                tcx.mk_const(ty::Const {\n+                tcx.mk_const(ty::ConstS {\n                     val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: ty::WithOptConstParam::unknown(def_id).to_global(),\n                         substs,\n@@ -171,19 +193,19 @@ impl<'tcx> Const<'tcx> {\n \n     /// Interns the given value as a constant.\n     #[inline]\n-    pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n-        tcx.mk_const(Self { val: ConstKind::Value(val), ty })\n+    pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> Self {\n+        tcx.mk_const(ConstS { val: ConstKind::Value(val), ty })\n     }\n \n     #[inline]\n     /// Interns the given scalar as a constant.\n-    pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> &'tcx Self {\n+    pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> Self {\n         Self::from_value(tcx, ConstValue::Scalar(val), ty)\n     }\n \n     #[inline]\n     /// Creates a constant with the given integer value and interns it.\n-    pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> &'tcx Self {\n+    pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Self {\n         let size = tcx\n             .layout_of(ty)\n             .unwrap_or_else(|e| panic!(\"could not compute layout for {:?}: {:?}\", ty, e))\n@@ -193,19 +215,19 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     /// Creates an interned zst constant.\n-    pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n+    pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n         Self::from_scalar(tcx, Scalar::ZST, ty)\n     }\n \n     #[inline]\n     /// Creates an interned bool constant.\n-    pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> &'tcx Self {\n+    pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> Self {\n         Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))\n     }\n \n     #[inline]\n     /// Creates an interned usize constant.\n-    pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> &'tcx Self {\n+    pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n \n@@ -214,35 +236,35 @@ impl<'tcx> Const<'tcx> {\n     /// generics (or erroneous code) or if the value can't be represented as bits (e.g. because it\n     /// contains const generic parameters or pointers).\n     pub fn try_eval_bits(\n-        &self,\n+        self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> Option<u128> {\n-        assert_eq!(self.ty, ty);\n+        assert_eq!(self.ty(), ty);\n         let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n         // if `ty` does not depend on generic parameters, use an empty param_env\n-        self.val.eval(tcx, param_env).try_to_bits(size)\n+        self.val().eval(tcx, param_env).try_to_bits(size)\n     }\n \n     #[inline]\n-    pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n-        self.val.eval(tcx, param_env).try_to_bool()\n+    pub fn try_eval_bool(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n+        self.val().eval(tcx, param_env).try_to_bool()\n     }\n \n     #[inline]\n-    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n-        self.val.eval(tcx, param_env).try_to_machine_usize(tcx)\n+    pub fn try_eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n+        self.val().eval(tcx, param_env).try_to_machine_usize(tcx)\n     }\n \n     #[inline]\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n-    pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n-        if let Some(val) = self.val.try_eval(tcx, param_env) {\n+    pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Const<'tcx> {\n+        if let Some(val) = self.val().try_eval(tcx, param_env) {\n             match val {\n-                Ok(val) => Const::from_value(tcx, val, self.ty),\n-                Err(ErrorReported) => tcx.const_error(self.ty),\n+                Ok(val) => Const::from_value(tcx, val, self.ty()),\n+                Err(ErrorReported) => tcx.const_error(self.ty()),\n             }\n         } else {\n             self\n@@ -251,20 +273,20 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid integer of the given type.\n-    pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {\n+    pub fn eval_bits(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {\n         self.try_eval_bits(tcx, param_env, ty)\n             .unwrap_or_else(|| bug!(\"expected bits of {:#?}, got {:#?}\", ty, self))\n     }\n \n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid `usize`.\n-    pub fn eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n+    pub fn eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n         self.try_eval_usize(tcx, param_env)\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n }\n \n-pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Const<'tcx> {\n+pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Const<'tcx> {\n     let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n         hir::Node::GenericParam(hir::GenericParam {\n             kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },"}, {"sha": "41145d250173fe479b3b4afc80071e9d74f21358", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -18,10 +18,10 @@ use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, Substs\n use crate::ty::TyKind::*;\n use crate::ty::{\n     self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n-    ClosureSizeProfileData, Const, ConstVid, DefIdTree, ExistentialPredicate, FloatTy, FloatVar,\n-    FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List, ParamConst,\n-    ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy, Region, RegionKind,\n-    ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n+    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, ExistentialPredicate, FloatTy,\n+    FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List,\n+    ParamConst, ParamTy, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy, Region,\n+    RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n use rustc_attr as attr;\n@@ -111,7 +111,7 @@ pub struct CtxtInterners<'tcx> {\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n-    const_: InternedSet<'tcx, Const<'tcx>>,\n+    const_: InternedSet<'tcx, ConstS<'tcx>>,\n     const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n@@ -229,7 +229,7 @@ pub struct CommonLifetimes<'tcx> {\n }\n \n pub struct CommonConsts<'tcx> {\n-    pub unit: &'tcx Const<'tcx>,\n+    pub unit: Const<'tcx>,\n }\n \n pub struct LocalTableInContext<'a, V> {\n@@ -869,7 +869,7 @@ impl<'tcx> CanonicalUserType<'tcx> {\n                             _ => false,\n                         },\n \n-                        GenericArgKind::Const(ct) => match ct.val {\n+                        GenericArgKind::Const(ct) => match ct.val() {\n                             ty::ConstKind::Bound(debruijn, b) => {\n                                 // We only allow a `ty::INNERMOST` index in substitutions.\n                                 assert_eq!(debruijn, ty::INNERMOST);\n@@ -946,11 +946,14 @@ impl<'tcx> CommonLifetimes<'tcx> {\n \n impl<'tcx> CommonConsts<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {\n-        let mk_const =\n-            |c| interners.const_.intern(c, |c| InternedInSet(interners.arena.alloc(c))).0;\n+        let mk_const = |c| {\n+            Const(Interned::new_unchecked(\n+                interners.const_.intern(c, |c| InternedInSet(interners.arena.alloc(c))).0,\n+            ))\n+        };\n \n         CommonConsts {\n-            unit: mk_const(ty::Const {\n+            unit: mk_const(ty::ConstS {\n                 val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),\n                 ty: types.unit,\n             }),\n@@ -1222,7 +1225,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Like [TyCtxt::ty_error] but for constants.\n     #[track_caller]\n-    pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n+    pub fn const_error(self, ty: Ty<'tcx>) -> Const<'tcx> {\n         self.const_error_with_message(\n             ty,\n             DUMMY_SP,\n@@ -1237,9 +1240,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty: Ty<'tcx>,\n         span: S,\n         msg: &str,\n-    ) -> &'tcx Const<'tcx> {\n+    ) -> Const<'tcx> {\n         self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n+        self.mk_const(ty::ConstS { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n@@ -1685,7 +1688,7 @@ macro_rules! nop_list_lift {\n \n nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n nop_lift! {region; Region<'a> => Region<'tcx>}\n-nop_lift_old! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n+nop_lift! {const_; Const<'a> => Const<'tcx>}\n nop_lift_old! {const_allocation; &'a Allocation => &'tcx Allocation}\n nop_lift! {predicate; Predicate<'a> => Predicate<'tcx>}\n \n@@ -2127,6 +2130,7 @@ macro_rules! direct_interners {\n \n direct_interners! {\n     region: mk_region(RegionKind): Region -> Region<'tcx>,\n+    const_: mk_const(ConstS<'tcx>): Const -> Const<'tcx>,\n }\n \n macro_rules! direct_interners_old {\n@@ -2167,7 +2171,6 @@ macro_rules! direct_interners_old {\n \n // FIXME: eventually these should all be converted to `direct_interners`.\n direct_interners_old! {\n-    const_: mk_const(Const<'tcx>),\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n     adt_def: intern_adt_def(AdtDef),\n@@ -2491,8 +2494,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n-        self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })\n+    pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const(ty::ConstS { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })\n     }\n \n     #[inline]\n@@ -2511,8 +2514,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })\n+    pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n+        self.mk_const(ty::ConstS { val: ty::ConstKind::Infer(ic), ty })\n     }\n \n     #[inline]\n@@ -2521,8 +2524,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n-        self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })\n+    pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const(ty::ConstS { val: ty::ConstKind::Param(ParamConst { index, name }), ty })\n     }\n \n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {"}, {"sha": "64b2edd2c3f392edf5e0d7af6b65b2404155e81f", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> Ty<'tcx> {\n         fn generic_arg_is_suggestible(arg: GenericArg<'_>) -> bool {\n             match arg.unpack() {\n                 GenericArgKind::Type(ty) => ty.is_suggestable(),\n-                GenericArgKind::Const(c) => const_is_suggestable(c.val),\n+                GenericArgKind::Const(c) => const_is_suggestable(c.val()),\n                 _ => true,\n             }\n         }\n@@ -110,7 +110,7 @@ impl<'tcx> Ty<'tcx> {\n                 }) => {\n                     let term_is_suggestable = match term {\n                         Term::Ty(ty) => ty.is_suggestable(),\n-                        Term::Const(c) => const_is_suggestable(c.val),\n+                        Term::Const(c) => const_is_suggestable(c.val()),\n                     };\n                     term_is_suggestable && substs.iter().all(generic_arg_is_suggestible)\n                 }\n@@ -120,7 +120,7 @@ impl<'tcx> Ty<'tcx> {\n                 args.iter().all(generic_arg_is_suggestible)\n             }\n             Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(),\n-            Array(ty, c) => ty.is_suggestable() && const_is_suggestable(c.val),\n+            Array(ty, c) => ty.is_suggestable() && const_is_suggestable(c.val()),\n             _ => true,\n         }\n     }"}, {"sha": "2ccfeba2b665d13a64ae5135ff52fe36907aa569", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -60,13 +60,13 @@ pub enum TypeError<'tcx> {\n     /// created a cycle (because it appears somewhere within that\n     /// type).\n     CyclicTy(Ty<'tcx>),\n-    CyclicConst(&'tcx ty::Const<'tcx>),\n+    CyclicConst(ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ExistentialMismatch(\n         ExpectedFound<&'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>>,\n     ),\n     ObjectUnsafeCoercion(DefId),\n-    ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n+    ConstMismatch(ExpectedFound<ty::Const<'tcx>>),\n \n     IntrinsicCast,\n     /// Safe `#[target_feature]` functions are not assignable to safe function pointers.\n@@ -255,7 +255,7 @@ impl<'tcx> Ty<'tcx> {\n                 }\n \n                 let n = tcx.lift(n).unwrap();\n-                if let ty::ConstKind::Value(v) = n.val {\n+                if let ty::ConstKind::Value(v) = n.val() {\n                     if let Some(n) = v.try_to_machine_usize(tcx) {\n                         return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n                     }"}, {"sha": "948a48c082644b2deabc5732240e836df35c259c", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -28,7 +28,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_const(c: &ty::Const<'_>) -> TypeFlags {\n+    pub fn for_const(c: ty::Const<'_>) -> TypeFlags {\n         let mut result = FlagComputation::new();\n         result.add_const(c);\n         result.flags\n@@ -286,9 +286,9 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_const(&mut self, c: &ty::Const<'_>) {\n-        self.add_ty(c.ty);\n-        match c.val {\n+    fn add_const(&mut self, c: ty::Const<'_>) {\n+        self.add_ty(c.ty());\n+        match c.val() {\n             ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);"}, {"sha": "b3006672e222017a591df2a3238a4f5450df0eb9", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -216,7 +216,7 @@ pub trait TypeFolder<'tcx>: Sized {\n         r.super_fold_with(self)\n     }\n \n-    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>\n+    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx>\n     where\n         Self: TypeFolder<'tcx, Error = !>,\n     {\n@@ -263,10 +263,7 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n         r.try_super_fold_with(self)\n     }\n \n-    fn try_fold_const(\n-        &mut self,\n-        c: &'tcx ty::Const<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n         c.try_super_fold_with(self)\n     }\n \n@@ -306,10 +303,7 @@ where\n         Ok(self.fold_region(r))\n     }\n \n-    fn try_fold_const(\n-        &mut self,\n-        c: &'tcx ty::Const<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n         Ok(self.fold_const(c))\n     }\n \n@@ -346,7 +340,7 @@ pub trait TypeVisitor<'tcx>: Sized {\n         r.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         c.super_visit_with(self)\n     }\n \n@@ -366,7 +360,7 @@ pub struct BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n-    H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,\n+    H: FnMut(ty::Const<'tcx>) -> ty::Const<'tcx>,\n {\n     pub tcx: TyCtxt<'tcx>,\n     pub ty_op: F,\n@@ -378,7 +372,7 @@ impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n-    H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,\n+    H: FnMut(ty::Const<'tcx>) -> ty::Const<'tcx>,\n {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n@@ -394,7 +388,7 @@ where\n         (self.lt_op)(r)\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         let ct = ct.super_fold_with(self);\n         (self.ct_op)(ct)\n     }\n@@ -593,15 +587,15 @@ struct BoundVarReplacer<'a, 'tcx> {\n \n     fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,\n     fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,\n-    fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,\n+    fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx> + 'a)>,\n }\n \n impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n         fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,\n         fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,\n-        fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,\n+        fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx> + 'a)>,\n     ) -> Self {\n         BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }\n     }\n@@ -660,14 +654,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n         r\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        match *ct {\n-            ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }\n-                if debruijn == self.current_index =>\n-            {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        match ct.val() {\n+            ty::ConstKind::Bound(debruijn, bound_const) if debruijn == self.current_index => {\n                 if let Some(fld_c) = self.fld_c.as_mut() {\n-                    let ct = fld_c(bound_const, ty);\n-                    return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());\n+                    let ct = fld_c(bound_const, ct.ty());\n+                    return ty::fold::shift_vars(self.tcx, ct, self.current_index.as_u32());\n                 }\n             }\n             _ if ct.has_vars_bound_at_or_above(self.current_index) => {\n@@ -726,7 +718,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n         G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n-        H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,\n+        H: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n         if !value.has_escaping_bound_vars() {\n@@ -751,7 +743,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n         G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n-        H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,\n+        H: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n         let mut region_map = BTreeMap::new();\n@@ -804,7 +796,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 ))\n             },\n             |c, ty| {\n-                self.mk_const(ty::Const {\n+                self.mk_const(ty::ConstS {\n                     val: ty::ConstKind::Bound(\n                         ty::INNERMOST,\n                         ty::BoundVar::from_usize(c.as_usize() + bound_vars),\n@@ -1057,13 +1049,16 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Bound(debruijn, bound_ct) = ct.val() {\n             if self.amount == 0 || debruijn < self.current_index {\n                 ct\n             } else {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_const(ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty })\n+                self.tcx.mk_const(ty::ConstS {\n+                    val: ty::ConstKind::Bound(debruijn, bound_ct),\n+                    ty: ct.ty(),\n+                })\n             }\n         } else {\n             ct.super_fold_with(self)\n@@ -1165,13 +1160,13 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // we don't have a `visit_infer_const` callback, so we have to\n         // hook in here to catch this case (annoying...), but\n         // otherwise we do want to remember to visit the rest of the\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n-        match ct.val {\n+        match ct.val() {\n             ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n                 ControlFlow::Break(FoundEscapingVars)\n             }\n@@ -1236,7 +1231,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n \n     #[inline]\n     #[instrument(level = \"trace\")]\n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         trace!(r.flags=?flags);\n         if flags.intersects(self.flags) {\n@@ -1325,12 +1320,12 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs of an unevaluated const, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            if let ty::ConstKind::Unevaluated(..) = c.val {\n+            if let ty::ConstKind::Unevaluated(..) = c.val() {\n                 return ControlFlow::CONTINUE;\n             }\n         }"}, {"sha": "f0b7f2a653f45e761b1e7cca71c1af64d99f0139", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -59,7 +59,9 @@ pub use self::closure::{\n     RootVariableMinCaptureList, UpvarCapture, UpvarCaptureMap, UpvarId, UpvarListMap, UpvarPath,\n     CAPTURE_STRUCT_LOCAL,\n };\n-pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, Unevaluated, ValTree};\n+pub use self::consts::{\n+    Const, ConstInt, ConstKind, ConstS, InferConst, ScalarInt, Unevaluated, ValTree,\n+};\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,\n@@ -592,7 +594,7 @@ pub enum PredicateKind<'tcx> {\n     ConstEvaluatable(ty::Unevaluated<'tcx, ()>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n-    ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n+    ConstEquate(Const<'tcx>, Const<'tcx>),\n \n     /// Represents a type found in the environment that we can use for implied bounds.\n     ///\n@@ -818,7 +820,7 @@ pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n #[derive(HashStable, TypeFoldable)]\n pub enum Term<'tcx> {\n     Ty(Ty<'tcx>),\n-    Const(&'tcx Const<'tcx>),\n+    Const(Const<'tcx>),\n }\n \n impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {\n@@ -827,8 +829,8 @@ impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {\n-    fn from(c: &'tcx Const<'tcx>) -> Self {\n+impl<'tcx> From<Const<'tcx>> for Term<'tcx> {\n+    fn from(c: Const<'tcx>) -> Self {\n         Term::Const(c)\n     }\n }\n@@ -837,8 +839,8 @@ impl<'tcx> Term<'tcx> {\n     pub fn ty(&self) -> Option<Ty<'tcx>> {\n         if let Term::Ty(ty) = self { Some(*ty) } else { None }\n     }\n-    pub fn ct(&self) -> Option<&'tcx Const<'tcx>> {\n-        if let Term::Const(c) = self { Some(c) } else { None }\n+    pub fn ct(&self) -> Option<Const<'tcx>> {\n+        if let Term::Const(c) = self { Some(*c) } else { None }\n     }\n }\n "}, {"sha": "808be446b2af66920b70c439e15329ad18549863", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n         self.normalize_generic_arg_after_erasing_regions(ty.into()).expect_ty()\n     }\n \n-    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         self.normalize_generic_arg_after_erasing_regions(c.into()).expect_const()\n     }\n \n@@ -244,13 +244,10 @@ impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'t\n         }\n     }\n \n-    fn try_fold_const(\n-        &mut self,\n-        c: &'tcx ty::Const<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(c.into()) {\n             Ok(t) => Ok(t.expect_const()),\n-            Err(_) => Err(NormalizationError::Const(*c)),\n+            Err(_) => Err(NormalizationError::Const(c)),\n         }\n     }\n "}, {"sha": "086bb950f1a87406448e0ceb74ea9c8dc5e6d6a7", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -66,7 +66,7 @@ pub trait Printer<'tcx>: Sized {\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error>;\n \n-    fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error>;\n+    fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error>;\n \n     fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error>;\n \n@@ -352,10 +352,10 @@ impl<'tcx, P: Printer<'tcx>> Print<'tcx, P>\n     }\n }\n \n-impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for &'tcx ty::Const<'tcx> {\n+impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::Const<'tcx> {\n     type Output = P::Const;\n     type Error = P::Error;\n     fn print(&self, cx: P) -> Result<Self::Output, Self::Error> {\n-        cx.print_const(self)\n+        cx.print_const(*self)\n     }\n }"}, {"sha": "893df1a009cfc26efc48ba94f22f8b1ffb6d9b67", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -754,14 +754,14 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(\"[\", print(ty), \"; \");\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n-                } else if let ty::ConstKind::Unevaluated(..) = sz.val {\n+                } else if let ty::ConstKind::Unevaluated(..) = sz.val() {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n                     p!(\"_\");\n-                } else if let Some(n) = sz.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n+                } else if let Some(n) = sz.val().try_to_bits(self.tcx().data_layout.pointer_size) {\n                     p!(write(\"{}\", n));\n-                } else if let ty::ConstKind::Param(param) = sz.val {\n+                } else if let ty::ConstKind::Param(param) = sz.val() {\n                     p!(write(\"{}\", param));\n                 } else {\n                     p!(\"_\");\n@@ -1148,13 +1148,13 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn pretty_print_const(\n         mut self,\n-        ct: &'tcx ty::Const<'tcx>,\n+        ct: ty::Const<'tcx>,\n         print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n-            p!(write(\"Const({:?}: {:?})\", ct.val, ct.ty));\n+            p!(write(\"Const({:?}: {:?})\", ct.val(), ct.ty()));\n             return Ok(self);\n         }\n \n@@ -1166,7 +1166,7 @@ pub trait PrettyPrinter<'tcx>:\n                             write!(this, \"_\")?;\n                             Ok(this)\n                         },\n-                        |this| this.print_type(ct.ty),\n+                        |this| this.print_type(ct.ty()),\n                         \": \",\n                     )?;\n                 } else {\n@@ -1175,7 +1175,7 @@ pub trait PrettyPrinter<'tcx>:\n             }};\n         }\n \n-        match ct.val {\n+        match ct.val() {\n             ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def,\n                 substs,\n@@ -1206,7 +1206,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::ConstKind::Infer(..) => print_underscore!(),\n             ty::ConstKind::Param(ParamConst { name, .. }) => p!(write(\"{}\", name)),\n             ty::ConstKind::Value(value) => {\n-                return self.pretty_print_const_value(value, ct.ty, print_ty);\n+                return self.pretty_print_const_value(value, ct.ty(), print_ty);\n             }\n \n             ty::ConstKind::Bound(debruijn, bound_var) => {\n@@ -1248,10 +1248,13 @@ pub trait PrettyPrinter<'tcx>:\n                         kind:\n                             ty::Array(\n                                 Ty(Interned(ty::TyS { kind: ty::Uint(ty::UintTy::U8), .. }, _)),\n-                                ty::Const {\n-                                    val: ty::ConstKind::Value(ConstValue::Scalar(int)),\n-                                    ..\n-                                },\n+                                ty::Const(Interned(\n+                                    ty::ConstS {\n+                                        val: ty::ConstKind::Value(ConstValue::Scalar(int)),\n+                                        ..\n+                                    },\n+                                    _,\n+                                )),\n                             ),\n                         ..\n                     },\n@@ -1435,7 +1438,7 @@ pub trait PrettyPrinter<'tcx>:\n                 Ok(self)\n             }\n             (ConstValue::ByRef { alloc, offset }, ty::Array(t, n)) if *t == u8_type => {\n-                let n = n.val.try_to_bits(self.tcx().data_layout.pointer_size).unwrap();\n+                let n = n.val().try_to_bits(self.tcx().data_layout.pointer_size).unwrap();\n                 // cast is ok because we already checked for pointer size (32 or 64 bit) above\n                 let range = AllocRange { start: offset, size: Size::from_bytes(n) };\n \n@@ -1456,10 +1459,10 @@ pub trait PrettyPrinter<'tcx>:\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values.\n             (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n-                let contents = self.tcx().destructure_const(\n-                    ty::ParamEnv::reveal_all()\n-                        .and(self.tcx().mk_const(ty::Const { val: ty::ConstKind::Value(ct), ty })),\n-                );\n+                let contents =\n+                    self.tcx().destructure_const(ty::ParamEnv::reveal_all().and(\n+                        self.tcx().mk_const(ty::ConstS { val: ty::ConstKind::Value(ct), ty }),\n+                    ));\n                 let fields = contents.fields.iter().copied();\n \n                 match *ty.kind() {\n@@ -1717,7 +1720,7 @@ impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self.pretty_print_dyn_existential(predicates)\n     }\n \n-    fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+    fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         self.pretty_print_const(ct, true)\n     }\n \n@@ -2454,7 +2457,7 @@ impl<'tcx> ty::PolyTraitPredicate<'tcx> {\n forward_display_to_print! {\n     Ty<'tcx>,\n     &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n-    &'tcx ty::Const<'tcx>,\n+    ty::Const<'tcx>,\n \n     // HACK(eddyb) these are exhaustive instead of generic,\n     // because `for<'tcx>` isn't possible yet."}, {"sha": "b59fb6afe6fe70eb23cc43729993ce8c28915a41", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -89,9 +89,9 @@ pub trait TypeRelation<'tcx>: Sized {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>;\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>>;\n \n     fn binders<T>(\n         &mut self,\n@@ -545,31 +545,31 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n /// it.\n pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n-    a: &'tcx ty::Const<'tcx>,\n-    b: &'tcx ty::Const<'tcx>,\n-) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    a: ty::Const<'tcx>,\n+    b: ty::Const<'tcx>,\n+) -> RelateResult<'tcx, ty::Const<'tcx>> {\n     debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n     // FIXME(oli-obk): once const generics can have generic types, this assertion\n     // will likely get triggered. Move to `normalize_erasing_regions` at that point.\n-    let a_ty = tcx.erase_regions(a.ty);\n-    let b_ty = tcx.erase_regions(b.ty);\n+    let a_ty = tcx.erase_regions(a.ty());\n+    let b_ty = tcx.erase_regions(b.ty());\n     if a_ty != b_ty {\n         relation.tcx().sess.delay_span_bug(\n             DUMMY_SP,\n             &format!(\"cannot relate constants of different types: {} != {}\", a_ty, b_ty),\n         );\n     }\n \n-    let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n+    let eagerly_eval = |x: ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n     let a = eagerly_eval(a);\n     let b = eagerly_eval(b);\n \n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n-    let is_match = match (a.val, b.val) {\n+    let is_match = match (a.val(), b.val()) {\n         (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n@@ -602,13 +602,13 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 au.substs,\n                 bu.substs,\n             )?;\n-            return Ok(tcx.mk_const(ty::Const {\n+            return Ok(tcx.mk_const(ty::ConstS {\n                 val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: au.def,\n                     substs,\n                     promoted: au.promoted,\n                 }),\n-                ty: a.ty,\n+                ty: a.ty(),\n             }));\n         }\n         _ => false,\n@@ -621,8 +621,8 @@ fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(\n     a_val: ConstValue<'tcx>,\n     b_val: ConstValue<'tcx>,\n     // FIXME(oli-obk): these arguments should go away with valtrees\n-    a: &'tcx ty::Const<'tcx>,\n-    b: &'tcx ty::Const<'tcx>,\n+    a: ty::Const<'tcx>,\n+    b: ty::Const<'tcx>,\n     // FIXME(oli-obk): this should just be `bool` with valtrees\n ) -> RelateResult<'tcx, bool> {\n     let tcx = relation.tcx();\n@@ -648,9 +648,9 @@ fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(\n         }\n \n         (ConstValue::ByRef { alloc: alloc_a, .. }, ConstValue::ByRef { alloc: alloc_b, .. })\n-            if a.ty.is_ref() || b.ty.is_ref() =>\n+            if a.ty().is_ref() || b.ty().is_ref() =>\n         {\n-            if a.ty.is_ref() && b.ty.is_ref() {\n+            if a.ty().is_ref() && b.ty().is_ref() {\n                 alloc_a == alloc_b\n             } else {\n                 false\n@@ -663,7 +663,7 @@ fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(\n             // Both the variant and each field have to be equal.\n             if a_destructured.variant == b_destructured.variant {\n                 for (a_field, b_field) in iter::zip(a_destructured.fields, b_destructured.fields) {\n-                    relation.consts(a_field, b_field)?;\n+                    relation.consts(*a_field, *b_field)?;\n                 }\n \n                 true\n@@ -756,12 +756,12 @@ impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {\n+impl<'tcx> Relate<'tcx> for ty::Const<'tcx> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         relation.consts(a, b)\n     }\n }"}, {"sha": "c1d714ed8d65e8db7c6f536dcdc5223b8cd32040", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -1159,15 +1159,15 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        let ty = self.ty.try_fold_with(folder)?;\n-        let val = self.val.try_fold_with(folder)?;\n-        if ty != self.ty || val != self.val {\n-            Ok(folder.tcx().mk_const(ty::Const { ty, val }))\n+        let ty = self.ty().try_fold_with(folder)?;\n+        let val = self.val().try_fold_with(folder)?;\n+        if ty != self.ty() || val != self.val() {\n+            Ok(folder.tcx().mk_const(ty::ConstS { ty, val }))\n         } else {\n             Ok(self)\n         }\n@@ -1178,12 +1178,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.ty.visit_with(visitor)?;\n-        self.val.visit_with(visitor)\n+        self.ty().visit_with(visitor)?;\n+        self.val().visit_with(visitor)\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_const(self)\n+        visitor.visit_const(*self)\n     }\n }\n "}, {"sha": "9835211a74865f6733e63645f9c28c6335cc476e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -116,7 +116,7 @@ pub enum TyKind<'tcx> {\n     Str,\n \n     /// An array with the given length. Written as `[T; N]`.\n-    Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n+    Array(Ty<'tcx>, ty::Const<'tcx>),\n \n     /// The pointee of an array slice. Written as `[T]`.\n     Slice(Ty<'tcx>),"}, {"sha": "151dbcea6b524d4d1b25c1f774cd512f53a4e70a", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -32,7 +32,7 @@ use std::ops::ControlFlow;\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct GenericArg<'tcx> {\n     ptr: NonZeroUsize,\n-    marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,\n+    marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, ty::Const<'tcx>)>,\n }\n \n const TAG_MASK: usize = 0b11;\n@@ -44,7 +44,7 @@ const CONST_TAG: usize = 0b10;\n pub enum GenericArgKind<'tcx> {\n     Lifetime(ty::Region<'tcx>),\n     Type(Ty<'tcx>),\n-    Const(&'tcx ty::Const<'tcx>),\n+    Const(ty::Const<'tcx>),\n }\n \n impl<'tcx> GenericArgKind<'tcx> {\n@@ -62,8 +62,8 @@ impl<'tcx> GenericArgKind<'tcx> {\n             }\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n-                assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);\n-                (CONST_TAG, ct as *const ty::Const<'tcx> as usize)\n+                assert_eq!(mem::align_of_val(ct.0.0) & TAG_MASK, 0);\n+                (CONST_TAG, ct.0.0 as *const ty::ConstS<'tcx> as usize)\n             }\n         };\n \n@@ -105,8 +105,8 @@ impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {\n     }\n }\n \n-impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {\n-    fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {\n+impl<'tcx> From<ty::Const<'tcx>> for GenericArg<'tcx> {\n+    fn from(c: ty::Const<'tcx>) -> GenericArg<'tcx> {\n         GenericArgKind::Const(c).pack()\n     }\n }\n@@ -126,7 +126,9 @@ impl<'tcx> GenericArg<'tcx> {\n                 TYPE_TAG => GenericArgKind::Type(Ty(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::TyS<'tcx>),\n                 ))),\n-                CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const ty::Const<'tcx>)),\n+                CONST_TAG => GenericArgKind::Const(ty::Const(Interned::new_unchecked(\n+                    &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),\n+                ))),\n                 _ => intrinsics::unreachable(),\n             }\n         }\n@@ -143,7 +145,7 @@ impl<'tcx> GenericArg<'tcx> {\n     }\n \n     /// Unpack the `GenericArg` as a const when it is known certainly to be a const.\n-    pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {\n+    pub fn expect_const(self) -> ty::Const<'tcx> {\n         match self.unpack() {\n             GenericArgKind::Const(c) => c,\n             _ => bug!(\"expected a const, but found another kind\"),\n@@ -300,7 +302,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n-    pub fn consts(&'a self) -> impl DoubleEndedIterator<Item = &'tcx ty::Const<'tcx>> + 'a {\n+    pub fn consts(&'a self) -> impl DoubleEndedIterator<Item = ty::Const<'tcx>> + 'a {\n         self.iter().filter_map(|k| {\n             if let GenericArgKind::Const(ct) = k.unpack() { Some(ct) } else { None }\n         })\n@@ -335,7 +337,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n-    pub fn const_at(&self, i: usize) -> &'tcx ty::Const<'tcx> {\n+    pub fn const_at(&self, i: usize) -> ty::Const<'tcx> {\n         if let GenericArgKind::Const(ct) = self[i].unpack() {\n             ct\n         } else {\n@@ -514,8 +516,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::ConstKind::Param(p) = c.val {\n+    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Param(p) = c.val() {\n             self.const_for_param(p, c)\n         } else {\n             c.super_fold_with(self)\n@@ -564,11 +566,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n         self.shift_vars_through_binders(ty)\n     }\n \n-    fn const_for_param(\n-        &self,\n-        p: ParamConst,\n-        source_ct: &'tcx ty::Const<'tcx>,\n-    ) -> &'tcx ty::Const<'tcx> {\n+    fn const_for_param(&self, p: ParamConst, source_ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         // Look up the const in the substitutions. It really should be in there.\n         let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());\n         let ct = match opt_ct {"}, {"sha": "c2a4cea2b1ae66f09c132941ce0891e39f29a9f3", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -6,7 +6,8 @@ use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::{\n-    self, DebruijnIndex, DefIdTree, List, ReEarlyBound, Region, Ty, TyCtxt, TyKind::*, TypeFoldable,\n+    self, Const, DebruijnIndex, DefIdTree, List, ReEarlyBound, Region, Ty, TyCtxt, TyKind::*,\n+    TypeFoldable,\n };\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n@@ -398,9 +399,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                         ty::TyS { kind: ty::Param(ref pt), .. },\n                         _,\n                     ))) => !impl_generics.type_param(pt, self).pure_wrt_drop,\n-                    GenericArgKind::Const(&ty::Const {\n-                        val: ty::ConstKind::Param(ref pc), ..\n-                    }) => !impl_generics.const_param(pc, self).pure_wrt_drop,\n+                    GenericArgKind::Const(Const(Interned(\n+                        ty::ConstS { val: ty::ConstKind::Param(ref pc), .. },\n+                        _,\n+                    ))) => !impl_generics.const_param(pc, self).pure_wrt_drop,\n                     GenericArgKind::Lifetime(_)\n                     | GenericArgKind::Type(_)\n                     | GenericArgKind::Const(_) => {\n@@ -622,7 +624,7 @@ impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n impl<'tcx> Ty<'tcx> {\n     /// Returns the maximum value for the given numeric type (including `char`s)\n     /// or returns `None` if the type is not numeric.\n-    pub fn numeric_max_val(self, tcx: TyCtxt<'tcx>) -> Option<&'tcx ty::Const<'tcx>> {\n+    pub fn numeric_max_val(self, tcx: TyCtxt<'tcx>) -> Option<Const<'tcx>> {\n         let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n@@ -637,12 +639,12 @@ impl<'tcx> Ty<'tcx> {\n             }),\n             _ => None,\n         };\n-        val.map(|v| ty::Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n+        val.map(|v| Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n     }\n \n     /// Returns the minimum value for the given numeric type (including `char`s)\n     /// or returns `None` if the type is not numeric.\n-    pub fn numeric_min_val(self, tcx: TyCtxt<'tcx>) -> Option<&'tcx ty::Const<'tcx>> {\n+    pub fn numeric_min_val(self, tcx: TyCtxt<'tcx>) -> Option<Const<'tcx>> {\n         let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n@@ -656,7 +658,7 @@ impl<'tcx> Ty<'tcx> {\n             }),\n             _ => None,\n         };\n-        val.map(|v| ty::Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n+        val.map(|v| Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n     }\n \n     /// Checks whether values of this type `T` are *moved* or *copied*\n@@ -996,7 +998,7 @@ pub fn needs_drop_components<'tcx>(\n         ty::Array(elem_ty, size) => {\n             match needs_drop_components(*elem_ty, target_layout) {\n                 Ok(v) if v.is_empty() => Ok(v),\n-                res => match size.val.try_to_bits(target_layout.pointer_size) {\n+                res => match size.val().try_to_bits(target_layout.pointer_size) {\n                     // Arrays of size zero don't need drop, even if their element\n                     // type does.\n                     Some(0) => Ok(SmallVec::new()),"}, {"sha": "ab70c15160ca6e09749f3aab0dfe5e8e6fdfd50e", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -189,8 +189,8 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n         },\n         GenericArgKind::Lifetime(_) => {}\n         GenericArgKind::Const(parent_ct) => {\n-            stack.push(parent_ct.ty.into());\n-            match parent_ct.val {\n+            stack.push(parent_ct.ty().into());\n+            match parent_ct.val() {\n                 ty::ConstKind::Infer(_)\n                 | ty::ConstKind::Param(_)\n                 | ty::ConstKind::Placeholder(_)"}, {"sha": "79ac09d523d079f55b7f5b4c6429a2b6d463d334", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n-                assert_eq!(literal.ty, ty);\n+                assert_eq!(literal.ty(), ty);\n                 Constant { span, user_ty, literal: literal.into() }\n             }\n             ExprKind::StaticRef { literal, .. } => {"}, {"sha": "ec8cb30965d75467d0a6a1e2a26f19361ef61c25", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -964,13 +964,13 @@ enum TestKind<'tcx> {\n         ///\n         /// For `bool` we always generate two edges, one for `true` and one for\n         /// `false`.\n-        options: FxIndexMap<&'tcx ty::Const<'tcx>, u128>,\n+        options: FxIndexMap<ty::Const<'tcx>, u128>,\n     },\n \n     /// Test for equality with value, possibly after an unsizing coercion to\n     /// `ty`,\n     Eq {\n-        value: &'tcx ty::Const<'tcx>,\n+        value: ty::Const<'tcx>,\n         // Integer types are handled by `SwitchInt`, and constants with ADT\n         // types are converted back into patterns, so this can only be `&str`,\n         // `&[T]`, `f32` or `f64`."}, {"sha": "4f9a2c0ce779da4e53ea14d374ce0692ffa4e339", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatKind::Range(PatRange { lo, hi, end }) => {\n-                let (range, bias) = match *lo.ty.kind() {\n+                let (range, bias) = match *lo.ty().kind() {\n                     ty::Char => {\n                         (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)\n                     }\n@@ -228,7 +228,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     _ => (None, 0),\n                 };\n                 if let Some((min, max, sz)) = range {\n-                    if let (Some(lo), Some(hi)) = (lo.val.try_to_bits(sz), hi.val.try_to_bits(sz)) {\n+                    if let (Some(lo), Some(hi)) =\n+                        (lo.val().try_to_bits(sz), hi.val().try_to_bits(sz))\n+                    {\n                         // We want to compare ranges numerically, but the order of the bitwise\n                         // representation of signed integers does not match their numeric order.\n                         // Thus, to correct the ordering, we need to shift the range of signed"}, {"sha": "ce848773b10cc6c1fb965ed8afa626ea13d0016e", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -59,8 +59,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             },\n \n             PatKind::Range(range) => {\n-                assert_eq!(range.lo.ty, match_pair.pattern.ty);\n-                assert_eq!(range.hi.ty, match_pair.pattern.ty);\n+                assert_eq!(range.lo.ty(), match_pair.pattern.ty);\n+                assert_eq!(range.hi.ty(), match_pair.pattern.ty);\n                 Test { span: match_pair.pattern.span, kind: TestKind::Range(range) }\n             }\n \n@@ -86,7 +86,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         test_place: &PlaceBuilder<'tcx>,\n         candidate: &Candidate<'pat, 'tcx>,\n         switch_ty: Ty<'tcx>,\n-        options: &mut FxIndexMap<&'tcx ty::Const<'tcx>, u128>,\n+        options: &mut FxIndexMap<ty::Const<'tcx>, u128>,\n     ) -> bool {\n         let Some(match_pair) = candidate.match_pairs.iter().find(|mp| mp.place == *test_place) else {\n             return false;\n@@ -266,7 +266,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         ty,\n                     );\n                 } else if let [success, fail] = *make_target_blocks(self) {\n-                    assert_eq!(value.ty, ty);\n+                    assert_eq!(value.ty(), ty);\n                     let expect = self.literal_operand(test.span, value);\n                     let val = Operand::Copy(place);\n                     self.compare(block, success, fail, source_info, BinOp::Eq, expect, val);\n@@ -275,7 +275,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n-            TestKind::Range(PatRange { ref lo, ref hi, ref end }) => {\n+            TestKind::Range(PatRange { lo, hi, ref end }) => {\n                 let lower_bound_success = self.cfg.start_new_block();\n                 let target_blocks = make_target_blocks(self);\n \n@@ -369,7 +369,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         block: BasicBlock,\n         make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,\n         source_info: SourceInfo,\n-        value: &'tcx ty::Const<'tcx>,\n+        value: ty::Const<'tcx>,\n         place: Place<'tcx>,\n         mut ty: Ty<'tcx>,\n     ) {\n@@ -390,7 +390,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             _ => None,\n         };\n         let opt_ref_ty = unsize(ty);\n-        let opt_ref_test_ty = unsize(value.ty);\n+        let opt_ref_test_ty = unsize(value.ty());\n         match (opt_ref_ty, opt_ref_test_ty) {\n             // nothing to do, neither is an array\n             (None, None) => {}\n@@ -646,7 +646,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let tcx = self.tcx;\n \n-                    let test_ty = test.lo.ty;\n+                    let test_ty = test.lo.ty();\n                     let lo = compare_const_vals(tcx, test.lo, pat.hi, self.param_env, test_ty)?;\n                     let hi = compare_const_vals(tcx, test.hi, pat.lo, self.param_env, test_ty)?;\n \n@@ -764,17 +764,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         span_bug!(match_pair.pattern.span, \"simplifyable pattern found: {:?}\", match_pair.pattern)\n     }\n \n-    fn const_range_contains(\n-        &self,\n-        range: PatRange<'tcx>,\n-        value: &'tcx ty::Const<'tcx>,\n-    ) -> Option<bool> {\n+    fn const_range_contains(&self, range: PatRange<'tcx>, value: ty::Const<'tcx>) -> Option<bool> {\n         use std::cmp::Ordering::*;\n \n         let tcx = self.tcx;\n \n-        let a = compare_const_vals(tcx, range.lo, value, self.param_env, range.lo.ty)?;\n-        let b = compare_const_vals(tcx, value, range.hi, self.param_env, range.lo.ty)?;\n+        let a = compare_const_vals(tcx, range.lo, value, self.param_env, range.lo.ty())?;\n+        let b = compare_const_vals(tcx, value, range.hi, self.param_env, range.lo.ty())?;\n \n         match (b, range.end) {\n             (Less, _) | (Equal, RangeEnd::Included) if a != Greater => Some(true),\n@@ -785,7 +781,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn values_not_contained_in_range(\n         &self,\n         range: PatRange<'tcx>,\n-        options: &FxIndexMap<&'tcx ty::Const<'tcx>, u128>,\n+        options: &FxIndexMap<ty::Const<'tcx>, u128>,\n     ) -> Option<bool> {\n         for &val in options.keys() {\n             if self.const_range_contains(range, val)? {\n@@ -831,7 +827,7 @@ fn trait_method<'tcx>(\n     method_name: Symbol,\n     self_ty: Ty<'tcx>,\n     params: &[GenericArg<'tcx>],\n-) -> &'tcx ty::Const<'tcx> {\n+) -> ty::Const<'tcx> {\n     let substs = tcx.mk_substs_trait(self_ty, params);\n \n     // The unhygienic comparison here is acceptable because this is only"}, {"sha": "fd5914460140a84044acf8c62b889c51d56a0f07", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -25,11 +25,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     /// Convenience function for creating a literal operand, one\n     /// without any user type annotation.\n-    crate fn literal_operand(\n-        &mut self,\n-        span: Span,\n-        literal: &'tcx ty::Const<'tcx>,\n-    ) -> Operand<'tcx> {\n+    crate fn literal_operand(&mut self, span: Span, literal: ty::Const<'tcx>) -> Operand<'tcx> {\n         let literal = literal.into();\n         let constant = Box::new(Constant { span, user_ty: None, literal });\n         Operand::Constant(constant)"}, {"sha": "ec2ff3c37ab73526d852ae95dd6e627ec0af8508", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -10,7 +10,7 @@ use rustc_target::abi::Size;\n crate fn lit_to_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     lit_input: LitToConstInput<'tcx>,\n-) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n+) -> Result<ty::Const<'tcx>, LitToConstError> {\n     let LitToConstInput { lit, ty, neg } = lit_input;\n \n     let trunc = |n| {"}, {"sha": "29216776de163714ddc14710aeca0370ce6bfe4d", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -583,7 +583,7 @@ impl<'tcx> Cx<'tcx> {\n                     _ => span_bug!(expr.span, \"unexpected repeat expr ty: {:?}\", ty),\n                 };\n \n-                ExprKind::Repeat { value: self.mirror_expr(v), count }\n+                ExprKind::Repeat { value: self.mirror_expr(v), count: *count }\n             }\n             hir::ExprKind::Ret(ref v) => {\n                 ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }\n@@ -708,7 +708,7 @@ impl<'tcx> Cx<'tcx> {\n                                 // in case we are offsetting from a computed discriminant\n                                 // and not the beginning of discriminants (which is always `0`)\n                                 let substs = InternalSubsts::identity_for_item(self.tcx(), did);\n-                                let lhs = ty::Const {\n+                                let lhs = ty::ConstS {\n                                     val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(\n                                         ty::WithOptConstParam::unknown(did),\n                                         substs,\n@@ -890,7 +890,7 @@ impl<'tcx> Cx<'tcx> {\n                 let name = self.tcx.hir().name(hir_id);\n                 let val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n                 ExprKind::Literal {\n-                    literal: self.tcx.mk_const(ty::Const {\n+                    literal: self.tcx.mk_const(ty::ConstS {\n                         val,\n                         ty: self.typeck_results().node_type(expr.hir_id),\n                     }),\n@@ -903,7 +903,7 @@ impl<'tcx> Cx<'tcx> {\n                 let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);\n                 debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n                 ExprKind::Literal {\n-                    literal: self.tcx.mk_const(ty::Const {\n+                    literal: self.tcx.mk_const(ty::ConstS {\n                         val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(\n                             ty::WithOptConstParam::unknown(def_id),\n                             substs,"}, {"sha": "a65a3ed31f638c8536edd79c8188c64ec3e39d8d", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> Cx<'tcx> {\n         ty: Ty<'tcx>,\n         sp: Span,\n         neg: bool,\n-    ) -> &'tcx ty::Const<'tcx> {\n+    ) -> ty::Const<'tcx> {\n         trace!(\"const_eval_literal: {:#?}, {:?}, {:?}, {:?}\", lit, ty, sp, neg);\n \n         match self.tcx.at(sp).lit_to_const(LitToConstInput { lit, ty, neg }) {"}, {"sha": "7db71ed598d932ec73ca3c56ffa9dff1554269bd", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -22,7 +22,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     pub(super) fn const_to_pat(\n         &self,\n-        cv: &'tcx ty::Const<'tcx>,\n+        cv: ty::Const<'tcx>,\n         id: hir::HirId,\n         span: Span,\n         mir_structural_match_violation: bool,\n@@ -152,11 +152,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         ty.is_structural_eq_shallow(self.infcx.tcx)\n     }\n \n-    fn to_pat(\n-        &mut self,\n-        cv: &'tcx ty::Const<'tcx>,\n-        mir_structural_match_violation: bool,\n-    ) -> Pat<'tcx> {\n+    fn to_pat(&mut self, cv: ty::Const<'tcx>, mir_structural_match_violation: bool) -> Pat<'tcx> {\n         trace!(self.treat_byte_string_as_slice);\n         // This method is just a wrapper handling a validity check; the heavy lifting is\n         // performed by the recursive `recur` method, which is not meant to be\n@@ -171,10 +167,11 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             // If we were able to successfully convert the const to some pat,\n             // double-check that all types in the const implement `Structural`.\n \n-            let structural = self.search_for_structural_match_violation(cv.ty);\n+            let structural = self.search_for_structural_match_violation(cv.ty());\n             debug!(\n                 \"search_for_structural_match_violation cv.ty: {:?} returned: {:?}\",\n-                cv.ty, structural\n+                cv.ty(),\n+                structural\n             );\n \n             // This can occur because const qualification treats all associated constants as\n@@ -189,7 +186,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n \n             if let Some(msg) = structural {\n-                if !self.type_may_have_partial_eq_impl(cv.ty) {\n+                if !self.type_may_have_partial_eq_impl(cv.ty()) {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n                     self.tcx().sess.span_fatal(self.span, &msg);\n                 } else if mir_structural_match_violation && !self.saw_const_match_lint.get() {\n@@ -247,7 +244,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n     fn field_pats(\n         &self,\n-        vals: impl Iterator<Item = &'tcx ty::Const<'tcx>>,\n+        vals: impl Iterator<Item = ty::Const<'tcx>>,\n     ) -> Result<Vec<FieldPat<'tcx>>, FallbackToConstRef> {\n         vals.enumerate()\n             .map(|(idx, val)| {\n@@ -260,15 +257,15 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     // Recursive helper for `to_pat`; invoke that (instead of calling this directly).\n     fn recur(\n         &self,\n-        cv: &'tcx ty::Const<'tcx>,\n+        cv: ty::Const<'tcx>,\n         mir_structural_match_violation: bool,\n     ) -> Result<Pat<'tcx>, FallbackToConstRef> {\n         let id = self.id;\n         let span = self.span;\n         let tcx = self.tcx();\n         let param_env = self.param_env;\n \n-        let kind = match cv.ty.kind() {\n+        let kind = match cv.ty().kind() {\n             ty::Float(_) => {\n                 if self.include_lint_checks {\n                     tcx.struct_span_lint_hir(\n@@ -292,14 +289,14 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 PatKind::Wild\n             }\n             ty::Adt(..)\n-                if !self.type_may_have_partial_eq_impl(cv.ty)\n+                if !self.type_may_have_partial_eq_impl(cv.ty())\n                     // FIXME(#73448): Find a way to bring const qualification into parity with\n                     // `search_for_structural_match_violation` and then remove this condition.\n-                    && self.search_for_structural_match_violation(cv.ty).is_some() =>\n+                    && self.search_for_structural_match_violation(cv.ty()).is_some() =>\n             {\n                 // Obtain the actual type that isn't annotated. If we just looked at `cv.ty` we\n                 // could get `Option<NonStructEq>`, even though `Option` is annotated with derive.\n-                let msg = self.search_for_structural_match_violation(cv.ty).unwrap();\n+                let msg = self.search_for_structural_match_violation(cv.ty()).unwrap();\n                 self.saw_const_match_error.set(true);\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(self.span, &msg);\n@@ -317,7 +314,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             // details.\n             // Backwards compatibility hack because we can't cause hard errors on these\n             // types, so we compare them via `PartialEq::eq` at runtime.\n-            ty::Adt(..) if !self.type_marked_structural(cv.ty) && self.behind_reference.get() => {\n+            ty::Adt(..) if !self.type_marked_structural(cv.ty()) && self.behind_reference.get() => {\n                 if self.include_lint_checks\n                     && !self.saw_const_match_error.get()\n                     && !self.saw_const_match_lint.get()\n@@ -331,7 +328,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                             let msg = format!(\n                                 \"to use a constant of type `{}` in a pattern, \\\n                                  `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                cv.ty, cv.ty,\n+                                cv.ty(),\n+                                cv.ty(),\n                             );\n                             lint.build(&msg).emit()\n                         },\n@@ -342,8 +340,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // `PartialEq::eq` on it.\n                 return Err(fallback_to_const_ref(self));\n             }\n-            ty::Adt(adt_def, _) if !self.type_marked_structural(cv.ty) => {\n-                debug!(\"adt_def {:?} has !type_marked_structural for cv.ty: {:?}\", adt_def, cv.ty);\n+            ty::Adt(adt_def, _) if !self.type_marked_structural(cv.ty()) => {\n+                debug!(\n+                    \"adt_def {:?} has !type_marked_structural for cv.ty: {:?}\",\n+                    adt_def,\n+                    cv.ty()\n+                );\n                 let path = tcx.def_path_str(adt_def.did);\n                 let msg = format!(\n                     \"to use a constant of type `{}` in a pattern, \\\n@@ -378,7 +380,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     .destructure_const(param_env.and(cv))\n                     .fields\n                     .iter()\n-                    .map(|val| self.recur(val, false))\n+                    .map(|val| self.recur(*val, false))\n                     .collect::<Result<_, _>>()?,\n                 slice: None,\n                 suffix: Vec::new(),\n@@ -387,7 +389,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // These are not allowed and will error elsewhere anyway.\n                 ty::Dynamic(..) => {\n                     self.saw_const_match_error.set(true);\n-                    let msg = format!(\"`{}` cannot be used in patterns\", cv.ty);\n+                    let msg = format!(\"`{}` cannot be used in patterns\", cv.ty());\n                     if self.include_lint_checks {\n                         tcx.sess.span_err(span, &msg);\n                     } else {\n@@ -414,7 +416,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                     .destructure_const(param_env.and(array))\n                                     .fields\n                                     .iter()\n-                                    .map(|val| self.recur(val, false))\n+                                    .map(|val| self.recur(*val, false))\n                                     .collect::<Result<_, _>>()?,\n                                 slice: None,\n                                 suffix: vec![],\n@@ -440,7 +442,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                     .destructure_const(param_env.and(array))\n                                     .fields\n                                     .iter()\n-                                    .map(|val| self.recur(val, false))\n+                                    .map(|val| self.recur(*val, false))\n                                     .collect::<Result<_, _>>()?,\n                                 slice: None,\n                                 suffix: vec![],\n@@ -544,7 +546,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n             _ => {\n                 self.saw_const_match_error.set(true);\n-                let msg = format!(\"`{}` cannot be used in patterns\", cv.ty);\n+                let msg = format!(\"`{}` cannot be used in patterns\", cv.ty());\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, &msg);\n                 } else {\n@@ -560,12 +562,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             && mir_structural_match_violation\n             // FIXME(#73448): Find a way to bring const qualification into parity with\n             // `search_for_structural_match_violation` and then remove this condition.\n-            && self.search_for_structural_match_violation(cv.ty).is_some()\n+            && self.search_for_structural_match_violation(cv.ty()).is_some()\n         {\n             self.saw_const_match_lint.set(true);\n             // Obtain the actual type that isn't annotated. If we just looked at `cv.ty` we\n             // could get `Option<NonStructEq>`, even though `Option` is annotated with derive.\n-            let msg = self.search_for_structural_match_violation(cv.ty).unwrap().replace(\n+            let msg = self.search_for_structural_match_violation(cv.ty()).unwrap().replace(\n                 \"in a pattern,\",\n                 \"in a pattern, the constant's initializer must be trivial or\",\n             );\n@@ -577,6 +579,6 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             );\n         }\n \n-        Ok(Pat { span, ty: cv.ty, kind: Box::new(kind) })\n+        Ok(Pat { span, ty: cv.ty(), kind: Box::new(kind) })\n     }\n }"}, {"sha": "e4d9bd9c237e9889cfc7325c031699ce3c585404", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -136,12 +136,12 @@ impl IntRange {\n     fn from_const<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: &Const<'tcx>,\n+        value: Const<'tcx>,\n     ) -> Option<IntRange> {\n-        if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n-            let ty = value.ty;\n+        let ty = value.ty();\n+        if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, ty) {\n             let val = (|| {\n-                if let ty::ConstKind::Value(ConstValue::Scalar(scalar)) = value.val {\n+                if let ty::ConstKind::Value(ConstValue::Scalar(scalar)) = value.val() {\n                     // For this specific pattern we can skip a lot of effort and go\n                     // straight to the result, after doing a bit of checking. (We\n                     // could remove this branch and just fall through, which\n@@ -630,9 +630,9 @@ pub(super) enum Constructor<'tcx> {\n     /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).\n     IntRange(IntRange),\n     /// Ranges of floating-point literal values (`2.0..=5.2`).\n-    FloatRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, RangeEnd),\n+    FloatRange(ty::Const<'tcx>, ty::Const<'tcx>, RangeEnd),\n     /// String literals. Strings are not quite the same as `&[u8]` so we treat them separately.\n-    Str(&'tcx ty::Const<'tcx>),\n+    Str(ty::Const<'tcx>),\n     /// Array and slice patterns.\n     Slice(Slice),\n     /// Constants that must not be matched structurally. They are treated as black\n@@ -815,8 +815,14 @@ impl<'tcx> Constructor<'tcx> {\n                 FloatRange(other_from, other_to, other_end),\n             ) => {\n                 match (\n-                    compare_const_vals(pcx.cx.tcx, self_to, other_to, pcx.cx.param_env, pcx.ty),\n-                    compare_const_vals(pcx.cx.tcx, self_from, other_from, pcx.cx.param_env, pcx.ty),\n+                    compare_const_vals(pcx.cx.tcx, *self_to, *other_to, pcx.cx.param_env, pcx.ty),\n+                    compare_const_vals(\n+                        pcx.cx.tcx,\n+                        *self_from,\n+                        *other_from,\n+                        pcx.cx.param_env,\n+                        pcx.ty,\n+                    ),\n                 ) {\n                     (Some(to), Some(from)) => {\n                         (from == Ordering::Greater || from == Ordering::Equal)\n@@ -828,8 +834,13 @@ impl<'tcx> Constructor<'tcx> {\n             }\n             (Str(self_val), Str(other_val)) => {\n                 // FIXME: there's probably a more direct way of comparing for equality\n-                match compare_const_vals(pcx.cx.tcx, self_val, other_val, pcx.cx.param_env, pcx.ty)\n-                {\n+                match compare_const_vals(\n+                    pcx.cx.tcx,\n+                    *self_val,\n+                    *other_val,\n+                    pcx.cx.param_env,\n+                    pcx.ty,\n+                ) {\n                     Some(comparison) => comparison == Ordering::Equal,\n                     None => false,\n                 }\n@@ -1368,13 +1379,13 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                 }\n             }\n             PatKind::Constant { value } => {\n-                if let Some(int_range) = IntRange::from_const(cx.tcx, cx.param_env, value) {\n+                if let Some(int_range) = IntRange::from_const(cx.tcx, cx.param_env, *value) {\n                     ctor = IntRange(int_range);\n                     fields = Fields::empty();\n                 } else {\n                     match pat.ty.kind() {\n                         ty::Float(_) => {\n-                            ctor = FloatRange(value, value, RangeEnd::Included);\n+                            ctor = FloatRange(*value, *value, RangeEnd::Included);\n                             fields = Fields::empty();\n                         }\n                         ty::Ref(_, t, _) if t.is_str() => {\n@@ -1386,7 +1397,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                             // fields.\n                             // Note: `t` is `str`, not `&str`.\n                             let subpattern =\n-                                DeconstructedPat::new(Str(value), Fields::empty(), *t, pat.span);\n+                                DeconstructedPat::new(Str(*value), Fields::empty(), *t, pat.span);\n                             ctor = Single;\n                             fields = Fields::singleton(cx, subpattern)\n                         }\n@@ -1401,11 +1412,11 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                 }\n             }\n             &PatKind::Range(PatRange { lo, hi, end }) => {\n-                let ty = lo.ty;\n+                let ty = lo.ty();\n                 ctor = if let Some(int_range) = IntRange::from_range(\n                     cx.tcx,\n-                    lo.eval_bits(cx.tcx, cx.param_env, lo.ty),\n-                    hi.eval_bits(cx.tcx, cx.param_env, hi.ty),\n+                    lo.eval_bits(cx.tcx, cx.param_env, lo.ty()),\n+                    hi.eval_bits(cx.tcx, cx.param_env, hi.ty()),\n                     ty,\n                     &end,\n                 ) {"}, {"sha": "ddf39fb824cda7cb307f969faf8acdf1554baefe", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -121,13 +121,13 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     fn lower_pattern_range(\n         &mut self,\n         ty: Ty<'tcx>,\n-        lo: &'tcx ty::Const<'tcx>,\n-        hi: &'tcx ty::Const<'tcx>,\n+        lo: ty::Const<'tcx>,\n+        hi: ty::Const<'tcx>,\n         end: RangeEnd,\n         span: Span,\n     ) -> PatKind<'tcx> {\n-        assert_eq!(lo.ty, ty);\n-        assert_eq!(hi.ty, ty);\n+        assert_eq!(lo.ty(), ty);\n+        assert_eq!(hi.ty(), ty);\n         let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env, ty);\n         match (end, cmp) {\n             // `x..y` where `x < y`.\n@@ -177,16 +177,16 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         lo: Option<&PatKind<'tcx>>,\n         hi: Option<&PatKind<'tcx>>,\n-    ) -> Option<(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>)> {\n+    ) -> Option<(ty::Const<'tcx>, ty::Const<'tcx>)> {\n         match (lo, hi) {\n             (Some(PatKind::Constant { value: lo }), Some(PatKind::Constant { value: hi })) => {\n-                Some((lo, hi))\n+                Some((*lo, *hi))\n             }\n             (Some(PatKind::Constant { value: lo }), None) => {\n-                Some((lo, ty.numeric_max_val(self.tcx)?))\n+                Some((*lo, ty.numeric_max_val(self.tcx)?))\n             }\n             (None, Some(PatKind::Constant { value: hi })) => {\n-                Some((ty.numeric_min_val(self.tcx)?, hi))\n+                Some((ty.numeric_min_val(self.tcx)?, *hi))\n             }\n             _ => None,\n         }\n@@ -493,7 +493,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let const_ =\n                     ty::Const::from_value(self.tcx, value, self.typeck_results.node_type(id));\n \n-                let pattern = self.const_to_pat(&const_, id, span, mir_structural_match_violation);\n+                let pattern = self.const_to_pat(const_, id, span, mir_structural_match_violation);\n \n                 if !is_associated_const {\n                     return pattern;\n@@ -514,7 +514,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                                 user_ty_span: span,\n                             },\n                         }),\n-                        ty: const_.ty,\n+                        ty: const_.ty(),\n                     }\n                 } else {\n                     pattern\n@@ -546,7 +546,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         // Evaluate early like we do in `lower_path`.\n         let value = value.eval(self.tcx, self.param_env);\n \n-        match value.val {\n+        match value.val() {\n             ConstKind::Param(_) => {\n                 self.errors.push(PatternError::ConstParamInPattern(span));\n                 return PatKind::Wild;\n@@ -744,8 +744,8 @@ impl<'tcx> PatternFoldable<'tcx> for PatKind<'tcx> {\n \n crate fn compare_const_vals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    a: &'tcx ty::Const<'tcx>,\n-    b: &'tcx ty::Const<'tcx>,\n+    a: ty::Const<'tcx>,\n+    b: ty::Const<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<Ordering> {\n@@ -756,13 +756,13 @@ crate fn compare_const_vals<'tcx>(\n     let fallback = || from_bool(a == b);\n \n     // Use the fallback if any type differs\n-    if a.ty != b.ty || a.ty != ty {\n+    if a.ty() != b.ty() || a.ty() != ty {\n         return fallback();\n     }\n \n     // Early return for equal constants (so e.g. references to ZSTs can be compared, even if they\n     // are just integer addresses).\n-    if a.val == b.val {\n+    if a.val() == b.val() {\n         return from_bool(true);\n     }\n \n@@ -797,7 +797,7 @@ crate fn compare_const_vals<'tcx>(\n         if let (\n             ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n             ty::ConstKind::Value(b_val @ ConstValue::Slice { .. }),\n-        ) = (a.val, b.val)\n+        ) = (a.val(), b.val())\n         {\n             let a_bytes = get_slice_bytes(&tcx, a_val);\n             let b_bytes = get_slice_bytes(&tcx, b_val);"}, {"sha": "5810ce6edc9643f8925ec8a7ffe64f5b026d65f7", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -484,7 +484,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {\n-                        ConstantKind::Ty(ct) => match ct.val {\n+                        ConstantKind::Ty(ct) => match ct.val() {\n                             // Promoteds must lint and not error as the user didn't ask for them\n                             ConstKind::Unevaluated(ty::Unevaluated {\n                                 def: _,\n@@ -801,7 +801,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) {\n         if let Rvalue::Use(Operand::Constant(c)) = rval {\n             match c.literal {\n-                ConstantKind::Ty(c) if matches!(c.val, ConstKind::Unevaluated(..)) => {}\n+                ConstantKind::Ty(c) if matches!(c.val(), ConstKind::Unevaluated(..)) => {}\n                 _ => {\n                     trace!(\"skipping replace of Rvalue::Use({:?} because it is already a const\", c);\n                     return;\n@@ -875,7 +875,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                                     literal: self\n                                         .ecx\n                                         .tcx\n-                                        .mk_const(ty::Const {\n+                                        .mk_const(ty::ConstS {\n                                             ty,\n                                             val: ty::ConstKind::Value(ConstValue::ByRef {\n                                                 alloc,"}, {"sha": "f0e4129b002e8ac329b20e78e11a1b50720cdb02", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -625,7 +625,7 @@ impl<'tcx> Inliner<'tcx> {\n                 caller_body.required_consts.extend(\n                     callee_body.required_consts.iter().copied().filter(|&ct| {\n                         match ct.literal.const_for_ty() {\n-                            Some(ct) => matches!(ct.val, ConstKind::Unevaluated(_)),\n+                            Some(ct) => matches!(ct.val(), ConstKind::Unevaluated(_)),\n                             None => true,\n                         }\n                     }),"}, {"sha": "1c48efd8b42cb585e1798242b46437f77a5aa1fd", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         if let Some(ct) = constant.literal.const_for_ty() {\n-            if let ConstKind::Unevaluated(_) = ct.val {\n+            if let ConstKind::Unevaluated(_) = ct.val() {\n                 self.required_consts.push(*constant);\n             }\n         }"}, {"sha": "8a1fe6e91cb16b53e8ae1344f7633eea4ba307ae", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -709,7 +709,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         let literal = self.monomorphize(constant.literal);\n         let val = match literal {\n             mir::ConstantKind::Val(val, _) => val,\n-            mir::ConstantKind::Ty(ct) => match ct.val {\n+            mir::ConstantKind::Ty(ct) => match ct.val() {\n                 ty::ConstKind::Value(val) => val,\n                 ty::ConstKind::Unevaluated(ct) => {\n                     let param_env = ty::ParamEnv::reveal_all();\n@@ -731,13 +731,13 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.visit_ty(literal.ty(), TyContext::Location(location));\n     }\n \n-    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n-        debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n+    fn visit_const(&mut self, constant: ty::Const<'tcx>, location: Location) {\n+        debug!(\"visiting const {:?} @ {:?}\", constant, location);\n \n-        let substituted_constant = self.monomorphize(*constant);\n+        let substituted_constant = self.monomorphize(constant);\n         let param_env = ty::ParamEnv::reveal_all();\n \n-        match substituted_constant.val {\n+        match substituted_constant.val() {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n             ty::ConstKind::Unevaluated(unevaluated) => {\n                 match self.tcx.const_eval_resolve(param_env, unevaluated, None) {"}, {"sha": "48b6951f10ef0751b8230b4d6e65154b67696d5c", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         self.super_local_decl(local, local_decl);\n     }\n \n-    fn visit_const(&mut self, c: &&'tcx Const<'tcx>, _: Location) {\n+    fn visit_const(&mut self, c: Const<'tcx>, _: Location) {\n         c.visit_with(self);\n     }\n \n@@ -278,12 +278,12 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n-        match c.val {\n+        match c.val() {\n             ty::ConstKind::Param(param) => {\n                 debug!(?param);\n                 self.unused_parameters.clear(param.index);\n@@ -348,12 +348,12 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n     type BreakTy = ();\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n-        match c.val {\n+        match c.val() {\n             ty::ConstKind::Param(param) => {\n                 if self.unused_parameters.contains(param.index).unwrap_or(false) {\n                     ControlFlow::CONTINUE"}, {"sha": "48594e73f5b8359ed32e0c4e43ab00d2833d514a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -280,8 +280,8 @@ where\n         }\n     }\n \n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        self.visit_ty(c.ty)?;\n+    fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        self.visit_ty(c.ty())?;\n         let tcx = self.def_id_visitor.tcx();\n         if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {\n             self.visit_abstract_const_expr(tcx, ct)?;"}, {"sha": "84de31a194da08d711acaf3c08b28e18bff728d8", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -275,7 +275,7 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n+impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -345,7 +345,7 @@ impl<'tcx> Key for mir::ConstantKind<'tcx> {\n     }\n }\n \n-impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n+impl<'tcx> Key for ty::Const<'tcx> {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}, {"sha": "cec1d4bc15717c35f2c1a8e4a523d707da8f4ba5", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -243,10 +243,10 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+    fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         // only print integers\n-        if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int { .. })) = ct.val {\n-            if ct.ty.is_integral() {\n+        if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int { .. })) = ct.val() {\n+            if ct.ty().is_integral() {\n                 return self.pretty_print_const(ct, true);\n             }\n         }"}, {"sha": "c21c3d3ac330f487449d17757c853e635f97b2f0", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -116,7 +116,7 @@ struct SymbolMangler<'tcx> {\n     /// The values are start positions in `out`, in bytes.\n     paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n     types: FxHashMap<Ty<'tcx>, usize>,\n-    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n+    consts: FxHashMap<ty::Const<'tcx>, usize>,\n }\n \n impl<'tcx> SymbolMangler<'tcx> {\n@@ -576,10 +576,10 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+    fn print_const(mut self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         // We only mangle a typed value if the const can be evaluated.\n         let ct = ct.eval(self.tcx, ty::ParamEnv::reveal_all());\n-        match ct.val {\n+        match ct.val() {\n             ty::ConstKind::Value(_) => {}\n \n             // Placeholders (should be demangled as `_`).\n@@ -603,14 +603,14 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n         }\n         let start = self.out.len();\n \n-        match ct.ty.kind() {\n+        match ct.ty().kind() {\n             ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Char => {\n-                self = ct.ty.print(self)?;\n+                self = ct.ty().print(self)?;\n \n-                let mut bits = ct.eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty);\n+                let mut bits = ct.eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty());\n \n                 // Negative integer values are mangled using `n` as a \"sign prefix\".\n-                if let ty::Int(ity) = ct.ty.kind() {\n+                if let ty::Int(ity) = ct.ty().kind() {\n                     let val =\n                         Integer::from_int_ty(&self.tcx, *ity).size().sign_extend(bits) as i128;\n                     if val < 0 {\n@@ -627,7 +627,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // handle `&str` and include both `&` (\"R\") and `str` (\"e\") prefixes.\n             ty::Ref(_, ty, hir::Mutability::Not) if *ty == self.tcx.types.str_ => {\n                 self.push(\"R\");\n-                match ct.val {\n+                match ct.val() {\n                     ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => {\n                         // NOTE(eddyb) the following comment was kept from `ty::print::pretty`:\n                         // The `inspect` here is okay since we checked the bounds, and there are no\n@@ -671,7 +671,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                     Ok(this)\n                 };\n \n-                match *ct.ty.kind() {\n+                match *ct.ty().kind() {\n                     ty::Array(..) => {\n                         self.push(\"A\");\n                         self = print_field_list(self)?;\n@@ -721,7 +721,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             }\n \n             _ => {\n-                bug!(\"symbol_names: unsupported constant of type `{}` ({:?})\", ct.ty, ct);\n+                bug!(\"symbol_names: unsupported constant of type `{}` ({:?})\", ct.ty(), ct);\n             }\n         }\n "}, {"sha": "c93ff0aa6e27734ace8720f23342e36572b8308c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -287,10 +287,10 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         trace!(\"checking const {:?}\", ct);\n         // Find a const parameter\n-        match ct.val {\n+        match ct.val() {\n             ty::ConstKind::Param(..) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ct.into()).map(|k| k.unpack()) {\n@@ -311,7 +311,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             )\n                             .emit();\n \n-                        self.tcx().const_error(ct.ty)\n+                        self.tcx().const_error(ct.ty())\n                     }\n                 }\n             }"}, {"sha": "5fe7b62f454186c9fb453064f16fb6efff068e46", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -809,14 +809,14 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                     };\n                 }\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n-                    let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n+                    let evaluate = |c: ty::Const<'tcx>| {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val() {\n                             match select.infcx().const_eval_resolve(\n                                 obligation.param_env,\n                                 unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n-                                Ok(val) => Ok(ty::Const::from_value(select.tcx(), val, c.ty)),\n+                                Ok(val) => Ok(ty::Const::from_value(select.tcx(), val, c.ty())),\n                                 Err(err) => Err(err),\n                             }\n                         } else {"}, {"sha": "1994faed70c66bfabe0514160b28a582530c8cc3", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -8,6 +8,7 @@\n //! In this case we try to build an abstract representation of this constant using\n //! `thir_abstract_const` which can then be checked for structural equality with other\n //! generic constants mentioned in the `caller_bounds` of the current environment.\n+use rustc_data_structures::intern::Interned;\n use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_index::vec::IndexVec;\n@@ -201,9 +202,9 @@ impl<'tcx> AbstractConst<'tcx> {\n \n     pub fn from_const(\n         tcx: TyCtxt<'tcx>,\n-        ct: &ty::Const<'tcx>,\n+        ct: ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        match ct.val {\n+        match ct.val() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n@@ -293,7 +294,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 }\n             }\n \n-            fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) {\n+            fn visit_const(&mut self, ct: ty::Const<'tcx>) {\n                 self.is_poly |= ct.has_param_types_or_consts();\n             }\n         }\n@@ -334,7 +335,11 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         self.recurse_build(self.body_id)?;\n \n         for n in self.nodes.iter() {\n-            if let Node::Leaf(ty::Const { val: ty::ConstKind::Unevaluated(ct), ty: _ }) = n {\n+            if let Node::Leaf(ty::Const(Interned(\n+                ty::ConstS { val: ty::ConstKind::Unevaluated(ct), ty: _ },\n+                _,\n+            ))) = n\n+            {\n                 // `AbstractConst`s should not contain any promoteds as they require references which\n                 // are not allowed.\n                 assert_eq!(ct.promoted, None);\n@@ -602,11 +607,11 @@ pub(super) fn try_unify<'tcx>(\n \n     match (a.root(tcx), b.root(tcx)) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n-            if a_ct.ty != b_ct.ty {\n+            if a_ct.ty() != b_ct.ty() {\n                 return false;\n             }\n \n-            match (a_ct.val, b_ct.val) {\n+            match (a_ct.val(), b_ct.val()) {\n                 // We can just unify errors with everything to reduce the amount of\n                 // emitted errors here.\n                 (ty::ConstKind::Error(_), _) | (_, ty::ConstKind::Error(_)) => true,"}, {"sha": "6c8a08c09e7778acd9549e4ebf59bc81d5636e3f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -211,7 +211,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     let type_string = self.tcx.type_of(def.did).to_string();\n                     flags.push((sym::_Self, Some(format!(\"[{}]\", type_string))));\n \n-                    let len = len.val.try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n+                    let len =\n+                        len.val().try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n                     let string = match len {\n                         Some(n) => format!(\"[{}; {}]\", type_string, n),\n                         None => format!(\"[{}; _]\", type_string),"}, {"sha": "1989184f48f0e26c434e5edc8d4747dbd302e58f", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         //\n                         // Let's just see where this breaks :shrug:\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.val, c2.val)\n+                            (c1.val(), c2.val())\n                         {\n                             if infcx.try_unify_abstract_consts(a.shrink(), b.shrink()) {\n                                 return ProcessResult::Changed(vec![]);\n@@ -572,14 +572,14 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n                     let stalled_on = &mut pending_obligation.stalled_on;\n \n-                    let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n+                    let mut evaluate = |c: Const<'tcx>| {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val() {\n                             match self.selcx.infcx().const_eval_resolve(\n                                 obligation.param_env,\n                                 unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n-                                Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n+                                Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty())),\n                                 Err(ErrorHandled::TooGeneric) => {\n                                     stalled_on.extend(\n                                         unevaluated"}, {"sha": "5f338664c9a98be4d0e97e9e7210ea3281fe6eac", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         if self.selcx.tcx().lazy_normalization() {\n             constant\n         } else {\n@@ -622,24 +622,24 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        match *ct {\n-            ty::Const { val: ty::ConstKind::Bound(debruijn, _), ty: _ }\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        match ct.val() {\n+            ty::ConstKind::Bound(debruijn, _)\n                 if debruijn.as_usize() + 1\n                     > self.current_index.as_usize() + self.universe_indices.len() =>\n             {\n                 bug!(\"Bound vars outside of `self.universe_indices`\");\n             }\n-            ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }\n-                if debruijn >= self.current_index =>\n-            {\n+            ty::ConstKind::Bound(debruijn, bound_const) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderConst {\n                     universe,\n-                    name: ty::BoundConst { var: bound_const, ty },\n+                    name: ty::BoundConst { var: bound_const, ty: ct.ty() },\n                 };\n                 self.mapped_consts.insert(p, bound_const);\n-                self.infcx.tcx.mk_const(ty::Const { val: ty::ConstKind::Placeholder(p), ty })\n+                self.infcx\n+                    .tcx\n+                    .mk_const(ty::ConstS { val: ty::ConstKind::Placeholder(p), ty: ct.ty() })\n             }\n             _ if ct.has_vars_bound_at_or_above(self.current_index) => ct.super_fold_with(self),\n             _ => ct,\n@@ -758,8 +758,8 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n         }\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ty::ConstKind::Placeholder(p), ty } = *ct {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Placeholder(p) = ct.val() {\n             let replace_var = self.mapped_consts.get(&p);\n             match replace_var {\n                 Some(replace_var) => {\n@@ -771,8 +771,10 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                     let db = ty::DebruijnIndex::from_usize(\n                         self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                     );\n-                    self.tcx()\n-                        .mk_const(ty::Const { val: ty::ConstKind::Bound(db, *replace_var), ty })\n+                    self.tcx().mk_const(ty::ConstS {\n+                        val: ty::ConstKind::Bound(db, *replace_var),\n+                        ty: ct.ty(),\n+                    })\n                 }\n                 None => ct,\n             }\n@@ -1862,7 +1864,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n         let val = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n-        tcx.mk_const(ty::Const { ty, val }).into()\n+        tcx.mk_const(ty::ConstS { ty, val }).into()\n     } else {\n         ty.into()\n     };"}, {"sha": "6a2bd9ce1ea91d3043d04b07a38048fb20c1e35c", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -140,8 +140,8 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match ct.val {\n+    fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match ct.val() {\n             ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n                 self.escaping =\n                     self.escaping.max(debruijn.as_usize() - self.outer_index.as_usize());\n@@ -324,8 +324,8 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n \n     fn try_fold_const(\n         &mut self,\n-        constant: &'tcx ty::Const<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+        constant: ty::Const<'tcx>,\n+    ) -> Result<ty::Const<'tcx>, Self::Error> {\n         let constant = constant.try_super_fold_with(self)?;\n         Ok(constant.eval(self.infcx.tcx, self.param_env))\n     }"}, {"sha": "84bc7cdff28905f1742f022cca737c48b8efbae2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -983,7 +983,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // Lifetimes aren't allowed to change during unsizing.\n                     GenericArgKind::Lifetime(_) => None,\n \n-                    GenericArgKind::Const(ct) => match ct.val {\n+                    GenericArgKind::Const(ct) => match ct.val() {\n                         ty::ConstKind::Param(p) => Some(p.index),\n                         _ => None,\n                     },"}, {"sha": "64af875dd22bbb8a2024f88e824c79fd90e76dba", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -643,23 +643,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         //\n                         // Let's just see where this breaks :shrug:\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.val, c2.val)\n+                            (c1.val(), c2.val())\n                         {\n                             if self.infcx.try_unify_abstract_consts(a.shrink(), b.shrink()) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }\n                     }\n \n-                    let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n+                    let evaluate = |c: ty::Const<'tcx>| {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val() {\n                             self.infcx\n                                 .const_eval_resolve(\n                                     obligation.param_env,\n                                     unevaluated,\n                                     Some(obligation.cause.span),\n                                 )\n-                                .map(|val| ty::Const::from_value(self.tcx(), val, c.ty))\n+                                .map(|val| ty::Const::from_value(self.tcx(), val, c.ty()))\n                         } else {\n                             Ok(c)\n                         }"}, {"sha": "2dd3b77a73cdff8273ae00059e965b5bc0579611", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -41,15 +41,17 @@ pub fn obligations<'a, 'tcx>(\n             .into()\n         }\n         GenericArgKind::Const(ct) => {\n-            match ct.val {\n+            match ct.val() {\n                 ty::ConstKind::Infer(infer) => {\n                     let resolved = infcx.shallow_resolve(infer);\n                     if resolved == infer {\n                         // No progress.\n                         return None;\n                     }\n \n-                    infcx.tcx.mk_const(ty::Const { val: ty::ConstKind::Infer(resolved), ty: ct.ty })\n+                    infcx\n+                        .tcx\n+                        .mk_const(ty::ConstS { val: ty::ConstKind::Infer(resolved), ty: ct.ty() })\n                 }\n                 _ => ct,\n             }\n@@ -442,7 +444,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 GenericArgKind::Lifetime(_) => continue,\n \n                 GenericArgKind::Const(constant) => {\n-                    match constant.val {\n+                    match constant.val() {\n                         ty::ConstKind::Unevaluated(uv) => {\n                             let obligations = self.nominal_obligations(uv.def.did, uv.substs);\n                             self.out.extend(obligations);\n@@ -464,9 +466,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             if resolved != infer {\n                                 let cause = self.cause(traits::MiscObligation);\n \n-                                let resolved_constant = self.infcx.tcx.mk_const(ty::Const {\n+                                let resolved_constant = self.infcx.tcx.mk_const(ty::ConstS {\n                                     val: ty::ConstKind::Infer(resolved),\n-                                    ..*constant\n+                                    ty: constant.ty(),\n                                 });\n                                 self.out.push(traits::Obligation::with_depth(\n                                     cause,"}, {"sha": "51b66e1bb6503c08bde62e38a5ea014af4fc4b71", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -715,7 +715,7 @@ fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx\n         }\n \n         ty::GenericParamDefKind::Const { .. } => tcx\n-            .mk_const(ty::Const {\n+            .mk_const(ty::ConstS {\n                 val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n                 ty: tcx.type_of(param.def_id),\n             })\n@@ -735,7 +735,7 @@ fn binders_for<'tcx>(\n                 chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General)\n             }\n             ty::subst::GenericArgKind::Const(c) => {\n-                chalk_ir::VariableKind::Const(c.ty.lower_into(interner))\n+                chalk_ir::VariableKind::Const(c.ty().lower_into(interner))\n             }\n         }),\n     )"}, {"sha": "9d810d0881b5f8351fb7694a02aa6378ef231991", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -389,7 +389,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             TyKind::Array(ty, c) => {\n                 let ty = ty.lower_into(interner);\n                 let c = c.lower_into(interner);\n-                ty::Array(ty, interner.tcx.mk_const(c))\n+                ty::Array(ty, c)\n             }\n             TyKind::FnDef(id, substitution) => ty::FnDef(id.0, substitution.lower_into(interner)),\n             TyKind::Closure(closure, substitution) => {\n@@ -505,8 +505,8 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Const<RustInterner<'tcx>>> for ty::Const<'tcx> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Const<RustInterner<'tcx>> {\n-        let ty = self.ty.lower_into(interner);\n-        let value = match self.val {\n+        let ty = self.ty().lower_into(interner);\n+        let value = match self.val() {\n             ty::ConstKind::Value(val) => {\n                 chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: val })\n             }\n@@ -532,7 +532,7 @@ impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'t\n             chalk_ir::ConstValue::Placeholder(_p) => unimplemented!(),\n             chalk_ir::ConstValue::Concrete(c) => ty::ConstKind::Value(c.interned),\n         };\n-        ty::Const { ty, val }\n+        interner.tcx.mk_const(ty::ConstS { ty, val })\n     }\n }\n \n@@ -568,7 +568,7 @@ impl<'tcx> LowerInto<'tcx, ty::subst::GenericArg<'tcx>>\n             }\n             chalk_ir::GenericArgData::Const(c) => {\n                 let c: ty::Const<'tcx> = c.lower_into(interner);\n-                interner.tcx.mk_const(c).into()\n+                c.into()\n             }\n         }\n     }"}, {"sha": "845f03183c30c867f93d8439c19602a5ef9916d7", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -83,7 +83,7 @@ pub trait AstConv<'tcx> {\n         ty: Ty<'tcx>,\n         param: Option<&ty::GenericParamDef>,\n         span: Span,\n-    ) -> &'tcx Const<'tcx>;\n+    ) -> Const<'tcx>;\n \n     /// Projecting an associated type from a (potentially)\n     /// higher-ranked trait reference is more complicated, because of\n@@ -1428,7 +1428,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         // `trait_object_dummy_self`, so check for that.\n                         let references_self = match pred.skip_binder().term {\n                             ty::Term::Ty(ty) => ty.walk().any(|arg| arg == dummy_self.into()),\n-                            ty::Term::Const(c) => c.ty.walk().any(|arg| arg == dummy_self.into()),\n+                            ty::Term::Const(c) => c.ty().walk().any(|arg| arg == dummy_self.into()),\n                         };\n \n                         // If the projection output contains `Self`, force the user to"}, {"sha": "27c8a1978355754b1a014eee54da6a207f78f58b", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -480,8 +480,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n             r.super_visit_with(self)\n         }\n \n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::ConstKind::Unevaluated(..) = c.val {\n+        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            if let ty::ConstKind::Unevaluated(..) = c.val() {\n                 // FIXME(#72219) We currently don't detect lifetimes within substs\n                 // which would violate this check. Even though the particular substitution is not used\n                 // within the const, this should still be fixed."}, {"sha": "457e9cf1ea54a95bee943ad69033b99b15707d55", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -1306,7 +1306,7 @@ pub fn check_type_bounds<'tcx>(\n         GenericParamDefKind::Const { .. } => {\n             let bound_var = ty::BoundVariableKind::Const;\n             bound_vars.push(bound_var);\n-            tcx.mk_const(ty::Const {\n+            tcx.mk_const(ty::ConstS {\n                 ty: tcx.type_of(param.def_id),\n                 val: ty::ConstKind::Bound(\n                     ty::INNERMOST,"}, {"sha": "22d2022902f01b5ee6747524be70e6e9af9fb10a", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -362,9 +362,9 @@ impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n \n     fn consts(\n         &mut self,\n-        a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        a: ty::Const<'tcx>,\n+        b: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         debug!(\"SimpleEqRelation::consts(a={:?}, b={:?})\", a, b);\n         ty::relate::super_relate_consts(self, a, b)\n     }"}, {"sha": "b5f13703edfbe9930b2f79a6a98be3289108e20d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -2181,7 +2181,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         base: &hir::Expr<'_>,\n         field: Ident,\n-        len: &ty::Const<'tcx>,\n+        len: ty::Const<'tcx>,\n     ) {\n         if let (Some(len), Ok(user_index)) =\n             (len.try_eval_usize(self.tcx, self.param_env), field.as_str().parse::<u64>())"}, {"sha": "96bbc2800d50a212d833827a13b32568146891a2", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -498,14 +498,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> &'tcx ty::Const<'tcx> {\n+    pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> ty::Const<'tcx> {\n         match length {\n             &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n             hir::ArrayLen::Body(anon_const) => self.to_const(anon_const),\n         }\n     }\n \n-    pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n+    pub fn to_const(&self, ast_c: &hir::AnonConst) -> ty::Const<'tcx> {\n         let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n         let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n         self.register_wf_obligation(\n@@ -520,7 +520,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         ast_c: &hir::AnonConst,\n         param_def_id: DefId,\n-    ) -> &'tcx ty::Const<'tcx> {\n+    ) -> ty::Const<'tcx> {\n         let const_def = ty::WithOptConstParam {\n             did: self.tcx.hir().local_def_id(ast_c.hir_id),\n             const_param_did: Some(param_def_id),"}, {"sha": "222c14d0d47b9ef244ead29af396dff2a667064a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         param: Option<&ty::GenericParamDef>,\n         span: Span,\n-    ) -> &'tcx Const<'tcx> {\n+    ) -> Const<'tcx> {\n         if let Some(param) = param {\n             if let GenericArgKind::Const(ct) = self.var_for_def(span, param).unpack() {\n                 return ct;"}, {"sha": "320f5a97e0a24960be2bae19bda41f385d7277f1", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -1935,7 +1935,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         element_ty: Ty<'tcx>,\n         arr_ty: Ty<'tcx>,\n         slice: Option<&'tcx Pat<'tcx>>,\n-        len: &ty::Const<'tcx>,\n+        len: ty::Const<'tcx>,\n         min_len: u64,\n     ) -> (Option<Ty<'tcx>>, Ty<'tcx>) {\n         if let Some(len) = len.try_eval_usize(self.tcx, self.param_env) {"}, {"sha": "9bdeb3a679a3d487b7f34c25a8fb401857732c0d", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -1295,8 +1295,8 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     ControlFlow::BREAK\n                 }\n \n-                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    if let ty::ConstKind::Param(param) = c.val {\n+                fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                    if let ty::ConstKind::Param(param) = c.val() {\n                         self.params.insert(param.index);\n                     }\n                     c.super_visit_with(self)"}, {"sha": "3843e7e54bec4cca7e056ef73663ca7c3965c2b4", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -720,7 +720,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         }\n     }\n \n-    fn report_const_error(&self, c: &'tcx ty::Const<'tcx>) {\n+    fn report_const_error(&self, c: ty::Const<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n                 .emit_inference_failure_err(\n@@ -783,14 +783,14 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n         self.tcx.lifetimes.re_erased\n     }\n \n-    fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         match self.infcx.fully_resolve(ct) {\n             Ok(ct) => self.infcx.tcx.erase_regions(ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 self.report_const_error(ct);\n                 self.replaced_with_error = true;\n-                self.tcx().const_error(ct.ty)\n+                self.tcx().const_error(ct.ty())\n             }\n         }\n     }"}, {"sha": "9bb310037965555f0d784fd1c50242d23561aae8", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -312,8 +312,8 @@ impl<'tcx> TypeVisitor<'tcx> for AreUniqueParamsVisitor {\n             _ => ControlFlow::Break(NotUniqueParam::NotParam(r.into())),\n         }\n     }\n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match c.val {\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match c.val() {\n             ty::ConstKind::Param(p) => {\n                 if self.seen.insert(p.index) {\n                     ControlFlow::CONTINUE"}, {"sha": "88dc90dd3e7b04337106ea1d2c3d8a43422ae242", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -389,12 +389,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         self.tcx().ty_error_with_message(span, \"bad placeholder type\")\n     }\n \n-    fn ct_infer(\n-        &self,\n-        ty: Ty<'tcx>,\n-        _: Option<&ty::GenericParamDef>,\n-        span: Span,\n-    ) -> &'tcx Const<'tcx> {\n+    fn ct_infer(&self, ty: Ty<'tcx>, _: Option<&ty::GenericParamDef>, span: Span) -> Const<'tcx> {\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match *r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n@@ -2394,7 +2389,7 @@ fn const_evaluatable_predicates_of<'tcx>(\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n-            if let ty::ConstKind::Unevaluated(uv) = ct.val {\n+            if let ty::ConstKind::Unevaluated(uv) = ct.val() {\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert(("}, {"sha": "909c99adab5d2d91f6162e86d206896e145f8e3b", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -79,11 +79,11 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match c.val {\n+    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match c.val() {\n             ty::ConstKind::Unevaluated(..) if !self.include_nonconstraining => {\n                 // Constant expressions are not injective\n-                return c.ty.visit_with(self);\n+                return c.ty().visit_with(self);\n             }\n             ty::ConstKind::Param(data) => {\n                 self.parameters.push(Parameter::from(data));"}, {"sha": "1c8f848cf2893187c9ae70f14649cf75534b1e27", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -401,12 +401,12 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn add_constraints_from_const(\n         &mut self,\n         current: &CurrentItem,\n-        val: &ty::Const<'tcx>,\n+        val: ty::Const<'tcx>,\n         variance: VarianceTermPtr<'a>,\n     ) {\n         debug!(\"add_constraints_from_const(val={:?}, variance={:?})\", val, variance);\n \n-        match &val.val {\n+        match &val.val() {\n             ty::ConstKind::Unevaluated(uv) => {\n                 self.add_constraints_from_invariant_substs(current, uv.substs, variance);\n             }"}, {"sha": "bcbde428e7c5aec1effa76990fee4004b3999c7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -1646,7 +1646,7 @@ impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Constant {\n         // FIXME: instead of storing the stringified expression, store `self` directly instead.\n         Constant {\n-            type_: self.ty.clean(cx),\n+            type_: self.ty().clean(cx),\n             kind: ConstantKind::TyConst { expr: self.to_string() },\n         }\n     }"}, {"sha": "1d312df1f785890522d1bc0fa700a7d79fbe4a95", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -226,8 +226,8 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n     })\n }\n \n-crate fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n-    match n.val {\n+crate fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n+    match n.val() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -297,15 +297,15 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: &ty::Const<'_>) -> String {\n+fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: ty::Const<'_>) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n-    match (ct.val, ct.ty.kind()) {\n+    match (ct.val(), ct.ty().kind()) {\n         (ty::ConstKind::Value(ConstValue::Scalar(int)), ty::Uint(ui)) => {\n             format!(\"{}{}\", format_integer_with_underscore_sep(&int.to_string()), ui.name_str())\n         }\n         (ty::ConstKind::Value(ConstValue::Scalar(int)), ty::Int(i)) => {\n-            let ty = tcx.lift(ct.ty).unwrap();\n+            let ty = tcx.lift(ct.ty()).unwrap();\n             let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n             let sign_extended_data = size.sign_extend(data) as i128;"}, {"sha": "27db6388136139e1789e570826078a7ddaeba901", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "57b0d709acd4de9dcc4efef8062a037ddac23396", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "3ba99403f06d005645138f6511fd9e1c3d5418e9", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -136,14 +136,14 @@ fn is_value_unfrozen_raw<'tcx>(\n     result: Result<ConstValue<'tcx>, ErrorHandled>,\n     ty: Ty<'tcx>,\n ) -> bool {\n-    fn inner<'tcx>(cx: &LateContext<'tcx>, val: &'tcx Const<'tcx>) -> bool {\n-        match val.ty.kind() {\n+    fn inner<'tcx>(cx: &LateContext<'tcx>, val: Const<'tcx>) -> bool {\n+        match val.ty().kind() {\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n             ty::Adt(ty_def, ..) if Some(ty_def.did) == cx.tcx.lang_items().unsafe_cell_type() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_const(cx.param_env.and(val));\n-                val.fields.iter().any(|field| inner(cx, field))\n+                val.fields.iter().any(|field| inner(cx, *field))\n             },\n             _ => false,\n         }"}, {"sha": "d40583c47dd7074a8c069c0656652fdcf4652509", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95fb8b150a256856aedeca7ebf30b662d2e5141/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=a95fb8b150a256856aedeca7ebf30b662d2e5141", "patch": "@@ -567,11 +567,11 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     }\n }\n \n-pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n+pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n     use rustc_middle::mir::interpret::ConstValue;\n-    match result.val {\n+    match result.val() {\n         ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(int))) => {\n-            match result.ty.kind() {\n+            match result.ty().kind() {\n                 ty::Bool => Some(Constant::Bool(int == ScalarInt::TRUE)),\n                 ty::Uint(_) | ty::Int(_) => Some(Constant::Int(int.assert_bits(int.size()))),\n                 ty::Float(FloatTy::F32) => Some(Constant::F32(f32::from_bits(\n@@ -590,7 +590,7 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n                 _ => None,\n             }\n         },\n-        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty.kind() {\n+        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty().kind() {\n             ty::Ref(_, tam, _) => match tam.kind() {\n                 ty::Str => String::from_utf8(\n                     data.inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n@@ -602,9 +602,9 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n             },\n             _ => None,\n         },\n-        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty.kind() {\n+        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match miri_to_const(len) {\n+                ty::Float(FloatTy::F32) => match miri_to_const(*len) {\n                     Some(Constant::Int(len)) => alloc\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n                         .to_owned()\n@@ -618,7 +618,7 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match miri_to_const(len) {\n+                ty::Float(FloatTy::F64) => match miri_to_const(*len) {\n                     Some(Constant::Int(len)) => alloc\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n                         .to_owned()"}]}