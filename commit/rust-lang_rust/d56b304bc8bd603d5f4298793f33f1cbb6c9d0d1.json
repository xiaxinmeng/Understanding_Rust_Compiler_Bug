{"sha": "d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "node_id": "C_kwDOAAsO6NoAKGQ1NmIzMDRiYzhiZDYwM2Q1ZjQyOTg3OTNmMzNmMWNiYjZjOWQwZDE", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-03T13:17:53Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:34:50Z"}, "message": "Migrate SuggestAccessingField", "tree": {"sha": "d9a9ca6f7d3ebb9f2da4629096d8c402d6df07ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a9ca6f7d3ebb9f2da4629096d8c402d6df07ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "html_url": "https://github.com/rust-lang/rust/commit/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36abea285e7615f12c079c40d3a68c9eee15c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36abea285e7615f12c079c40d3a68c9eee15c8d", "html_url": "https://github.com/rust-lang/rust/commit/b36abea285e7615f12c079c40d3a68c9eee15c8d"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "17de77b74a84d734d09b9c7f25706352f79ae3d2", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "patch": "@@ -360,3 +360,5 @@ infer_fn_consider_casting = consider casting the fn item to a fn pointer: `{$cas\n \n infer_sarwa_option = you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`\n infer_sarwa_result = you can convert from `&Result<T, E>` to `Result<&T, &E>` using `.as_ref()`\n+\n+infer_suggest_accessing_field = you might have meant to use field `{$name}` whose type is `{$ty}`"}, {"sha": "25c4e9a55f84b63d596ab2366f12eaa2080cc50e", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "patch": "@@ -1289,3 +1289,31 @@ pub enum SuggestAsRefWhereAppropriate<'a> {\n         snippet: &'a str,\n     },\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum SuggestAccessingField<'a> {\n+    #[suggestion(\n+        infer_suggest_accessing_field,\n+        code = \"{snippet}.{name}\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    Safe {\n+        #[primary_span]\n+        span: Span,\n+        snippet: String,\n+        name: Symbol,\n+        ty: Ty<'a>,\n+    },\n+    #[suggestion(\n+        infer_suggest_accessing_field,\n+        code = \"unsafe {{ {snippet}.{name} }}\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    Unsafe {\n+        #[primary_span]\n+        span: Span,\n+        snippet: String,\n+        name: Symbol,\n+        ty: Ty<'a>,\n+    },\n+}"}, {"sha": "88d7cab0e4c9d2f9c13f110209d01dfff5c0db7c", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "patch": "@@ -14,8 +14,8 @@ use rustc_target::abi::FieldIdx;\n \n use crate::errors::{\n     ConsiderAddingAwait, DiagArg, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n-    FunctionPointerSuggestion, SuggAddLetForLetChains, SuggestAsRefWhereAppropriate,\n-    SuggestRemoveSemiOrReturnBinding,\n+    FunctionPointerSuggestion, SuggAddLetForLetChains, SuggestAccessingField,\n+    SuggestAsRefWhereAppropriate, SuggestRemoveSemiOrReturnBinding,\n };\n \n use super::TypeErrCtxt;\n@@ -264,15 +264,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n-    pub fn suggest_await_on_future(&self, diag: &mut Diagnostic, sp: Span) {\n-        diag.span_suggestion_verbose(\n-            sp.shrink_to_hi(),\n-            \"consider `await`ing on the `Future`\",\n-            \".await\",\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n-\n     pub(super) fn suggest_accessing_field_where_appropriate(\n         &self,\n         cause: &ObligationCause<'tcx>,\n@@ -299,21 +290,13 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 if let ObligationCauseCode::Pattern { span: Some(span), .. } = *cause.code() {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         let suggestion = if expected_def.is_struct() {\n-                            format!(\"{}.{}\", snippet, name)\n+                            SuggestAccessingField::Safe { span, snippet, name, ty }\n                         } else if expected_def.is_union() {\n-                            format!(\"unsafe {{ {}.{} }}\", snippet, name)\n+                            SuggestAccessingField::Unsafe { span, snippet, name, ty }\n                         } else {\n                             return;\n                         };\n-                        diag.span_suggestion(\n-                            span,\n-                            &format!(\n-                                \"you might have meant to use field `{}` whose type is `{}`\",\n-                                name, ty\n-                            ),\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        diag.subdiagnostic(suggestion);\n                     }\n                 }\n             }"}]}