{"sha": "6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "node_id": "C_kwDOAAsO6NoAKDZiYWNiNmY2ZTllMWY4NTE5MzkyYTA4Yzk4MjAxY2JkMTBiYzRjNWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-12T09:51:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T09:51:33Z"}, "message": "Rollup merge of #101681 - compiler-errors:rpitit-obj-safety, r=lcnr\n\nDeny return-position `impl Trait` in traits for object safety\n\nFixes #101667", "tree": {"sha": "02d0df5520f1b385b9c2ff6da4bc1d53bb0b7913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d0df5520f1b385b9c2ff6da4bc1d53bb0b7913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjHwElCRBK7hj4Ov3rIwAAuXUIALEaPFoOrn1e6xSIv7nUCpst\nzpkiyc+Iq1rQcqDPiRHcTapzsiNrgZVMaDtWkTopoGSPp3Xj+7S9nA/gfMmA/ShQ\nX56xYmj1ecYwgc7irpOo6E3+jgcvhDXmPrlVZzg9Tz4UvBPfC7ulVMVCuT0PhaV4\nWwGvn4s0ykWKcCqjiRM+4PHCybogxP5gh77FEI3rOvYVBt6ImwyocCSmMB2Az3Bc\nvH3KQ5fWJcBzCBvZfoymiV2GmnUn4EAXnkqsoUVLIG4VYLsyPXQB1qH1eOsbO3V5\n1iFRXWj60Bimbk5G++evaRsemBeztZqiMRFCAbIsVjiTlHy8DfgR9SqDy+97tsM=\n=c7dp\n-----END PGP SIGNATURE-----\n", "payload": "tree 02d0df5520f1b385b9c2ff6da4bc1d53bb0b7913\nparent 5faf033f62512cbc2a0deaac7860950e38a60a45\nparent 89b6488ef0417df6f82671e57c4761a816af3974\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662976293 +0530\ncommitter GitHub <noreply@github.com> 1662976293 +0530\n\nRollup merge of #101681 - compiler-errors:rpitit-obj-safety, r=lcnr\n\nDeny return-position `impl Trait` in traits for object safety\n\nFixes #101667\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "html_url": "https://github.com/rust-lang/rust/commit/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5faf033f62512cbc2a0deaac7860950e38a60a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/5faf033f62512cbc2a0deaac7860950e38a60a45", "html_url": "https://github.com/rust-lang/rust/commit/5faf033f62512cbc2a0deaac7860950e38a60a45"}, {"sha": "89b6488ef0417df6f82671e57c4761a816af3974", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b6488ef0417df6f82671e57c4761a816af3974", "html_url": "https://github.com/rust-lang/rust/commit/89b6488ef0417df6f82671e57c4761a816af3974"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "a95e6a61854cf62757c58445809ac672aaee7aa2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "patch": "@@ -915,6 +915,12 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfOutput, _) => {\n                 format!(\"method `{}` references the `Self` type in its return type\", name).into()\n             }\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::ReferencesImplTraitInTrait,\n+                _,\n+            ) => format!(\"method `{}` references an `impl Trait` type in its return type\", name)\n+                .into(),\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -1021,6 +1027,9 @@ pub enum MethodViolationCode {\n     /// e.g., `fn foo(&self) -> Self`\n     ReferencesSelfOutput,\n \n+    /// e.g., `fn foo(&self) -> impl Sized`\n+    ReferencesImplTraitInTrait,\n+\n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,\n "}, {"sha": "5542f187f93f7ecd6712fc1ee1e92b60e9a4d202", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "patch": "@@ -13,6 +13,7 @@ use super::elaborate_predicates;\n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n+use hir::def::DefKind;\n use rustc_errors::{FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -431,6 +432,9 @@ fn virtual_call_violation_for_method<'tcx>(\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n         return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n+    if contains_illegal_impl_trait_in_trait(tcx, sig.output()) {\n+        return Some(MethodViolationCode::ReferencesImplTraitInTrait);\n+    }\n \n     // We can't monomorphize things like `fn foo<A>(...)`.\n     let own_counts = tcx.generics_of(method.def_id).own_counts();\n@@ -793,6 +797,12 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                         ControlFlow::CONTINUE\n                     }\n                 }\n+                ty::Projection(ref data)\n+                    if self.tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                {\n+                    // We'll deny these later in their own pass\n+                    ControlFlow::CONTINUE\n+                }\n                 ty::Projection(ref data) => {\n                     // This is a projected type `<Foo as SomeTrait>::X`.\n \n@@ -861,6 +871,22 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n         .is_break()\n }\n \n+pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: ty::Binder<'tcx, Ty<'tcx>>,\n+) -> bool {\n+    // FIXME(RPITIT): Perhaps we should use a visitor here?\n+    ty.skip_binder().walk().any(|arg| {\n+        if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Projection(proj) = ty.kind()\n+        {\n+            tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { object_safety_violations, ..*providers };\n }"}, {"sha": "dd35b9a2d8a7513f5e253bdb4e87243dcb375ac6", "filename": "src/test/ui/impl-trait/in-trait/object-safety.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs?ref=6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "patch": "@@ -0,0 +1,22 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    fn baz(&self) -> impl Debug;\n+}\n+\n+impl Foo for u32 {\n+    fn baz(&self) -> u32 {\n+        32\n+    }\n+}\n+\n+fn main() {\n+    let i = Box::new(42_u32) as Box<dyn Foo>;\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+    //~| ERROR the trait `Foo` cannot be made into an object\n+    let s = i.baz();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "9a1554b5e1cbd6e25dd5cfda6a54442e204bbadc", "filename": "src/test/ui/impl-trait/in-trait/object-safety.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr?ref=6bacb6f6e9e1f8519392a08c98201cbd10bc4c5e", "patch": "@@ -0,0 +1,50 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:17:33\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:8\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:13\n+   |\n+LL |     let s = i.baz();\n+   |             ^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:8\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:17:13\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:8\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n+   = note: required by cast to type `Box<dyn Foo>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}]}