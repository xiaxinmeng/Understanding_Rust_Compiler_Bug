{"sha": "3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjM3MGI0YWI2NDVkNjVlMDcyOWIzYTQxOTk0NmE2ZjJmNGQxY2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-20T19:00:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:07Z"}, "message": "resolve/expand: Move macro stability checking to an earlier point", "tree": {"sha": "bf4d75dcbcab9b7380a84b4d2777c0829900f7af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4d75dcbcab9b7380a84b4d2777c0829900f7af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "html_url": "https://github.com/rust-lang/rust/commit/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "html_url": "https://github.com/rust-lang/rust/commit/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460"}], "stats": {"total": 68, "additions": 23, "deletions": 45}, "files": [{"sha": "dcdf0be41c2250f83dc31aa3755f7f817542a8c6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "patch": "@@ -229,16 +229,27 @@ impl<'a> base::Resolver for Resolver<'a> {\n             Err(determinacy) => return Err(determinacy),\n         };\n \n+        let span = invoc.span();\n         let format = match kind {\n             MacroKind::Derive => format!(\"derive({})\", fast_print_path(path)),\n             _ => fast_print_path(path),\n         };\n-        invoc.expansion_data.mark.set_expn_info(ext.expn_info(invoc.span(), &format));\n+        invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, &format));\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n-                self.session.span_err(invoc.span(),\n-                                      \"macro attributes must be placed before `#[derive]`\");\n+                self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n+            }\n+            if let Some((feature, issue)) = ext.unstable_feature {\n+                // Do not stability-check macros in the same crate.\n+                let features = self.session.features_untracked();\n+                if !def_id.is_local() &&\n+                   !span.allows_unstable(feature) &&\n+                   features.declared_lib_features.iter().all(|(feat, _)| *feat != feature) {\n+                    let msg = format!(\"macro {}! is unstable\", path);\n+                    emit_feature_err(&self.session.parse_sess, feature, span,\n+                                     GateIssue::Library(Some(issue)), &msg);\n+                }\n             }\n             self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n             let normal_module_def_id ="}, {"sha": "bde989a464b4158456b142129593bbf5a181f681", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "patch": "@@ -738,7 +738,6 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub module: Rc<ModuleData>,\n     pub directory_ownership: DirectoryOwnership,\n-    pub crate_span: Option<Span>,\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n@@ -768,7 +767,6 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n                 directory_ownership: DirectoryOwnership::Owned { relative: None },\n-                crate_span: None,\n             },\n             expansions: FxHashMap::default(),\n         }"}, {"sha": "6be5988d03bb6c7f54e2aa133e352c3d48aa348f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6370b4ab645d65e0729b3a419946a6f2f4d1cd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3b6370b4ab645d65e0729b3a419946a6f2f4d1cd", "patch": "@@ -243,7 +243,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         module.directory.pop();\n         self.cx.root_path = module.directory.clone();\n         self.cx.current_expansion.module = Rc::new(module);\n-        self.cx.current_expansion.crate_span = Some(krate.span);\n \n         let orig_mod_span = krate.module.inner;\n \n@@ -668,39 +667,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n         let path = &mac.node.path;\n \n-        let validate = |this: &mut Self| {\n-            // feature-gate the macro invocation\n-            if let Some((feature, issue)) = ext.unstable_feature {\n-                let crate_span = this.cx.current_expansion.crate_span.unwrap();\n-                // don't stability-check macros in the same crate\n-                if !crate_span.contains(ext.span)\n-                    && !span.allows_unstable(feature)\n-                    && this.cx.ecfg.features.map_or(true, |feats| {\n-                    // macro features will count as lib features\n-                    !feats.declared_lib_features.iter().any(|&(feat, _)| feat == feature)\n-                }) {\n-                    let explain = format!(\"macro {}! is unstable\", path);\n-                    emit_feature_err(this.cx.parse_sess, feature, span,\n-                                     GateIssue::Library(Some(issue)), &explain);\n-                    this.cx.trace_macros_diag();\n-                }\n-            }\n-\n-            Ok(())\n-        };\n-\n         let opt_expanded = match &ext.kind {\n+            SyntaxExtensionKind::Bang(expander) => {\n+                self.gate_proc_macro_expansion_kind(span, kind);\n+                let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                let result = self.parse_ast_fragment(tok_result, kind, path, span);\n+                self.gate_proc_macro_expansion(span, &result);\n+                result\n+            }\n             SyntaxExtensionKind::LegacyBang(expander) => {\n-                if let Err(dummy_span) = validate(self) {\n-                    dummy_span\n-                } else {\n-                    kind.make_from(expander.expand(\n-                        self.cx,\n-                        span,\n-                        mac.node.stream(),\n-                        Some(ext.span),\n-                    ))\n-                }\n+                let tok_result = expander.expand(self.cx, span, mac.node.stream(), Some(ext.span));\n+                kind.make_from(tok_result)\n             }\n \n             SyntaxExtensionKind::Attr(..) |\n@@ -717,14 +694,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)\n             }\n-\n-            SyntaxExtensionKind::Bang(expander) => {\n-                self.gate_proc_macro_expansion_kind(span, kind);\n-                let tok_result = expander.expand(self.cx, span, mac.node.stream());\n-                let result = self.parse_ast_fragment(tok_result, kind, path, span);\n-                self.gate_proc_macro_expansion(span, &result);\n-                result\n-            }\n         };\n \n         if opt_expanded.is_some() {"}]}