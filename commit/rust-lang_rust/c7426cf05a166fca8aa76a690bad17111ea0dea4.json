{"sha": "c7426cf05a166fca8aa76a690bad17111ea0dea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDI2Y2YwNWExNjZmY2E4YWE3NmE2OTBiYWQxNzExMWVhMGRlYTQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-06-12T16:06:14Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-06-12T16:48:14Z"}, "message": "debuginfo: Fix issue with unique type IDs not being passed to LLVM for LLVM 3.4", "tree": {"sha": "a078303743bcb3c35d54a6e323687aaaa7d1e7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a078303743bcb3c35d54a6e323687aaaa7d1e7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7426cf05a166fca8aa76a690bad17111ea0dea4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7426cf05a166fca8aa76a690bad17111ea0dea4", "html_url": "https://github.com/rust-lang/rust/commit/c7426cf05a166fca8aa76a690bad17111ea0dea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7426cf05a166fca8aa76a690bad17111ea0dea4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a98a4e422bd2d80ee7910b00c0286f1eefde9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a98a4e422bd2d80ee7910b00c0286f1eefde9c5", "html_url": "https://github.com/rust-lang/rust/commit/0a98a4e422bd2d80ee7910b00c0286f1eefde9c5"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "ac9cec84715264e1f483bedce9a22342f2525054", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7426cf05a166fca8aa76a690bad17111ea0dea4/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7426cf05a166fca8aa76a690bad17111ea0dea4/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=c7426cf05a166fca8aa76a690bad17111ea0dea4", "patch": "@@ -1809,6 +1809,7 @@ pub mod llvm {\n         pub fn LLVMRustDestroyArchive(AR: ArchiveRef);\n \n         pub fn LLVMRustSetDLLExportStorageClass(V: ValueRef);\n+        pub fn LLVMVersionMajor() -> c_int;\n         pub fn LLVMVersionMinor() -> c_int;\n \n         pub fn LLVMRustGetSectionName(SI: SectionIteratorRef,"}, {"sha": "0b10db56cc42696eae3b5e68b52f50274e324c32", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7426cf05a166fca8aa76a690bad17111ea0dea4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7426cf05a166fca8aa76a690bad17111ea0dea4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c7426cf05a166fca8aa76a690bad17111ea0dea4", "patch": "@@ -179,7 +179,6 @@ use std::collections::HashSet;\n use std::gc::Gc;\n use std::ptr;\n use std::rc::{Rc, Weak};\n-use std::sync::atomics;\n use syntax::util::interner::Interner;\n use syntax::codemap::{Span, Pos};\n use syntax::{abi, ast, codemap, ast_util, ast_map};\n@@ -2356,9 +2355,22 @@ fn set_members_of_composite_type(cx: &CrateContext,\n         let mut composite_types_completed =\n             debug_context(cx).composite_types_completed.borrow_mut();\n         if composite_types_completed.contains(&composite_type_metadata) {\n-            cx.sess().span_bug(definition_span, \"debuginfo::set_members_of_composite_type() - \\\n-                                                 Already completed forward declaration \\\n-                                                 re-encountered.\");\n+            let (llvm_version_major, llvm_version_minor) = unsafe {\n+                (llvm::LLVMVersionMajor(), llvm::LLVMVersionMinor())\n+            };\n+\n+            let actual_llvm_version = llvm_version_major * 1000000 + llvm_version_minor * 1000;\n+            let min_supported_llvm_version = 3 * 1000000 + 4 * 1000;\n+\n+            if actual_llvm_version < min_supported_llvm_version {\n+                cx.sess().warn(format!(\"This version of rustc was built with LLVM {}.{}. \\\n+                    Rustc just ran into a known debuginfo corruption problem that \\\n+                    often occurs with LLVM versions below 3.4. Please use a rustc built with a \\\n+                    newer version of LLVM.\", llvm_version_major, llvm_version_minor).as_slice());\n+            } else {\n+                cx.sess().bug(\"debuginfo::set_members_of_composite_type() - \\\n+                               Already completed forward declaration re-encountered.\");\n+            }\n         } else {\n             composite_types_completed.insert(composite_type_metadata);\n         }"}, {"sha": "f42844b9f19d2612e3b7873ab5a344b62556e6c4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7426cf05a166fca8aa76a690bad17111ea0dea4/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c7426cf05a166fca8aa76a690bad17111ea0dea4/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=c7426cf05a166fca8aa76a690bad17111ea0dea4", "patch": "@@ -318,7 +318,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang,\n         unwrapDI<DIType>(VTableHolder)\n-#if LLVM_VERSION_MINOR >= 5\n+#if LLVM_VERSION_MINOR >= 4\n         ,UniqueId\n #endif\n         ));\n@@ -510,7 +510,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         Flags,\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang\n-#if LLVM_VERSION_MINOR >= 5\n+#if LLVM_VERSION_MINOR >= 4\n         ,UniqueId\n #endif\n         ));\n@@ -734,6 +734,11 @@ LLVMVersionMinor() {\n     return LLVM_VERSION_MINOR;\n }\n \n+extern \"C\" int\n+LLVMVersionMajor() {\n+    return LLVM_VERSION_MAJOR;\n+}\n+\n // Note that the two following functions look quite similar to the\n // LLVMGetSectionName function. Sadly, it appears that this function only\n // returns a char* pointer, which isn't guaranteed to be null-terminated. The"}]}