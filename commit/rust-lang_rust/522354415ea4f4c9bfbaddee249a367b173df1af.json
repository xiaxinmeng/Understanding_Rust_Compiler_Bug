{"sha": "522354415ea4f4c9bfbaddee249a367b173df1af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMjM1NDQxNWVhNGY0YzliZmJhZGRlZTI0OWEzNjdiMTczZGYxYWY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-01T03:38:44Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-04T22:11:32Z"}, "message": "Pretty-print aggregates more prettily in MIR.", "tree": {"sha": "cf2de16448c3da9f5ccd84696dd5c3404860066e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2de16448c3da9f5ccd84696dd5c3404860066e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/522354415ea4f4c9bfbaddee249a367b173df1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/522354415ea4f4c9bfbaddee249a367b173df1af", "html_url": "https://github.com/rust-lang/rust/commit/522354415ea4f4c9bfbaddee249a367b173df1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/522354415ea4f4c9bfbaddee249a367b173df1af/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db76f311de670dd591c7c8ebb14799942c9161f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db76f311de670dd591c7c8ebb14799942c9161f", "html_url": "https://github.com/rust-lang/rust/commit/9db76f311de670dd591c7c8ebb14799942c9161f"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "56cd7432a73af2501f21384302ff8a031d097168", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/522354415ea4f4c9bfbaddee249a367b173df1af/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/522354415ea4f4c9bfbaddee249a367b173df1af/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=522354415ea4f4c9bfbaddee249a367b173df1af", "patch": "@@ -727,10 +727,68 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             BinaryOp(ref op, ref a, ref b) => write!(fmt, \"{:?}({:?}, {:?})\", op, a, b),\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Box(ref t) => write!(fmt, \"Box({:?})\", t),\n-            Aggregate(ref kind, ref lvs) => write!(fmt, \"Aggregate<{:?}>{:?}\", kind, lvs),\n             InlineAsm(ref asm) => write!(fmt, \"InlineAsm({:?})\", asm),\n             Slice { ref input, from_start, from_end } =>\n                 write!(fmt, \"{:?}[{:?}..-{:?}]\", input, from_start, from_end),\n+\n+            Aggregate(ref kind, ref lvs) => {\n+                use self::AggregateKind::*;\n+\n+                fn fmt_tuple(fmt: &mut Formatter, name: &str, lvs: &[Operand]) -> fmt::Result {\n+                    let mut tuple_fmt = fmt.debug_tuple(name);\n+                    for lv in lvs {\n+                        tuple_fmt.field(lv);\n+                    }\n+                    tuple_fmt.finish()\n+                }\n+\n+                match *kind {\n+                    Vec => write!(fmt, \"{:?}\", lvs),\n+\n+                    Tuple => {\n+                        if lvs.len() == 1 {\n+                            write!(fmt, \"({:?},)\", lvs[0])\n+                        } else {\n+                            fmt_tuple(fmt, \"\", lvs)\n+                        }\n+                    }\n+\n+                    Adt(adt_def, variant, _) => {\n+                        let variant_def = &adt_def.variants[variant];\n+                        let name = ty::tls::with(|tcx| tcx.item_path_str(variant_def.did));\n+\n+                        match variant_def.kind() {\n+                            ty::VariantKind::Unit => write!(fmt, \"{}\", name),\n+                            ty::VariantKind::Tuple => fmt_tuple(fmt, &name, lvs),\n+                            ty::VariantKind::Struct => {\n+                                let mut struct_fmt = fmt.debug_struct(&name);\n+                                for (field, lv) in variant_def.fields.iter().zip(lvs) {\n+                                    struct_fmt.field(&field.name.as_str(), lv);\n+                                }\n+                                struct_fmt.finish()\n+                            }\n+                        }\n+                    }\n+\n+                    Closure(def_id, _) => ty::tls::with(|tcx| {\n+                        if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n+                            let name = format!(\"[closure@{:?}]\", tcx.map.span(node_id));\n+                            let mut struct_fmt = fmt.debug_struct(&name);\n+\n+                            tcx.with_freevars(node_id, |freevars| {\n+                                for (freevar, lv) in freevars.iter().zip(lvs) {\n+                                    let var_name = tcx.local_var_name_str(freevar.def.var_id());\n+                                    struct_fmt.field(&var_name, lv);\n+                                }\n+                            });\n+\n+                            struct_fmt.finish()\n+                        } else {\n+                            write!(fmt, \"[closure]\")\n+                        }\n+                    }),\n+                }\n+            }\n         }\n     }\n }"}]}