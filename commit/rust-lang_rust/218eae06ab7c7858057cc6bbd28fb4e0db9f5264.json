{"sha": "218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOGVhZTA2YWI3Yzc4NTgwNTdjYzZiYmQyOGZiNGUwZGI5ZjUyNjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-27T07:48:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-28T13:12:34Z"}, "message": "Publicise types/add #[allow(visible_private_types)] to a variety of places.\n\nThere's a lot of these types in the compiler libraries, and a few of the\nolder or private stdlib ones. Some types are obviously meant to be\npublic, others not so much.", "tree": {"sha": "d5aeeb2e58f3c30ba64f35c7d8a1f0eddb55ca8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5aeeb2e58f3c30ba64f35c7d8a1f0eddb55ca8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "html_url": "https://github.com/rust-lang/rust/commit/218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbdd3b2ef6196f236a8333b7435f1b31390c0194", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdd3b2ef6196f236a8333b7435f1b31390c0194", "html_url": "https://github.com/rust-lang/rust/commit/fbdd3b2ef6196f236a8333b7435f1b31390c0194"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "2a2493688e62a9ca62ed2679bf48c89e5e38ae82", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(missing_doc)];\n+#[allow(visible_private_types)];\n \n use serialize::json;\n use serialize::json::ToJson;"}, {"sha": "dca1c869ad2fff441376a454c064fcdf473088f1", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -173,6 +173,7 @@\n \n // NB this does *not* include globs, please keep it that way.\n #[feature(macro_rules)];\n+#[allow(visible_private_types)];\n \n use std::mem::replace;\n use std::os;"}, {"sha": "9d70055086359b2a723845b885bcb7b6ffcf9805", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -71,6 +71,7 @@ struct Inner {\n     id: uint,\n }\n \n+#[allow(visible_private_types)]\n pub enum Req {\n     // Add a new timer to the helper thread.\n     NewTimer(~Inner),"}, {"sha": "68277efc9b7140c5411bf3f0bb1cb70a4b8ecedd", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -44,6 +44,7 @@ pub struct Timer {\n     priv on_worker: bool,\n }\n \n+#[allow(visible_private_types)]\n pub enum Req {\n     NewTimer(libc::c_int, Chan<()>, bool, imp::itimerspec),\n     RemoveTimer(libc::c_int, Chan<()>),"}, {"sha": "ff1a6bb7f7efb5b91ed32a0baea373e661a1beae", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -30,6 +30,8 @@ This API is completely unstable and subject to change.\n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n #[feature(quote)];\n \n+#[allow(visible_private_types)];\n+\n extern crate extra;\n extern crate flate;\n extern crate arena;"}, {"sha": "919a7b208d4d764a0a52dbf67c90f19fd1c74422", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -99,7 +99,7 @@ pub enum ExternalLocation {\n }\n \n /// Different ways an implementor of a trait can be rendered.\n-enum Implementor {\n+pub enum Implementor {\n     /// Paths are displayed specially by omitting the `impl XX for` cruft\n     PathType(clean::Type),\n     /// This is the generic representation of a trait implementor, used for"}, {"sha": "890f44faabc0d6e0280b7e3edca56c1651107928", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -41,6 +41,7 @@ via `close` and `delete` methods.\n \n #[feature(macro_rules)];\n #[deny(unused_result, unused_must_use)];\n+#[allow(visible_private_types)];\n \n #[cfg(test)] extern crate green;\n "}, {"sha": "ef641bbb6657f9514b4352fc77896f828393f5f3", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -1130,7 +1130,7 @@ pub mod types {\n                     Data4: [BYTE, ..8],\n                 }\n \n-                struct WSAPROTOCOLCHAIN {\n+                pub struct WSAPROTOCOLCHAIN {\n                     ChainLen: c_int,\n                     ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN],\n                 }"}, {"sha": "3cfa494d38293bb013085c81b5d1b96da1a7d5a1", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -24,6 +24,7 @@ pub trait Local<Borrowed> {\n     unsafe fn try_unsafe_borrow() -> Option<*mut Self>;\n }\n \n+#[allow(visible_private_types)]\n impl Local<local_ptr::Borrowed<Task>> for Task {\n     #[inline]\n     fn put(value: ~Task) { unsafe { local_ptr::put(value) } }\n@@ -127,4 +128,3 @@ mod test {\n     }\n \n }\n-"}, {"sha": "898004c665d1d9507895d5744b15f3c83a0dbe29", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -366,6 +366,7 @@ pub mod native {\n \n     #[inline]\n     #[cfg(not(test))]\n+    #[allow(visible_private_types)]\n     pub fn maybe_tls_key() -> Option<tls::Key> {\n         unsafe {\n             // NB: This is a little racy because, while the key is"}, {"sha": "b194a9fe308614de996ee2d13ae956349d8544c3", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -280,6 +280,7 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n \n #[cfg(not(target_arch = \"arm\"), not(test))]\n #[doc(hidden)]\n+#[allow(visible_private_types)]\n pub mod eabi {\n     use uw = super::libunwind;\n     use libc::c_int;\n@@ -333,6 +334,7 @@ pub mod eabi {\n // ARM EHABI uses a slightly different personality routine signature,\n // but otherwise works the same.\n #[cfg(target_arch = \"arm\", not(test))]\n+#[allow(visible_private_types)]\n pub mod eabi {\n     use uw = super::libunwind;\n     use libc::c_int;"}, {"sha": "861cd8ae7d301160886fb105da80acbd15b196d5", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -48,7 +48,7 @@ pub enum Architecture {\n static IntelBits: u32 = (1 << (X86 as uint)) | (1 << (X86_64 as uint));\n static ArmBits: u32 = (1 << (Arm as uint));\n \n-struct AbiData {\n+pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n@@ -59,7 +59,7 @@ struct AbiData {\n     abi_arch: AbiArchitecture\n }\n \n-enum AbiArchitecture {\n+pub enum AbiArchitecture {\n     RustArch,   // Not a real ABI (e.g., intrinsic)\n     AllArch,    // An ABI that specifies cross-platform defaults (e.g., \"C\")\n     Archs(u32)  // Multiple architectures (bitset)"}, {"sha": "260375b5f81d619c77da339e3108acc99d2f8fca", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eae06ab7c7858057cc6bbd28fb4e0db9f5264/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=218eae06ab7c7858057cc6bbd28fb4e0db9f5264", "patch": "@@ -31,6 +31,7 @@ This API is completely unstable and subject to change.\n #[feature(quote)];\n \n #[deny(non_camel_case_types)];\n+#[allow(visible_private_types)];\n \n extern crate serialize;\n extern crate term;"}]}