{"sha": "14982db2d68268458a3de03e395b2e9afe518b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OTgyZGIyZDY4MjY4NDU4YTNkZTAzZTM5NWIyZTlhZmU1MThiNTA=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-12-24T03:28:33Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-01-18T16:33:58Z"}, "message": "in which the unused-parens lint comes to cover function and method args\n\nResolves #46137.", "tree": {"sha": "d24dc1e4035a4109c9e78d52762b34eeff645e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d24dc1e4035a4109c9e78d52762b34eeff645e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14982db2d68268458a3de03e395b2e9afe518b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14982db2d68268458a3de03e395b2e9afe518b50", "html_url": "https://github.com/rust-lang/rust/commit/14982db2d68268458a3de03e395b2e9afe518b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14982db2d68268458a3de03e395b2e9afe518b50/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44afd76788df1a63fcd3fe19815eb28dbe9c2bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/44afd76788df1a63fcd3fe19815eb28dbe9c2bf7", "html_url": "https://github.com/rust-lang/rust/commit/44afd76788df1a63fcd3fe19815eb28dbe9c2bf7"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "1f6c6660d9beaf1f2418decd078480b10a6f2299", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -2480,7 +2480,7 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n             if other.is_contiguous() {\n                 ptr::copy(buf.offset(tail as isize), buf, len);\n             } else {\n-                if (tail - head) >= cmp::min((cap - tail), head) {\n+                if (tail - head) >= cmp::min(cap - tail, head) {\n                     // There is enough free space in the centre for the shortest block so we can\n                     // do this in at most three copy moves.\n                     if (cap - tail) > head {"}, {"sha": "7abd02b6656f3aa15f8192930d827fd302e9ff16", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -1434,7 +1434,7 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n         let max_change = S::MAX_EXP as i32 - (S::MIN_EXP as i32 - sig_bits) + 1;\n \n         // Clamp to one past the range ends to let normalize handle overflow.\n-        let exp_change = cmp::min(cmp::max(exp as i32, (-max_change - 1)), max_change);\n+        let exp_change = cmp::min(cmp::max(exp as i32, -max_change - 1), max_change);\n         self.exp = self.exp.saturating_add(exp_change as ExpInt);\n         self = self.normalize(round, Loss::ExactlyZero).value;\n         if self.is_nan() {"}, {"sha": "ef6475f9ee4c7b403aa607845363774d633425aa", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -302,6 +302,18 @@ impl EarlyLintPass for UnusedParens {\n             Assign(_, ref value) => (value, \"assigned value\", false),\n             AssignOp(.., ref value) => (value, \"assigned value\", false),\n             InPlace(_, ref value) => (value, \"emplacement value\", false),\n+            Call(_, ref args) => {\n+                for arg in args {\n+                    self.check_unused_parens_core(cx, arg, \"function argument\", false)\n+                }\n+                return;\n+            },\n+            MethodCall(_, ref args) => {\n+                for arg in &args[1..] { // first \"argument\" is self (which sometimes needs parens)\n+                    self.check_unused_parens_core(cx, arg, \"method argument\", false)\n+                }\n+                return;\n+            }\n             _ => return,\n         };\n         self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);"}, {"sha": "f543a33b130b6f9b2f05f402caa84a0ff8e3e9a3", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n }\n \n impl ReserveOrActivateIndex {\n-    fn reserved(i: BorrowIndex) -> Self { ReserveOrActivateIndex::new((i.index() * 2)) }\n+    fn reserved(i: BorrowIndex) -> Self { ReserveOrActivateIndex::new(i.index() * 2) }\n     fn active(i: BorrowIndex) -> Self { ReserveOrActivateIndex::new((i.index() * 2) + 1) }\n \n     pub(crate) fn is_reservation(self) -> bool { self.index() % 2 == 0 }"}, {"sha": "231a32c4382ca790271b58bc993ec66e22453a8f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -963,7 +963,7 @@ impl<'a> ModuleData<'a> {\n             unresolved_invocations: RefCell::new(FxHashSet()),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n-            globs: RefCell::new((Vec::new())),\n+            globs: RefCell::new(Vec::new()),\n             traits: RefCell::new(None),\n             populated: Cell::new(normal_ancestor_id.is_local()),\n             span,"}, {"sha": "525882c1e1ebb8134973b2c989474a0242da40e9", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -311,8 +311,8 @@ pub mod guard {\n \n     #[cfg(target_os = \"macos\")]\n     pub unsafe fn current() -> Option<usize> {\n-        Some((libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize -\n-              libc::pthread_get_stacksize_np(libc::pthread_self())))\n+        Some(libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize -\n+             libc::pthread_get_stacksize_np(libc::pthread_self()))\n     }\n \n     #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]"}, {"sha": "7cd0a6bbf0fd0ec4fdb9082553bcb0d1e85bcbb7", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14982db2d68268458a3de03e395b2e9afe518b50/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14982db2d68268458a3de03e395b2e9afe518b50/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=14982db2d68268458a3de03e395b2e9afe518b50", "patch": "@@ -13,19 +13,19 @@\n #[derive(Eq, PartialEq)]\n struct X { y: bool }\n impl X {\n-    fn foo(&self) -> bool { self.y }\n+    fn foo(&self, conjunct: bool) -> bool { self.y && conjunct }\n }\n \n fn foo() -> isize {\n     return (1); //~ ERROR unnecessary parentheses around `return` value\n }\n-fn bar() -> X {\n-    return (X { y: true }); //~ ERROR unnecessary parentheses around `return` value\n+fn bar(y: bool) -> X {\n+    return (X { y }); //~ ERROR unnecessary parentheses around `return` value\n }\n \n fn main() {\n     foo();\n-    bar();\n+    bar((true)); //~ ERROR unnecessary parentheses around function argument\n \n     if (true) {} //~ ERROR unnecessary parentheses around `if` condition\n     while (true) {} //~ ERROR unnecessary parentheses around `while` condition\n@@ -40,13 +40,15 @@ fn main() {\n     if (X { y: true } == v) {}\n     if (X { y: false }.y) {}\n \n-    while (X { y: false }.foo()) {}\n+    while (X { y: false }.foo(true)) {}\n     while (true | X { y: false }.y) {}\n \n     match (X { y: false }) {\n         _ => {}\n     }\n \n+    X { y: false }.foo((true)); //~ ERROR unnecessary parentheses around method argument\n+\n     let mut _a = (0); //~ ERROR unnecessary parentheses around assigned value\n     _a = (0); //~ ERROR unnecessary parentheses around assigned value\n     _a += (1); //~ ERROR unnecessary parentheses around assigned value"}]}