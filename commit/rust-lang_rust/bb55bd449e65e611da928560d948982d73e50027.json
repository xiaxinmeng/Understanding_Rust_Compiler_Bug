{"sha": "bb55bd449e65e611da928560d948982d73e50027", "node_id": "C_kwDOAAsO6NoAKGJiNTViZDQ0OWU2NWU2MTFkYTkyODU2MGQ5NDg5ODJkNzNlNTAwMjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T05:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T05:04:14Z"}, "message": "Auto merge of #95565 - jackh726:remove-borrowck-mode, r=nikomatsakis\n\nRemove migrate borrowck mode\n\nCloses #58781\nCloses #43234\n\n# Stabilization proposal\n\nThis PR proposes the stabilization of `#![feature(nll)]` and the removal of `-Z borrowck`. Current borrow checking behavior of item bodies is currently done by first infering regions *lexically* and reporting any errors during HIR type checking. If there *are* any errors, then MIR borrowck (NLL) never occurs. If there *aren't* any errors, then MIR borrowck happens and any errors there would be reported. This PR removes the lexical region check of item bodies entirely and only uses MIR borrowck. Because MIR borrowck could never *not* be run for a compiled program, this should not break any programs. It does, however, change diagnostics significantly and allows a slightly larger set of programs to compile.\n\nTracking issue: #43234\nRFC: https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\nVersion: 1.63 (2022-06-30 => beta, 2022-08-11 => stable).\n\n## Motivation\n\nOver time, the Rust borrow checker has become \"smarter\" and thus allowed more programs to compile. There have been three different implementations: AST borrowck, MIR borrowck, and polonius (well, in progress). Additionally, there is the \"lexical region resolver\", which (roughly) solves the constraints generated through HIR typeck. It is not a full borrow checker, but does emit some errors.\n\nThe AST borrowck was the original implementation of the borrow checker and was part of the initially stabilized Rust 1.0. In mid 2017, work began to implement the current MIR borrow checker and that effort ompleted by the end of 2017, for the most part. During 2018, efforts were made to migrate away from the AST borrow checker to the MIR borrow checker - eventually culminating into \"migrate\" mode - where HIR typeck with lexical region resolving following by MIR borrow checking - being active by default in the 2018 edition.\n\nIn early 2019, migrate mode was turned on by default in the 2015 edition as well, but with MIR borrowck errors emitted as warnings. By late 2019, these warnings were upgraded to full errors. This was followed by the complete removal of the AST borrow checker.\n\nIn the period since, various errors emitted by the MIR borrow checker have been improved to the point that they are mostly the same or better than those emitted by the lexical region resolver.\n\nWhile there do remain some degradations in errors (tracked under the [NLL-diagnostics tag](https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3ANLL-diagnostics), those are sufficiently small and rare enough that increased flexibility of MIR borrow check-only is now a worthwhile tradeoff.\n\n## What is stabilized\n\nAs said previously, this does not fundamentally change the landscape of accepted programs. However, there are a [few](https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3ANLL-fixed-by-NLL) cases where programs can compile under `feature(nll)`, but not otherwise.\n\nThere are two notable patterns that are \"fixed\" by this stabilization. First, the `scoped_threads` feature, which is a continutation of a pre-1.0 API, can sometimes emit a [weird lifetime error](https://github.com/rust-lang/rust/issues/95527) without NLL. Second, actually seen in the standard library. In the `Extend` impl for `HashMap`, there is an implied bound of `K: 'a` that is available with NLL on but not without - this is utilized in the impl.\n\nAs mentioned before, there are a large number of diagnostic differences. Most of them are better, but some are worse. None are serious or happen often enough to need to block this PR. The biggest change is the loss of error code for a number of lifetime errors in favor of more general \"lifetime may not live long enough\" error. While this may *seem* bad, the former error codes were just attempts to somewhat-arbitrarily bin together lifetime errors of the same type; however, on paper, they end up being roughly the same with roughly the same kinds of solutions.\n\n## What isn't stabilized\n\nThis PR does not completely remove the lexical region resolver. In the future, it may be possible to remove that (while still keeping HIR typeck) or to remove it together with HIR typeck.\n\n## Tests\n\nMany test outputs get updated by this PR. However, there are number of tests specifically geared towards NLL under `src/test/ui/nll`\n\n## History\n\n* On 2017-07-14, [tracking issue opened](https://github.com/rust-lang/rust/issues/43234)\n* On 2017-07-20, [initial empty MIR pass added](https://github.com/rust-lang/rust/pull/43271)\n* On 2017-08-29, [RFC opened](https://github.com/rust-lang/rfcs/pull/2094)\n* On 2017-11-16, [Integrate MIR type-checker with NLL](https://github.com/rust-lang/rust/pull/45825)\n* On 2017-12-20, [NLL feature complete](https://github.com/rust-lang/rust/pull/46862)\n* On 2018-07-07, [Don't run AST borrowck on mir mode](https://github.com/rust-lang/rust/pull/52083)\n* On 2018-07-27, [Add migrate mode](https://github.com/rust-lang/rust/pull/52681)\n* On 2019-04-22, [Enable migrate mode on 2015 edition](https://github.com/rust-lang/rust/pull/59114)\n* On 2019-08-26, [Don't downgrade errors on 2015 edition](https://github.com/rust-lang/rust/pull/64221)\n* On 2019-08-27, [Remove AST borrowck](https://github.com/rust-lang/rust/pull/64790)", "tree": {"sha": "42ed11d87c43a54391acc59d66e186924e1bfc3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ed11d87c43a54391acc59d66e186924e1bfc3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb55bd449e65e611da928560d948982d73e50027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb55bd449e65e611da928560d948982d73e50027", "html_url": "https://github.com/rust-lang/rust/commit/bb55bd449e65e611da928560d948982d73e50027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb55bd449e65e611da928560d948982d73e50027/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "html_url": "https://github.com/rust-lang/rust/commit/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0"}, {"sha": "410dcc96741716bf1b4dc9b3bf33f408f220384d", "url": "https://api.github.com/repos/rust-lang/rust/commits/410dcc96741716bf1b4dc9b3bf33f408f220384d", "html_url": "https://github.com/rust-lang/rust/commit/410dcc96741716bf1b4dc9b3bf33f408f220384d"}], "stats": {"total": 13943, "additions": 1815, "deletions": 12128}, "files": [{"sha": "cfc3d5b15a6ec40ab7776d1dc3d57bebd617ad66", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -33,7 +33,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![no_std]\n #![forbid(unsafe_code)]\n-#![feature(nll)]\n \n #[macro_use]\n extern crate alloc;"}, {"sha": "4b94ec0d6d8f488441bc881ebf58e2119b619598", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -17,7 +17,6 @@\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n-#![feature(nll)]\n #![feature(slice_internals)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]"}, {"sha": "124d0d18cdbe2ad0744d72ff5ff48492614f8d2e", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -9,7 +9,6 @@\n #![feature(is_sorted)]\n #![feature(let_chains)]\n #![feature(let_else)]\n-#![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "6713a75673550839bbc043d203149b9d97345975", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -9,7 +9,6 @@\n #![feature(let_else)]\n #![feature(extern_types)]\n #![feature(once_cell)]\n-#![feature(nll)]\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "453c57b46d74f6bc2a295776a849295eb05a5405", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -3,7 +3,6 @@\n #![feature(try_blocks)]\n #![feature(let_else)]\n #![feature(once_cell)]\n-#![feature(nll)]\n #![feature(associated_type_bounds)]\n #![feature(strict_provenance)]\n #![feature(int_roundings)]"}, {"sha": "8cdbb1a6704df35da364dd48e6971ac56de8343b", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -5,7 +5,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(nll)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "c5f7cf2e337ff3e003622e1d9e00499016ee75bb", "filename": "compiler/rustc_error_codes/src/error_codes/E0312.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0312.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0312.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0312.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Reference's lifetime of borrowed content doesn't match the expected lifetime.\n \n Erroneous code example:\n \n-```compile_fail,E0312\n+```compile_fail\n pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'static str {\n     if maybestr.is_none() {\n         \"(none)\""}, {"sha": "c6be8dc705e6e1435d7efad7454f4e41ce463be2", "filename": "compiler/rustc_error_codes/src/error_codes/E0477.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0477.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0477.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0477.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n The type does not fulfill the required lifetime.\n \n Erroneous code example:\n \n-```compile_fail,E0477\n+```compile_fail\n use std::sync::Mutex;\n \n struct MyString<'a> {"}, {"sha": "cd10e719312028f5aef28449f41b43a13e0c3f4a", "filename": "compiler/rustc_error_codes/src/error_codes/E0495.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0495.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0495.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0495.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A lifetime cannot be determined in the given situation.\n \n Erroneous code example:\n \n-```compile_fail,E0495\n+```compile_fail\n fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n     match (&t,) { // error!\n         ((u,),) => u,"}, {"sha": "34db641bb90ad36339b445216d84aaf6a4a01a1e", "filename": "compiler/rustc_error_codes/src/error_codes/E0623.md", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0623.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0623.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0623.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -3,39 +3,70 @@ A lifetime didn't match what was expected.\n Erroneous code example:\n \n ```compile_fail,E0623\n-struct Foo<'a> {\n-    x: &'a isize,\n-}\n+struct Foo<'a, 'b, T>(std::marker::PhantomData<(&'a (), &'b (), T)>)\n+where\n+    T: Convert<'a, 'b>;\n \n-fn bar<'short, 'long>(c: Foo<'short>, l: &'long isize) {\n-    let _: Foo<'long> = c; // error!\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {\n+    fn cast(&'long self) -> &'short T {\n+        self\n+    }\n+}\n+// error\n+fn badboi<'in_, 'out, T>(\n+    x: Foo<'in_, 'out, T>,\n+    sadness: &'in_ T\n+) -> &'out T {\n+    sadness.cast()\n }\n ```\n \n In this example, we tried to set a value with an incompatible lifetime to\n-another one (`'long` is unrelated to `'short`). We can solve this issue in\n+another one (`'in_` is unrelated to `'out`). We can solve this issue in\n two different ways:\n \n-Either we make `'short` live at least as long as `'long`:\n+Either we make `'in_` live at least as long as `'out`:\n \n ```\n-struct Foo<'a> {\n-    x: &'a isize,\n-}\n+struct Foo<'a, 'b, T>(std::marker::PhantomData<(&'a (), &'b (), T)>)\n+where\n+    T: Convert<'a, 'b>;\n \n-// we set 'short to live at least as long as 'long\n-fn bar<'short: 'long, 'long>(c: Foo<'short>, l: &'long isize) {\n-    let _: Foo<'long> = c; // ok!\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {\n+    fn cast(&'long self) -> &'short T {\n+        self\n+    }\n+}\n+fn badboi<'in_: 'out, 'out, T>(\n+    x: Foo<'in_, 'out, T>,\n+    sadness: &'in_ T\n+) -> &'out T {\n+    sadness.cast()\n }\n ```\n \n Or we use only one lifetime:\n \n ```\n-struct Foo<'a> {\n-    x: &'a isize,\n+struct Foo<'a, 'b, T>(std::marker::PhantomData<(&'a (), &'b (), T)>)\n+where\n+    T: Convert<'a, 'b>;\n+\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {\n+    fn cast(&'long self) -> &'short T {\n+        self\n+    }\n }\n-fn bar<'short>(c: Foo<'short>, l: &'short isize) {\n-    let _: Foo<'short> = c; // ok!\n+fn badboi<'out, T>(x: Foo<'out, 'out, T>, sadness: &'out T) -> &'out T {\n+    sadness.cast()\n }\n ```"}, {"sha": "9b1b77f3bc70652751f198928e76cc1dceff8686", "filename": "compiler/rustc_error_codes/src/error_codes/E0713.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0713.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0713.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0713.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -4,8 +4,6 @@ lifetime of a type that implements the `Drop` trait.\n Erroneous code example:\n \n ```compile_fail,E0713\n-#![feature(nll)]\n-\n pub struct S<'a> { data: &'a mut String }\n \n impl<'a> Drop for S<'a> {"}, {"sha": "ce5d42b3c7f0d39a9a351d95057d0e83e55cbe43", "filename": "compiler/rustc_error_codes/src/error_codes/E0759.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0759.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0759.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0759.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Return type involving a trait did not require `'static` lifetime.\n \n Erroneous code examples:\n \n-```compile_fail,E0759\n+```compile_fail\n use std::fmt::Debug;\n \n fn foo(x: &i32) -> impl Debug { // error!"}, {"sha": "5ffffd5112d38dff31049a1ae39e4aa97a8e0951", "filename": "compiler/rustc_error_codes/src/error_codes/E0772.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,9 +1,11 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A trait object has some specific lifetime `'1`, but it was used in a way that\n requires it to have a `'static` lifetime.\n \n Example of erroneous code:\n \n-```compile_fail,E0772\n+```compile_fail\n trait BooleanLike {}\n trait Person {}\n "}, {"sha": "3be6dd5af75ac7fc8ec541ab34bfb9c67134dafa", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -8,7 +8,6 @@\n #![feature(if_let_guard)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![feature(nll)]\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "071e88e07fd1e1f935da121b1a63d5e0ded98aec", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -221,6 +221,8 @@ declare_features! (\n     (accepted, native_link_modifiers, \"1.61.0\", Some(81490), None),\n     /// Allows specifying the whole-archive link modifier\n     (accepted, native_link_modifiers_whole_archive, \"1.61.0\", Some(81490), None),\n+    /// Allows using non lexical lifetimes (RFC 2094).\n+    (accepted, nll, \"1.63.0\", Some(43234), None),\n     /// Allows using `#![no_std]`.\n     (accepted, no_std, \"1.6.0\", None, None),\n     /// Allows defining identifiers beyond ASCII."}, {"sha": "b6ab60f9f03296464c8868edc6a2dee3122a86ca", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -461,8 +461,6 @@ declare_features! (\n     (active, never_type, \"1.13.0\", Some(35121), None),\n     /// Allows diverging expressions to fall back to `!` rather than `()`.\n     (active, never_type_fallback, \"1.41.0\", Some(65992), None),\n-    /// Allows using non lexical lifetimes (RFC 2094).\n-    (active, nll, \"1.0.0\", Some(43234), None),\n     /// Allows `#![no_core]`.\n     (active, no_core, \"1.3.0\", Some(29639), None),\n     /// Allows function attribute `#[no_coverage]`, to bypass coverage"}, {"sha": "6eaff5c2f746fc218be2ee4ea3bb23e38c283fc6", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -273,7 +273,6 @@\n     html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n-#![feature(nll)]\n \n use LabelText::*;\n "}, {"sha": "1e88e8091c37344c28174c6c88e1276cb3ca9803", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -3,7 +3,6 @@\n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(let_else)]\n-#![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "44cf9b6611eedb3af8ca01f7ae6299646a8cdb3e", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -42,18 +42,7 @@ pub(crate) fn resolve<'tcx>(\n             let values = resolver.infer_variable_values(&mut errors);\n             (values, errors)\n         }\n-        RegionckMode::Erase { suppress_errors: false } => {\n-            // Do real inference to get errors, then erase the results.\n-            let mut values = resolver.infer_variable_values(&mut errors);\n-            let re_erased = region_rels.tcx.lifetimes.re_erased;\n-\n-            values.values.iter_mut().for_each(|v| match *v {\n-                VarValue::Value(ref mut r) => *r = re_erased,\n-                VarValue::ErrorValue => {}\n-            });\n-            (values, errors)\n-        }\n-        RegionckMode::Erase { suppress_errors: true } => {\n+        RegionckMode::Erase => {\n             // Skip region inference entirely.\n             (resolver.erased_data(region_rels.tcx), Vec::new())\n         }"}, {"sha": "24a9b399eac6bc07f0aa9d23d48e4f43ba12b450", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -29,7 +29,6 @@ use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Substs\n pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n-use rustc_session::config::BorrowckMode;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n@@ -97,29 +96,7 @@ pub enum RegionckMode {\n     #[default]\n     Solve,\n     /// Erase the results of region after solving.\n-    Erase {\n-        /// A flag that is used to suppress region errors, when we are doing\n-        /// region checks that the NLL borrow checker will also do -- it might\n-        /// be set to true.\n-        suppress_errors: bool,\n-    },\n-}\n-\n-impl RegionckMode {\n-    /// Indicates that the MIR borrowck will repeat these region\n-    /// checks, so we should ignore errors if NLL is (unconditionally)\n-    /// enabled.\n-    pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {\n-        // FIXME(Centril): Once we actually remove `::Migrate` also make\n-        // this always `true` and then proceed to eliminate the dead code.\n-        match tcx.borrowck_mode() {\n-            // If we're on Migrate mode, report AST region errors\n-            BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },\n-\n-            // If we're on MIR, don't report AST region errors as they should be reported by NLL\n-            BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },\n-        }\n-    }\n+    Erase,\n }\n \n /// This type contains all the things within `InferCtxt` that sit within a"}, {"sha": "d443057eb7947a3aff6d17c391bc654e8091a092", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,7 +2,6 @@\n #![feature(let_else)]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n-#![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "f2cfbea207e5d21bc795937e81120f0f214a4cc1", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -644,7 +644,6 @@ fn test_debugging_options_tracking_hash() {\n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n     // This list is in alphabetical order.\n     untracked!(assert_incr_state, Some(String::from(\"loaded\")));\n-    untracked!(borrowck, String::from(\"other\"));\n     untracked!(deduplicate_diagnostics, false);\n     untracked!(dep_tasks, true);\n     untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));"}, {"sha": "ff4ed94fab339f9906fee1ad454d510db8ac2615", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -36,7 +36,6 @@\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![feature(nll)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "8eade02a408bcf2306206bc338c805753dc76c96", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n \n // NOTE: This crate only exists to allow linking on mingw targets."}, {"sha": "5ad16398695b255d2c566d0d3247089846162fa4", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -6,7 +6,6 @@\n #![feature(iter_from_generator)]\n #![feature(let_chains)]\n #![feature(let_else)]\n-#![feature(nll)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]\n #![feature(macro_metavar_expr)]"}, {"sha": "8004319bf9b8d98576035d19f6962fcbbaec5482", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -39,7 +39,6 @@\n #![feature(never_type)]\n #![feature(extern_types)]\n #![feature(new_uninit)]\n-#![feature(nll)]\n #![feature(once_cell)]\n #![feature(let_chains)]\n #![feature(let_else)]"}, {"sha": "e668edad7c43ebf2cb42cd78450139f7e2274254", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -49,7 +49,7 @@ use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n+use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1470,44 +1470,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.on_disk_cache.as_ref().map_or(Ok(()), |c| c.serialize(self, encoder))\n     }\n \n-    /// If `true`, we should use the MIR-based borrowck, but also\n-    /// fall back on the AST borrowck if the MIR-based one errors.\n-    pub fn migrate_borrowck(self) -> bool {\n-        self.borrowck_mode().migrate()\n-    }\n-\n-    /// What mode(s) of borrowck should we run? AST? MIR? both?\n-    /// (Also considers the `#![feature(nll)]` setting.)\n-    pub fn borrowck_mode(self) -> BorrowckMode {\n-        // Here are the main constraints we need to deal with:\n-        //\n-        // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is\n-        //    synonymous with no `-Z borrowck=...` flag at all.\n-        //\n-        // 2. We want to allow developers on the Nightly channel\n-        //    to opt back into the \"hard error\" mode for NLL,\n-        //    (which they can do via specifying `#![feature(nll)]`\n-        //    explicitly in their crate).\n-        //\n-        // So, this precedence list is how pnkfelix chose to work with\n-        // the above constraints:\n-        //\n-        // * `#![feature(nll)]` *always* means use NLL with hard\n-        //   errors. (To simplify the code here, it now even overrides\n-        //   a user's attempt to specify `-Z borrowck=compare`, which\n-        //   we arguably do not need anymore and should remove.)\n-        //\n-        // * Otherwise, if no `-Z borrowck=...` then use migrate mode\n-        //\n-        // * Otherwise, use the behavior requested via `-Z borrowck=...`\n-\n-        if self.features().nll {\n-            return BorrowckMode::Mir;\n-        }\n-\n-        self.sess.opts.borrowck_mode\n-    }\n-\n     /// If `true`, we should use lazy normalization for constants, otherwise\n     /// we still evaluate them eagerly.\n     #[inline]"}, {"sha": "497c0931c218200d74a6c3bb434b040a759ceee3", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -11,7 +11,6 @@\n #![feature(let_chains)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n-#![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "1195045bdea4a5f51cd8706c2977d3038d909852", "filename": "compiler/rustc_plugin_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -7,7 +7,6 @@\n //! of the Unstable Book for some examples.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(nll)]\n #![recursion_limit = \"256\"]\n \n use rustc_lint::LintStore;"}, {"sha": "82ea78648c77d3e305c999ac0d9b981c2eda9a7d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,4 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(nll)]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]"}, {"sha": "5e28c229aa5cef37c2dc9219f4f8480393067d4c", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,6 @@\n //! Support for serializing the dep-graph and reloading it.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(nll)]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![feature(rustc_attrs)]"}, {"sha": "92a65fe249f4c674d2c0630b6096932ed0db8862", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -13,7 +13,7 @@\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![feature(nll)]\n+#![cfg_attr(bootstrap, feature(nll))]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "99f38b3222dca4c70dd0f9bf8b8773a222d75bbf", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(if_let_guard)]\n-#![feature(nll)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "e606f427335b711a7e3f2d13593be6aca6d130a6", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -10,7 +10,6 @@ Core encoding and decoding interfaces.\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![feature(never_type)]\n-#![feature(nll)]\n #![feature(associated_type_bounds)]\n #![feature(min_specialization)]\n #![feature(core_intrinsics)]"}, {"sha": "5190cd4493661b523c77d3f68e44dfdda4b07355", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -741,7 +741,6 @@ impl Default for Options {\n             incremental: None,\n             debugging_opts: Default::default(),\n             prints: Vec::new(),\n-            borrowck_mode: BorrowckMode::Migrate,\n             cg: Default::default(),\n             error_format: ErrorOutputType::default(),\n             externs: Externs(BTreeMap::new()),\n@@ -2084,14 +2083,6 @@ fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<\n         .collect()\n }\n \n-fn parse_borrowck_mode(dopts: &DebuggingOptions, error_format: ErrorOutputType) -> BorrowckMode {\n-    match dopts.borrowck.as_ref() {\n-        \"migrate\" => BorrowckMode::Migrate,\n-        \"mir\" => BorrowckMode::Mir,\n-        m => early_error(error_format, &format!(\"unknown borrowck mode `{m}`\")),\n-    }\n-}\n-\n pub fn parse_externs(\n     matches: &getopts::Matches,\n     debugging_opts: &DebuggingOptions,\n@@ -2429,8 +2420,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let test = matches.opt_present(\"test\");\n \n-    let borrowck_mode = parse_borrowck_mode(&debugging_opts, error_format);\n-\n     if !cg.remark.is_empty() && debuginfo == DebugInfo::None {\n         early_warn(error_format, \"-C remark requires \\\"-C debuginfo=n\\\" to show source locations\");\n     }\n@@ -2506,7 +2495,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         incremental,\n         debugging_opts,\n         prints,\n-        borrowck_mode,\n         cg,\n         error_format,\n         externs,"}, {"sha": "181acc224fa9c3ac1d527a02fed11e0c60851c1b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -178,9 +178,6 @@ top_level_options!(\n \n         debugging_opts: DebuggingOptions [SUBSTRUCT],\n         prints: Vec<PrintRequest> [UNTRACKED],\n-        /// Determines which borrow checker(s) to run. This is the parsed, sanitized\n-        /// version of `debugging_opts.borrowck`, which is just a plain string.\n-        borrowck_mode: BorrowckMode [UNTRACKED],\n         cg: CodegenOptions [SUBSTRUCT],\n         externs: Externs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n@@ -1210,8 +1207,6 @@ options! {\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n         \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n         (default: no)\"),\n-    borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n-        \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n     branch_protection: Option<BranchProtection> = (None, parse_branch_protection, [TRACKED],\n         \"set options for branch target identification and pointer authentication on AArch64\"),\n     cf_protection: CFProtection = (CFProtection::None, parse_cfprotection, [TRACKED],"}, {"sha": "ae0228d6ea0cdfecd5adee50ac3c4726c26ec47b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -18,7 +18,6 @@\n #![feature(let_else)]\n #![feature(if_let_guard)]\n #![feature(negative_impls)]\n-#![feature(nll)]\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "46f70bb1674df37cc530b316fc433794ad41f1b9", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -89,7 +89,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n-#![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "a8ddcc9bfac645fd8c25e5f67123a1f829dc528d", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -13,7 +13,6 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(nll)]\n #![feature(rustc_attrs)]\n #![feature(step_trait)]\n "}, {"sha": "2bea164c051145778afd71f9d75c525c1dde5364", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,7 +2,6 @@\n //! the guts are broken up into modules; see the comments in those modules.\n \n #![feature(let_else)]\n-#![feature(nll)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "484967bbef8ce838d3a57ceee6cfd986264625f3", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n-#![feature(nll)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "e4be4603558e8754518d62a39d6fc4cb9e46fd12", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n         }\n-        rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));\n+        rcx.resolve_regions_and_report_errors(RegionckMode::Erase);\n     }\n \n     /// Region checking during the WF phase for items. `wf_tys` are the\n@@ -208,7 +208,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n         }\n \n-        rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));\n+        rcx.resolve_regions_and_report_errors(RegionckMode::Erase);\n     }\n }\n "}, {"sha": "2fc9705527b646aa45cc50ec8bdda77cffc5ea0b", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -69,7 +69,6 @@ This API is completely unstable and subject to change.\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n-#![feature(nll)]\n #![feature(once_cell)]\n #![feature(slice_partition_dedup)]\n #![feature(try_blocks)]"}, {"sha": "baa1106a0dd7b9aab73afa70630931bffc41c2dc", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -166,7 +166,6 @@\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n-#![feature(nll)] // Not necessary, but here to test the `nll` feature.\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(rustc_attrs)]\n #![feature(pointer_is_aligned)]"}, {"sha": "6a01b4a2e284178f3745b611eba69e265ac30c33", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -9,7 +9,6 @@\n #![panic_runtime]\n #![allow(unused_features)]\n #![feature(core_intrinsics)]\n-#![feature(nll)]\n #![feature(panic_runtime)]\n #![feature(std_internals)]\n #![feature(staged_api)]"}, {"sha": "f9acb42c46b99915310ff1865c8ae7aa3aed30a7", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -16,7 +16,6 @@\n #![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![feature(core_intrinsics)]\n #![feature(lang_items)]\n-#![feature(nll)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n #![feature(std_internals)]"}, {"sha": "30ad3d2388082cfa6671a8bdf2e89c87478dca9d", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -21,7 +21,6 @@\n // Please avoid unstable features where possible to minimize the amount of changes necessary\n // to make it compile with rust-analyzer on stable.\n #![feature(rustc_allow_const_fn_unstable)]\n-#![feature(nll)]\n #![feature(staged_api)]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]"}, {"sha": "0c83bcee06ff41f04cb8dfc5ef12e3e3eb067805", "filename": "library/profiler_builtins/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Fprofiler_builtins%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Fprofiler_builtins%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -7,5 +7,4 @@\n     issue = \"none\"\n )]\n #![allow(unused_features)]\n-#![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "52a02e998b4eea4335c9cab0380d71726e77778a", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2167,7 +2167,7 @@ mod use_keyword {}\n /// is missing: the `'b` lifetime is not known to live at least as long as `'a`\n /// which means this function cannot ensure it always returns a valid reference:\n ///\n-/// ```rust,compile_fail,E0623\n+/// ```rust,compile_fail\n /// fn select<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n /// {\n ///     if second { s2 } else { s1 }"}, {"sha": "b1c68ec43bc99314d049d84cb2e10ce26accca48", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -248,7 +248,7 @@\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n-#![feature(nll)]\n+#![cfg_attr(bootstrap, feature(nll))]\n #![feature(platform_intrinsics)]\n #![feature(prelude_import)]\n #![feature(rustc_attrs)]"}, {"sha": "3b7193adcc758801cf7a773cec240f7f1aa93746", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -15,7 +15,6 @@\n \n #![unstable(feature = \"test\", issue = \"50297\")]\n #![doc(test(attr(deny(warnings))))]\n-#![feature(nll)]\n #![feature(bench_black_box)]\n #![feature(internal_output_capture)]\n #![feature(staged_api)]"}, {"sha": "15254bc755beabbc54bcb437647d28f0e29e2114", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,7 +2,6 @@\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![feature(link_cfg)]\n #![feature(native_link_modifiers_bundle)]\n-#![feature(nll)]\n #![feature(staged_api)]\n #![feature(c_unwind)]\n #![feature(cfg_target_abi)]"}, {"sha": "f692ff72d4eb9aa908f66361adb01d5bbc2e5df6", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -452,7 +452,7 @@ Arguments:\n         ./x.py test library/std --test-args hash_map\n         ./x.py test library/std --stage 0 --no-doc\n         ./x.py test src/test/ui --bless\n-        ./x.py test src/test/ui --compare-mode nll\n+        ./x.py test src/test/ui --compare-mode chalk\n \n     Note that `test src/test/* --stage N` does NOT depend on `build compiler/rustc --stage N`;\n     just like `build library/std --stage N` it tests the compiler produced by the previous"}, {"sha": "8a236ec5130b9e60ded357f35838c50a8850dbac", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1167,12 +1167,7 @@ macro_rules! test_definitions {\n     };\n }\n \n-default_test_with_compare_mode!(Ui {\n-    path: \"src/test/ui\",\n-    mode: \"ui\",\n-    suite: \"ui\",\n-    compare_mode: \"nll\"\n-});\n+default_test!(Ui { path: \"src/test/ui\", mode: \"ui\", suite: \"ui\" });\n \n default_test!(RunPassValgrind {\n     path: \"src/test/run-pass-valgrind\","}, {"sha": "ea842a85070d85652bee0fbbcf606815c4642101", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -11,7 +11,7 @@\n #![feature(drain_filter)]\n #![feature(let_chains)]\n #![feature(let_else)]\n-#![feature(nll)]\n+#![cfg_attr(bootstrap, feature(nll))]\n #![feature(test)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "0d0204e126a6c0534dd16ee704b887ddb751d01b", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,113 +1,113 @@\n // MIR for `full_tested_match` after PromoteTemps\n \n fn full_tested_match() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:14:28: 14:28\n-    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n-    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:16:35: 16:36\n-    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n-    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:17:24: 17:25\n-    let mut _11: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:12:28: 12:28\n+    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:13:13: 17:6\n+    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:14:9: 14:16\n+    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n+    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n+    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:14:20: 14:27\n+    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:14:35: 14:36\n+    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:15:14: 15:15\n+    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:15:24: 15:25\n+    let mut _11: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n     scope 1 {\n     }\n     scope 2 {\n-        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:16:14: 16:15\n-        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:16:14: 16:15\n+        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:14:14: 14:15\n+        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:14:14: 14:15\n     }\n     scope 3 {\n-        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:17:14: 17:15\n+        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:15:14: 15:15\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n-        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:15:13: 15:27\n+        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:13:13: 17:6\n+        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:13:13: 13:27\n     }\n \n     bb1: {\n-        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n+        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:16:17: 16:23\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:16:17: 16:23\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:14:9: 14:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:15:9: 15:16\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n+        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n+        _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n                                          // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:16:14: 16:15\n+                                         // + span: $DIR/match_false_edges.rs:14:14: 14:15\n                                          // + literal: Const { ty: &Option<i32>, val: Unevaluated(full_tested_match, [], Some(promoted[0])) }\n-        _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n+        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:13:19: 13:27\n+        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:14:20: 14:27\n+        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:14:20: 14:27\n                                          // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:16:20: 16:25\n+                                         // + span: $DIR/match_false_edges.rs:14:20: 14:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:14:20: 14:27\n     }\n \n     bb7: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n-        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n-        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n-        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n-        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:16:35: 16:36\n-        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:16:31: 16:37\n-        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n-        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:14:26: 14:27\n+        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:14:26: 14:27\n+        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:14:26: 14:27\n+        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n+        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:14:14: 14:15\n+        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:14:35: 14:36\n+        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:14:35: 14:36\n+        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:14:31: 14:37\n+        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:14:36: 14:37\n+        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:14:36: 14:37\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:14:36: 14:37\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:14:36: 14:37\n     }\n \n     bb8: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:14:26: 14:27\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:14:36: 14:37\n+        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:14:20: 14:27\n     }\n \n     bb9: {\n-        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n-        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n-        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n-        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n-        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n-        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n-        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n+        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:15:14: 15:15\n+        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:15:14: 15:15\n+        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:15:24: 15:25\n+        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:15:24: 15:25\n+        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:15:20: 15:26\n+        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:15:25: 15:26\n+        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:15:25: 15:26\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:25: 15:26\n     }\n \n     bb10: {\n-        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n-        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n-        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n-        return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n+        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:17:6: 17:7\n+        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:17:6: 17:7\n+        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:12:28: 18:2\n+        return;                          // scope 0 at $DIR/match_false_edges.rs:18:2: 18:2\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:12:1: 18:2\n     }\n }"}, {"sha": "270cc85ce032a5546440c3a33893a6491bc01ae6", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,108 +1,108 @@\n // MIR for `full_tested_match2` before PromoteTemps\n \n fn full_tested_match2() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:25:29: 25:29\n-    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n-    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:27:35: 27:36\n-    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n-    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:29:24: 29:25\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:23:29: 23:29\n+    let mut _1: (i32, i32);              // in scope 0 at $DIR/match_false_edges.rs:24:13: 28:6\n+    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:25:9: 25:16\n+    let mut _4: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+    let _5: i32;                         // in scope 0 at $DIR/match_false_edges.rs:25:14: 25:15\n+    let _6: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:25:14: 25:15\n+    let mut _7: bool;                    // in scope 0 at $DIR/match_false_edges.rs:25:20: 25:27\n+    let mut _8: i32;                     // in scope 0 at $DIR/match_false_edges.rs:25:35: 25:36\n+    let _9: i32;                         // in scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+    let mut _10: i32;                    // in scope 0 at $DIR/match_false_edges.rs:27:24: 27:25\n     scope 1 {\n     }\n     scope 2 {\n-        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:27:14: 27:15\n-        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:27:14: 27:15\n+        debug x => _5;                   // in scope 2 at $DIR/match_false_edges.rs:25:14: 25:15\n+        debug x => _6;                   // in scope 2 at $DIR/match_false_edges.rs:25:14: 25:15\n     }\n     scope 3 {\n-        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:29:14: 29:15\n+        debug y => _9;                   // in scope 3 at $DIR/match_false_edges.rs:27:14: 27:15\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n-        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:26:13: 26:27\n+        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:24:13: 28:6\n+        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+        _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:24:13: 24:27\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+        falseEdge -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:26:9: 26:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:25:9: 25:16\n     }\n \n     bb3: {\n-        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n-        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n-        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n-        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n-        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n-        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n-        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n+        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n+        StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:27:24: 27:25\n+        _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:27:24: 27:25\n+        _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:27:20: 27:26\n+        StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:27:25: 27:26\n+        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:27:25: 27:26\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:27:25: 27:26\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:25:14: 25:15\n+        _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:25:14: 25:15\n+        _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:24:19: 24:27\n+        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:25:20: 25:27\n+        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:25:20: 25:27\n                                          // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:27:20: 27:25\n+                                         // + span: $DIR/match_false_edges.rs:25:20: 25:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:25:20: 25:27\n     }\n \n     bb7: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n-        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n-        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n-        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n-        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n-        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:27:35: 27:36\n-        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:27:31: 27:37\n-        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n-        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:25:26: 25:27\n+        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:25:26: 25:27\n+        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:25:26: 25:27\n+        StorageLive(_5);                 // scope 0 at $DIR/match_false_edges.rs:25:14: 25:15\n+        _5 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:25:14: 25:15\n+        StorageLive(_8);                 // scope 2 at $DIR/match_false_edges.rs:25:35: 25:36\n+        _8 = _5;                         // scope 2 at $DIR/match_false_edges.rs:25:35: 25:36\n+        _1 = (const 1_i32, move _8);     // scope 2 at $DIR/match_false_edges.rs:25:31: 25:37\n+        StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:25:36: 25:37\n+        StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:25:36: 25:37\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:25:36: 25:37\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:25:36: 25:37\n     }\n \n     bb8: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:25:26: 25:27\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:25:36: 25:37\n+        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:25:20: 25:27\n     }\n \n     bb9: {\n-        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n+        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:26:17: 26:23\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:17: 26:23\n     }\n \n     bb10: {\n-        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n-        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n-        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n-        return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n+        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:28:6: 28:7\n+        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:28:6: 28:7\n+        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:23:29: 29:2\n+        return;                          // scope 0 at $DIR/match_false_edges.rs:29:2: 29:2\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:23:1: 29:2\n     }\n }"}, {"sha": "2f76e0137bd69ec1fc7f7685d22ee63f8336485f", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,153 +1,153 @@\n // MIR for `main` before PromoteTemps\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:34:11: 34:11\n-    let mut _1: i32;                     // in scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n-    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n-    let mut _4: isize;                   // in scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-    let mut _5: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-    let _6: i32;                         // in scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-    let _7: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-    let mut _8: bool;                    // in scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-    let _9: std::option::Option<i32>;    // in scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n-    let _10: i32;                        // in scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-    let _11: &i32;                       // in scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-    let mut _12: bool;                   // in scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n-    let mut _13: i32;                    // in scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-    let _14: std::option::Option<i32>;   // in scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n+    let mut _0: ();                      // return place in scope 0 at $DIR/match_false_edges.rs:32:11: 32:11\n+    let mut _1: i32;                     // in scope 0 at $DIR/match_false_edges.rs:33:13: 38:6\n+    let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+    let mut _3: isize;                   // in scope 0 at $DIR/match_false_edges.rs:36:9: 36:16\n+    let mut _4: isize;                   // in scope 0 at $DIR/match_false_edges.rs:34:9: 34:17\n+    let mut _5: &std::option::Option<i32>; // in scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+    let _6: i32;                         // in scope 0 at $DIR/match_false_edges.rs:34:14: 34:16\n+    let _7: &i32;                        // in scope 0 at $DIR/match_false_edges.rs:34:14: 34:16\n+    let mut _8: bool;                    // in scope 0 at $DIR/match_false_edges.rs:34:21: 34:28\n+    let _9: std::option::Option<i32>;    // in scope 0 at $DIR/match_false_edges.rs:35:9: 35:11\n+    let _10: i32;                        // in scope 0 at $DIR/match_false_edges.rs:36:14: 36:15\n+    let _11: &i32;                       // in scope 0 at $DIR/match_false_edges.rs:36:14: 36:15\n+    let mut _12: bool;                   // in scope 0 at $DIR/match_false_edges.rs:36:20: 36:29\n+    let mut _13: i32;                    // in scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+    let _14: std::option::Option<i32>;   // in scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     scope 1 {\n     }\n     scope 2 {\n-        debug _w => _6;                  // in scope 2 at $DIR/match_false_edges.rs:36:14: 36:16\n-        debug _w => _7;                  // in scope 2 at $DIR/match_false_edges.rs:36:14: 36:16\n+        debug _w => _6;                  // in scope 2 at $DIR/match_false_edges.rs:34:14: 34:16\n+        debug _w => _7;                  // in scope 2 at $DIR/match_false_edges.rs:34:14: 34:16\n     }\n     scope 3 {\n-        debug _x => _9;                  // in scope 3 at $DIR/match_false_edges.rs:37:9: 37:11\n+        debug _x => _9;                  // in scope 3 at $DIR/match_false_edges.rs:35:9: 35:11\n     }\n     scope 4 {\n-        debug y => _10;                  // in scope 4 at $DIR/match_false_edges.rs:38:14: 38:15\n-        debug y => _11;                  // in scope 4 at $DIR/match_false_edges.rs:38:14: 38:15\n+        debug y => _10;                  // in scope 4 at $DIR/match_false_edges.rs:36:14: 36:15\n+        debug y => _11;                  // in scope 4 at $DIR/match_false_edges.rs:36:14: 36:15\n     }\n     scope 5 {\n-        debug _z => _14;                 // in scope 5 at $DIR/match_false_edges.rs:39:9: 39:11\n+        debug _z => _14;                 // in scope 5 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n-        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:35:13: 35:26\n+        StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:33:13: 38:6\n+        StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+        _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+        _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:33:13: 33:26\n     }\n \n     bb1: {\n-        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:35:9: 35:11\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:34:9: 34:17\n     }\n \n     bb3: {\n-        StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n-        _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n-        _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n-        StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n+        StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:37:15: 37:16\n+        StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n     }\n \n     bb4: {\n-        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:16\n     }\n \n     bb5: {\n-        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-        _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:34:14: 34:16\n+        _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:34:14: 34:16\n+        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+        StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:34:21: 34:28\n+        _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:34:21: 34:28\n                                          // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:36:21: 36:26\n+                                         // + span: $DIR/match_false_edges.rs:34:21: 34:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:34:21: 34:28\n     }\n \n     bb7: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n-        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n-        FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n-        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n-        _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n-        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n+        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:34:27: 34:28\n+        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:34:27: 34:28\n+        FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:34:27: 34:28\n+        StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:34:14: 34:16\n+        _6 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:34:14: 34:16\n+        _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:34:32: 34:33\n+        StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:34:32: 34:33\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:34:32: 34:33\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:34:32: 34:33\n     }\n \n     bb8: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n-        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:34:27: 34:28\n+        StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:34:32: 34:33\n+        falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:34:21: 34:28\n     }\n \n     bb9: {\n-        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n-        _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n-        _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n-        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n+        StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:35:9: 35:11\n+        _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:35:9: 35:11\n+        _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:35:15: 35:16\n+        StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:35:15: 35:16\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:15: 35:16\n     }\n \n     bb10: {\n-        StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n-        StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:36:14: 36:15\n+        _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:36:14: 36:15\n+        _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:33:19: 33:26\n+        StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:36:20: 36:29\n+        StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+        _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n+        _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:20: 36:29\n                                          // mir::Constant\n-                                         // + span: $DIR/match_false_edges.rs:38:20: 38:26\n+                                         // + span: $DIR/match_false_edges.rs:36:20: 36:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb11: {\n-        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:36:20: 36:29\n     }\n \n     bb12: {\n-        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n-        _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n-        StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n+        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:36:28: 36:29\n+        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:36:28: 36:29\n+        FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:28: 36:29\n+        FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:36:28: 36:29\n+        StorageLive(_10);                // scope 0 at $DIR/match_false_edges.rs:36:14: 36:15\n+        _10 = ((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:15\n+        _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:36:33: 36:34\n+        StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n     }\n \n     bb13: {\n-        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:36:28: 36:29\n+        StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:36:28: 36:29\n+        StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n+        falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:36:20: 36:29\n     }\n \n     bb14: {\n-        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n-        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n-        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n-        return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n+        StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:38:6: 38:7\n+        StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:38:6: 38:7\n+        _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:32:11: 39:2\n+        return;                          // scope 0 at $DIR/match_false_edges.rs:39:2: 39:2\n     }\n \n     bb15 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:32:1: 39:2\n     }\n }"}, {"sha": "3603253dafcc3786627d874262931e726441c793", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z borrowck=mir\n-\n fn guard() -> bool {\n     false\n }"}, {"sha": "843716033ca41a073edb4941b2ba2ec4b65a67fc", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -3,8 +3,8 @@\n // suitable variables and that we setup the outlives relationship\n // between R0 and R1 properly.\n \n-// compile-flags:-Zborrowck=mir -Zverbose\n-//                              ^^^^^^^^^ force compiler to dump more region information\n+// compile-flags: -Zverbose\n+//                ^^^^^^^^^ force compiler to dump more region information\n \n #![allow(warnings)]\n "}, {"sha": "64332f302e82ea8d0794c484d4443ae4fe6dddaf", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,8 +2,8 @@\n // in the type of `p` includes the points after `&v[0]` up to (but not\n // including) the call to `use_x`. The `else` branch is not included.\n \n-// compile-flags:-Zborrowck=mir -Zverbose\n-//                              ^^^^^^^^^ force compiler to dump more region information\n+// compile-flags:-Zverbose\n+//               ^^^^^^^^^ force compiler to dump more region information\n \n #![allow(warnings)]\n "}, {"sha": "b4db182e85f267791be1e99da124c4dee67e4a2d", "filename": "src/test/run-make-fulldeps/rustdoc-error-lines/input.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2Finput.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -3,7 +3,7 @@\n // random #![feature] to ensure that crate attrs\n // do not offset things\n /// ```rust\n-/// #![feature(nll)]\n+/// #![feature(bool_to_option)]\n /// let x: char = 1;\n /// ```\n pub fn foo() {\n@@ -13,7 +13,7 @@ pub fn foo() {\n /// Add some text around the test...\n ///\n /// ```rust\n-/// #![feature(nll)]\n+/// #![feature(bool_to_option)]\n /// let x: char = 1;\n /// ```\n ///\n@@ -22,7 +22,7 @@ pub fn foo() {\n /// Let's also add a second test in the same doc comment.\n ///\n /// ```rust\n-/// #![feature(nll)]\n+/// #![feature(bool_to_option)]\n /// let x: char = 1;\n /// ```\n pub fn bar() {}"}, {"sha": "b4437069cd745ae0449f8993af68a5b1cce2cb8d", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.base.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,21 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:21:64\n-   |\n-LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n-   |                          ------------- this type is declared with multiple lifetimes...\n-...\n-LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n-   |                                                                ^^^^^ ...but data with one lifetime flows into the other here\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:43:72\n-   |\n-LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n-   |                           -------------- this type is declared with multiple lifetimes...\n-...\n-LL |             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n-   |                                                                        ^^ ...but data with one lifetime flows into the other here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "38219da61b4eced61ef791b43800cf7132c86133", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }\n@@ -19,8 +15,7 @@ where\n {\n     // This should fail because `T: 'b` is not implied from `WF(St<'a, 'b, T>)`.\n     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n-    //[base]~^ ERROR lifetime mismatch [E0623]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n enum En7<'a, 'b, T> // `<T::As1 as Tr2>::As2: 'a` is implied.\n@@ -41,8 +36,7 @@ where\n         En7::V0(x) => {\n             // Also fails for the same reason as above:\n             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n-            //[base]~^ ERROR lifetime mismatch [E0623]\n-            //[nll]~^^ ERROR lifetime may not live long enough\n+            //~^ ERROR lifetime may not live long enough\n         },\n         En7::V1(_) => {},\n     }"}, {"sha": "cddce8777eab7a740546a528e3bb6dca699f0bb3", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:21:56\n+  --> $DIR/implied-region-constraints.rs:17:56\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |            --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:43:64\n+  --> $DIR/implied-region-constraints.rs:38:64\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |             --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr"}, {"sha": "4313078064cc54e29f4c1bc6ecc95d211f3142b2", "filename": "src/test/ui/associated-types/associated-types-eq-hr.base.stderr", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,92 +0,0 @@\n-error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n-   |\n-LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-   |\n-note: expected this to be `&isize`\n-  --> $DIR/associated-types-eq-hr.rs:30:14\n-   |\n-LL |     type A = &'a usize;\n-   |              ^^^^^^^^^\n-   = note: expected reference `&isize`\n-              found reference `&usize`\n-note: required by a bound in `foo`\n-  --> $DIR/associated-types-eq-hr.rs:49:36\n-   |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n-   |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:95:5\n-   |\n-LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-   |\n-note: expected this to be `&usize`\n-  --> $DIR/associated-types-eq-hr.rs:18:14\n-   |\n-LL |     type A = &'a isize;\n-   |              ^^^^^^^^^\n-   = note: expected reference `&usize`\n-              found reference `&isize`\n-note: required by a bound in `bar`\n-  --> $DIR/associated-types-eq-hr.rs:56:36\n-   |\n-LL | fn bar<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n-   |                                    ^^^^^^^^^^^^^ required by this bound in `bar`\n-\n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:100:5\n-   |\n-LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n-   |\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n-\n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:100:5\n-   |\n-LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n-   |\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n-\n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:106:5\n-   |\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n-   |\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n-\n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:106:5\n-   |\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n-   |\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n-\n-error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:116:5\n-   |\n-LL |     tuple_four::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n-   |\n-   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "dc653f7f2e9dc906cabb69c6ee33561f84c9f5de", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Check testing of equality constraints in a higher-ranked context.\n \n pub trait TheTrait<T> {\n@@ -98,14 +94,10 @@ pub fn call_bar() {\n \n pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n-    //[base]~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n-    //[base]~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_three() {\n@@ -114,7 +106,6 @@ pub fn call_tuple_three() {\n \n pub fn call_tuple_four() {\n     tuple_four::<Tuple>();\n-    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n }\n \n fn main() {}"}, {"sha": "b306ae273e870ba3686b77a666ba9520537e194c", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,18 +1,18 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:87:5\n    |\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n note: expected this to be `&isize`\n-  --> $DIR/associated-types-eq-hr.rs:30:14\n+  --> $DIR/associated-types-eq-hr.rs:26:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n-  --> $DIR/associated-types-eq-hr.rs:49:36\n+  --> $DIR/associated-types-eq-hr.rs:45:36\n    |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n@@ -21,20 +21,20 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:95:5\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n note: expected this to be `&usize`\n-  --> $DIR/associated-types-eq-hr.rs:18:14\n+  --> $DIR/associated-types-eq-hr.rs:14:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`\n-  --> $DIR/associated-types-eq-hr.rs:56:36\n+  --> $DIR/associated-types-eq-hr.rs:52:36\n    |\n LL | fn bar<T>()\n    |    --- required by a bound in this", "previous_filename": "src/test/ui/associated-types/associated-types-eq-hr.nll.stderr"}, {"sha": "fe238344263c30f2a741e259183dfe2ea5386930", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.base.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,14 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:40\n-   |\n-LL |     x: <I as Foo<&'a isize>>::A,\n-   |                  --------- these two types are declared with different lifetimes...\n-LL |     y: <I as Foo<&'b isize>>::A,\n-   |                  ---------\n-...\n-LL |     let z: I::A = if cond { x } else { y };\n-   |                                        ^ ...but data from `x` flows into `y` here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "069bf56004461d469ef0c48cbf06fe050062fc56", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // Check projection of an associated type out of a higher-ranked\n // trait-bound in the context of a function body.\n \n@@ -24,9 +20,8 @@ fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n {\n     // x and y here have two distinct lifetimes:\n     let z: I::A = if cond { x } else { y };\n-    //[base]~^ ERROR lifetime mismatch\n-    //[nll]~^^ ERROR lifetime may not live long enough\n-    //[nll]~| ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR lifetime may not live long enough\n }\n \n pub fn main() {}"}, {"sha": "e12d42e5ed0cc654e1cb3b4bbb3cded857d63035", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:29\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:29\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let z: I::A = if cond { x } else { y };\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:40\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr"}, {"sha": "35b3a83ee43026287db247a33521591487ecaa19", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.base.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,21 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:31:38\n-   |\n-LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n-   |                        -----     ----- these two types are declared with different lifetimes...\n-...\n-LL |     let _c: <T as Trait<'b>>::Type = a;\n-   |                                      ^ ...but data from `y` flows into `x` here\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:41:38\n-   |\n-LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n-   |                        -----     ----- these two types are declared with different lifetimes...\n-...\n-LL |     let _c: <T as Trait<'a>>::Type = b;\n-   |                                      ^ ...but data from `y` flows into `x` here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "c4758f255b3784598b573e9821606c4e9af2fa5b", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n #![allow(unused_variables)]\n \n fn make_any<T>() -> T {  loop {} }\n@@ -26,10 +22,9 @@ fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n {\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = make_any();\n-    //[nll]~^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n     let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'b>>::Type = a;\n-    //[base]~^ ERROR E0623\n }\n \n fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n@@ -39,8 +34,7 @@ fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n     let a: <T as Trait<'a>>::Type = make_any();\n     let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'a>>::Type = b;\n-    //[base]~^ ERROR E0623\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn method4<'a,'b,T>(x: &'a T, y: &'b T)"}, {"sha": "414bc048ab51ccc9e3c9a69e3f1fd793d797361d", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/associated-types-subtyping-1.rs:28:12\n+  --> $DIR/associated-types-subtyping-1.rs:24:12\n    |\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |            -- -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let a: <T as Trait<'a>>::Type = make_any();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/associated-types-subtyping-1.rs:41:13\n+  --> $DIR/associated-types-subtyping-1.rs:36:13\n    |\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |            -- -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr"}, {"sha": "ed5518b628f6a42c1e4c9a1c59d905bdcb5d8f0f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.krisskross.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant-nll.rs:51:5\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |                        -------                 ------------------\n-   |                        |\n-   |                        this parameter and the return type are declared with different lifetimes...\n-...\n-LL |    (a, b)\n-   |     ^ ...but data from `y` is returned here\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant-nll.rs:51:8\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |                                    -------     ------------------\n-   |                                    |\n-   |                                    this parameter and the return type are declared with different lifetimes...\n-...\n-LL |    (a, b)\n-   |        ^ ...but data from `x` is returned here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "c3ac9949c214b285c7594f18e94f110327d48405", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,55 +0,0 @@\n-#![feature(unboxed_closures)]\n-\n-// Test for projection cache. We should be able to project distinct\n-// lifetimes from `foo` as we reinstantiate it multiple times, but not\n-// if we do it just once. In this variant, the region `'a` is used in\n-// an contravariant position, which affects the results.\n-\n-// revisions: ok oneuse transmute krisskross\n-//[ok] check-pass\n-//[oneuse] check-pass\n-\n-// ignore-compare-mode-nll\n-// FIXME(nll): When stabilizing, this test should replace `project-fn-ret-contravariant.rs`\n-// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n-// a separate test is just easier.\n-\n-#![allow(dead_code, unused_variables)]\n-\n-fn foo<'a>() -> &'a u32 { loop { } }\n-\n-fn bar<T>(t: T, x: T::Output) -> T::Output\n-    where T: FnOnce<()>\n-{\n-    t()\n-}\n-\n-#[cfg(ok)] // two instantiations: OK\n-fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-    let a = bar(foo, x);\n-    let b = bar(foo, y);\n-    (a, b)\n-}\n-\n-#[cfg(oneuse)] // one instantiation: OK (surprisingly)\n-fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-    let f /* : fn() -> &'static u32 */ = foo; // <-- inferred type annotated\n-    let a = bar(f, x); // this is considered ok because fn args are contravariant...\n-    let b = bar(f, y); // ...and hence we infer T to distinct values in each call.\n-    (a, b)\n-}\n-\n-#[cfg(transmute)] // one instantiations: BAD\n-fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   bar(foo, x) //[transmute]~ ERROR E0759\n-}\n-\n-#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n-fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   let a = bar(foo, y);\n-   let b = bar(foo, x);\n-   (a, b) //[krisskross]~ ERROR lifetime mismatch [E0623]\n-   //[krisskross]~^ ERROR lifetime mismatch [E0623]\n-}\n-\n-fn main() { }"}, {"sha": "ca57142ecee09fd7094db32207241d291aaaf197", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.transmute.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-contravariant-nll.rs:44:8\n-   |\n-LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |                  ------- this data with lifetime `'a`...\n-LL |    bar(foo, x)\n-   |        ^^^  - ...is used and required to live as long as `'static` here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "2ecee1341abd334f4371b30433e2cd781905bc4c", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.stderr", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,25 +1,30 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant.rs:52:5\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:46:4\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |                        -------                 ------------------\n-   |                        |\n-   |                        this parameter and the return type are declared with different lifetimes...\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n ...\n LL |    (a, b)\n-   |     ^ ...but data from `y` is returned here\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant.rs:52:8\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:46:4\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |                                    -------     ------------------\n-   |                                    |\n-   |                                    this parameter and the return type are declared with different lifetimes...\n+   |              -- -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n ...\n LL |    (a, b)\n-   |        ^ ...but data from `x` is returned here\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "f1ea6627aab86f569c4f5c9d95c4812f7185208d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -9,12 +9,6 @@\n //[ok] check-pass\n //[oneuse] check-pass\n \n-// ignore-compare-mode-nll\n-// FIXME(nll): When stabilizing, this test should be replaced with\n-// `project-fn-ret-contravariant-nll.rs` The two would normally be just\n-// revisions, but this test uses revisions heavily, so splitting into\n-// a separate test is just easier.\n-\n #![allow(dead_code, unused_variables)]\n \n fn foo<'a>() -> &'a u32 { loop { } }\n@@ -42,15 +36,15 @@ fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n \n #[cfg(transmute)] // one instantiations: BAD\n fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   bar(foo, x) //[transmute]~ ERROR E0759\n+   bar(foo, x) //[transmute]~ ERROR lifetime may not live long enough\n }\n \n #[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    let a = bar(foo, y);\n    let b = bar(foo, x);\n-   (a, b) //[krisskross]~ ERROR lifetime mismatch [E0623]\n-   //[krisskross]~^ ERROR lifetime mismatch [E0623]\n+   (a, b) //[krisskross]~ ERROR lifetime may not live long enough\n+   //[krisskross]~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "6d8ab2c3fdc741145002d690de7d2c467d1e938e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,11 +1,10 @@\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-contravariant.rs:45:8\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-contravariant.rs:39:4\n    |\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |                  ------- this data with lifetime `'a`...\n+   |        -- lifetime `'a` defined here\n LL |    bar(foo, x)\n-   |        ^^^  - ...is used and required to live as long as `'static` here\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "09119ea2bb5f9338c34733e8f11d96b2def2d4f5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.krisskross.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,36 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:64:5\n-   |\n-LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |              --  -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |     (a, b)\n-   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:64:5\n-   |\n-LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |              --  -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |     (a, b)\n-   |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-help: `'a` and `'b` must be the same: replace one with the other\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "266f3b99f9f30a7f2bb436a493c2c884df19709e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.oneuse.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,36 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:46:13\n-   |\n-LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |     let a = bar(f, x);\n-   |             ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:46:13\n-   |\n-LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |     let a = bar(f, x);\n-   |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a function pointer to `foo`\n-   = note: the function `foo` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-help: `'a` and `'b` must be the same: replace one with the other\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "15bf38dabc0601b71e1319e3f205956ce29b2282", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,69 +0,0 @@\n-#![feature(unboxed_closures)]\n-// Test for projection cache. We should be able to project distinct\n-// lifetimes from `foo` as we reinstantiate it multiple times, but not\n-// if we do it just once. In this variant, the region `'a` is used in\n-// an invariant position, which affects the results.\n-\n-// revisions: ok oneuse transmute krisskross\n-//[ok] check-pass\n-\n-// compile-flags: -Z borrowck=mir\n-// ignore-compare-mode-nll\n-// FIXME(nll): When stabilizing, this test should replace with `project-fn-ret-invariant.rs`\n-// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n-// a separate test is just easier.\n-\n-#![allow(dead_code, unused_variables)]\n-\n-use std::marker::PhantomData;\n-\n-struct Type<'a> {\n-    // Invariant\n-    data: PhantomData<fn(&'a u32) -> &'a u32>,\n-}\n-\n-fn foo<'a>() -> Type<'a> {\n-    loop {}\n-}\n-\n-fn bar<T>(t: T, x: T::Output) -> T::Output\n-where\n-    T: FnOnce<()>,\n-{\n-    t()\n-}\n-\n-#[cfg(ok)] // two instantiations: OK\n-fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-    let a = bar(foo, x);\n-    let b = bar(foo, y);\n-    (a, b)\n-}\n-\n-#[cfg(oneuse)] // one instantiation: BAD\n-fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-    let f = foo; // <-- No consistent type can be inferred for `f` here.\n-    let a = bar(f, x); //[oneuse]~ ERROR lifetime may not live long enough\n-    //[oneuse]~^ ERROR lifetime may not live long enough\n-    let b = bar(f, y);\n-    (a, b)\n-}\n-\n-#[cfg(transmute)] // one instantiations: BAD\n-fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n-    // Cannot instantiate `foo` with any lifetime other than `'a`,\n-    // since it is provided as input.\n-\n-    bar(foo, x) //[transmute]~ ERROR lifetime may not live long enough\n-}\n-\n-#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n-fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-    let a = bar(foo, y);\n-    let b = bar(foo, x);\n-    (a, b)\n-    //[krisskross]~^ ERROR lifetime may not live long enough\n-    //[krisskross]~| ERROR lifetime may not live long enough\n-}\n-\n-fn main() {}"}, {"sha": "56f081529997febdce48b1d3566323d5ed14acdf", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.transmute.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,15 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant-nll.rs:57:5\n-   |\n-LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n-   |        -- lifetime `'a` defined here\n-...\n-LL |     bar(foo, x)\n-   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-\n-error: aborting due to previous error\n-"}, {"sha": "ada12c7ee91d0a8b0e47c80132282a4712c58f8f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,24 +1,36 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:60:22\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:59:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |                                      --------     --------------------\n-   |                                      |\n-   |                                      this parameter and the return type are declared with different lifetimes...\n-LL |     let a = bar(foo, y);\n-   |                      ^ ...but data from `x` is returned here\n+   |              --  -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |     (a, b)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:62:9\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:59:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |                                      --------     --------------------\n-   |                                      |\n-   |                                      this parameter and the return type are declared with different lifetimes...\n+   |              --  -- lifetime `'b` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n ...\n LL |     (a, b)\n-   |         ^ ...but data from `x` is returned here\n+   |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "cc15601621278c258f07be140039c3f78e05e9a0", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,14 +1,36 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:46:20\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:40:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |                                --------     --------------------\n-   |                                |\n-   |                                this parameter and the return type are declared with different lifetimes...\n-...\n-LL |     let b = bar(f, y);\n-   |                    ^ ...but data from `x` is returned here\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |     let a = bar(f, x);\n+   |             ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:40:13\n+   |\n+LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+   |        --  -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n+LL |     let a = bar(f, x);\n+   |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of a function pointer to `foo`\n+   = note: the function `foo` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "1075fd6e0923a896f079d1b974db9e17faee368a", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -7,11 +7,6 @@\n // revisions: ok oneuse transmute krisskross\n //[ok] check-pass\n \n-// ignore-compare-mode-nll\n-// FIXME(nll): When stabilizing, this test should be replaced with `project-fn-ret-invariant-nll.rs`\n-// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n-// a separate test is just easier.\n-\n #![allow(dead_code, unused_variables)]\n \n use std::marker::PhantomData;\n@@ -43,7 +38,9 @@ fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     let f = foo; // <-- No consistent type can be inferred for `f` here.\n     let a = bar(f, x);\n-    let b = bar(f, y); //[oneuse]~ ERROR lifetime mismatch [E0623]\n+    //[oneuse]~^ ERROR lifetime may not live long enough\n+    //[oneuse]~| ERROR lifetime may not live long enough\n+    let b = bar(f, y);\n     (a, b)\n }\n \n@@ -52,14 +49,16 @@ fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n     // Cannot instantiate `foo` with any lifetime other than `'a`,\n     // since it is provided as input.\n \n-    bar(foo, x) //[transmute]~ ERROR E0759\n+    bar(foo, x) //[transmute]~ ERROR lifetime may not live long enough\n }\n \n #[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n+    let a = bar(foo, y);\n     let b = bar(foo, x);\n-    (a, b) //[krisskross]~ ERROR E0623\n+    (a, b)\n+    //[krisskross]~^ ERROR lifetime may not live long enough\n+    //[krisskross]~| ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "b64cb2c3d0b6a9e7a644890a75e77a225f23ba35", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,21 +1,15 @@\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-invariant.rs:55:9\n+error: lifetime may not live long enough\n+  --> $DIR/project-fn-ret-invariant.rs:52:5\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n-   |                   -------- this data with lifetime `'a`...\n+   |        -- lifetime `'a` defined here\n ...\n LL |     bar(foo, x)\n-   |         ^^^  - ...is used and required to live as long as `'static` here\n+   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n    |\n-note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/project-fn-ret-invariant.rs:51:37\n-   |\n-LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n-   |                                     ^^^^^^^ `'static` requirement introduced here\n-...\n-LL |     bar(foo, x)\n-   |     ----------- because of this returned expression\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "de254b7a1636c904ddf0eb76def308ae37ef186a", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.nll.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,17 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/higher-ranked-projection.rs:25:5\n-   |\n-LL |     foo(());\n-   |     ^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a ()`\n-              found reference `&()`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/higher-ranked-projection.rs:15:33\n-   |\n-LL |     where for<'a> &'a T: Mirror<Image=U>\n-   |                                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "239f4553938617c6838f277b5abfcbfbd4c31b94", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/higher-ranked-projection.rs:25:5\n+  --> $DIR/higher-ranked-projection.rs:23:5\n    |\n LL |     foo(());\n-   |     ^^^ lifetime mismatch\n+   |     ^^^^^^^ one type is more general than the other\n    |\n    = note: expected reference `&'a ()`\n               found reference `&()`\n note: the lifetime requirement is introduced here\n-  --> $DIR/higher-ranked-projection.rs:15:33\n+  --> $DIR/higher-ranked-projection.rs:14:33\n    |\n LL |     where for<'a> &'a T: Mirror<Image=U>\n    |                                 ^^^^^^^"}, {"sha": "8b2b87223a58a2d5d473d8bb0d3afeedde9a5857", "filename": "src/test/ui/associated-types/higher-ranked-projection.badbase.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^ lifetime mismatch\n+   |     ^^^^^^^ one type is more general than the other\n    |\n    = note: expected reference `&'a ()`\n               found reference `&()`"}, {"sha": "217392aa35b15967ede005455b3e0f328ce14506", "filename": "src/test/ui/associated-types/higher-ranked-projection.badnll.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,17 +1,2 @@\n-error[E0308]: mismatched types\n-  --> $DIR/higher-ranked-projection.rs:25:5\n-   |\n-LL |     foo(());\n-   |     ^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a ()`\n-              found reference `&()`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/higher-ranked-projection.rs:16:33\n-   |\n-LL |     where for<'a> &'a T: Mirror<Image=U>\n-   |                                 ^^^^^^^\n+error: unknown debugging option: `borrowck`\n \n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "7e6c509a2722d4857e460c32d6c38e8f33ba1f5b", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,5 @@\n-// ignore-compare-mode-nll\n-// revisions: good badbase badnll\n+// revisions: good bad\n //[good] check-pass\n-// [badnll]compile-flags: -Zborrowck=mir\n \n trait Mirror {\n     type Image;\n@@ -11,7 +9,7 @@ impl<T> Mirror for T {\n     type Image = T;\n }\n \n-#[cfg(any(badbase, badnll))]\n+#[cfg(bad)]\n fn foo<U, T>(_t: T)\n     where for<'a> &'a T: Mirror<Image=U>\n {}\n@@ -23,6 +21,5 @@ fn foo<U, T>(_t: T)\n \n fn main() {\n     foo(());\n-    //[badbase]~^ ERROR mismatched types\n-    //[badnll]~^^ ERROR mismatched types\n+    //[bad]~^ ERROR mismatched types\n }"}, {"sha": "109883fbeb7cb2ca77c1417818c67eee68f780b8", "filename": "src/test/ui/async-await/issue-76547.base.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,31 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/issue-76547.rs:24:13\n-   |\n-LL | async fn fut(bufs: &mut [&mut [u8]]) {\n-   |                    ---------------- these two types are declared with different lifetimes...\n-LL |     ListFut(bufs).await\n-   |             ^^^^ ...but data from `bufs` flows into `bufs` here\n-   |\n-   = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | async fn fut<'a>(bufs: &'a mut [&'a mut [u8]]) {\n-   |             ++++        ++       ++\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/issue-76547.rs:39:14\n-   |\n-LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n-   |                     ---------------- these two types are declared with different lifetimes...\n-LL |     ListFut2(bufs).await\n-   |              ^^^^ ...but data from `bufs` flows into `bufs` here\n-   |\n-   = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | async fn fut2<'a>(bufs: &'a mut [&'a mut [u8]]) -> i32 {\n-   |              ++++        ++       ++\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "587feb6247ce81d70285bd0c33816649bccef061", "filename": "src/test/ui/async-await/issue-76547.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // Test for diagnostic improvement issue #76547\n // edition:2018\n \n@@ -22,8 +18,7 @@ impl<'a> Future for ListFut<'a> {\n \n async fn fut(bufs: &mut [&mut [u8]]) {\n     ListFut(bufs).await\n-    //[base]~^ ERROR lifetime mismatch\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n pub struct ListFut2<'a>(&'a mut [&'a mut [u8]]);\n@@ -37,8 +32,7 @@ impl<'a> Future for ListFut2<'a> {\n \n async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n     ListFut2(bufs).await\n-    //[base]~^ ERROR lifetime mismatch\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "4d96cce824b913c51d3148a833bb4301197950e0", "filename": "src/test/ui/async-await/issue-76547.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-76547.rs:24:13\n+  --> $DIR/issue-76547.rs:20:13\n    |\n LL | async fn fut(bufs: &mut [&mut [u8]]) {\n    |                    -     - let's call the lifetime of this reference `'2`\n@@ -14,7 +14,7 @@ LL | async fn fut<'a>(bufs: &'a mut [&'a mut [u8]]) {\n    |             ++++        ++       ++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-76547.rs:39:14\n+  --> $DIR/issue-76547.rs:34:14\n    |\n LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n    |                     -     - let's call the lifetime of this reference `'2`", "previous_filename": "src/test/ui/async-await/issue-76547.nll.stderr"}, {"sha": "7577b95fa2e2f94c0ececdb5519f81caf6565bfe", "filename": "src/test/ui/async-await/issues/issue-62097.base.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,18 +0,0 @@\n-error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-62097.rs:16:31\n-   |\n-LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ^^^^^ this data with an anonymous lifetime `'_`...\n-LL |\n-LL |         foo(|| self.bar()).await;\n-   |         --- ...is used and required to live as long as `'static` here\n-   |\n-note: `'static` lifetime requirement introduced by this bound\n-  --> $DIR/issue-62097.rs:8:19\n-   |\n-LL |     F: FnOnce() + 'static\n-   |                   ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "a24c84cffc718b72a51d760d274940d041f2e6c1", "filename": "src/test/ui/async-await/issues/issue-62097.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // edition:2018\n async fn foo<F>(fun: F)\n where\n@@ -14,10 +10,9 @@ struct Struct;\n \n impl Struct {\n     pub async fn run_dummy_fn(&self) {\n-        //[base]~^ ERROR E0759\n         foo(|| self.bar()).await;\n-        //[nll]~^ ERROR closure may outlive the current function\n-        //[nll]~| ERROR borrowed data escapes outside of associated function\n+        //~^ ERROR closure may outlive the current function\n+        //~| ERROR borrowed data escapes outside of associated function\n     }\n \n     pub fn bar(&self) {}"}, {"sha": "786f621326049b7eb9cf1ccf62e3e8d5d186218a", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,13 @@\n error[E0373]: closure may outlive the current function, but it borrows `self`, which is owned by the current function\n-  --> $DIR/issue-62097.rs:18:13\n+  --> $DIR/issue-62097.rs:13:13\n    |\n LL |         foo(|| self.bar()).await;\n    |             ^^ ---- `self` is borrowed here\n    |             |\n    |             may outlive borrowed value `self`\n    |\n note: function requires argument type to outlive `'static`\n-  --> $DIR/issue-62097.rs:18:9\n+  --> $DIR/issue-62097.rs:13:9\n    |\n LL |         foo(|| self.bar()).await;\n    |         ^^^^^^^^^^^^^^^^^^\n@@ -17,14 +17,13 @@ LL |         foo(move || self.bar()).await;\n    |             ++++\n \n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-62097.rs:18:9\n+  --> $DIR/issue-62097.rs:13:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               -----\n    |                               |\n    |                               `self` is a reference that is only valid in the associated function body\n    |                               let's call the lifetime of this reference `'1`\n-LL |\n LL |         foo(|| self.bar()).await;\n    |         ^^^^^^^^^^^^^^^^^^\n    |         |", "previous_filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr"}, {"sha": "f5409a7ca5d29ecd7c9a88a4bbd248d9f8712135", "filename": "src/test/ui/async-await/issues/issue-63388-1.base.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,12 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `foo`\n-  --> $DIR/issue-63388-1.rs:19:9\n-   |\n-LL |         &'a self, foo: &dyn Foo\n-   |                        -------- help: add explicit lifetime `'a` to the type of `foo`: `&'a (dyn Foo + 'a)`\n-...\n-LL |         foo\n-   |         ^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "32bcbb111169e31dd1ee2317ba409cc10a54c0bf", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // edition:2018\n \n struct Xyz {\n@@ -15,9 +11,8 @@ impl Xyz {\n         &'a self, foo: &dyn Foo\n     ) -> &dyn Foo\n     {\n-        //[nll]~^ ERROR explicit lifetime required in the type of `foo` [E0621]\n+        //~^ ERROR explicit lifetime required in the type of `foo` [E0621]\n         foo\n-        //[base]~^ ERROR explicit lifetime required in the type of `foo` [E0621]\n     }\n }\n "}, {"sha": "88542315ec00c6f368121d7f6ddfd818ef6fffbd", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,12 @@\n error[E0621]: explicit lifetime required in the type of `foo`\n-  --> $DIR/issue-63388-1.rs:17:5\n+  --> $DIR/issue-63388-1.rs:13:5\n    |\n LL |           &'a self, foo: &dyn Foo\n    |                          -------- help: add explicit lifetime `'a` to the type of `foo`: `&'a (dyn Foo + 'a)`\n LL |       ) -> &dyn Foo\n LL | /     {\n LL | |\n LL | |         foo\n-LL | |\n LL | |     }\n    | |_____^ lifetime `'a` required\n ", "previous_filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr"}, {"sha": "a4bdc447f65048fbb01d20c5f8069b3dd1ae48c3", "filename": "src/test/ui/async-await/issues/issue-72312.base.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,23 +0,0 @@\n-error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-72312.rs:14:24\n-   |\n-LL |     pub async fn start(&self) {\n-   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n-...\n-LL |             &self;\n-   |             ----- ...is used here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/issue-72312.rs:20:9\n-   |\n-LL |         require_static(async move {\n-   |         ^^^^^^^^^^^^^^\n-note: `'static` lifetime requirement introduced by this bound\n-  --> $DIR/issue-72312.rs:6:22\n-   |\n-LL | fn require_static<T: 'static>(val: T) -> T {\n-   |                      ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "74122cf00a9d490aee6a2efc09b648582bfd802d", "filename": "src/test/ui/async-await/issues/issue-72312.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,28 +1,19 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // edition:2018\n fn require_static<T: 'static>(val: T) -> T {\n-    //[base]~^ NOTE 'static` lifetime requirement introduced by this bound\n     val\n }\n \n struct Problem;\n \n impl Problem {\n     pub async fn start(&self) {\n-        //[base]~^ ERROR E0759\n-        //[base]~| NOTE this data with an anonymous lifetime `'_`\n-        //[base]~| NOTE in this expansion of desugaring of `async` block or function\n-        //[nll]~^^^^ NOTE let's call\n-        //[nll]~| NOTE `self` is a reference\n+        //~^ NOTE let's call\n+        //~| NOTE `self` is a reference\n         require_static(async move {\n-            //[base]~^ NOTE ...and is required to live as long as `'static` here\n-            //[nll]~^^ ERROR borrowed data escapes\n-            //[nll]~| NOTE `self` escapes\n-            //[nll]~| NOTE argument requires\n-            &self; //[base]~ NOTE ...is used here...\n+            //~^ ERROR borrowed data escapes\n+            //~| NOTE `self` escapes\n+            //~| NOTE argument requires\n+            &self;\n         });\n     }\n }"}, {"sha": "aa947b6900366a6d0edb25288672f866d90eba51", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-72312.rs:20:9\n+  --> $DIR/issue-72312.rs:12:9\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n@@ -11,7 +11,6 @@ LL | /         require_static(async move {\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | |             &self;\n LL | |         });\n    | |          ^", "previous_filename": "src/test/ui/async-await/issues/issue-72312.nll.stderr"}, {"sha": "907c1f6c4079fd4bdd078f24ba8bb75e6b61c182", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.base.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,34 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ret-impl-trait-one.rs:14:85\n-   |\n-LL |   async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-   |  ______________________________________________________------_____-------------------_^\n-   | |                                                      |\n-   | |                                                      this parameter and the return type are declared with different lifetimes...\n-LL | |\n-LL | |\n-LL | |     (a, b)\n-LL | | }\n-   | |_^ ...but data from `a` is returned here\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:21:80\n-   |\n-LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |  ____________________________________--__________________________________________^\n-   | |                                    |\n-   | |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n-LL | |\n-LL | |     (a, b)\n-LL | | }\n-   | |_^\n-   |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-   |                                                                                ++++\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0623, E0700.\n-For more information about an error, try `rustc --explain E0623`."}, {"sha": "aebc77d265e38ee646d8eeb889364a55d3923184", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // edition:2018\n \n // Test that a feature gate is needed to use `impl Trait` as the\n@@ -12,8 +8,7 @@ impl<T> Trait<'_> for T { }\n \n // Fails to recognize that both 'a and 'b are mentioned and should thus be accepted\n async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n-    //[base]~^ ERROR lifetime mismatch\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n     (a, b)\n }\n "}, {"sha": "cdb141c0e3ea2802c7efd1d6a3a368d832b5e64e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,21 +1,20 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:14:85\n+  --> $DIR/ret-impl-trait-one.rs:10:85\n    |\n LL |   async fn async_ret_impl_trait3<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |  ________________________________--__--_______________________________________________^\n    | |                                |   |\n    | |                                |   lifetime `'b` defined here\n    | |                                lifetime `'a` defined here\n LL | |\n-LL | |\n LL | |     (a, b)\n LL | | }\n    | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:21:80\n+  --> $DIR/ret-impl-trait-one.rs:16:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |  ____________________________________--__________________________________________^", "previous_filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr"}, {"sha": "4995029a70f7e2696abf82883acf3c2369d4cdf8", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-//compile-flags: -Z borrowck=mir\n-\n fn foo(_:String) {}\n \n fn main()"}, {"sha": "cd0d2fee9422fd4359de6779204ab52c443c2c19", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `my_str`\n-  --> $DIR/borrowck-drop-from-guard.rs:11:23\n+  --> $DIR/borrowck-drop-from-guard.rs:9:23\n    |\n LL |     let my_str = \"hello\".to_owned();\n    |         ------ move occurs because `my_str` has type `String`, which does not implement the `Copy` trait"}, {"sha": "d88185af778f16b75b31488f5b45bf67488b4ee8", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.edition.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,13 +0,0 @@\n-error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:22:18\n-   |\n-LL |                 (|| { let bar = foo; bar.take() })();\n-   |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n-   |                  |\n-   |                  move out of `foo` occurs here\n-   |\n-   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "51f2ff75da83145af5552242eac8ad38e6473b7e", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,30 +0,0 @@\n-// This is a test that the `#![feature(nll)]` opt-in overrides the\n-// migration mode. The intention here is to emulate the goal behavior\n-// that `--edition 2018` effects on borrowck (modeled here by `-Z\n-// borrowck=migrate`) are themselves overridden by the\n-// `#![feature(nll)]` opt-in.\n-//\n-// Therefore, for developer convenience, under `#[feature(nll)]` the\n-// NLL checks will be emitted as errors *even* in the presence of `-Z\n-// borrowck=migrate`.\n-\n-// revisions: zflag edition\n-//[zflag]compile-flags: -Z borrowck=migrate\n-//[edition]edition:2018\n-\n-#![feature(nll)]\n-\n-fn main() {\n-    match Some(&4) {\n-        None => {},\n-        ref mut foo\n-            if {\n-                (|| { let bar = foo; bar.take() })();\n-                //[zflag]~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n-                //[edition]~^^ ERROR cannot move out of `foo` in pattern guard [E0507]\n-                false\n-            } => {},\n-        Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n-        _ => println!(\"Here is some supposedly unreachable code.\"),\n-    }\n-}"}, {"sha": "d88185af778f16b75b31488f5b45bf67488b4ee8", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.zflag.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,13 +0,0 @@\n-error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:22:18\n-   |\n-LL |                 (|| { let bar = foo; bar.take() })();\n-   |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n-   |                  |\n-   |                  move out of `foo` occurs here\n-   |\n-   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "0aaa4e4c6841cf20edf472782015ed9db5357456", "filename": "src/test/ui/borrowck/borrowck-local-borrow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,9 +2,6 @@\n // error-pattern:panic 1\n // ignore-emscripten no processes\n \n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn main() {\n     let x = 2;\n     let y = &x;"}, {"sha": "3d6d00a0f958bfbad3a37c6437fefbed88266cdc", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.base.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,13 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:13:5\n-   |\n-LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n-   |                                -------------     -----\n-   |                                |\n-   |                                this parameter and the return type are declared with different lifetimes...\n-LL |     S { pointer: &mut *p.pointer }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...but data from `p` is returned here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "779cb3bbec163a278bc566db68fb4b3a3d95f3d5", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // Test that assignments to an `&mut` pointer which is found in a\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n@@ -11,8 +7,7 @@ struct S<'a> {\n \n fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n     S { pointer: &mut *p.pointer }\n-    //[base]~^ ERROR lifetime mismatch\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "f28c42ce2d58f04dd875fc4049bbba24031c7287", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:13:5\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:9:5\n    |\n LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                      -- -- lifetime `'b` defined here", "previous_filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr"}, {"sha": "10400cff5e51c33396addda8af0a1930e6963b34", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,54 +0,0 @@\n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:17:46\n-   |\n-LL |     pub fn e(x: &'static mut isize) {\n-   |              - help: consider changing this to be mutable: `mut x`\n-LL |         static mut Y: isize = 3;\n-LL |         let mut c1 = |y: &'static mut isize| x = y;\n-   |                                              ^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:28:50\n-   |\n-LL |     pub fn ee(x: &'static mut isize) {\n-   |               - help: consider changing this to be mutable: `mut x`\n-...\n-LL |             let mut c2 = |y: &'static mut isize| x = y;\n-   |                                                  ^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n-   |\n-LL |     pub fn capture_assign_whole(x: (i32,)) {\n-   |                                 - help: consider changing this to be mutable: `mut x`\n-LL |         || { x = (1,); };\n-   |              ^^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:45:14\n-   |\n-LL |     pub fn capture_assign_part(x: (i32,)) {\n-   |                                - help: consider changing this to be mutable: `mut x`\n-LL |         || { x.0 = 1; };\n-   |              ^^^^^^^ cannot assign\n-\n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:50:14\n-   |\n-LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n-   |                                   - help: consider changing this to be mutable: `mut x`\n-LL |         || { &mut x; };\n-   |              ^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:55:14\n-   |\n-LL |     pub fn capture_reborrow_part(x: (i32,)) {\n-   |                                  - help: consider changing this to be mutable: `mut x`\n-LL |         || { &mut x.0; };\n-   |              ^^^^^^^^ cannot borrow as mutable\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors have detailed explanations: E0594, E0596.\n-For more information about an error, try `rustc --explain E0594`."}, {"sha": "b3cce1b3a06117dded43fc92377fdeb969133e27", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,21 +2,12 @@\n // analysis of a closure body may only be caught when AST-borrowck\n // looks at some parent.\n \n-// revisions: migrate nll\n-//[nll]compile-flags: -Z borrowck=mir\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n-\n // transcribed from borrowck-closures-unique.rs\n mod borrowck_closures_unique {\n     pub fn e(x: &'static mut isize) {\n         static mut Y: isize = 3;\n         let mut c1 = |y: &'static mut isize| x = y;\n-        //[migrate]~^ ERROR is not declared as mutable\n-        //[nll]~^^ ERROR is not declared as mutable\n+        //~^ ERROR is not declared as mutable\n         unsafe { c1(&mut Y); }\n     }\n }\n@@ -26,8 +17,7 @@ mod borrowck_closures_unique_grandparent {\n         static mut Z: isize = 3;\n         let mut c1 = |z: &'static mut isize| {\n             let mut c2 = |y: &'static mut isize| x = y;\n-        //[migrate]~^ ERROR is not declared as mutable\n-        //[nll]~^^ ERROR is not declared as mutable\n+        //~^ ERROR is not declared as mutable\n             c2(z);\n         };\n         unsafe { c1(&mut Z); }\n@@ -38,23 +28,19 @@ mod borrowck_closures_unique_grandparent {\n mod mutability_errors {\n     pub fn capture_assign_whole(x: (i32,)) {\n         || { x = (1,); };\n-        //[migrate]~^ ERROR is not declared as mutable\n-        //[nll]~^^ ERROR is not declared as mutable\n+        //~^ ERROR is not declared as mutable\n     }\n     pub fn capture_assign_part(x: (i32,)) {\n         || { x.0 = 1; };\n-        //[migrate]~^ ERROR is not declared as mutable\n-        //[nll]~^^ ERROR is not declared as mutable\n+        //~^ ERROR is not declared as mutable\n     }\n     pub fn capture_reborrow_whole(x: (i32,)) {\n         || { &mut x; };\n-        //[migrate]~^ ERROR is not declared as mutable\n-        //[nll]~^^ ERROR is not declared as mutable\n+        //~^ ERROR is not declared as mutable\n     }\n     pub fn capture_reborrow_part(x: (i32,)) {\n         || { &mut x.0; };\n-        //[migrate]~^ ERROR is not declared as mutable\n-        //[nll]~^^ ERROR is not declared as mutable\n+        //~^ ERROR is not declared as mutable\n     }\n }\n "}, {"sha": "4c299cdc455ac06904b8ce7e5c75edb243ec2327", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:17:46\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:9:46\n    |\n LL |     pub fn e(x: &'static mut isize) {\n    |              - help: consider changing this to be mutable: `mut x`\n@@ -8,7 +8,7 @@ LL |         let mut c1 = |y: &'static mut isize| x = y;\n    |                                              ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:28:50\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:19:50\n    |\n LL |     pub fn ee(x: &'static mut isize) {\n    |               - help: consider changing this to be mutable: `mut x`\n@@ -17,31 +17,31 @@ LL |             let mut c2 = |y: &'static mut isize| x = y;\n    |                                                  ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:14\n    |\n LL |     pub fn capture_assign_whole(x: (i32,)) {\n    |                                 - help: consider changing this to be mutable: `mut x`\n LL |         || { x = (1,); };\n    |              ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:45:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:34:14\n    |\n LL |     pub fn capture_assign_part(x: (i32,)) {\n    |                                - help: consider changing this to be mutable: `mut x`\n LL |         || { x.0 = 1; };\n    |              ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:50:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:38:14\n    |\n LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n    |                                   - help: consider changing this to be mutable: `mut x`\n LL |         || { &mut x; };\n    |              ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:55:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:42:14\n    |\n LL |     pub fn capture_reborrow_part(x: (i32,)) {\n    |                                  - help: consider changing this to be mutable: `mut x`", "previous_filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr"}, {"sha": "b20c39193de39daf554f916c8e684295fc7b2848", "filename": "src/test/ui/borrowck/issue-71546.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,18 +1,20 @@\n // Regression test for #71546.\n \n-// ignore-compare-mode-nll\n-// NLL stderr is different from the original one.\n-\n pub fn serialize_as_csv<V>(value: &V) -> Result<String, &str>\n where\n     V: 'static,\n     for<'a> &'a V: IntoIterator,\n     for<'a> <&'a V as IntoIterator>::Item: ToString + 'static,\n {\n-    let csv_str: String = value //~ ERROR: the associated type `<&'a V as IntoIterator>::Item` may not live long enough\n+    let csv_str: String = value\n+        //~^ ERROR higher-ranked lifetime error\n+        //~| ERROR higher-ranked lifetime error\n+        //~| ERROR higher-ranked lifetime error\n         .into_iter()\n         .map(|elem| elem.to_string())\n+        //~^ ERROR higher-ranked lifetime error\n         .collect::<String>();\n+        //~^ ERROR higher-ranked lifetime error\n     Ok(csv_str)\n }\n "}, {"sha": "b8d79f0939b41c43c711ac09fb3cef89aa4c0521", "filename": "src/test/ui/borrowck/issue-71546.stderr", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,20 +1,59 @@\n-error[E0310]: the associated type `<&'a V as IntoIterator>::Item` may not live long enough\n-  --> $DIR/issue-71546.rs:12:27\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-71546.rs:9:27\n    |\n LL |       let csv_str: String = value\n    |  ___________________________^\n+LL | |\n+LL | |\n+LL | |\n LL | |         .into_iter()\n LL | |         .map(|elem| elem.to_string())\n    | |_____________________________________^\n    |\n-   = help: consider adding an explicit lifetime bound `<&'a V as IntoIterator>::Item: 'static`...\n-   = note: ...so that the type `<&'a V as IntoIterator>::Item` will meet its required lifetime bounds...\n-note: ...that is required by this bound\n-  --> $DIR/issue-71546.rs:10:55\n+   = note: could not prove for<'r> [closure@$DIR/issue-71546.rs:14:14: 14:37] well-formed\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-71546.rs:9:27\n+   |\n+LL |       let csv_str: String = value\n+   |  ___________________________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |         .into_iter()\n+LL | |         .map(|elem| elem.to_string())\n+   | |_____________________________________^\n+   |\n+   = note: could not prove for<'r, 's> Map<<&'r V as IntoIterator>::IntoIter, [closure@$DIR/issue-71546.rs:14:14: 14:37]> well-formed\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-71546.rs:9:27\n+   |\n+LL |       let csv_str: String = value\n+   |  ___________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | |         .collect::<String>();\n+   | |____________________________^\n+   |\n+   = note: could not prove for<'r, 's> Map<<&'r V as IntoIterator>::IntoIter, [closure@$DIR/issue-71546.rs:14:14: 14:37]> well-formed\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-71546.rs:14:14\n+   |\n+LL |         .map(|elem| elem.to_string())\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: could not prove for<'a> <&'a V as IntoIterator>::Item: 'static\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-71546.rs:16:10\n    |\n-LL |     for<'a> <&'a V as IntoIterator>::Item: ToString + 'static,\n-   |                                                       ^^^^^^^\n+LL |         .collect::<String>();\n+   |          ^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0310`."}, {"sha": "aacf178932e6e8e662eeb05731697f972a08a474", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:30:15\n+  --> $DIR/two-phase-activation-sharing-interference.rs:28:15\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:38:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:36:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -21,7 +21,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:49:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:47:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -32,7 +32,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:60:14\n+  --> $DIR/two-phase-activation-sharing-interference.rs:58:14\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here"}, {"sha": "8b880ff6416c4692b60953cc54e751d035cd645d", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,9 +1,7 @@\n // revisions: nll_target\n \n // The following revisions are disabled due to missing support from two-phase beyond autorefs\n-//[nll_beyond] compile-flags: -Z borrowck=mir -Z two-phase-beyond-autoref\n-\n-//[nll_target] compile-flags: -Z borrowck=mir\n+//[nll_beyond] compile-flags: -Z two-phase-beyond-autoref\n \n // This is an important corner case pointed out by Niko: one is\n // allowed to initiate a shared borrow during a reservation, but it"}, {"sha": "a6c65421d91ba18546f47193ec67d86a013f9c5c", "filename": "src/test/ui/borrowck/two-phase-allow-access-during-reservation.nll_target.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `i` because it was mutably borrowed\n-  --> $DIR/two-phase-allow-access-during-reservation.rs:28:19\n+  --> $DIR/two-phase-allow-access-during-reservation.rs:26:19\n    |\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n    |                   ------ borrow of `i` occurs here\n@@ -11,7 +11,7 @@ LL |     /*3*/ *p += 1;        // (mutable borrow of `i` starts here, since `p`\n    |           ------- borrow later used here\n \n error[E0503]: cannot use `i` because it was mutably borrowed\n-  --> $DIR/two-phase-allow-access-during-reservation.rs:33:19\n+  --> $DIR/two-phase-allow-access-during-reservation.rs:31:19\n    |\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n    |                   ------ borrow of `i` occurs here"}, {"sha": "67d0842070ff2a1cdc2013527d6cc65aaa137de5", "filename": "src/test/ui/borrowck/two-phase-allow-access-during-reservation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,9 +1,7 @@\n // revisions: nll_target\n \n // The following revisions are disabled due to missing support for two_phase_beyond_autoref\n-//[nll_beyond] compile-flags: -Z borrowck=mir -Z two_phase_beyond_autoref\n-\n-//[nll_target] compile-flags: -Z borrowck=mir\n+//[nll_beyond] compile-flags: -Z two_phase_beyond_autoref\n \n // This is the second counter-example from Niko's blog post\n // smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/"}, {"sha": "dd2ef4e27ee0cae33469f329bf29f6699b1e9a7a", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z borrowck=mir\n-\n // This is the third counter-example from Niko's blog post\n // smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\n //"}, {"sha": "21b0eddb902f228f74f0e4e556be19bed400fe43", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `vec` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:16:9\n+  --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:14:9\n    |\n LL |       vec.get({\n    |       -   --- immutable borrow later used by call"}, {"sha": "6b879af5aecdac47ebb07c0a0a3b9c093d570335", "filename": "src/test/ui/borrowck/two-phase-method-receivers.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-method-receivers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-method-receivers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-method-receivers.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z borrowck=mir\n-\n // run-pass\n \n struct Foo<'a> {"}, {"sha": "53fb71ebed498e02a0b9d37baf837a670bfcfb7b", "filename": "src/test/ui/borrowck/two-phase-multiple-activations.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multiple-activations.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z borrowck=mir\n-\n // run-pass\n \n use std::io::Result;"}, {"sha": "efd63a08aae483c103d8d2ec365cb2d4c05f20cc", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.base.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.base.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:51:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:50:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -8,7 +8,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:57:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n    |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n@@ -18,7 +18,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:63:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:62:11\n    |\n LL |         f(f(10));\n    |         - ^ second mutable borrow occurs here\n@@ -27,7 +27,7 @@ LL |         f(f(10));\n    |         first borrow later used by call\n \n error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n+  --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |         f(f(10));\n    |         value moved here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:108:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:107:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -46,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:132:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -56,18 +56,18 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n    |\n help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:132:7\n    |\n LL |     i[i[3]] = 4;\n    |       ^^^^\n help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:133:5\n+  --> $DIR/two-phase-nonrecv-autoref.rs:132:5\n    |\n LL |     i[i[3]] = 4;\n    |     ^^^^^^^\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -77,12 +77,12 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow later used here\n    |\n help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n    |\n LL |     i[i[3]] = i[4];\n    |       ^^^^\n help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:139:5\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:5\n    |\n LL |     i[i[3]] = i[4];\n    |     ^^^^^^^"}, {"sha": "3518a663e59b5f9a0fb6e0762d9919c9cd662ba1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,93 +0,0 @@\n-error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:51:11\n-   |\n-LL |         f(f(10));\n-   |         - ^ second mutable borrow occurs here\n-   |         |\n-   |         first mutable borrow occurs here\n-   |         first borrow later used by call\n-\n-error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:58:11\n-   |\n-LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n-   |                                            - move occurs because `f` has type `Box<F>`, which does not implement the `Copy` trait\n-LL |         f(f(10));\n-   |         - ^ value used here after move\n-   |         |\n-   |         value moved here\n-\n-error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/two-phase-nonrecv-autoref.rs:63:11\n-   |\n-LL |         f(f(10));\n-   |         - ^ second mutable borrow occurs here\n-   |         |\n-   |         first mutable borrow occurs here\n-   |         first borrow later used by call\n-\n-error[E0382]: use of moved value: `f`\n-  --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n-   |\n-LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n-   |                     - move occurs because `f` has type `Box<dyn FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n-LL |         f(f(10));\n-   |         - ^ value used here after move\n-   |         |\n-   |         value moved here\n-\n-error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:108:27\n-   |\n-LL |     double_access(&mut a, &a);\n-   |     ------------- ------  ^^ immutable borrow occurs here\n-   |     |             |\n-   |     |             mutable borrow occurs here\n-   |     mutable borrow later used by call\n-\n-error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n-   |\n-LL |     i[i[3]] = 4;\n-   |     --^----\n-   |     | |\n-   |     | immutable borrow occurs here\n-   |     mutable borrow occurs here\n-   |     mutable borrow later used here\n-   |\n-help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:133:7\n-   |\n-LL |     i[i[3]] = 4;\n-   |       ^^^^\n-help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:133:5\n-   |\n-LL |     i[i[3]] = 4;\n-   |     ^^^^^^^\n-\n-error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n-   |\n-LL |     i[i[3]] = i[4];\n-   |     --^----\n-   |     | |\n-   |     | immutable borrow occurs here\n-   |     mutable borrow occurs here\n-   |     mutable borrow later used here\n-   |\n-help: try adding a local storing this...\n-  --> $DIR/two-phase-nonrecv-autoref.rs:139:7\n-   |\n-LL |     i[i[3]] = i[4];\n-   |       ^^^^\n-help: ...and then using that local here\n-  --> $DIR/two-phase-nonrecv-autoref.rs:139:5\n-   |\n-LL |     i[i[3]] = i[4];\n-   |     ^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors have detailed explanations: E0382, E0499, E0502.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "3d395d1f264a0d8407b3c17ca2e3cc08188ba12b", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,6 @@\n-// revisions: base nll\n-//[nll]compile-flags: -Z borrowck=mir\n+// revisions: base\n \n-//[g2p]compile-flags: -Z borrowck=mir -Z two-phase-beyond-autoref\n+//[g2p]compile-flags: -Z two-phase-beyond-autoref\n // the above revision is disabled until two-phase-beyond-autoref support is better\n \n // This is a test checking that when we limit two-phase borrows to"}, {"sha": "cbbbde61917746f28b698ccdd536412acef931a0", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.base.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.extend(shared);\n-   |     ^^------^^^^^^^^\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:27:5\n-   |\n-LL |     v.extend(&v);\n-   |     ^^------^--^\n-   |     | |      |\n-   |     | |      immutable borrow occurs here\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.extend(shared);\n-   |     ^^------^^^^^^^^\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n-   |\n-LL |     v.extend(&v);\n-   |     ^^------^--^\n-   |     | |      |\n-   |     | |      immutable borrow occurs here\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "cbbbde61917746f28b698ccdd536412acef931a0", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.extend(shared);\n-   |     ^^------^^^^^^^^\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:27:5\n-   |\n-LL |     v.extend(&v);\n-   |     ^^------^--^\n-   |     | |      |\n-   |     | |      immutable borrow occurs here\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.extend(shared);\n-   |     ^^------^^^^^^^^\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n-   |\n-LL |     v.extend(&v);\n-   |     ^^------^--^\n-   |     | |      |\n-   |     | |      immutable borrow occurs here\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "69c3d7915e43f0f09521101c897d98a57d62e8bb", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n-   |\n-LL |     let shared = &v;\n-   |                  -- immutable borrow occurs here\n-LL | \n-LL |     v.extend(shared);\n-   |     ^^------^^^^^^^^\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n-   |\n-LL |     v.extend(&v);\n-   |     ^^------^--^\n-   |     | |      |\n-   |     | |      immutable borrow occurs here\n-   |     | immutable borrow later used by call\n-   |     mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "27e599c6cd529e840fae06ed54fcbd4c4936a54a", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -2,31 +2,21 @@\n // accidentally allowed under migrate/nll, then linted against in migrate mode\n // but disallowed under NLL. Now, we accept it everywhere.\n \n-//ignore-compare-mode-nll\n //ignore-compare-mode-polonius\n \n-//revisions: base nll\n-\n-//[migrate2018] edition:2018\n-//[nll2018] edition:2018\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n fn double_conflicts() {\n     let mut v = vec![0, 1, 2];\n     let shared = &v;\n \n     v.extend(shared);\n-    //[base]~^ ERROR cannot borrow `v` as mutable\n-    //[nll]~^^ ERROR cannot borrow `v` as mutable\n+    //~^ ERROR cannot borrow `v` as mutable\n }\n \n fn activation_conflict() {\n     let mut v = vec![0, 1, 2];\n \n     v.extend(&v);\n-    //[base]~^ ERROR cannot borrow `v` as mutable\n-    //[nll]~^^ ERROR cannot borrow `v` as mutable\n+    //~^ ERROR cannot borrow `v` as mutable\n }\n \n fn reservation_allowed() {"}, {"sha": "e4dc4dc5999e21b97772c629a447a69ea427c706", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:11:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^", "previous_filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr"}, {"sha": "e3e4057d6a78902d73a7446d6b8b24d03032b15f", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.nll_target.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `vec` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference.rs:34:17\n+  --> $DIR/two-phase-reservation-sharing-interference.rs:32:17\n    |\n LL |         let shared = &vec;\n    |                      ---- immutable borrow occurs here"}, {"sha": "e0f4afa75276dbc3d98549ec145eb7735d98467d", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,11 +1,9 @@\n // revisions: nll_target\n \n // The nll_beyond revision is disabled due to missing support from two-phase beyond autorefs\n-//[nll_beyond]compile-flags: -Z borrowck=mir -Z two-phase-beyond-autoref\n+//[nll_beyond]compile-flags: -Z two-phase-beyond-autoref\n //[nll_beyond]should-fail\n \n-//[nll_target]compile-flags: -Z borrowck=mir\n-\n // This is a corner case that the current implementation is (probably)\n // treating more conservatively than is necessary. But it also does\n // not seem like a terribly important use case to cover."}, {"sha": "bf06366debebc9220b70a9f7237b3f0c310e8d1c", "filename": "src/test/ui/borrowck/two-phase-sneaky.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// cmpile-flags: -Z borrowck=mir\n-\n // This is the first counter-example from Niko's blog post\n // smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\n // of a danger for code to crash if we just turned off the check for whether"}, {"sha": "0dbed98b8414bc1b70867c53106debb3b7be29f0", "filename": "src/test/ui/borrowck/two-phase-sneaky.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/two-phase-sneaky.rs:12:9\n+  --> $DIR/two-phase-sneaky.rs:10:9\n    |\n LL |     v[0].push_str({\n    |     -    -------- first borrow later used by call"}, {"sha": "c3efe16e251baf06dc0569570012aa4fb9269711", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.base.stderr", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,68 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:20:52\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-   |                                                    ^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `fn(&'x u32)`\n-note: the anonymous lifetime #1 defined here...\n-  --> $DIR/expect-fn-supply-fn.rs:20:48\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime `'x` as defined here\n-  --> $DIR/expect-fn-supply-fn.rs:17:36\n-   |\n-LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n-   |                                    ^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:20:52\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-   |                                                    ^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `fn(&'x u32)`\n-note: the lifetime `'x` as defined here...\n-  --> $DIR/expect-fn-supply-fn.rs:17:36\n-   |\n-LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n-   |                                    ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/expect-fn-supply-fn.rs:20:48\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-   |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:38:52\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |                                                    ^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `fn(&u32)`\n-              found fn pointer `for<'r> fn(&'r u32)`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:45:53\n-   |\n-LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |                                                     ^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n-              found fn pointer `fn(&'x u32)`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:54:53\n-   |\n-LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |                                                     ^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r> fn(&'r u32)`\n-              found fn pointer `fn(&u32)`\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "7f1c140279c4e03027cba15abc6a7d2a1d56d0c1", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn with_closure_expecting_fn_with_free_region<F>(_: F)\n where\n     F: for<'a> FnOnce(fn(&'a u32), &i32),\n@@ -18,10 +14,8 @@ fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, the type given for `'x` \"obscures\" a region from the\n     // expected signature that is bound at closure level.\n     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-    //[base]~^ ERROR mismatched types\n-    //[base]~| ERROR mismatched types\n-    //[nll]~^^^ ERROR lifetime may not live long enough\n-    //[nll]~| ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR lifetime may not live long enough\n }\n \n fn expect_free_supply_free_from_closure() {"}, {"sha": "26f47eb684dfc5cca15bb5e64f50de88157d0dbc", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/expect-fn-supply-fn.rs:20:49\n+  --> $DIR/expect-fn-supply-fn.rs:16:49\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    -- lifetime `'x` defined here\n@@ -11,7 +11,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 requires that `'1` must outlive `'x`\n \n error: lifetime may not live long enough\n-  --> $DIR/expect-fn-supply-fn.rs:20:49\n+  --> $DIR/expect-fn-supply-fn.rs:16:49\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    -- lifetime `'x` defined here\n@@ -20,7 +20,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 ^ requires that `'x` must outlive `'static`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:38:49\n+  --> $DIR/expect-fn-supply-fn.rs:32:49\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                 ^ one type is more general than the other\n@@ -29,7 +29,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n               found fn pointer `fn(&u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:45:50\n+  --> $DIR/expect-fn-supply-fn.rs:39:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                  ^ one type is more general than the other\n@@ -38,7 +38,7 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n               found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:54:50\n+  --> $DIR/expect-fn-supply-fn.rs:48:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                  ^ one type is more general than the other", "previous_filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr"}, {"sha": "93ed51fa7e114cd9b5ab78237311c3a8aaf561d8", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.base.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,28 +0,0 @@\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:9\n-   |\n-LL |   fn foo(x: &()) {\n-   |             --- this data with an anonymous lifetime `'_`...\n-LL |       bar(|| {\n-   |  _________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _ = x;\n-LL | |     })\n-   | |_____^ ...is used here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:5\n-   |\n-LL |     bar(|| {\n-   |     ^^^\n-note: `'static` lifetime requirement introduced by this bound\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:39\n-   |\n-LL | fn bar<F>(blk: F) where F: FnOnce() + 'static {\n-   |                                       ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "7327d8256685d5ee966b9daeec41195b9bb8cb1b", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,15 +1,10 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n fn bar<F>(blk: F) where F: FnOnce() + 'static {\n }\n \n fn foo(x: &()) {\n     bar(|| {\n-        //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n-        //[nll]~^^ ERROR borrowed data escapes\n-        //[nll]~| ERROR closure may outlive\n+        //~^ ERROR borrowed data escapes\n+        //~| ERROR closure may outlive\n         let _ = x;\n     })\n }"}, {"sha": "85df5c1e5b3db16a9f950a886985dc570b5c3f14", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:5\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n LL |   fn foo(x: &()) {\n    |          -  - let's call the lifetime of this reference `'1`\n@@ -8,7 +8,6 @@ LL |   fn foo(x: &()) {\n LL | /     bar(|| {\n LL | |\n LL | |\n-LL | |\n LL | |         let _ = x;\n LL | |     })\n    | |      ^\n@@ -17,7 +16,7 @@ LL | |     })\n    |        argument requires that `'1` must outlive `'static`\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:9\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n    |\n LL |     bar(|| {\n    |         ^^ may outlive borrowed value `x`\n@@ -26,12 +25,11 @@ LL |         let _ = x;\n    |                 - `x` is borrowed here\n    |\n note: function requires argument type to outlive `'static`\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:9:5\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n LL | /     bar(|| {\n LL | |\n LL | |\n-LL | |\n LL | |         let _ = x;\n LL | |     })\n    | |______^", "previous_filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr"}, {"sha": "be81efd27c4ebba951ab7ecfe975884d036ce7de", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.base.stderr", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,55 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/expect-region-supply-region-2.rs:18:33\n-   |\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                                 ^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&u32`\n-              found reference `&'x u32`\n-note: the anonymous lifetime #1 defined here...\n-  --> $DIR/expect-region-supply-region-2.rs:18:29\n-   |\n-LL |       closure_expecting_bound(|x: &'x u32| {\n-   |  _____________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         f = Some(x);\n-LL | |     });\n-   | |_____^\n-note: ...does not necessarily outlive the lifetime `'x` as defined here\n-  --> $DIR/expect-region-supply-region-2.rs:13:30\n-   |\n-LL | fn expect_bound_supply_named<'x>() {\n-   |                              ^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expect-region-supply-region-2.rs:18:33\n-   |\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                                 ^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&u32`\n-              found reference `&'x u32`\n-note: the lifetime `'x` as defined here...\n-  --> $DIR/expect-region-supply-region-2.rs:13:30\n-   |\n-LL | fn expect_bound_supply_named<'x>() {\n-   |                              ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/expect-region-supply-region-2.rs:18:29\n-   |\n-LL |       closure_expecting_bound(|x: &'x u32| {\n-   |  _____________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |         f = Some(x);\n-LL | |     });\n-   | |_____^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "9b51bbd58a30a60a943be87ab9f61e1188df0b2a", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n #![allow(warnings)]\n \n fn closure_expecting_bound<F>(_: F)\n@@ -16,10 +12,8 @@ fn expect_bound_supply_named<'x>() {\n     // Here we give a type annotation that `x` should be free. We get\n     // an error because of that.\n     closure_expecting_bound(|x: &'x u32| {\n-        //[base]~^ ERROR mismatched types\n-        //[base]~| ERROR mismatched types\n-        //[nll]~^^^ ERROR lifetime may not live long enough\n-        //[nll]~| ERROR lifetime may not live long enough\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n \n         // Borrowck doesn't get a chance to run, but if it did it should error\n         // here."}, {"sha": "9aab51c986caca241d101e28e59d56bc9749b89a", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region-2.rs:18:30\n+  --> $DIR/expect-region-supply-region-2.rs:14:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              -- lifetime `'x` defined here\n@@ -10,7 +10,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |                              requires that `'1` must outlive `'x`\n \n error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region-2.rs:18:30\n+  --> $DIR/expect-region-supply-region-2.rs:14:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              -- lifetime `'x` defined here", "previous_filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.nll.stderr"}, {"sha": "255900e19bb4b932bc182a4b8dd276ae1a3f6759", "filename": "src/test/ui/const-generics/invariant.base.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,26 +0,0 @@\n-warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n-  --> $DIR/invariant.rs:18:1\n-   |\n-LL | impl SadBee for for<'a> fn(&'a ()) {\n-   | ---------------------------------- first implementation here\n-...\n-LL | impl SadBee for fn(&'static ()) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a> fn(&'a ())`\n-   |\n-   = note: `#[warn(coherence_leak_check)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n-\n-error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:31:5\n-   |\n-LL |     v\n-   |     ^ one type is more general than the other\n-   |\n-   = note: expected reference `&'static Foo<fn(&'static ())>`\n-              found reference `&'static Foo<for<'a> fn(&'a ())>`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "ee191b65c2c76fdcf8cacc2484993ae5abb090fa", "filename": "src/test/ui/const-generics/invariant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n use std::marker::PhantomData;"}, {"sha": "ce0fad104713b64a766b653e1df6065db617e691", "filename": "src/test/ui/const-generics/invariant.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n-  --> $DIR/invariant.rs:18:1\n+  --> $DIR/invariant.rs:14:1\n    |\n LL | impl SadBee for for<'a> fn(&'a ()) {\n    | ---------------------------------- first implementation here\n@@ -13,7 +13,7 @@ LL | impl SadBee for fn(&'static ()) {\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:31:5\n+  --> $DIR/invariant.rs:27:5\n    |\n LL |     v\n    |     ^ one type is more general than the other", "previous_filename": "src/test/ui/const-generics/invariant.nll.stderr"}, {"sha": "fddbfbb9d3247335bb4f0c91027b96a897fdba45", "filename": "src/test/ui/consts/const-blocks/migrate-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// ignore-compare-mode-nll\n-// compile-flags: -Z borrowck=migrate\n #![allow(warnings)]\n \n // Some type that is not copyable."}, {"sha": "803281c0794717b234ef8a3767915c00061e9493", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Bar: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:13:38\n+  --> $DIR/migrate-fail.rs:11:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n@@ -12,7 +12,7 @@ LL | #[derive(Copy)]\n    |\n \n error[E0277]: the trait bound `Bar: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:19:38\n+  --> $DIR/migrate-fail.rs:17:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`"}, {"sha": "fd66f5aa64f3224da7551438be57a57759d3386a", "filename": "src/test/ui/consts/const-blocks/migrate-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-pass.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-// compile-flags: -Z borrowck=migrate\n-// ignore-compare-mode-nll\n #![allow(warnings)]\n \n // Some type that is not copyable."}, {"sha": "fddbfbb9d3247335bb4f0c91027b96a897fdba45", "filename": "src/test/ui/consts/const-blocks/nll-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,4 +1,3 @@\n-// ignore-compare-mode-nll\n #![allow(warnings)]\n \n // Some type that is not copyable."}, {"sha": "8841af15dc0ae8b88cf827e2afc1ed8f0d487956", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Bar: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:12:38\n+  --> $DIR/nll-fail.rs:11:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n@@ -12,7 +12,7 @@ LL | #[derive(Copy)]\n    |\n \n error[E0277]: the trait bound `Bar: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:18:38\n+  --> $DIR/nll-fail.rs:17:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`"}, {"sha": "fd66f5aa64f3224da7551438be57a57759d3386a", "filename": "src/test/ui/consts/const-blocks/nll-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-pass.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-compare-mode-nll\n #![allow(warnings)]\n \n // Some type that is not copyable."}, {"sha": "fb578cda17e9f3b6fce0e9a14c51639e9eb0f999", "filename": "src/test/ui/error-codes/E0161.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ferror-codes%2FE0161.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ferror-codes%2FE0161.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.base.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:32:5\n+  --> $DIR/E0161.rs:16:5\n    |\n LL |     x.f();\n    |     ^^^^^", "previous_filename": "src/test/ui/error-codes/E0161.migrate.stderr"}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.edition.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:32:5\n-   |\n-LL |     x.f();\n-   |     ^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:32:5\n-   |\n-LL |     x.f();\n-   |     ^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "c906e3c352d97389d4c60da1da3f3a6223fa3784", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,36 +1,20 @@\n // Check that E0161 is a hard error in all possible configurations that might\n // affect it.\n \n-// revisions: migrate nll zflags edition migrateul nllul zflagsul editionul\n-//[zflags]compile-flags: -Z borrowck=migrate\n-//[edition]edition:2018\n-//[zflagsul]compile-flags: -Z borrowck=migrate\n-//[editionul]edition:2018\n-//[migrateul] check-pass\n-//[nllul] check-pass\n-//[zflagsul] check-pass\n-//[editionul] check-pass\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n+// revisions: base ul\n+//[base] check-fail\n+//[ul] check-pass\n \n #![allow(incomplete_features)]\n-#![cfg_attr(nll, feature(nll))]\n-#![cfg_attr(nllul, feature(nll))]\n-#![cfg_attr(migrateul, feature(unsized_locals))]\n-#![cfg_attr(zflagsul, feature(unsized_locals))]\n-#![cfg_attr(nllul, feature(unsized_locals))]\n-#![cfg_attr(editionul, feature(unsized_locals))]\n+#![cfg_attr(ul, feature(unsized_locals))]\n \n trait Bar {\n     fn f(self);\n }\n \n fn foo(x: Box<dyn Bar>) {\n     x.f();\n-    //[migrate,nll,zflags,edition]~^ ERROR E0161\n+    //[base]~^ ERROR E0161\n }\n \n fn main() {}"}, {"sha": "fb082bc1eabcf51bcd907f1e6d7e802fa2a4188f", "filename": "src/test/ui/error-codes/E0161.zflags.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,9 +0,0 @@\n-error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n-  --> $DIR/E0161.rs:32:5\n-   |\n-LL |     x.f();\n-   |     ^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0161`."}, {"sha": "5cb62e19ccf483e5826d082c7ea4162d63b9c2d1", "filename": "src/test/ui/error-codes/E0490.base.stderr", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,76 +0,0 @@\n-error[E0490]: a value of type `&'b ()` is borrowed for too long\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL |     let x: &'a _ = &y;\n-   |                    ^^\n-   |\n-note: the type is valid for the lifetime `'a` as defined here\n-  --> $DIR/E0490.rs:5:6\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |      ^^\n-note: but the borrow lasts for the lifetime `'b` as defined here\n-  --> $DIR/E0490.rs:5:10\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |          ^^\n-\n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL |     let x: &'a _ = &y;\n-   |                    ^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/E0490.rs:5:10\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |          ^^\n-note: ...so that the type `&'b ()` is not borrowed for too long\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL |     let x: &'a _ = &y;\n-   |                    ^^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/E0490.rs:5:6\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |      ^^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL |     let x: &'a _ = &y;\n-   |                    ^^\n-\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL |     let x: &'a _ = &y;\n-   |                    ^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/E0490.rs:5:10\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |          ^^\n-note: ...so that the expression is assignable\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL |     let x: &'a _ = &y;\n-   |                    ^^\n-   = note: expected `&'a &()`\n-              found `&'a &'b ()`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/E0490.rs:5:6\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |      ^^\n-note: ...so that the reference type `&'a &()` does not outlive the data it points at\n-  --> $DIR/E0490.rs:6:12\n-   |\n-LL |     let x: &'a _ = &y;\n-   |            ^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "80bf076e2bd6be182c41d1968487750e87acf04c", "filename": "src/test/ui/error-codes/E0490.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,28 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/E0490.rs:6:12\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     let x: &'a _ = &y;\n-   |            ^^^^^ type annotation requires that `'b` must outlive `'a`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-error[E0597]: `y` does not live long enough\n-  --> $DIR/E0490.rs:6:20\n-   |\n-LL | fn f<'a, 'b>(y: &'b ()) {\n-   |      -- lifetime `'a` defined here\n-LL |     let x: &'a _ = &y;\n-   |            -----   ^^ borrowed value does not live long enough\n-   |            |\n-   |            type annotation requires that `y` is borrowed for `'a`\n-...\n-LL | }\n-   |  - `y` dropped here while still borrowed\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "304548215dc25d0964e57435de7d2b242a6ebb00", "filename": "src/test/ui/error-codes/E0490.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,14 +0,0 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n-fn f<'a, 'b>(y: &'b ()) {\n-    let x: &'a _ = &y;\n-    //[base]~^ E0490\n-    //[base]~| E0495\n-    //[base]~| E0495\n-    //[nll]~^^^^ lifetime may not live long enough\n-    //[nll]~| E0597\n-}\n-\n-fn main() {}"}, {"sha": "fd6c5b67ef69ee4c5d55adfb2a15565bf8560b7d", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,18 +0,0 @@\n-// There isn't a great way to test feature(nll), since it just disables migrate\n-// mode and changes some error messages.\n-\n-// FIXME(Centril): This test is probably obsolete now and `nll` should become\n-// `accepted`.\n-\n-// Don't use compare-mode=nll, since that turns on NLL.\n-// ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n-\n-fn main() {\n-    let mut x = (33, &0);\n-\n-    let m = &mut x;\n-    let p = &*x.1;\n-    //~^ ERROR cannot borrow\n-    m;\n-}"}, {"sha": "edfc22c32c936070d87df100d0a3e271cee075d8", "filename": "src/test/ui/feature-gates/feature-gate-nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,14 +0,0 @@\n-error[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n-  --> $DIR/feature-gate-nll.rs:15:13\n-   |\n-LL |     let m = &mut x;\n-   |             ------ mutable borrow occurs here\n-LL |     let p = &*x.1;\n-   |             ^^^^^ immutable borrow occurs here\n-LL |\n-LL |     m;\n-   |     - mutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "6f0ea1af0579b5adfc5cd2a250f7fd6bfe4cb9f2", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.base.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,13 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:18:5\n-   |\n-LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n-   |                 -------      ----------\n-   |                 |\n-   |                 these two types are declared with different lifetimes...\n-LL |     s\n-   |     ^ ...but data from `s` flows here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "04b6f4dd84e2e92cfadbb794e1f01ec73c6cc4ab", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // check-fail\n // See issue #91068. Types in the substs of an associated type can't be implied\n // to be WF, since they don't actually have to be constructed.\n@@ -16,8 +12,7 @@ impl<T> Trait for T {\n \n fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n     s\n-    //[base]~^ ERROR lifetime mismatch [E0623]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "8096f08385c8c67b7a6c7fe27962b7e8260a184a", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:18:5\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n    |\n LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |      --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr"}, {"sha": "d44c8eb1b8233a458b5ad8a69dbc88ef3f506855", "filename": "src/test/ui/generator/auto-trait-regions.base.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,38 +0,0 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:35:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:35:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:56:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:56:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "ea4b0d554cde19910db9d16c4bd34b0d5f4249f1", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n #![feature(generators)]\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n@@ -34,7 +30,6 @@ fn main() {\n     };\n     assert_foo(gen);\n     //~^ ERROR implementation of `Foo` is not general enough\n-    //[base]~^^ ERROR implementation of `Foo` is not general enough\n \n     // Allow impls which matches any lifetime\n     let x = &OnlyFooIfRef(No);\n@@ -48,12 +43,11 @@ fn main() {\n     // Disallow impls which relates lifetimes in the generator interior\n     let gen = || {\n         let a = A(&mut true, &mut true, No);\n-        //[nll]~^ temporary value dropped while borrowed\n-        //[nll]~| temporary value dropped while borrowed\n+        //~^ temporary value dropped while borrowed\n+        //~| temporary value dropped while borrowed\n         yield;\n         assert_foo(a);\n     };\n     assert_foo(gen);\n     //~^ ERROR not general enough\n-    //[base]~^^ ERROR not general enough\n }"}, {"sha": "23324af6171a9e5810224ee6a20d97741eaa472f", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:50:24\n+  --> $DIR/auto-trait-regions.rs:45:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n@@ -12,7 +12,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:50:35\n+  --> $DIR/auto-trait-regions.rs:45:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n@@ -25,7 +25,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:35:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -34,7 +34,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:56:5\n+  --> $DIR/auto-trait-regions.rs:51:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/generator/auto-trait-regions.nll.stderr"}, {"sha": "89f6a81ad3b04d0bf6a37f6a3e536da5d5faa952", "filename": "src/test/ui/generator/generator-region-requirements.base.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,15 +0,0 @@\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/generator-region-requirements.rs:12:9\n-   |\n-LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n-   |              -------- this data with an anonymous lifetime `'_`...\n-...\n-LL |         x\n-   |         ^ ...is used here...\n-...\n-LL |             GeneratorState::Complete(c) => return c,\n-   |                                                   - ...and is required to live as long as `'static` here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "7269a79ca3f9806f6003a14a52937f4faf6104c6", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n #![feature(generators, generator_trait)]\n use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n@@ -10,12 +6,11 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     let mut g = || {\n         yield;\n         x\n-        //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n     };\n     loop {\n         match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n-            //[nll]~^ ERROR lifetime may not live long enough\n+            //~^ ERROR lifetime may not live long enough\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "87f60467287b677cbccbbcaadc1b385107e6fe5b", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/generator-region-requirements.rs:17:51\n+  --> $DIR/generator-region-requirements.rs:12:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              - let's call the lifetime of this reference `'1`", "previous_filename": "src/test/ui/generator/generator-region-requirements.nll.stderr"}, {"sha": "8521951d0c999beba32cdde742a3d27c20cdccfc", "filename": "src/test/ui/generator/resume-arg-late-bound.base.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,49 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:19:5\n-   |\n-LL |     test(gen);\n-   |     ^^^^ lifetime mismatch\n-   |\n-   = note: expected type `for<'a> Generator<&'a mut bool>`\n-              found type `Generator<&mut bool>`\n-note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/resume-arg-late-bound.rs:15:15\n-   |\n-LL |       let gen = |arg: &mut bool| {\n-   |  _______________^\n-LL | |         yield ();\n-LL | |         *arg = true;\n-LL | |     };\n-   | |_____^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:12:17\n-   |\n-LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:19:5\n-   |\n-LL |     test(gen);\n-   |     ^^^^ lifetime mismatch\n-   |\n-   = note: expected type `for<'a> Generator<&'a mut bool>`\n-              found type `Generator<&mut bool>`\n-note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/resume-arg-late-bound.rs:15:15\n-   |\n-LL |       let gen = |arg: &mut bool| {\n-   |  _______________^\n-LL | |         yield ();\n-LL | |         *arg = true;\n-LL | |     };\n-   | |_____^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:12:17\n-   |\n-LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "1c35ba80d2b1332cd883b545ab72a7d6eef790c8", "filename": "src/test/ui/generator/resume-arg-late-bound.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n //! Tests that we cannot produce a generator that accepts a resume argument\n //! with any lifetime and then stores it across a `yield`.\n \n@@ -18,5 +14,4 @@ fn main() {\n     };\n     test(gen);\n     //~^ ERROR mismatched types\n-    //[base]~^^ ERROR mismatched types\n }"}, {"sha": "b5144c607a8808463b6c9465c76fb5dd2b7c9979", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:19:5\n+  --> $DIR/resume-arg-late-bound.rs:15:5\n    |\n LL |     test(gen);\n    |     ^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:12:17\n+  --> $DIR/resume-arg-late-bound.rs:8:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/generator/resume-arg-late-bound.nll.stderr"}, {"sha": "81125a7d6f320c117740bf621c83a091095e13c9", "filename": "src/test/ui/generic-associated-types/bugs/issue-89352.base.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89352.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,22 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-89352.rs:36:13\n-   |\n-LL |         let a = A::reborrow::<'ai, 's>(self.a.clone());\n-   |             ^ lifetime mismatch\n-   |\n-   = note: expected type `<<A as GenAssoc<T>>::Iter<'s> as Sized>`\n-              found type `<<A as GenAssoc<T>>::Iter<'ai> as Sized>`\n-note: the lifetime `'s` as defined here...\n-  --> $DIR/issue-89352.rs:35:13\n-   |\n-LL |     fn iter<'s>(&'s self) -> Self::Iter<'s> {\n-   |             ^^\n-note: ...does not necessarily outlive the lifetime `'ai` as defined here\n-  --> $DIR/issue-89352.rs:30:6\n-   |\n-LL | impl<'ai, T: 'ai, A: GenAssoc<T>> GenAssoc<T> for Wrapper<'ai, T, A>\n-   |      ^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "3da7794b3d2c0352f504612541e6dd3f52270351", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,26 +1,12 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator.rs:16:45\n+  --> $DIR/lending_iterator.rs:14:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n ...\n LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n    |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n \n-error[E0311]: the parameter type `Self` may not live long enough\n-  --> $DIR/lending_iterator.rs:37:9\n-   |\n-LL |         <B as FromLendingIterator<A>>::from_iter(self)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `Self: 'a`...\n-   = note: ...so that the type `Self` will meet its required lifetime bounds...\n-note: ...that is required by this bound\n-  --> $DIR/lending_iterator.rs:12:45\n-   |\n-LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n-   |                                             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0276`."}, {"sha": "ede164766361e47a65f09ddbf05ec04d239fac14", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// FIXME(nll): this is experimental anyways, don't really care about the output\n-// ignore-compare-mode-nll\n // revisions: base extended\n //[base] check-fail\n //[extended] check-pass\n@@ -35,7 +33,6 @@ pub trait LendingIterator {\n         Self: for<'q> LendingIterator<Item<'q> = A>,\n     {\n         <B as FromLendingIterator<A>>::from_iter(self)\n-        //[base]~^ the parameter type\n     }\n }\n "}, {"sha": "d9c656d5f58a9e8495a2cf0b2386c4d5bd91529c", "filename": "src/test/ui/generic-associated-types/issue-89352.rs", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,16 +1,4 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n-//[base] check-fail\n-//[nll] check-pass\n-// known-bug\n-\n-// This should pass, but we end up with `A::Iter<'ai>: Sized` for some specific\n-// `'ai`. We also know that `for<'at> A::Iter<'at>: Sized` from the definition,\n-// but we prefer param env candidates. We changed this to preference in #92191,\n-// but this led to unintended consequences (#93262). Suprisingly, this passes\n-// under NLL. So only a bug in migrate mode.\n+// check-pass\n \n #![feature(generic_associated_types)]\n ", "previous_filename": "src/test/ui/generic-associated-types/bugs/issue-89352.rs"}, {"sha": "03dc8ef93fe3ac80949f39107058b42687d6a56f", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,4 @@\n-// revisions: migrate nll\n-//[nll]compile-flags: -Z borrowck=mir\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n-\n-//[nll] check-pass\n-//[migrate] check-fail\n+//check-pass\n \n #![feature(generic_associated_types)]\n \n@@ -25,7 +16,6 @@ impl<T> Foo<T> for () {\n \n fn foo<T>() {\n     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n-    //[migrate]~^ the parameter type `T` may not live long enough\n }\n \n pub fn main() {}"}, {"sha": "bfe0fc15fd310aa4729b6defec08304a8901180d", "filename": "src/test/ui/generic-associated-types/issue-92096.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,10 +1,6 @@\n // edition:2018\n-// [nll] check-pass\n-// revisions: migrate nll\n-// Explicitly testing nll with revision, so ignore compare-mode=nll\n-// ignore-compare-mode-nll\n+// check-pass\n \n-#![cfg_attr(nll, feature(nll))]\n #![feature(generic_associated_types)]\n \n use std::future::Future;\n@@ -18,8 +14,6 @@ trait Client {\n }\n \n fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n-//[migrate]~^ ERROR the parameter\n-//[migrate]~| ERROR the parameter\n where\n     C: Client + Send + Sync,\n {"}, {"sha": "341e2e05d1cd9163c4b590e5387423b8492c28ca", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.base.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,33 +0,0 @@\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:21:7\n-   |\n-LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n-   |         ------------------------------- this data with an anonymous lifetime `'_`...\n-LL |     x.m()\n-   |     - ^\n-   |     |\n-   |     ...is used and required to live as long as `'static` here\n-\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n-   |\n-LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n-   |                                       -- this data with an anonymous lifetime `'_`...\n-LL |     x.m()\n-   |     - ^\n-   |     |\n-   |     ...is used and required to live as long as `'static` here\n-\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:33:7\n-   |\n-LL | fn h(x: &()) -> &'static () {\n-   |         --- this data with an anonymous lifetime `'_`...\n-LL |     x.m()\n-   |     - ^\n-   |     |\n-   |     ...is used and required to live as long as `'static` here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "a40c0c2c4c74e8b4c1d756cf087e1893ae6606a4", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n #![feature(generic_associated_types)]\n \n pub trait X {\n@@ -19,20 +15,17 @@ impl X for () {\n \n fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n     x.m()\n-    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n     x.m()\n-    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn h(x: &()) -> &'static () {\n     x.m()\n-    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "4620aa34e84d926054c60d0f638ab12ebfec5c01", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:21:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n    |\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:33:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`", "previous_filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.nll.stderr"}, {"sha": "1df76a21bf9b4d68cf297c3711498457e985ee18", "filename": "src/test/ui/generic-associated-types/trait-objects.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `StreamingIterator` cannot be made into an object\n-  --> $DIR/trait-objects.rs:16:21\n+  --> $DIR/trait-objects.rs:14:21\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-objects.rs:10:10\n+  --> $DIR/trait-objects.rs:8:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object..."}, {"sha": "52d48d57859f473749889611528d3c5713c18f60", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,12 +1,17 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/trait-objects.rs:18:7\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/trait-objects.rs:16:5\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n-   |                ------------------------------------------------------ help: add explicit lifetime `'a` to the type of `x`: `&'a mut (dyn StreamingIterator<for<'a> Item = &'a i32> + 'a)`\n+   |             -  - let's call the lifetime of this reference `'1`\n+   |             |\n+   |             `x` is a reference that is only valid in the function body\n LL |\n LL |     x.size_hint().0\n-   |       ^^^^^^^^^ lifetime `'a` required\n+   |     ^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "c1da1e0a326d40e7bd77d840740682dfb532fa12", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,3 @@\n-// FIXME(nll): this is experimental anyways, don't really care about the output\n-// ignore-compare-mode-nll\n // revisions: base extended\n \n #![feature(generic_associated_types)]\n@@ -16,7 +14,7 @@ trait StreamingIterator {\n fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n     //[base]~^ the trait `StreamingIterator` cannot be made into an object\n     x.size_hint().0\n-    //[extended]~^ explicit lifetime required\n+    //[extended]~^ borrowed data escapes\n }\n \n fn main() {}"}, {"sha": "ec576ee529a4d6d2496f635bcbe47beab3468b1a", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.base.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,15 +0,0 @@\n-error[E0477]: the type `&'a V` does not fulfill the required lifetime\n-  --> $DIR/issue-59311.rs:21:5\n-   |\n-LL |     v.t(|| {});\n-   |     ^^^^^^^^^^\n-   |\n-note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/issue-59311.rs:19:24\n-   |\n-LL |     for<'a> &'a V: T + 'static,\n-   |                        ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0477`."}, {"sha": "3ad548450e583df0b2064e7de88cf85c54ef3b98", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -6,10 +6,6 @@\n // an error, but the regression test is here to ensure\n // that it does not ICE. See discussion on #74889 for details.\n \n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n pub trait T {\n     fn t<F: Fn()>(&self, _: F) {}\n }\n@@ -19,9 +15,8 @@ where\n     for<'a> &'a V: T + 'static,\n {\n     v.t(|| {});\n-    //[base]~^ ERROR: `&'a V` does not fulfill the required lifetime\n-    //[nll]~^^ ERROR: higher-ranked lifetime error\n-    //[nll]~| ERROR: higher-ranked lifetime error\n+    //~^ ERROR: higher-ranked lifetime error\n+    //~| ERROR: higher-ranked lifetime error\n }\n \n fn main() {}"}, {"sha": "15e83ab5a347dfa72ed6971a59661b101fa7e97c", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,13 @@\n error: higher-ranked lifetime error\n-  --> $DIR/issue-59311.rs:21:5\n+  --> $DIR/issue-59311.rs:17:5\n    |\n LL |     v.t(|| {});\n    |     ^^^^^^^^^^\n    |\n-   = note: could not prove [closure@$DIR/issue-59311.rs:21:9: 21:14] well-formed\n+   = note: could not prove [closure@$DIR/issue-59311.rs:17:9: 17:14] well-formed\n \n error: higher-ranked lifetime error\n-  --> $DIR/issue-59311.rs:21:9\n+  --> $DIR/issue-59311.rs:17:9\n    |\n LL |     v.t(|| {});\n    |         ^^^^^", "previous_filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.nll.stderr"}, {"sha": "c24afdd418bf9172836271badcdddbe334efd8b3", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.base.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,20 +0,0 @@\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:49:5\n-   |\n-LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:53:5\n-   |\n-LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "0f38f8e3283a278a5a6579706eee58b6e1fe4800", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.migrate.stderr", "status": "modified", "additions": 68, "deletions": 9, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,20 +1,79 @@\n-error: implementation of `Parser` is not general enough\n+error[E0308]: mismatched types\n   --> $DIR/issue-71955.rs:54:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+   = note: expected type `for<'r, 's> FnOnce<(&'r &'s str,)>`\n+              found type `for<'r> FnOnce<(&'r &str,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:54:24\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:9\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71955.rs:54:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&&str,)>`\n+              found type `for<'r> FnOnce<(&'r &str,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:54:24\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:44\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |                                            ^^^^\n \n-error: implementation of `Parser` is not general enough\n+error[E0308]: mismatched types\n   --> $DIR/issue-71955.rs:58:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n+              found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:58:24\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:9\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&Wrapper<'_>,)>`\n+              found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:58:24\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:44\n    |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |                                            ^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1d90226a3f48672ed41defb3bb5f3c37d61e2a3d", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // check-fail\n #![feature(rustc_attrs)]\n \n@@ -47,11 +43,9 @@ fn main() {\n     }\n \n     foo(bar, \"string\", |s| s.len() == 5);\n-    //[base]~^ ERROR implementation of `Parser` is not general enough\n-    //[nll]~^^ ERROR mismatched types\n-    //[nll]~| ERROR mismatched types\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n     foo(baz, \"string\", |s| s.0.len() == 5);\n-    //[base]~^ ERROR implementation of `Parser` is not general enough\n-    //[nll]~^^ ERROR mismatched types\n-    //[nll]~| ERROR mismatched types\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n }"}, {"sha": "340371031e86eea5e24618b053d345516c618f89", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,75 +1,75 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:49:5\n+  --> $DIR/issue-71955.rs:45:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r, 's> FnOnce<(&'r &'s str,)>`\n               found type `for<'r> FnOnce<(&'r &str,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:49:24\n+  --> $DIR/issue-71955.rs:45:24\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:29:9\n+  --> $DIR/issue-71955.rs:25:9\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:49:5\n+  --> $DIR/issue-71955.rs:45:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `FnOnce<(&&str,)>`\n               found type `for<'r> FnOnce<(&'r &str,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:49:24\n+  --> $DIR/issue-71955.rs:45:24\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:29:44\n+  --> $DIR/issue-71955.rs:25:44\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |                                            ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:53:5\n+  --> $DIR/issue-71955.rs:48:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n               found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:53:24\n+  --> $DIR/issue-71955.rs:48:24\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:29:9\n+  --> $DIR/issue-71955.rs:25:9\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-71955.rs:53:5\n+  --> $DIR/issue-71955.rs:48:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `FnOnce<(&Wrapper<'_>,)>`\n               found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-71955.rs:53:24\n+  --> $DIR/issue-71955.rs:48:24\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |                        ^^^^^^^^^^^^^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/issue-71955.rs:29:44\n+  --> $DIR/issue-71955.rs:25:44\n    |\n LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n    |                                            ^^^^", "previous_filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.nll.stderr"}, {"sha": "3edb1064e3e3e28a73c92527b743885e40e561c3", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,17 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype-nll.rs:60:13\n-   |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-...\n-LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n-LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n-   | |_____________________________________________- in this macro invocation\n-   |\n-   = note: expected enum `Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n-              found enum `Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "f02eeea90bfd386111a7013eded67d342b2b5b90", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_a_vs_free_x.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_a_vs_free_x.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,17 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype-nll.rs:60:13\n-   |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-...\n-LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n-LL | | fn(&'x u32)) }\n-   | |______________- in this macro invocation\n-   |\n-   = note: expected enum `Option<for<'a> fn(&'a u32)>`\n-              found enum `Option<fn(&u32)>`\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "bfc9793fe5d6d3023e74f81b7250c025ec06178c", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.bound_inv_a_b_vs_bound_inv_a.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,31 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype-nll.rs:60:13\n-   |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-...\n-LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n-LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n-   | |__________________________________- in this macro invocation\n-   |\n-   = note: expected enum `Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n-              found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype-nll.rs:60:13\n-   |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-...\n-LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n-LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n-   | |__________________________________- in this macro invocation\n-   |\n-   = note: expected enum `Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n-              found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "ee0dc877fd1275e3711cc532dcda03431fda446f", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_inv_x_vs_free_inv_y.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,42 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/hr-subtype-nll.rs:54:13\n-   |\n-LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n-   |                      --  -- lifetime `'y` defined here\n-   |                      |\n-   |                      lifetime `'x` defined here\n-LL |               gimme::<$t2>(None::<$t1>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | | fn(Inv<'y>)) }\n-   | |______________- in this macro invocation\n-   |\n-   = help: consider adding the following bound: `'x: 'y`\n-   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: lifetime may not live long enough\n-  --> $DIR/hr-subtype-nll.rs:60:13\n-   |\n-LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-   |                        --  -- lifetime `'y` defined here\n-   |                        |\n-   |                        lifetime `'x` defined here\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | | fn(Inv<'y>)) }\n-   | |______________- in this macro invocation\n-   |\n-   = help: consider adding the following bound: `'x: 'y`\n-   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n-   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "75904d6df997aefe85c4c12b1a1c8a37e018b57d", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.free_x_vs_free_y.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.free_x_vs_free_y.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,19 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/hr-subtype-nll.rs:60:13\n-   |\n-LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-   |                        --  -- lifetime `'y` defined here\n-   |                        |\n-   |                        lifetime `'x` defined here\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n-...\n-LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n-LL | | fn(&'y u32)) }\n-   | |______________- in this macro invocation\n-   |\n-   = help: consider adding the following bound: `'x: 'y`\n-   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-"}, {"sha": "7fc1692b3506c416b89cf303d9b7ff42a33c2b1f", "filename": "src/test/ui/hr-subtype/hr-subtype-nll.rs", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype-nll.rs?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,117 +0,0 @@\n-// Targeted tests for the higher-ranked subtyping code.\n-\n-#![allow(dead_code)]\n-\n-// revisions: bound_a_vs_bound_a\n-// revisions: bound_a_vs_bound_b\n-// revisions: bound_inv_a_vs_bound_inv_b\n-// revisions: bound_co_a_vs_bound_co_b\n-// revisions: bound_a_vs_free_x\n-// revisions: free_x_vs_free_x\n-// revisions: free_x_vs_free_y\n-// revisions: free_inv_x_vs_free_inv_y\n-// revisions: bound_a_b_vs_bound_a\n-// revisions: bound_co_a_b_vs_bound_co_a\n-// revisions: bound_contra_a_contra_b_ret_co_a\n-// revisions: bound_co_a_co_b_ret_contra_a\n-// revisions: bound_inv_a_b_vs_bound_inv_a\n-// revisions: bound_a_b_ret_a_vs_bound_a_ret_a\n-\n-//[bound_a_vs_bound_a] check-pass\n-//[bound_a_vs_bound_b] check-pass\n-//[bound_inv_a_vs_bound_inv_b] check-pass\n-//[bound_co_a_vs_bound_co_b] check-pass\n-//[free_x_vs_free_x] check-pass\n-//[bound_co_a_b_vs_bound_co_a] check-pass\n-//[bound_co_a_co_b_ret_contra_a] check-pass\n-//[bound_a_b_vs_bound_a] check-pass\n-//[bound_contra_a_contra_b_ret_co_a] check-pass\n-\n-// compile-flags: -Z borrowck=mir\n-// ignore-compare-mode-nll\n-// FIXME(nll): When stabilizing, this test should be replace with `hr-subtype.rs`\n-// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n-// a separate test is just easier.\n-\n-fn gimme<T>(_: Option<T>) {}\n-\n-struct Inv<'a> {\n-    x: *mut &'a u32,\n-}\n-\n-struct Co<'a> {\n-    x: fn(&'a u32),\n-}\n-\n-struct Contra<'a> {\n-    x: &'a u32,\n-}\n-\n-macro_rules! check {\n-    ($rev:ident: ($t1:ty, $t2:ty)) => {\n-        #[cfg($rev)]\n-        fn subtype<'x, 'y: 'x, 'z: 'y>() {\n-            gimme::<$t2>(None::<$t1>);\n-            //[free_inv_x_vs_free_inv_y]~^ ERROR\n-        }\n-\n-        #[cfg($rev)]\n-        fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-            gimme::<$t1>(None::<$t2>);\n-            //[bound_a_vs_free_x]~^ ERROR\n-            //[free_x_vs_free_y]~^^ ERROR\n-            //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n-            //[bound_inv_a_b_vs_bound_inv_a]~| ERROR\n-            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^^ ERROR\n-            //[free_inv_x_vs_free_inv_y]~^^^^^^ ERROR\n-        }\n-    };\n-}\n-\n-// If both have bound regions, they are equivalent, regardless of\n-// variant.\n-check! { bound_a_vs_bound_a: (for<'a> fn(&'a u32),\n-for<'a> fn(&'a u32)) }\n-check! { bound_a_vs_bound_b: (for<'a> fn(&'a u32),\n-for<'b> fn(&'b u32)) }\n-check! { bound_inv_a_vs_bound_inv_b: (for<'a> fn(Inv<'a>),\n-for<'b> fn(Inv<'b>)) }\n-check! { bound_co_a_vs_bound_co_b: (for<'a> fn(Co<'a>),\n-for<'b> fn(Co<'b>)) }\n-\n-// Bound is a subtype of free.\n-check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n-fn(&'x u32)) }\n-\n-// Two free regions are relatable if subtyping holds.\n-check! { free_x_vs_free_x: (fn(&'x u32),\n-fn(&'x u32)) }\n-check! { free_x_vs_free_y: (fn(&'x u32),\n-fn(&'y u32)) }\n-check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-fn(Inv<'y>)) }\n-\n-// Somewhat surprisingly, a fn taking two distinct bound lifetimes and\n-// a fn taking one bound lifetime can be interchangeable, but only if\n-// we are co- or contra-variant with respect to both lifetimes.\n-//\n-// The reason is:\n-// - if we are covariant, then 'a and 'b can be set to the call-site\n-//   intersection;\n-// - if we are contravariant, then 'a can be inferred to 'static.\n-check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n-for<'a>    fn(&'a u32, &'a u32)) }\n-check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n-for<'a>    fn(Co<'a>, Co<'a>)) }\n-check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>,\n-for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n-check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n-for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n-\n-// If we make those lifetimes invariant, then the two types are not interchangeable.\n-check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n-for<'a>    fn(Inv<'a>, Inv<'a>)) }\n-check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n-for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n-\n-fn main() {}"}, {"sha": "b7264c7e933f30d744adf60f8fc15d47d2dbcf70", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:59:26\n+  --> $DIR/hr-subtype.rs:54:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }"}, {"sha": "2355979b0f95d7dc3488790e687095332ce6d5ae", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,15 +1,15 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:59:26\n+  --> $DIR/hr-subtype.rs:54:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | | fn(&'x u32)) }\n    | |______________- in this macro invocation\n    |\n    = note: expected enum `Option<for<'a> fn(&'a u32)>`\n-              found enum `Option<fn(&'x u32)>`\n+              found enum `Option<fn(&u32)>`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a73c03feb8768a474973d3d4e8240c16f4df2556", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:59:26\n+  --> $DIR/hr-subtype.rs:54:13\n    |\n LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ one type is more general than the other\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n ...\n LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n@@ -12,6 +12,20 @@ LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n               found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/hr-subtype.rs:54:13\n+   |\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+...\n+LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n+LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n+   | |__________________________________- in this macro invocation\n+   |\n+   = note: expected enum `Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n+              found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "31d36d7168b612f6e6f1010d49a242eab4ca9566", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 22, "deletions": 47, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,67 +1,42 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:53:26\n-   |\n-LL |               gimme::<$t2>(None::<$t1>);\n-   |                            ^^^^^^^^^^^ lifetime mismatch\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | | fn(Inv<'y>)) }\n-   | |______________- in this macro invocation\n-   |\n-   = note: expected enum `Option<fn(Inv<'y>)>`\n-              found enum `Option<fn(Inv<'x>)>`\n-note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:52:20\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:48:13\n    |\n LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n-   |                      ^^\n+   |                      --  -- lifetime `'y` defined here\n+   |                      |\n+   |                      lifetime `'x` defined here\n+LL |               gimme::<$t2>(None::<$t1>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n ...\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:52:24\n    |\n-LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n-   |                          ^^\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | | fn(Inv<'y>)) }\n-   | |______________- in this macro invocation\n+   = help: consider adding the following bound: `'x: 'y`\n+   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:59:26\n-   |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ lifetime mismatch\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | | fn(Inv<'y>)) }\n-   | |______________- in this macro invocation\n-   |\n-   = note: expected enum `Option<fn(Inv<'x>)>`\n-              found enum `Option<fn(Inv<'y>)>`\n-note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:58:22\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:54:13\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-   |                        ^^\n+   |                        --  -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n ...\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:58:26\n    |\n-LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-   |                            ^^\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | | fn(Inv<'y>)) }\n-   | |______________- in this macro invocation\n+   = help: consider adding the following bound: `'x: 'y`\n+   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "269cde54c7e3d2acc15b1a07956c8efd49fc4674", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,35 +1,19 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hr-subtype.rs:59:26\n-   |\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |                            ^^^^^^^^^^^ lifetime mismatch\n-...\n-LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n-LL | | fn(&'y u32)) }\n-   | |______________- in this macro invocation\n-   |\n-   = note: expected enum `Option<fn(&'x u32)>`\n-              found enum `Option<fn(&'y u32)>`\n-note: the lifetime `'x` as defined here...\n-  --> $DIR/hr-subtype.rs:58:22\n+error: lifetime may not live long enough\n+  --> $DIR/hr-subtype.rs:54:13\n    |\n LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-   |                        ^^\n+   |                        --  -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n ...\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | | fn(&'y u32)) }\n    | |______________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime `'y` as defined here\n-  --> $DIR/hr-subtype.rs:58:26\n    |\n-LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n-   |                            ^^\n-...\n-LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n-LL | | fn(&'y u32)) }\n-   | |______________- in this macro invocation\n+   = help: consider adding the following bound: `'x: 'y`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c770e0de85c0805b80b26a8c380da651db35e786", "filename": "src/test/ui/hr-subtype/hr-subtype.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -27,11 +27,6 @@\n //[bound_a_b_vs_bound_a] check-pass\n //[bound_contra_a_contra_b_ret_co_a] check-pass\n \n-// ignore-compare-mode-nll\n-// FIXME(nll): When stabilizing, this test should be replaced with `hr-subtype-nll.rs`\n-// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n-// a separate test is just easier.\n-\n fn gimme<T>(_: Option<T>) {}\n \n struct Inv<'a> {\n@@ -60,8 +55,9 @@ macro_rules! check {\n             //[bound_a_vs_free_x]~^ ERROR\n             //[free_x_vs_free_y]~^^ ERROR\n             //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR\n-            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR\n-            //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR\n+            //[bound_inv_a_b_vs_bound_inv_a]~| ERROR\n+            //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^^ ERROR\n+            //[free_inv_x_vs_free_inv_y]~^^^^^^ ERROR\n         }\n     };\n }"}, {"sha": "c6cb77d8d8db9f00efe4796e693a75c81d3887ad", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.base.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,42 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:13:47\n-   |\n-LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n-   |                                               ^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n-              found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:18:31\n-   |\n-LL |     let _x: (&'static i32,) = x;\n-   |                               ^ lifetime mismatch\n-   |\n-   = note: expected tuple `(&'static i32,)`\n-              found tuple `(&'c i32,)`\n-note: the lifetime `'c` as defined here...\n-  --> $DIR/placeholder-pattern-fail.rs:17:12\n-   |\n-LL | fn simple1<'c>(x: (&'c i32,)) {\n-   |            ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:23:30\n-   |\n-LL |     let _: (&'static i32,) = x;\n-   |                              ^ lifetime mismatch\n-   |\n-   = note: expected tuple `(&'static i32,)`\n-              found tuple `(&'c i32,)`\n-note: the lifetime `'c` as defined here...\n-  --> $DIR/placeholder-pattern-fail.rs:22:12\n-   |\n-LL | fn simple2<'c>(x: (&'c i32,)) {\n-   |            ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "bd4533e0433ff8a4084dc1736c67b4bc22b883cd", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Check that incorrect higher ranked subtyping\n // causes an error.\n struct Inv<'a>(fn(&'a ()) -> &'a ());\n@@ -16,12 +12,10 @@ fn hr_subtype<'c>(f: for<'a, 'b> fn(Inv<'a>, Inv<'a>)) {\n \n fn simple1<'c>(x: (&'c i32,)) {\n     let _x: (&'static i32,) = x;\n-    //[base]~^ ERROR mismatched types\n }\n \n fn simple2<'c>(x: (&'c i32,)) {\n     let _: (&'static i32,) = x;\n-    //[base]~^ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "73b0a3173644772a32c111083e5a00e6250112c2", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/placeholder-pattern-fail.rs:13:47\n+  --> $DIR/placeholder-pattern-fail.rs:9:47\n    |\n LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n    |                                               ^^^ one type is more general than the other", "previous_filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.nll.stderr"}, {"sha": "e55e56f916bad2a549b4f73efab9eff7a8c615ac", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:31:10\n-   |\n-LL | fn b() { want_foo2::<SomeStruct>(); }\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n-   = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e83686404a351b1f5abf79a41038192b870b0642", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Test that an impl with only one bound region `'a` cannot be used to\n // satisfy a constraint where there are two bound regions.\n \n@@ -29,8 +25,7 @@ impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n \n fn a() { want_foo1::<SomeStruct>(); } // OK -- foo wants just one region\n fn b() { want_foo2::<SomeStruct>(); }\n-//[base]~^ ERROR\n-//[nll]~^^ ERROR implementation of\n-//[nll]~| ERROR implementation of\n+//~^ ERROR implementation of\n+//~| ERROR implementation of\n \n fn main() { }"}, {"sha": "46f5308dd87ba4cb193cc6884f806743790f883f", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:31:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL | fn b() { want_foo2::<SomeStruct>(); }\n    = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:31:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-conflate-regions.nll.stderr"}, {"sha": "006b6756b1eb5b1a4b9357f4c5eabae52e0451ca", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:38:5\n-   |\n-LL |     foo::<()>();\n-   |     ^^^^^^^^^ implementation of `Trait` is not general enough\n-   |\n-   = note: `()` must implement `Trait<for<'b> fn(&'b u32)>`\n-   = note: ...but it actually implements `Trait<fn(&'0 u32)>`, for some specific lifetime `'0`\n-\n-error: aborting due to previous error\n-"}, {"sha": "921061916fc95b7d46c891db83d39cfae29499a5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Test a case where variance and higher-ranked types interact in surprising ways.\n //\n // In particular, we test this pattern in trait solving, where it is not connected"}, {"sha": "364b613fc7717b87ac4401c7d5edaa7883bad873", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:38:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^^^ implementation of `Trait` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.nll.stderr"}, {"sha": "05575b01834b78335a5359b69ef77738660d0f7e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:32:5\n-   |\n-LL |     foo::<()>();\n-   |     ^^^^^^^^^ implementation of `Trait` is not general enough\n-   |\n-   = note: `()` must implement `Trait<for<'b> fn(Cell<&'b u32>)>`\n-   = note: ...but it actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n-\n-error: aborting due to previous error\n-"}, {"sha": "9b9e4496a870dc926c88791b9e4aaebc4e54d623", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Test an `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n //\n // In particular, we test this pattern in trait solving, where it is not connected"}, {"sha": "cb2ce8a4116aa887b5621130f33e9f5e1bbd391d", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:32:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^^^ implementation of `Trait` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.nll.stderr"}, {"sha": "6e20b100664670d1757e8099457b9b85a1906f97", "filename": "src/test/ui/hrtb/hrtb-just-for-static.base.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,20 +0,0 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:28:5\n-   |\n-LL |     want_hrtb::<StaticInt>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Foo<&'static isize>`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:34:5\n-   |\n-LL |     want_hrtb::<&'a u32>()\n-   |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo<&'0 isize>` would have to be implemented for the type `&'a u32`, for any lifetime `'0`...\n-   = note: ...but `Foo<&'1 isize>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "ffafdce2a6c8315082178828684a136ce3686728", "filename": "src/test/ui/hrtb/hrtb-just-for-static.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Test a case where you have an impl of `Foo<X>` for all `X` that\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n@@ -32,9 +28,8 @@ fn give_static() {\n impl<'a> Foo<&'a isize> for &'a u32 { }\n fn give_some<'a>() {\n     want_hrtb::<&'a u32>()\n-    //[base]~^ ERROR\n-    //[nll]~^^ ERROR lifetime may not live long enough\n-    //[nll]~| ERROR implementation of `Foo` is not general enough\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR implementation of `Foo` is not general enough\n }\n \n fn main() { }"}, {"sha": "a5770431eaff105648be42fac3c8330dfe8975b8", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:28:5\n+  --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,15 +8,15 @@ LL |     want_hrtb::<StaticInt>()\n    = note: ...but it actually implements `Foo<&'static isize>`\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-just-for-static.rs:34:5\n+  --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:34:5\n+  --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr"}, {"sha": "678a1137cd678930cb5e82daa513a8214bb32251", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.base.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,20 +0,0 @@\n-error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n-   |\n-LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n-   |\n-   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<&'b isize>`\n-\n-error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n-   |\n-LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n-   |\n-   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<&'b isize>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "d45fa183c0c4c5f8cd571d5ba5dd32f384e52ffa", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Test a case where you have an impl of `Foo<X>` for all `X` that\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n@@ -17,7 +13,7 @@ impl<'a, X, F> Foo<X> for &'a mut F where F: Foo<X> + Bar<X> {}\n \n impl<'a, X, F> Bar<X> for &'a mut F where F: Bar<X> {}\n \n-fn no_hrtb<'b, T>(mut t: T) //[nll]~ WARN function cannot return\n+fn no_hrtb<'b, T>(mut t: T) //~ WARN function cannot return\n where\n     T: Bar<&'b isize>,\n {\n@@ -26,7 +22,7 @@ where\n     no_hrtb(&mut t);\n }\n \n-fn bar_hrtb<T>(mut t: T) //[nll]~ WARN function cannot return\n+fn bar_hrtb<T>(mut t: T) //~ WARN function cannot return\n where\n     T: for<'b> Bar<&'b isize>,\n {\n@@ -36,7 +32,7 @@ where\n     bar_hrtb(&mut t);\n }\n \n-fn foo_hrtb_bar_not<'b, T>(mut t: T) //[nll]~ WARN function cannot return\n+fn foo_hrtb_bar_not<'b, T>(mut t: T) //~ WARN function cannot return\n where\n     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n {\n@@ -46,11 +42,10 @@ where\n     // clause only specifies `T : Bar<&'b isize>`.\n     foo_hrtb_bar_not(&mut t);\n     //~^ ERROR implementation of `Bar` is not general enough\n-    //[base]~^^ ERROR implementation of `Bar` is not general enough\n-    //[nll]~^^^ ERROR lifetime may not live long enough\n+    //~^^ ERROR lifetime may not live long enough\n }\n \n-fn foo_hrtb_bar_hrtb<T>(mut t: T) //[nll]~ WARN function cannot return\n+fn foo_hrtb_bar_hrtb<T>(mut t: T) //~ WARN function cannot return\n where\n     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n {"}, {"sha": "68da46d46bd14a20fa23b25d9aa33aba934a73ce", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:20:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:16:1\n    |\n LL | / fn no_hrtb<'b, T>(mut t: T)\n LL | | where\n@@ -15,7 +15,7 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:29:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:25:1\n    |\n LL | / fn bar_hrtb<T>(mut t: T)\n LL | | where\n@@ -30,7 +30,7 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:35:1\n    |\n LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n LL | | where\n@@ -39,15 +39,15 @@ LL | | {\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n-...  |\n+LL | |\n LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n    |                     -- lifetime `'b` defined here\n@@ -56,7 +56,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n@@ -65,7 +65,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:53:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:48:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n LL | | where", "previous_filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr"}, {"sha": "dba3911d99c17769ff4c588853bb7856ca3a73dd", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,53 +0,0 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:122:22\n-   |\n-LL | pub struct Map<S, F> {\n-   | --------------------\n-   | |\n-   | method `filterx` not found for this\n-   | doesn't satisfy `_: StreamExt`\n-...\n-LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>` due to unsatisfied trait bounds\n-   |\n-note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n-  --> $DIR/issue-30786.rs:100:50\n-   |\n-LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n-   |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let filter = map.stream.filterx(|x: &_| true);\n-   |                      +++++++\n-\n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:134:24\n-   |\n-LL | pub struct Filter<S, F> {\n-   | -----------------------\n-   | |\n-   | method `countx` not found for this\n-   | doesn't satisfy `_: StreamExt`\n-...\n-LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>` due to unsatisfied trait bounds\n-   |\n-note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n-  --> $DIR/issue-30786.rs:100:50\n-   |\n-LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n-   |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n-help: one of the expressions' fields has a method of the same name\n-   |\n-LL |     let count = filter.stream.countx();\n-   |                        +++++++\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "e5f46f711c2fbf73721f792ed9e1d6903a82c178", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // rust-lang/rust#30786: the use of `for<'b> &'b mut A: Stream<Item=T`\n // should act as assertion that item does not borrow from its stream;\n // but an earlier buggy rustc allowed `.map(|x: &_| x)` which does"}, {"sha": "1ee549e54a908ce8c39266ab9e9d40bc4cbe9be1", "filename": "src/test/ui/hrtb/issue-30786.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:122:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:118:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,13 +8,13 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n-  --> $DIR/issue-30786.rs:100:50\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:117:27: 117:36]>: Stream`\n+  --> $DIR/issue-30786.rs:96:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n@@ -23,8 +23,8 @@ help: one of the expressions' fields has a method of the same name\n LL |     let filter = map.stream.filterx(|x: &_| true);\n    |                      +++++++\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:134:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:130:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -33,13 +33,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n-  --> $DIR/issue-30786.rs:100:50\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:129:30: 129:42]>: Stream`\n+  --> $DIR/issue-30786.rs:96:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here", "previous_filename": "src/test/ui/hrtb/issue-30786.base.stderr"}, {"sha": "d1f6fed10fdde9977c7280ebed7b2e1060c07098", "filename": "src/test/ui/hrtb/issue-46989.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:42:5\n-   |\n-LL |     assert_foo::<fn(&i32)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r i32)`\n-   = note: ...but `Foo` is actually implemented for the type `fn(&'0 i32)`, for some specific lifetime `'0`\n-\n-error: aborting due to previous error\n-"}, {"sha": "4a09f4be156e2bb60a879883cf640004796c28d1", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Regression test for #46989:\n //\n // In the move to universes, this test started passing."}, {"sha": "309e1a676edafa4669f72f15f32c129f69cf4e50", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:42:5\n+  --> $DIR/issue-46989.rs:38:5\n    |\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/issue-46989.nll.stderr"}, {"sha": "a01560e70e311cae445050e5bb32a60adc28188e", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.base.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,17 +0,0 @@\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/dyn-trait.rs:24:16\n-   |\n-LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   |                                 ------------------- this data with lifetime `'a`...\n-LL |     static_val(x);\n-   |                ^ ...is used here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/dyn-trait.rs:24:5\n-   |\n-LL |     static_val(x);\n-   |     ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "c508c0ac9d55aab5eed5176c2bd4246f19108b4c", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n // Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n // 'b> MyTrait<'a> for &'b i32`.\n \n@@ -22,8 +18,7 @@ fn static_val<T: StaticTrait>(_: T) {\n \n fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n     static_val(x);\n-    //[base]~^ ERROR E0759\n-    //[nll]~^^ ERROR borrowed data escapes outside of function\n+    //~^ ERROR borrowed data escapes outside of function\n }\n \n fn not_static_val<T: NotStaticTrait>(_: T) {"}, {"sha": "88c260b18cbb001aacac64cc9d47f6b35d7b141d", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/dyn-trait.rs:24:5\n+  --> $DIR/dyn-trait.rs:20:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                          --  - `x` is a reference that is only valid in the function body", "previous_filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr"}, {"sha": "0bddce49b40320fa6afa246b34eda150fe4e656a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-elided.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n-// build-pass (FIXME(62277): could be check-pass?)\n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n+// build-pass (FIXME(62277): could be check-pass?\n \n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}"}, {"sha": "e363fdb36e3ae32ee7eb655b5a2d46ab613b7af6", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n // check-pass\n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n #![feature(type_alias_impl_trait)]\n trait Trait<'a, 'b> {}"}, {"sha": "0f21dd5ffe508b532fcdb47531794814a9119a6f", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}"}, {"sha": "13ad1f7215f340198c5f59729798da794ab00c80", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-other.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n // build-pass (FIXME(62277): could be check-pass?)\n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}"}, {"sha": "45cc935b7ccd1e81cb6bc28b873a7beb47035832", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.base.stderr", "status": "removed", "additions": 0, "deletions": 227, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,227 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:7:35\n-   |\n-LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----                 ^\n-   |              |\n-   |              hidden type `&i32` captures the anonymous lifetime defined here\n-   |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                                 ++++\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:10:44\n-   |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             --                             ^\n-   |             |\n-   |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n-   |\n-help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n-   |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                          ++++\n-\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:46\n-   |\n-LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n-   |               ----                           ^ ...is used here...\n-   |               |\n-   |               this data with an anonymous lifetime `'_`...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n-   |\n-LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n-   |\n-LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n-   |                                    ~~\n-help: alternatively, add an explicit `'static` bound to this reference\n-   |\n-LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n-   |               ~~~~~~~~~~~~\n-\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:17:55\n-   |\n-LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-   |                     -------                           ^ ...is used here...\n-   |                     |\n-   |                     this data with lifetime `'a`...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:17:33\n-   |\n-LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-   |                                 ^^^^^^^^^^^^^^^^^^^\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n-   |\n-LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                             ~~\n-help: alternatively, add an explicit `'static` bound to this reference\n-   |\n-LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n-   |                     ~~~~~~~~~~~~\n-\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:21:24\n-   |\n-LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n-   |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n-   |               |\n-   |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n-\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:36:65\n-   |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               ---- this data with an anonymous lifetime `'_`... ^ ...is used and required to live as long as `'static` here\n-   |\n-help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug + '_>, impl Debug) { (Box::new(x), x) }\n-   |                                       ++++\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n-   |                                                    ++++\n-\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:43:69\n-   |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      ------- this data with lifetime `'a`...        ^ ...is used here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:43:34\n-   |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n-   |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n-   |                                                           ~~\n-help: alternatively, add an explicit `'static` bound to this reference\n-   |\n-LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      ~~~~~~~~~~~~\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:50:5\n-   |\n-LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:50:5: 50:31]` captures the lifetime `'b` as defined here\n-LL |     move |_| println!(\"{}\", y)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n-   |                                                                              ++++\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:54:51\n-   |\n-LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |                                                   ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | fn ty_param_wont_outlive_static<T:Debug + 'static>(x: T) -> impl Debug + 'static {\n-   |                                         +++++++++\n-\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:50\n-   |\n-LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                               ^ ...is used and required to live as long as `'static` here\n-   |               |\n-   |               this data with an anonymous lifetime `'_`...\n-   |\n-note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:28\n-   |\n-LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                            ^^^^^^^^^    ----------- because of this returned expression\n-   |                            |\n-   |                            `'static` requirement introduced here\n-help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n-   |                                      ++++\n-\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:27:59\n-   |\n-LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                               ^ ...is used and required to live as long as `'static` here\n-   |                     |\n-   |                     this data with lifetime `'a`...\n-   |\n-note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:27:37\n-   |\n-LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                                     ^^^^^^^^^    ----------- because of this returned expression\n-   |                                     |\n-   |                                     `'static` requirement introduced here\n-help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n-   |\n-LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n-   |                                               ++++\n-\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:60\n-   |\n-LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                         ^ ...is used and required to live as long as `'static` here\n-   |               |\n-   |               this data with an anonymous lifetime `'_`...\n-   |\n-note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:30:40\n-   |\n-LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                                        ^^^^^^^    ----------- because of this returned expression\n-   |                                        |\n-   |                                        `'static` requirement introduced here\n-help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n-   |\n-LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n-   |                                        ~~\n-help: alternatively, add an explicit `'static` bound to this reference\n-   |\n-LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ~~~~~~~~~~~~\n-\n-error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n-   |\n-LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ------- this data with lifetime `'a`...         ^ ...is used and required to live as long as `'static` here\n-   |\n-note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:33:49\n-   |\n-LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                                                 ^^^^^^^    ----------- because of this returned expression\n-   |                                                 |\n-   |                                                 `'static` requirement introduced here\n-help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n-   |\n-LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n-   |                                                 ~~\n-help: alternatively, add an explicit `'static` bound to this reference\n-   |\n-LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ~~~~~~~~~~~~\n-\n-error: aborting due to 13 previous errors\n-\n-Some errors have detailed explanations: E0310, E0621, E0700, E0759.\n-For more information about an error, try `rustc --explain E0310`."}, {"sha": "18404f9860317b7c3a9926d3775fa1faf99082b6", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n@@ -11,38 +7,30 @@ fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR: captures lifetime that does not appear in bounds\n \n fn elided2(x: &i32) -> impl Copy + 'static { x }\n-//[base]~^ ERROR E0759\n-//[nll]~^^ ERROR lifetime may not live long enough\n+//~^ ERROR lifetime may not live long enough\n \n fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-//[base]~^ ERROR E0759\n-//[nll]~^^ ERROR lifetime may not live long enough\n+//~^ ERROR lifetime may not live long enough\n \n fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n //~^ ERROR explicit lifetime required in the type of `x`\n \n fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-//[base]~^ ERROR E0759\n \n fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-//[base]~^ ERROR E0759\n \n fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-//[base]~^ ERROR E0759\n \n fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-//[base]~^ ERROR E0759\n \n fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-//[base]~^ ERROR E0759\n-//[nll]~^^ ERROR lifetime may not live long enough\n+//~^ ERROR lifetime may not live long enough\n \n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n \n fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-//[base]~^ ERROR E0759\n-//[nll]~^^ ERROR lifetime may not live long enough\n+//~^ ERROR lifetime may not live long enough\n \n // Tests that a closure type containing 'b cannot be returned from a type where\n // only 'a was expected.\n@@ -52,9 +40,8 @@ fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n }\n \n fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-    //[base]~^ ERROR the parameter type `T` may not live long enough\n     x\n-    //[nll]~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "f8ff2177bf5ac92729017ed366f47a17e2412720", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:7:35\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----                 ^\n@@ -12,7 +12,7 @@ LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:10:44\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                             ^\n@@ -25,7 +25,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               -                              ^ returning this value requires that `'1` must outlive `'static`\n@@ -42,7 +42,7 @@ LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ~~~~~~~~~~~~\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:17:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n@@ -57,15 +57,15 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:21:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:15:41\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----                      ^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:36:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:26:55\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               -                                       ^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n@@ -82,7 +82,7 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:43:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:32:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n@@ -97,10 +97,10 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ~~~~~~~~~~~~\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:50:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:50:5: 50:31]` captures the lifetime `'b` as defined here\n+   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:31]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -110,7 +110,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:56:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:5\n    |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds", "previous_filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr"}, {"sha": "cfa1d93d57143f78d4f4e78afaae52db18ccc562", "filename": "src/test/ui/impl-trait/type_parameters_captured.base.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,14 +0,0 @@\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:11:20\n-   |\n-LL | fn foo<T>(x: T) -> impl Any + 'static {\n-   |                    ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | fn foo<T: 'static>(x: T) -> impl Any + 'static {\n-   |         +++++++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0310`."}, {"sha": "81ee7d3f8a561dc5436d1d4b32990348b3fc58fa", "filename": "src/test/ui/impl-trait/type_parameters_captured.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,17 +1,12 @@\n-// ignore-compare-mode-nll\n-// revisions: base nll\n-// [nll]compile-flags: -Zborrowck=mir\n-\n use std::fmt::Debug;\n \n trait Any {}\n impl<T> Any for T {}\n \n // Check that type parameters are captured and not considered 'static\n fn foo<T>(x: T) -> impl Any + 'static {\n-    //[base]~^ ERROR the parameter type `T` may not live long enough\n     x\n-    //[nll]~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "fb502cfdd2b35a89abdfd3d1426cde923ebccb4a", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:13:5\n+  --> $DIR/type_parameters_captured.rs:8:5\n    |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds", "previous_filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr"}, {"sha": "cad22b2f3ea6e231a8ad7467f902f863bda263c2", "filename": "src/test/ui/issues/issue-10291.base.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-10291.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-10291.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,25 +0,0 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-10291.rs:7:9\n-   |\n-LL |         x\n-   |         ^\n-   |\n-note: ...the reference is valid for the anonymous lifetime #1 defined here...\n-  --> $DIR/issue-10291.rs:6:69\n-   |\n-LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-   |  _____________________________________________________________________^\n-LL | |         x\n-LL | |\n-LL | |\n-LL | |     }));\n-   | |_____^\n-note: ...but the borrowed content is only valid for the lifetime `'x` as defined here\n-  --> $DIR/issue-10291.rs:5:9\n-   |\n-LL | fn test<'x>(x: &'x isize) {\n-   |         ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0312`."}, {"sha": "31b9e1240461eafe32719de2908edc99888fcf11", "filename": "src/test/ui/issues/issue-10291.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,12 +1,7 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn test<'x>(x: &'x isize) {\n     drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         x\n-        //[base]~^ ERROR E0312\n-        //[nll]~^^ ERROR lifetime may not live long enough\n+        //~^ ERROR lifetime may not live long enough\n     }));\n }\n "}, {"sha": "a7b827d27a87bb8d22249b67322db3f485074c6f", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-10291.rs:7:9\n+  --> $DIR/issue-10291.rs:3:9\n    |\n LL | fn test<'x>(x: &'x isize) {\n    |         -- lifetime `'x` defined here", "previous_filename": "src/test/ui/issues/issue-10291.nll.stderr"}, {"sha": "2b9fff3f981055bda674e36614a05379a29cd9ec", "filename": "src/test/ui/issues/issue-13058.base.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-13058.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-13058.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,12 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `cont`\n-  --> $DIR/issue-13058.rs:18:26\n-   |\n-LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n-   |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`\n-LL | {\n-LL |     let cont_iter = cont.iter();\n-   |                          ^^^^ lifetime `'r` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "a5806feb720d6d30e111cb666a5669d474452acf", "filename": "src/test/ui/issues/issue-13058.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n use std::ops::Range;\n \n trait Itble<'r, T, I: Iterator<Item=T>> { fn iter(&'r self) -> I; }"}, {"sha": "8368978deab1a03bf544778c89d3c2aee92cbdf8", "filename": "src/test/ui/issues/issue-13058.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-13058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-13058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `cont`\n-  --> $DIR/issue-13058.rs:18:21\n+  --> $DIR/issue-13058.rs:14:21\n    |\n LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n    |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`", "previous_filename": "src/test/ui/issues/issue-13058.nll.stderr"}, {"sha": "293692c1ddc6242a04a3bf0282476bf8eac4ef69", "filename": "src/test/ui/issues/issue-15034.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-15034.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-15034.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:21:25\n-   |\n-LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n-   |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n-LL |         Parser { lexer: lexer }\n-   |                         ^^^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "9ea6ed89ca249cb5a7a8f807be11338f43967525", "filename": "src/test/ui/issues/issue-15034.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-15034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-15034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n pub struct Lexer<'a> {\n     input: &'a str,\n }"}, {"sha": "f142e260a2313ade72cc4bc8b679deabaada9554", "filename": "src/test/ui/issues/issue-15034.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-15034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-15034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:21:9\n+  --> $DIR/issue-15034.rs:17:9\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n    |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`", "previous_filename": "src/test/ui/issues/issue-15034.nll.stderr"}, {"sha": "f684dd04a36cab8bacd8dd6dcd34b4cc61bde374", "filename": "src/test/ui/issues/issue-16683.base.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-16683.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-16683.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,32 +0,0 @@\n-error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/issue-16683.rs:8:14\n-   |\n-LL |         self.a();\n-   |              ^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-16683.rs:7:10\n-   |\n-LL |     fn b(&self) {\n-   |          ^^^^^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-16683.rs:8:9\n-   |\n-LL |         self.a();\n-   |         ^^^^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/issue-16683.rs:5:9\n-   |\n-LL | trait T<'a> {\n-   |         ^^\n-note: ...so that the types are compatible\n-  --> $DIR/issue-16683.rs:8:14\n-   |\n-LL |         self.a();\n-   |              ^\n-   = note: expected `&'a Self`\n-              found `&Self`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "72fa21bddd1861d63fd8a248dec41b2971b9ffbb", "filename": "src/test/ui/issues/issue-16683.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,8 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n trait T<'a> {\n     fn a(&'a self) -> &'a bool;\n     fn b(&self) {\n         self.a();\n-        //[base]~^ ERROR cannot infer\n-        //[nll]~^^ ERROR lifetime may not live long enough\n+        //~^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "fff681b2e0b7621a4cb9d1a5d63350974c17df83", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-16683.rs:8:9\n+  --> $DIR/issue-16683.rs:4:9\n    |\n LL | trait T<'a> {\n    |         -- lifetime `'a` defined here", "previous_filename": "src/test/ui/issues/issue-16683.nll.stderr"}, {"sha": "e139de2019d62240465f2ab303a9cc88a399b3aa", "filename": "src/test/ui/issues/issue-16922.base.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-16922.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-16922.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,16 +0,0 @@\n-error[E0759]: `value` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-16922.rs:8:14\n-   |\n-LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-   |                       -- this data with an anonymous lifetime `'_`...\n-LL |     Box::new(value) as Box<dyn Any>\n-   |              ^^^^^ ...is used and required to live as long as `'static` here\n-   |\n-help: to declare that the trait object captures data from argument `value`, you can add an explicit `'_` lifetime bound\n-   |\n-LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n-   |                                          ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "bbbbf72dbd5d368ef56464102c635a6db4936d91", "filename": "src/test/ui/issues/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,8 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n use std::any::Any;\n \n fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n     Box::new(value) as Box<dyn Any>\n-    //[base]~^ ERROR E0759\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "9d9f32a97c065a0f29a86308087bfae20c36e374", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-16922.rs:8:5\n+  --> $DIR/issue-16922.rs:4:5\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       - let's call the lifetime of this reference `'1`", "previous_filename": "src/test/ui/issues/issue-16922.nll.stderr"}, {"sha": "b52dc444593abad369369ad7fd9f883f8923c0f9", "filename": "src/test/ui/issues/issue-17728.base.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-17728.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-17728.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,39 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/issue-17728.rs:19:28\n-   |\n-LL |     fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&Room, &str> {\n-   |                                     -----                         -------------------\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n-...\n-LL |             Some(entry) => Ok(entry),\n-   |                            ^^^^^^^^^ ...but data from `room` is returned here\n-   |\n-   = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n-   |\n-LL |     fn attemptTraverse<'a>(&'a self, room: &'a Room, directionStr: &str) -> Result<&Room, &str> {\n-   |                       ++++  ++              ++\n-\n-error[E0308]: `match` arms have incompatible types\n-  --> $DIR/issue-17728.rs:113:14\n-   |\n-LL | /     match to_parse {\n-LL | |         \"w\" | \"west\" => RoomDirection::West,\n-LL | |         \"e\" | \"east\" => RoomDirection::East,\n-LL | |         \"n\" | \"north\" => RoomDirection::North,\n-...  |\n-LL | |         \"down\" => RoomDirection::Down,\n-   | |                   ------------------- this and all prior arms are found to be of type `RoomDirection`\n-LL | |         _ => None\n-   | |              ^^^^ expected enum `RoomDirection`, found enum `Option`\n-LL | |     }\n-   | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected enum `RoomDirection`\n-              found enum `Option<_>`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0308, E0623.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "6aca159c47e3462c48b876e26313e6b04e087490", "filename": "src/test/ui/issues/issue-17728.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n use std::fmt::{Debug, Formatter, Error};\n use std::collections::HashMap;\n \n@@ -17,7 +13,6 @@ trait TraversesWorld {\n         let maybe_room = room.direction_to_room.get(&direction);\n         match maybe_room {\n             Some(entry) => Ok(entry),\n-            //[base]~^ ERROR lifetime mismatch [E0623]\n             _ => Err(\"Direction does not exist in room.\")\n         }\n     }"}, {"sha": "3b25902d757e0d8c32bfbb0808feaaeb5b81acef", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/issue-17728.rs:113:14\n+  --> $DIR/issue-17728.rs:108:14\n    |\n LL | /     match to_parse {\n LL | |         \"w\" | \"west\" => RoomDirection::West,", "previous_filename": "src/test/ui/issues/issue-17728.nll.stderr"}, {"sha": "202238a49cbf57d45ac11b272e4e6387377ac7c7", "filename": "src/test/ui/issues/issue-17758.base.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-17758.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-17758.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,32 +0,0 @@\n-error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/issue-17758.rs:11:14\n-   |\n-LL |         self.foo();\n-   |              ^^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-17758.rs:10:12\n-   |\n-LL |     fn bar(&self) {\n-   |            ^^^^^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-17758.rs:11:9\n-   |\n-LL |         self.foo();\n-   |         ^^^^\n-note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/issue-17758.rs:8:11\n-   |\n-LL | trait Foo<'a> {\n-   |           ^^\n-note: ...so that the types are compatible\n-  --> $DIR/issue-17758.rs:11:14\n-   |\n-LL |         self.foo();\n-   |              ^^^\n-   = note: expected `&'a Self`\n-              found `&Self`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "e2ee84694e390c24d20efee9d79f49fab624be53", "filename": "src/test/ui/issues/issue-17758.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17758.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17758.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,16 +1,11 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Test that regionck suggestions in a provided method of a trait\n // don't ICE\n \n trait Foo<'a> {\n     fn foo(&'a self);\n     fn bar(&self) {\n         self.foo();\n-        //[base]~^ ERROR cannot infer\n-        //[nll]~^^ ERROR lifetime may not live long enough\n+        //~^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "613ef6b907c547e3154c68667bb79644f2991d58", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-17758.rs:11:9\n+  --> $DIR/issue-17758.rs:7:9\n    |\n LL | trait Foo<'a> {\n    |           -- lifetime `'a` defined here", "previous_filename": "src/test/ui/issues/issue-17758.nll.stderr"}, {"sha": "8b1ef806abb4a0639ff760943b432d260d679dca", "filename": "src/test/ui/issues/issue-26217.base.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-26217.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-26217.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,9 +0,0 @@\n-error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n-  --> $DIR/issue-26217.rs:8:5\n-   |\n-LL |     foo::<&'a i32>();\n-   |     ^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0477`."}, {"sha": "422625e73c161c88592962706bcbabe6227c9212", "filename": "src/test/ui/issues/issue-26217.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,8 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn foo<T>() where for<'a> T: 'a {}\n \n fn bar<'a>() {\n     foo::<&'a i32>();\n-    //[base]~^ ERROR the type `&'a i32` does not fulfill the required lifetime\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "c7601caacdca3fb4e56bc147a45e82e0a05fb767", "filename": "src/test/ui/issues/issue-26217.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-26217.rs:8:5\n+  --> $DIR/issue-26217.rs:4:5\n    |\n LL | fn bar<'a>() {\n    |        -- lifetime `'a` defined here", "previous_filename": "src/test/ui/issues/issue-26217.nll.stderr"}, {"sha": "a8518dde22e66b15d54e3de857740c305ed2e574", "filename": "src/test/ui/issues/issue-40000.base.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-40000.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-40000.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-40000.rs:10:9\n-   |\n-LL |     foo(bar);\n-   |         ^^^ one type is more general than the other\n-   |\n-   = note: expected trait object `dyn for<'r> Fn(&'r i32)`\n-              found trait object `dyn Fn(&i32)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "a6e05e7ba02a3c36620176edecab86e7bbaa1fcd", "filename": "src/test/ui/issues/issue-40000.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,13 +1,9 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn main() {\n     let bar: fn(&mut u32) = |_| {};\n \n     fn foo(x: Box<dyn Fn(&i32)>) {}\n     let bar = Box::new(|x: &i32| {}) as Box<dyn Fn(_)>;\n     foo(bar);\n-    //~^ ERROR E0308\n-    //[nll]~^^ ERROR mismatched types\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n }"}, {"sha": "e6f0b5fbfba1dc098b8501a9f22a5a1e19c07707", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-40000.rs:10:9\n+  --> $DIR/issue-40000.rs:6:9\n    |\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other\n@@ -8,7 +8,7 @@ LL |     foo(bar);\n               found trait object `dyn Fn(&i32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-40000.rs:10:9\n+  --> $DIR/issue-40000.rs:6:9\n    |\n LL |     foo(bar);\n    |         ^^^ one type is more general than the other", "previous_filename": "src/test/ui/issues/issue-40000.nll.stderr"}, {"sha": "97ed4d65093853b0efd552bfd407f49017861a48", "filename": "src/test/ui/issues/issue-46983.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-46983.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-46983.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/issue-46983.rs:6:5\n-   |\n-LL | fn foo(x: &u32) -> &'static u32 {\n-   |           ---- this data with an anonymous lifetime `'_`...\n-LL |     &*x\n-   |     ^^^ ...is used and required to live as long as `'static` here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0759`."}, {"sha": "4bd49a8796b348a5c60266fdd2410f7b43784837", "filename": "src/test/ui/issues/issue-46983.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,11 +1,6 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n-    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "38a219bbd7b5257e4a1b775053a03f57ce13ac5b", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-46983.rs:6:5\n+  --> $DIR/issue-46983.rs:2:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           - let's call the lifetime of this reference `'1`", "previous_filename": "src/test/ui/issues/issue-46983.nll.stderr"}, {"sha": "6556a52de14f2c303a2fbe02feb269042e4ae6e3", "filename": "src/test/ui/issues/issue-52533.base.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-52533.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-52533.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,20 +0,0 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-52533.rs:9:16\n-   |\n-LL |     foo(|a, b| b)\n-   |                ^\n-   |\n-note: ...the reference is valid for the anonymous lifetime #1 defined here...\n-  --> $DIR/issue-52533.rs:9:9\n-   |\n-LL |     foo(|a, b| b)\n-   |         ^^^^^^^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined here\n-  --> $DIR/issue-52533.rs:9:9\n-   |\n-LL |     foo(|a, b| b)\n-   |         ^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0312`."}, {"sha": "bb9a1911fdda42858d8a4df4c88673e23eb4d488", "filename": "src/test/ui/issues/issue-52533.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-52533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-52533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,12 +1,7 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn foo(_: impl for<'a> FnOnce(&'a u32, &u32) -> &'a u32) {\n }\n \n fn main() {\n     foo(|a, b| b)\n-    //[base]~^ ERROR lifetime of reference outlives lifetime of borrowed content...\n-    //[nll]~^^ ERROR lifetime may not live long enough\n+    //~^ ERROR lifetime may not live long enough\n }"}, {"sha": "c764736d79878858ef4224b407f6f3603da39571", "filename": "src/test/ui/issues/issue-52533.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52533.rs:9:16\n+  --> $DIR/issue-52533.rs:5:16\n    |\n LL |     foo(|a, b| b)\n    |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`", "previous_filename": "src/test/ui/issues/issue-52533.nll.stderr"}, {"sha": "db91edf51e33751c696cad40b9583a0ab82f4208", "filename": "src/test/ui/issues/issue-54302-cases.base.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,38 +0,0 @@\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:67:5\n-   |\n-LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo<'static, u32>` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n-   = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:73:5\n-   |\n-LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo<'static, i32>` would have to be implemented for the type `&'0 i32`, for any lifetime `'0`...\n-   = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:79:5\n-   |\n-LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo<'static, u64>` would have to be implemented for the type `&'0 u64`, for any lifetime `'0`...\n-   = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n-\n-error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:85:5\n-   |\n-LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n-   |\n-   = note: `Foo<'static, i64>` would have to be implemented for the type `&'0 i64`, for any lifetime `'0`...\n-   = note: ...but `Foo<'_, i64>` is actually implemented for the type `&'1 i64`, for some specific lifetime `'1`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "faa116269ee96f5d017951dbe290c33ae492f75f", "filename": "src/test/ui/issues/issue-54302-cases.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n trait Mirror {\n     type Image;\n     fn coerce(self) -> Self::Image;"}, {"sha": "6e8b69c4beebb2bfbfefb11ab6b43ba18d580a83", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:67:5\n+  --> $DIR/issue-54302-cases.rs:63:5\n    |\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    = note: ...but `Foo<'_, u32>` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:73:5\n+  --> $DIR/issue-54302-cases.rs:69:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -17,7 +17,7 @@ LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    = note: ...but `Foo<'_, i32>` is actually implemented for the type `&'1 i32`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:79:5\n+  --> $DIR/issue-54302-cases.rs:75:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -26,7 +26,7 @@ LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    = note: ...but `Foo<'_, u64>` is actually implemented for the type `&'1 u64`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-54302-cases.rs:85:5\n+  --> $DIR/issue-54302-cases.rs:81:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/issues/issue-54302-cases.nll.stderr"}, {"sha": "ebd679996d05299ff85565ff6cd4052c97e7ec17", "filename": "src/test/ui/issues/issue-54943.base.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-54943.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-54943.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,15 +0,0 @@\n-error[E0477]: the type `&'a u32` does not fulfill the required lifetime\n-  --> $DIR/issue-54943.rs:10:13\n-   |\n-LL |     let x = foo::<&'a u32>();\n-   |             ^^^^^^^^^^^^^^\n-   |\n-note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/issue-54943.rs:5:11\n-   |\n-LL | fn foo<T: 'static>() { }\n-   |           ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0477`."}, {"sha": "85722300bf0064160093dcb2d0676d551eedaf23", "filename": "src/test/ui/issues/issue-54943.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n fn foo<T: 'static>() { }\n \n fn boo<'a>() {"}, {"sha": "59be0f983b9078fb7ed47495f96034d5256a7f93", "filename": "src/test/ui/issues/issue-54943.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-54943.rs:10:13\n+  --> $DIR/issue-54943.rs:6:13\n    |\n LL | fn boo<'a>() {\n    |        -- lifetime `'a` defined here", "previous_filename": "src/test/ui/issues/issue-54943.nll.stderr"}, {"sha": "26b1c9ec4689a3f5aeaa1a13b9d9838e5c7c5a49", "filename": "src/test/ui/issues/issue-55731.base.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-55731.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-55731.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `DistributedIteratorMulti` is not general enough\n-  --> $DIR/issue-55731.rs:52:5\n-   |\n-LL |     multi(Map {\n-   |     ^^^^^ implementation of `DistributedIteratorMulti` is not general enough\n-   |\n-   = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`...\n-   = note: ...but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`\n-\n-error: aborting due to previous error\n-"}, {"sha": "7b4f4e2cd3b4026dfde396813c214b04b0035d16", "filename": "src/test/ui/issues/issue-55731.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n use std::marker::PhantomData;\n \n trait DistributedIterator {"}, {"sha": "97fd6678c997e6d959bd61680b7ab1bc2b947ae4", "filename": "src/test/ui/issues/issue-55731.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `DistributedIteratorMulti` is not general enough\n-  --> $DIR/issue-55731.rs:52:5\n+  --> $DIR/issue-55731.rs:48:5\n    |\n LL | /     multi(Map {\n LL | |         i: Cloned(PhantomData),", "previous_filename": "src/test/ui/issues/issue-55731.nll.stderr"}, {"sha": "a4c5d68472dedc38181b01d6b860eac898850707", "filename": "src/test/ui/issues/issue-55796.base.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-55796.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-55796.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,53 +0,0 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:20:9\n-   |\n-LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:9:17\n-   |\n-LL | pub trait Graph<'a> {\n-   |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:20:40: 20:54]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:20:9\n-   |\n-LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:20:9\n-   |\n-LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n-              found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n-\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:26:9\n-   |\n-LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-55796.rs:9:17\n-   |\n-LL | pub trait Graph<'a> {\n-   |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:26:39: 26:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:26:9\n-   |\n-LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the types are compatible\n-  --> $DIR/issue-55796.rs:26:9\n-   |\n-LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n-              found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "a7b27a99929a739aaec706ce1436d7b67d595820", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n pub trait EdgeTrait<N> {\n     fn target(&self) -> N;\n }\n@@ -18,14 +14,12 @@ pub trait Graph<'a> {\n \n     fn out_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.out_edges(u).map(|e| e.target()))\n-        //[base]~^ ERROR cannot infer\n-        //[nll]~^^ ERROR lifetime may not live long enough\n+        //~^ ERROR lifetime may not live long enough\n     }\n \n     fn in_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.in_edges(u).map(|e| e.target()))\n-        //[base]~^ ERROR cannot infer\n-        //[nll]~^^ ERROR lifetime may not live long enough\n+        //~^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "5809a56cd4b6b638d5f6811fd8b72d28aebae0ab", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:20:9\n+  --> $DIR/issue-55796.rs:16:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:26:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here", "previous_filename": "src/test/ui/issues/issue-55796.nll.stderr"}, {"sha": "d2c6738cb590f0ced16e8234a9837cea66fe17af", "filename": "src/test/ui/issues/issue-75777.base.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-75777.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0/src%2Ftest%2Fui%2Fissues%2Fissue-75777.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.base.stderr?ref=9f7e997c8bc3cacd2ab4eb75e63cb5fa9279c7b0", "patch": "@@ -1,30 +0,0 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-75777.rs:15:14\n-   |\n-LL |     Box::new(move |_| fut)\n-   |              ^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-75777.rs:13:11\n-   |\n-LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n-   |           ^^\n-note: ...so that the types are compatible\n-  --> $DIR/issue-75777.rs:15:14\n-   |\n-LL |     Box::new(move |_| fut)\n-   |              ^^^^^^^^^^^^\n-   = note: expected `(Pin<Box<dyn Future<Output = A> + Send>>,)`\n-              found `(Pin<Box<(dyn Future<Output = A> + Send + 'a)>>,)`\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the types are compatible\n-  --> $DIR/issue-75777.rs:15:5\n-   |\n-LL |     Box::new(move |_| fut)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Box<(dyn FnOnce(&'a Env) -> Pin<Box<(dyn Future<Output = A> + Send + 'a)>> + 'static)>`\n-              found `Box<dyn FnOnce(&'a Env) -> Pin<Box<(dyn Future<Output = A> + Send + 'a)>>>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "a1e438bc617803de855295ed1ef5e1d6e2b7b372", "filename": "src/test/ui/issues/issue-75777.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.rs?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,7 +1,3 @@\n-// revisions: base nll\n-// ignore-compare-mode-nll\n-//[nll] compile-flags: -Z borrowck=mir\n-\n // Regression test for #75777.\n // Checks that a boxed future can be properly constructed.\n \n@@ -13,8 +9,7 @@ type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + 'a + Send>>;\n fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n     let fut: BoxFuture<'a, A> = Box::pin(future::ready(v));\n     Box::new(move |_| fut)\n-    //[base]~^ ERROR: cannot infer an appropriate lifetime\n-    //[nll]~^^ ERROR: lifetime may not live long enough\n+    //~^ ERROR: lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "370cd72fd558d485f049cbd2cde2e36ae9a37b94", "filename": "src/test/ui/issues/issue-75777.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb55bd449e65e611da928560d948982d73e50027/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr?ref=bb55bd449e65e611da928560d948982d73e50027", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-75777.rs:15:5\n+  --> $DIR/issue-75777.rs:11:5\n    |\n LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> BoxFuture<'a, A>> {\n    |           -- lifetime `'a` defined here", "previous_filename": "src/test/ui/issues/issue-75777.nll.stderr"}]}