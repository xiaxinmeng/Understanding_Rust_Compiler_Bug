{"sha": "91f0b28ecc780f291ed716c9126719b0f3110f92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZjBiMjhlY2M3ODBmMjkxZWQ3MTZjOTEyNjcxOWIwZjMxMTBmOTI=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-11-30T16:05:37Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-12-02T11:47:15Z"}, "message": "Skip testing targets that don't ship libstd", "tree": {"sha": "3c095108122a5eb5dbeb246d4ba8ec0db24a3b26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c095108122a5eb5dbeb246d4ba8ec0db24a3b26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91f0b28ecc780f291ed716c9126719b0f3110f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91f0b28ecc780f291ed716c9126719b0f3110f92", "html_url": "https://github.com/rust-lang/rust/commit/91f0b28ecc780f291ed716c9126719b0f3110f92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91f0b28ecc780f291ed716c9126719b0f3110f92/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2", "html_url": "https://github.com/rust-lang/rust/commit/8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "859890aba9f2e679e546a6f5dac210a374b4d80d", "filename": "tests/compiletest.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/91f0b28ecc780f291ed716c9126719b0f3110f92/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f0b28ecc780f291ed716c9126719b0f3110f92/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=91f0b28ecc780f291ed716c9126719b0f3110f92", "patch": "@@ -124,16 +124,33 @@ fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n     path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n }\n \n-fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n+fn target_has_std<P: Into<PathBuf>>(path: P) -> bool {\n+    let mut path = path.into();\n+    path.push(\"lib\");\n+    std::fs::read_dir(path)\n+        .expect(\"invalid target\")\n+        .map(|entry| entry.unwrap())\n+        .filter(|entry| entry.file_type().unwrap().is_file())\n+        .filter_map(|entry| entry.file_name().into_string().ok())\n+        .any(|file_name| file_name.starts_with(\"libstd\") && file_name.ends_with(\".rlib\"))\n+}\n+\n+\n+fn for_all_targets<F: FnMut(String)>(sysroot: &Path, f: F) {\n     let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n-    for entry in std::fs::read_dir(target_dir).expect(\"invalid sysroot\") {\n-        let entry = entry.unwrap();\n-        if !is_target_dir(entry.path()) {\n-            continue;\n-        }\n-        let target = entry.file_name().into_string().unwrap();\n-        f(target);\n+    let mut targets = std::fs::read_dir(target_dir)\n+        .expect(\"invalid sysroot\")\n+        .map(|entry| entry.unwrap())\n+        .filter(|entry| is_target_dir(entry.path()))\n+        .filter(|entry| target_has_std(entry.path()))\n+        .map(|entry| entry.file_name().into_string().unwrap())\n+        .peekable();\n+\n+    if targets.peek().is_none() {\n+        panic!(\"No valid targets found\");\n     }\n+\n+    targets.for_each(f);\n }\n \n fn get_sysroot() -> PathBuf {"}]}