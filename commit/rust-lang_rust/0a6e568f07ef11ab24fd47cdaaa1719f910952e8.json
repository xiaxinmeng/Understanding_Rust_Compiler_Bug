{"sha": "0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNmU1NjhmMDdlZjExYWIyNGZkNDdjZGFhYTE3MTlmOTEwOTUyZTg=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-10T14:46:01Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-10T14:46:01Z"}, "message": "test formatting: don't format tests/ui/formatting.rs", "tree": {"sha": "81f18e1159541b10dab7bc5d3c4b6edcf9e6f2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f18e1159541b10dab7bc5d3c4b6edcf9e6f2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "html_url": "https://github.com/rust-lang/rust/commit/0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bcc2cd9c8d2933d4a72e090db72f65a4cfb749e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bcc2cd9c8d2933d4a72e090db72f65a4cfb749e", "html_url": "https://github.com/rust-lang/rust/commit/7bcc2cd9c8d2933d4a72e090db72f65a4cfb749e"}], "stats": {"total": 184, "additions": 135, "deletions": 49}, "files": [{"sha": "a60e36f298164ebe5e449a5b0d9f53adcaad15aa", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "patch": "@@ -35,7 +35,7 @@ set +ex\n \n # some lints are sensitive to formatting, exclude some files\n needs_formatting=false\n-for file in `find tests -not -path \"tests/ui/methods.rs\" -not -path \"tests/ui/format.rs\" -not -path \"tests/ui/empty_line_after_outer_attribute.rs\" -not -path \"tests/ui/double_parens.rs\" -not -path \"tests/ui/doc.rs\" -not -path \"tests/ui/unused_unit.rs\" | grep \"\\.rs$\"` ; do\n+for file in `find tests -not -path \"tests/ui/methods.rs\" -not -path \"tests/ui/format.rs\" -not -path \"tests/ui/formatting.rs\" -not -path \"tests/ui/empty_line_after_outer_attribute.rs\" -not -path \"tests/ui/double_parens.rs\" -not -path \"tests/ui/doc.rs\" -not -path \"tests/ui/unused_unit.rs\" | grep \"\\.rs$\"` ; do\n rustfmt ${file} --check  || echo \"${file} needs reformatting!\" ; needs_formatting=true\n done\n "}, {"sha": "88f6e497d12e741a3d6609702cbdf3c401f5a8fc", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "patch": "@@ -7,74 +7,82 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+\n+\n+\n #![warn(clippy::all)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(clippy::if_same_then_else)]\n #![allow(clippy::deref_addrof)]\n \n-fn foo() -> bool {\n-    true\n-}\n+fn foo() -> bool { true }\n \n fn main() {\n     // weird `else if` formatting:\n-    if foo() {}\n-    if foo() {}\n+    if foo() {\n+    } if foo() {\n+    }\n \n-    let _ = {\n-        // if as the last expression\n+    let _ = { // if as the last expression\n         let _ = 0;\n \n-        if foo() {}\n         if foo() {\n-        } else {\n+        } if foo() {\n+        }\n+        else {\n         }\n     };\n \n-    let _ = {\n-        // if in the middle of a block\n-        if foo() {}\n+    let _ = { // if in the middle of a block\n         if foo() {\n-        } else {\n+        } if foo() {\n+        }\n+        else {\n         }\n \n         let _ = 0;\n     };\n \n     if foo() {\n-    } else if foo() {\n-        // the span of the above error should continue here\n+    } else\n+    if foo() { // the span of the above error should continue here\n     }\n \n     if foo() {\n-    } else if foo() {\n-        // the span of the above error should continue here\n+    }\n+    else\n+    if foo() { // the span of the above error should continue here\n     }\n \n     // those are ok:\n-    if foo() {}\n-    if foo() {}\n+    if foo() {\n+    }\n+    if foo() {\n+    }\n \n     if foo() {\n     } else if foo() {\n     }\n \n     if foo() {\n-    } else if foo() {\n+    }\n+    else if foo() {\n     }\n \n     if foo() {\n-    } else if foo() {\n     }\n+    else if\n+    foo() {}\n \n     // weird op_eq formatting:\n     let mut a = 42;\n-    a = -35;\n-    a = *&191;\n+    a =- 35;\n+    a =* &191;\n \n     let mut b = true;\n-    b = !false;\n+    b =! false;\n \n     // those are ok:\n     a = -35;\n@@ -83,30 +91,37 @@ fn main() {\n \n     // possible missing comma in an array\n     let _ = &[\n-        -1,\n-        -2,\n-        -3 // <= no comma here\n-        -4,\n-        -5,\n-        -6,\n+        -1, -2, -3 // <= no comma here\n+        -4, -5, -6\n     ];\n     let _ = &[\n-        -1,\n-        -2,\n-        -3 // <= no comma here\n-        *4,\n-        -5,\n-        -6,\n+        -1, -2, -3 // <= no comma here\n+        *4, -5, -6\n     ];\n \n     // those are ok:\n-    let _ = &[-1, -2, -3, -4, -5, -6];\n-    let _ = &[-1, -2, -3, -4, -5, -6];\n-    let _ = &[1 + 2, 3 + 4, 5 + 6];\n+    let _ = &[\n+        -1, -2, -3,\n+        -4, -5, -6\n+    ];\n+    let _ = &[\n+        -1, -2, -3,\n+        -4, -5, -6,\n+    ];\n+    let _ = &[\n+        1 + 2, 3 +\n+        4, 5 + 6,\n+    ];\n \n     // don't lint for bin op without unary equiv\n     // issue 3244\n-    vec![1 / 2];\n+    vec![\n+        1\n+        / 2,\n+    ];\n     // issue 3396\n-    vec![true | false];\n+    vec![\n+        true\n+        | false,\n+    ];\n }"}, {"sha": "e1620b22125755a6eff261996a96574a669638b6", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6e568f07ef11ab24fd47cdaaa1719f910952e8/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=0a6e568f07ef11ab24fd47cdaaa1719f910952e8", "patch": "@@ -1,19 +1,90 @@\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:25:6\n+   |\n+25 |     } if foo() {\n+   |      ^\n+   |\n+   = note: `-D clippy::suspicious-else-formatting` implied by `-D warnings`\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:32:10\n+   |\n+32 |         } if foo() {\n+   |          ^\n+   |\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:40:10\n+   |\n+40 |         } if foo() {\n+   |          ^\n+   |\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this is an `else if` but the formatting might hide it\n+  --> $DIR/formatting.rs:49:6\n+   |\n+49 |       } else\n+   |  ______^\n+50 | |     if foo() { // the span of the above error should continue here\n+   | |____^\n+   |\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n+\n+error: this is an `else if` but the formatting might hide it\n+  --> $DIR/formatting.rs:54:6\n+   |\n+54 |       }\n+   |  ______^\n+55 | |     else\n+56 | |     if foo() { // the span of the above error should continue here\n+   | |____^\n+   |\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n+\n+error: this looks like you are trying to use `.. -= ..`, but you really are doing `.. = (- ..)`\n+  --> $DIR/formatting.rs:81:6\n+   |\n+81 |     a =- 35;\n+   |      ^^^^\n+   |\n+   = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n+   = note: to remove this lint, use either `-=` or `= -`\n+\n+error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n+  --> $DIR/formatting.rs:82:6\n+   |\n+82 |     a =* &191;\n+   |      ^^^^\n+   |\n+   = note: to remove this lint, use either `*=` or `= *`\n+\n+error: this looks like you are trying to use `.. != ..`, but you really are doing `.. = (! ..)`\n+  --> $DIR/formatting.rs:85:6\n+   |\n+85 |     b =! false;\n+   |      ^^^^\n+   |\n+   = note: to remove this lint, use either `!=` or `= !`\n+\n error: possibly missing a comma here\n-  --> $DIR/formatting.rs:88:11\n+  --> $DIR/formatting.rs:94:19\n    |\n-88 |         -3 // <= no comma here\n-   |           ^\n+94 |         -1, -2, -3 // <= no comma here\n+   |                   ^\n    |\n    = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n error: possibly missing a comma here\n-  --> $DIR/formatting.rs:96:11\n+  --> $DIR/formatting.rs:98:19\n    |\n-96 |         -3 // <= no comma here\n-   |           ^\n+98 |         -1, -2, -3 // <= no comma here\n+   |                   ^\n    |\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 10 previous errors\n "}]}