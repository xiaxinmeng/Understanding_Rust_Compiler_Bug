{"sha": "4bae06d73c8c53e5b0aabc90203f808932d2b021", "node_id": "C_kwDOAAsO6NoAKDRiYWUwNmQ3M2M4YzUzZTViMGFhYmM5MDIwM2Y4MDg5MzJkMmIwMjE", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-01-28T14:42:19Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-02-05T13:05:08Z"}, "message": "Use source callsite in FormatArgsExpn::inputs_span", "tree": {"sha": "6f5a2ec00d3a5887e067ae6edf3b374786d58312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5a2ec00d3a5887e067ae6edf3b374786d58312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bae06d73c8c53e5b0aabc90203f808932d2b021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bae06d73c8c53e5b0aabc90203f808932d2b021", "html_url": "https://github.com/rust-lang/rust/commit/4bae06d73c8c53e5b0aabc90203f808932d2b021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bae06d73c8c53e5b0aabc90203f808932d2b021/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699ee5e31cbf6c8c97eafef635fc6df8d17e358f", "url": "https://api.github.com/repos/rust-lang/rust/commits/699ee5e31cbf6c8c97eafef635fc6df8d17e358f", "html_url": "https://github.com/rust-lang/rust/commit/699ee5e31cbf6c8c97eafef635fc6df8d17e358f"}], "stats": {"total": 130, "additions": 98, "deletions": 32}, "files": [{"sha": "76478c74e21367ff7339187f0e622fee665e2de6", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::{self as hir, Expr, ExprKind, HirId, Node, QPath};\n use rustc_lint::LateContext;\n use rustc_span::def_id::DefId;\n-use rustc_span::hygiene::{MacroKind, SyntaxContext};\n+use rustc_span::hygiene::{self, MacroKind, SyntaxContext};\n use rustc_span::{sym, ExpnData, ExpnId, ExpnKind, Span, Symbol};\n use std::ops::ControlFlow;\n \n@@ -306,6 +306,7 @@ fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) ->\n }\n \n /// A parsed `format_args!` expansion\n+#[derive(Debug)]\n pub struct FormatArgsExpn<'tcx> {\n     /// Span of the first argument, the format string\n     pub format_string_span: Span,\n@@ -465,11 +466,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n             .collect()\n     }\n \n-    /// Span of all inputs\n+    /// Source callsite span of all inputs\n     pub fn inputs_span(&self) -> Span {\n         match *self.value_args {\n             [] => self.format_string_span,\n-            [.., last] => self.format_string_span.to(last.span),\n+            [.., last] => self\n+                .format_string_span\n+                .to(hygiene::walk_chain(last.span, self.format_string_span.ctxt())),\n         }\n     }\n }"}, {"sha": "53e45d28bded91a7ab772f5aa2afd15c3f8a379e", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -5,6 +5,12 @@\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     struct Foo;\n \n@@ -31,6 +37,9 @@ fn main() {\n     let with_none_and_as_str: Option<i32> = None;\n     with_none_and_as_str.unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code));\n \n+    let with_none_and_format_with_macro: Option<i32> = None;\n+    with_none_and_format_with_macro.unwrap_or_else(|| panic!(\"Error {}: fake error\", one!()));\n+\n     let with_ok: Result<(), ()> = Ok(());\n     with_ok.expect(\"error\");\n "}, {"sha": "22e530b80349d81e27ef8fdeb015acbe54a027a5", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -5,6 +5,12 @@\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     struct Foo;\n \n@@ -31,6 +37,9 @@ fn main() {\n     let with_none_and_as_str: Option<i32> = None;\n     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n \n+    let with_none_and_format_with_macro: Option<i32> = None;\n+    with_none_and_format_with_macro.expect(format!(\"Error {}: fake error\", one!()).as_str());\n+\n     let with_ok: Result<(), ()> = Ok(());\n     with_ok.expect(\"error\");\n "}, {"sha": "aca15935fca06596dca5f84edebe35b693baaa15", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -1,76 +1,82 @@\n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:29:26\n+  --> $DIR/expect_fun_call.rs:35:26\n    |\n LL |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n    |\n    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:32:26\n+  --> $DIR/expect_fun_call.rs:38:26\n    |\n LL |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:42:25\n+  --> $DIR/expect_fun_call.rs:41:37\n+   |\n+LL |     with_none_and_format_with_macro.expect(format!(\"Error {}: fake error\", one!()).as_str());\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", one!()))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:51:25\n    |\n LL |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:45:25\n+  --> $DIR/expect_fun_call.rs:54:25\n    |\n LL |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:57:17\n+  --> $DIR/expect_fun_call.rs:66:17\n    |\n LL |     Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{} {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:78:21\n+  --> $DIR/expect_fun_call.rs:87:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:79:21\n+  --> $DIR/expect_fun_call.rs:88:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:80:21\n+  --> $DIR/expect_fun_call.rs:89:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:82:21\n+  --> $DIR/expect_fun_call.rs:91:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_static_str()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:83:21\n+  --> $DIR/expect_fun_call.rs:92:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:87:16\n+  --> $DIR/expect_fun_call.rs:96:16\n    |\n LL |     Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:93:17\n+  --> $DIR/expect_fun_call.rs:102:17\n    |\n LL |         opt_ref.expect(&format!(\"{:?}\", opt_ref));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{:?}\", opt_ref))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "d0bc640db88994c7c59312de4dfcb001aa984a78", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -6,6 +6,12 @@\n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     let a = vec![1, 2, 3];\n     let c = Some(2);\n@@ -42,4 +48,5 @@ fn main() {\n     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+    assert!(!a.is_empty(), \"with expansion {}\", one!());\n }"}, {"sha": "a0f31afd6ebfe5986ff06e2f716b539e713b1535", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:24:5\n+  --> $DIR/manual_assert.rs:30:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,52 +9,60 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:27:5\n+  --> $DIR/manual_assert.rs:33:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:44:5\n+  --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:47:5\n+  --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:59:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:56:5\n+  --> $DIR/manual_assert.rs:62:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n-error: aborting due to 7 previous errors\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:65:5\n+   |\n+LL | /     if a.is_empty() {\n+LL | |         panic!(\"with expansion {}\", one!())\n+LL | |     }\n+   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "d0bc640db88994c7c59312de4dfcb001aa984a78", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -6,6 +6,12 @@\n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     let a = vec![1, 2, 3];\n     let c = Some(2);\n@@ -42,4 +48,5 @@ fn main() {\n     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+    assert!(!a.is_empty(), \"with expansion {}\", one!());\n }"}, {"sha": "a0f31afd6ebfe5986ff06e2f716b539e713b1535", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:24:5\n+  --> $DIR/manual_assert.rs:30:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,52 +9,60 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:27:5\n+  --> $DIR/manual_assert.rs:33:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:44:5\n+  --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:47:5\n+  --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:59:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:56:5\n+  --> $DIR/manual_assert.rs:62:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n-error: aborting due to 7 previous errors\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:65:5\n+   |\n+LL | /     if a.is_empty() {\n+LL | |         panic!(\"with expansion {}\", one!())\n+LL | |     }\n+   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "027747d8386319431e82d9a836cf095063d2f2b9", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bae06d73c8c53e5b0aabc90203f808932d2b021/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=4bae06d73c8c53e5b0aabc90203f808932d2b021", "patch": "@@ -6,6 +6,12 @@\n #![warn(clippy::manual_assert)]\n #![allow(clippy::nonminimal_bool)]\n \n+macro_rules! one {\n+    () => {\n+        1\n+    };\n+}\n+\n fn main() {\n     let a = vec![1, 2, 3];\n     let c = Some(2);\n@@ -56,4 +62,7 @@ fn main() {\n     if a.is_empty() || !b.is_empty() {\n         panic!(\"panic5\");\n     }\n+    if a.is_empty() {\n+        panic!(\"with expansion {}\", one!())\n+    }\n }"}]}