{"sha": "f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDViMDI1Y2Y5MDdkMGJiZGQyMTM1ZWM1OWQ4OWNkMzJlNWNiZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T03:31:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T03:31:11Z"}, "message": "Auto merge of #48999 - GuillaumeGomez:add-repeat-on-slice, r=Kimundi\n\nAdd repeat method on slice\n\nFixes #48784.", "tree": {"sha": "56355854a989c4b9dcebd7c8576885961d6342ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56355854a989c4b9dcebd7c8576885961d6342ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "html_url": "https://github.com/rust-lang/rust/commit/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1286f6835ade2d46b936100acd82d44093b3b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1286f6835ade2d46b936100acd82d44093b3b68", "html_url": "https://github.com/rust-lang/rust/commit/a1286f6835ade2d46b936100acd82d44093b3b68"}, {"sha": "3c1fea9c0de008d105e8e043b53c4aba57d0df65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1fea9c0de008d105e8e043b53c4aba57d0df65", "html_url": "https://github.com/rust-lang/rust/commit/3c1fea9c0de008d105e8e043b53c4aba57d0df65"}], "stats": {"total": 144, "additions": 91, "deletions": 53}, "files": [{"sha": "5c14ee4fd83b4a6467cd3a6c1d2f6d74b501d7ff", "filename": "src/liballoc/repeat-generic-slice.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/src%2Fliballoc%2Frepeat-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/src%2Fliballoc%2Frepeat-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frepeat-generic-slice.rs?ref=f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repeat_generic_slice)]\n+\n+fn main() {\n+    assert_eq!([1, 2].repeat(2), vec![1, 2, 1, 2]);\n+    assert_eq!([1, 2, 3, 4].repeat(0), vec![]);\n+    assert_eq!([1, 2, 3, 4].repeat(1), vec![1, 2, 3, 4]);\n+    assert_eq!([1, 2, 3, 4].repeat(3),\n+               vec![1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n+}"}, {"sha": "d50a3458f20d1cee5043b226801193a4998872ac", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "patch": "@@ -394,6 +394,77 @@ impl<T> [T] {\n         // NB see hack module in this file\n         hack::into_vec(self)\n     }\n+\n+    /// Creates a vector by repeating a slice `n` times.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(repeat_generic_slice)]\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"repeat_generic_slice\",\n+               reason = \"it's on str, why not on slice?\",\n+               issue = \"48784\")]\n+    pub fn repeat(&self, n: usize) -> Vec<T> where T: Copy {\n+        if n == 0 {\n+            return Vec::new();\n+        }\n+\n+        // If `n` is larger than zero, it can be split as\n+        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n+        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n+        // and `rem` is the remaining part of `n`.\n+\n+        // Using `Vec` to access `set_len()`.\n+        let mut buf = Vec::with_capacity(self.len() * n);\n+\n+        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n+        buf.extend(self);\n+        {\n+            let mut m = n >> 1;\n+            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n+            while m > 0 {\n+                // `buf.extend(buf)`:\n+                unsafe {\n+                    ptr::copy_nonoverlapping(\n+                        buf.as_ptr(),\n+                        (buf.as_mut_ptr() as *mut T).add(buf.len()),\n+                        buf.len(),\n+                    );\n+                    // `buf` has capacity of `self.len() * n`.\n+                    let buf_len = buf.len();\n+                    buf.set_len(buf_len * 2);\n+                }\n+\n+                m >>= 1;\n+            }\n+        }\n+\n+        // `rem` (`= n - 2^expn`) repetition is done by copying\n+        // first `rem` repetitions from `buf` itself.\n+        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n+        if rem_len > 0 {\n+            // `buf.extend(buf[0 .. rem_len])`:\n+            unsafe {\n+                // This is non-overlapping since `2^expn > rem`.\n+                ptr::copy_nonoverlapping(\n+                    buf.as_ptr(),\n+                    (buf.as_mut_ptr() as *mut T).add(buf.len()),\n+                    rem_len,\n+                );\n+                // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n+                let buf_cap = buf.capacity();\n+                buf.set_len(buf_cap);\n+            }\n+        }\n+        buf\n+    }\n }\n \n #[cfg_attr(stage0, lang = \"slice_u8\")]"}, {"sha": "cac94edf6494783e4c64a96230f2adcab71a9ca9", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "patch": "@@ -436,59 +436,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n-        if n == 0 {\n-            return String::new();\n-        }\n-\n-        // If `n` is larger than zero, it can be split as\n-        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n-        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n-        // and `rem` is the remaining part of `n`.\n-\n-        // Using `Vec` to access `set_len()`.\n-        let mut buf = Vec::with_capacity(self.len() * n);\n-\n-        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n-        buf.extend(self.as_bytes());\n-        {\n-            let mut m = n >> 1;\n-            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n-            while m > 0 {\n-                // `buf.extend(buf)`:\n-                unsafe {\n-                    ptr::copy_nonoverlapping(\n-                        buf.as_ptr(),\n-                        (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n-                        buf.len(),\n-                    );\n-                    // `buf` has capacity of `self.len() * n`.\n-                    let buf_len = buf.len();\n-                    buf.set_len(buf_len * 2);\n-                }\n-\n-                m >>= 1;\n-            }\n-        }\n-\n-        // `rem` (`= n - 2^expn`) repetition is done by copying\n-        // first `rem` repetitions from `buf` itself.\n-        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n-        if rem_len > 0 {\n-            // `buf.extend(buf[0 .. rem_len])`:\n-            unsafe {\n-                // This is non-overlapping since `2^expn > rem`.\n-                ptr::copy_nonoverlapping(\n-                    buf.as_ptr(),\n-                    (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n-                    rem_len,\n-                );\n-                // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n-                let buf_cap = buf.capacity();\n-                buf.set_len(buf_cap);\n-            }\n-        }\n-\n-        unsafe { String::from_utf8_unchecked(buf) }\n+        unsafe { String::from_utf8_unchecked(self.as_bytes().repeat(n)) }\n     }\n \n     /// Returns a copy of this string where each character is mapped to its"}]}