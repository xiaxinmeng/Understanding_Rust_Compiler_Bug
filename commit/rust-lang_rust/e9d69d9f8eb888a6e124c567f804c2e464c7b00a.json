{"sha": "e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZDY5ZDlmOGViODg4YTZlMTI0YzU2N2Y4MDRjMmU0NjRjN2IwMGE=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-02T20:06:12Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-02T20:06:12Z"}, "message": "Allocation failure in constprop panics right away", "tree": {"sha": "cda4f0d2606eec333af0c4eba1a9e1962847ea6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda4f0d2606eec333af0c4eba1a9e1962847ea6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "html_url": "https://github.com/rust-lang/rust/commit/e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e20129a18b34ba3aa13efaa53ddfa09dfb1fb7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e20129a18b34ba3aa13efaa53ddfa09dfb1fb7b", "html_url": "https://github.com/rust-lang/rust/commit/3e20129a18b34ba3aa13efaa53ddfa09dfb1fb7b"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "f1b1bb9ab88ab4b9dbd42a0e9a6549e76341decd", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "patch": "@@ -126,14 +126,17 @@ impl<Tag> Allocation<Tag> {\n \n     /// Try to create an Allocation of `size` bytes, failing if there is not enough memory\n     /// available to the compiler to do so.\n-    pub fn uninit(size: Size, align: Align) -> InterpResult<'static, Self> {\n+    pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {\n         let mut bytes = Vec::new();\n         bytes.try_reserve(size.bytes_usize()).map_err(|_| {\n             // This results in an error that can happen non-deterministically, since the memory\n             // available to the compiler can change between runs. Normally queries are always\n             // deterministic. However, we can be non-determinstic here because all uses of const\n             // evaluation (including ConstProp!) will make compilation fail (via hard error\n             // or ICE) upon encountering a `MemoryExhausted` error.\n+            if panic_on_fail {\n+                panic!(\"Allocation::uninit called with panic_on_fail had allocation failure\")\n+            }\n             ty::tls::with(|tcx| {\n                 tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpreation\")\n             });"}, {"sha": "ef1c941bee4e4320b91fec6ae21d0ac2d8f76053", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ptr_align = tcx.data_layout.pointer_align.abi;\n \n         let vtable_size = ptr_size * u64::try_from(vtable_entries.len()).unwrap();\n-        let mut vtable = Allocation::uninit(vtable_size, ptr_align)?;\n+        let mut vtable = Allocation::uninit(vtable_size, ptr_align, true)?;\n \n         // No need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by"}, {"sha": "992e32e298f8e60f5c50d64e033d4b436b7ac70f", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "patch": "@@ -201,6 +201,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     type MemoryExtra = MemoryExtra;\n \n+    const PANIC_ON_ALLOC_FAIL: bool = false; // will be raised as a proper error\n+\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,"}, {"sha": "5b8c0788cbc8472296ad171e395afdc1987f7ca2", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "patch": "@@ -122,6 +122,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// that is added to the memory so that the work is not done twice.\n     const GLOBAL_KIND: Option<Self::MemoryKind>;\n \n+    /// Should the machine panic on allocation failures?\n+    const PANIC_ON_ALLOC_FAIL: bool;\n+\n     /// Whether memory accesses should be alignment-checked.\n     fn enforce_alignment(memory_extra: &Self::MemoryExtra) -> bool;\n "}, {"sha": "cb929c21850cb62d2ed7da56260659776edd40fb", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "patch": "@@ -208,7 +208,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         align: Align,\n         kind: MemoryKind<M::MemoryKind>,\n     ) -> InterpResult<'static, Pointer<M::PointerTag>> {\n-        let alloc = Allocation::uninit(size, align)?;\n+        let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;\n         Ok(self.allocate_with(alloc, kind))\n     }\n "}, {"sha": "743ba95a9afab9a380364436ea64a135eed79795", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d69d9f8eb888a6e124c567f804c2e464c7b00a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "patch": "@@ -181,6 +181,7 @@ impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n \n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx> {\n     compile_time_machine!(<'mir, 'tcx>);\n+    const PANIC_ON_ALLOC_FAIL: bool = true; // all allocations are small\n \n     type MemoryKind = !;\n "}]}