{"sha": "824e9e47f7ae70970a7f174976e43935fdfee98d", "node_id": "C_kwDOAAsO6NoAKDgyNGU5ZTQ3ZjdhZTcwOTcwYTdmMTc0OTc2ZTQzOTM1ZmRmZWU5OGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T12:01:56Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T12:01:56Z"}, "message": "Use InternedObligationCauseCode everywhere", "tree": {"sha": "937f3ef71c0cc76bb53f890138f9a9b70bf063d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/937f3ef71c0cc76bb53f890138f9a9b70bf063d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824e9e47f7ae70970a7f174976e43935fdfee98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824e9e47f7ae70970a7f174976e43935fdfee98d", "html_url": "https://github.com/rust-lang/rust/commit/824e9e47f7ae70970a7f174976e43935fdfee98d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824e9e47f7ae70970a7f174976e43935fdfee98d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "213c17486e26aa88b6088f0f015bb86cde6fdf8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/213c17486e26aa88b6088f0f015bb86cde6fdf8c", "html_url": "https://github.com/rust-lang/rust/commit/213c17486e26aa88b6088f0f015bb86cde6fdf8c"}], "stats": {"total": 75, "additions": 33, "deletions": 42}, "files": [{"sha": "4b67fc84d2ed8cd970c3f1fceaef480a34456d41", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=824e9e47f7ae70970a7f174976e43935fdfee98d", "patch": "@@ -97,9 +97,7 @@ pub struct ObligationCause<'tcx> {\n     /// information.\n     pub body_id: hir::HirId,\n \n-    /// `None` for `MISC_OBLIGATION_CAUSE_CODE` (a common case, occurs ~60% of\n-    /// the time). `Some` otherwise.\n-    code: Option<Lrc<ObligationCauseCode<'tcx>>>,\n+    code: InternedObligationCauseCode<'tcx>,\n }\n \n // This custom hash function speeds up hashing for `Obligation` deduplication\n@@ -123,11 +121,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         body_id: hir::HirId,\n         code: ObligationCauseCode<'tcx>,\n     ) -> ObligationCause<'tcx> {\n-        ObligationCause {\n-            span,\n-            body_id,\n-            code: if code == MISC_OBLIGATION_CAUSE_CODE { None } else { Some(Lrc::new(code)) },\n-        }\n+        ObligationCause { span, body_id, code: code.into() }\n     }\n \n     pub fn misc(span: Span, body_id: hir::HirId) -> ObligationCause<'tcx> {\n@@ -136,11 +130,11 @@ impl<'tcx> ObligationCause<'tcx> {\n \n     #[inline(always)]\n     pub fn dummy() -> ObligationCause<'tcx> {\n-        ObligationCause { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: None }\n+        ObligationCause::dummy_with_span(DUMMY_SP)\n     }\n \n     pub fn dummy_with_span(span: Span) -> ObligationCause<'tcx> {\n-        ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: None }\n+        ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: Default::default() }\n     }\n \n     pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {\n@@ -160,14 +154,14 @@ impl<'tcx> ObligationCause<'tcx> {\n \n     #[inline]\n     pub fn code(&self) -> &ObligationCauseCode<'tcx> {\n-        self.code.as_deref().unwrap_or(&MISC_OBLIGATION_CAUSE_CODE)\n+        &self.code\n     }\n \n     pub fn map_code(\n         &mut self,\n-        f: impl FnOnce(InternedObligationCauseCode<'tcx>) -> Lrc<ObligationCauseCode<'tcx>>,\n+        f: impl FnOnce(InternedObligationCauseCode<'tcx>) -> ObligationCauseCode<'tcx>,\n     ) {\n-        self.code = Some(f(InternedObligationCauseCode { code: self.code.take() }));\n+        self.code = f(std::mem::take(&mut self.code)).into();\n     }\n \n     pub fn derived_cause(\n@@ -188,10 +182,8 @@ impl<'tcx> ObligationCause<'tcx> {\n         // NOTE(flaper87): As of now, it keeps track of the whole error\n         // chain. Ideally, we should have a way to configure this either\n         // by using -Z verbose or just a CLI argument.\n-        self.code = Some(\n-            variant(DerivedObligationCause { parent_trait_pred, parent_code: self.code.take() })\n-                .into(),\n-        );\n+        self.code =\n+            variant(DerivedObligationCause { parent_trait_pred, parent_code: self.code }).into();\n         self\n     }\n }\n@@ -203,11 +195,19 @@ pub struct UnifyReceiverContext<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, Default)]\n pub struct InternedObligationCauseCode<'tcx> {\n+    /// `None` for `MISC_OBLIGATION_CAUSE_CODE` (a common case, occurs ~60% of\n+    /// the time). `Some` otherwise.\n     code: Option<Lrc<ObligationCauseCode<'tcx>>>,\n }\n \n+impl<'tcx> From<ObligationCauseCode<'tcx>> for InternedObligationCauseCode<'tcx> {\n+    fn from(code: ObligationCauseCode<'tcx>) -> Self {\n+        Self { code: if code == MISC_OBLIGATION_CAUSE_CODE { None } else { Some(Lrc::new(code)) } }\n+    }\n+}\n+\n impl<'tcx> std::ops::Deref for InternedObligationCauseCode<'tcx> {\n     type Target = ObligationCauseCode<'tcx>;\n \n@@ -454,7 +454,7 @@ impl<'tcx> ObligationCauseCode<'tcx> {\n             BuiltinDerivedObligation(derived)\n             | DerivedObligation(derived)\n             | ImplDerivedObligation(box ImplDerivedObligationCause { derived, .. }) => {\n-                Some((derived.parent_code(), Some(derived.parent_trait_pred)))\n+                Some((&derived.parent_code, Some(derived.parent_trait_pred)))\n             }\n             _ => None,\n         }\n@@ -508,15 +508,7 @@ pub struct DerivedObligationCause<'tcx> {\n     pub parent_trait_pred: ty::PolyTraitPredicate<'tcx>,\n \n     /// The parent trait had this cause.\n-    parent_code: Option<Lrc<ObligationCauseCode<'tcx>>>,\n-}\n-\n-impl<'tcx> DerivedObligationCause<'tcx> {\n-    /// Get a reference to the derived obligation cause's parent code.\n-    #[must_use]\n-    pub fn parent_code(&self) -> &ObligationCauseCode<'tcx> {\n-        self.parent_code.as_deref().unwrap_or(&MISC_OBLIGATION_CAUSE_CODE)\n-    }\n+    pub parent_code: InternedObligationCauseCode<'tcx>,\n }\n \n #[derive(Clone, Debug, TypeFoldable, Lift)]"}, {"sha": "6082d7529c32e836c42d1a202fa0a869baf663f3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=824e9e47f7ae70970a7f174976e43935fdfee98d", "patch": "@@ -1868,7 +1868,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         match code {\n             ObligationCauseCode::BuiltinDerivedObligation(data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_pred);\n-                match self.get_parent_trait_ref(data.parent_code()) {\n+                match self.get_parent_trait_ref(&data.parent_code) {\n                     Some(t) => Some(t),\n                     None => {\n                         let ty = parent_trait_ref.skip_binder().self_ty();"}, {"sha": "833e232e636655351822f49880bba81c9635901b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=824e9e47f7ae70970a7f174976e43935fdfee98d", "patch": "@@ -1683,7 +1683,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         _ => {}\n                     }\n \n-                    next_code = Some(cause.derived.parent_code());\n+                    next_code = Some(&cause.derived.parent_code);\n                 }\n                 ObligationCauseCode::DerivedObligation(derived_obligation)\n                 | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation) => {\n@@ -1715,7 +1715,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         _ => {}\n                     }\n \n-                    next_code = Some(derived_obligation.parent_code());\n+                    next_code = Some(&derived_obligation.parent_code);\n                 }\n                 _ => break,\n             }\n@@ -2365,7 +2365,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let is_upvar_tys_infer_tuple = if !matches!(ty.kind(), ty::Tuple(..)) {\n                     false\n                 } else {\n-                    if let ObligationCauseCode::BuiltinDerivedObligation(data) = data.parent_code()\n+                    if let ObligationCauseCode::BuiltinDerivedObligation(data) = &*data.parent_code\n                     {\n                         let parent_trait_ref =\n                             self.resolve_vars_if_possible(data.parent_trait_pred);\n@@ -2392,14 +2392,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 obligated_types.push(ty);\n \n                 let parent_predicate = parent_trait_ref.to_predicate(tcx);\n-                if !self.is_recursive_obligation(obligated_types, data.parent_code()) {\n+                if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n                     // #74711: avoid a stack overflow\n                     ensure_sufficient_stack(|| {\n                         self.note_obligation_cause_code(\n                             err,\n                             &parent_predicate,\n                             param_env,\n-                            data.parent_code(),\n+                            &data.parent_code,\n                             obligated_types,\n                             seen_requirements,\n                         )\n@@ -2410,7 +2410,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err,\n                             &parent_predicate,\n                             param_env,\n-                            &cause_code.peel_derives(),\n+                            cause_code.peel_derives(),\n                             obligated_types,\n                             seen_requirements,\n                         )\n@@ -2461,7 +2461,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // We don't want to point at the ADT saying \"required because it appears within\n                     // the type `X`\", like we would otherwise do in test `supertrait-auto-trait.rs`.\n                     while let ObligationCauseCode::BuiltinDerivedObligation(derived) =\n-                        data.parent_code()\n+                        &*data.parent_code\n                     {\n                         let child_trait_ref =\n                             self.resolve_vars_if_possible(derived.parent_trait_pred);\n@@ -2474,7 +2474,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         parent_trait_pred = child_trait_ref;\n                     }\n                 }\n-                while let ObligationCauseCode::ImplDerivedObligation(child) = data.parent_code() {\n+                while let ObligationCauseCode::ImplDerivedObligation(child) = &*data.parent_code {\n                     // Skip redundant recursive obligation notes. See `ui/issue-20413.rs`.\n                     let child_trait_pred =\n                         self.resolve_vars_if_possible(child.derived.parent_trait_pred);\n@@ -2505,7 +2505,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err,\n                         &parent_predicate,\n                         param_env,\n-                        data.parent_code(),\n+                        &data.parent_code,\n                         obligated_types,\n                         seen_requirements,\n                     )\n@@ -2520,7 +2520,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err,\n                         &parent_predicate,\n                         param_env,\n-                        data.parent_code(),\n+                        &data.parent_code,\n                         obligated_types,\n                         seen_requirements,\n                     )"}, {"sha": "7c180bd164322d11d35245fdadd7dcced588b38f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824e9e47f7ae70970a7f174976e43935fdfee98d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=824e9e47f7ae70970a7f174976e43935fdfee98d", "patch": "@@ -1606,9 +1606,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut result_code = code;\n                 loop {\n                     let parent = match code {\n-                        ObligationCauseCode::ImplDerivedObligation(c) => c.derived.parent_code(),\n+                        ObligationCauseCode::ImplDerivedObligation(c) => &c.derived.parent_code,\n                         ObligationCauseCode::BuiltinDerivedObligation(c)\n-                        | ObligationCauseCode::DerivedObligation(c) => c.parent_code(),\n+                        | ObligationCauseCode::DerivedObligation(c) => &c.parent_code,\n                         _ => break result_code,\n                     };\n                     (result_code, code) = (code, parent);\n@@ -1670,7 +1670,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         call_hir_id: expr.hir_id,\n                         parent_code,\n                     }\n-                    .into()\n                 });\n             } else if error.obligation.cause.span == call_sp {\n                 // Make function calls point at the callee, not the whole thing."}]}