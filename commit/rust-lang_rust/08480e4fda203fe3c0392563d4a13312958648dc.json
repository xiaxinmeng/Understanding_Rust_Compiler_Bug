{"sha": "08480e4fda203fe3c0392563d4a13312958648dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDgwZTRmZGEyMDNmZTNjMDM5MjU2M2Q0YTEzMzEyOTU4NjQ4ZGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-29T19:04:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-30T21:23:46Z"}, "message": "std: Remove ExistingScheduler spawn mode. Unused", "tree": {"sha": "dda09e263ebb56c98dd48fbb13447c9f821c22f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda09e263ebb56c98dd48fbb13447c9f821c22f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08480e4fda203fe3c0392563d4a13312958648dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08480e4fda203fe3c0392563d4a13312958648dc", "html_url": "https://github.com/rust-lang/rust/commit/08480e4fda203fe3c0392563d4a13312958648dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08480e4fda203fe3c0392563d4a13312958648dc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "html_url": "https://github.com/rust-lang/rust/commit/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4"}], "stats": {"total": 19, "additions": 2, "deletions": 17}, "files": [{"sha": "d9e119e2d2cb28678d72b2b7b38285ee695e8275", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08480e4fda203fe3c0392563d4a13312958648dc/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08480e4fda203fe3c0392563d4a13312958648dc/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=08480e4fda203fe3c0392563d4a13312958648dc", "patch": "@@ -44,7 +44,7 @@ use result::Result;\n use result;\n use rt::{context, OldTaskContext, TaskContext};\n use rt::local::Local;\n-use task::rt::{task_id, sched_id};\n+use task::rt::task_id;\n use unstable::finally::Finally;\n use util;\n \n@@ -58,12 +58,6 @@ mod local_data_priv;\n pub mod rt;\n pub mod spawn;\n \n-/// A handle to a scheduler\n-#[deriving(Eq)]\n-pub enum Scheduler {\n-    SchedulerHandle(sched_id)\n-}\n-\n /// A handle to a task\n #[deriving(Eq)]\n pub enum Task {\n@@ -94,8 +88,6 @@ pub enum SchedMode {\n     DefaultScheduler,\n     /// Run task on the current scheduler\n     CurrentScheduler,\n-    /// Run task on a specific scheduler\n-    ExistingScheduler(Scheduler),\n     /// All tasks run in the same OS thread\n     SingleThreaded,\n }\n@@ -588,10 +580,6 @@ pub fn get_task() -> Task {\n     }\n }\n \n-pub fn get_scheduler() -> Scheduler {\n-    SchedulerHandle(unsafe { rt::rust_get_sched_id() })\n-}\n-\n /**\n  * Temporarily make the task unkillable\n  *"}, {"sha": "58b442b7953eb6831b1f8cfd02d5578991ef67fd", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08480e4fda203fe3c0392563d4a13312958648dc/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08480e4fda203fe3c0392563d4a13312958648dc/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=08480e4fda203fe3c0392563d4a13312958648dc", "patch": "@@ -86,7 +86,6 @@ use task::rt::rust_task;\n use task::rt;\n use task::{Failure, SchedOpts, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult};\n-use task::{ExistingScheduler, SchedulerHandle};\n use task::unkillable;\n use to_bytes::IterBytes;\n use uint;\n@@ -807,15 +806,13 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n \n         let num_threads = match opts.mode {\n             DefaultScheduler\n-            | CurrentScheduler\n-            | ExistingScheduler(*) => 0u, /* Won't be used */\n+            | CurrentScheduler => 0u, /* Won't be used */\n             SingleThreaded => 1u,\n         };\n \n         unsafe {\n             let sched_id = match opts.mode {\n                 CurrentScheduler => rt::rust_get_sched_id(),\n-                ExistingScheduler(SchedulerHandle(id)) => id,\n                 _ => rt::rust_new_sched(num_threads)\n             };\n             rt::rust_new_task_in_sched(sched_id)"}]}