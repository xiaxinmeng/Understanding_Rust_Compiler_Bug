{"sha": "57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjQzYjc0YjEzNmMyNmZmYTIwZDA4MDJjZTI3NzdiNWJmMWYzZjA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-30T14:51:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T23:31:58Z"}, "message": "Move constant parameters to render to Layout struct", "tree": {"sha": "9d623e70c095830dc49d78762de83fb817ff9e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d623e70c095830dc49d78762de83fb817ff9e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "html_url": "https://github.com/rust-lang/rust/commit/57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3657bfc040d1240ed0f84a15d96432f7d60b8d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3657bfc040d1240ed0f84a15d96432f7d60b8d3f", "html_url": "https://github.com/rust-lang/rust/commit/3657bfc040d1240ed0f84a15d96432f7d60b8d3f"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "cf55b9ad3430893163b42f4f1b22c452c17ce145", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "patch": "@@ -11,6 +11,12 @@ pub struct Layout {\n     pub favicon: String,\n     pub external_html: ExternalHtml,\n     pub krate: String,\n+    /// The given user css file which allow to customize the generated\n+    /// documentation theme.\n+    pub css_file_extension: Option<PathBuf>,\n+    /// If false, the `select` element to have search filtering by crates on rendered docs\n+    /// won't be generated.\n+    pub generate_search_filter: bool,\n }\n \n pub struct Page<'a> {\n@@ -30,9 +36,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     page: &Page<'_>,\n     sidebar: &S,\n     t: &T,\n-    css_file_extension: bool,\n     themes: &[PathBuf],\n-    generate_search_filter: bool,\n ) -> String {\n     let mut dst = Buffer::html();\n     let static_root_path = page.static_root_path.unwrap_or(page.root_path);\n@@ -164,7 +168,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     <script defer src=\\\"{root_path}search-index{suffix}.js\\\"></script>\\\n </body>\\\n </html>\",\n-    css_extension = if css_file_extension {\n+    css_extension = if layout.css_file_extension.is_some() {\n         format!(\"<link rel=\\\"stylesheet\\\" \\\n                        type=\\\"text/css\\\" \\\n                        href=\\\"{static_root_path}theme{suffix}.css\\\">\",\n@@ -228,7 +232,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                 root_path=page.root_path,\n                 extra_script=e)\n     }).collect::<String>(),\n-    filter_crates=if generate_search_filter {\n+    filter_crates=if layout.generate_search_filter {\n         \"<select id=\\\"crate-search\\\">\\\n             <option value=\\\"All crates\\\">All crates</option>\\\n         </select>\""}, {"sha": "1da862315bc98dd65af47105d18ee2df71ad992f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "patch": "@@ -192,9 +192,6 @@ crate struct SharedContext {\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n     pub issue_tracker_base_url: Option<String>,\n-    /// The given user css file which allow to customize the generated\n-    /// documentation theme.\n-    pub css_file_extension: Option<PathBuf>,\n     /// The directories that have already been created in this doc run. Used to reduce the number\n     /// of spurious `create_dir_all` calls.\n     pub created_dirs: RefCell<FxHashSet<PathBuf>>,\n@@ -209,9 +206,6 @@ crate struct SharedContext {\n     /// Optional path string to be used to load static files on output pages. If not set, uses\n     /// combinations of `../` to reach the documentation root.\n     pub static_root_path: Option<String>,\n-    /// If false, the `select` element to have search filtering by crates on rendered docs\n-    /// won't be generated.\n-    pub generate_search_filter: bool,\n     /// Option disabled by default to generate files used by RLS and some other tools.\n     pub generate_redirect_pages: bool,\n     /// The fs handle we are working with.\n@@ -545,14 +539,14 @@ pub fn run(mut krate: clean::Crate,\n             favicon: String::new(),\n             external_html,\n             krate: krate.name.clone(),\n+            css_file_extension: extension_css,\n+            generate_search_filter,\n         },\n-        css_file_extension: extension_css,\n         created_dirs: Default::default(),\n         sort_modules_alphabetically,\n         themes,\n         resource_suffix,\n         static_root_path,\n-        generate_search_filter,\n         generate_redirect_pages,\n         fs: DocFS::new(&errors),\n     };\n@@ -932,7 +926,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n             options.enable_minification)?;\n     }\n \n-    if let Some(ref css) = cx.shared.css_file_extension {\n+    if let Some(ref css) = cx.shared.layout.css_file_extension {\n         let out = cx.dst.join(&format!(\"theme{}.css\", cx.shared.resource_suffix));\n         let buffer = try_err!(fs::read_to_string(css), css);\n         if !options.enable_minification {\n@@ -1187,9 +1181,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                                     .collect::<String>());\n             let v = layout::render(&cx.shared.layout,\n                            &page, &(\"\"), &content,\n-                           cx.shared.css_file_extension.is_some(),\n-                           &cx.shared.themes,\n-                           cx.shared.generate_search_filter);\n+                           &cx.shared.themes);\n             cx.shared.fs.write(&dst, v.as_bytes())?;\n         }\n     }\n@@ -1940,9 +1932,7 @@ impl Context {\n         };\n         let v = layout::render(&self.shared.layout,\n                        &page, &sidebar, &all,\n-                       self.shared.css_file_extension.is_some(),\n-                       &self.shared.themes,\n-                       self.shared.generate_search_filter);\n+                       &self.shared.themes);\n         self.shared.fs.write(&final_file, v.as_bytes())?;\n \n         // Generating settings page.\n@@ -1958,10 +1948,7 @@ impl Context {\n         let v = layout::render(\n             &self.shared.layout,\n             &page, &sidebar, &settings,\n-            self.shared.css_file_extension.is_some(),\n-            &themes,\n-            self.shared.generate_search_filter,\n-        );\n+            &themes);\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n \n         Ok(())\n@@ -2019,9 +2006,7 @@ impl Context {\n             layout::render(&self.shared.layout, &page,\n                            &Sidebar{ cx: self, item: it },\n                            &Item{ cx: self, item: it },\n-                           self.shared.css_file_extension.is_some(),\n-                           &self.shared.themes,\n-                           self.shared.generate_search_filter)\n+                           &self.shared.themes)\n         } else {\n             let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {"}, {"sha": "018db3f9363cba05ec0300d5138dd3f17152fc52", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57243b74b136c26ffa20d0802ce2777b5bf1f3f0/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=57243b74b136c26ffa20d0802ce2777b5bf1f3f0", "patch": "@@ -121,9 +121,7 @@ impl<'a> SourceCollector<'a> {\n         };\n         let v = layout::render(&self.scx.layout,\n                        &page, &(\"\"), &Source(contents),\n-                       self.scx.css_file_extension.is_some(),\n-                       &self.scx.themes,\n-                       self.scx.generate_search_filter);\n+                       &self.scx.themes);\n         self.scx.fs.write(&cur, v.as_bytes())?;\n         self.scx.local_sources.insert(p.clone(), href);\n         Ok(())"}]}