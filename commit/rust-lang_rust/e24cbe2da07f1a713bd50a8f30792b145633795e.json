{"sha": "e24cbe2da07f1a713bd50a8f30792b145633795e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGNiZTJkYTA3ZjFhNzEzYmQ1MGE4ZjMwNzkyYjE0NTYzMzc5NWU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-08T11:44:29Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-05T18:36:46Z"}, "message": "Misc tweaks", "tree": {"sha": "d59fede3658c2e64b9f9fd0497eabe5bdac1f8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59fede3658c2e64b9f9fd0497eabe5bdac1f8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24cbe2da07f1a713bd50a8f30792b145633795e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24cbe2da07f1a713bd50a8f30792b145633795e", "html_url": "https://github.com/rust-lang/rust/commit/e24cbe2da07f1a713bd50a8f30792b145633795e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24cbe2da07f1a713bd50a8f30792b145633795e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c338bd539ea9ab1d33c0af8c6deed0cf4738b70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c338bd539ea9ab1d33c0af8c6deed0cf4738b70c", "html_url": "https://github.com/rust-lang/rust/commit/c338bd539ea9ab1d33c0af8c6deed0cf4738b70c"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "34fcc755b3a49509d6f893e34df1b1988d94581c", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -346,6 +346,9 @@\n # Whether to deny warnings in crates\n #deny-warnings = true\n \n+# Print backtrace on internal compiler errors during bootstrap\n+#backtrace-on-ice = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "a2767bd290d5e882f0ab3ea8622db283b8ce4f8c", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -390,6 +390,7 @@ dependencies = [\n  \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "3f97accaa4d84088ecbd8524e359d653dda4aa6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -107,6 +107,13 @@ fn main() {\n              env::join_paths(&dylib_path).unwrap());\n     let mut maybe_crate = None;\n \n+    // Print backtrace in case of ICE\n+    if env::var(\"RUSTC_BACKTRACE_ON_ICE\").is_ok() && env::var(\"RUST_BACKTRACE\").is_err() {\n+        cmd.env(\"RUST_BACKTRACE\", \"1\");\n+    }\n+\n+    cmd.env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n+\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option."}, {"sha": "43387e285657d40232cad569544db0ddf62ffeb7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -706,6 +706,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_PRINT_STEP_TIMINGS\", \"1\");\n         }\n \n+        if self.config.backtrace_on_ice {\n+            cargo.env(\"RUSTC_BACKTRACE_ON_ICE\", \"1\");\n+        }\n+\n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n \n         // in std, we want to avoid denying warnings for stage 0 as that makes cfg's painful."}, {"sha": "6dd6291be2397cbb08960729a7584762b452ed43", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -72,6 +72,7 @@ pub struct Config {\n     pub dry_run: bool,\n \n     pub deny_warnings: bool,\n+    pub backtrace_on_ice: bool,\n \n     // llvm codegen options\n     pub llvm_enabled: bool,\n@@ -306,6 +307,7 @@ struct Rust {\n     wasm_syscall: Option<bool>,\n     lld: Option<bool>,\n     deny_warnings: Option<bool>,\n+    backtrace_on_ice: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -531,6 +533,7 @@ impl Config {\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n             config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n             set(&mut config.deny_warnings, rust.deny_warnings.or(flags.warnings));\n+            set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);\n \n             if let Some(ref backends) = rust.codegen_backends {\n                 config.rust_codegen_backends = backends.iter()"}, {"sha": "6445ce8da332ea95904fb6b8a7ebbfd16f09d029", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -122,12 +122,10 @@ struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n }\n \n pub unsafe fn setup(build: &mut Build) {\n-    // Tell Windows to not show any UI on errors (such as not finding a required dll\n-    // during startup or terminating abnormally).  This is important for running tests,\n-    // since some of them use abnormal termination by design.\n-    // This mode is inherited by all child processes.\n-    let mode = SetErrorMode(SEM_NOGPFAULTERRORBOX); // read inherited flags\n-    SetErrorMode(mode | SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);\n+    // Enable the Windows Error Reporting dialog which msys disables,\n+    // so we can JIT debug rustc\n+    let mode = SetErrorMode(0);\n+    SetErrorMode(mode & !SEM_NOGPFAULTERRORBOX);\n \n     // Create a new job object for us to use\n     let job = CreateJobObjectW(0 as *mut _, 0 as *const _);"}, {"sha": "85533caffce2eb9b634ad72e490a14d42226fe64", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -58,6 +58,17 @@ fn panic_hook(info: &panic::PanicInfo) {\n         if backtrace {\n             TyCtxt::try_print_query_stack();\n         }\n+\n+        #[cfg(windows)]\n+        unsafe {\n+            if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n+                extern \"system\" {\n+                    fn DebugBreak();\n+                }\n+                // Trigger a debugger if we crashed during bootstrap\n+                DebugBreak();\n+            }\n+        }\n     }\n }\n "}, {"sha": "348aa6a7cef4c7678c85c7e43dde9ca7ea9aef43", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -65,7 +65,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_diagnostic_macros)]\n-#![feature(staged_api)]\n \n #[macro_use] extern crate syntax;\n "}, {"sha": "7e3c411c1d2474d920d3cd2806dbde6672e4a86b", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -128,8 +128,6 @@ impl<'a> Registry<'a> {\n     /// This can be used in place of `register_syntax_extension` to register legacy custom derives\n     /// (i.e. attribute syntax extensions whose name begins with `derive_`). Legacy custom\n     /// derives defined by this function do not trigger deprecation warnings when used.\n-    #[unstable(feature = \"rustc_private\", issue = \"27812\")]\n-    #[rustc_deprecated(since = \"1.15.0\", reason = \"replaced by macros 1.1 (RFC 1861)\")]\n     pub fn register_custom_derive(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         assert!(name.as_str().starts_with(\"derive_\"));\n         self.whitelisted_custom_derives.push(name);"}, {"sha": "45cb147fbbc298d33990e62e3f942a67a55a130e", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -19,5 +19,6 @@ rustfix = \"0.2\"\n libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies]\n+lazy_static = \"1.0\"\n miow = \"0.3\"\n winapi = { version = \"0.3\", features = [\"winerror\"] }"}, {"sha": "e2b446c99dcc0139279beeaf230527c410459353", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -23,6 +23,9 @@ extern crate libc;\n extern crate log;\n extern crate regex;\n #[macro_use]\n+#[cfg(windows)]\n+extern crate lazy_static;\n+#[macro_use]\n extern crate serde_derive;\n extern crate serde_json;\n extern crate test;"}, {"sha": "1bac9ef66bb81354e9b25f6e66ae05d916877ad1", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -38,6 +38,39 @@ use std::str;\n \n use extract_gdb_version;\n \n+#[cfg(windows)]\n+fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n+    use std::sync::Mutex;\n+    const SEM_NOGPFAULTERRORBOX: u32 = 0x0002;\n+    extern \"system\" {\n+        fn SetErrorMode(mode: u32) -> u32;\n+    }\n+\n+    lazy_static! {\n+        static ref LOCK: Mutex<()> = {\n+            Mutex::new(())\n+        };\n+    }\n+    // Error mode is a global variable, so lock it so only one thread will change it\n+    let _lock = LOCK.lock().unwrap();\n+\n+    // Tell Windows to not show any UI on errors (such as terminating abnormally).\n+    // This is important for running tests, since some of them use abnormal\n+    // termination by design. This mode is inherited by all child processes.\n+    unsafe {\n+        let old_mode = SetErrorMode(SEM_NOGPFAULTERRORBOX); // read inherited flags\n+        SetErrorMode(old_mode | SEM_NOGPFAULTERRORBOX);\n+        let r = f();\n+        SetErrorMode(old_mode);\n+        r\n+    }\n+}\n+\n+#[cfg(not(windows))]\n+fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n+    f()\n+}\n+\n /// The name of the environment variable that holds dynamic library locations.\n pub fn dylib_env_var() -> &'static str {\n     if cfg!(windows) {\n@@ -1578,8 +1611,7 @@ impl<'test> TestCx<'test> {\n         let newpath = env::join_paths(&path).unwrap();\n         command.env(dylib_env_var(), newpath);\n \n-        let mut child = command\n-            .spawn()\n+        let mut child = disable_error_reporting(|| command.spawn())\n             .expect(&format!(\"failed to exec `{:?}`\", &command));\n         if let Some(input) = input {\n             child"}, {"sha": "9a87fcb00d526f4cc683cfbbf98b2bbc9446d0b7", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cbe2da07f1a713bd50a8f30792b145633795e/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=e24cbe2da07f1a713bd50a8f30792b145633795e", "patch": "@@ -73,6 +73,7 @@ static WHITELIST: &'static [Crate] = &[\n     Crate(\"flate2\"),\n     Crate(\"fuchsia-zircon\"),\n     Crate(\"fuchsia-zircon-sys\"),\n+    Crate(\"getopts\"),\n     Crate(\"humantime\"),\n     Crate(\"jobserver\"),\n     Crate(\"kernel32-sys\"),"}]}