{"sha": "4edff843dd219cf19a5fede6c78c7ce95402e1f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZGZmODQzZGQyMTljZjE5YTVmZWRlNmM3OGM3Y2U5NTQwMmUxZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-16T20:33:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-16T20:33:55Z"}, "message": "Auto merge of #61347 - Centril:stabilize-underscore_const_names, r=petrochenkov\n\nStabilize underscore_const_names in 1.37.0\n\nYou are now permitted to write:\n\n```rust\nconst _: $type_expression = $term_expression;\n```\n\nThat is, we change the [grammar of items](https://github.com/rust-lang-nursery/wg-grammar/blob/9d1984d7ae8d6576f943566539a31a5800644c57/grammar/item.lyg#L3-L42), as written in [the *`.lyg`* notation](https://github.com/rust-lang/gll/tree/263bf161dad903e67aa65fc591ced3cab18afa2a#grammar), from:\n\n```java\nItem = attrs:OuterAttr* vis:Vis? kind:ItemKind;\nItemKind =\n  | ...\n  | Const:{ \"const\" name:IDENT \":\" ty:Type \"=\" value:Expr \";\" }\n  | ...\n  ;\n```\n\ninto:\n\n```java\nItem = attrs:OuterAttr* vis:Vis? kind:ItemKind;\nItemKind =\n  | ...\n  | Const:{ \"const\" name:IdentOrUnderscore \":\" ty:Type \"=\" value:Expr \";\" }\n  | ...\n  ;\n\nIdentOrUnderscore =\n  | Named:IDENT\n  | NoName:\"_\"\n  ;\n```\n\nr? @petrochenkov", "tree": {"sha": "8b249bd7f2e9c9743684019f07ab792a7846afa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b249bd7f2e9c9743684019f07ab792a7846afa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4edff843dd219cf19a5fede6c78c7ce95402e1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4edff843dd219cf19a5fede6c78c7ce95402e1f5", "html_url": "https://github.com/rust-lang/rust/commit/4edff843dd219cf19a5fede6c78c7ce95402e1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4edff843dd219cf19a5fede6c78c7ce95402e1f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799cf3f603b5809a68853efcd779671cb8e046c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/799cf3f603b5809a68853efcd779671cb8e046c4", "html_url": "https://github.com/rust-lang/rust/commit/799cf3f603b5809a68853efcd779671cb8e046c4"}, {"sha": "e62c9d7917052db098c6f27314f4daa5b9513387", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62c9d7917052db098c6f27314f4daa5b9513387", "html_url": "https://github.com/rust-lang/rust/commit/e62c9d7917052db098c6f27314f4daa5b9513387"}], "stats": {"total": 214, "additions": 134, "deletions": 80}, "files": [{"sha": "6e7a8e98853c02f520939c4c5588b11991983eea", "filename": "src/librustc_data_structures/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -1,6 +1,7 @@\n /// A simple static assertion macro.\n #[macro_export]\n-#[allow_internal_unstable(type_ascription, underscore_const_names)]\n+#[cfg_attr(bootstrap, allow_internal_unstable(type_ascription, underscore_const_names))]\n+#[cfg_attr(not(bootstrap), allow_internal_unstable(type_ascription))]\n macro_rules! static_assert {\n     ($test:expr) => {\n         // Use the bool to access an array such that if the bool is false, the access\n@@ -12,7 +13,7 @@ macro_rules! static_assert {\n \n /// Type size assertion. The first argument is a type and the second argument is its expected size.\n #[macro_export]\n-#[allow_internal_unstable(underscore_const_names)]\n+#[cfg_attr(bootstrap, allow_internal_unstable(underscore_const_names))]\n macro_rules! static_assert_size {\n     ($ty:ty, $size:expr) => {\n         const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];"}, {"sha": "7f80e2099f6ad11681705119ddbc658c7e29fdcf", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -25,7 +25,7 @@ use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::{token, ParseSess};\n-use crate::symbol::{Symbol, kw, sym};\n+use crate::symbol::{Symbol, sym};\n use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n@@ -526,9 +526,6 @@ declare_features! (\n     // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(34511), None),\n \n-    // Allows `const _: TYPE = VALUE`.\n-    (active, underscore_const_names, \"1.31.0\", Some(54912), None),\n-\n     // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n@@ -851,6 +848,8 @@ declare_features! (\n     // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n     // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n+    // Allows `const _: TYPE = VALUE`.\n+    (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features\n@@ -2000,13 +1999,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.node {\n-            ast::ItemKind::Const(_,_) => {\n-                if i.ident.name == kw::Underscore {\n-                    gate_feature_post!(&self, underscore_const_names, i.span,\n-                                        \"naming constants with `_` is unstable\");\n-                }\n-            }\n-\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n                 self.check_abi(foreign_module.abi, i.span);\n             }"}, {"sha": "87b14a1117805a6f985eef716664e959219fc86a", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -1,5 +1,3 @@\n-#![feature(underscore_const_names)]\n-\n const _: bool = false && false;\n const _: bool = true && false;\n const _: bool = {"}, {"sha": "0a6536c88372a271764e2145be735f3f8a2e3d4d", "filename": "src/test/ui/consts/const_short_circuit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -1,23 +1,23 @@\n error: new features like let bindings are not permitted in constants which also use short circuiting operators\n-  --> $DIR/const_short_circuit.rs:6:9\n+  --> $DIR/const_short_circuit.rs:4:9\n    |\n LL |     let mut x = true && false;\n    |         ^^^^^\n    |\n note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See https://github.com/rust-lang/rust/issues/49146 for more information.\n-  --> $DIR/const_short_circuit.rs:6:22\n+  --> $DIR/const_short_circuit.rs:4:22\n    |\n LL |     let mut x = true && false;\n    |                      ^^\n \n error: new features like let bindings are not permitted in constants which also use short circuiting operators\n-  --> $DIR/const_short_circuit.rs:11:9\n+  --> $DIR/const_short_circuit.rs:9:9\n    |\n LL |     let x = true && false;\n    |         ^\n    |\n note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See https://github.com/rust-lang/rust/issues/49146 for more information.\n-  --> $DIR/const_short_circuit.rs:11:18\n+  --> $DIR/const_short_circuit.rs:9:18\n    |\n LL |     let x = true && false;\n    |                  ^^"}, {"sha": "8d57e5074f1b1d919da4c7ddcbec72c972c0fa08", "filename": "src/test/ui/consts/underscore_const_names.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fconsts%2Funderscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fconsts%2Funderscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funderscore_const_names.rs?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -1,9 +1,9 @@\n // compile-pass\n \n-#![feature(underscore_const_names)]\n+#![deny(unused)]\n \n trait Trt {}\n-struct Str {}\n+pub struct Str {}\n impl Trt for Str {}\n \n macro_rules! check_impl {\n@@ -17,7 +17,6 @@ macro_rules! check_impl {\n     }\n }\n \n-#[deny(unused)]\n const _ : () = ();\n \n const _ : i32 = 42;", "previous_filename": "src/test/ui/underscore_const_names.rs"}, {"sha": "6b97c24a47ed24ce983d85a6b729a6de1cf5f34f", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs?ref=799cf3f603b5809a68853efcd779671cb8e046c4", "patch": "@@ -1,14 +0,0 @@\n-trait Trt {}\n-struct Str {}\n-\n-impl Trt for Str {}\n-\n-const _ : () = {\n-//~^ ERROR is unstable\n-    use std::marker::PhantomData;\n-    struct ImplementsTrait<T: Trt>(PhantomData<T>);\n-    let _ = ImplementsTrait::<Str>(PhantomData);\n-    ()\n-};\n-\n-fn main() {}"}, {"sha": "8d925424d8ce51dba6f50acbc148eb5a4d998d83", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr?ref=799cf3f603b5809a68853efcd779671cb8e046c4", "patch": "@@ -1,18 +0,0 @@\n-error[E0658]: naming constants with `_` is unstable\n-  --> $DIR/feature-gate-underscore_const_names.rs:6:1\n-   |\n-LL | / const _ : () = {\n-LL | |\n-LL | |     use std::marker::PhantomData;\n-LL | |     struct ImplementsTrait<T: Trt>(PhantomData<T>);\n-LL | |     let _ = ImplementsTrait::<Str>(PhantomData);\n-LL | |     ()\n-LL | | };\n-   | |__^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54912\n-   = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e50bbf5b64909707011846386ed3b9385baf005e", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs?ref=799cf3f603b5809a68853efcd779671cb8e046c4", "patch": "@@ -1,3 +0,0 @@\n-const _: () = (); //~ ERROR is unstable\n-\n-fn main() {}"}, {"sha": "0931145a6e26bad1c105883e1c4265129d0c1ccc", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr?ref=799cf3f603b5809a68853efcd779671cb8e046c4", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: naming constants with `_` is unstable\n-  --> $DIR/underscore_const_names_feature_gate.rs:1:1\n-   |\n-LL | const _: () = ();\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54912\n-   = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "375bdc3a463696cf4484ee7e61e19d8a5847c4b5", "filename": "src/test/ui/parser/underscore_item_not_const.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.rs?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -0,0 +1,30 @@\n+// Test that various non-const items and associated consts do not permit `_` as a name.\n+\n+// Associated `const`s:\n+\n+pub trait A {\n+    const _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n+}\n+impl A for () {\n+    const _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n+}\n+impl dyn A {\n+    const _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n+}\n+\n+// Other kinds of items:\n+\n+static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n+struct _(); //~ ERROR expected identifier, found reserved identifier `_`\n+enum _ {} //~ ERROR expected identifier, found reserved identifier `_`\n+fn _() {} //~ ERROR expected identifier, found reserved identifier `_`\n+mod _ {} //~ ERROR expected identifier, found reserved identifier `_`\n+type _ = (); //~ ERROR expected identifier, found reserved identifier `_`\n+use _; //~ ERROR expected identifier, found reserved identifier `_`\n+use _ as g; //~ ERROR expected identifier, found reserved identifier `_`\n+trait _ {} //~ ERROR expected identifier, found reserved identifier `_`\n+trait _ = Copy; //~ ERROR expected identifier, found reserved identifier `_`\n+macro_rules! _ { () => {} } //~ ERROR expected identifier, found reserved identifier `_`\n+union _ { f: u8 } //~ ERROR expected one of `!` or `::`, found `_`\n+\n+fn main() {}"}, {"sha": "deb4a012e32ab63dcd54eec4b1831d5f8c2ffe89", "filename": "src/test/ui/parser/underscore_item_not_const.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4edff843dd219cf19a5fede6c78c7ce95402e1f5/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_item_not_const.stderr?ref=4edff843dd219cf19a5fede6c78c7ce95402e1f5", "patch": "@@ -0,0 +1,92 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:6:11\n+   |\n+LL |     const _: () = ();\n+   |           ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:9:11\n+   |\n+LL |     const _: () = ();\n+   |           ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:12:11\n+   |\n+LL |     const _: () = ();\n+   |           ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:17:8\n+   |\n+LL | static _: () = ();\n+   |        ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:18:8\n+   |\n+LL | struct _();\n+   |        ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:19:6\n+   |\n+LL | enum _ {}\n+   |      ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:20:4\n+   |\n+LL | fn _() {}\n+   |    ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:21:5\n+   |\n+LL | mod _ {}\n+   |     ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:22:6\n+   |\n+LL | type _ = ();\n+   |      ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:23:5\n+   |\n+LL | use _;\n+   |     ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:24:5\n+   |\n+LL | use _ as g;\n+   |     ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:25:7\n+   |\n+LL | trait _ {}\n+   |       ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:26:7\n+   |\n+LL | trait _ = Copy;\n+   |       ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_item_not_const.rs:27:14\n+   |\n+LL | macro_rules! _ { () => {} }\n+   |              ^ expected identifier, found reserved identifier\n+\n+error: expected one of `!` or `::`, found `_`\n+  --> $DIR/underscore_item_not_const.rs:28:7\n+   |\n+LL | union _ { f: u8 }\n+   |       ^ expected one of `!` or `::` here\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "21d6a1bc1b3607462ea68231ce18f74e7a7a1fec", "filename": "src/test/ui/parser/underscore_static.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs?ref=799cf3f603b5809a68853efcd779671cb8e046c4", "patch": "@@ -1,3 +0,0 @@\n-static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n-\n-fn main() {}"}, {"sha": "4c41afdc3f09ef5bac10c40da0365b93746e309a", "filename": "src/test/ui/parser/underscore_static.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/799cf3f603b5809a68853efcd779671cb8e046c4/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr?ref=799cf3f603b5809a68853efcd779671cb8e046c4", "patch": "@@ -1,8 +0,0 @@\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/underscore_static.rs:1:8\n-   |\n-LL | static _: () = ();\n-   |        ^ expected identifier, found reserved identifier\n-\n-error: aborting due to previous error\n-"}]}