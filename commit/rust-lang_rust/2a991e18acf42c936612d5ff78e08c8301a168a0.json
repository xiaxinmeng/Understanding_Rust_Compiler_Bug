{"sha": "2a991e18acf42c936612d5ff78e08c8301a168a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTkxZTE4YWNmNDJjOTM2NjEyZDVmZjc4ZTA4YzgzMDFhMTY4YTA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T04:19:58Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T04:20:59Z"}, "message": "Get rid of clean::Method\n\nReplace it instead with `(clean::Function, Option<hir::Defaultness>)`.", "tree": {"sha": "b70741d970ca086922f83b5d0c88e0f8b4af70ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b70741d970ca086922f83b5d0c88e0f8b4af70ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a991e18acf42c936612d5ff78e08c8301a168a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a991e18acf42c936612d5ff78e08c8301a168a0", "html_url": "https://github.com/rust-lang/rust/commit/2a991e18acf42c936612d5ff78e08c8301a168a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a991e18acf42c936612d5ff78e08c8301a168a0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f9795cbb498ad75bcfa0c287774a936c09dd8d", "html_url": "https://github.com/rust-lang/rust/commit/b3f9795cbb498ad75bcfa0c287774a936c09dd8d"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "b9e5a7a729773559164a55dfadf8a8240b7cc0b5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a991e18acf42c936612d5ff78e08c8301a168a0", "patch": "@@ -883,14 +883,12 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n     }\n }\n \n-impl<'a> Clean<Method>\n-    for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId, Option<hir::Defaultness>)\n-{\n-    fn clean(&self, cx: &DocContext<'_>) -> Method {\n+impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId) {\n+    fn clean(&self, cx: &DocContext<'_>) -> Function {\n         let (generics, decl) =\n             enter_impl_trait(cx, || (self.1.clean(cx), (&*self.0.decl, self.2).clean(cx)));\n         let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n-        Method { decl, generics, header: self.0.header, defaultness: self.3, all_types, ret_types }\n+        Function { decl, generics, header: self.0.header, all_types, ret_types }\n     }\n }\n \n@@ -1107,13 +1105,13 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                let mut m = (sig, &self.generics, body, None).clean(cx);\n+                let mut m = (sig, &self.generics, body).clean(cx);\n                 if m.header.constness == hir::Constness::Const\n                     && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     m.header.constness = hir::Constness::NotConst;\n                 }\n-                MethodItem(m)\n+                MethodItem(m, None)\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n@@ -1153,13 +1151,13 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                 AssocConstItem(ty.clean(cx), Some(print_const_expr(cx, expr)))\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {\n-                let mut m = (sig, &self.generics, body, Some(self.defaultness)).clean(cx);\n+                let mut m = (sig, &self.generics, body).clean(cx);\n                 if m.header.constness == hir::Constness::Const\n                     && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     m.header.constness = hir::Constness::NotConst;\n                 }\n-                MethodItem(m)\n+                MethodItem(m, Some(self.defaultness))\n             }\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 let type_ = ty.clean(cx);\n@@ -1235,19 +1233,21 @@ impl Clean<Item> for ty::AssocItem {\n                         ty::ImplContainer(_) => Some(self.defaultness),\n                         ty::TraitContainer(_) => None,\n                     };\n-                    MethodItem(Method {\n-                        generics,\n-                        decl,\n-                        header: hir::FnHeader {\n-                            unsafety: sig.unsafety(),\n-                            abi: sig.abi(),\n-                            constness,\n-                            asyncness,\n+                    MethodItem(\n+                        Function {\n+                            generics,\n+                            decl,\n+                            header: hir::FnHeader {\n+                                unsafety: sig.unsafety(),\n+                                abi: sig.abi(),\n+                                constness,\n+                                asyncness,\n+                            },\n+                            all_types,\n+                            ret_types,\n                         },\n                         defaultness,\n-                        all_types,\n-                        ret_types,\n-                    })\n+                    )\n                 } else {\n                     TyMethodItem(Function {\n                         generics,"}, {"sha": "db9de768d1916e90d56368829d5eb5644b12d5a1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2a991e18acf42c936612d5ff78e08c8301a168a0", "patch": "@@ -227,12 +227,8 @@ impl Item {\n \n     crate fn is_default(&self) -> bool {\n         match self.kind {\n-            ItemKind::MethodItem(ref meth) => {\n-                if let Some(defaultness) = meth.defaultness {\n-                    defaultness.has_value() && !defaultness.is_final()\n-                } else {\n-                    false\n-                }\n+            ItemKind::MethodItem(_, Some(defaultness)) => {\n+                defaultness.has_value() && !defaultness.is_final()\n             }\n             _ => false,\n         }\n@@ -266,7 +262,7 @@ crate enum ItemKind {\n     /// non-default-methods).\n     TyMethodItem(Function),\n     /// A method with a body.\n-    MethodItem(Method),\n+    MethodItem(Function, Option<hir::Defaultness>),\n     StructFieldItem(Type),\n     VariantItem(Variant),\n     /// `fn`s from an extern block\n@@ -910,16 +906,6 @@ crate struct Generics {\n     crate where_predicates: Vec<WherePredicate>,\n }\n \n-#[derive(Clone, Debug)]\n-crate struct Method {\n-    crate generics: Generics,\n-    crate decl: FnDecl,\n-    crate header: hir::FnHeader,\n-    crate defaultness: Option<hir::Defaultness>,\n-    crate all_types: Vec<(Type, TypeKind)>,\n-    crate ret_types: Vec<(Type, TypeKind)>,\n-}\n-\n #[derive(Clone, Debug)]\n crate struct Function {\n     crate decl: FnDecl,"}, {"sha": "085ca01f58daa38ffb5ca91ab6ef050b9013cc3b", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=2a991e18acf42c936612d5ff78e08c8301a168a0", "patch": "@@ -167,7 +167,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n crate fn get_index_search_type(item: &clean::Item) -> Option<IndexItemFunctionType> {\n     let (all_types, ret_types) = match item.kind {\n         clean::FunctionItem(ref f) => (&f.all_types, &f.ret_types),\n-        clean::MethodItem(ref m) => (&m.all_types, &m.ret_types),\n+        clean::MethodItem(ref m, _) => (&m.all_types, &m.ret_types),\n         clean::TyMethodItem(ref m) => (&m.all_types, &m.ret_types),\n         _ => return None,\n     };"}, {"sha": "7022cde459c69e6f650d0e12bda8431eee4fdfd0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a991e18acf42c936612d5ff78e08c8301a168a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2a991e18acf42c936612d5ff78e08c8301a168a0", "patch": "@@ -2589,7 +2589,9 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n             for (pos, m) in provided.iter().enumerate() {\n                 render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait);\n                 match m.kind {\n-                    clean::MethodItem(ref inner) if !inner.generics.where_predicates.is_empty() => {\n+                    clean::MethodItem(ref inner, _)\n+                        if !inner.generics.where_predicates.is_empty() =>\n+                    {\n                         write!(w, \",\\n    {{ ... }}\\n\");\n                     }\n                     _ => {\n@@ -2968,7 +2970,9 @@ fn render_assoc_item(\n     match item.kind {\n         clean::StrippedItem(..) => {}\n         clean::TyMethodItem(ref m) => method(w, item, m.header, &m.generics, &m.decl, link, parent),\n-        clean::MethodItem(ref m) => method(w, item, m.header, &m.generics, &m.decl, link, parent),\n+        clean::MethodItem(ref m, _) => {\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent)\n+        }\n         clean::AssocConstItem(ref ty, ref default) => assoc_const(\n             w,\n             item,\n@@ -3545,7 +3549,7 @@ fn render_deref_methods(\n \n fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     let self_type_opt = match item.kind {\n-        clean::MethodItem(ref method) => method.decl.self_type(),\n+        clean::MethodItem(ref method, _) => method.decl.self_type(),\n         clean::TyMethodItem(ref method) => method.decl.self_type(),\n         _ => None,\n     };\n@@ -3752,7 +3756,7 @@ fn render_impl(\n                 (true, \" hidden\")\n             };\n         match item.kind {\n-            clean::MethodItem(_) | clean::TyMethodItem(_) => {\n+            clean::MethodItem(..) | clean::TyMethodItem(_) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));"}]}