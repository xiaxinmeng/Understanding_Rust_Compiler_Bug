{"sha": "6fe59bf8776f8913aacfb00a2281c94a117b95d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTU5YmY4Nzc2Zjg5MTNhYWNmYjAwYTIyODFjOTRhMTE3Yjk1ZDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:29:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:59:45Z"}, "message": "Add a field `borrow_offset` to the type descriptor indicating\nwhat amount a T* pointer must be adjusted to reach the contents\nof the box. For `~T` types, this requires knowing the type `T`,\nwhich is not known in the case of objects.", "tree": {"sha": "c149a22cd433599e96bd44250533351826888525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c149a22cd433599e96bd44250533351826888525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe59bf8776f8913aacfb00a2281c94a117b95d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe59bf8776f8913aacfb00a2281c94a117b95d1", "html_url": "https://github.com/rust-lang/rust/commit/6fe59bf8776f8913aacfb00a2281c94a117b95d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe59bf8776f8913aacfb00a2281c94a117b95d1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aefb9649d15c16acef4eb465b06b598b3a1f179", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aefb9649d15c16acef4eb465b06b598b3a1f179", "html_url": "https://github.com/rust-lang/rust/commit/3aefb9649d15c16acef4eb465b06b598b3a1f179"}], "stats": {"total": 110, "additions": 94, "deletions": 16}, "files": [{"sha": "dae0ceed22d9dcc14b3d7045df97f2d0cbe33b9a", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -46,7 +46,8 @@ pub static tydesc_field_take_glue: uint = 2u;\n pub static tydesc_field_drop_glue: uint = 3u;\n pub static tydesc_field_free_glue: uint = 4u;\n pub static tydesc_field_visit_glue: uint = 5u;\n-pub static n_tydesc_fields: uint = 6u;\n+pub static tydesc_field_borrow_offset: uint = 6u;\n+pub static n_tydesc_fields: uint = 7u;\n \n // The two halves of a closure: code and environment.\n pub static fn_field_code: uint = 0u;"}, {"sha": "61ec4b2fedbb7533036d7e92e4ab64d08653fef3", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -54,6 +54,7 @@ pub struct tydesc_info {\n     tydesc: ValueRef,\n     size: ValueRef,\n     align: ValueRef,\n+    borrow_offset: ValueRef,\n     take_glue: Option<ValueRef>,\n     drop_glue: Option<ValueRef>,\n     free_glue: Option<ValueRef>,"}, {"sha": "0a69f25c42cd09800edb90ee703b5e6b46c6886c", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -236,6 +236,36 @@ impl CrateContext {\n     pub fn builder(@mut self) -> Builder {\n         Builder::new(self)\n     }\n+\n+    pub fn const_inbounds_gepi(&self,\n+                               pointer: ValueRef,\n+                               indices: &[uint]) -> ValueRef {\n+        debug!(\"const_inbounds_gepi: pointer=%s indices=%?\",\n+               self.tn.val_to_str(pointer), indices);\n+        let v: ~[ValueRef] =\n+            indices.iter().transform(|i| C_i32(*i as i32)).collect();\n+        unsafe {\n+            llvm::LLVMConstInBoundsGEP(pointer,\n+                                       vec::raw::to_ptr(v),\n+                                       indices.len() as c_uint)\n+        }\n+    }\n+\n+    pub fn offsetof_gep(&self,\n+                        llptr_ty: Type,\n+                        indices: &[uint]) -> ValueRef {\n+        /*!\n+         * Returns the offset of applying the given GEP indices\n+         * to an instance of `llptr_ty`. Similar to `offsetof` in C,\n+         * except that `llptr_ty` must be a pointer type.\n+         */\n+\n+        unsafe {\n+            let null = C_null(llptr_ty);\n+            llvm::LLVMConstPtrToInt(self.const_inbounds_gepi(null, indices),\n+                                    self.int_type.to_ref())\n+        }\n+    }\n }\n \n #[unsafe_destructor]"}, {"sha": "c65d8d31b741b29942c5880683b6d64429bca0ef", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -655,6 +655,18 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n                   ppaux::ty_to_str(ccx.tcx, t));\n     }\n \n+    let has_header = match ty::get(t).sty {\n+        ty::ty_box(*) => true,\n+        ty::ty_uniq(*) => ty::type_contents(ccx.tcx, t).contains_managed(),\n+        _ => false\n+    };\n+\n+    let borrow_offset = if has_header {\n+        ccx.offsetof_gep(llty, [0u, abi::box_field_body])\n+    } else {\n+        C_uint(ccx, 0)\n+    };\n+\n     let llsize = llsize_of(ccx, llty);\n     let llalign = llalign_of(ccx, llty);\n     let name = mangle_internal_name_by_type_and_seq(ccx, t, \"tydesc\").to_managed();\n@@ -670,6 +682,7 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n         tydesc: gvar,\n         size: llsize,\n         align: llalign,\n+        borrow_offset: borrow_offset,\n         take_glue: None,\n         drop_glue: None,\n         free_glue: None,\n@@ -785,13 +798,17 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n               }\n             };\n \n+        debug!(\"ti.borrow_offset: %s\",\n+               ccx.tn.val_to_str(ti.borrow_offset));\n+\n         let tydesc = C_named_struct(ccx.tydesc_type,\n                                     [ti.size, // size\n-                                    ti.align, // align\n-                                    take_glue, // take_glue\n-                                    drop_glue, // drop_glue\n-                                    free_glue, // free_glue\n-                                    visit_glue]); // visit_glue\n+                                     ti.align, // align\n+                                     take_glue, // take_glue\n+                                     drop_glue, // drop_glue\n+                                     free_glue, // free_glue\n+                                     visit_glue, // visit_glue\n+                                     ti.borrow_offset]); // borrow_offset\n \n         unsafe {\n             let gvar = ti.tydesc;"}, {"sha": "8d94a0d10d6fae3c71e2b5754b157886cd3fb334", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -205,10 +205,18 @@ impl Type {\n \n         let int_ty = Type::int(arch);\n \n-        let elems = [\n-            int_ty, int_ty,\n-            glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty\n-        ];\n+        // Must mirror:\n+        //\n+        // std::unstable::intrinsics::TyDesc\n+        // type_desc in rt\n+\n+        let elems = [int_ty,     // size\n+                     int_ty,     // align\n+                     glue_fn_ty, // take\n+                     glue_fn_ty, // drop\n+                     glue_fn_ty, // free\n+                     glue_fn_ty, // visit\n+                     int_ty];    // borrow_offset\n \n         tydesc.set_struct_body(elems, false);\n \n@@ -249,8 +257,12 @@ impl Type {\n         Type::struct_(Type::box_header_fields(ctx) + &[*ty], false)\n     }\n \n+    pub fn opaque() -> Type {\n+        Type::i8()\n+    }\n+\n     pub fn opaque_box(ctx: &CrateContext) -> Type {\n-        Type::box(ctx, &Type::i8())\n+        Type::box(ctx, &Type::opaque())\n     }\n \n     pub fn unique(ctx: &CrateContext, ty: &Type) -> Type {"}, {"sha": "b91984f9b21b89238578eb96d1feb50e207fd437", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -226,10 +226,7 @@ pub enum AutoRef {\n     AutoBorrowFn(Region),\n \n     /// Convert from T to *T\n-    AutoUnsafe(ast::mutability),\n-\n-    /// Convert from @Trait/~Trait/&Trait to &Trait\n-    AutoBorrowObj(Region, ast::mutability),\n+    AutoUnsafe(ast::mutability)\n }\n \n pub type ctxt = @ctxt_;"}, {"sha": "d2807303fb21c131bf39103830cc544ca5dbbd02", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -38,16 +38,34 @@ pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor};\n \n pub type GlueFn = extern \"Rust\" fn(*i8);\n \n-// NB: this has to be kept in sync with the Rust ABI.\n+// NB: this has to be kept in sync with `type_desc` in `rt`\n #[lang=\"ty_desc\"]\n #[cfg(not(test))]\n pub struct TyDesc {\n+    // sizeof(T)\n     size: uint,\n+\n+    // alignof(T)\n     align: uint,\n+\n+    // Called on a copy of a value of type `T` *after* memcpy\n     take_glue: GlueFn,\n+\n+    // Called when a value of type `T` is no longer needed\n     drop_glue: GlueFn,\n+\n+    // Called by drop glue when a value of type `T` can be freed\n     free_glue: GlueFn,\n+\n+    // Called by reflection visitor to visit a value of type `T`\n     visit_glue: GlueFn,\n+\n+    // If T represents a box pointer (`@U` or `~U`), then\n+    // `borrow_offset` is the amount that the pointer must be adjusted\n+    // to find the payload.  This is always derivable from the type\n+    // `U`, but in the case of `@Trait` or `~Trait` objects, the type\n+    // `U` is unknown.\n+    borrow_offset: uint,\n }\n \n #[lang=\"opaque\"]"}, {"sha": "57538f1ec75dbf03c8e99c54b1f0bf02eaffce93", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -58,6 +58,7 @@ struct type_desc {\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n     glue_fn *visit_glue;\n+    size_t borrow_offset;\n };\n \n extern \"C\" type_desc *rust_clone_type_desc(type_desc*);"}, {"sha": "28c69af427a32c54f75b8c0056b4b187f3b3444d", "filename": "src/rt/rust_util.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Frt%2Frust_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6fe59bf8776f8913aacfb00a2281c94a117b95d1/src%2Frt%2Frust_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.cpp?ref=6fe59bf8776f8913aacfb00a2281c94a117b95d1", "patch": "@@ -21,6 +21,7 @@ struct type_desc str_body_tydesc = {\n     NULL, // drop_glue\n     NULL, // free_glue\n     NULL, // visit_glue\n+    0, // borrow_offset\n };\n \n //"}]}