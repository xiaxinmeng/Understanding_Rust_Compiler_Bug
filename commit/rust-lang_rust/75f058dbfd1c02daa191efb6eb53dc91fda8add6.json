{"sha": "75f058dbfd1c02daa191efb6eb53dc91fda8add6", "node_id": "C_kwDOAAsO6NoAKDc1ZjA1OGRiZmQxYzAyZGFhMTkxZWZiNmViNTNkYzkxZmRhOGFkZDY", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-17T20:08:56Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-25T16:03:15Z"}, "message": "Check for macros in built-in attributes that don't support them.", "tree": {"sha": "8348ab28c41ab996e2b534c28aa6d3a79d21d6b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8348ab28c41ab996e2b534c28aa6d3a79d21d6b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f058dbfd1c02daa191efb6eb53dc91fda8add6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f058dbfd1c02daa191efb6eb53dc91fda8add6", "html_url": "https://github.com/rust-lang/rust/commit/75f058dbfd1c02daa191efb6eb53dc91fda8add6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f058dbfd1c02daa191efb6eb53dc91fda8add6/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f8c571e50f1e0e98bb225e1dc909e73251a69be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8c571e50f1e0e98bb225e1dc909e73251a69be", "html_url": "https://github.com/rust-lang/rust/commit/5f8c571e50f1e0e98bb225e1dc909e73251a69be"}], "stats": {"total": 150, "additions": 142, "deletions": 8}, "files": [{"sha": "1c0b2a9b487611a17a15a272975b7dd293ea47b3", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -3,6 +3,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::{token, Attribute, Inline, Item};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_parse::new_parser_from_file;\n+use rustc_parse::validate_attr;\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n@@ -168,7 +169,25 @@ fn mod_file_path_from_attr(\n     dir_path: &Path,\n ) -> Option<PathBuf> {\n     // Extract path string from first `#[path = \"path_string\"]` attribute.\n-    let path_string = sess.first_attr_value_str_by_name(attrs, sym::path)?.as_str();\n+    let first_path = attrs.iter().find(|at| at.has_name(sym::path))?;\n+    let path_string = match first_path.value_str() {\n+        Some(s) => s.as_str(),\n+        None => {\n+            // This check is here mainly to catch attempting to use a macro,\n+            // such as #[path = concat!(...)]. This isn't currently supported\n+            // because otherwise the InvocationCollector would need to defer\n+            // loading a module until the #[path] attribute was expanded, and\n+            // it doesn't support that (and would likely add a bit of\n+            // complexity). Usually bad forms are checked in AstValidator (via\n+            // `check_builtin_attribute`), but by the time that runs the macro\n+            // is expanded, and it doesn't give an error.\n+            validate_attr::emit_fatal_malformed_builtin_attribute(\n+                &sess.parse_sess,\n+                first_path,\n+                sym::path,\n+            );\n+        }\n+    };\n \n     // On windows, the base path might have the form\n     // `\\\\?\\foo\\bar` in which case it does not tolerate"}, {"sha": "0a6d76c99b77a0636650a62682a56210ab9a2deb", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir_build as mir_build;\n-use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n+use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n@@ -33,8 +33,8 @@ use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMod\n use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n-use rustc_session::Session;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_session::{Limit, Session};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n@@ -311,8 +311,7 @@ pub fn configure_and_expand(\n \n         // Create the config for macro expansion\n         let features = sess.features_untracked();\n-        let recursion_limit =\n-            rustc_middle::middle::limits::get_recursion_limit(&krate.attrs, &sess);\n+        let recursion_limit = get_recursion_limit(&krate.attrs, &sess);\n         let cfg = rustc_expand::expand::ExpansionConfig {\n             features: Some(&features),\n             recursion_limit,\n@@ -1070,3 +1069,24 @@ pub fn start_codegen<'tcx>(\n \n     codegen\n }\n+\n+fn get_recursion_limit(krate_attrs: &[ast::Attribute], sess: &Session) -> Limit {\n+    if let Some(attr) = krate_attrs\n+        .iter()\n+        .find(|attr| attr.has_name(sym::recursion_limit) && attr.value_str().is_none())\n+    {\n+        // This is here mainly to check for using a macro, such as\n+        // #![recursion_limit = foo!()]. That is not supported since that\n+        // would require expanding this while in the middle of expansion,\n+        // which needs to know the limit before expanding. Otherwise,\n+        // validation would normally be caught in AstValidator (via\n+        // `check_builtin_attribute`), but by the time that runs the macro\n+        // is expanded, and it doesn't give an error.\n+        validate_attr::emit_fatal_malformed_builtin_attribute(\n+            &sess.parse_sess,\n+            attr,\n+            sym::recursion_limit,\n+        );\n+    }\n+    rustc_middle::middle::limits::get_recursion_limit(krate_attrs, sess)\n+}"}, {"sha": "a1d1b63c8fafe8a034bbb721fb5a1b20f8e80fe7", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -10,6 +10,7 @@ use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n #[cfg(parallel_compiler)]\n use rustc_middle::ty::tls;\n+use rustc_parse::validate_attr;\n #[cfg(parallel_compiler)]\n use rustc_query_impl::QueryCtxt;\n use rustc_resolve::{self, Resolver};\n@@ -475,7 +476,7 @@ pub fn get_codegen_sysroot(\n }\n \n pub(crate) fn check_attr_crate_type(\n-    _sess: &Session,\n+    sess: &Session,\n     attrs: &[ast::Attribute],\n     lint_buffer: &mut LintBuffer,\n ) {\n@@ -515,6 +516,19 @@ pub(crate) fn check_attr_crate_type(\n                         );\n                     }\n                 }\n+            } else {\n+                // This is here mainly to check for using a macro, such as\n+                // #![crate_type = foo!()]. That is not supported since the\n+                // crate type needs to be known very early in compilation long\n+                // before expansion. Otherwise, validation would normally be\n+                // caught in AstValidator (via `check_builtin_attribute`), but\n+                // by the time that runs the macro is expanded, and it doesn't\n+                // give an error.\n+                validate_attr::emit_fatal_malformed_builtin_attribute(\n+                    &sess.parse_sess,\n+                    a,\n+                    sym::crate_type,\n+                );\n             }\n         }\n     }"}, {"sha": "2aa20d02c8830cd38437848b9de82b00040e1bf5", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -4,7 +4,7 @@ use crate::parse_in;\n \n use rustc_ast::tokenstream::{DelimSpan, TokenTree};\n use rustc_ast::{self as ast, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n use rustc_session::parse::ParseSess;\n@@ -162,3 +162,15 @@ fn emit_malformed_attribute(\n             .emit();\n     }\n }\n+\n+pub fn emit_fatal_malformed_builtin_attribute(\n+    sess: &ParseSess,\n+    attr: &Attribute,\n+    name: Symbol,\n+) -> ! {\n+    let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").2;\n+    emit_malformed_attribute(sess, attr, name, template);\n+    // This is fatal, otherwise it will likely cause a cascade of other errors\n+    // (and an error here is expected to be very rare).\n+    FatalError.raise()\n+}"}, {"sha": "9ba5e79ba947ae44a0d404eadb2607db5d5b45d2", "filename": "src/test/ui/invalid/invalid-crate-type-macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,7 @@\n+#![crate_type = foo!()] //~ ERROR malformed `crate_type` attribute\n+\n+macro_rules! foo {\n+    () => {\"rlib\"};\n+}\n+\n+fn main() {}"}, {"sha": "c196d4278a277896a08078e050464aae918a6eb5", "filename": "src/test/ui/invalid/invalid-crate-type-macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.stderr?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `crate_type` attribute input\n+  --> $DIR/invalid-crate-type-macro.rs:1:1\n+   |\n+LL | #![crate_type = foo!()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![crate_type = \"bin|lib|...\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "713ef4a795d88956d46981fbbb6cadc64c247b67", "filename": "src/test/ui/modules/path-invalid-form.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,4 @@\n+#[path = 123]  //~ ERROR malformed `path` attribute\n+mod foo;\n+\n+fn main() {}"}, {"sha": "7e8aa44ef8be6b4029c0c03d312497ed94753b10", "filename": "src/test/ui/modules/path-invalid-form.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.stderr?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `path` attribute input\n+  --> $DIR/path-invalid-form.rs:1:1\n+   |\n+LL | #[path = 123]\n+   | ^^^^^^^^^^^^^ help: must be of the form: `#[path = \"file\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ce2d1e2da2659fe921c31cdf71f4e4960b1cb3b3", "filename": "src/test/ui/modules/path-macro.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! foo {\n+    () => {\"bar.rs\"};\n+}\n+\n+#[path = foo!()] //~ ERROR malformed `path` attribute\n+mod abc;\n+\n+fn main() {}"}, {"sha": "9a2e01ea264517ac90b19df4f5b84af995dfbe6d", "filename": "src/test/ui/modules/path-macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.stderr?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `path` attribute input\n+  --> $DIR/path-macro.rs:5:1\n+   |\n+LL | #[path = foo!()]\n+   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[path = \"file\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e408109b3682c3ad12d6e8dfc2026ee25ca669f7", "filename": "src/test/ui/recursion_limit/invalid_digit_type.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,3 @@\n+#![recursion_limit = 123] //~ ERROR malformed `recursion_limit` attribute\n+\n+fn main() {}"}, {"sha": "6d1409bb39065632f55180a462e8950bcdfb2e7f", "filename": "src/test/ui/recursion_limit/invalid_digit_type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.stderr?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `recursion_limit` attribute input\n+  --> $DIR/invalid_digit_type.rs:1:1\n+   |\n+LL | #![recursion_limit = 123]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![recursion_limit = \"N\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7db67a8d1628428d7fd821941b0f1a4a65408937", "filename": "src/test/ui/recursion_limit/invalid_macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.rs?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,7 @@\n+#![recursion_limit = foo!()] //~ ERROR malformed `recursion_limit` attribute\n+\n+macro_rules! foo {\n+    () => {\"128\"};\n+}\n+\n+fn main() {}"}, {"sha": "0189e99da3714f5145469ad8e8590aedc440d4b8", "filename": "src/test/ui/recursion_limit/invalid_macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75f058dbfd1c02daa191efb6eb53dc91fda8add6/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.stderr?ref=75f058dbfd1c02daa191efb6eb53dc91fda8add6", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `recursion_limit` attribute input\n+  --> $DIR/invalid_macro.rs:1:1\n+   |\n+LL | #![recursion_limit = foo!()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![recursion_limit = \"N\"]`\n+\n+error: aborting due to previous error\n+"}]}