{"sha": "d68f1a80dc666272a5a28f79b37f8feca0cd15be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGYxYTgwZGM2NjYyNzJhNWEyOGY3OWIzN2Y4ZmVjYTBjZDE1YmU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-11T03:34:20Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-15T22:48:10Z"}, "message": "Implement type inference for type-inferred blocks.", "tree": {"sha": "b258efe6a3ca328f1be781b346d150ca38d82271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b258efe6a3ca328f1be781b346d150ca38d82271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68f1a80dc666272a5a28f79b37f8feca0cd15be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68f1a80dc666272a5a28f79b37f8feca0cd15be", "html_url": "https://github.com/rust-lang/rust/commit/d68f1a80dc666272a5a28f79b37f8feca0cd15be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68f1a80dc666272a5a28f79b37f8feca0cd15be/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "html_url": "https://github.com/rust-lang/rust/commit/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "bec920974b508945283e2e97b9533a5c55147dd8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d68f1a80dc666272a5a28f79b37f8feca0cd15be/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f1a80dc666272a5a28f79b37f8feca0cd15be/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d68f1a80dc666272a5a28f79b37f8feca0cd15be", "patch": "@@ -2051,13 +2051,23 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n       }\n       ast::expr_fn(f) {\n         let cx = @{tcx: tcx};\n-        let convert =\n-            bind ast_ty_to_ty(cx.tcx, bind collect::getter(cx, _), _);\n-        let ty_of_arg = bind collect::ty_of_arg(cx, _);\n+        let convert = bind ast_ty_to_ty_crate_tyvar(fcx, _);\n+        let ty_of_arg = lambda(a: &ast::arg) -> ty::arg {\n+            let ty_mode = ast_mode_to_mode(a.mode);\n+            let tt = ast_ty_to_ty_crate_tyvar(fcx, a.ty);\n+            ret {mode: ty_mode, ty: tt};\n+        };\n         let fty =\n             collect::ty_of_fn_decl(cx, convert, ty_of_arg, f.decl, f.proto,\n                                    ~[], none).ty;\n         write::ty_only_fixup(fcx, id, fty);\n+\n+        // Unify the type of the function with the expected type before we\n+        // typecheck the body so that we have more information about the\n+        // argument types in the body. This is needed to make binops and\n+        // record projection work on type inferred arguments.\n+        unify(fcx, expr.span, expected, fty);\n+\n         check_fn(fcx.ccx, f, id, some(fcx));\n       }\n       ast::expr_block(b) {\n@@ -2611,7 +2621,7 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n     let gather_result = gather_locals(ccx, f, id, old_fcx);\n     let fixups: [ast::node_id] = ~[];\n     let fcx: @fn_ctxt =\n-        @{ret_ty: ast_ty_to_ty_crate(ccx, decl.output),\n+        @{ret_ty: ty::ty_fn_ret(ccx.tcx, ty::node_id_to_type(ccx.tcx, id)),\n           purity: decl.purity,\n           proto: f.proto,\n           var_bindings: gather_result.var_bindings,"}]}