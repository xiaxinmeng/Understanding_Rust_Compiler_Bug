{"sha": "caa975c89e343cb7e51f77c2710c8460ada50532", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYTk3NWM4OWUzNDNjYjdlNTFmNzdjMjcxMGM4NDYwYWRhNTA1MzI=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-07-19T11:52:43Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "use `ty::Unevaluated` instead of def substs pair", "tree": {"sha": "7d5c957eb1d942180608f4ebe0bcfb648ec3cf11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5c957eb1d942180608f4ebe0bcfb648ec3cf11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa975c89e343cb7e51f77c2710c8460ada50532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa975c89e343cb7e51f77c2710c8460ada50532", "html_url": "https://github.com/rust-lang/rust/commit/caa975c89e343cb7e51f77c2710c8460ada50532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa975c89e343cb7e51f77c2710c8460ada50532/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "031243898eaa138056ea7248fb37324ffaa561e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/031243898eaa138056ea7248fb37324ffaa561e1", "html_url": "https://github.com/rust-lang/rust/commit/031243898eaa138056ea7248fb37324ffaa561e1"}], "stats": {"total": 152, "additions": 66, "deletions": 86}, "files": [{"sha": "7f890829e68eeb4aa64b67891e83000784d7d3e9", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -678,10 +678,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         a: ty::Unevaluated<'tcx>,\n         b: ty::Unevaluated<'tcx>,\n     ) -> bool {\n-        let canonical = self.canonicalize_query(\n-            ((a.def, a.substs(self.tcx)), (b.def, b.substs(self.tcx))),\n-            &mut OriginalQueryValues::default(),\n-        );\n+        let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());\n         debug!(\"canonical consts: {:?}\", &canonical.value);\n \n         self.tcx.try_unify_abstract_consts(canonical.value)"}, {"sha": "9b3de6710ec0c0c830588100d8404348471d4a23", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -303,12 +303,11 @@ rustc_queries! {\n     }\n \n     query try_unify_abstract_consts(key: (\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)\n+        ty::Unevaluated<'tcx>, ty::Unevaluated<'tcx>\n     )) -> bool {\n         desc {\n             |tcx| \"trying to unify the generic constants {} and {}\",\n-            tcx.def_path_str(key.0.0.did), tcx.def_path_str(key.1.0.did)\n+            tcx.def_path_str(key.0.def.did), tcx.def_path_str(key.1.def.did)\n         }\n     }\n "}, {"sha": "b1f6a612776621573297390f473ccd4167a3f95f", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -18,7 +18,7 @@ use super::ScalarInt;\n ///\n /// We check for all possible substs in `fn default_anon_const_substs`,\n /// so refer to that check for more info.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n pub struct Unevaluated<'tcx> {\n     pub def: ty::WithOptConstParam<DefId>,"}, {"sha": "1c4f24cdf394738288be24d9deec1fe9c72aabbb", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -252,8 +252,8 @@ impl FlagComputation {\n             ty::PredicateKind::ClosureKind(_def_id, substs, _kind) => {\n                 self.add_substs(substs);\n             }\n-            ty::PredicateKind::ConstEvaluatable(_def_id, substs) => {\n-                self.add_substs(substs);\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                self.add_unevaluated_const(uv);\n             }\n             ty::PredicateKind::ConstEquate(expected, found) => {\n                 self.add_const(expected);"}, {"sha": "b1ebe43c491d3436c64dfb487b0097dececedccd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -406,7 +406,7 @@ crate struct PredicateInner<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PredicateInner<'_>, 48);\n+static_assert_size!(PredicateInner<'_>, 56);\n \n #[derive(Clone, Copy, Lift)]\n pub struct Predicate<'tcx> {\n@@ -502,7 +502,7 @@ pub enum PredicateKind<'tcx> {\n     Coerce(CoercePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+    ConstEvaluatable(ty::Unevaluated<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),"}, {"sha": "230a39e639fb17edd23f3762c9abd6f98cbfb8a6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -2294,8 +2294,8 @@ define_print_and_forward_display! {\n                 print_value_path(closure_def_id, &[]),\n                 write(\"` implements the trait `{}`\", kind))\n             }\n-            ty::PredicateKind::ConstEvaluatable(def, substs) => {\n-                p!(\"the constant `\", print_value_path(def.did, substs), \"` can be evaluated\")\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                p!(\"the constant `\", print_value_path(uv.def.did, uv.substs_.map_or(&[], |x| x)), \"` can be evaluated\")\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 p!(\"the constant `\", print(c1), \"` equals `\", print(c2), \"`\")"}, {"sha": "b64d507e0b893a3f671bd98887420ea32d9d3430", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -579,7 +579,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if tcx.features().const_evaluatable_checked =>\n         {\n-            tcx.try_unify_abstract_consts(((au.def, au.substs(tcx)), (bu.def, bu.substs(tcx))))\n+            tcx.try_unify_abstract_consts((au, bu))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`"}, {"sha": "31088423efa3be38080657750e1e577b2999641e", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -190,8 +190,8 @@ impl fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                 write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n             }\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-                write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                write!(f, \"ConstEvaluatable({:?}, {:?})\", uv.def, uv.substs_)\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n             ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n@@ -447,8 +447,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n             ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 Some(ty::PredicateKind::ObjectSafe(trait_def_id))\n             }\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-                tcx.lift(substs).map(|substs| ty::PredicateKind::ConstEvaluatable(def_id, substs))\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                tcx.lift(uv).map(|uv| ty::PredicateKind::ConstEvaluatable(uv))\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 tcx.lift((c1, c2)).map(|(c1, c2)| ty::PredicateKind::ConstEquate(c1, c2))"}, {"sha": "6fe68a0c17a5d2842ebf2cf196ea4c88b119323d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -134,11 +134,11 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,\n-            ty::PredicateKind::ConstEvaluatable(defs, substs)\n+            ty::PredicateKind::ConstEvaluatable(uv)\n                 if self.def_id_visitor.tcx().features().const_evaluatable_checked =>\n             {\n                 let tcx = self.def_id_visitor.tcx();\n-                if let Ok(Some(ct)) = AbstractConst::new(tcx, defs, substs) {\n+                if let Ok(Some(ct)) = AbstractConst::new(tcx, uv) {\n                     self.visit_abstract_const_expr(tcx, ct)?;\n                 }\n                 ControlFlow::CONTINUE"}, {"sha": "8523737f8db6b0ab18fbdb99370976a9d72d5733", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -217,18 +217,13 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key\n-    for (\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-    )\n-{\n+impl<'tcx> Key for (ty::Unevaluated<'tcx>, ty::Unevaluated<'tcx>) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n-        (self.0).0.did.krate == LOCAL_CRATE\n+        (self.0).def.did.krate == LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        (self.0).0.did.default_span(tcx)\n+        (self.0).def.did.default_span(tcx)\n     }\n }\n "}, {"sha": "80c824565d22635b1ea91461078364b921642054", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::mir::{self, Rvalue, StatementKind, TerminatorKind};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n-use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n use std::cmp;\n@@ -29,26 +29,20 @@ use std::ops::ControlFlow;\n /// Check if a given constant can be evaluated.\n pub fn is_const_evaluatable<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def: ty::WithOptConstParam<DefId>,\n-    substs: SubstsRef<'tcx>,\n+    uv: ty::Unevaluated<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n-    debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n+    debug!(\"is_const_evaluatable({:?})\", uv);\n     if infcx.tcx.features().const_evaluatable_checked {\n         let tcx = infcx.tcx;\n-        match AbstractConst::new(tcx, def, substs)? {\n+        match AbstractConst::new(tcx, uv)? {\n             // We are looking at a generic abstract constant.\n             Some(ct) => {\n                 for pred in param_env.caller_bounds() {\n                     match pred.kind().skip_binder() {\n-                        ty::PredicateKind::ConstEvaluatable(b_def, b_substs) => {\n-                            if b_def == def && b_substs == substs {\n-                                debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n-                                return Ok(());\n-                            }\n-\n-                            if let Some(b_ct) = AbstractConst::new(tcx, b_def, b_substs)? {\n+                        ty::PredicateKind::ConstEvaluatable(uv) => {\n+                            if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n                                 // Try to unify with each subtree in the AbstractConst to allow for\n                                 // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n                                 // predicate for `(N + 1) * 2`\n@@ -134,7 +128,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     }\n \n     let future_compat_lint = || {\n-        if let Some(local_def_id) = def.did.as_local() {\n+        if let Some(local_def_id) = uv.def.did.as_local() {\n             infcx.tcx.struct_span_lint_hir(\n                 lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n                 infcx.tcx.hir().local_def_id_to_hir_id(local_def_id),\n@@ -155,13 +149,12 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // and hopefully soon change this to an error.\n     //\n     // See #74595 for more details about this.\n-    let concrete =\n-        infcx.const_eval_resolve(param_env, ty::Unevaluated::new(def, substs), Some(span));\n+    let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n \n-    if concrete.is_ok() && substs.has_param_types_or_consts(infcx.tcx) {\n-        match infcx.tcx.def_kind(def.did) {\n+    if concrete.is_ok() && uv.substs(infcx.tcx).has_param_types_or_consts(infcx.tcx) {\n+        match infcx.tcx.def_kind(uv.def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(def);\n+                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();\n@@ -173,7 +166,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n     debug!(?concrete, \"is_const_evaluatable\");\n     match concrete {\n-        Err(ErrorHandled::TooGeneric) => Err(match substs.has_infer_types_or_consts() {\n+        Err(ErrorHandled::TooGeneric) => Err(match uv.has_infer_types_or_consts() {\n             true => NotConstEvaluatable::MentionsInfer,\n             false => NotConstEvaluatable::MentionsParam,\n         }),\n@@ -198,23 +191,22 @@ pub struct AbstractConst<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n \n-impl AbstractConst<'tcx> {\n+impl<'tcx> AbstractConst<'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        def: ty::WithOptConstParam<DefId>,\n-        substs: SubstsRef<'tcx>,\n+        uv: ty::Unevaluated<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        let inner = tcx.mir_abstract_const_opt_const_arg(def)?;\n-        debug!(\"AbstractConst::new({:?}) = {:?}\", def, inner);\n-        Ok(inner.map(|inner| AbstractConst { inner, substs }))\n+        let inner = tcx.mir_abstract_const_opt_const_arg(uv.def)?;\n+        debug!(\"AbstractConst::new({:?}) = {:?}\", uv, inner);\n+        Ok(inner.map(|inner| AbstractConst { inner, substs: uv.substs(tcx) }))\n     }\n \n     pub fn from_const(\n         tcx: TyCtxt<'tcx>,\n         ct: &ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         match ct.val {\n-            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.def, uv.substs(tcx)),\n+            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n         }\n@@ -564,14 +556,11 @@ pub(super) fn mir_abstract_const<'tcx>(\n \n pub(super) fn try_unify_abstract_consts<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    ((a, a_substs), (b, b_substs)): (\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n-    ),\n+    (a, b): (ty::Unevaluated<'tcx>, ty::Unevaluated<'tcx>),\n ) -> bool {\n     (|| {\n-        if let Some(a) = AbstractConst::new(tcx, a, a_substs)? {\n-            if let Some(b) = AbstractConst::new(tcx, b, b_substs)? {\n+        if let Some(a) = AbstractConst::new(tcx, a)? {\n+            if let Some(b) = AbstractConst::new(tcx, b)? {\n                 return Ok(try_unify(tcx, a, b));\n             }\n         }"}, {"sha": "6a7aafc334ba281e366871e41fdf6d029758a142", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -811,10 +811,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n \n                 match obligation.predicate.kind().skip_binder() {\n-                    ty::PredicateKind::ConstEvaluatable(def, _) => {\n+                    ty::PredicateKind::ConstEvaluatable(uv) => {\n                         let mut err =\n                             self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n-                        let const_span = self.tcx.def_span(def.did);\n+                        let const_span = self.tcx.def_span(uv.def.did);\n                         match self.tcx.sess.source_map().span_to_snippet(const_span) {\n                             Ok(snippet) => err.help(&format!(\n                                 \"try adding a `where` bound using this expression: `where [(); {}]:`\","}, {"sha": "a17921ace307cb18f6fa02a9658ee440dd16e9a3", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -543,19 +543,20 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+                ty::PredicateKind::ConstEvaluatable(uv) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.selcx.infcx(),\n-                        def_id,\n-                        substs,\n+                        uv,\n                         obligation.param_env,\n                         obligation.cause.span,\n                     ) {\n                         Ok(()) => ProcessResult::Changed(vec![]),\n                         Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n-                                substs.iter().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n+                                uv.substs(infcx.tcx)\n+                                    .iter()\n+                                    .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n                             ProcessResult::Unchanged\n                         }"}, {"sha": "dd974e6fd4f1c8046d300727c8e1b937fa850ae5", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -854,12 +854,12 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n         }\n \n         fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::PredicateKind::ConstEvaluatable(def, substs) = pred.kind().skip_binder() {\n+            if let ty::PredicateKind::ConstEvaluatable(ct) = pred.kind().skip_binder() {\n                 // FIXME(const_evaluatable_checked): We should probably deduplicate the logic for\n                 // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n                 // take a `ty::Const` instead.\n                 use rustc_middle::mir::abstract_const::Node;\n-                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, def, substs) {\n+                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, ct) {\n                     const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n                         Node::Leaf(leaf) => {\n                             let leaf = leaf.subst(self.tcx, ct.substs);"}, {"sha": "6ddc3aad1b59310d7a2758642fafed8c047afc84", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -598,11 +598,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+                ty::PredicateKind::ConstEvaluatable(uv) => {\n                     match const_evaluatable::is_const_evaluatable(\n                         self.infcx,\n-                        def_id,\n-                        substs,\n+                        uv,\n                         obligation.param_env,\n                         obligation.cause.span,\n                     ) {"}, {"sha": "75307f135636be8f9be8f425e12f9a4b6c30207e", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -132,8 +132,9 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(a.into());\n             wf.compute(b.into());\n         }\n-        ty::PredicateKind::ConstEvaluatable(def, substs) => {\n-            let obligations = wf.nominal_obligations(def.did, substs);\n+        ty::PredicateKind::ConstEvaluatable(uv) => {\n+            let substs = uv.substs(wf.tcx());\n+            let obligations = wf.nominal_obligations(uv.def.did, substs);\n             wf.out.extend(obligations);\n \n             for arg in substs.iter() {\n@@ -442,8 +443,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let obligations = self.nominal_obligations(uv.def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(uv.def, substs)\n-                                .to_predicate(self.tcx());\n+                            let predicate = ty::PredicateKind::ConstEvaluatable(\n+                                ty::Unevaluated::new(uv.def, substs),\n+                            )\n+                            .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth(\n                                 cause,"}, {"sha": "fd150978f0074d8a5c4aea01e80090906b03221a", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -236,9 +236,9 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 (\n-                    ty::PredicateKind::ConstEvaluatable(def_a, substs_a),\n-                    ty::PredicateKind::ConstEvaluatable(def_b, substs_b),\n-                ) => tcx.try_unify_abstract_consts(((def_a, substs_a), (def_b, substs_b))),\n+                    ty::PredicateKind::ConstEvaluatable(a),\n+                    ty::PredicateKind::ConstEvaluatable(b),\n+                ) => tcx.try_unify_abstract_consts((a, b)),\n                 (ty::PredicateKind::TypeOutlives(a), ty::PredicateKind::TypeOutlives(b)) => {\n                     relator.relate(predicate.rebind(a.0), p.rebind(b.0)).is_ok()\n                 }"}, {"sha": "c76566806ed86b75855093fcb1eed464a5c4e8a6", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -541,10 +541,10 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::PredicateKind::ConstEvaluatable(\n+                    ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n                         ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n                         discr_substs,\n-                    )\n+                    ))\n                     .to_predicate(tcx),\n                 ));\n             }"}, {"sha": "df050fc9adc9c6b79960767a06b1ff89981b56a9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa975c89e343cb7e51f77c2710c8460ada50532/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=caa975c89e343cb7e51f77c2710c8460ada50532", "patch": "@@ -2355,11 +2355,8 @@ fn const_evaluatable_predicates_of<'tcx>(\n             if let ty::ConstKind::Unevaluated(uv) = ct.val {\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n-                self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(uv.def, uv.substs(self.tcx))\n-                        .to_predicate(self.tcx),\n-                    span,\n-                ));\n+                self.preds\n+                    .insert((ty::PredicateKind::ConstEvaluatable(uv).to_predicate(self.tcx), span));\n             }\n         }\n "}]}